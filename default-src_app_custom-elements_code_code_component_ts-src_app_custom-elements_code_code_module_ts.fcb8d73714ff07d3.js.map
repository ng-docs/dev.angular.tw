{"version":3,"file":"default-src_app_custom-elements_code_code_component_ts-src_app_custom-elements_code_code_module_ts.fcb8d73714ff07d3.js","mappings":"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","names":["PendingCopy","constructor","text","_document","this","textarea","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","value","readOnly","fullscreenElement","body","appendChild","copy","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","focus","destroy","remove","undefined","Clipboard","document","pendingCopy","beginCopy","static","ɵfac","t","i0","DOCUMENT","ɵprov","token","factory","providedIn","_r3","ctx_r2","doCopy","ctx_r0","ariaLabel","CodeComponent","code","_code","toString","trim","formatDisplayedCode","showMissingCodeMessage","header","_header","snackbar","pretty","clipboard","logger","codeFormatted","EventEmitter","ngOnChanges","linenums","getLinenums","leftAlignedCode","leftAlign","indent","Number","MAX_VALUE","lines","split","forEach","line","lineIndent","search","Math","min","htmlSafeByReview","map","slice","join","setCodeHtml","codeText","getCodeText","skipPrettify","of","prettifyCode","formatCode","language","pipe","tap","formattedCode","warn","subscribe","next","emit","error","src","path","region","msg","el","className","textContent","fromOuterHTML","codeContainer","nativeElement","innerHTML","unwrapHtml","log","open","duration","Error","parseInt","isNaN","i1","i2","i3","i4","core","In1","selectors","viewQuery","rf","ctx","CodeComponent_button_2_Template","hideCopy","CodeModule","_angular_core__WEBPACK_IMPORTED_MODULE_1__","a4G","s3X","PrettyPrinter","imports","CommonModule","MatSnackBarModule","prettyPrintOne","from","getPrettyPrintOne","share","ppo","window","Promise","resolve","__webpack_require__","e","then","bind","err","message","console","first","_angular_core__WEBPACK_IMPORTED_MODULE_6__","wxM","Portal","attach","host","_attachedHost","detach","isAttached","setAttachedHost","ComponentPortal","component","viewContainerRef","injector","componentFactoryResolver","projectableNodes","super","TemplatePortal","templateRef","context","origin","elementRef","DomPortal","element","ElementRef","BasePortalOutlet","_isDisposed","attachDomPortal","hasAttached","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","anchorNode","createComment","parentNode","insertBefore","replaceChild","componentFactory","resolveComponentFactory","componentRef","createComponent","create","Injector","NULL","attachView","hostView","viewCount","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","rootNode","detectChanges","index","indexOf","CdkPortal","ɵdir","type","exportAs","standalone","features","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_getRootNode","attachedRef","_attachedRef","ngOnInit","ngOnDestroy","ref","clear","nodeType","ELEMENT_NODE","inputs","None","outputs","PortalModule","ɵmod","ɵinj","scrollBehaviorSupported","supportsScrollBehavior","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","_isEnabled","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","coerceCssPixelValue","classList","add","disable","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","run","overlayRef","stream","scrolled","filter","scrollable","overlayElement","getElementRef","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","getBoundingClientRect","ScrollStrategyOptions","noop","close","config","block","reposition","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BaseOverlayDispatcher","_attachedOverlays","push","splice","OverlayKeyboardDispatcher","_keydownListener","event","overlays","i","_keydownEvents","observers","keydownEvents","_isAttached","runOutsideAngular","addEventListener","removeEventListener","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","target","_outsidePointerEvents","outsidePointerEvents","_addEventListeners","IOS","_cursorOriginalValue","cursor","i1$1","OverlayContainer","_containerElement","getContainerElement","_createContainer","containerClass","isBrowser","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","container","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_animationsDisabled","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","EMPTY","_backdropClickHandler","_backdropTransitionendHandler","_disposeBackdrop","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","parentElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","onDestroy","detachBackdrop","detachmentResult","_detachContentWhenStable","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","requestAnimationFrame","nextSibling","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","coerceArray","c","subscription","takeUntil","merge","children","backdrop","clearTimeout","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","positions","_preferredPositions","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","_boundingBox","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","y","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","cssClass","Element","destination","source","hasOwnProperty","input","units","parseFloat","clientRect","floor","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","end","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","marginTop","marginBottom","parent","OverlayPositionBuilder","global","flexibleConnectedTo","nextUniqueId","Overlay","scrollStrategies","_positionBuilder","_injector","_directionality","_animationsModuleType","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","get","ApplicationRef","i5","i6","ANIMATION_MODULE_TYPE","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","InjectionToken","inject","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","OverlayModule","providers","BidiModule","ScrollingModule","SimpleSnackBar_Conditional_2_Template","_r2","ctx_r1","action","data","_c0","MatSnackBarContainer_ng_template_4_Template","MAX_TIMEOUT","pow","MatSnackBarRef","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","_finishDismiss","dismiss","closed","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","MatSnackBarLabel","hostAttrs","MatSnackBarActions","MatSnackBarAction","SimpleSnackBar","snackBarRef","hasAction","ɵcmp","decls","vars","consts","template","dependencies","MatButton","encapsulation","changeDetection","matSnackBarAnimations","snackBarState","trigger","state","transition","animate","uniqueId","MatSnackBarContainer","_elementRef","_changeDetectorRef","snackBarConfig","_trackedModals","Set","_announceDelay","_destroyed","_onAnnounce","_animationState","_liveElementId","_assertNotAttached","result","_afterPortalAttached","_live","FIREFOX","_role","onAnimationEnd","fromState","toState","_completeExit","onEnter","enter","markForCheck","_screenReaderAnnounce","_announceTimeoutId","_clearFromModals","queueMicrotask","panelClasses","Array","isArray","_exposeToModals","label","_label","labelClass","toggle","querySelector","modals","modal","ariaOwns","getAttribute","newValue","replace","removeAttribute","inertElement","liveElement","focusedElement","HTMLElement","_t","hostVars","hostBindings","$event","animation","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_openedSnackBarRef","_parentSnackBar","_snackBarRefAtThisLevel","_overlay","_breakpointObserver","_defaultConfig","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","openFromComponent","_attach","openFromTemplate","_attachSnackBarContainer","useValue","containerPortal","containerRef","instance","content","userConfig","_createOverlay","TemplateRef","$implicit","_createInjector","contentRef","observe","Breakpoints","HandsetPortrait","matches","announce","_animateSnackBar","isLeft","isRight","MatButtonModule","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/clipboard.mjs","./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts","./node_modules/@angular/cdk/fesm2022/portal.mjs","./node_modules/@angular/cdk/fesm2022/overlay.mjs","./node_modules/@angular/material/fesm2022/snack-bar.mjs"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a re-layout. This re-layout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * re-layout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = (this._textarea = this._document.createElement('textarea'));\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        // Making the textarea `readonly` prevents the screen from jumping on iOS Safari (see #25169).\n        textarea.readOnly = true;\n        // The element needs to be inserted into the fullscreen container, if the page\n        // is in fullscreen mode, otherwise the browser won't execute the copy command.\n        (this._document.fullscreenElement || this._document.body).appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try {\n            // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            textarea.remove();\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: Clipboard, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: Clipboard, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: Clipboard, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: CdkCopyToClipboard, deps: [{ token: Clipboard }, { token: i0.NgZone }, { token: CDK_COPY_TO_CLIPBOARD_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.1.1\", type: CdkCopyToClipboard, isStandalone: true, selector: \"[cdkCopyToClipboard]\", inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" }, host: { listeners: { \"click\": \"copy()\" } }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: CdkCopyToClipboard, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCopyToClipboard]',\n                    host: {\n                        '(click)': 'copy()',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: Clipboard }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_COPY_TO_CLIPBOARD_CONFIG]\n                }] }], propDecorators: { text: [{\n                type: Input,\n                args: ['cdkCopyToClipboard']\n            }], attempts: [{\n                type: Input,\n                args: ['cdkCopyToClipboardAttempts']\n            }], copied: [{\n                type: Output,\n                args: ['cdkCopyToClipboardCopied']\n            }] } });\n\nclass ClipboardModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: ClipboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.1.1\", ngImport: i0, type: ClipboardModule, imports: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: ClipboardModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: ClipboardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkCopyToClipboard],\n                    exports: [CdkCopyToClipboard],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { unwrapHtml } from 'safevalues';\nimport { htmlSafeByReview } from 'safevalues/restricted/reviewed';\nimport { fromOuterHTML } from 'app/shared/security';\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabel = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: TrustedHTML) {\n    this._code = code;\n\n    if (!this._code.toString().trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): TrustedHTML {\n    return this._code;\n  }\n  _code: TrustedHTML;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, typescript). */\n  @Input() language: string | undefined;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string | undefined;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string | undefined) {\n    this._header = header;\n    this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n  }\n  get header(): string|undefined { return this._header; }\n  private _header: string | undefined;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private clipboard: Clipboard,\n    private logger: Logger) {}\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const linenums = this.getLinenums();\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    const skipPrettify = of(undefined);\n    const prettifyCode = this.pretty\n        .formatCode(leftAlignedCode, this.language, linenums)\n        .pipe(tap(formattedCode => this.setCodeHtml(formattedCode)));\n\n    if (linenums !== false && this.language === 'none') {\n      this.logger.warn(\"Using 'linenums' with 'language: none' is currently not supported.\");\n    }\n\n    ((this.language === 'none' ? skipPrettify : prettifyCode) as Observable<unknown>)\n        .subscribe({\n          next: () => this.codeFormatted.emit(),\n          error: () => { /* ignore failure to format */ },\n        });\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n    const msg = `The code sample is missing${src ? ` for\\n${src}` : '.'}`;\n    const el = document.createElement('p');\n    el.className = 'code-missing';\n    el.textContent = msg;\n    this.setCodeHtml(fromOuterHTML(el));\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: TrustedHTML) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = unwrapHtml(formattedCode);\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.clipboard.copy(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n      this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n    }\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums() {\n    const linenums =\n      typeof this.linenums === 'boolean' ? this.linenums :\n      this.linenums === 'true' ? true :\n      this.linenums === 'false' ? false :\n      typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n      this.linenums;\n\n    return (linenums != null) && !isNaN(linenums as number) && linenums;\n  }\n}\n\nfunction leftAlign(text: TrustedHTML): TrustedHTML {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.toString().split('\\n');\n  lines.forEach(line => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return htmlSafeByReview(\n      lines.map(line => line.slice(indent)).join('\\n').trim(),\n      'safe manipulation of existing trusted HTML');\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter ]\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\nimport { htmlSafeByReview } from 'safevalues/restricted/reviewed';\n\nimport { from, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ntype PrettyPrintOne = (code: TrustedHTML, language?: string, linenums?: number|boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = from(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any).prettyPrintOne;\n    return ppo ? Promise.resolve(ppo) :\n      // `prettyPrintOne` is not on `window`, which means `prettify.js` has not been loaded yet.\n      // Import it; ad a side-effect it will add `prettyPrintOne` on `window`.\n      import('assets/js/prettify.js' as any)\n        .then(\n          () => (window as any).prettyPrintOne,\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML.\n   *\n   * @param code - the code snippet to format; should already be HTML encoded\n   * @param [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: TrustedHTML, language?: string, linenums?: number|boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return htmlSafeByReview(\n              ppo(code, language, linenums), 'prettify.js modifies already trusted HTML inline');\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.toString().slice(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n","import * as i0 from '@angular/core';\nimport { ElementRef, Injector, Directive, EventEmitter, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver, projectableNodes) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.projectableNodes = projectableNodes;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    templateRef, \n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    viewContainerRef, \n    /** Contextual data to be passed in to the embedded view. */\n    context, \n    /** The injector to use for the embedded view. */\n    injector) {\n        super();\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n        this.injector = injector;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param outletElement Element into which the content is projected.\n     * @param _componentFactoryResolver Used to resolve the component factory.\n     *   Only required when attaching component portals.\n     * @param _appRef Reference to the application. Only used in component portals when there\n     *   is no `ViewContainerRef` available.\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n     *   have one. Only used for component portals.\n     * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n     *   become a required parameter.\n     */\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n            throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n        }\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector, portal.projectableNodes || undefined);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n            }\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector || Injector.NULL);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n                if (this._appRef.viewCount > 0) {\n                    this._appRef.detachView(componentRef.hostView);\n                }\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: CdkPortal, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.1.1\", type: CdkPortal, isStandalone: true, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }] });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.1.1\", type: TemplatePortalDirective, isStandalone: true, selector: \"[cdk-portal], [portal]\", providers: [\n            {\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective,\n            },\n        ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal || null;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedRef = this._attachedPortal = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector, portal.projectableNodes || undefined);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: CdkPortalOutlet, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.1.1\", type: CdkPortalOutlet, isStandalone: true, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                    inputs: ['portal: cdkPortalOutlet'],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.1.1\", type: PortalHostDirective, isStandalone: true, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n            {\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective,\n            },\n        ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: ['portal: cdkPortalHost'],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                    standalone: true,\n                }]\n        }] });\nclass PortalModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.1.1\", ngImport: i0, type: PortalModule, imports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: PortalModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, ElementRef, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, inject, Directive, EventEmitter, booleanAttribute, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, _isTestEnvironment } from '@angular/cdk/platform';\nimport { filter, take, takeUntil, takeWhile } from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0).pipe(filter(scrollable => {\n            return (!scrollable ||\n                !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement));\n        }));\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }] });\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }] });\n\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this._containerElement?.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayContainer, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }] });\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsDisabled = _animationsDisabled;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n        // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n        // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n        if (typeof attachResult?.onDestroy === 'function') {\n            // In most cases we control the portal and we know when it is being detached so that\n            // we can finish the disposal process. The exception is if the user passes in a custom\n            // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n            // `detach` here instead of `dispose`, because we don't know if the user intends to\n            // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n            attachResult.onDestroy(() => {\n                if (this.hasAttached()) {\n                    // We have to delay the `detach` call, because detaching immediately prevents\n                    // other destroy hooks from running. This is likely a framework bug similar to\n                    // https://github.com/angular/angular/issues/46119\n                    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n                }\n            });\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        this._host?.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._animationsDisabled) {\n            this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n        }\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        if (this._animationsDisabled) {\n            this._disposeBackdrop(backdropToDetach);\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `DOMRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stretches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breaking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the DOMRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `DOMRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `DOMRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n    { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n    { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n    { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n    { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },\n    { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },\n    { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },\n];\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._alignItems = '';\n        this._xPosition = '';\n        this._xOffset = '';\n        this._width = '';\n        this._height = '';\n        this._isDisposed = false;\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'left';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'right';\n        return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    start(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'start';\n        return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    end(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._xPosition = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        const xPosition = this._xPosition;\n        const xOffset = this._xOffset;\n        const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n        let marginLeft = '';\n        let marginRight = '';\n        let justifyContent = '';\n        if (shouldBeFlushHorizontally) {\n            justifyContent = 'flex-start';\n        }\n        else if (xPosition === 'center') {\n            justifyContent = 'center';\n            if (isRtl) {\n                marginRight = xOffset;\n            }\n            else {\n                marginLeft = xOffset;\n            }\n        }\n        else if (isRtl) {\n            if (xPosition === 'left' || xPosition === 'end') {\n                justifyContent = 'flex-end';\n                marginLeft = xOffset;\n            }\n            else if (xPosition === 'right' || xPosition === 'start') {\n                justifyContent = 'flex-start';\n                marginRight = xOffset;\n            }\n        }\n        else if (xPosition === 'left' || xPosition === 'start') {\n            justifyContent = 'flex-start';\n            marginLeft = xOffset;\n        }\n        else if (xPosition === 'right' || xPosition === 'end') {\n            justifyContent = 'flex-end';\n            marginRight = xOffset;\n        }\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n        parentStyles.justifyContent = justifyContent;\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: OverlayContainer }] });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsModuleType = _animationsModuleType;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: Overlay, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }, {\n                    type: Optional\n                }] }] });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.1.1\", type: CdkOverlayOrigin, isStandalone: true, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }] });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether the overlay should be disposed of when the user goes backwards/forwards in history. */\n    get disposeOnNavigation() {\n        return this._disposeOnNavigation;\n    }\n    set disposeOnNavigation(value) {\n        this._disposeOnNavigation = value;\n    }\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        this._disposeOnNavigation = false;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Whether or not the overlay should attach a backdrop. */\n        this.hasBackdrop = false;\n        /** Whether or not the overlay should be locked when scrolling. */\n        this.lockPosition = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this.flexibleDimensions = false;\n        /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n        this.growAfterOpen = false;\n        /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n        this.push = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n            disposeOnNavigation: this.disposeOnNavigation,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.1.1\", type: CdkConnectedOverlay, isStandalone: true, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\", booleanAttribute], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\", booleanAttribute], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\", booleanAttribute], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\", booleanAttribute], push: [\"cdkConnectedOverlayPush\", \"push\", booleanAttribute], disposeOnNavigation: [\"cdkConnectedOverlayDisposeOnNavigation\", \"disposeOnNavigation\", booleanAttribute] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                }] }, { type: i5.Directionality, decorators: [{\n                    type: Optional\n                }] }], propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayHasBackdrop', transform: booleanAttribute }]\n            }], lockPosition: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayLockPosition', transform: booleanAttribute }]\n            }], flexibleDimensions: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayFlexibleDimensions', transform: booleanAttribute }]\n            }], growAfterOpen: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayGrowAfterOpen', transform: booleanAttribute }]\n            }], push: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayPush', transform: booleanAttribute }]\n            }], disposeOnNavigation: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayDisposeOnNavigation', transform: booleanAttribute }]\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nclass OverlayModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayModule, imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, inject, ViewChild, Injector, TemplateRef, Injectable, Optional, SkipSelf, NgModule } from '@angular/core';\nimport { MatButton, MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { DOCUMENT } from '@angular/common';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { takeUntil } from 'rxjs/operators';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\nclass MatSnackBarLabel {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBarLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.1.1\", type: MatSnackBarLabel, isStandalone: true, selector: \"[matSnackBarLabel]\", host: { classAttribute: \"mat-mdc-snack-bar-label mdc-snackbar__label\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBarLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarLabel]`,\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-label mdc-snackbar__label',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\nclass MatSnackBarActions {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBarActions, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.1.1\", type: MatSnackBarActions, isStandalone: true, selector: \"[matSnackBarActions]\", host: { classAttribute: \"mat-mdc-snack-bar-actions mdc-snackbar__actions\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBarActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarActions]`,\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-actions mdc-snackbar__actions',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to each of the snack bar's action buttons. */\nclass MatSnackBarAction {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBarAction, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.1.1\", type: MatSnackBarAction, isStandalone: true, selector: \"[matSnackBarAction]\", host: { classAttribute: \"mat-mdc-snack-bar-action mdc-snackbar__action\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBarAction, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarAction]`,\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-action mdc-snackbar__action',\n                    },\n                }]\n        }] });\n\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.1.1\", type: SimpleSnackBar, isStandalone: true, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-mdc-simple-snack-bar\" }, exportAs: [\"matSnackBar\"], ngImport: i0, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n@if (hasAction) {\\n  <div matSnackBarActions>\\n    <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n      {{data.action}}\\n    </button>\\n  </div>\\n}\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"], dependencies: [{ kind: \"component\", type: MatButton, selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \", exportAs: [\"matButton\"] }, { kind: \"directive\", type: MatSnackBarLabel, selector: \"[matSnackBarLabel]\" }, { kind: \"directive\", type: MatSnackBarActions, selector: \"[matSnackBarActions]\" }, { kind: \"directive\", type: MatSnackBarAction, selector: \"[matSnackBarAction]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', exportAs: 'matSnackBar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [MatButton, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction], standalone: true, host: {\n                        'class': 'mat-mdc-simple-snack-bar',\n                    }, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n@if (hasAction) {\\n  <div matSnackBarActions>\\n    <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n      {{data.action}}\\n    </button>\\n  </div>\\n}\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"] }]\n        }], ctorParameters: () => [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }] });\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\nlet uniqueId = 0;\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        this._document = inject(DOCUMENT);\n        this._trackedModals = new Set();\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /** Unique ID of the aria-live element. */\n        this._liveElementId = `mat-snack-bar-container-live-${uniqueId++}`;\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            // _animationState lives in host bindings and `detectChanges` does not refresh host bindings\n            // so we have to call `markForCheck` to ensure the host view is refreshed eventually.\n            this._changeDetectorRef.markForCheck();\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            this._changeDetectorRef.markForCheck();\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._clearFromModals();\n        this._completeExit();\n    }\n    /**\n     * Removes the element in a microtask. Helps prevent errors where we end up\n     * removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        queueMicrotask(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        this._exposeToModals();\n        // Check to see if the attached component or template uses the MDC template structure,\n        // specifically the MDC label. If not, the container should apply the MDC label class to this\n        // component's label container, which will apply MDC's label styles to the attached view.\n        const label = this._label.nativeElement;\n        const labelClass = 'mdc-snackbar__label';\n        label.classList.toggle(labelClass, !label.querySelector(`.${labelClass}`));\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live element if there is an\n     * `aria-modal` and the live element is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live element.\n     */\n    _exposeToModals() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with the\n        // `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const id = this._liveElementId;\n        const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        for (let i = 0; i < modals.length; i++) {\n            const modal = modals[i];\n            const ariaOwns = modal.getAttribute('aria-owns');\n            this._trackedModals.add(modal);\n            if (!ariaOwns) {\n                modal.setAttribute('aria-owns', id);\n            }\n            else if (ariaOwns.indexOf(id) === -1) {\n                modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n            }\n        }\n    }\n    /** Clears the references to the live element from any modals it was added to. */\n    _clearFromModals() {\n        this._trackedModals.forEach(modal => {\n            const ariaOwns = modal.getAttribute('aria-owns');\n            if (ariaOwns) {\n                const newValue = ariaOwns.replace(this._liveElementId, '').trim();\n                if (newValue.length > 0) {\n                    modal.setAttribute('aria-owns', newValue);\n                }\n                else {\n                    modal.removeAttribute('aria-owns');\n                }\n            }\n        });\n        this._trackedModals.clear();\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBarContainer, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.1.1\", type: MatSnackBarContainer, isStandalone: true, selector: \"mat-snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }, { propertyName: \"_label\", first: true, predicate: [\"label\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet />\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-text-button-state-layer-color:currentColor;--mat-text-button-ripple-color:currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], standalone: true, imports: [CdkPortalOutlet], host: {\n                        'class': 'mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet />\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-text-button-state-layer-color:currentColor;--mat-text-button-ripple-color:currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"] }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }], propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }], _label: [{\n                type: ViewChild,\n                args: ['label', { static: true }]\n            }] } });\n\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-mdc-snack-bar-handset';\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2.LiveAnnouncer }, { token: i0.Injector }, { token: i3.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBar, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }, { type: i2.LiveAnnouncer }, { type: i0.Injector }, { type: i3.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }] });\n\nconst DIRECTIVES = [MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction];\nclass MatSnackBarModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule,\n            PortalModule,\n            MatButtonModule,\n            MatCommonModule,\n            SimpleSnackBar, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction], exports: [MatCommonModule, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBarModule, providers: [MatSnackBar], imports: [OverlayModule,\n            PortalModule,\n            MatButtonModule,\n            MatCommonModule,\n            SimpleSnackBar, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.1\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        OverlayModule,\n                        PortalModule,\n                        MatButtonModule,\n                        MatCommonModule,\n                        SimpleSnackBar,\n                        ...DIRECTIVES,\n                    ],\n                    exports: [MatCommonModule, ...DIRECTIVES],\n                    providers: [MatSnackBar],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarAction, MatSnackBarActions, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n"],"x_google_ignoreList":[0,4,5,6]}
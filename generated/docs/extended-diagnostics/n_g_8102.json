{"id":"extended-diagnostics/NG8102","title":"NG8102: Nullish coalescing not nullable","contents":"<div class=\"content\">\n\n  <h1 id=\"ng8102-nullish-coalescing-not-nullable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejdsvwfok5cauqzlrbwoxu0vk\">NG8102: Nullish coalescing not nullable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#ng8102-nullish-coalescing-not-nullable\"><i class=\"material-icons\">link</i></a></h1>\n\n  <div class=\"diagnostic-description\">\n    <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"all8c7xq5q130p957tl5xz9wh\">此诊断会在 Angular 模板中检测到无用的空值合并运算符（<code>??</code>）字符。具体来说，它会查找输入不可“为空”的操作，这意味着其类型不包括 <code>null</code> 或 <code>undefined</code>。对于这样的值，<code>??</code> 的右侧永远不会被使用。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  // Template displays `foo` if present, falls back to 'bar' if it is `null`\n  // or `undefined`.\n  template: `<div>{{ foo ?? 'bar' }}</div>`,\n  // …\n})\nclass MyComponent {\n  // `foo` is declared as a `string` which *cannot* be `null` or `undefined`.\n  foo: string = 'test';\n}\n\n</code-example>\n<h2 id=\"whats-wrong-with-that\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyj3fm6hh05czc2euad3kejpb\">那有什么问题？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#whats-wrong-with-that\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ac8oecznz7xzqv0bto9lsclig\">将空值合并运算符与不可为空的输入一起使用没有任何效果，并且揭示出允许的值类型与它在模板中的渲染方式之间可能存在差异。开发人员可能会合理地假定在某些情况下会显示空值合并运算符的右侧，但它永远不会真正显示出来。这可能会导致对程序的预期输出感到困惑。</p>\n<h2 id=\"what-should-i-do-instead\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bicb9bjjdedhs8bfd5vdiby7\">我该怎么办？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#what-should-i-do-instead\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5z5levvvnvph5qw6f6d8hzs0v\">更新模板和声明的类型以同步两者。仔细检查输入的类型，并确认它是否真是可空的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dpiewxoav4u6u8ff050fmbu3\">如果输入应该是可空的，请在其类型中添加 <code>null</code> 或 <code>undefined</code> 以表明这一点。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `<div>{{ foo ?? 'bar' }}</div>`,\n  // …\n})\nclass MyComponent {\n  // `foo` is now nullable. If it is ever set to `null`, 'bar' will be displayed.\n  foo: string | null = 'test';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4br0x5ql1lj3fk54rk29l4q1y\">如果输入<em>不</em>应该为空，请删除 <code>??</code> 运算符及其右操作数，因为 TypeScript 会保证该值始终不可为空。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  // Template always displays `foo`, which is guaranteed to never be `null` or\n  // `undefined`.\n  template: `<div>{{ foo }}</div>`,\n  // …\n})\nclass MyComponent {\n  foo: string = 'test';\n}\n\n</code-example>\n<h2 id=\"configuration-requirements\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwdhyfdm5yb1t69cyimmn0hs0\">配置要求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#configuration-requirements\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mzki3k6nu128544v2a1y6zdt\">必须启用 <a href=\"guide/template-typecheck#strict-mode\"><code>strictTemplates</code></a> 才能发出任何扩展诊断。还必须启用 <a href=\"guide/template-typecheck#strict-null-checks\"><code>strictNullChecks</code></a> 才能发出任何 <code>nullishCoalescingNotNullable</code> 诊断信息。</p>\n<h2 id=\"what-if-i-cant-avoid-this\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"duupn560xw3oqrkqmgen1ccwo\">如果我无法避免这种情况怎么办？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"extended-diagnostics/NG8102#what-if-i-cant-avoid-this\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzu6yb6isvsmddbdryz1qwy7l\">可以通过编辑项目的 <code>tsconfig.json</code> 文件来禁用此诊断：</p>\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"angularCompilerOptions\": {\n    \"extendedDiagnostics\": {\n      \"checks\": {\n        \"nullishCoalescingNotNullable\": \"suppress\"\n      }\n    }\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tl6suaasu3xo2b1onvdft0o9\">有关更多信息，请参阅<a href=\"extended-diagnostics#configuration\">扩展诊断配置</a>。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  </div>\n\n</div>\n\n<!-- links to this doc:\n - extended-diagnostics\n-->\n<!-- links from this doc:\n - api/core/Component\n - extended-diagnostics#configuration\n - extended-diagnostics/NG8102#configuration-requirements\n - extended-diagnostics/NG8102#description\n - extended-diagnostics/NG8102#ng8102-nullish-coalescing-not-nullable\n - extended-diagnostics/NG8102#what-if-i-cant-avoid-this\n - extended-diagnostics/NG8102#what-should-i-do-instead\n - extended-diagnostics/NG8102#whats-wrong-with-that\n - guide/template-typecheck#strict-mode\n - guide/template-typecheck#strict-null-checks\n-->"}
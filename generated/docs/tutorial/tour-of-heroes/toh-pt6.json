{"id":"tutorial/tour-of-heroes/toh-pt6","title":"从服务端获取数据","contents":"<div class=\"content\">\n  <h1 id=\"get-data-from-a-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qvwkoeo1pv0cmtzxzpk59tdj\">从服务端获取数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#get-data-from-a-server\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2iwys9l1o71v504l6gsy8pq6\">本教程会将借助 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 来添加一些数据持久化特性。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9micj5munmqmurjcnpa8pqo5\"><code>HeroService</code> 通过 HTTP 请求获取英雄数据</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"48v44m65uf33p3cjuyz1z5jg4\">用户可以添加、编辑和删除英雄，并通过 HTTP 来保存这些更改</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rt99f3qjdqa30h7l9v6j8ixk\">用户可以根据名字搜索英雄</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5oeh6bf2o8adlc4yerbj497y\">这里所说的范例应用，参阅<live-example></live-example>。</p>\n</div>\n<h2 id=\"enable-http-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aq206hvalkmjbiiqu48od0vkb\">启用 HTTP 服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#enable-http-services\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjkyvrbpnk83mq7l71o458kio\">要让 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 在应用中随处可用，需要两个步骤。首先，用导入语句把它添加到根模块 <code>AppModule</code> 中：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l43y4q7uh45ybf9gfch80jmo\">要让 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 在应用中随处可用，需要两个步骤。首先，用导入语句把它添加到根模块 <code>AppModule</code> 中：</p>\n<code-example header=\"src/app/app.module.ts (HttpClientModule import)\" path=\"toh-pt6/src/app/app.module.ts\" region=\"import-http-client\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7brsd6cqz7e7ll41wa2h3ley8\">接下来，仍然在 <code>AppModule</code> 中，把 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 添加到 <code>imports</code> 数组中：</p>\n<code-example header=\"src/app/app.module.ts (imports array excerpt)\" path=\"toh-pt6/src/app/app.module.ts\" region=\"import-httpclientmodule\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n  ],\n})\n\n</code-example>\n<h2 id=\"simulate-a-data-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9i7v39yyxazwht3grgx8logn1\">模拟数据服务器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#simulate-a-data-server\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2w9hpqo9esdp7xucph95khb8\">通过使用内存 Web API，你不用架设服务器就可以学习 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4ohjfyo16si17kzcj2zsktzf\">安装完这个模块之后，应用将会通过 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 来发起请求和接收响应。本应用不在乎实际上是这个内存 Web API 在拦截这些请求、操作一个内存数据库，并且给出仿真的响应。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ehti9acu6ynup8j8t09epc15\">通过使用内存 Web API，你不用架设服务器就可以学习 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 了。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1328e50myq6990x3m2vyjbbf0\">如果你只是在<em>阅读</em>本教程来学习 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>，那么可以<a href=\"tutorial/toh-pt6#import-heroes\">跳过</a>这一步。\n如果你正在随着本教程<em>敲代码</em>，那就留下来，并加上这个<em>内存 Web API</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hafyop02edmhdo6rj7fvm6ai\">如果你只是在<em>阅读</em>本教程来学习 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>，那么可以<a href=\"tutorial/tour-of-heroes/toh-pt6#import-heroes\">跳过</a>这一步。\n如果你正在随着本教程<em>敲代码</em>，那就留下来，并加上这个<em>内存 Web API</em>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"al667jvgnuoew941u1iywpuzj\">用如下命令从 <code>npm</code> 中安装这个<em>内存 Web API</em> 包（译注：请使用 0.5+ 的版本，不要使用 0.4-）</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install angular-in-memory-web-api --save\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fnorar6upa9y5zipfe4ox7q5\">使用以下命令生成类 <code>src/app/in-memory-data.service.ts</code>：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service InMemoryData\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mxe6xj5waois3g0ib42635fk\">将 <code>in-memory-data.service.ts</code> 改为以下内容：</p>\n<code-example header=\"src/app/in-memory-data.service.ts\" path=\"toh-pt6/src/app/in-memory-data.service.ts\" region=\"init\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 12, name: 'Dr. Nice' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr. IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes: Hero[]): number {\n    return heroes.length &gt; 0 ? Math.max(...heroes.map(hero =&gt; hero.id)) + 1 : 11;\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yo236ye04g1kvslqj7ctfcek\">在 <code>AppModule</code> 中，导入 <code>HttpClientInMemoryWebApiModule</code> 和 <code>InMemoryDataService</code> 类，稍后你将创建它们。</p>\n<code-example header=\"src/app/app.module.ts (In-memory Web API imports)\" path=\"toh-pt6/src/app/app.module.ts\" region=\"import-in-mem-stuff\">\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService } from './in-memory-data.service';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mybakug0itg4bh8hhkxfl1cc\">在 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 之后，将 <code>HttpClientInMemoryWebApiModule</code> 添加到 <code>AppModule</code> 的 <code>imports</code> 数组中，并以 <code>InMemoryDataService</code> 为参数对其进行配置。</p>\n<code-example header=\"src/app/app.module.ts (imports array excerpt)\" path=\"toh-pt6/src/app/app.module.ts\" region=\"in-mem-web-api-imports\">\n<a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n// The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n// and returns simulated server responses.\n// Remove it when a real server is ready to receive requests.\nHttpClientInMemoryWebApiModule.forRoot(\n  InMemoryDataService, { dataEncapsulation: false }\n)\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dze1xcr8zmsv0uuciwraoanwm\">使用以下命令生成类 <code>src/app/in-memory-data.service.ts</code>：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsa8zm06ydm15h1gg80snjote\">等服务器就绪后，就可以抛弃这个内存 Web API，以便应用的请求能直接传到服务器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18wpdprcpfu05tkzecaxuxb77\">等服务器就绪后，就可以抛弃这个内存 Web API，以便应用的请求能直接传到服务器。</p>\n<p><a id=\"import-heroes\"></a></p>\n<h2 id=\"heroes-and-http\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmqhvnycl6mtof7axw2m2o0zy\">英雄与 HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#heroes-and-http\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32no1657hfvxoayqh46fay3js\">在 <code>HeroService</code> 中，导入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 和 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code>：</p>\n<code-example header=\"src/app/hero.service.ts (import HTTP symbols)\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"import-httpclient\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"657d7f9cu0fpj7jm05lxfq09b\">仍然在 <code>HeroService</code> 中，把 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到构造函数中一个名叫 <code><a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 的私有属性中。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"ctor\">\nconstructor(\n  private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n  private messageService: MessageService) { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cg7gbap2ks4yl6bybg0un8gh\">注意保留对 <code>MessageService</code> 的注入，但是因为你将频繁调用它，因此请把它包裹进一个私有的 <code>log</code> 方法中。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"log\">\n/** Log a HeroService message with the MessageService */\nprivate log(message: string) {\n  this.messageService.add(`HeroService: ${message}`);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5g60di9vllykkm05xkraj8ihf\">把服务器上英雄数据资源的访问地址 <code>heroesURL</code> 定义为 <code>:base/:collectionName</code> 的形式。这里的 <code>base</code> 是要请求的资源，而 <code>collectionName</code> 是 <code>in-memory-data-service.ts</code> 中的英雄数据对象。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"heroesUrl\">\nprivate heroesUrl = 'api/heroes';  // URL to web api\n\n</code-example>\n<h3 id=\"get-heroes-with-httpclient\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86p7ihyrbicltlwbzowapqnnr\">通过 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 获取英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#get-heroes-with-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a823qnkjxqwqgklanxc6r6bwm\">当前的 <code>HeroService.getHeroes()</code> 使用 RxJS 的 <code>of()</code> 函数来把模拟英雄数据返回为 <code>Observable&lt;Hero[]&gt;</code> 格式。</p>\n<code-example header=\"src/app/hero.service.ts (getHeroes with RxJs 'of()')\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes-1\">\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  const heroes = of(HEROES);\n  return heroes;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"180pmxencu7450ewbc4drkf6k\">把该方法转换成使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的，代码如下：</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes-1\">\n/** GET heroes from the server */\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emonqsc71ygc95pq2smck2kok\">你用 <code>http.get()</code> 替换了 <code>of()</code>，没有做其它修改，但是应用仍然在正常工作，这是因为这两个函数都返回了 <code>Observable&lt;Hero[]&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsdf7y57o46b99t6c0vedq40t\">你用 <code>http.get()</code> 替换了 <code>of()</code>，没有做其它修改，但是应用仍然在正常工作，这是因为这两个函数都返回了 <code>Observable&lt;Hero[]&gt;</code>。</p>\n<h3 id=\"httpclient-methods-return-one-value\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vngwatza9tnsryciyo043sk6\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的方法返回单个值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#httpclient-methods-return-one-value\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98pgsq1ptq8vt8ezj72hp18i0\">具体到这次 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 调用，它返回一个 <code>Observable&lt;Hero[]&gt;</code>，也就是“一个英雄数组的可观察对象”。在实践中，它也只会返回一个英雄数组。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27ajmog86gze4kij5b2do6dxv\">HTTP 是一个请求/响应式协议。你发起请求，它返回单个的响应。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"763nvaioqejvjb02cczlcar4b\">通常，<code>Observable</code> <em>可以</em>在一段时间内返回多个值。但来自 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的 <code>Observable</code> 总是发出一个值，然后结束，再也不会发出其它值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6gmigpi9loyi4ayd3h3dvqj6\">具体到这次 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 调用，它返回一个 <code>Observable&lt;Hero[]&gt;</code>，也就是“一个英雄数组的可观察对象”。在实践中，它也只会返回一个英雄数组。</p>\n<h3 id=\"httpclientget-returns-response-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dm8u3wi2df5o2nrwywft3hsiq\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 返回响应数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#httpclientget-returns-response-data\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ki9375ckok54s8eukbeb2sz\">服务器的数据 API 决定了 JSON 数据的具体形态。<em>英雄之旅</em>的数据 API 会把英雄数据作为一个数组进行返回。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36p3s25tkvctc9a8z75acofau\">服务器的数据 API 决定了 JSON 数据的具体形态。<em>英雄之旅</em>的数据 API 会把英雄数据作为一个数组进行返回。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1uud9524bbmz0ec1fxytzihn\">虽然不打算在此展开讨论，不过你可以到范例源码中的 <code>getHeroNo404()</code> 方法中找到一个使用 <code>map()</code> 操作符的例子。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99mfhuc5y4tio06zbkssgpmr8\">虽然不打算在此展开讨论，不过你可以到范例源码中的 <code>getHeroNo404()</code> 方法中找到一个使用 <code>map()</code> 操作符的例子。</p>\n</div>\n<h3 id=\"error-handling\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ad0cx4y7txhii62pgdd0mpma9\">错误处理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#error-handling\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70vjuxz1mo06ihd0lhkx1fl3s\">从 <code>rxjs/operators</code> 中导入 <code>catchError</code> 符号，以及你稍后将会用到的其它操作符。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bqhrytxny7poluded321w6u2\">要捕获错误，你就要使用 RxJS 的 <code>catchError()</code> 操作符来<strong>建立对 Observable 结果的处理管道（pipe）</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2hikcsee8jme19cwoh7z69ox\">从 <code>rxjs/operators</code> 中导入 <code>catchError</code> 符号，以及你稍后将会用到的其它操作符。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"import-rxjs-operators\">\nimport { catchError, map, tap } from 'rxjs/operators';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"buhpnywf7rx08odjv2rzzmwbh\">现在，使用 <code>pipe()</code> 方法来扩展 <code>Observable</code> 的结果，并给它一个 <code>catchError()</code> 操作符。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes-2\">\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n    .pipe(\n      catchError(this.handleError&lt;Hero[]&gt;('getHeroes', []))\n    );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kttq730rn13rm4hvzmsfx06r\">下面的 <code>handleError()</code> 方法会报告这个错误，并返回一个无害的结果（安全值），以便应用能正常工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eoigiyhanmb30ka2wknzdtc\">下面的 <code>handleError()</code> 方法会报告这个错误，并返回一个无害的结果（安全值），以便应用能正常工作。</p>\n<h4 id=\"handleerror\"><code>handleError</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#handleerror\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8h7zot8gioltcbw9de1xlzmq6\">它不再直接处理这些错误，而是返回给 <code>catchError</code> 返回一个错误处理函数。还要用操作名和出错时要返回的安全值来对这个错误处理函数进行配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0rlcdpn7slxb61u2foiqhgfl\">它不再直接处理这些错误，而是返回给 <code>catchError</code> 返回一个错误处理函数。还要用操作名和出错时要返回的安全值来对这个错误处理函数进行配置。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"handleError\">\n/**\n * Handle Http operation that failed.\n * Let the app continue.\n *\n * @param operation - name of the operation that failed\n * @param result - optional value to return as the observable result\n */\nprivate handleError&lt;T&gt;(operation = 'operation', result?: T) {\n  return (error: any): Observable&lt;T&gt; =&gt; {\n\n    // TODO: send the error to remote logging infrastructure\n    console.error(error); // log to console instead\n\n    // TODO: better job of transforming error for user consumption\n    this.log(`${operation} failed: ${error.message}`);\n\n    // Let the app keep running by returning an empty result.\n    return of(result as T);\n  };\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wncto0b8a6yh2st3wk4yyo7j\">因为每个服务方法都会返回不同类型的 <code>Observable</code> 结果，因此 <code>handleError()</code> 也需要一个类型参数，以便它返回一个此类型的安全值，正如应用所期望的那样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b43fbbfeao7d09ma1x36oaxj8\">因为每个服务方法都会返回不同类型的 <code>Observable</code> 结果，因此 <code>handleError()</code> 也需要一个类型参数，以便它返回一个此类型的安全值，正如应用所期望的那样。</p>\n<h3 id=\"tap-into-the-observable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awg3kf9mw3rvbrr7baj71sfht\">窥探 <code>Observable</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#tap-into-the-observable\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wgojbny6iu7ao97p1tyatpw\"><code>getHeroes()</code>方法利用可观察值流，并使用\n<code>log()</code>方法向页面底部的消息区域发送消息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3djpe96ot4yo3oc2xpvo29qw8\">RxJS 的 <code>tap()</code> 操作符可以通过查看 Observable 中的值来实现此功能，可以用那些值做一些事情，并且把它们传出来。这种 <code>tap()</code> 回调不会改变这些值本身。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"u46wljyr5sqejuxds9pbk4al\">下面是 <code>getHeroes()</code> 的最终版本，它使用 <code>tap()</code> 来记录各种操作。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"getHeroes\">\n/** GET heroes from the server */\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n    .pipe(\n      tap(_ =&gt; this.log('fetched heroes')),\n      catchError(this.handleError&lt;Hero[]&gt;('getHeroes', []))\n    );\n}\n\n</code-example>\n<h3 id=\"get-hero-by-id\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnr6f1pgdyjy7z99825gsxato\">通过 id 获取英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#get-hero-by-id\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6brfc05jj80zmro8cgf1pd6e\">把 <code>HeroService.getHero()</code> 方法改成这样，以发起该请求：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xxjhe0k5mkhq0uosafl6vyqu\">这里的 <code>baseURL</code> 就是在 <a href=\"tutorial/tour-of-heroes/toh-pt6#heroes-and-http\">英雄列表与 HTTP</a> 部分定义过的 <code>heroesURL</code>（在 <code>api/heroes</code> 中）。而 <code>id</code> 则是你要获取的英雄的编号，比如，<code>api/heroes/11</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f15q10yoe0h0od35gqv1ms1q7\">把 <code>HeroService.getHero()</code> 方法改成这样，以发起该请求：</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHero\">\n/** GET hero by id. Will 404 if id not found */\ngetHero(id: number): Observable&lt;Hero&gt; {\n  const url = `${this.heroesUrl}/${id}`;\n  return this.http.get&lt;Hero&gt;(url).pipe(\n    tap(_ =&gt; this.log(`fetched hero id=${id}`)),\n    catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ep1oq7e5e2l7qtppfzkmfd9pq\">这里和 <code>getHeroes()</code> 相比有三个显著的差异:</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"111noiybeszn2mp7dqf0gpkb4\"><code>getHero()</code> 使用想获取的英雄的 id 构造了一个请求 URL</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17sly1ljyb73umkw36fotcyy8\">服务器应该使用单个英雄作为回应，而不是一个英雄数组</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pjtkcv7qu6u0rbkh3xa3xogr\">所以，<code>getHero()</code> 会返回 <code>Observable&lt;Hero&gt;</code>，它是一个 <code>Hero</code> 对象类型的 Observable，而不是一个 <code>Hero</code> <em>数组</em>类型的 Observable。</li>\n</ul>\n<h2 id=\"update-heroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80tll81yanh36dqqi5wusecu1\">修改英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#update-heroes\"><i class=\"material-icons\">link</i></a></h2>\n<!-- markdownlint-disable MD001 -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49r1czpftfh9ms72jivenoke1\">在英雄详情模板的底部添加一个保存按钮，它绑定了一个 <code>click</code> 事件，事件绑定会调用组件中一个名叫 <code>save()</code> 的新方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d78nfd91eba8sjlvfbh4l3i5t\">如果你希望保留这些修改，就要把它们写回到服务器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c47107g3rxhg86p481xt644v9\">在英雄详情模板的底部添加一个保存按钮，它绑定了一个 <code>click</code> 事件，事件绑定会调用组件中一个名叫 <code>save()</code> 的新方法。</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.html (save)\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\" region=\"save\">\n&lt;button type=\"button\" (click)=\"save()\"&gt;save&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fn8o2wb4r7mlnoy9mzbxbewi\">在 <code>HeroDetail</code> 组件类中，添加如下的 <code>save()</code> 方法，它使用英雄服务中的 <code>updateHero()</code> 方法来保存对英雄名字的修改，然后导航回前一个视图。</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts (save)\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\" region=\"save\">\nsave(): void {\n  if (this.hero) {\n    this.heroService.updateHero(this.hero)\n      .subscribe(() =&gt; this.goBack());\n  }\n}\n\n</code-example>\n<h4 id=\"add-heroserviceupdatehero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wkyhr8xg5t6o7v6e0d4be0m1\">添加 <code>HeroService.updateHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#add-heroserviceupdatehero\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"880gfc715l7fwrqu0l1xbd8j7\"><code>updateHero()</code> 的总体结构和 <code>getHeroes()</code> 很相似，但它会使用 <code>http.put()</code> 来把修改后的英雄保存到服务器上。把下列代码添加进 <code>HeroService</code>。</p>\n<code-example header=\"src/app/hero.service.ts (update)\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"updateHero\">\n/** PUT: update the hero on the server */\nupdateHero(hero: Hero): Observable&lt;any&gt; {\n  return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n    tap(_ =&gt; this.log(`updated hero id=${hero.id}`)),\n    catchError(this.handleError&lt;any&gt;('updateHero'))\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8hhviylad1lfrkd1zy36f9qmu\"><code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> 方法接受三个参数：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dwejd2ahbe5ihtd0jxj3vd\">URL 地址</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3w0mjvhui54zo8r47bdjfa3ma\">要修改的数据，这里就是修改后的英雄</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyk2rtnidu0xcswyg7218m57s\">选项</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ubbbnm4519lripuvphpfedv8\">英雄 Web API 期待在保存时的请求中有一个特殊的头。这个头是在 <code>HeroService</code> 的 <code>httpOptions</code> 常量中定义的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ni4e1i4hluszx1zapjxel8xs\">英雄 Web API 期待在保存时的请求中有一个特殊的头。这个头是在 <code>HeroService</code> 的 <code>httpOptions</code> 常量中定义的。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"http-options\">\nhttpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n};\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f39k60hxl1e2lcostu7clv3rs\">刷新浏览器，修改英雄名，保存这些修改。在 <code>HeroDetailComponent</code> 的 <code>save()</code> 方法中导航到前一个视图。现在，改名后的英雄已经显示在列表中了。</p>\n<h2 id=\"add-a-new-hero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8arpbx6ig96s6l5n6p1iw2fr4\">添加一个新英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#add-a-new-hero\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aicbtlkkfqkm5eetjlmz7whb5\">把下列代码插入到 <code>HeroesComponent</code> 模板中标题的紧后面：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mlcwhy4e0hvu3om90pyzshrj\">把下列代码插入到 <code>HeroesComponent</code> 模板中标题的紧后面：</p>\n<code-example header=\"src/app/heroes/heroes.component.html (add)\" path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"add\">\n&lt;div&gt;\n  &lt;label for=\"new-hero\"&gt;Hero name: &lt;/label&gt;\n  &lt;input id=\"new-hero\" #heroName /&gt;\n\n  &lt;!-- (click) passes input value to add() and then clears the input --&gt;\n  &lt;button type=\"button\" class=\"add-button\" (click)=\"add(heroName.value); heroName.value=''\"&gt;\n    Add hero\n  &lt;/button&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtuhpqvynwdeq8u72y1npks3b\">当点击事件触发时，调用组件的点击处理器（<code>add()</code>），然后清空这个输入框，以便用来输入另一个名字。把下列代码添加到 <code>HeroesComponent</code> 类：</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (add)\" path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"add\">\nadd(name: string): void {\n  name = name.trim();\n  if (!name) { return; }\n  this.heroService.addHero({ name } as Hero)\n    .subscribe(hero =&gt; {\n      this.heroes.push(hero);\n    });\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dob1wdnmxtane4xogpifbidma\">往 <code>HeroService</code> 类中添加 <code>addHero()</code> 方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4afgzqojwyyvzvrnubdjnkndp\"><code>addHero()</code>创建一个新对象时，\n<code>subscribe()</code>回调接收新英雄并将其推入\n<code>heroes</code>列表以供显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28et5rhp5sn0mauieom760dzv\">往 <code>HeroService</code> 类中添加 <code>addHero()</code> 方法。</p>\n<code-example header=\"src/app/hero.service.ts (addHero)\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"addHero\">\n/** POST: add a new hero to the server */\naddHero(hero: Hero): Observable&lt;Hero&gt; {\n  return this.http.post&lt;Hero&gt;(this.heroesUrl, hero, this.httpOptions).pipe(\n    tap((newHero: Hero) =&gt; this.log(`added hero w/ id=${newHero.id}`)),\n    catchError(this.handleError&lt;Hero&gt;('addHero'))\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ls6eoh71fe3h96icnhnam68q\"><code>addHero()</code> 和 <code>updateHero()</code> 有两点不同。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4olmxmk3qpxbx1vpz8aaj9e8\">它调用 <code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> 而不是 <code>put()</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1o0hqit4urtxabhg12mwmw78e\">它期待服务器为这个新的英雄生成一个 id，然后把它通过 <code>Observable&lt;Hero&gt;</code> 返回给调用者。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9aglwqcmsunfqu9wl8rdo7rho\">刷新浏览器，并添加一些英雄。</p>\n<h2 id=\"delete-a-hero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aeuv8p9ba7q4c65b8tyy9gjn4\">删除某个英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#delete-a-hero\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11aoizynq85b3uwb8bqrtjdi0\">把下列按钮（<code>button</code>）元素添加到 <code>HeroesComponent</code> 的模板中，就在每个 <code>&lt;li&gt;</code> 元素中的英雄名字后方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22x5ev39gcknlkj01o626wrab\">把下列按钮（<code>button</code>）元素添加到 <code>HeroesComponent</code> 的模板中，就在每个 <code>&lt;li&gt;</code> 元素中的英雄名字后方。</p>\n<code-example header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"delete\">\n&lt;button type=\"button\" class=\"delete\" title=\"delete hero\"\n  (click)=\"delete(hero)\"&gt;x&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlpvi9zlcskc99kymxbyqc2jx\">英雄列表的 HTML 应该是这样的：</p>\n<code-example header=\"src/app/heroes/heroes.component.html (list of heroes)\" path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"list\">\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/a&gt;\n    &lt;button type=\"button\" class=\"delete\" title=\"delete hero\"\n      (click)=\"delete(hero)\"&gt;x&lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"af7cl4xdqqk20h4z1nfse3zcq\">要把删除按钮定位在每个英雄条目的最右边，就要从<a href=\"tutorial/tour-of-heroes/toh-pt6#heroescomponent\">最终代码</a> 中往 <code>heroes.component.css</code> 中添加一些 CSS。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fp7bh5eay5d13flzn8h9c2zz\">把 <code>delete()</code> 处理器添加到组件中。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (delete)\" path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"delete\">\ndelete(hero: Hero): void {\n  this.heroes = this.heroes.filter(h =&gt; h !== hero);\n  this.heroService.deleteHero(hero.id).subscribe();\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5e8m32imtdt5z36bcnkwa2nio\">接下来，把 <code>deleteHero()</code> 方法添加到 <code>HeroService</code> 中，代码如下。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9l6pmrkzirqxgphv646qvxl0a\">组件与 <code>heroService.deleteHero()</code> 返回的 <code>Observable</code> 还完全没有关联。<strong>必须订阅它</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nuzn4xjkt7gq6n10c4gffal2\">接下来，把 <code>deleteHero()</code> 方法添加到 <code>HeroService</code> 中，代码如下。</p>\n<code-example header=\"src/app/hero.service.ts (delete)\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"deleteHero\">\n/** DELETE: delete the hero from the server */\ndeleteHero(id: number): Observable&lt;Hero&gt; {\n  const url = `${this.heroesUrl}/${id}`;\n\n  return this.http.delete&lt;Hero&gt;(url, this.httpOptions).pipe(\n    tap(_ =&gt; this.log(`deleted hero id=${id}`)),\n    catchError(this.handleError&lt;Hero&gt;('deleteHero'))\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97oitraerje2bsihu8b94f4e\">注意以下关键点：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9olutpetm07dsouogpi9visli\"><code>deleteHero()</code> 调用了 <code><a href=\"api/common/http/HttpClient#delete\" class=\"code-anchor\">HttpClient.delete()</a></code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9v3usqbur6c92uvml89tq7wwq\">URL 就是英雄的资源 URL 加上要删除的英雄的 <code>id</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anlh6v7szeyryfi39zve4j2tb\">你不用像 <code>put()</code> 和 <code>post()</code> 中那样发送任何数据</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anghmug5jxe3xqktqlzkrlkfc\">你仍要发送 <code>httpOptions</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lu9m63hn0h870piddsj5naxv\">刷新浏览器并尝试新的删除特性。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"s9v82uq765b5enceptmmzyy\">你可以通过暂时移除 <code>subscribe()</code> 来确认这一点，点击 <strong>Dashboard</strong>，然后点击 <strong>Heroes</strong>。这里应该始终展示着英雄列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akxwc0o0hpitcvt0c75k5h2yc\">你可以通过暂时移除 <code>subscribe()</code> 来确认这一点，点击 <strong>Dashboard</strong>，然后点击 <strong>Heroes</strong>。这里应该始终展示着英雄列表。</p>\n</div>\n<h2 id=\"search-by-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jxapfozmpysbtuoqbmbq2zby\">根据名字搜索<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#search-by-name\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83u968f8zxgv8a8fis6yk6cmn\">在最后一次练习中，你要学到把 <code>Observable</code> 的操作符串在一起，让你能将相似 HTTP 请求的数量最小化，并节省网络带宽。</p>\n<h3 id=\"add-a-heroes-search-feature-to-the-dashboard\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqn30arn8ppyoobqsgtiq30js\">往<em>仪表盘</em>中加入<em>英雄搜索</em>特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#add-a-heroes-search-feature-to-the-dashboard\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45ppa5pjbp38gaaz7yfgup9wl\">当用户在搜索框中输入名字时，你的应用就会不断发送根据名字过滤英雄的 HTTP 请求。你的目标是仅仅发出尽可能少的必要请求。</p>\n<h4 id=\"heroservicesearchheroes\"><code>HeroService.searchHeroes()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#heroservicesearchheroes\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d8uy1mrs13b6dspk637mi5jb\">先把 <code>searchHeroes()</code> 方法添加到 <code>HeroService</code> 中。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"searchHeroes\">\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable&lt;Hero[]&gt; {\n  if (!term.trim()) {\n    // if not search term, return empty hero array.\n    return of([]);\n  }\n  return this.http.get&lt;Hero[]&gt;(`${this.heroesUrl}/?name=${term}`).pipe(\n    tap(x =&gt; x.length ?\n       this.log(`found heroes matching \"${term}\"`) :\n       this.log(`no heroes matching \"${term}\"`)),\n    catchError(this.handleError&lt;Hero[]&gt;('searchHeroes', []))\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6j2gryprmmwi3l1zucqv7bva\">如果没有搜索词，该方法立即返回一个空数组。剩下的部分和 <code>getHeroes()</code> 很像。唯一的不同点是 URL，它包含了一个由搜索词组成的查询字符串。</p>\n<h3 id=\"add-search-to-the-dashboard\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65ebyolr3o64wvhoc7374gda9\">为仪表盘添加搜索功能<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#add-search-to-the-dashboard\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1nlag9ifzkr88uyrvqvr8s7gi\">打开 <code>DashboardComponent</code> 的模板并且把用于搜索英雄的元素 <code>&lt;app-hero-search&gt;</code> 添加到代码的底部。</p>\n<code-example header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt6/src/app/dashboard/dashboard.component.html\">\n&lt;h2&gt;Top Heroes&lt;/h2&gt;\n&lt;div class=\"heroes-menu\"&gt;\n  &lt;a *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      {{hero.name}}\n  &lt;/a&gt;\n&lt;/div&gt;\n\n&lt;app-hero-search&gt;&lt;/app-hero-search&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bh9uozixr26u3r81pj1ois4pv\">为此，下一步就是添加一个组件，它的选择器要能匹配 <code>&lt;app-hero-search&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jpsd6r343httd4m2r88nehhs\">为此，下一步就是添加一个组件，它的选择器要能匹配 <code>&lt;app-hero-search&gt;</code>。</p>\n<h3 id=\"create-herosearchcomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24sxx1xa1mqc825xjoz4yath2\">创建 <code>HeroSearchComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#create-herosearchcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ds0hr81hnuttzdmpde0u5s1b5\">运行 <code>ng generate</code> 以创建一个 <code>HeroSearchComponent</code>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-search\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abdlwruy45hqvnl9ixouxpzfz\">把生成的 <code>HeroSearchComponent</code> 的<em>模板</em>改成一个 <code>&lt;input&gt;</code> 和一个匹配到的搜索结果的列表。代码如下。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3t21j3h046ijrk1gt6hsepnp9\">把生成的 <code>HeroSearchComponent</code> 的<em>模板</em>改成一个 <code>&lt;input&gt;</code> 和一个匹配到的搜索结果的列表。代码如下。</p>\n<code-example header=\"src/app/hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\">\n&lt;div id=\"search-component\"&gt;\n  &lt;label for=\"search-box\"&gt;Hero Search&lt;/label&gt;\n  &lt;input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" /&gt;\n\n  &lt;ul class=\"search-result\"&gt;\n    &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>\" &gt;\n      &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n        {{hero.name}}\n      &lt;/a&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1q0bj4m6swmo7uoruolgxp7g1\">从下面的 <a href=\"tutorial/tour-of-heroes/toh-pt6#herosearchcomponent\">最终代码</a> 中把私有 CSS 样式添加到 <code>hero-search.component.css</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ascxbibcsewcx762bak4ao54m\">当用户在搜索框中输入时，一个 <code>input</code> 事件绑定会调用该组件的 <code>search()</code> 方法，并传入新的搜索框的值。</p>\n<p><a id=\"asyncpipe\"></a></p>\n<h3 id=\"asyncpipe\"><code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#asyncpipe\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2curne3t78p7dznlz1k5i3kr\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 会重复渲染这些英雄对象。注意，<code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 在一个名叫 <code>heroes$</code> 的列表上迭代，而不是 <code>heroes</code>。<code>$</code> 是一个约定，表示 <code>heroes$</code> 是一个 <code>Observable</code> 而不是数组。</p>\n<code-example header=\"src/app/hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" region=\"async\">\n&lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>\" &gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hh504m0kizh4mdflhjonreve\">由于 \n<code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 无法处理 \n<code>Observable</code>，请使用管道符 \n<code>|</code>，然后跟上 \n<code>async</code>。 这标识了 Angular 的 \n<code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 并自动订阅一个 \n<code>Observable</code>，这样你就不需要在组件类中手动订阅。</p>\n<h3 id=\"edit-the-herosearchcomponent-class\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63c7oesy9mpdhqdgavk5dk3z9\">修正 <code>HeroSearchComponent</code> 类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#edit-the-herosearchcomponent-class\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmrhhmdqx6afg6bmeh3bhj919\">修改所生成的 <code>HeroSearchComponent</code> 类及其元数据，代码如下。</p>\n<code-example header=\"src/app/hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$!: Observable&lt;Hero[]&gt;;\n  private searchTerms = new Subject&lt;string&gt;();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push a search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) =&gt; this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mchelbr3yw5nsuarx9xcpjo4\">注意，<code>heroes$</code> 声明为一个 <code>Observable</code></p>\n<code-example header=\"src/app/hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"heroes-stream\">\nheroes$!: Observable&lt;Hero[]&gt;;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"g2rsqqmvljqq9nuvxkqo3449\">你将会在 <a href=\"tutorial/tour-of-heroes/toh-pt6#search-pipe\"><code>ngOnInit()</code></a> 中设置它，在此之前，先仔细看看 <code>searchTerms</code> 的定义。</p>\n<h3 id=\"the-searchterms-rxjs-subject\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wwxy47n6w8wmji4ov2ku4sn6\">RxJS <code>Subject</code> 类型的 <code>searchTerms</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#the-searchterms-rxjs-subject\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37wwo2hm2indea1r5klvga4oc\"><code>searchTerms</code> 属性是 RxJS 的 <code>Subject</code> 类型。</p>\n<code-example header=\"src/app/hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"searchTerms\">\nprivate searchTerms = new Subject&lt;string&gt;();\n\n// Push a search term into the observable stream.\nsearch(term: string): void {\n  this.searchTerms.next(term);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"capeygtgff45orjy74logm7ok\">文本框的 <code>input</code> 事件的<em>事件绑定</em>会调用 <code>search()</code> 方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1idl531f8ccvahytk1cnn6jgb\">你还可以通过调用它的 <code>next(value)</code> 方法往 <code>Observable</code> 中推送一些值，就像 <code>search()</code> 方法中一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3mc8g4y34aer123j3cqk6kze\">文本框的 <code>input</code> 事件的<em>事件绑定</em>会调用 <code>search()</code> 方法。</p>\n<code-example header=\"src/app/hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" region=\"input\">\n&lt;input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" /&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3iipn5n8h8vmlx40jpnrxr67\">每当用户在文本框中输入时，这个事件绑定就会使用文本框的值（搜索词）调用 <code>search()</code> 函数。<code>searchTerms</code> 变成了一个能发出搜索词的稳定的流。</p>\n<p><a id=\"search-pipe\"></a></p>\n<h3 id=\"chaining-rxjs-operators\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vrqfqepug5rs0cea0b7e63g2\">串联 RxJS 操作符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#chaining-rxjs-operators\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d6vrophqbab68q9q6dlj3umbq\">如果每当用户按键后就直接调用 <code>searchHeroes()</code> 将导致创建海量的 HTTP 请求，浪费服务器资源并干扰数据调度计划。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1ok116cb9k47xjcx8kymrwcx\">应该怎么做呢？<code>ngOnInit()</code> 往 <code>searchTerms</code> 这个可观察对象的处理管道中加入了一系列 RxJS 操作符，用以缩减对 <code>searchHeroes()</code> 的调用次数。最终，它返回一个可及时给出英雄搜索结果的可观察对象，这里每次都是 <code>Hero[]</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2etchxpsss17oi80m1rjvpgb9\">代码如下。</p>\n<code-example header=\"src/app/hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"search\">\nthis.heroes$ = this.searchTerms.pipe(\n  // wait 300ms after each keystroke before considering the term\n  debounceTime(300),\n\n  // ignore new term if same as previous term\n  distinctUntilChanged(),\n\n  // switch to new search observable each time the term changes\n  switchMap((term: string) =&gt; this.heroService.searchHeroes(term)),\n);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ers95fjfgucvupitnawq78nnh\">各个操作符的工作方式如下：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ot4tts82p9s2vd6o8oi2bmeu\">在传出最终字符串之前，<code>debounceTime(300)</code> 将会等待，直到新增字符串的事件暂停了 300 毫秒。你实际发起请求的间隔永远不会小于 300ms。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"et8uiwlmbl6m6j80fo30qi2u8\"><code>distinctUntilChanged()</code> 会确保只在过滤条件变化时才发送请求。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ge99annsghpj7bjkeyu66evj\"><code>switchMap()</code> 会为每个从 <code>debounce()</code> 和 <code>distinctUntilChanged()</code> 中通过的搜索词调用搜索服务。它会取消并丢弃以前的搜索可观察对象，只保留最近的。</p>\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b61ldqp34jt0ve22hdopjbqxz\">使用 \n<a href=\"https://www.learnrxjs.io/learn-rxjs/operators/transformation/switchmap\"><code>switchMap</code> 操作符</a>，每个符合条件的按键事件都可以触发一个 \n<code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 方法调用。 即使在请求之间有 300 毫秒的暂停，你可能会有许多 HTTP 请求同时进行，它们可能不会按照发送顺序返回。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"353bd555wdpfcu39zdrppmfr7\"><code>switchMap()</code> 会记住原始的请求顺序，只会返回最近一次 HTTP 方法调用的结果。以前的那些请求都会被取消和舍弃。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fv11998qdqug3husdw123f61\"><strong>注意</strong>：<br>\n取消前一个 <code>searchHeroes()</code> 可观察对象并不会中止尚未完成的 HTTP 请求。那些不想要的结果只会在它们抵达应用代码之前被舍弃。</p>\n</div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wci87ffeb4304ty5vnxomazu\">记住，组件类中并没有订阅 <code>heroes$</code> 这个可观察对象，而是由模板中的 <a href=\"tutorial/tour-of-heroes/toh-pt6#asyncpipe\"><code>AsyncPipe</code></a> 完成的。</p>\n<h4 id=\"try-it\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5o8k80g83w0jrloe187y9vxwi\">试试看<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#try-it\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56emk2qkw3jkb6nk6qw7ijv8j\">再次运行本应用。在这个 <em>仪表盘</em> 中，在搜索框中输入一些文字。如果你输入的字符匹配上了任何现有英雄的名字，你将会看到如下效果。</p>\n<div class=\"lightbox\">\n<img alt=\"Hero Search field with the letters 'm' and 'a' along with four search results that match the query displayed in a list beneath the search input\" src=\"generated/images/guide/toh/toh-hero-search.gif\" width=\"400\" height=\"299\">\n</div>\n<h2 id=\"final-code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9wa7wkqdj6wmwmxq53bbnpvt\">查看最终代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kr98pq6w5jegxiwggriaismh\">本文讨论过的代码文件如下。它们都位于 <code>src/app/</code> 文件夹中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3g1yty007vd10h86v2mif2mg\"><a id=\"heroservice\"></a>\n<a id=\"inmemorydataservice\"></a></p>\n<p><a id=\"appmodule\"></a></p>\n<h3 id=\"heroservice-inmemorydataservice-appmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4j5zvt7okeyi4zftoz7nkf7\"><code>HeroService</code>、\n<code>InMemoryDataService</code>、\n<code>AppModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#heroservice-inmemorydataservice-appmodule\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { MessageService } from './message.service';\n\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({ providedIn: 'root' })\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n  httpOptions = {\n    headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n    private messageService: MessageService) { }\n\n  /** GET heroes from the server */\n  getHeroes(): Observable&lt;Hero[]&gt; {\n    return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n      .pipe(\n        tap(_ =&gt; this.log('fetched heroes')),\n        catchError(this.handleError&lt;Hero[]&gt;('getHeroes', []))\n      );\n  }\n\n  /** GET hero by id. Return `undefined` when id not found */\n  getHeroNo404&lt;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>&gt;(id: number): Observable&lt;Hero&gt; {\n    const url = `${this.heroesUrl}/?id=${id}`;\n    return this.http.get&lt;Hero[]&gt;(url)\n      .pipe(\n        map(heroes =&gt; heroes[0]), // returns a {0|1} element array\n        tap(h =&gt; {\n          const outcome = h ? 'fetched' : 'did not find';\n          this.log(`${outcome} hero id=${id}`);\n        }),\n        catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))\n      );\n  }\n\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id: number): Observable&lt;Hero&gt; {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get&lt;Hero&gt;(url).pipe(\n      tap(_ =&gt; this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))\n    );\n  }\n\n  /* GET heroes whose name contains search term */\n  searchHeroes(term: string): Observable&lt;Hero[]&gt; {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get&lt;Hero[]&gt;(`${this.heroesUrl}/?name=${term}`).pipe(\n      tap(x =&gt; x.length ?\n         this.log(`found heroes matching \"${term}\"`) :\n         this.log(`no heroes matching \"${term}\"`)),\n      catchError(this.handleError&lt;Hero[]&gt;('searchHeroes', []))\n    );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add a new hero to the server */\n  addHero(hero: Hero): Observable&lt;Hero&gt; {\n    return this.http.post&lt;Hero&gt;(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap((newHero: Hero) =&gt; this.log(`added hero w/ id=${newHero.id}`)),\n      catchError(this.handleError&lt;Hero&gt;('addHero'))\n    );\n  }\n\n  /** DELETE: delete the hero from the server */\n  deleteHero(id: number): Observable&lt;Hero&gt; {\n    const url = `${this.heroesUrl}/${id}`;\n\n    return this.http.delete&lt;Hero&gt;(url, this.httpOptions).pipe(\n      tap(_ =&gt; this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError&lt;Hero&gt;('deleteHero'))\n    );\n  }\n\n  /** PUT: update the hero on the server */\n  updateHero(hero: Hero): Observable&lt;any&gt; {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap(_ =&gt; this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError&lt;any&gt;('updateHero'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError&lt;T&gt;(operation = 'operation', result?: T) {\n    return (error: any): Observable&lt;T&gt; =&gt; {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log a HeroService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"in-memory-data.service.ts\" path=\"toh-pt6/src/app/in-memory-data.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 12, name: 'Dr. Nice' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr. IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes: Hero[]): number {\n    return heroes.length &gt; 0 ? Math.max(...heroes.map(hero =&gt; hero.id)) + 1 : 11;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app.module.ts\" path=\"toh-pt6/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService } from './in-memory-data.service';\n\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroSearchComponent } from './hero-search/hero-search.component';\nimport { MessagesComponent } from './messages/messages.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n    // The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n    // and returns simulated server responses.\n    // Remove it when a real server is ready to receive requests.\n    HttpClientInMemoryWebApiModule.forRoot(\n      InMemoryDataService, { dataEncapsulation: false }\n    )\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent,\n    HeroSearchComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"heroescomponent\"></a></p>\n<h3 id=\"heroescomponent\"><code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"heroes/heroes.component.html\" path=\"toh-pt6/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n\n&lt;div&gt;\n  &lt;label for=\"new-hero\"&gt;Hero name: &lt;/label&gt;\n  &lt;input id=\"new-hero\" #heroName /&gt;\n\n  &lt;!-- (click) passes input value to add() and then clears the input --&gt;\n  &lt;button type=\"button\" class=\"add-button\" (click)=\"add(heroName.value); heroName.value=''\"&gt;\n    Add hero\n  &lt;/button&gt;\n&lt;/div&gt;\n\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/a&gt;\n    &lt;button type=\"button\" class=\"delete\" title=\"delete hero\"\n      (click)=\"delete(hero)\"&gt;x&lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n\n</code-pane>\n    <code-pane header=\"heroes/heroes.component.ts\" path=\"toh-pt6/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n\n  add(name: string): void {\n    name = name.trim();\n    if (!name) { return; }\n    this.heroService.addHero({ name } as Hero)\n      .subscribe(hero =&gt; {\n        this.heroes.push(hero);\n      });\n  }\n\n  delete(hero: Hero): void {\n    this.heroes = this.heroes.filter(h =&gt; h !== hero);\n    this.heroService.deleteHero(hero.id).subscribe();\n  }\n\n}\n\n\n</code-pane>\n    <code-pane header=\"heroes/heroes.component.css\" path=\"toh-pt6/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n\ninput {\n  display: block;\n  width: 100%;\n  padding: .5rem;\n  margin: 1rem 0;\n  box-sizing: border-box;\n}\n\n.heroes li {\n  position: relative;\n  cursor: pointer;\n}\n\n.heroes li:hover {\n  left: .1em;\n}\n\n.heroes a {\n  color: #333;\n  text-decoration: none;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n  display: block;\n  width: 100%;\n}\n\n.heroes a:hover {\n  color: #2c3a41;\n  background-color: #e6e6e6;\n}\n\n.heroes a:active {\n  background-color: #525252;\n  color: #fafafa;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #405061;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  min-width: 16px;\n  text-align: right;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n.add-button {\n padding: .5rem 1.5rem;\n font-size: 1rem;\n margin-bottom: 2rem;\n}\n\n.add-button:hover {\n  color: white;\n  background-color: #42545C;\n}\n\nbutton.delete {\n  position: absolute;\n  left: 210px;\n  top: 5px;\n  background-color: white;\n  color:  #525252;\n  font-size: 1.1rem;\n  margin: 0;\n  padding: 1px 10px 3px 10px;\n}\n\nbutton.delete:hover {\n  background-color: #525252;\n  color: white;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"herodetailcomponent\"></a></p>\n<h3 id=\"herodetailcomponent\"><code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#herodetailcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"hero-detail/hero-detail.component.html\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n  &lt;h2&gt;{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n    &lt;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"Hero name\"/&gt;\n  &lt;/div&gt;\n  &lt;button type=\"button\" (click)=\"goBack()\"&gt;go back&lt;/button&gt;\n  &lt;button type=\"button\" (click)=\"save()\"&gt;save&lt;/button&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"hero-detail/hero-detail.component.ts\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: [ './hero-detail.component.css' ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero | undefined;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private heroService: HeroService,\n    private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n  ) {}\n\n  ngOnInit(): void {\n    this.getHero();\n  }\n\n  getHero(): void {\n    const id = parseInt(this.route.snapshot.paramMap.get('id')!, 10);\n    this.heroService.getHero(id)\n      .subscribe(hero =&gt; this.hero = hero);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n\n  save(): void {\n    if (this.hero) {\n      this.heroService.updateHero(this.hero)\n        .subscribe(() =&gt; this.goBack());\n    }\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-detail/hero-detail.component.css\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.css\">\n/* HeroDetailComponent's private CSS styles */\nlabel {\n  color: #435960;\n  font-weight: bold;\n}\ninput {\n  font-size: 1em;\n  padding: .5rem;\n}\nbutton {\n  margin-top: 20px;\n  margin-right: .5rem;\n  background-color: #eee;\n  padding: 1rem;\n  border-radius: 4px;\n  font-size: 1rem;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\nbutton:disabled {\n  background-color: #eee;\n  color: #ccc;\n  cursor: auto;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"dashboardcomponent\"></a></p>\n<h3 id=\"dashboardcomponent\"><code>DashboardComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#dashboardcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"dashboard/dashboard.component.html\" path=\"toh-pt6/src/app/dashboard/dashboard.component.html\">\n&lt;h2&gt;Top Heroes&lt;/h2&gt;\n&lt;div class=\"heroes-menu\"&gt;\n  &lt;a *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      {{hero.name}}\n  &lt;/a&gt;\n&lt;/div&gt;\n\n&lt;app-hero-search&gt;&lt;/app-hero-search&gt;\n\n\n</code-pane>\n    <code-pane header=\"dashboard/dashboard.component.ts\" path=\"toh-pt6/src/app/dashboard/dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"dashboard/dashboard.component.css\" path=\"toh-pt6/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent's private CSS styles */\n\nh2 {\n  text-align: center;\n}\n\n.heroes-menu {\n  padding: 0;\n  margin: auto;\n  max-width: 1000px;\n\n  /* flexbox */\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-content: flex-start;\n  align-items: flex-start;\n}\n\na {\n  background-color: #3f525c;\n  border-radius: 2px;\n  padding: 1rem;\n  font-size: 1.2rem;\n  text-decoration: none;\n  display: inline-block;\n  color: #fff;\n  text-align: center;\n  width: 100%;\n  min-width: 70px;\n  margin: .5rem auto;\n  box-sizing: border-box;\n\n  /* flexbox */\n  order: 0;\n  flex: 0 1 auto;\n  align-self: auto;\n}\n\n@media (min-width: 600px) {\n  a {\n    width: 18%;\n    box-sizing: content-box;\n  }\n}\n\na:hover {\n  background-color: black;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"herosearchcomponent\"></a></p>\n<h3 id=\"herosearchcomponent\"><code>HeroSearchComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#herosearchcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\">\n&lt;div id=\"search-component\"&gt;\n  &lt;label for=\"search-box\"&gt;Hero Search&lt;/label&gt;\n  &lt;input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" /&gt;\n\n  &lt;ul class=\"search-result\"&gt;\n    &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>\" &gt;\n      &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n        {{hero.name}}\n      &lt;/a&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$!: Observable&lt;Hero[]&gt;;\n  private searchTerms = new Subject&lt;string&gt;();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push a search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) =&gt; this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-search/hero-search.component.css\" path=\"toh-pt6/src/app/hero-search/hero-search.component.css\">\n/* HeroSearch private styles */\n\nlabel {\n  display: block;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin-top: 1rem;\n  margin-bottom: .5rem;\n\n}\ninput {\n  padding: .5rem;\n  width: 100%;\n  max-width: 600px;\n  box-sizing: border-box;\n  display: block;\n}\n\ninput:focus {\n  outline: #336699 auto 1px;\n}\n\nli {\n  list-style-type: none;\n}\n.search-result li a {\n  border-bottom: 1px solid gray;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n  display: inline-block;\n  width: 100%;\n  max-width: 600px;\n  padding: .5rem;\n  box-sizing: border-box;\n  text-decoration: none;\n  color: black;\n}\n\n.search-result li a:hover {\n  background-color: #435A60;\n  color: white;\n}\n\nul.search-result {\n  margin-top: 0;\n  padding-left: 0;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\">总结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt6#summary\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajilzna3wjb7lmdh40fcvf61d\">旅程即将结束，不过你已经收获颇丰。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hrlr37xmub2wdniicr8uchwz\">你添加了在应用程序中使用 HTTP 的必备依赖</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kokxsq5d9ptukmgflddjosqk\">你重构了 <code>HeroService</code>，以通过 web API 来加载英雄数据</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94f44axwngtjzltzks7rkn5iu\">你扩展了 <code>HeroService</code> 来支持 <code>post()</code>、<code>put()</code> 和 <code>delete()</code> 方法</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1v2h37ly6gb8qp3fld4jsdvea\">你修改了组件，以允许用户添加、编辑和删除英雄</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30205v0xkkqhikc74r0iv6n0m\">你配置了一个内存 Web API</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b3gav08u9slhhalj4j54b5tp\">你学会了如何使用“可观察对象”</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlj4y86fwecqg7lviisevsww0\">《英雄之旅》教程结束了。如果你准备开始学习 Angular 开发的原理，请开始 <a href=\"guide/architecture\" title=\"Architecture\">架构</a> 一章。</p>\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/localizing-angular\n - tutorial/tour-of-heroes/toh-pt4\n - tutorial/tour-of-heroes/toh-pt5\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/Location\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#delete\n - api/common/http/HttpClient#get\n - api/common/http/HttpClient#post\n - api/common/http/HttpClient#put\n - api/common/http/HttpClientModule\n - api/common/http/HttpHeaders\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/platform-browser/animations/async\n - api/router/ActivatedRoute\n - api/router/Data\n - api/router/RouterLink\n - guide/architecture\n - tutorial/tour-of-heroes/toh-pt6#add-a-heroes-search-feature-to-the-dashboard\n - tutorial/tour-of-heroes/toh-pt6#add-a-new-hero\n - tutorial/tour-of-heroes/toh-pt6#add-heroserviceupdatehero\n - tutorial/tour-of-heroes/toh-pt6#add-search-to-the-dashboard\n - tutorial/tour-of-heroes/toh-pt6#asyncpipe\n - tutorial/tour-of-heroes/toh-pt6#chaining-rxjs-operators\n - tutorial/tour-of-heroes/toh-pt6#create-herosearchcomponent\n - tutorial/tour-of-heroes/toh-pt6#dashboardcomponent\n - tutorial/tour-of-heroes/toh-pt6#delete-a-hero\n - tutorial/tour-of-heroes/toh-pt6#edit-the-herosearchcomponent-class\n - tutorial/tour-of-heroes/toh-pt6#enable-http-services\n - tutorial/tour-of-heroes/toh-pt6#error-handling\n - tutorial/tour-of-heroes/toh-pt6#final-code-review\n - tutorial/tour-of-heroes/toh-pt6#get-data-from-a-server\n - tutorial/tour-of-heroes/toh-pt6#get-hero-by-id\n - tutorial/tour-of-heroes/toh-pt6#get-heroes-with-httpclient\n - tutorial/tour-of-heroes/toh-pt6#handleerror\n - tutorial/tour-of-heroes/toh-pt6#herodetailcomponent\n - tutorial/tour-of-heroes/toh-pt6#heroes-and-http\n - tutorial/tour-of-heroes/toh-pt6#heroescomponent\n - tutorial/tour-of-heroes/toh-pt6#herosearchcomponent\n - tutorial/tour-of-heroes/toh-pt6#heroservice-inmemorydataservice-appmodule\n - tutorial/tour-of-heroes/toh-pt6#heroservicesearchheroes\n - tutorial/tour-of-heroes/toh-pt6#httpclient-methods-return-one-value\n - tutorial/tour-of-heroes/toh-pt6#httpclientget-returns-response-data\n - tutorial/tour-of-heroes/toh-pt6#import-heroes\n - tutorial/tour-of-heroes/toh-pt6#search-by-name\n - tutorial/tour-of-heroes/toh-pt6#search-pipe\n - tutorial/tour-of-heroes/toh-pt6#simulate-a-data-server\n - tutorial/tour-of-heroes/toh-pt6#summary\n - tutorial/tour-of-heroes/toh-pt6#tap-into-the-observable\n - tutorial/tour-of-heroes/toh-pt6#the-searchterms-rxjs-subject\n - tutorial/tour-of-heroes/toh-pt6#try-it\n - tutorial/tour-of-heroes/toh-pt6#update-heroes\n - https://github.com/angular/angular/tree/main/packages/misc/angular-in-memory-web-api\n - https://www.learnrxjs.io/learn-rxjs/operators/transformation/switchmap\n-->"}
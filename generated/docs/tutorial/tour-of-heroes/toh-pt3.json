{"id":"tutorial/tour-of-heroes/toh-pt3","title":"主从组件","contents":"<div class=\"content\">\n  <h1 id=\"create-a-feature-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5kejk8q387nxcfdqwilu1kqi\">主从组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#create-a-feature-component\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1s4b3h0s3mqgr4jmy4pjpddo\">此刻，<code>HeroesComponent</code> 同时显示了英雄列表和所选英雄的详情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kemkhozvh1qb2kybedlygwcf\">把所有特性都放在同一个组件中，将会使应用“长大”后变得不可维护。你要把大型组件拆分成小一点的子组件，每个子组件都要集中精力处理某个特定的任务或工作流。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xewzv7q9yf2c87kvb9n37vzd\">第一步是把英雄详情移入一个独立的、可复用的 <code>HeroDetailComponent</code>。最终将：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3c7oby1to37632s0b8wpn1tp\"><code>HeroesComponent</code> 用来展示英雄列表。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coeml6ko8o53zgxdd2f3uu6gd\"><code>HeroDetailComponent</code> 用来展示所选英雄的详情。</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5oeh6bf2o8adlc4yerbj497y\">这里所说的范例应用，参阅<live-example></live-example>。</p>\n</div>\n<h2 id=\"make-the-herodetailcomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4x9vlisbadml1h2uss1wn0e4\">制作 <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#make-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9puoi4bxntqb2j9whdin84s8s\">使用 <code>ng generate</code> 创建一个名叫 <code>hero-detail</code> 的新组件。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-detail\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enmo2nh6yirmfs4upkm4z1c2l\">这个命令会做这些事：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6bq49uyf8j8ydyd5l4cib5np\">创建目录 <code>src/app/hero-detail</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cftdz3d9vq0kqwsd19nur2rw\">在这个目录中会生成四个文件：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbsnstgwjqsgbz9gtade4ab2d\">作为组件样式的 CSS 文件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3swgopbnmwnrfrxqlban33fcc\">作为组件模板的 HTML 文件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d8gzv5wfei748ybtsxpo0a28i\">存放组件类 <code>HeroDetailComponent</code> 的 TypeScript 文件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gk7te7zjnf24fzya0cqf1i5e\"><code>HeroDetailComponent</code> 类的测试文件。</li>\n</ul>\n<h3 id=\"write-the-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68b1g1uy19c3k8j49mdqfgma1\">编写模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#write-the-template\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lzlbf5c08phndo1hy75twnqf\">从 <code>HeroesComponent</code> 模板的底部把表示英雄详情的 HTML 代码剪切粘贴并覆盖 <code>HeroDetailComponent</code> 模板的样板代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1fp6qbqqwkc1p2co8ey2vijq\">所粘贴的 HTML 引用了 <code>selectedHero</code>。新的 <code>HeroDetailComponent</code> 可以展示<em>任意</em>英雄，而不仅仅所选的。把模板中的所有 <code>selectedHero</code> 替换为 <code>hero</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewjgn7osy445i0ywrdpugjv3u\">完工之后，<code>HeroDetailComponent</code> 的模板应该是这样的：</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n\n  &lt;h2&gt;{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n    &lt;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"&gt;\n  &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<h3 id=\"add-the-input-hero-property\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ppk7hgxqjegn4u4xd583jxcw\">添加 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero</code> 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#add-the-input-hero-property\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53qj67moxzjqz0ag57inlll71\"><code>HeroDetailComponent</code> 模板中绑定了组件中的 <code>hero</code> 属性，它的类型是 <code>Hero</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19m4niaao5ep0yvf3bbcmudqc\">打开 <code>HeroDetailComponent</code> 类文件，并导入 <code>Hero</code> 符号。</p>\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"import-hero\" header=\"src/app/hero-detail/hero-detail.component.ts (import Hero)\">\nimport {Hero} from '../hero';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2j72s9e26szbmx84t26b31r0a\"><code>hero</code> 属性<a href=\"guide/inputs-outputs\" title=\"Input and Output properties\">必须是一个带有 <code>@Input()</code> 装饰器的输入属性</a>，因为<em>外部的</em> <code>HeroesComponent</code> 组件<a href=\"tutorial/tour-of-heroes/toh-pt3#heroes-component-template\">会绑定到它</a>。就像这样：</p>\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" region=\"hero-detail-binding\">\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qzw1yi16qgnjg5czlrt4l38l\">修改 <code>@angular/core</code> 的导入语句，导入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 符号。</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts (import Input)\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"import-input\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>} from '@angular/core';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4claciqgruu1yhyt17v8e6xn1\">添加一个带有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器的 <code>hero</code> 属性。</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"input-hero\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero?: Hero;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"67gdlkdeqd6w2rnkhdsn3hnpp\">这就是你要对 <code>HeroDetailComponent</code> 类做的唯一一项修改。没有其它属性，也没有展示逻辑。这个组件所做的只是通过 <code>hero</code> 属性接收一个英雄对象，并显示它。</p>\n<h2 id=\"show-the-herodetailcomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6eiw3tr0s2gczbhi7hlb74i2v\">显示 <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#show-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azeymoj9m9s4fzqnnescofnhh\"><code>HeroesComponent</code> 会自行显示英雄的详情，但后面我们要移除这部分。本节会指导你把这部分逻辑委派给 <code>HeroDetailComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qncgzyvnwof92vpmkyrybz1q\">这两个组件将会具有父子关系。当用户从列表中选择了某个英雄时，父组件 <code>HeroesComponent</code> 将通过把要显示的新英雄发送给子组件 <code>HeroDetailComponent</code>，来控制子组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4v5gkg2ep56flji5akby5qac9\">你不用修改 <code>HeroesComponent</code> <em>类</em>，但是要修改它的<em>模板</em>。</p>\n<p><a id=\"heroes-component-template\"></a></p>\n<h3 id=\"update-the-heroescomponent-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qqk2htdsh69je217qw6qsels\">修改 <code>HeroesComponent</code> 的模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#update-the-heroescomponent-template\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61x19g7szsnt4lh6gtrtplewx\"><code>HeroDetailComponent</code> 的选择器是 <code>'app-hero-detail'</code>。把 <code>&lt;app-hero-detail&gt;</code> 添加到 <code>HeroesComponent</code> 模板的底部，以便把英雄详情的视图显示到那里。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ld4452nvr64eazyaj2cbzcpz\">把 <code>HeroesComponent.selectedHero</code> 绑定到该元素的 <code>hero</code> 属性，就像这样。</p>\n<code-example header=\"heroes.component.html (HeroDetail binding)\" path=\"toh-pt3/src/app/heroes/heroes.component.html\" region=\"hero-detail-binding\">\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d29n8vqxh6byxcv652qkvbmzz\"><code>[hero]=\"selectedHero\"</code> 是 Angular 的<a href=\"guide/property-binding\">属性绑定</a>语法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7570vrer8528zlgt0cn2fllcb\">这是一种<em>单向</em>数据绑定。从 <code>HeroesComponent</code> 的 <code>selectedHero</code> 属性绑定到目标元素的 <code>hero</code> 属性，并映射到了 <code>HeroDetailComponent</code> 的 <code>hero</code> 属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0o5qc259crdpv1t7isegp77b\">现在，当用户在列表中点击某个英雄时，<code>selectedHero</code> 就改变了。当 <code>selectedHero</code> 改变时，<em>属性绑定</em>会修改 <code>HeroDetailComponent</code> 的 <code>hero</code> 属性，<code>HeroDetailComponent</code> 就会显示这个新的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n0ht7xc919qiykk8uuc8nq64\">修改后的 <code>HeroesComponent</code> 的模板是这样的：</p>\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" header=\"heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;button [class.selected]=\"hero === selectedHero\" type=\"button\" (click)=\"onSelect(hero)\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n      &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n    &lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b36m58y4ti14oun7fae3g2p1o\">浏览器刷新，应用又像以前一样开始工作了。</p>\n<h2 id=\"what-changed\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"129c0mke7q6idq4icxw73dvwu\">有哪些变化？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#what-changed\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6f96a5h908it76rodtaee826b\">像<a href=\"tutorial/tour-of-heroes/toh-pt2\">以前</a>一样，一旦用户点击了一个英雄的名字，该英雄的详情就显示在了英雄列表下方。现在，<code>HeroDetailComponent</code> 负责显示那些详情，而不再是 <code>HeroesComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e45v8rid6w43qvzj15ubjyht5\">把原来的 <code>HeroesComponent</code> 重构成两个组件带来了一些优点，无论是现在还是未来：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqnmbypkrzsf5i78vzv1if9zi\">你通过缩减 <code>HeroesComponent</code> 的职责缩小了该组件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5ob7i7xzyria06e2ag1q45b9\">你可以把 <code>HeroDetailComponent</code> 改进成一个功能丰富的英雄编辑器，而不用改动父组件 <code>HeroesComponent</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ao1deretyk463oam1z0sxjidi\">你可以改进 <code>HeroesComponent</code>，而不用改动英雄详情视图。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1umb8u7q0bs0a6tfu3qa3jjlp\">将来你可以在其它组件的模板中重复使用 <code>HeroDetailComponent</code>。</p>\n</li>\n</ol>\n<h2 id=\"final-code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9wa7wkqdj6wmwmxq53bbnpvt\">查看最终代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eilmfylhtwekadywj9b0lljjc\">下面是本页所提到的源代码。</p>\n<code-tabs>\n\n<code-pane header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>} from '@angular/core';\nimport {<a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>, <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>} from '@angular/common';\nimport {<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>} from '@angular/forms';\nimport {Hero} from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: ['./hero-detail.component.css'],\n  imports: [<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>, <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>, <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>],\n})\nexport class HeroDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero?: Hero;\n}\n\n\n</code-pane>\n\n<code-pane header=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n\n  &lt;h2&gt;{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n    &lt;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"&gt;\n  &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-pane>\n\n<code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt3/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;button [class.selected]=\"hero === selectedHero\" type=\"button\" (click)=\"onSelect(hero)\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n      &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n    &lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-pane>\n\n</code-tabs>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\">总结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#summary\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afi1kd42gwz1qotbqnf11qwks\">你创建了一个独立的、可复用的 <code>HeroDetailComponent</code> 组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuyn4gqcx9gpdifrwpy06yb6x\">你用<a href=\"guide/property-binding\">属性绑定</a>语法来让父组件 <code>HeroesComponent</code> 可以控制子组件 <code>HeroDetailComponent</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cx7wmlazyah7qx9jfy3q9srwj\">你用 <a href=\"guide/inputs-outputs\"><code>@Input</code> 装饰器</a>来让 <code>hero</code> 属性可以在外部的 <code>HeroesComponent</code> 中绑定。</li>\n</ul>\n<h2 id=\"next-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4pkljueu68ifjoi5994e9l8o\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzq68hqjgb6xhh9ddipzrnbnk\"><a href=\"tutorial/tour-of-heroes/toh-pt4\">4. 添加服务</a></li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间：Wed Aug 30 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/localizing-angular\n - tutorial/tour-of-heroes/toh-pt2\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Input\n - api/forms/FormsModule\n - api/forms/NgModel\n - guide/inputs-outputs\n - guide/property-binding\n - tutorial/tour-of-heroes/toh-pt2\n - tutorial/tour-of-heroes/toh-pt3#add-the-input-hero-property\n - tutorial/tour-of-heroes/toh-pt3#create-a-feature-component\n - tutorial/tour-of-heroes/toh-pt3#final-code-review\n - tutorial/tour-of-heroes/toh-pt3#heroes-component-template\n - tutorial/tour-of-heroes/toh-pt3#make-the-herodetailcomponent\n - tutorial/tour-of-heroes/toh-pt3#next-steps\n - tutorial/tour-of-heroes/toh-pt3#show-the-herodetailcomponent\n - tutorial/tour-of-heroes/toh-pt3#summary\n - tutorial/tour-of-heroes/toh-pt3#update-the-heroescomponent-template\n - tutorial/tour-of-heroes/toh-pt3#what-changed\n - tutorial/tour-of-heroes/toh-pt3#write-the-template\n - tutorial/tour-of-heroes/toh-pt4\n-->"}
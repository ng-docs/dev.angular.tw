{"id":"tutorial/tour-of-heroes/toh-pt3","title":"主從元件","contents":"<div class=\"content\">\n  <h1 id=\"create-a-feature-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5kejk8q387nxcfdqwilu1kqi\">主從元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#create-a-feature-component\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1s4b3h0s3mqgr4jmy4pjpddo\">此刻，<code>HeroesComponent</code> 同時顯示了英雄清單和所選英雄的詳情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kemkhozvh1qb2kybedlygwcf\">把所有屬性都放在同一個元件中，將會使應用『長大』後變得不可維護。你要把大型元件拆分成小一點的子元件，每個子元件都要集中精力處理某個特定的任務或工作流。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xewzv7q9yf2c87kvb9n37vzd\">第一步是把英雄詳情移入一個獨立的、可複用的 <code>HeroDetailComponent</code>。最終將：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3c7oby1to37632s0b8wpn1tp\"><code>HeroesComponent</code> 用來展示英雄清單。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coeml6ko8o53zgxdd2f3uu6gd\"><code>HeroDetailComponent</code> 用來展示所選英雄的詳情。</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5oeh6bf2o8adlc4yerbj497y\">這裡所說的範例應用，參閱<live-example></live-example>。</p>\n</div>\n<h2 id=\"make-the-herodetailcomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4x9vlisbadml1h2uss1wn0e4\">製作 <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#make-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9puoi4bxntqb2j9whdin84s8s\">使用 <code>ng generate</code> 建立一個名叫 <code>hero-detail</code> 的新元件。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-detail\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enmo2nh6yirmfs4upkm4z1c2l\">這個指令會做這些事：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6bq49uyf8j8ydyd5l4cib5np\">建立目錄 <code>src/app/hero-detail</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cftdz3d9vq0kqwsd19nur2rw\">在這個目錄中會生成四個檔案：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbsnstgwjqsgbz9gtade4ab2d\">作為元件樣式的 CSS 檔案。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3swgopbnmwnrfrxqlban33fcc\">作為元件範本的 HTML 檔案。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d8gzv5wfei748ybtsxpo0a28i\">存放元件類別 <code>HeroDetailComponent</code> 的 TypeScript 檔案。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gk7te7zjnf24fzya0cqf1i5e\"><code>HeroDetailComponent</code> 類別的測試檔案。</li>\n</ul>\n<h3 id=\"write-the-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68b1g1uy19c3k8j49mdqfgma1\">編寫範本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#write-the-template\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lzlbf5c08phndo1hy75twnqf\">從 <code>HeroesComponent</code> 範本的底部把表示英雄詳情的 HTML 程式碼剪下貼上並覆蓋 <code>HeroDetailComponent</code> 範本的範本程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1fp6qbqqwkc1p2co8ey2vijq\">所貼上的 HTML 引用了 <code>selectedHero</code>。新的 <code>HeroDetailComponent</code> 可以展示<em>任意</em>英雄，而不僅僅所選的。把範本中的所有 <code>selectedHero</code> 替換為 <code>hero</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewjgn7osy445i0ywrdpugjv3u\">完工之後，<code>HeroDetailComponent</code> 的範本應該是這樣的：</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n\n  &lt;h2&gt;{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n    &lt;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"&gt;\n  &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<h3 id=\"add-the-input-hero-property\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ppk7hgxqjegn4u4xd583jxcw\">新增 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero</code> 屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#add-the-input-hero-property\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53qj67moxzjqz0ag57inlll71\"><code>HeroDetailComponent</code> 範本中繫結了元件中的 <code>hero</code> 屬性，它的型別是 <code>Hero</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19m4niaao5ep0yvf3bbcmudqc\">開啟 <code>HeroDetailComponent</code> 類別檔案，並匯入 <code>Hero</code> 符號。</p>\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"import-hero\" header=\"src/app/hero-detail/hero-detail.component.ts (import Hero)\">\nimport {Hero} from '../hero';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2j72s9e26szbmx84t26b31r0a\"><code>hero</code> 屬性<a href=\"guide/inputs-outputs\" title=\"Input and Output properties\">必須是一個帶有 <code>@Input()</code> 裝飾器的輸入屬性</a>，因為<em>外部的</em> <code>HeroesComponent</code> 元件<a href=\"tutorial/tour-of-heroes/toh-pt3#heroes-component-template\">會繫結到它</a>。就像這樣：</p>\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" region=\"hero-detail-binding\">\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qzw1yi16qgnjg5czlrt4l38l\">修改 <code>@angular/core</code> 的匯入語句，匯入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 符號。</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts (import Input)\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"import-input\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>} from '@angular/core';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4claciqgruu1yhyt17v8e6xn1\">新增一個帶有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 裝飾器的 <code>hero</code> 屬性。</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"input-hero\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero?: Hero;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"67gdlkdeqd6w2rnkhdsn3hnpp\">這就是你要對 <code>HeroDetailComponent</code> 類別做的唯一一項修改。沒有其它屬性，也沒有展示邏輯。這個元件所做的只是透過 <code>hero</code> 屬性接收一個英雄物件，並顯示它。</p>\n<h2 id=\"show-the-herodetailcomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6eiw3tr0s2gczbhi7hlb74i2v\">顯示 <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#show-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azeymoj9m9s4fzqnnescofnhh\"><code>HeroesComponent</code> 會自行顯示英雄的詳情，但後面我們要移除這部分。本節會指導你把這部分邏輯委派給 <code>HeroDetailComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qncgzyvnwof92vpmkyrybz1q\">這兩個元件將會具有父子關係。當用戶從清單中選擇了某個英雄時，父元件 <code>HeroesComponent</code> 將透過把要顯示的新英雄傳送給子元件 <code>HeroDetailComponent</code>，來控制子元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4v5gkg2ep56flji5akby5qac9\">你不用修改 <code>HeroesComponent</code> <em>類別</em>，但是要修改它的<em>範本</em>。</p>\n<p><a id=\"heroes-component-template\"></a></p>\n<h3 id=\"update-the-heroescomponent-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qqk2htdsh69je217qw6qsels\">修改 <code>HeroesComponent</code> 的範本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#update-the-heroescomponent-template\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61x19g7szsnt4lh6gtrtplewx\"><code>HeroDetailComponent</code> 的選擇器是 <code>'app-hero-detail'</code>。把 <code>&lt;app-hero-detail&gt;</code> 新增到 <code>HeroesComponent</code> 範本的底部，以便把英雄詳情的檢視顯示到那裡。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ld4452nvr64eazyaj2cbzcpz\">把 <code>HeroesComponent.selectedHero</code> 繫結到該元素的 <code>hero</code> 屬性，就像這樣。</p>\n<code-example header=\"heroes.component.html (HeroDetail binding)\" path=\"toh-pt3/src/app/heroes/heroes.component.html\" region=\"hero-detail-binding\">\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d29n8vqxh6byxcv652qkvbmzz\"><code>[hero]=\"selectedHero\"</code> 是 Angular 的<a href=\"guide/property-binding\">屬性繫結</a>語法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7570vrer8528zlgt0cn2fllcb\">這是一種<em>單向</em>資料繫結。從 <code>HeroesComponent</code> 的 <code>selectedHero</code> 屬性繫結到目標元素的 <code>hero</code> 屬性，並對映到了 <code>HeroDetailComponent</code> 的 <code>hero</code> 屬性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0o5qc259crdpv1t7isegp77b\">現在，當用戶在清單中點擊某個英雄時，<code>selectedHero</code> 就改變了。當 <code>selectedHero</code> 改變時，<em>屬性繫結</em>會修改 <code>HeroDetailComponent</code> 的 <code>hero</code> 屬性，<code>HeroDetailComponent</code> 就會顯示這個新的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n0ht7xc919qiykk8uuc8nq64\">修改後的 <code>HeroesComponent</code> 的範本是這樣的：</p>\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" header=\"heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;button [class.selected]=\"hero === selectedHero\" type=\"button\" (click)=\"onSelect(hero)\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n      &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n    &lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b36m58y4ti14oun7fae3g2p1o\">瀏覽器重新整理，應用又像以前一樣開始工作了。</p>\n<h2 id=\"what-changed\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"129c0mke7q6idq4icxw73dvwu\">有哪些變化？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#what-changed\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6f96a5h908it76rodtaee826b\">像<a href=\"tutorial/tour-of-heroes/toh-pt2\">以前</a>一樣，一旦使用者點選了一個英雄的名字，該英雄的詳情就顯示在了英雄清單下方。現在，<code>HeroDetailComponent</code> 負責顯示那些詳情，而不再是 <code>HeroesComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e45v8rid6w43qvzj15ubjyht5\">把原來的 <code>HeroesComponent</code> 重構成兩個元件帶來了一些優點，無論是現在還是未來：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqnmbypkrzsf5i78vzv1if9zi\">你透過縮減 <code>HeroesComponent</code> 的職責縮小了該組件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5ob7i7xzyria06e2ag1q45b9\">你可以把 <code>HeroDetailComponent</code> 改進成一個功能豐富的英雄編輯器，而不用改動父元件 <code>HeroesComponent</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ao1deretyk463oam1z0sxjidi\">你可以改進 <code>HeroesComponent</code>，而不用改動英雄詳情檢視。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1umb8u7q0bs0a6tfu3qa3jjlp\">將來你可以在其它元件的範本中重複使用 <code>HeroDetailComponent</code>。</p>\n</li>\n</ol>\n<h2 id=\"final-code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9wa7wkqdj6wmwmxq53bbnpvt\">檢視最終程式碼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eilmfylhtwekadywj9b0lljjc\">下面是本頁所提到的原始碼。</p>\n<code-tabs>\n\n<code-pane header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>} from '@angular/core';\nimport {<a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>, <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>} from '@angular/common';\nimport {<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>} from '@angular/forms';\nimport {Hero} from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: ['./hero-detail.component.css'],\n  imports: [<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>, <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>, <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>],\n})\nexport class HeroDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero?: Hero;\n}\n\n\n</code-pane>\n\n<code-pane header=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n\n  &lt;h2&gt;{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n    &lt;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"&gt;\n  &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-pane>\n\n<code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt3/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;button [class.selected]=\"hero === selectedHero\" type=\"button\" (click)=\"onSelect(hero)\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n      &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n    &lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-pane>\n\n</code-tabs>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\">總結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#summary\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afi1kd42gwz1qotbqnf11qwks\">你建立了一個獨立的、可複用的 <code>HeroDetailComponent</code> 元件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuyn4gqcx9gpdifrwpy06yb6x\">你用<a href=\"guide/property-binding\">屬性繫結</a>語法來讓父元件 <code>HeroesComponent</code> 可以控制子元件 <code>HeroDetailComponent</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cx7wmlazyah7qx9jfy3q9srwj\">你用 <a href=\"guide/inputs-outputs\"><code>@Input</code> 裝飾器</a>來讓 <code>hero</code> 屬性可以在外部的 <code>HeroesComponent</code> 中繫結。</li>\n</ul>\n<h2 id=\"next-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4pkljueu68ifjoi5994e9l8o\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzq68hqjgb6xhh9ddipzrnbnk\"><a href=\"tutorial/tour-of-heroes/toh-pt4\">4. 新增服務</a></li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：Wed Aug 30 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/localizing-angular\n - tutorial/tour-of-heroes/toh-pt2\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Input\n - api/forms/FormsModule\n - api/forms/NgModel\n - guide/inputs-outputs\n - guide/property-binding\n - tutorial/tour-of-heroes/toh-pt2\n - tutorial/tour-of-heroes/toh-pt3#add-the-input-hero-property\n - tutorial/tour-of-heroes/toh-pt3#create-a-feature-component\n - tutorial/tour-of-heroes/toh-pt3#final-code-review\n - tutorial/tour-of-heroes/toh-pt3#heroes-component-template\n - tutorial/tour-of-heroes/toh-pt3#make-the-herodetailcomponent\n - tutorial/tour-of-heroes/toh-pt3#next-steps\n - tutorial/tour-of-heroes/toh-pt3#show-the-herodetailcomponent\n - tutorial/tour-of-heroes/toh-pt3#summary\n - tutorial/tour-of-heroes/toh-pt3#update-the-heroescomponent-template\n - tutorial/tour-of-heroes/toh-pt3#what-changed\n - tutorial/tour-of-heroes/toh-pt3#write-the-template\n - tutorial/tour-of-heroes/toh-pt4\n-->"}
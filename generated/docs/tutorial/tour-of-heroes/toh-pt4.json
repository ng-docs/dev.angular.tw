{"id":"tutorial/tour-of-heroes/toh-pt4","title":"服务","contents":"<div class=\"content\">\n  <h1 id=\"add-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34kjchtannnef2ztaf62w5b85\">服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#add-services\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4e1yn1vcl914v5iyzhwngkok\">英雄之旅的 <code>HeroesComponent</code> 目前获取和显示的都是模拟数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vee2fptklp65y70xkrk5hd6w\">重构 <code>HeroesComponent</code> 的重点在于为视图提供支持，并让它更容易使用模拟服务进行单元测试。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5oeh6bf2o8adlc4yerbj497y\">这里所说的范例应用，参阅<live-example></live-example>。</p>\n</div>\n<h2 id=\"why-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bt38w4snw6p59q1lkmpkdzjqy\">为什么需要服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#why-services\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t2wmfpsqlsez6pat892zc9x0\">组件不应直接获取或保存数据，当然也不应故意呈现虚假数据。它们应专注于呈现数据，并将数据访问委托给服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"48v31lp37q2r2pycuyl52ytrr\">本教程会创建一个 <code>HeroService</code>，应用中的所有类都可以使用它来获取英雄列表。\n不要使用 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code> 关键字</a>来创建此服务，而使用 Angular 支持的<a href=\"guide/dependency-injection\"><em>依赖注入</em></a>机制把它注入到 <code>HeroesComponent</code> 的构造函数中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9y59hrer2m0p8k3habxy5fjvw\">服务是在不互相了解的类之间共享信息的好方法。接下来创建一个\n<code>HeroService</code>并将其注入到\n<code>HeroesComponent</code>中，以提供英雄数据。</p>\n<h2 id=\"create-the-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5uqyclu3nv5rs85a1kbfo7fgl\">创建 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#create-the-heroservice\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"u44srhbl95wto7bgwy57h86r\">运行 <code>ng generate</code> 以创建一个名叫 <code>hero</code> 的服务。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service hero\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxrgo3qvdhibtzy9d1zew932z\">该命令会在 <code>src/app/hero.service.ts</code> 中生成 <code>HeroService</code> 类的骨架，代码如下：</p>\n<code-example header=\"src/app/hero.service.ts (new service)\" path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"new\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor() { }\n\n}\n\n</code-example>\n<h3 id=\"injectable-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ed8hh61zdl766x7k2tc24h2yg\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#injectable-services\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wfi9fwchxbxq4o7k1ffyi4m1\">注意，这个新的服务导入了 Angular 的 <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 符号，并且给这个服务类添加了 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器。\n它把这个类标记为<em>依赖注入系统</em>的参与者之一。<code>HeroService</code> 类将会提供一个可注入的服务，并且它还可以拥有自己的待注入的依赖。\n目前它没有任何依赖。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2uuhtwxwljm1vb3s67097thu1\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器会接受该服务的元数据对象，就像 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 对组件类的作用一样。</p>\n<h3 id=\"get-hero-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d59k6c66koj6ul70r5cjuk8xz\">获取英雄数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#get-hero-data\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e035w62i6u2tgdg1fvxb97qxk\"><code>HeroService</code> 可以从任何地方获取数据，比如：Web 服务、本地存储（LocalStorage）或一个模拟的数据源。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwi8ghxqih1bi06a87wh4evdf\">从组件中移除数据访问逻辑，意味着将来任何时候你都可以改变目前的实现方式，而不用改动任何组件。这些组件不需要了解该服务的内部实现。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zqc8isea96h5y50to0low9nr\">这节课中的实现仍然会提供<em>模拟的英雄列表</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0slh8gzfbmhbkna7noshfup9\">导入 <code>Hero</code> 和 <code>HEROES</code>。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-heroes\">\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ekyyp2i4t718pg89k6nwhadl\">添加一个 <code>getHeroes</code> 方法，让它返回<em>模拟的英雄列表</em>。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"getHeroes\">\ngetHeroes(): Hero[] {\n  return HEROES;\n}\n\n</code-example>\n<p><a id=\"provide\"></a></p>\n<h2 id=\"provide-the-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9szo90jhlpfmkal4rd3yavv6z\">提供（provide）<code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#provide-the-heroservice\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bulw86d114lnxsczow4tcri6\">你必须先注册一个<em>服务提供者</em>，来让 <code>HeroService</code> 在依赖注入系统中可用，Angular 才能把它注入到 <code>HeroesComponent</code> 中。所谓服务提供者就是某种可用来创建或交付一个服务的东西；在这里，它通过实例化 <code>HeroService</code> 类，来提供该服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj5hvrm2l6fwjjzq3i7recvsq\">为了确保 <code>HeroService</code> 可以提供该服务，就要使用<em>注入器</em>来注册它。注入器是一个对象，负责当应用要求获取它的实例时选择和注入该提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eoailhbx72idcqwx8mh1j37ak\">默认情况下，Angular CLI 命令 <code>ng generate service</code> 会通过给 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器添加 <code>providedIn: 'root'</code> 元数据的形式，用<em>根注入器</em>将你的服务注册成为提供者。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3675666gkkh6t53uc5szf4m93\">当你在顶层提供该服务时，Angular 就会为 <code>HeroService</code> 创建一个单一的、共享的实例，并把它注入到任何想要它的类上。在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元数据中注册该提供者，还能允许 Angular 通过移除那些完全没有用过的服务来进行优化。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ksqdm1x2lx1rb63iudn2tt0e\">要了解关于提供者的更多知识，参阅<a href=\"guide/providers\">提供者部分</a>。要了解关于注入器的更多知识，参阅<a href=\"guide/dependency-injection\">依赖注入指南</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rednw8st7ly8p7f7tt5bj9vb\">现在 <code>HeroService</code> 已经准备好插入到 <code>HeroesComponent</code> 中了。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kxki628db17rdtlf3lll334f\">这是一个过渡性的代码范例，它将会允许你提供并使用 <code>HeroService</code>。此刻的代码和<a href=\"tutorial/tour-of-heroes/toh-pt4#final-code-review\">最终代码</a>相差很大。</p>\n</div>\n<h2 id=\"update-heroescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zuv4gxlu112rmzeurqzrryjc\">修改 <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#update-heroescomponent\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"am03lk13goyolc587mugsg0sg\">打开 <code>HeroesComponent</code> 类文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"242rssomb1i3xgan43xv99w7n\">删除 <code>HEROES</code> 的导入语句，因为你以后不会再用它了。转而导入 <code>HeroService</code>。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (import HeroService)\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"hero-service-import\">\nimport { HeroService } from '../hero.service';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hh8tsr41ogf0cpoiapclhojx\">把 <code>heroes</code> 属性的定义改为一句简单的声明。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"heroes\">\nheroes: Hero[] = [];\n\n</code-example>\n<p><a id=\"inject\"></a></p>\n<h3 id=\"inject-the-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ulsbx0fxq84vdo4pasdqjwpd\">注入 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#inject-the-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ne4p9aadiz5uossh1t1xweci\">往构造函数中添加一个私有的 <code>heroService</code>，其类型为 <code>HeroService</code>。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"ctor\">\nconstructor(private heroService: HeroService) {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abyhs61vqy2972up5ldjvd4lm\">这个参数声明了一个私有 <code>heroService</code> 属性，同时把它标记为一个 <code>HeroService</code> 的注入点。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5u523nslnydoerv6p23sc6u7f\">当 Angular 创建 <code>HeroesComponent</code> 时，<a href=\"guide/dependency-injection\">依赖注入</a>系统就会把这个 <code>heroService</code> 参数设置为 <code>HeroService</code> 的单例对象。</p>\n<h3 id=\"add-getheroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwdkr138kp7dn2hd8f8senhhe\">添加 <code>getHeroes()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#add-getheroes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edgy2xpb44dkw914z4gzumlzi\">创建一个方法，以从服务中获取这些英雄数据。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-example>\n<p><a id=\"oninit\"></a></p>\n<h3 id=\"call-it-in-ngoninit\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f03puw4t23qixl8tkbqv9d2uj\">在 <code>ngOnInit()</code> 中调用它<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#call-it-in-ngoninit\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4lm7tuwcssbtszmchg16mug9l\">你固然可以在构造函数中调用 <code>getHeroes()</code>，但那不是最佳实践。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"982z9ffz4fdwq24d5k2svd42k\">让构造函数保持简单，只做最小化的初始化操作，比如把构造函数的参数赋值给属性。构造函数不应该<em>做任何事</em>。它当然不应该调用某个函数来向远端服务（比如真实的数据服务）发起 HTTP 请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0nd56744asvurctwplgyfr0t\">而是选择在 <a href=\"guide/lifecycle-hooks\"><em>ngOnInit 生命周期钩子</em></a>中调用 <code>getHeroes()</code>，之后 Angular 会在构造出 <code>HeroesComponent</code> 的实例之后的某个合适的时机调用 <code>ngOnInit()</code>。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"ng-on-init\">\nngOnInit(): void {\n  this.getHeroes();\n}\n\n</code-example>\n<h3 id=\"see-it-run\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aeje8g33hngo686b002aq0mfe\">查看运行效果<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#see-it-run\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"815pljn76e2ru0r1uttc1jbhh\">刷新浏览器，该应用仍运行的一如既往。显示英雄列表，并且当你点击某个英雄的名字时显示出英雄详情视图。</p>\n<h2 id=\"observable-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7tq2frer62kl48sxr6mlf2x0w\">可观察（Observable）的数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#observable-data\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41nphlyrjc4vjucr0dulr7ucc\"><code>HeroService.getHeroes()</code> 的函数签名是<em>同步的</em>，它所隐含的假设是 <code>HeroService</code> 总是能同步获取英雄列表数据。而 <code>HeroesComponent</code> 也同样假设能同步取到 <code>getHeroes()</code> 的结果。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"get-heroes\">\nthis.heroes = this.heroService.getHeroes();\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edoo95o0a3s3he6g5bqkvd7oo\">这种方法在使用异步调用的真实应用中是不可能奏效的。现在能这么做，只是因为目前该服务同步返回的是<em>模拟数据</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sq3tv1ovsk6edp8lls9cb52d\">如果 <code>getHeroes()</code> 不能立即返回英雄数据，它就不能是同步的，否则在它等待返回数据期间就会阻塞浏览器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bf2ph826tgppu0u25xxg95oy\"><code>HeroService.getHeroes()</code> 必须具有某种形式的<em>异步函数签名</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emo1nhl49i3uqup6unkgfttdq\">在本教程中，\n<code>HeroService.getHeroes()</code>返回一个\n<code>Observable</code>，因此可以使用 Angular 的\n<code>HttpClient.get</code>方法来获取英雄，并让\n<a href=\"guide/understanding-communicating-with-http\"><code>HttpClient.get()</code></a>返回一个\n<code>Observable</code>。</p>\n<h3 id=\"observable-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"doc57ul55svmx4tihj0o5d5bo\">可观察对象版本的 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#observable-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49l95yvlobnbq1pd1hsm9ry1p\"><code>Observable</code> 是 <a href=\"https://rxjs.dev\">RxJS 库</a>中的一个关键类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8akmnwa3de72m1mh6nez85mni\">在<a href=\"tutorial/tour-of-heroes/toh-pt6\">稍后的 HTTP 教程</a>中，你就会知道 Angular <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的方法会返回 RxJS 的 <code>Observable</code>。这节课，你将使用 RxJS 的 <code>of()</code> 函数来模拟从服务器返回数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4al1mniwwo48mcsjejhrzoo7h\">打开 <code>HeroService</code> 文件，并从 RxJS 中导入 <code>Observable</code> 和 <code>of</code> 符号。</p>\n<code-example header=\"src/app/hero.service.ts (Observable imports)\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-observable\">\nimport { Observable, of } from 'rxjs';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4qna4vwubszl68fqgl2bov4f\">把 <code>getHeroes()</code> 方法改成这样：</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes-1\">\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  const heroes = of(HEROES);\n  return heroes;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hyb3kebueo6cyzjqh7le75wg\"><code>of(HEROES)</code> 会返回一个 <code>Observable&lt;Hero[]&gt;</code>，它会发出单个值，这个值就是这些模拟英雄的数组。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3nkbavmujgsn2hadc2datp3a\">在 <a href=\"tutorial/tour-of-heroes/toh-pt6\">HTTP 教程</a>中，你将会调用 <code>HttpClient.get&lt;Hero[]&gt;()</code> 它也同样返回一个 <code>Observable&lt;Hero[]&gt;</code>，它也会发出单个值，这个值就是来自 HTTP 响应体中的英雄数组。</p>\n</div>\n<h3 id=\"subscribe-in-heroescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elco5qqage0nqnxaorx0wmh26\">在 <code>HeroesComponent</code> 中订阅<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#subscribe-in-heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wxbhrebu4re220xxjq8opn9c\"><code>HeroService.getHeroes</code> 方法之前返回一个 <code>Hero[]</code>，现在它返回的是 <code>Observable&lt;Hero[]&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gj662vv9posv8famlus41isa\">你必须在 <code>HeroesComponent</code> 中也向本服务中的这种形式看齐。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38p9jrn0ov4ub2cbutz9fzo7g\">找到 <code>getHeroes</code> 方法，并且把它替换为如下代码。下面是新代码和当前版本的对比显示。</p>\n<code-tabs>\n    <code-pane header=\"heroes.component.ts (Observable)\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes);\n}\n\n</code-pane>\n    <code-pane header=\"heroes.component.ts (Original)\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9iy59jkctqoy6dms7s9t6g80t\"><code>Observable.subscribe()</code> 是关键的差异点。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8gxqmsg2tf097vk9a6ftmam0f\">上一个版本把英雄的数组赋值给了该组件的 <code>heroes</code> 属性。这种赋值是<em>同步</em>的，这里包含的假设是服务器能立即返回英雄数组或者浏览器能在等待服务器响应时冻结界面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5qn5rzciazrvin7mjd2enyjx\">当 <code>HeroService</code> 真的向远端服务器发起请求时，这种方式就行不通了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d717qgt2wztuy60q8q3bu2zfw\">新的版本等待 <code>Observable</code> 发出这个英雄数组，这可能立即发生，也可能会在几分钟之后。然后，<code>subscribe()</code> 方法把这个英雄数组传给这个回调函数，该函数把英雄数组赋值给组件的 <code>heroes</code> 属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4224dtl5q7znh5a9gz0y0z774\">使用这种异步方式，当 <code>HeroService</code> 从远端服务器获取英雄数据时，就<em>可以工作了</em>。</p>\n<h2 id=\"show-messages\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vbpl0qwgpc1h11q5o9z2qals\">显示消息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#show-messages\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12krwwxsdgwn5x6nfjhc06i79\">这一节将指导你：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5e1pgf3mwn1iyg6arpguixmj\">添加一个 <code>MessagesComponent</code>，它在屏幕的底部显示应用中的消息。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pyafbvb0gbpeow7huc4m9rgj\">创建一个可注入的、全应用级别的 <code>MessageService</code>，用于发送要显示的消息。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cry24falggj6aj2mp7zbm5de\">把 <code>MessageService</code> 注入到 <code>HeroService</code> 中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy4lhj6q6zn795o9l9l6xoyb2\">当 <code>HeroService</code> 成功获取了英雄数据时显示一条消息。</li>\n</ul>\n<h3 id=\"create-messagescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28irj6m07o3da786m9c9o9rh\">创建 <code>MessagesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#create-messagescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ivjvbo5w1khstq17t270dypd\">使用 CLI 创建 <code>MessagesComponent</code>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component messages\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57ryoq92hl243jjes49xf3i6e\">CLI 在 <code>src/app/messages</code> 中创建了组件文件，并且把 <code>MessagesComponent</code> 声明在了 <code>AppModule</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aer6zz9xx7qv7w2sdtw69lhth\">修改 <code>AppComponent</code> 的模板来显示 <code>MessagesComponent</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"toh-pt4/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;app-heroes&gt;&lt;/app-heroes&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnqdvxrt7lti8wrdo1w3b7nkw\">你可以在页面的底部看到来自的 <code>MessagesComponent</code> 的默认内容。</p>\n<h3 id=\"create-the-messageservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33a7zvsbspkqiimqs3dizdqgc\">创建 <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#create-the-messageservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayzb2oonx89ndaq15syscd4pr\">使用 CLI 在 <code>src/app</code> 中创建 <code>MessageService</code>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service message\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"389cjsiwmq6d59ani37ca0r5q\">打开 <code>MessageService</code>，并把它的内容改成这样。</p>\n<code-example header=\"src/app/message.service.ts\" path=\"toh-pt4/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bplqrwxnv03drx9pdlf0w77w\">该服务公开其 <code>messages</code> 缓存和两个方法：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pgvxi9chtzmmkjq5wu7blmpq\">将 <code>add()</code> 消息添加到缓存中的一种。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f10lqn5cp6qo00h8ggb7kkt2i\">另一个 <code>clear()</code> 缓存。</li>\n</ul>\n<p><a id=\"inject-message-service\"></a></p>\n<h3 id=\"inject-it-into-the-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atg5rv0g7qudq9s0csqi9d5zs\">把它注入到 <code>HeroService</code> 中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#inject-it-into-the-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2stnhyvjwam24qhr4tqcebq2a\">在 <code>HeroService</code> 中导入 <code>MessageService</code>。</p>\n<code-example header=\"src/app/hero.service.ts (import MessageService)\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-message-service\">\nimport { MessageService } from './message.service';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"oedmzg4nssz78fmzlxb343j9\">修改这个构造函数，添加一个私有的 <code>messageService</code> 属性参数。Angular 将会在创建 <code>HeroService</code> 时把 <code>MessageService</code> 的单例注入到这个属性中。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"ctor\">\nconstructor(private messageService: MessageService) { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63i7p2ob10nfjsjc8n2wnn8jo\">这是一个典型的“服务中的服务”场景，你把 <code>MessageService</code> 注入到了 <code>HeroService</code> 中，而 <code>HeroService</code> 又被注入到了 <code>HeroesComponent</code> 中。</p>\n</div>\n<h3 id=\"send-a-message-from-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxepj8hub68la13857z4uv6s\">从 <code>HeroService</code> 中发送一条消息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#send-a-message-from-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60d09umv9favsrrv55cds9svd\">修改 <code>getHeroes()</code> 方法，在获取到英雄数组时发送一条消息。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes\">\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  const heroes = of(HEROES);\n  this.messageService.add('HeroService: fetched heroes');\n  return heroes;\n}\n\n</code-example>\n<h3 id=\"display-the-message-from-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"da4m41ipdaqlohhz1nr1lampe\">从 <code>HeroService</code> 中显示消息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#display-the-message-from-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pejpkm03o7z3hhi0a8xqma61\"><code>MessagesComponent</code> 可以显示所有消息，包括当 <code>HeroService</code> 获取到英雄数据时发送的那条。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99bowtjhwx5ytu95j3ph09jw9\">打开 <code>MessagesComponent</code>，并且导入 <code>MessageService</code>。</p>\n<code-example header=\"src/app/messages/messages.component.ts (import MessageService)\" path=\"toh-pt4/src/app/messages/messages.component.ts\" region=\"import-message-service\">\nimport { MessageService } from '../message.service';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407kj0cq22yme3logu7obdsxe\">修改构造函数，添加一个 <strong>public</strong> 的 <code>messageService</code> 属性。Angular 将会在创建 <code>MessagesComponent</code> 的实例时 把 <code>MessageService</code> 的实例注入到这个属性中。</p>\n<code-example header=\"src/app/messages/messages.component.ts\" path=\"toh-pt4/src/app/messages/messages.component.ts\" region=\"ctor\">\nconstructor(public messageService: MessageService) {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88j8fpgscngx03xemi39af0su\">这个 <code>messageService</code> 属性必须是公共属性，因为你将会在模板中绑定到它。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ut1h9fx2v79ro65a8midlmu\">Angular 只会绑定到组件的<em>公共</em>属性。</p>\n</div>\n<h3 id=\"bind-to-the-messageservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqobow8iayi6y0jrzan4k44yo\">绑定到 <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#bind-to-the-messageservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kpsgkvj13g3jiwsjyn4jr1wu\">把 <code>ng generate</code> 创建的 <code>MessagesComponent</code> 的模板改成这样。</p>\n<code-example header=\"src/app/messages/messages.component.html\" path=\"toh-pt4/src/app/messages/messages.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"messageService.messages.length\"&gt;\n\n  &lt;h2&gt;Messages&lt;/h2&gt;\n  &lt;button type=\"button\" class=\"clear\"\n          (click)=\"messageService.clear()\"&gt;Clear messages&lt;/button&gt;\n  &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>='let message of messageService.messages'&gt; {{message}} &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dn8tqf4zlrt9kz5rcbq4op9wh\">这个模板直接绑定到了组件的 <code>messageService</code> 属性上。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw2k3383udex8qur6e3212d1a\">只有在有要显示的消息时才显示消息区域。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ac5te2zoxw97cp3uuy5zd1su5\">以重复的\n<code>&lt;div&gt;</code>元素呈现消息列表。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3uy4wg06v45tq1syq3flh517h\">Angular \n<a href=\"guide/event-binding\">事件绑定</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chjvyy04ql7euduepdutxqact\">将按钮的点击事件绑定到\n<code>MessageService.clear()</code>。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eoir89btje0cld5cfpm6w9ux3\">当你把 <a href=\"tutorial/tour-of-heroes/toh-pt4#final-code-review\">最终代码</a> 某一页的内容添加到 <code>messages.component.css</code> 中时，这些消息会变得好看一些。</p>\n<h2 id=\"add-messageservice-to-heroescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8klqbozcya2pcagabwe14ut9e\">为 hero 服务添加额外的消息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#add-messageservice-to-heroescomponent\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b9n8nsfxvq9lasighpcsa4s4\">下面的例子展示了当用户点击某个英雄时发生的历史。当你学到后面的<a href=\"tutorial/tour-of-heroes/toh-pt5\">路由</a>一章时，这会很有帮助。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  selectedHero?: Hero;\n\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService, private messageService: MessageService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n    this.messageService.add(`HeroesComponent: Selected hero id=${hero.id}`);\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n        .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sq9jg1ayaz4w3fw9pvz35uwz\">刷新浏览器，页面显示出了英雄列表。滚动到底部，就会在消息区看到来自 <code>HeroService</code> 的消息。点击 <strong>Clear messages</strong> 按钮，消息区不见了。</p>\n<p><a id=\"final-code-review\"></a></p>\n<h2 id=\"final-code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9wa7wkqdj6wmwmxq53bbnpvt\">查看最终代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eilmfylhtwekadywj9b0lljjc\">下面是本页所提到的源代码。</p>\n<code-tabs>\n    <code-pane header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&lt;Hero[]&gt; {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n}\n\n</code-pane>\n    <code-pane header=\"src/app/message.service.ts\" path=\"toh-pt4/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  selectedHero?: Hero;\n\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService, private messageService: MessageService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n    this.messageService.add(`HeroesComponent: Selected hero id=${hero.id}`);\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n        .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/messages/messages.component.ts\" path=\"toh-pt4/src/app/messages/messages.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.css']\n})\nexport class MessagesComponent {\n\n  constructor(public messageService: MessageService) {}\n\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/messages/messages.component.html\" path=\"toh-pt4/src/app/messages/messages.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"messageService.messages.length\"&gt;\n\n  &lt;h2&gt;Messages&lt;/h2&gt;\n  &lt;button type=\"button\" class=\"clear\"\n          (click)=\"messageService.clear()\"&gt;Clear messages&lt;/button&gt;\n  &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>='let message of messageService.messages'&gt; {{message}} &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/messages/messages.component.css\" path=\"toh-pt4/src/app/messages/messages.component.css\">\n/* MessagesComponent's private CSS styles */\nh2 {\n  color: #A80000;\n  font-family: Arial, Helvetica, sans-serif;\n  font-weight: lighter;\n}\n\n.clear {\n  color: #333;\n  background-color: #eee;\n  margin-bottom: 12px;\n  padding: 1rem;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n.clear:hover {\n  color: white;\n  background-color: #42545C;\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt4/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\nimport { MessagesComponent } from './messages/messages.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [\n    // no need to place any providers due to the `providedIn` flag...\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.html\" path=\"toh-pt4/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;app-heroes&gt;&lt;/app-heroes&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\">总结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#summary\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9epvdg8gtyybzbl5rajc8kwq8\">你把数据访问逻辑重构到了 <code>HeroService</code> 类中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9tph959y4oojg0c6einfu6w0\">你在根注入器中把 <code>HeroService</code> 注册为该服务的提供者，以便在别处可以注入它。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er2seecnd301kugs0jbxr51ib\">你使用 <a href=\"guide/dependency-injection\">Angular 依赖注入</a>机制把它注入到了组件中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30w9ie47n6tdlc0y9mqw2wdec\">你给 <code>HeroService</code> 中获取数据的方法提供了一个异步的函数签名。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fzg39wt8dx6gb8tw2312tto1\">你发现了 <code>Observable</code> 以及 RxJS 库。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qha83s80pfgn579wygupfpk4\">你使用 RxJS的\n<code>of()</code>返回\n<code>Observable&lt;Hero[]&gt;</code>，一个模拟英雄的可观察对象。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1moypotdsmu01z3ae94c2zyoo\">在组件的 <code>ngOnInit</code> 生命周期钩子中调用 <code>HeroService</code> 方法，而不是构造函数中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vapy3hgzaey8g846d7rvlqmi\">你创建了一个 <code>MessageService</code>，以便在类之间实现松耦合通讯。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w4t87buidltg5z9e3xwxc15o\"><code>HeroService</code> 连同注入到它的服务 <code>MessageService</code> 一起，注入到了组件中。</li>\n</ul>\n<h2 id=\"next-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4pkljueu68ifjoi5994e9l8o\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11fqf646m2wk2uz6f7ohe5e1\"><a href=\"tutorial/tour-of-heroes/toh-pt5\">5. 添加导航</a></li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - errors/NG0201\n - guide/example-apps-list\n - guide/lifecycle-hooks\n - guide/localizing-angular\n - guide/router-tutorial-toh\n - guide/singleton-services\n - tutorial/tour-of-heroes/toh-pt3\n - tutorial/tour-of-heroes/toh-pt5\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/platform-browser/BrowserModule\n - guide/dependency-injection\n - guide/event-binding\n - guide/lifecycle-hooks\n - guide/providers\n - guide/understanding-communicating-with-http\n - tutorial/tour-of-heroes/toh-pt4#add-getheroes\n - tutorial/tour-of-heroes/toh-pt4#add-messageservice-to-heroescomponent\n - tutorial/tour-of-heroes/toh-pt4#add-services\n - tutorial/tour-of-heroes/toh-pt4#bind-to-the-messageservice\n - tutorial/tour-of-heroes/toh-pt4#call-it-in-ngoninit\n - tutorial/tour-of-heroes/toh-pt4#create-messagescomponent\n - tutorial/tour-of-heroes/toh-pt4#create-the-heroservice\n - tutorial/tour-of-heroes/toh-pt4#create-the-messageservice\n - tutorial/tour-of-heroes/toh-pt4#display-the-message-from-heroservice\n - tutorial/tour-of-heroes/toh-pt4#final-code-review\n - tutorial/tour-of-heroes/toh-pt4#get-hero-data\n - tutorial/tour-of-heroes/toh-pt4#inject-it-into-the-heroservice\n - tutorial/tour-of-heroes/toh-pt4#inject-the-heroservice\n - tutorial/tour-of-heroes/toh-pt4#injectable-services\n - tutorial/tour-of-heroes/toh-pt4#next-steps\n - tutorial/tour-of-heroes/toh-pt4#observable-data\n - tutorial/tour-of-heroes/toh-pt4#observable-heroservice\n - tutorial/tour-of-heroes/toh-pt4#provide-the-heroservice\n - tutorial/tour-of-heroes/toh-pt4#see-it-run\n - tutorial/tour-of-heroes/toh-pt4#send-a-message-from-heroservice\n - tutorial/tour-of-heroes/toh-pt4#show-messages\n - tutorial/tour-of-heroes/toh-pt4#subscribe-in-heroescomponent\n - tutorial/tour-of-heroes/toh-pt4#summary\n - tutorial/tour-of-heroes/toh-pt4#update-heroescomponent\n - tutorial/tour-of-heroes/toh-pt4#why-services\n - tutorial/tour-of-heroes/toh-pt5\n - tutorial/tour-of-heroes/toh-pt6\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/new\n - https://rxjs.dev\n-->"}
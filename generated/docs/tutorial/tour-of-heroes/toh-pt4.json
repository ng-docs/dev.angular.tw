{"id":"tutorial/tour-of-heroes/toh-pt4","title":"服務","contents":"<div class=\"content\">\n  <h1 id=\"add-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34kjchtannnef2ztaf62w5b85\">服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#add-services\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4e1yn1vcl914v5iyzhwngkok\">英雄之旅的 <code>HeroesComponent</code> 目前獲取和顯示的都是模擬資料。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vee2fptklp65y70xkrk5hd6w\">重構 <code>HeroesComponent</code> 的重點在於為檢視提供支援，並讓它更容易使用模擬服務進行單元測試。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5oeh6bf2o8adlc4yerbj497y\">這裡所說的範例應用，參閱<live-example></live-example>。</p>\n</div>\n<h2 id=\"why-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bt38w4snw6p59q1lkmpkdzjqy\">為什麼需要服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#why-services\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t2wmfpsqlsez6pat892zc9x0\">元件不應直接獲取或儲存資料，當然也不應故意呈現虛假資料。它們應專注於呈現資料，並將資料訪問委託給服務。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"48v31lp37q2r2pycuyl52ytrr\">本教程會建立一個 <code>HeroService</code>，應用中的所有類都可以使用它來獲取英雄清單。\n不要使用 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code> 關鍵字</a>來建立此服務，而使用 Angular 支援的<a href=\"guide/dependency-injection\"><em>依賴注入</em></a>機制把它注入到 <code>HeroesComponent</code> 的建構式函式中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9y59hrer2m0p8k3habxy5fjvw\">服務是在不互相瞭解的類之間共享訊息的好方法。接下來建立一個\n<code>HeroService</code>並將其注入到\n<code>HeroesComponent</code>中，以提供英雄資料。</p>\n<h2 id=\"create-the-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5uqyclu3nv5rs85a1kbfo7fgl\">建立 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#create-the-heroservice\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"u44srhbl95wto7bgwy57h86r\">執行 <code>ng generate</code> 以建立一個名叫 <code>hero</code> 的服務。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service hero\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxrgo3qvdhibtzy9d1zew932z\">該指令會在 <code>src/app/hero.service.ts</code> 中生成 <code>HeroService</code> 類別的骨架，程式碼如下：</p>\n<code-example header=\"src/app/hero.service.ts (new service)\" path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"new\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor() { }\n\n}\n\n</code-example>\n<h3 id=\"injectable-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ed8hh61zdl766x7k2tc24h2yg\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#injectable-services\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wfi9fwchxbxq4o7k1ffyi4m1\">注意，這個新的服務匯入了 Angular 的 <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 符號，並且給這個服務類新增了 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器。\n它把這個類標記為<em>依賴注入系統</em>的參與者之一。<code>HeroService</code> 類將會提供一個可注入的服務，並且它還可以擁有自己的待注入的依賴。\n目前它沒有任何依賴。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2uuhtwxwljm1vb3s67097thu1\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器會接受該服務的元資料物件，就像 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 對元件類別的作用一樣。</p>\n<h3 id=\"get-hero-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d59k6c66koj6ul70r5cjuk8xz\">獲取英雄資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#get-hero-data\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e035w62i6u2tgdg1fvxb97qxk\"><code>HeroService</code> 可以從任何地方獲取資料，比如：Web 服務、本地儲存（LocalStorage）或一個模擬的資料來源。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwi8ghxqih1bi06a87wh4evdf\">從元件中移除資料訪問邏輯，意味著將來任何時候你都可以改變目前的實現方式，而不用改動任何元件。這些元件不需要瞭解該服務的內部實現。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zqc8isea96h5y50to0low9nr\">這節課中的實現仍然會提供<em>模擬的英雄清單</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0slh8gzfbmhbkna7noshfup9\">匯入 <code>Hero</code> 和 <code>HEROES</code>。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-heroes\">\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ekyyp2i4t718pg89k6nwhadl\">新增一個 <code>getHeroes</code> 方法，讓它回傳<em>模擬的英雄清單</em>。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"getHeroes\">\ngetHeroes(): Hero[] {\n  return HEROES;\n}\n\n</code-example>\n<p><a id=\"provide\"></a></p>\n<h2 id=\"provide-the-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9szo90jhlpfmkal4rd3yavv6z\">提供（provide）<code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#provide-the-heroservice\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bulw86d114lnxsczow4tcri6\">你必須先註冊一個<em>服務提供者</em>，來讓 <code>HeroService</code> 在依賴注入系統中可用，Angular 才能把它注入到 <code>HeroesComponent</code> 中。所謂服務提供者就是某種可用來建立或交付一個服務的東西；在這裡，它透過實例化 <code>HeroService</code> 類，來提供該服務。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj5hvrm2l6fwjjzq3i7recvsq\">為了確保 <code>HeroService</code> 可以提供該服務，就要使用<em>注入器</em>來註冊它。注入器是一個物件，負責當應用要求獲取它的實例時選擇和注入該提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eoailhbx72idcqwx8mh1j37ak\">預設情況下，Angular CLI 指令 <code>ng generate service</code> 會通過給 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器新增 <code>providedIn: 'root'</code> 元資料的形式，用<em>根注入器</em>將你的服務註冊成為提供者。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3675666gkkh6t53uc5szf4m93\">當你在頂層提供該服務時，Angular 就會為 <code>HeroService</code> 建立一個單一的、共享的實例，並把它注入到任何想要它的類別上。在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元資料中註冊該提供者，還能允許 Angular 透過移除那些完全沒有用過的服務來進行最佳化。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ksqdm1x2lx1rb63iudn2tt0e\">要了解關於提供者的更多知識，參閱<a href=\"guide/providers\">提供者部分</a>。要了解關於注入器的更多知識，參閱<a href=\"guide/dependency-injection\">依賴注入指南</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rednw8st7ly8p7f7tt5bj9vb\">現在 <code>HeroService</code> 已經準備好插入到 <code>HeroesComponent</code> 中了。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kxki628db17rdtlf3lll334f\">這是一個轉場性的程式碼範例，它將會允許你提供並使用 <code>HeroService</code>。此刻的程式碼和<a href=\"tutorial/tour-of-heroes/toh-pt4#final-code-review\">最終程式碼</a>相差很大。</p>\n</div>\n<h2 id=\"update-heroescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zuv4gxlu112rmzeurqzrryjc\">修改 <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#update-heroescomponent\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"am03lk13goyolc587mugsg0sg\">開啟 <code>HeroesComponent</code> 類別檔案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"242rssomb1i3xgan43xv99w7n\">刪除 <code>HEROES</code> 的匯入語句，因為你以後不會再用它了。轉而匯入 <code>HeroService</code>。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (import HeroService)\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"hero-service-import\">\nimport { HeroService } from '../hero.service';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hh8tsr41ogf0cpoiapclhojx\">把 <code>heroes</code> 屬性的定義改為一句簡單的宣告。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"heroes\">\nheroes: Hero[] = [];\n\n</code-example>\n<p><a id=\"inject\"></a></p>\n<h3 id=\"inject-the-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ulsbx0fxq84vdo4pasdqjwpd\">注入 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#inject-the-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ne4p9aadiz5uossh1t1xweci\">往建構式函式中新增一個私有的 <code>heroService</code>，其型別為 <code>HeroService</code>。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"ctor\">\nconstructor(private heroService: HeroService) {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abyhs61vqy2972up5ldjvd4lm\">這個引數宣告了一個私有 <code>heroService</code> 屬性，同時把它標記為一個 <code>HeroService</code> 的注入點。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5u523nslnydoerv6p23sc6u7f\">當 Angular 建立 <code>HeroesComponent</code> 時，<a href=\"guide/dependency-injection\">依賴注入</a>系統就會把這個 <code>heroService</code> 引數設定為 <code>HeroService</code> 的單例物件。</p>\n<h3 id=\"add-getheroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwdkr138kp7dn2hd8f8senhhe\">新增 <code>getHeroes()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#add-getheroes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edgy2xpb44dkw914z4gzumlzi\">建立一個方法，以從服務中獲取這些英雄資料。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-example>\n<p><a id=\"oninit\"></a></p>\n<h3 id=\"call-it-in-ngoninit\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f03puw4t23qixl8tkbqv9d2uj\">在 <code>ngOnInit()</code> 中呼叫它<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#call-it-in-ngoninit\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4lm7tuwcssbtszmchg16mug9l\">你固然可以在建構式函式中呼叫 <code>getHeroes()</code>，但那不是最佳實踐。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"982z9ffz4fdwq24d5k2svd42k\">讓建構式函式保持簡單，只做最小化的初始化操作，比如把建構式函式的引數賦值給屬性。建構式函式不應該<em>做任何事</em>。它當然不應該呼叫某個函式來向遠端服務（比如真實的資料服務）發起 HTTP 請求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0nd56744asvurctwplgyfr0t\">而是選擇在 <a href=\"guide/lifecycle-hooks\"><em>ngOnInit 生命週期鉤子</em></a>中呼叫 <code>getHeroes()</code>，之後 Angular 會在構造出 <code>HeroesComponent</code> 的實例之後的某個合適的時機呼叫 <code>ngOnInit()</code>。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"ng-on-init\">\nngOnInit(): void {\n  this.getHeroes();\n}\n\n</code-example>\n<h3 id=\"see-it-run\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aeje8g33hngo686b002aq0mfe\">檢視執行效果<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#see-it-run\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"815pljn76e2ru0r1uttc1jbhh\">重新整理瀏覽器，該應用仍執行的一如既往。顯示英雄清單，並且當你點選某個英雄的名字時顯示出英雄詳情檢視。</p>\n<h2 id=\"observable-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7tq2frer62kl48sxr6mlf2x0w\">可觀察（Observable）的資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#observable-data\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41nphlyrjc4vjucr0dulr7ucc\"><code>HeroService.getHeroes()</code> 的函式簽名是<em>同步的</em>，它所隱含的假設是 <code>HeroService</code> 總是能同步獲取英雄清單資料。而 <code>HeroesComponent</code> 也同樣假設能同步取到 <code>getHeroes()</code> 的結果。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"get-heroes\">\nthis.heroes = this.heroService.getHeroes();\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edoo95o0a3s3he6g5bqkvd7oo\">這種方法在使用非同步呼叫的真實應用中是不可能奏效的。現在能這麼做，只是因為目前該服務同步回傳的是<em>模擬資料</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sq3tv1ovsk6edp8lls9cb52d\">如果 <code>getHeroes()</code> 不能立即回傳英雄資料，它就不能是同步的，否則在它等待回傳資料期間就會阻塞瀏覽器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bf2ph826tgppu0u25xxg95oy\"><code>HeroService.getHeroes()</code> 必須具有某種形式的<em>非同步函式簽名</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emo1nhl49i3uqup6unkgfttdq\">在本教程中，\n<code>HeroService.getHeroes()</code>回傳一個\n<code>Observable</code>，因此可以使用 Angular 的\n<code>HttpClient.get</code>方法來獲取英雄，並讓\n<a href=\"guide/understanding-communicating-with-http\"><code>HttpClient.get()</code></a>回傳一個\n<code>Observable</code>。</p>\n<h3 id=\"observable-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"doc57ul55svmx4tihj0o5d5bo\">可觀察物件版本的 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#observable-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49l95yvlobnbq1pd1hsm9ry1p\"><code>Observable</code> 是 <a href=\"https://rxjs.dev\">RxJS 函式庫</a>中的一個關鍵類別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8akmnwa3de72m1mh6nez85mni\">在<a href=\"tutorial/tour-of-heroes/toh-pt6\">稍後的 HTTP 教程</a>中，你就會知道 Angular <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的方法會回傳 RxJS 的 <code>Observable</code>。這節課，你將使用 RxJS 的 <code>of()</code> 函式來模擬從伺服器回傳資料。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4al1mniwwo48mcsjejhrzoo7h\">開啟 <code>HeroService</code> 檔案，並從 RxJS 中匯入 <code>Observable</code> 和 <code>of</code> 符號。</p>\n<code-example header=\"src/app/hero.service.ts (Observable imports)\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-observable\">\nimport { Observable, of } from 'rxjs';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4qna4vwubszl68fqgl2bov4f\">把 <code>getHeroes()</code> 方法改成這樣：</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes-1\">\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  const heroes = of(HEROES);\n  return heroes;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hyb3kebueo6cyzjqh7le75wg\"><code>of(HEROES)</code> 會回傳一個 <code>Observable&lt;Hero[]&gt;</code>，它會發出單個值，這個值就是這些模擬英雄的陣列。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3nkbavmujgsn2hadc2datp3a\">在 <a href=\"tutorial/tour-of-heroes/toh-pt6\">HTTP 教程</a>中，你將會呼叫 <code>HttpClient.get&lt;Hero[]&gt;()</code> 它也同樣回傳一個 <code>Observable&lt;Hero[]&gt;</code>，它也會發出單個值，這個值就是來自 HTTP 回應體中的英雄陣列。</p>\n</div>\n<h3 id=\"subscribe-in-heroescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elco5qqage0nqnxaorx0wmh26\">在 <code>HeroesComponent</code> 中訂閱<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#subscribe-in-heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wxbhrebu4re220xxjq8opn9c\"><code>HeroService.getHeroes</code> 方法之前回傳一個 <code>Hero[]</code>，現在它回傳的是 <code>Observable&lt;Hero[]&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gj662vv9posv8famlus41isa\">你必須在 <code>HeroesComponent</code> 中也向本服務中的這種形式看齊。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38p9jrn0ov4ub2cbutz9fzo7g\">找到 <code>getHeroes</code> 方法，並且把它替換為如下程式碼。下面是新程式碼和當前版本的對比顯示。</p>\n<code-tabs>\n    <code-pane header=\"heroes.component.ts (Observable)\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes);\n}\n\n</code-pane>\n    <code-pane header=\"heroes.component.ts (Original)\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9iy59jkctqoy6dms7s9t6g80t\"><code>Observable.subscribe()</code> 是關鍵的差異點。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8gxqmsg2tf097vk9a6ftmam0f\">上一個版本把英雄的陣列賦值給了該組件的 <code>heroes</code> 屬性。這種賦值是<em>同步</em>的，這裡包含的假設是伺服器能立即回傳英雄陣列或者瀏覽器能在等待伺服器回應時凍結介面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5qn5rzciazrvin7mjd2enyjx\">當 <code>HeroService</code> 真的向遠端伺服器發起請求時，這種方式就行不通了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d717qgt2wztuy60q8q3bu2zfw\">新的版本等待 <code>Observable</code> 發出這個英雄陣列，這可能立即發生，也可能會在幾分鐘之後。然後，<code>subscribe()</code> 方法把這個英雄陣列傳給這個回呼函式，該函式把英雄陣列賦值給元件的 <code>heroes</code> 屬性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4224dtl5q7znh5a9gz0y0z774\">使用這種非同步方式，當 <code>HeroService</code> 從遠端伺服器獲取英雄資料時，就<em>可以工作了</em>。</p>\n<h2 id=\"show-messages\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vbpl0qwgpc1h11q5o9z2qals\">顯示訊息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#show-messages\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12krwwxsdgwn5x6nfjhc06i79\">這一節將指導你：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5e1pgf3mwn1iyg6arpguixmj\">新增一個 <code>MessagesComponent</code>，它在螢幕的底部顯示應用中的訊息。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pyafbvb0gbpeow7huc4m9rgj\">建立一個可注入的、全應用級別的 <code>MessageService</code>，用於傳送要顯示的訊息。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cry24falggj6aj2mp7zbm5de\">把 <code>MessageService</code> 注入到 <code>HeroService</code> 中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy4lhj6q6zn795o9l9l6xoyb2\">當 <code>HeroService</code> 成功獲取了英雄資料時顯示一條訊息。</li>\n</ul>\n<h3 id=\"create-messagescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28irj6m07o3da786m9c9o9rh\">建立 <code>MessagesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#create-messagescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ivjvbo5w1khstq17t270dypd\">使用 CLI 建立 <code>MessagesComponent</code>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component messages\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57ryoq92hl243jjes49xf3i6e\">CLI 在 <code>src/app/messages</code> 中建立了元件檔案，並且把 <code>MessagesComponent</code> 宣告在了 <code>AppModule</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aer6zz9xx7qv7w2sdtw69lhth\">修改 <code>AppComponent</code> 的樣板來顯示 <code>MessagesComponent</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"toh-pt4/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;app-heroes&gt;&lt;/app-heroes&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnqdvxrt7lti8wrdo1w3b7nkw\">你可以在頁面的底部看到來自的 <code>MessagesComponent</code> 的預設內容。</p>\n<h3 id=\"create-the-messageservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33a7zvsbspkqiimqs3dizdqgc\">建立 <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#create-the-messageservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayzb2oonx89ndaq15syscd4pr\">使用 CLI 在 <code>src/app</code> 中建立 <code>MessageService</code>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service message\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"389cjsiwmq6d59ani37ca0r5q\">開啟 <code>MessageService</code>，並把它的內容改成這樣。</p>\n<code-example header=\"src/app/message.service.ts\" path=\"toh-pt4/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bplqrwxnv03drx9pdlf0w77w\">該服務公開其 <code>messages</code> 快取和兩個方法：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pgvxi9chtzmmkjq5wu7blmpq\">將 <code>add()</code> 訊息新增到快取中的一種。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f10lqn5cp6qo00h8ggb7kkt2i\">另一個 <code>clear()</code> 快取。</li>\n</ul>\n<p><a id=\"inject-message-service\"></a></p>\n<h3 id=\"inject-it-into-the-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atg5rv0g7qudq9s0csqi9d5zs\">把它注入到 <code>HeroService</code> 中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#inject-it-into-the-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2stnhyvjwam24qhr4tqcebq2a\">在 <code>HeroService</code> 中匯入 <code>MessageService</code>。</p>\n<code-example header=\"src/app/hero.service.ts (import MessageService)\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-message-service\">\nimport { MessageService } from './message.service';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"oedmzg4nssz78fmzlxb343j9\">修改這個建構式函式，新增一個私有的 <code>messageService</code> 屬性引數。Angular 將會在建立 <code>HeroService</code> 時把 <code>MessageService</code> 的單例注入到這個屬性中。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"ctor\">\nconstructor(private messageService: MessageService) { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63i7p2ob10nfjsjc8n2wnn8jo\">這是一個典型的『服務中的服務』場景，你把 <code>MessageService</code> 注入到了 <code>HeroService</code> 中，而 <code>HeroService</code> 又被注入到了 <code>HeroesComponent</code> 中。</p>\n</div>\n<h3 id=\"send-a-message-from-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxepj8hub68la13857z4uv6s\">從 <code>HeroService</code> 中傳送一條訊息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#send-a-message-from-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60d09umv9favsrrv55cds9svd\">修改 <code>getHeroes()</code> 方法，在獲取到英雄陣列時傳送一條訊息。</p>\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes\">\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  const heroes = of(HEROES);\n  this.messageService.add('HeroService: fetched heroes');\n  return heroes;\n}\n\n</code-example>\n<h3 id=\"display-the-message-from-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"da4m41ipdaqlohhz1nr1lampe\">從 <code>HeroService</code> 中顯示訊息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#display-the-message-from-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pejpkm03o7z3hhi0a8xqma61\"><code>MessagesComponent</code> 可以顯示所有訊息，包括當 <code>HeroService</code> 獲取到英雄資料時傳送的那條。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99bowtjhwx5ytu95j3ph09jw9\">開啟 <code>MessagesComponent</code>，並且匯入 <code>MessageService</code>。</p>\n<code-example header=\"src/app/messages/messages.component.ts (import MessageService)\" path=\"toh-pt4/src/app/messages/messages.component.ts\" region=\"import-message-service\">\nimport { MessageService } from '../message.service';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407kj0cq22yme3logu7obdsxe\">修改建構式函式，新增一個 <strong>public</strong> 的 <code>messageService</code> 屬性。Angular 將會在建立 <code>MessagesComponent</code> 的實例時 把 <code>MessageService</code> 的實例注入到這個屬性中。</p>\n<code-example header=\"src/app/messages/messages.component.ts\" path=\"toh-pt4/src/app/messages/messages.component.ts\" region=\"ctor\">\nconstructor(public messageService: MessageService) {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88j8fpgscngx03xemi39af0su\">這個 <code>messageService</code> 屬性必須是公共屬性，因為你將會在樣板中繫結到它。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ut1h9fx2v79ro65a8midlmu\">Angular 只會繫結到元件的<em>公共</em>屬性。</p>\n</div>\n<h3 id=\"bind-to-the-messageservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqobow8iayi6y0jrzan4k44yo\">繫結到 <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#bind-to-the-messageservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kpsgkvj13g3jiwsjyn4jr1wu\">把 <code>ng generate</code> 建立的 <code>MessagesComponent</code> 的樣板改成這樣。</p>\n<code-example header=\"src/app/messages/messages.component.html\" path=\"toh-pt4/src/app/messages/messages.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"messageService.messages.length\"&gt;\n\n  &lt;h2&gt;Messages&lt;/h2&gt;\n  &lt;button type=\"button\" class=\"clear\"\n          (click)=\"messageService.clear()\"&gt;Clear messages&lt;/button&gt;\n  &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>='let message of messageService.messages'&gt; {{message}} &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dn8tqf4zlrt9kz5rcbq4op9wh\">這個樣板直接繫結到了元件的 <code>messageService</code> 屬性上。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw2k3383udex8qur6e3212d1a\">只有在有要顯示的訊息時才顯示訊息區域。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ac5te2zoxw97cp3uuy5zd1su5\">以重複的\n<code>&lt;div&gt;</code>元素呈現訊息清單。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3uy4wg06v45tq1syq3flh517h\">Angular \n<a href=\"guide/event-binding\">事件繫結</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chjvyy04ql7euduepdutxqact\">將按鈕的點選事件繫結到\n<code>MessageService.clear()</code>。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eoir89btje0cld5cfpm6w9ux3\">當你把 <a href=\"tutorial/tour-of-heroes/toh-pt4#final-code-review\">最終程式碼</a> 某一頁的內容新增到 <code>messages.component.css</code> 中時，這些訊息會變得好看一些。</p>\n<h2 id=\"add-messageservice-to-heroescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8klqbozcya2pcagabwe14ut9e\">為 hero 服務新增額外的訊息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#add-messageservice-to-heroescomponent\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b9n8nsfxvq9lasighpcsa4s4\">下面的例子展示了當用戶點選某個英雄時發生的歷史。當你學到後面的<a href=\"tutorial/tour-of-heroes/toh-pt5\">路由</a>一章時，這會很有幫助。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  selectedHero?: Hero;\n\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService, private messageService: MessageService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n    this.messageService.add(`HeroesComponent: Selected hero id=${hero.id}`);\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n        .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sq9jg1ayaz4w3fw9pvz35uwz\">重新整理瀏覽器，頁面顯示出了英雄清單。捲動到底部，就會在訊息區看到來自 <code>HeroService</code> 的訊息。點選 <strong>Clear messages</strong> 按鈕，訊息區不見了。</p>\n<p><a id=\"final-code-review\"></a></p>\n<h2 id=\"final-code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9wa7wkqdj6wmwmxq53bbnpvt\">檢視最終程式碼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eilmfylhtwekadywj9b0lljjc\">下面是本頁所提到的原始碼。</p>\n<code-tabs>\n    <code-pane header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&lt;Hero[]&gt; {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n}\n\n</code-pane>\n    <code-pane header=\"src/app/message.service.ts\" path=\"toh-pt4/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  selectedHero?: Hero;\n\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService, private messageService: MessageService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n    this.messageService.add(`HeroesComponent: Selected hero id=${hero.id}`);\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n        .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/messages/messages.component.ts\" path=\"toh-pt4/src/app/messages/messages.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.css']\n})\nexport class MessagesComponent {\n\n  constructor(public messageService: MessageService) {}\n\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/messages/messages.component.html\" path=\"toh-pt4/src/app/messages/messages.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"messageService.messages.length\"&gt;\n\n  &lt;h2&gt;Messages&lt;/h2&gt;\n  &lt;button type=\"button\" class=\"clear\"\n          (click)=\"messageService.clear()\"&gt;Clear messages&lt;/button&gt;\n  &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>='let message of messageService.messages'&gt; {{message}} &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/messages/messages.component.css\" path=\"toh-pt4/src/app/messages/messages.component.css\">\n/* MessagesComponent's private CSS styles */\nh2 {\n  color: #A80000;\n  font-family: Arial, Helvetica, sans-serif;\n  font-weight: lighter;\n}\n\n.clear {\n  color: #333;\n  background-color: #eee;\n  margin-bottom: 12px;\n  padding: 1rem;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n.clear:hover {\n  color: white;\n  background-color: #42545C;\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt4/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\nimport { MessagesComponent } from './messages/messages.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [\n    // no need to place any providers due to the `providedIn` flag...\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.html\" path=\"toh-pt4/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;app-heroes&gt;&lt;/app-heroes&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\">總結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#summary\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9epvdg8gtyybzbl5rajc8kwq8\">你把資料訪問邏輯重構到了 <code>HeroService</code> 類別中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9tph959y4oojg0c6einfu6w0\">你在根注入器中把 <code>HeroService</code> 註冊為該服務的提供者，以便在別處可以注入它。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er2seecnd301kugs0jbxr51ib\">你使用 <a href=\"guide/dependency-injection\">Angular 依賴注入</a>機制把它注入到了元件中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30w9ie47n6tdlc0y9mqw2wdec\">你給 <code>HeroService</code> 中獲取資料的方法提供了一個非同步的函式簽名。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fzg39wt8dx6gb8tw2312tto1\">你發現了 <code>Observable</code> 以及 RxJS 函式庫。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qha83s80pfgn579wygupfpk4\">你使用 RxJS的\n<code>of()</code>回傳\n<code>Observable&lt;Hero[]&gt;</code>，一個模擬英雄的可觀察物件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1moypotdsmu01z3ae94c2zyoo\">在元件的 <code>ngOnInit</code> 生命週期鉤子中呼叫 <code>HeroService</code> 方法，而不是建構式函式中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vapy3hgzaey8g846d7rvlqmi\">你建立了一個 <code>MessageService</code>，以便在類之間實現松耦合通訊。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w4t87buidltg5z9e3xwxc15o\"><code>HeroService</code> 連同注入到它的服務 <code>MessageService</code> 一起，注入到了元件中。</li>\n</ul>\n<h2 id=\"next-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4pkljueu68ifjoi5994e9l8o\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11fqf646m2wk2uz6f7ohe5e1\"><a href=\"tutorial/tour-of-heroes/toh-pt5\">5. 新增導向</a></li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - errors/NG0201\n - guide/example-apps-list\n - guide/lifecycle-hooks\n - guide/localizing-angular\n - guide/router-tutorial-toh\n - guide/singleton-services\n - tutorial/tour-of-heroes/toh-pt3\n - tutorial/tour-of-heroes/toh-pt5\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/platform-browser/BrowserModule\n - guide/dependency-injection\n - guide/event-binding\n - guide/lifecycle-hooks\n - guide/providers\n - guide/understanding-communicating-with-http\n - tutorial/tour-of-heroes/toh-pt4#add-getheroes\n - tutorial/tour-of-heroes/toh-pt4#add-messageservice-to-heroescomponent\n - tutorial/tour-of-heroes/toh-pt4#add-services\n - tutorial/tour-of-heroes/toh-pt4#bind-to-the-messageservice\n - tutorial/tour-of-heroes/toh-pt4#call-it-in-ngoninit\n - tutorial/tour-of-heroes/toh-pt4#create-messagescomponent\n - tutorial/tour-of-heroes/toh-pt4#create-the-heroservice\n - tutorial/tour-of-heroes/toh-pt4#create-the-messageservice\n - tutorial/tour-of-heroes/toh-pt4#display-the-message-from-heroservice\n - tutorial/tour-of-heroes/toh-pt4#final-code-review\n - tutorial/tour-of-heroes/toh-pt4#get-hero-data\n - tutorial/tour-of-heroes/toh-pt4#inject-it-into-the-heroservice\n - tutorial/tour-of-heroes/toh-pt4#inject-the-heroservice\n - tutorial/tour-of-heroes/toh-pt4#injectable-services\n - tutorial/tour-of-heroes/toh-pt4#next-steps\n - tutorial/tour-of-heroes/toh-pt4#observable-data\n - tutorial/tour-of-heroes/toh-pt4#observable-heroservice\n - tutorial/tour-of-heroes/toh-pt4#provide-the-heroservice\n - tutorial/tour-of-heroes/toh-pt4#see-it-run\n - tutorial/tour-of-heroes/toh-pt4#send-a-message-from-heroservice\n - tutorial/tour-of-heroes/toh-pt4#show-messages\n - tutorial/tour-of-heroes/toh-pt4#subscribe-in-heroescomponent\n - tutorial/tour-of-heroes/toh-pt4#summary\n - tutorial/tour-of-heroes/toh-pt4#update-heroescomponent\n - tutorial/tour-of-heroes/toh-pt4#why-services\n - tutorial/tour-of-heroes/toh-pt5\n - tutorial/tour-of-heroes/toh-pt6\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/new\n - https://rxjs.dev\n-->"}
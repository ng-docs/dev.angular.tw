{"id":"tutorial/tour-of-heroes/toh-pt5","title":"用路由新增導向支援","contents":"<div class=\"content\">\n  <h1 id=\"add-navigation-with-routing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"j36wbf3en7hhxdalvuidzlcy\">用路由新增導向支援<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#add-navigation-with-routing\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o8njvcvp6nv5wsgb9ynbhzri\">《英雄之旅》有一些新需求：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5ygx8u52zv8qlsvdmcil3hnc\">新增一個<em>儀表盤</em>檢視</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"daojghmjm8rfm3xl0fqufnnmk\">新增在<em>英雄清單</em>和<em>儀表盤</em>檢視之間導向的能力</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1k7q0nx8hfldrbmuvt31sstpz\">無論在哪個檢視中點擊一個英雄，都會導向到該英雄的詳情頁</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90wqh26mtipzeny4ldtzry63z\">在郵件中點擊一個<em>深連結</em>，會直接開啟一個特定英雄的詳情檢視</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5oeh6bf2o8adlc4yerbj497y\">這裡所說的範例應用，參閱<live-example></live-example>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkjapjs2mh3rtya8jac6s7rse\">完成時，使用者就能像這樣在應用中導向：</p>\n<div class=\"lightbox\">\n<img alt=\"View navigations\" src=\"generated/images/guide/toh/nav-diagram.png\" width=\"1550\" height=\"822\">\n</div>\n<h2 id=\"add-the-approutingmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3je6h3t8dhc9fkkfjjueydbbl\">新增 <code>AppRoutingModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#add-the-approutingmodule\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cud5wcnzj93u5wv8m7bcl4lnl\">在 Angular 中，最好在一個獨立的頂層模組中載入和設定路由器，它專注於路由功能，然後由根模組 <code>AppModule</code> 匯入它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aac2vcfacntzdq7o0xdlfl3el\">按照慣例，這個模組類別的名字叫做 <code>AppRoutingModule</code>，並且位於 <code>src/app</code> 下的 <code>app-routing.module.ts</code> 檔案中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4h0maeyx1hkwdj171r7yeqgs\">執行 <code>ng generate</code> 以建立該應用的路由模組。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module app-routing --flat --module=app\n\n</code-example>\n<div class=\"alert is-helpful\">\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7t8gjuuu05sa5zyndftf6lyfq\">引數</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>--flat</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17ddtoeotpkqahmisa9yuait1\">將檔案放在\n<code>src/app</code>而不是單獨的目錄中。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>--module=app</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0kctuia6svb38wjxn749i91j\">告訴\n<code>ng generate</code>將其註冊到\n<code>AppModule</code>的\n<code>imports</code>陣列中。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vg277mcen56kv206r4rnqjge\"><code>ng generate</code> 建立的檔案是這樣的：</p>\n<code-example header=\"src/app/app-routing.module.ts (generated)\" path=\"toh-pt5/src/app/app-routing.module.0.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: []\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ez0bklaqwl7ovdg1zik7kw11s\">把它替換為如下程式碼：</p>\n<code-example header=\"src/app/app-routing.module.ts (updated)\" path=\"toh-pt5/src/app/app-routing.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\nimport { HeroesComponent } from './heroes/heroes.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes', component: HeroesComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"677vcv4vns0g6ooy3etehou3k\">首先，<code>app-routing.module.ts</code> 會匯入 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 和 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code>，以便該應用具有路由功能。設定好路由後，接著匯入 <code>HeroesComponent</code>，它將告訴路由器要去什麼地方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exu8xunuf0vmfowacap8facj3\">注意，對 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 的引用和 <code>declarations</code> 陣列不是必要的，因此它們不再是 <code>AppRoutingModule</code> 的一部分。以下各節將詳細介紹 <code>AppRoutingModule</code> 的其餘部分。</p>\n<h3 id=\"routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anrnn4h61d6a969fjjxz5ep43\">路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#routes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kx0ptp6t7n8kd9rb9uea3jy6\">該檔案的下一部分是你的路由設定。<em>Routes</em> 告訴路由器，當用戶單擊連結或將 URL 貼上進瀏覽器地址欄時要顯示哪個檢視。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8m4ov3v91yg4zaz1e22ht0och\">由於 <code>app-routing.module.ts</code> 已經匯入了 <code>HeroesComponent</code>，因此你可以直接在 <code>routes</code> 陣列中使用它：</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"heroes-route\">\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes', component: HeroesComponent }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asifrk7ysnbmdto17zp94czt6\">典型的 Angular <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 具有兩個屬性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ghvm54f9feewnb0zbrlubp2h\">屬性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>path</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"danl4d15k4x2v5305bgdh9q2c\">與瀏覽器地址欄中的 URL 對應的字串。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>component</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fbja9x2eg5ualz415r62t3i5\">導向到該路由時路由器應該建立的元件。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rzt4kym9kgeqr4ii33cwj0c\">這會告訴路由器把該 URL 與 <code>path：'heroes'</code> 對應。如果網址類似於 <code>localhost:4200/heroes</code> 就顯示 <code>HeroesComponent</code>。</p>\n<h3 id=\"routermoduleforroot\"><code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#routermoduleforroot\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22gx5eba8nqhbw3x9owaqyqme\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料會初始化路由器，並開始監聽瀏覽器地址的變化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f2exywdrg48l0oi62p49wdhdu\">下面的程式碼行將 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 新增到 <code>AppRoutingModule</code> 的 <code>imports</code> 陣列中，同時透過呼叫 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 來用這些 <code>routes</code> 設定它：</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"ngmodule-imports\">\nimports: [ RouterModule.forRoot(routes) ],\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7vo2mwtu06haioa9kik4taj69\">這個方法之所以叫 <code>forRoot()</code>，是因為你要在應用的頂層設定這個路由器。<code>forRoot()</code> 方法會提供路由所需的服務提供者和指令，還會基於瀏覽器的當前 URL 執行首次導向。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1743fylz9g6l93ox1i1reqh6p\">接下來，<code>AppRoutingModule</code> 匯出 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>，以便它在整個應用程式中生效。</p>\n<code-example header=\"src/app/app-routing.module.ts (exports array)\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"export-routermodule\">\nexports: [ <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> ]\n\n</code-example>\n<h2 id=\"add-routeroutlet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3l564yrnxuh6j5l4n2n7eief\">新增 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#add-routeroutlet\"><i class=\"material-icons\">link</i></a></h2>\n<!-- markdownlint-disable MD001 -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f52t8hfusj6jjcusxgyed5dq3\">開啟 <code>AppComponent</code> 的範本，把 <code>&lt;app-heroes&gt;</code> 元素替換為 <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 元素。</p>\n<code-example header=\"src/app/app.component.html (router-outlet)\" path=\"toh-pt5/src/app/app.component.html\" region=\"outlet\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kwgia2hqe2g9cu245khcyd2s\"><code>AppComponent</code> 的範本不再需要 <code>&lt;app-heroes&gt;</code>，因為只有當用戶導向到這裡時，才需要顯示 <code>HeroesComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9turdmmngj6ivbrs4h6tyu76u\"><code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 會告訴路由器要在哪裡顯示路由的檢視。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ep4llq0yr3srr8h2i37f3c6l\">能在 <code>AppComponent</code> 中使用 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>，是因為 <code>AppModule</code> 匯入了 <code>AppRoutingModule</code>，而 <code>AppRoutingModule</code> 中匯出了 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>。在本教學課程開始時你執行的那個 <code>ng generate</code> 指令新增了這個匯入，是因為 <code>--module=app</code> 標誌。如果你沒有使用 <code>ng generate</code> 指令來建立 <code>app-routing.module.ts</code>，就要把 <code>AppRoutingModule</code> 匯入到 <code>app.module.ts</code> 中，並且把它新增到 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 陣列中。</p>\n</div>\n<!-- markdownlint-disable MD024 -->\n<h4 id=\"try-it\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5o8k80g83w0jrloe187y9vxwi\">試試看<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#try-it\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"du9dybw6qow1jvxsymi5zc79f\">如果應用伺服器沒有在執行，請執行 <code>ng serve</code> 指令，以便在瀏覽器中看到你的應用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kn2ghz87dduaf36gx4bsdh3n\">瀏覽器應該重新整理，並顯示著應用的標題，但是沒有顯示英雄清單。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18zry3so0iywwt36wqfb7xss1\">看看瀏覽器的地址欄。URL 是以 <code>/</code> 結尾的。而到 <code>HeroesComponent</code> 的路由路徑是 <code>/heroes</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjr5r2q56ukjanngf3jxgu2qz\">在地址欄中把 <code>/heroes</code> 追加到 URL 後面。你應該能看到熟悉的主從結構的英雄顯示介面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ymh87m6pf1qs2lbxcpj005nj\">從瀏覽器地址欄中的 URL 中移除 <code>/heroes</code>。瀏覽器就會重新整理，並且顯示本應用的標題，而不顯示英雄清單。</p>\n<!-- markdownlint-enable MD001 -->\n<!-- markdownlint-enable MD024 -->\n<p><a id=\"routerlink\"></a></p>\n<h2 id=\"add-a-navigation-link-using-routerlink\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2aeolkjezq5347rfkr9pmcxmg\">新增路由連結 (<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#add-a-navigation-link-using-routerlink\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1y2t24v11d4njl3i8kw8wyz2y\">理想情況下，使用者應該能透過點選連結進行導向，而不用被迫把路由的 URL 貼上到地址欄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzsp661gisp5hdeu8c8tupkje\">新增一個 <code>&lt;nav&gt;</code> 元素，並在其中放一個連結 <code>&lt;a&gt;</code> 元素，當點選它時，就會觸發一個到 <code>HeroesComponent</code> 的導向。修改過的 <code>AppComponent</code> 範本如下：</p>\n<code-example header=\"src/app/app.component.html (heroes RouterLink)\" path=\"toh-pt5/src/app/app.component.html\" region=\"heroes\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3z1of4vewx5ol3dy3d1jsu06q\"><a href=\"tutorial/tour-of-heroes/toh-pt5#routerlink\"><code>routerLink</code> 屬性</a>的值為 <code>\"/heroes\"</code>，路由器會用它來對應出指向 <code>HeroesComponent</code> 的路由。\n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 是 <a href=\"api/router/RouterLink\"><code>RouterLink</code> 指令</a>的選擇器，它會把使用者的點選轉換為路由器的導向操作。\n它是 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 中的另一個公共指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elrz92pnpou3dmevshrylddv2\">重新整理瀏覽器，顯示出了應用的標題和指向英雄清單的連結，但並沒有顯示英雄清單。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63pn0i6mpnd4u2gbgogpplzll\">點選這個連結。地址欄變成了 <code>/heroes</code>，並且顯示出了英雄清單。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"10ljpazodqorqbw0zgzhu4qb9\">從下面的 <a href=\"tutorial/tour-of-heroes/toh-pt5#appcomponent\">最終程式碼</a>中把私有 CSS 樣式新增到 <code>app.component.css</code> 中，可以讓導向連結變得更好看一點。</p>\n</div>\n<h2 id=\"add-a-dashboard-view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j7a9hu24keu4ta1xz1fur0t9\">新增儀表盤檢視<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#add-a-dashboard-view\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6sb1809bfq5giuhl08im13je5\">當你的的應用有多個檢視時，路由會更有價值。不過目前的《英雄之旅》應用還只有一個英雄清單檢視。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t0y4tkav7xjbwrqx2xua1b61\">要想新增 <code>DashboardComponent</code>，請執行如下 <code>ng generate</code> 指令：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component dashboard\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6s1hp5v6y9xak98ejfdphire\">CLI 生成了 <code>DashboardComponent</code> 的相關檔案，並把它宣告到 <code>AppModule</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ovpji1ka7bdj2kyyajnpdzu5\">把這三個檔案中的內容改成這樣：</p>\n<code-tabs>\n    <code-pane header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt5/src/app/dashboard/dashboard.component.1.html\">\n&lt;h2&gt;Top Heroes&lt;/h2&gt;\n&lt;div class=\"heroes-menu\"&gt;\n  &lt;a *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    {{hero.name}}\n  &lt;/a&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/dashboard/dashboard.component.ts\" path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/dashboard/dashboard.component.css\" path=\"toh-pt5/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent's private CSS styles */\n\nh2 {\n  text-align: center;\n}\n\n.heroes-menu {\n  padding: 0;\n  margin: auto;\n  max-width: 1000px;\n\n  /* flexbox */\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-content: flex-start;\n  align-items: flex-start;\n}\n\na {\n  background-color: #3f525c;\n  border-radius: 2px;\n  padding: 1rem;\n  font-size: 1.2rem;\n  text-decoration: none;\n  display: inline-block;\n  color: #fff;\n  text-align: center;\n  width: 100%;\n  min-width: 70px;\n  margin: .5rem auto;\n  box-sizing: border-box;\n\n  /* flexbox */\n  order: 0;\n  flex: 0 1 auto;\n  align-self: auto;\n}\n\n@media (min-width: 600px) {\n  a {\n    width: 18%;\n    box-sizing: content-box;\n  }\n}\n\na:hover {\n  background-color: #000;\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mjnnuoenxas7ty0iloc5l64s\">這個<em>範本</em>用來表示由英雄名字連結組成的一個陣列。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnh5x3egb6oeii1d6hlp6eske\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 複寫器為元件的 <code>heroes</code> 陣列中的每個條目建立了一個連結。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9c7qbj7ofdgdxhk7ltedzhegr\">這些連結被 <code>dashboard.component.css</code> 中的樣式格式化成了一些色塊。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbix3ik8g57d4kvlhacibz86t\">這些連結還沒有指向任何地方。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beq7i18altaovdeayudsmzbou\">這個<em>類別</em>和 <code>HeroesComponent</code> 類別很像。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lang4yzsgkicw05dqpmxyncr\">它定義了一個 <code>heroes</code> 陣列屬性。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tz0xjb65lul2wra31dr4cwev\">它的建構式函式希望 Angular 把 <code>HeroService</code> 注入到私有的 <code>heroService</code> 屬性中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2gp11ckbiql8jpv0tbh0q4id\">在 <code>ngOnInit()</code> 生命週期鉤子中呼叫 <code>getHeroes()</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gwlf6h79sj30uj2vyoqsd5bl\">這個 <code>getHeroes()</code> 函式會擷取第 1 到 第 5 位英雄，也就是說只回傳第二、第三、第四和第五個英雄。</p>\n<code-example header=\"src/app/dashboard/dashboard.component.ts\" path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n}\n\n</code-example>\n<h3 id=\"add-the-dashboard-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hy02e86h46ust748sh5u64vb\">新增儀表盤路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#add-the-dashboard-route\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gi684uwl6i28pvl5scvitvjx\">要導向到儀表盤，路由器中就需要一個相應的路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vtg6tnalayugobom5t6sl9tf\">把 <code>DashboardComponent</code> 匯入到 <code>app-routing-module.ts</code> 中。</p>\n<code-example header=\"src/app/app-routing.module.ts (import DashboardComponent)\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"import-dashboard\">\nimport { DashboardComponent } from './dashboard/dashboard.component';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5beyipx473mwj2pv2yrc21v3a\">把一個指向 <code>DashboardComponent</code> 的路由新增到 <code>routes</code> 陣列中。</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"dashboard-route\">\n{ path: 'dashboard', component: DashboardComponent },\n\n</code-example>\n<h3 id=\"add-a-default-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zds6xfzm0mci66cp8b4ld0m8\">新增預設路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#add-a-default-route\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ryhnqg10sv4h986d5mlcg134\">當應用啟動時，瀏覽器的地址欄指向了網站的根路徑。它沒有對應到任何現存路由，因此路由器也不會導向到任何地方。<code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 下方是空白的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1ch7mj5j9g24t1scb4y20ddw\">要讓應用自動導向到這個儀表盤，請把下列路由新增到 <code>routes</code> 陣列中。</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"redirect-route\">\n{ path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fi8c2l8spz5n9v9xvu8r2yda\">這個路由會把一個與空路徑『完全對應』的 URL 重導向到路徑為 <code>'/dashboard'</code> 的路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmqqu0r8pdy88zi7athgqmxsr\">瀏覽器重新整理之後，路由器載入了 <code>DashboardComponent</code>，並且瀏覽器的地址欄會顯示出 <code>/dashboard</code> 這個 URL。</p>\n<h3 id=\"add-dashboard-link-to-the-shell\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5oezov8zvfd55u4xwxnswwg1w\">把儀表盤連結新增到殼元件中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#add-dashboard-link-to-the-shell\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58cz4ui7g58fgds5xo0cgqsf3\">應該允許使用者透過點選頁面頂部導向區的各個連結在 <code>DashboardComponent</code> 和 <code>HeroesComponent</code> 之間來回導向。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cr5is7k6dt2vrmgussf184a97\">把儀表盤的導向連結新增到殼元件 <code>AppComponent</code> 的範本中，就放在 <em>Heroes</em> 連結的前面。</p>\n<code-example header=\"src/app/app.component.html\" path=\"toh-pt5/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\"&gt;Dashboard&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19axb20mh2gg16pmpiheil56r\">重新整理瀏覽器，你就能透過點選這些連結在這兩個檢視之間自由導向了。</p>\n<p><a id=\"hero-details\"></a></p>\n<h2 id=\"navigating-to-hero-details\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4a4xmil4p80g89aw045y7nkl\">導向到英雄詳情<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#navigating-to-hero-details\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mekv3udwy1el80inp70ctgmf\"><code>HeroDetailComponent</code> 可以顯示所選英雄的詳情。此刻，<code>HeroDetailComponent</code> 只能在 <code>HeroesComponent</code> 的底部看到。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blauwuciltiuiueq5c4bmloxd\">使用者應該能透過三種途徑看到這些詳情。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47kj1bkq6ye27ib4ly0q3dz4c\">透過在儀表盤中點擊某個英雄。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"comoj1aybyyjx9hoq8wk4hq1p\">透過在英雄清單中點擊某個英雄。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"deyi7o8y7f004i1hmmtnmc8jc\">透過把一個『深連結』 URL 貼上到瀏覽器的地址欄中來指定要顯示的英雄。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61ske9ctnqg8kcsny4vgia15o\">這一節棄用了導向到 <code>HeroDetailComponent</code> 的功能，並把它從 <code>HeroesComponent</code> 中解放出來。</p>\n<h3 id=\"delete-hero-details-from-heroescomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"701dlpc7f9frscnqf1bid61ip\">從 <code>HeroesComponent</code> 中刪除<em>英雄詳情</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#delete-hero-details-from-heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vizc4wdo1jinvgtub057di32\">當用戶在 <code>HeroesComponent</code> 中點擊某個英雄條目時，應用應該能導向到 <code>HeroDetailComponent</code>，從英雄清單檢視切換到英雄詳情檢視。英雄清單檢視將不再顯示，而英雄詳情檢視要顯示出來。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3wt46jwyio29vwo1zqta2a0v\">開啟 <code>heroes/heroes.component.html</code>，並從底部刪除 <code>&lt;app-hero-detail&gt;</code> 元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2s2x1f1mf3nysmo0kdrr7sdn6\">目前，點選某個英雄條目還沒有反應。不過當你啟用了到 <code>HeroDetailComponent</code> 的路由之後，<a href=\"tutorial/tour-of-heroes/toh-pt5#heroes-component-links\">很快就能修復它</a>。</p>\n<h3 id=\"add-a-hero-detail-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"265xbcwk7scgp1unmtaluwpne\">新增<em>英雄詳情</em>檢視<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#add-a-hero-detail-route\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ek82xks2hube4rdzy0ve20gyf\">要導向到 <code>id</code> 為 <code>11</code> 的英雄的<em>詳情</em>檢視，類似於 <code>~/detail/11</code> 的 URL 將是一個不錯的 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hzgv91chqpgghb2e0h0k35or\">開啟 <code>app-routing.module.ts</code> 並匯入 <code>HeroDetailComponent</code>。</p>\n<code-example header=\"src/app/app-routing.module.ts (import HeroDetailComponent)\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"import-herodetail\">\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16nsoexmeb3e1fhqdftnswrg5\">然後把一個<em>引數化</em>路由新增到 <code>routes</code> 陣列中，它要對應指向<em>英雄詳情</em>檢視的路徑。</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"detail-route\">\n{ path: 'detail/:id', component: HeroDetailComponent },\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ca3f4h4jl6ulh73spijj3atfa\"><code>path</code> 中的冒號（<code>:</code>）表示 <code>:id</code> 是一個佔位符，它表示某個特定英雄的 <code>id</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfbjcmc2sby2r9giw8pgpmgkf\">此刻，應用中的所有路由都就緒了。</p>\n<code-example header=\"src/app/app-routing.module.ts (all routes)\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"routes\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n  { path: 'dashboard', component: DashboardComponent },\n  { path: 'detail/:id', component: HeroDetailComponent },\n  { path: 'heroes', component: HeroesComponent }\n];\n\n</code-example>\n<h3 id=\"dashboardcomponent-hero-links\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3w05n598ly7d8vpibs0k99li3\"><code>DashboardComponent</code> 中的英雄連結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#dashboardcomponent-hero-links\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehjoufypqyp08w1oeozd1v61s\">此刻，<code>DashboardComponent</code> 中的英雄連線還沒有反應。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bfkdkuk2sef2hj52no1bgzgo\">路由器已經有一個指向 <code>HeroDetailComponent</code> 的路由了，修改儀表盤中的英雄連線，讓它們透過引數化的英雄詳情路由進行導向。</p>\n<code-example header=\"src/app/dashboard/dashboard.component.html (hero links)\" path=\"toh-pt5/src/app/dashboard/dashboard.component.html\" region=\"click\">\n&lt;a *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n  <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n  {{hero.name}}\n&lt;/a&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wijkhtvsfjrpsgaih5hyadfz\">你正在 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 複寫器中使用 Angular 的<a href=\"guide/interpolation\">內嵌繫結</a>來把當前迭代的 <code>hero.id</code> 插入到每個 <a href=\"tutorial/tour-of-heroes/toh-pt5#routerlink\"><code>routerLink</code></a> 中。</p>\n<p><a id=\"heroes-component-links\"></a></p>\n<h3 id=\"heroescomponent-hero-links\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"m2rzxp74sts23516u32m9vkh\"><code>HeroesComponent</code> 中的英雄連結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#heroescomponent-hero-links\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"do9k97ha706qhltkrhllq3j5d\"><code>HeroesComponent</code> 中的這些英雄條目都是 <code>&lt;li&gt;</code> 元素，它們的點選事件都繫結到了元件的 <code>onSelect()</code> 方法中。</p>\n<code-example header=\"src/app/heroes/heroes.component.html (list with onSelect)\" path=\"toh-pt4/src/app/heroes/heroes.component.html\" region=\"list\">\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;button type=\"button\" (click)=\"onSelect(hero)\" [class.selected]=\"hero === selectedHero\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n      &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n    &lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"854tu0g2snmigvvelne27n2wu\">移除 <code>&lt;li&gt;</code>，只保留它的 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>。把徽章（<code>&lt;badge&gt;</code>）和名字包裹進一個 <code>&lt;a&gt;</code> 元素中。\n像儀表盤的範本中那樣為這個 <code>&lt;a&gt;</code> 元素新增一個 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 屬性。</p>\n<code-example header=\"src/app/heroes/heroes.component.html (list with links)\" path=\"toh-pt5/src/app/heroes/heroes.component.html\" region=\"list\">\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fidwauvvb2w4hto4os16k7f2\">還要修改 <code>heroes.component.css</code> 中的私有樣式表，讓清單恢復到以前的外觀。\n修改後的樣式表參閱本指南底部的<a href=\"tutorial/tour-of-heroes/toh-pt5#heroescomponent\">最終程式碼</a>。</p>\n<h4 id=\"remove-dead-code---optional\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wbwstjkogjszw6neacsbkt30\">移除死程式碼（可選）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#remove-dead-code---optional\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zp16jarkwv3l5t4jtuigofg7\">雖然 <code>HeroesComponent</code> 類別仍然能正常工作，但 <code>onSelect()</code> 方法和 <code>selectedHero</code> 屬性已經沒用了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekbhsmtkuo6qgnopq5dza5vhh\">為了將來更好維護，你最好清理掉它們。下面是刪除了死程式碼之後的類別。</p>\n<code-example header=\"src/app/heroes/heroes.component.ts (cleaned up)\" path=\"toh-pt5/src/app/heroes/heroes.component.ts\" region=\"class\">\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n</code-example>\n<h2 id=\"routable-herodetailcomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jbfumrprxkyjbowkjbjb3l5e\">支援路由的 <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#routable-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fs1az0ng953s126q9gwajnqk\">父元件 <code>HeroesComponent</code> 以前會設定 <code>HeroDetailComponent.hero</code> 屬性，然後 <code>HeroDetailComponent</code> 就會顯示這個英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41haougdjkdn4lcqp7o4pf9ar\"><code>HeroesComponent</code> 已經不會再那麼做了。現在，當路由器會在回應形如 <code>~/detail/11</code> 的 URL 時建立 <code>HeroDetailComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jtarei6uwhrf2398ze88n0tm\"><code>HeroDetailComponent</code> 需要從一種新的途徑獲取<em>要顯示的英雄</em>。本節會講解如下操作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"472zioscgwt5xkm3yxnlj16ec\">獲取建立本元件的路由</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sgtzlxgbpjyhrrdswyrxqio3\">從這個路由中提取出 <code>id</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z96e65if8kyyv5oakxnls6lr\">透過 <code>HeroService</code> 從伺服器上獲取具有這個 <code>id</code> 的英雄資料。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"calslqvuuj0188cukzg9awi99\">先新增下列匯入語句：</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"added-imports\">\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { HeroService } from '../hero.service';\n\n</code-example>\n<p><a id=\"hero-detail-ctor\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egrckdcz1vxnuzsbf57mxhbgm\">然後把 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>、<code>HeroService</code> 和 <code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> 服務注入到建構式函式中，將它們的值儲存到私有變數裡：</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"ctor\">\nconstructor(\n  private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  private heroService: HeroService,\n  private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n) {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hxhbb80f21otshzep8vjclt5\"><a href=\"api/router/ActivatedRoute\"><code>ActivatedRoute</code></a> 儲存著到這個 <code>HeroDetailComponent</code> 實例的路由訊息。這個元件對從 URL 中提取的路由引數感興趣。其中的 <code>id</code> 引數就是要顯示的英雄的 <code>id</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bohkvangcedtk2kyn30vd1gfy\"><a href=\"tutorial/tour-of-heroes/toh-pt4\"><code>HeroService</code></a> 從遠端伺服器獲取英雄資料，本元件將使用它來獲取要顯示的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fm7g1pltek4imwaw0r7h4skn\"><a href=\"api/common/Location\"><code>location</code></a> 是一個 Angular 的服務，用來與瀏覽器打交道。\n<a href=\"tutorial/tour-of-heroes/toh-pt5#goback\">稍後</a>，你就會使用它來導向回上一個檢視。</p>\n<h3 id=\"extract-the-id-route-parameter\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bla3k0w1vv57225rrhm6blscv\">從路由引數中提取 <code>id</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#extract-the-id-route-parameter\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"buaq0qr88a3teg6nyvzuid1s9\">在 <code>ngOnInit()</code> <a href=\"guide/lifecycle-hooks#oninit\">生命週期鉤子</a> 中呼叫 <code>getHero()</code>，程式碼如下。</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"ngOnInit\">\nngOnInit(): void {\n  this.getHero();\n}\n\ngetHero(): void {\n  const id = Number(this.route.snapshot.paramMap.get('id'));\n  this.heroService.getHero(id)\n    .subscribe(hero =&gt; this.hero = hero);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1wn4mrmiwxlye4ulneoi3142\"><code>route.snapshot</code> 是一個路由訊息的靜態快照，抓取自元件剛剛建立完畢之後。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ace20n1533xmltbpvmdhpav14\"><code>paramMap</code> 是一個從 URL 中提取的路由引數值的字典。<code>\"id\"</code> 對應的值就是要獲取的英雄的 <code>id</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fofg2h73y5novng1e7mhmdfp\">路由引數總會是字串。JavaScript 的 <code>Number</code> 函式會把字串轉換成數字，英雄的 <code>id</code> 就是數字型別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwbk3dcygtamcr22h44cqgqmv\">重新整理瀏覽器，應用掛了。出現一個編譯錯誤，因為 <code>HeroService</code> 沒有一個名叫 <code>getHero()</code> 的方法。這就新增它。</p>\n<h3 id=\"add-heroservicegethero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4q5fosxqtht52cvx5l66jbhxu\">新增 <code>HeroService.getHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#add-heroservicegethero\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36ti92hhd8zj858kwqb051jo5\">新增 <code>HeroService</code>，並在 <code>getHeroes()</code> 後面新增如下的 <code>getHero()</code> 方法，它接收 <code>id</code> 引數：</p>\n<code-example header=\"src/app/hero.service.ts (getHero)\" path=\"toh-pt5/src/app/hero.service.ts\" region=\"getHero\">\ngetHero(id: number): Observable&lt;Hero&gt; {\n  // For now, assume that a hero with the specified `id` always exists.\n  // Error handling will be added in the next step of the tutorial.\n  const hero = HEROES.find(h =&gt; h.id === id)!;\n  this.messageService.add(`HeroService: fetched hero id=${id}`);\n  return of(hero);\n}\n\n</code-example>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a11lhp24l70c9qzapx1ykokgo\"><strong>重要</strong>：<br>\n反引號 ( ` ) 用於定義 JavaScript 的 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals\">範本字串字面量</a>，以便嵌入 <code>id</code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acjtfla5bjrvsgct90p62jbj3\">像 <a href=\"tutorial/tour-of-heroes/toh-pt4#observable-heroservice\"><code>getHeroes()</code></a> 一樣，<code>getHero()</code> 也有一個非同步函式簽名。它用 RxJS 的 <code>of()</code> 函式回傳一個 <code>Observable</code> 形式的<em>模擬英雄資料</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49kiib8r5r4z5e0n07dimyvlj\">你將來可以用一個真實的 <code>Http</code> 請求來重新實現 <code>getHero()</code>，而不用修改呼叫了它的 <code>HeroDetailComponent</code>。</p>\n<!-- markdownlint-disable MD024 -->\n<h4 id=\"try-it-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5o8k80g83w0jrloe187y9vxwi\">試試看<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#try-it-1\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck60u2th9ifpuvvl7f7y5cj48\">重新整理瀏覽器，應用又恢復正常了。你可以在儀表盤或英雄清單中點擊一個英雄來導向到該英雄的詳情檢視。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d14wm6wj5337j8vnkc7d1hmox\">如果你在瀏覽器的地址欄中貼上了 <code>localhost:4200/detail/11</code>，路由器也會導向到 <code>id: 11</code> 的英雄（\"Dr. Nice\"）的詳情檢視。</p>\n<!-- markdownlint-enable MD024 -->\n<p><a id=\"goback\"></a></p>\n<h3 id=\"find-the-way-back\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adex0z1gbt7i0g794nxcooxh6\">回到原路<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#find-the-way-back\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdz3bn3zjs0f30zg5z5l7ikq5\">透過點選瀏覽器的後退按鈕，你可以回到前一頁。它可能是英雄清單或儀表盤檢視，這取決於你從哪裡進入的詳情檢視。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahxkspumcjc5jgd0qlvmdeao4\">如果能在 <code>HeroDetail</code> 檢視中也有這麼一個按鈕就更好了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dcrt2tb8x3gcfz1ogarshwiv5\">把一個<em>後退</em>按鈕新增到元件範本的底部，並且把它繫結到元件的 <code>goBack()</code> 方法。</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.html (back button)\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.html\" region=\"back-button\">\n&lt;button type=\"button\" (click)=\"goBack()\"&gt;go back&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e060dxcwnz9vwgiqm1jys84f6\">在元件類別中新增一個 <code>goBack()</code> 方法，利用<a href=\"tutorial/tour-of-heroes/toh-pt5#hero-detail-ctor\">你以前注入的</a> <code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> 服務在瀏覽器的歷史棧中後退一步。</p>\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts (goBack)\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"goBack\">\ngoBack(): void {\n  this.location.back();\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7t2h59vtiaiwx0tap3iw5j9b\">重新整理瀏覽器，並開始點選。使用者能在應用中導向：從儀表盤到英雄詳情再回來，從英雄清單到 mini 版英雄詳情到英雄詳情，再回到英雄清單。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cm5t86wdsp7hq4dskqdmhxkx\">當你將一些私有 CSS 樣式新增到 <code>hero-detail.component.css</code> 裡之後，其細節看起來會更好，如下麵的<a href=\"tutorial/tour-of-heroes/toh-pt5#final-code-review\">『檢視最終程式碼』</a>標籤頁中所示。</p>\n<h2 id=\"final-code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9wa7wkqdj6wmwmxq53bbnpvt\">檢視最終程式碼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<!-- markdownlint-disable MD001 -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eilmfylhtwekadywj9b0lljjc\">下面是本頁所提到的原始碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cx69l53mvprqosqzbngsma2o\"><a id=\"approutingmodule\"></a>\n<a id=\"appmodule\"></a></p>\n<h4 id=\"approutingmodule-appmodule-and-heroservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gckvbwv8tr4dkwaonexnu4x9\"><code>AppRoutingModule</code>、<code>AppModule</code> 和 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#approutingmodule-appmodule-and-heroservice\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n    <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt5/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { MessagesComponent } from './messages/messages.component';\n\nimport { AppRoutingModule } from './app-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n  { path: 'dashboard', component: DashboardComponent },\n  { path: 'detail/:id', component: HeroDetailComponent },\n  { path: 'heroes', component: HeroesComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> ]\n})\nexport class AppRoutingModule {}\n\n</code-pane>\n    <code-pane header=\"src/app/hero.service.ts\" path=\"toh-pt5/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({ providedIn: 'root' })\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&lt;Hero[]&gt; {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n\n  getHero(id: number): Observable&lt;Hero&gt; {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h =&gt; h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"appcomponent\"></a></p>\n<h4 id=\"appcomponent\"><code>AppComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#appcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n    <code-pane header=\"src/app/app.component.html\" path=\"toh-pt5/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\"&gt;Dashboard&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.ts\" path=\"toh-pt5/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.css\" path=\"toh-pt5/src/app/app.component.css\">\n/* AppComponent's private CSS styles */\nh1 {\n  margin-bottom: 0;\n}\nnav a {\n  padding: 1rem;\n  text-decoration: none;\n  margin-top: 10px;\n  display: inline-block;\n  background-color: #e8e8e8;\n  color: #3d3d3d;\n  border-radius: 4px;\n}\n\nnav a:hover {\n  color: white;\n  background-color: #42545C;\n}\nnav a:active {\n  background-color: black;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"dashboardcomponent\"></a></p>\n<h4 id=\"dashboardcomponent\"><code>DashboardComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#dashboardcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n    <code-pane header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt5/src/app/dashboard/dashboard.component.html\">\n&lt;h2&gt;Top Heroes&lt;/h2&gt;\n&lt;div class=\"heroes-menu\"&gt;\n  &lt;a *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n    {{hero.name}}\n  &lt;/a&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/dashboard/dashboard.component.ts\" path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/dashboard/dashboard.component.css\" path=\"toh-pt5/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent's private CSS styles */\n\nh2 {\n  text-align: center;\n}\n\n.heroes-menu {\n  padding: 0;\n  margin: auto;\n  max-width: 1000px;\n\n  /* flexbox */\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-content: flex-start;\n  align-items: flex-start;\n}\n\na {\n  background-color: #3f525c;\n  border-radius: 2px;\n  padding: 1rem;\n  font-size: 1.2rem;\n  text-decoration: none;\n  display: inline-block;\n  color: #fff;\n  text-align: center;\n  width: 100%;\n  min-width: 70px;\n  margin: .5rem auto;\n  box-sizing: border-box;\n\n  /* flexbox */\n  order: 0;\n  flex: 0 1 auto;\n  align-self: auto;\n}\n\n@media (min-width: 600px) {\n  a {\n    width: 18%;\n    box-sizing: content-box;\n  }\n}\n\na:hover {\n  background-color: #000;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"heroescomponent\"></a></p>\n<h4 id=\"heroescomponent\"><code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#heroescomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n    <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt5/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt5/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.css\" path=\"toh-pt5/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  position: relative;\n  cursor: pointer;\n}\n\n.heroes li:hover {\n  left: .1em;\n}\n\n.heroes a {\n  color: #333;\n  text-decoration: none;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n  display: block;\n  width: 100%;\n}\n\n.heroes a:hover {\n  color: #2c3a41;\n  background-color: #e6e6e6;\n}\n\n.heroes a:active {\n  background-color: #525252;\n  color: #fafafa;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #405061;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  min-width: 16px;\n  text-align: right;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"herodetailcomponent\"></a></p>\n<h4 id=\"herodetailcomponent\"><code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#herodetailcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n    <code-pane header=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n  &lt;h2&gt;{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n    &lt;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"Hero name\"/&gt;\n  &lt;/div&gt;\n  &lt;button type=\"button\" (click)=\"goBack()\"&gt;go back&lt;/button&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: [ './hero-detail.component.css' ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero | undefined;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private heroService: HeroService,\n    private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n  ) {}\n\n  ngOnInit(): void {\n    this.getHero();\n  }\n\n  getHero(): void {\n    const id = Number(this.route.snapshot.paramMap.get('id'));\n    this.heroService.getHero(id)\n      .subscribe(hero =&gt; this.hero = hero);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/hero-detail/hero-detail.component.css\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.css\">\n/* HeroDetailComponent's private CSS styles */\nlabel {\n  color: #435960;\n  font-weight: bold;\n}\ninput {\n  font-size: 1em;\n  padding: .5rem;\n}\nbutton {\n  margin-top: 20px;\n  background-color: #eee;\n  padding: 1rem;\n  border-radius: 4px;\n  font-size: 1rem;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\nbutton:disabled {\n  background-color: #eee;\n  color: #ccc;\n  cursor: auto;\n}\n\n\n</code-pane>\n</code-tabs>\n<!-- markdownlint-enable MD001 -->\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\">總結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#summary\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6gk133ek185c0kmnahbgtfg8y\">新增了 Angular <em>路由器</em>在各個不同元件之間導向</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4op51rpct5i79wg4gzip50l0\">你使用一些 <code>&lt;a&gt;</code> 連結和一個 <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 把 <code>AppComponent</code> 轉換成了一個導向用的殼元件</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ads3t4eprynmhq3zmapgb598m\">你在 <code>AppRoutingModule</code> 中設定了路由器</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8y6wlhfaq0u44c5apo1vsa8x8\">你定義了一些簡單路由、一個重導向路由和一個引數化路由</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6worg3jupwvp588qn6mk5rwa\">你在 <code>&lt;a&gt;</code> 元素中使用了 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtp7rfi4fxei80yzwo0go0qyo\">你把一個緊耦合的主從檢視重構成了帶路由的詳情檢視</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d02ydq7dg8spmyvqsuruhnv89\">你使用路由連結引數來導向到所選英雄的詳情檢視</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26nbh1yz71hkjn9arswe81jc4\">在多個元件之間共享了 <code>HeroService</code> 服務</li>\n</ul>\n<h2 id=\"next-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4pkljueu68ifjoi5994e9l8o\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt5#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8bucvijn9fkztty4k34gv8vr\"><a href=\"tutorial/tour-of-heroes/toh-pt6\">6. 從伺服器獲取資料</a></li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/localizing-angular\n - tutorial/tour-of-heroes/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/Location\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/Route\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterModule#forRoot\n - api/router/RouterOutlet\n - api/router/Routes\n - guide/interpolation\n - guide/lifecycle-hooks#oninit\n - tutorial/tour-of-heroes/toh-pt4\n - tutorial/tour-of-heroes/toh-pt4#observable-heroservice\n - tutorial/tour-of-heroes/toh-pt5#add-a-dashboard-view\n - tutorial/tour-of-heroes/toh-pt5#add-a-default-route\n - tutorial/tour-of-heroes/toh-pt5#add-a-hero-detail-route\n - tutorial/tour-of-heroes/toh-pt5#add-a-navigation-link-using-routerlink\n - tutorial/tour-of-heroes/toh-pt5#add-dashboard-link-to-the-shell\n - tutorial/tour-of-heroes/toh-pt5#add-heroservicegethero\n - tutorial/tour-of-heroes/toh-pt5#add-navigation-with-routing\n - tutorial/tour-of-heroes/toh-pt5#add-routeroutlet\n - tutorial/tour-of-heroes/toh-pt5#add-the-approutingmodule\n - tutorial/tour-of-heroes/toh-pt5#add-the-dashboard-route\n - tutorial/tour-of-heroes/toh-pt5#appcomponent\n - tutorial/tour-of-heroes/toh-pt5#approutingmodule-appmodule-and-heroservice\n - tutorial/tour-of-heroes/toh-pt5#dashboardcomponent\n - tutorial/tour-of-heroes/toh-pt5#dashboardcomponent-hero-links\n - tutorial/tour-of-heroes/toh-pt5#delete-hero-details-from-heroescomponent\n - tutorial/tour-of-heroes/toh-pt5#extract-the-id-route-parameter\n - tutorial/tour-of-heroes/toh-pt5#final-code-review\n - tutorial/tour-of-heroes/toh-pt5#find-the-way-back\n - tutorial/tour-of-heroes/toh-pt5#hero-detail-ctor\n - tutorial/tour-of-heroes/toh-pt5#herodetailcomponent\n - tutorial/tour-of-heroes/toh-pt5#heroescomponent\n - tutorial/tour-of-heroes/toh-pt5#heroescomponent-hero-links\n - tutorial/tour-of-heroes/toh-pt5#navigating-to-hero-details\n - tutorial/tour-of-heroes/toh-pt5#next-steps\n - tutorial/tour-of-heroes/toh-pt5#remove-dead-code---optional\n - tutorial/tour-of-heroes/toh-pt5#routable-herodetailcomponent\n - tutorial/tour-of-heroes/toh-pt5#routerlink\n - tutorial/tour-of-heroes/toh-pt5#routermoduleforroot\n - tutorial/tour-of-heroes/toh-pt5#routes\n - tutorial/tour-of-heroes/toh-pt5#summary\n - tutorial/tour-of-heroes/toh-pt5#try-it\n - tutorial/tour-of-heroes/toh-pt5#try-it-1\n - tutorial/tour-of-heroes/toh-pt6\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals\n-->"}
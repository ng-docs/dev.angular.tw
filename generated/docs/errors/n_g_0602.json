{"id":"errors/NG0602","title":"NG0602: 在响应式上下文中调用了一个不允许的函数。","contents":"<div class=\"content\">\n\n  <h1 id=\"ng0602-a-disallowed-function-is-called-inside-a-reactive-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64a5jsalovnuw2j3s53j1xtme\">NG0602: 在响应式上下文中调用了一个不允许的函数。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#ng0602-a-disallowed-function-is-called-inside-a-reactive-context\"><i class=\"material-icons\">link</i></a></h1>\n\n  \n  \n\n  <div class=\"error-description\">\n    <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9pam5wxdc2m4p8re71imfjv0g\">在响应式上下文中调用不允许在其中运行的函数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qatdwgp10utfyomsu8nn98as\">例如，\n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>不可从\n<code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code>中调度，也不可从正在执行的effect中调度。避免在模板表达式中调用诸如\n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>的函数，因为这些函数在自己的响应式上下文中执行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sbh8zh45t0o86wlmgjq41vax\">计算表达式应该是纯的。 纯的意思是表达式不会触发任何副作用。 副作用是诸如调度 \n<code><a href=\"api/core/afterRender\" class=\"code-anchor\">afterRender</a></code>、创建新 \n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>，或订阅可观察者等操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byfdrsvkrix56o249jv2tjtmk\">一些操作在响应式上下文中被明确禁止，以避免常见陷阱。 举例来说，在 \n<code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code> 中使用 \n<code><a href=\"api/core/afterRender\" class=\"code-anchor\">afterRender</a></code> 将会在每次计算表达式求值时安排新的渲染钩子。 这很可能不是预期的行为，可能会降低应用程序性能。</p>\n<h3 id=\"fixing-the-error\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63eun1v9nz40i6edbyrmabm2e\">修复错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#fixing-the-error\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16b1mfr1vgvjz7tjnztvr4iea\">此错误指南并非穷尽。 它涵盖了一些常见情况以及如何解决错误。</p>\n<h4 id=\"afterrender\"><code><a href=\"api/core/afterRender\" class=\"code-anchor\">afterRender</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#afterrender\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u24t1h84or1di0kmk0640wtq\">将对 \n<code><a href=\"api/core/afterRender\" class=\"code-anchor\">afterRender</a></code> 的调用移到响应式上下文之外。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"el8xyysufjkmb1aagyol2w1hx\">在组件的类构造函数中安排渲染后钩子是一个不错的选择。 或者，使用 \n<code><a href=\"api/core/untracked\" class=\"code-anchor\">untracked</a></code> 来离开响应式上下文，并明确选择退出此错误。</p>\n<h4 id=\"effect\"><code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#effect\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pyijsph8a200md01gxseksd7\">将对 \n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code> 的调用移到响应式上下文之外。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"481sk8l8i8pmragrwir1ipgon\">在 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 的类构造函数中安排效果是一个不错的选择。</p>\n<h4 id=\"tosignal\"><code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#tosignal\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ceca6x30cxxgxoqhzxu3so05\">将对 \n<code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code> 的调用移到响应式上下文之外。</p>\n<code-example language=\"typescript\">\nresult = <a href=\"api/core/computed\" class=\"code-anchor\">computed</a>(() =&gt; {\n  const dataSignal = <a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a>(dataObservable$);\n  return doSomething(dataSignal());\n});\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12gs1qq8sy4ccwssejcrw5e4y\">可以重构为：</p>\n<code-example language=\"typescript\">\ndataSignal = <a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a>(dataObservable$);\nresult = <a href=\"api/core/computed\" class=\"code-anchor\">computed</a>(() =&gt; doSomething(dataSignal()));\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40vl0y6em77e07afanx74y6q0\">或者，如果这不可行，考虑手动订阅可观察者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dp5ja626flz0i6uegks72n069\">作为最后的手段，使用 \n<code><a href=\"api/core/untracked\" class=\"code-anchor\">untracked</a></code> 来离开响应式上下文。 要小心，离开响应式上下文可能导致信号读取在 \n<code><a href=\"api/core/untracked\" class=\"code-anchor\">untracked</a></code> 中被忽略。</p>\n\n  </div>\n\n\n  \n  <br>\n\n  <div class=\"debugging\">\n    <h2 id=\"debugging-the-error\">如何排除本错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0602#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22u056v1y0s4usgkbmhmvfhny\">错误消息提到了意外调用的函数。 在应用代码中查找这个函数调用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3v3z4cwwod12pagcp4m9ayuo\">或者，浏览器的堆栈跟踪将显示函数被调用的位置以及其位置。</p>\n\n  </div>\n  \n</div>\n\n<!-- links to this doc:\n - errors\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/afterRender\n - api/core/computed\n - api/core/effect\n - api/core/rxjs-interop/toSignal\n - api/core/untracked\n - errors/NG0602#afterrender\n - errors/NG0602#debugging-the-error\n - errors/NG0602#description\n - errors/NG0602#effect\n - errors/NG0602#fixing-the-error\n - errors/NG0602#ng0602-a-disallowed-function-is-called-inside-a-reactive-context\n - errors/NG0602#tosignal\n-->"}
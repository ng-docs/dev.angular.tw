{"id":"errors/NG3003","title":"NG3003: 需要创建导入循环才能编译此组件。","contents":"<div class=\"content\">\n\n  <h1 id=\"ng3003-import-cycles-would-need-to-be-created-to-compile-this-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"537s46v25g28h2h8uxx7a216w\">NG3003: 需要创建导入循环才能编译此组件。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#ng3003-import-cycles-would-need-to-be-created-to-compile-this-component\"><i class=\"material-icons\">link</i></a></h1>\n\n  \n  \n\n  <div class=\"error-description\">\n    <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqjm7mtophvgytjp92eloydif\">该组件引用的组件、指令或管道将要求编译器添加某个导入，而这将导致循环导入。比如，考虑一个场景，其中 <code>ParentComponent</code> 在其模板中引用了 <code>ChildComponent</code></p>\n<code-example header=\"parent.component.ts\" path=\"errors/cyclic-imports/parent.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-parent',\n  template: '&lt;app-child&gt;&lt;/app-child&gt;',\n})\nexport class ParentComponent {}\n\n\n</code-example>\n<code-example header=\"child.component.ts\" path=\"errors/cyclic-imports/child.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\nimport {ParentComponent} from './parent.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  template: 'The child!',\n})\nexport class ChildComponent {\n  constructor(private parent: ParentComponent) {}\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqtauo867m5lmhdblayyqc4d6\">由于 <code>ChildComponent</code> 在其构造函数中引用了 <code>ParentComponent</code>，因此已经有一个从 <code>child.component.ts</code> 到 <code>parent.component.ts</code> 的导入。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aa3960xabyrirsiqo9lernkrp\"><strong>注意</strong>：<br>\n父组件的模板中包含 <code>&lt;child&gt;&lt;/child&gt;</code>。因此，该模板的生成后代码必须包含对 <code>ChildComponent</code> 类的引用。而为了进行此引用，编译器必须将来自 <code>parent.component.ts</code> 的导入添加到 <code>child.component.ts</code> 中，这将导致循环导入：</p>\n<code-example format=\"none\" language=\"none\">\n\nparent.component.ts -&gt; child.component.ts -&gt; parent.component.ts\n\n</code-example>\n</div>\n<h3 id=\"remote-scoping\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6dx2efdwnb1rvq2njx28mmnub\">远程作用域<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#remote-scoping\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7p8n77iwlbxahxj17yxl7p7ks\">如果您正在使用 NgModule，请避免添加导致循环依赖的导入，附加代码将添加到声明连接依赖项的组件的 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 类中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"deyhmqspwz1wu19lgenfn3rbz\">这被称为“远程作用域”。</p>\n<h3 id=\"libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"accdlvrx8gygmhhoivg70rme2\">库<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#libraries\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"g7p2sze6n5d3sv1d586zp5z5\">不幸的是，“远程作用域”代码有副作用，它会阻止摇树优化，并且不能在库中使用。因此，当使用 <code>\"compilationMode\": \"partial\"</code> 设置来构建库时，任何需要循环导入的组件都将引发此 <code>NG3003</code> 编译器错误。</p>\n\n  </div>\n\n\n  \n  <br>\n\n  <div class=\"debugging\">\n    <h2 id=\"debugging-the-error\">如何排除本错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uwy3f6cq6691h5wyg3al8nmt\">这种循环会显示为错误消息的一部分。比如：</p>\n<code-example hidecopy=\"true\">\n\nThe component ChildComponent is used in the template but importing it would create a cycle:\n/parent.component.ts -&gt; /child.component.ts -&gt; /parent.component.ts\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cp2njk23obr2001ojs7uc7cir\">使用它来确定所引用的组件、管道或指令是如何反向依赖要编译的组件的。以下是一些解决问题的方法：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24gyezjz3nczwrfcj1p3fkmha\">尝试重新安排你的依赖关系，以避免循环。比如，使用存储在独立文件中的中间接口，可以将该文件导入两个相关文件中而不会导致循环导入。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afx6bdimqwvf7rph7550frufn\">把相互引用的类移入同一个文件中，以避免它们相互导入。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"u8ibzqmewd92tvewcw4a4ffa\">将相互引用的类移到同一文件中，以避免它们之间的任何导入。</li>\n</ul>\n\n  </div>\n  \n</div>\n\n<!-- links to this doc:\n - errors\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/NgModule\n - errors/NG3003#debugging-the-error\n - errors/NG3003#description\n - errors/NG3003#libraries\n - errors/NG3003#ng3003-import-cycles-would-need-to-be-created-to-compile-this-component\n - errors/NG3003#remote-scoping\n-->"}
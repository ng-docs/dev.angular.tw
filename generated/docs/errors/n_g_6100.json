{"id":"errors/NG6100","title":"NG6100: 将 NgModule.id 设置为 module.id 是常见的反模式。","contents":"<div class=\"content\">\n\n  <h1 id=\"ng6100-setting-ngmoduleid-to-moduleid-is-a-common-anti-pattern\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d10m5e6u50p5wz71joe9xh4mk\">NG6100: 将 NgModule.id 设置为 module.id 是常见的反模式。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG6100#ng6100-setting-ngmoduleid-to-moduleid-is-a-common-anti-pattern\"><i class=\"material-icons\">link</i></a></h1>\n\n  \n  \n\n  <div class=\"error-description\">\n    <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG6100#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7aa2wd19o9eznko85u4kb57od\">使用 <code>module.id</code> 作为 NgModule 的 <code>id</code> 是一种常见的反模式，并且可能在你的代码中无法达到预期效果。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tdpb7kajwu1c4so1s39z0bp5\">NgModules 可以用 <code>id</code> 来声明：</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  id: 'my_module'\n})\nexport class MyModule {}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13uvmkracyytobe0t0t9v6592\">声明一个 <code>id</code> 可以让 NgModule 通过 <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a>()</code> 操作进行查找。此特性很少使用，主要用在非常特定的打包场景中惰性加载 NgModules 而不获取对它们的直接引用。在大多数 Angular 代码中，应该改用 ES 动态 <code>import()</code>（<code>import('./path/to/module')</code>），因为这样可以提供对正在加载的 NgModule 的直接引用，而无需全局注册的副作用.</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhry04bknpjlwiu19hde2ao48\">如果你不使用 <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a></code>，则无需为 NgModules 提供 <code>id</code>。提供它有一个显着的缺点：它使 NgModule 不可摇树优化，这可能会影响你的包大小。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dc2gd4xmkjjmigqiifm1fqcr\">特别是，指定 <code>id: module.id</code> 的模式是由于对 <code>@<a href=\"api/core/NgModule#id\" class=\"code-anchor\">NgModule.id</a></code> 的误解导致的。在早期版本的 Angular 中，有时有必要在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据中包含属性 <code>moduleId: module.id</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"571zy6ou4oqcsyrjcttcz2cz7\">将 <code>module.id</code> 用作 <code>@<a href=\"api/core/NgModule#id\" class=\"code-anchor\">NgModule.id</a></code> 可能是由于混淆了 <code>@<a href=\"api/core/Component#moduleId\" class=\"code-anchor\">Component.moduleId</a></code> 和 <code>@<a href=\"api/core/NgModule#id\" class=\"code-anchor\">NgModule.id</a></code>。<code>module.id</code> 通常对于 <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a>()</code> 操作还有点用，因为 <code>id</code> 需要的是众所周知的字符串，而 <code>module.id</code> 通常对消费者来说是不可见的。</p>\n\n  </div>\n\n\n  \n  <br>\n\n  <div class=\"debugging\">\n    <h2 id=\"debugging-the-error\">如何排除本错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG6100#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7byepkb1zasolwz79592ju2bw\">你可以从 NgModules 中删除 <code>id: module.id</code> 声明。编译器会忽略此声明并发出此警告。</p>\n\n  </div>\n  \n</div>\n\n<!-- links to this doc:\n - errors\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Component#moduleId\n - api/core/NgModule\n - api/core/NgModule#id\n - api/core/getNgModuleById\n - errors/NG6100#debugging-the-error\n - errors/NG6100#description\n - errors/NG6100#ng6100-setting-ngmoduleid-to-moduleid-is-a-common-anti-pattern\n-->"}
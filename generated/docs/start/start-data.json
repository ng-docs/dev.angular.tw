{"id":"start/start-data","title":"管理資料","contents":"<div class=\"content\">\n  <h1 id=\"managing-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3o2qpf2d0ynhjhidz944g48ud\">管理資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#managing-data\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3h89jjae1jbz51sqf5n73zdrw\">本章基於<a href=\"start\">以一個基本 Angular 應用快速上手</a>的第二步 —— <a href=\"start/start-routing\" title=\"Adding navigation\">新增導向</a>。在此開發階段，本商店應用具有一個包含兩個檢視的商品名錄：商品清單和商品詳情。使用者點選清單中的某個商品名稱，就會在新檢視中看到具有專門的 URL 或路由的詳情頁。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"796ub415bl3yhh3inryqkf67k\">本頁將指導你分三個步驟建立購物車：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3d6luh0f5btd7wbrqx45r3vek\">修改商品詳情檢視，讓它包含一個 『Buy』 按鈕，它會把當前商品新增到由 \"購物車服務\" 管理的商品清單中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dpjnf2l0u1tbwrpxewrgpq5iw\">新增一個購物車元件，它會顯示購物車中的商品。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cear34pe2rx2uc56tvsj6dhcw\">新增一個配送元件，它會使用 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 從 <code>.json</code> 檔案中檢索配送資料來取得購物車中這些商品的運費。</li>\n</ul>\n<p><a id=\"create-cart-service\"></a></p>\n<h2 id=\"create-the-shopping-cart-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rm2a2p9qsmp1lirzzwjvze8x\">建立購物車服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-shopping-cart-service\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9o0tvblxl2a716g1j1zkwjic7\">在 Angular 中, 服務是類別的一個實例, 藉助 Angular 的<a href=\"guide/glossary#dependency-injection-di\" title=\"Dependency injection definition\">依賴注入體系</a>，你可以在應用中的任意部分使用它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mjayb85paecrdmcglbyfydfd\">現在, 使用者可以瀏覽產品訊息，而應用可以模擬分享產品，以及發出產品變更通知。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kwythre6dzajyexc8wy11xym\">下一步是為使用者提供一種把產品新增到購物車中的方法。本章節將帶領你新增一個 <strong>Buy</strong> 按鈕並且建立一個購物車服務以儲存購物車中的產品訊息。</p>\n<p><a id=\"generate-cart-service\"></a></p>\n<h3 id=\"define-a-cart-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56anoc5r25bsekz8jymxlwdzf\">定義購物車服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#define-a-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2i38jmue9xuy2jrc9medcc2t\">本節將引導你建立用於跟蹤新增到購物車的產品的 <code>CartService</code>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vnzy0h85x6qfl5m23bok30\">在終端中透過執行以下指令生成一個新的 <code>cart</code> 服務：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service cart\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yjxo6y5w544n9c8700wioq7g\">將 <code>Product</code> 介面從 <code>./products.ts</code> 匯入到 <code>cart.service.ts</code> 檔案中，在 <code>CartService</code> 類別中，定義一個 <code>items</code> 屬性來儲存購物車中當前產品的陣列。</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"props\">\nimport { Product } from './products';\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n/* . . . */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n  items: Product[] = [];\n/* . . . */\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4bsbff1mysor0d0k53jxnc7j\">定義把商品新增到購物車、回傳購物車商品以及清除購物車商品的方法。</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"methods\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n  items: Product[] = [];\n/* . . . */\n\n  addToCart(product: Product) {\n    this.items.push(product);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  clearCart() {\n    this.items = [];\n    return this.items;\n  }\n/* . . . */\n}\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9debghosni5jidhs34648qa6e\"><code>addToCart()</code> 方法會將產品附加到 <code>items</code> 陣列中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"837i6ljvmq56xj4nf0sp4eeal\"><code>getItems()</code> 方法會收集使用者加到購物車中的商品，並回傳每個商品及其數量。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"932xwzsulbzo1236z96pbh7ha\"><code>clearCart()</code> 方法回傳一個空陣列。</li>\n</ul>\n</li>\n</ol>\n<p><a id=\"product-details-use-cart-service\"></a></p>\n<h3 id=\"use-the-cart-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bshyb6esjrmzeb9b0m6fe6v2t\">使用購物車服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#use-the-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3c5mrerxw2yzqxzmqaodsinc6\">本節會教你使用 <code>CartService</code> 來把一個商品新增到購物車中。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1z5jec3tch2fylk1gmnmowdz9\">在 <code>product-details.component.ts</code> 中匯入購物車服務。</p>\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"cart-service\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { Product, products } from '../products';\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mj8byrkk6t6eln6nlp6fdtf9\">透過把購物車服務注入到這裡的 <code>constructor()</code> 中來注入它。</p>\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"inject-cart-service\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8r52cc7tuxesqg4wy7p0gzx0\">定義 <code>addToCart()</code> 方法，該方法會當前商品新增到購物車中。</p>\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"add-to-cart\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  addToCart(product: Product) {\n    this.cartService.addToCart(product);\n    window.alert('Your product has been added to the cart!');\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zx053ng2ssa2cmp2ek9o5blp\"><code>addToCart()</code> 方法做了如下事情:</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvn9iux9el4028g3t3uq6pjyu\">以當前'product'作為引數</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec9h5agu9m79nl40qwqfg5q3j\">使用 <code>CartService</code> <code>addToCart()</code> 方法去新增產品到購物車中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4twtiqdfy57e0kg77cweft2i6\">顯示一條你已經新增了一個產品到購物車到訊息</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjln77516eazg6g0c8m3330u8\">在 <code>product-details.component.html</code> 中，新增一個帶有 <strong>Buy</strong> 標籤的按鈕，並且把其 <code>click()</code> 事件繫結到 <code>addToCart()</code> 方法上。這段程式碼會為產品詳情範本新增一個 <strong>Buy</strong> 按鈕，並把當前產品新增到購物車中。</p>\n<code-example header=\"src/app/product-details/product-details.component.html\" path=\"getting-started/src/app/product-details/product-details.component.html\">\n&lt;h2&gt;Product Details&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product\"&gt;\n  &lt;h3&gt;{{ product.name }}&lt;/h3&gt;\n  &lt;h4&gt;{{ product.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/h4&gt;\n  &lt;p&gt;{{ product.description }}&lt;/p&gt;\n  &lt;button type=\"button\" (click)=\"addToCart(product)\"&gt;Buy&lt;/button&gt;\n&lt;/div&gt;\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ax0h58roq14pau6vmhahqx5ad\">重新整理應用，以驗證新的 <strong>Buy</strong> 按鈕如預期般出現了，並且單擊某個產品的名稱，以展示其詳情。</p>\n<div class=\"lightbox\">\n<img alt=\"Display details for selected product with a Buy button\" src=\"generated/images/guide/start/product-details-buy.png\" width=\"259\" height=\"233\">\n</div>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8piggabm9rco22qbwacwnocaw\">點選『Buy』按鈕來把該商品新增到購物車中儲存的商品清單中，並顯示一條確認訊息。</p>\n<div class=\"lightbox\">\n<img alt=\"Display details for selected product with a Buy button\" src=\"generated/images/guide/start/buy-alert.png\" width=\"329\" height=\"106\">\n</div>\n</li>\n</ol>\n<h2 id=\"create-the-cart-view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6614nbox0genvgu8up4ec7fjs\">建立購物車檢視<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-cart-view\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6876h3psflk02bulaptvjuhp\">為了讓顧客看到他們的購物車，你可以用兩步建立購物車檢視：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"149d1j5f6mgi4ho0j257okzo1\">建立一個購物車元件並設定指向這個新元件的路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arcwynytt5okvsx6z6cdj6l8a\">顯示購物車商品。</li>\n</ol>\n<h3 id=\"set-up-the-cart-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sswagsi7xbg6b1o1x3h1kama\">設定該組件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#set-up-the-cart-component\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"iu2pggh8csmvj3p06xbjm95i\">要建立購物車檢視，可遵循與建立 <code>ProductDetailsComponent</code> 相同的步驟，並且為這個新元件設定路由。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ktzhv77efa2c64acozd0qdyj\">透過執行以下指令在終端中生成一個名為 <code>cart</code> 的新元件：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component cart\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6e10e31tvtf1b0rldqu6oem2l\">此指令將生成 <code>cart.component.ts</code> 檔案及其關聯的範本和樣式檔案。</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css']\n})\nexport class CartComponent {\n\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vjbau279wn16x9w2jxwbfhrt\">請注意，新創建的 <code>CartComponent</code> 已新增到 <code>app.module.ts</code> 中模組的 <code>declarations</code> 中。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"declare-cart\">\nimport { CartComponent } from './cart/cart.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n  ],\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j4r90jvn7lj4fp3d0cf68lt6\">開啟 <code>app.module.ts</code>，為元件 <code>CartComponent</code> 新增一個路由，其路由為 <code>cart</code>。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"cart-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f13lre3fo9i9s0niy35jf7qzj\">修改 \"Checkout\" 按鈕，以便讓它路由到 <code>/cart</code>。在 <code>top-bar.component.html</code> 中新增一個指向 <code>/cart</code> 的 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令。</p>\n<code-example header=\"src/app/top-bar/top-bar.component.html\" path=\"getting-started/src/app/top-bar/top-bar.component.html\" region=\"cart-route\">\n&lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/cart\" class=\"button fancy-button\"&gt;\n  &lt;em class=\"material-icons\"&gt;shopping_cart&lt;/em&gt;Checkout\n&lt;/a&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"v3k1ec4lb6aujpd31wevhat7\">要檢視新的購物車元件，請點選『Checkout』按鈕。你會看到預設文字『cart works!』，該 URL 的格式為 <code>https://getting-started.stackblitz.io/cart</code>，其中的 getting-started.stackblitz.io 部分可能與你的 StackBlitz 專案不同。</p>\n<div class=\"lightbox\">\n<img alt=\"Display cart view before customizing\" src=\"generated/images/guide/start/cart-works.png\" width=\"259\" height=\"193\">\n</div>\n</li>\n</ol>\n<h3 id=\"display-the-cart-items\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35ji4496j1xgv5ixc4jeeleru\">顯示購物車商品<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#display-the-cart-items\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adv0rmw74fmaijxhvfyoiq0w4\">本節將告訴你如何修改購物車元件以使用購物車服務來顯示購物車中的商品。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l5eooe8c4estsvpc4c3dywen\">在 <code>cart.component.ts</code> 中，從 <code>cart.service.ts</code> 檔案中匯入 <code>CartService</code>。</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1vv2bwbmsvh5krbvdavm4izr\">注入 <code>CartService</code>，以便購物車元件可以使用它。</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"inject-cart\">\nexport class CartComponent {\n\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpai64o4p60zdh14r4g6w6u19\">定義 <code>items</code> 屬性，以便把商品存放在購物車中。</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"items\">\nexport class CartComponent {\n\n  items = this.cartService.getItems();\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2pj4cqywaouuakekk4hwusw0\">這段程式碼使用 <code>CartService</code> 的 <code>getItems()</code> 方法來設定條目。你以前在<a href=\"start/start-data#generate-cart-service\">建立 <code>cart.service.ts</code></a> 時定義過此方法。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjvufoagq66jvv9y16q59xwa1\">使用帶有頭部的購物車範本，並使用\n<code>&lt;div&gt;</code>和\n<code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>來顯示每個購物車專案及其名稱和價格。 生成的\n<code>CartComponent</code>範本如下所示。</p>\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\" region=\"prices\">\n&lt;h3&gt;Cart&lt;/h3&gt;\n\n&lt;div class=\"cart-item\" *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;\n  &lt;span&gt;{{ item.name }}&lt;/span&gt;\n  &lt;span&gt;{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/span&gt;\n&lt;/div&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mpqfrn7bftg3tpoqepbnhk4f\">驗證你的購物車如預期般工作：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1g5u38niit08ie7o6n5enu9aa\">點選 <strong>My Store</strong>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lxqbo9fgk54u9mihehunquaa\">單擊商品名稱以顯示其詳細訊息。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nh2x127ea00mj1mpwpekstsk\">點選<strong>Buy</strong> 將商品新增到購物車。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"baxbbc0w0811xtcp557y88bl0\">點選<strong>Checkout</strong>檢視購物車。</li>\n</ol>\n<div class=\"lightbox\">\n<img alt=\"Cart view with products added\" src=\"generated/images/guide/start/cart-page-full.png\" width=\"259\" height=\"238\">\n</div>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bww4y0n0b8bmpk5p7pl5xfvr2\">要了解關於服務的更多訊息，請參閱<a href=\"guide/architecture-services\" title=\"概念>服務簡介和 DI\">『服務和依賴注入簡介』</a>。</p>\n<h2 id=\"retrieve-shipping-prices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ypcy5swp30ya0vkqzruldyqu\">檢索運費價格<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#retrieve-shipping-prices\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgt87vldvlupif935falyn3o4\">伺服器通常採用流的形式回傳資料。流是很有用的，因為它們可以很容易地轉換回傳的資料，也可以修改你請求資料的方式。Angular 的 HTTP 用戶端（<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>）是一種內建的方式，可以從外部 API 中獲取資料，並以流的形式提供給你的應用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"745zaop5x5akla03bv8ebbv7r\">本節會為你展示如何使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 從外部檔案中檢索運費。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfs4auriynphgfjualn0of56p\">在本指南的 StackBlitz 應用中，透過 <code>assets/shipping.json</code> 檔案提供了一些預定義的配送資料。你可以利用這些資料為購物車中的商品新增運費。</p>\n<code-example header=\"src/assets/shipping.json\" path=\"getting-started/src/assets/shipping.json\">\n[\n  {\n    \"type\": \"Overnight\",\n    \"price\": 25.99\n  },\n  {\n    \"type\": \"2-Day\",\n    \"price\": 9.99\n  },\n  {\n    \"type\": \"Postal\",\n    \"price\": 2.99\n  }\n]\n\n</code-example>\n<h3 id=\"configure-appmodule-to-use-httpclient\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e07l6n47zkzaoo90te7us82d7\">設定 <code>AppModule</code> 以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-appmodule-to-use-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7otfpf6yu519v037swomas18c\">要使用 Angular 的 HTTP 用戶端之前，你必須先設定你的應用來使用 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ob66mynr0t3oealgxgw7vg8m\">Angular 的 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 中註冊了在整個應用中使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服務的單個實例所需的服務提供者。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7plmg50h1eqky4067uxc62hkq\">在 <code>app.module.ts</code> 的頂部從 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 套件中匯入 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 以及其它匯入項。由於有很多其它匯入項，因此這裡的程式碼片段省略它們，以保持簡潔。請確保現有的匯入都還在原地。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"http-client-module-import\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kpgmhjqd7bavcnytcozadwt7\">把 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 新增到 <code>AppModule</code> <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 的 <code>imports</code> 陣列中，以便全域註冊 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"http-client-module\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"configure-cartservice-to-use-httpclient\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mlsp436i9hffw26wtkxos5pm\">設定 <code>CartService</code> 以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-cartservice-to-use-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1y8kk9dkv8wwz3fnp6hgz4cz\">下一步是注入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服務到你的服務中, 這樣你的應用可以獲取資料並且與外部 API 和資源互動。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eb55mw3hglcwg59wqgdrpypb8\">從 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 套件中匯入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"import-http\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport { Product } from './products';\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7p325qheihkwj2bzlifouqm4g\">把 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到 <code>CartService</code> 的建構式函式中。</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"inject-http\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n  items: Product[] = [];\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>\n  ) {}\n/* . . . */\n}\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"configure-cartservice-to-get-shipping-prices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zpfqfekde51vkdxqxre8ov7m\">設定 <code>CartService</code> 以得到商品價格<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-cartservice-to-get-shipping-prices\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfbinhs5gxbpm3uz12bnqd7xx\">要從 <code>shipping.json</code> 中得到商品資料, 你可以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> <code>get()</code> 方法。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9yqxy9jnv4p18wob5iqid3mq0\">在 <code>cart.service.ts</code> 中 <code>clearCart()</code> 方法下面，定義一個新的 <code>getShippingPrices()</code> 方法，該方法會呼叫 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>#get()</code> 方法。</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"get-shipping\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n/* . . . */\n  getShippingPrices() {\n    return this.http.get&lt;{type: string, price: number}[]&gt;('/assets/shipping.json');\n  }\n}\n\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvx1o29v2ecv7gi4qezvdxcb\">有關 Angular 的\n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>的更多訊息，請參閱\n<a href=\"guide/understanding-communicating-with-http\" title=\"透過 HTTP 與伺服器進行互動\">用戶端與伺服器的互動</a>指南。</p>\n<h2 id=\"create-a-shipping-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"at6b8d643gvx1rd2s221ws2wj\">建立配送元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-a-shipping-component\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4x5es29z8rtii3wu9csu0dzhf\">現在你的應用已經可以檢索配送資料了，你還要建立一個配送元件和相關的範本。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"610a19544xauxpc6coh4c242u\">在終端視窗中執行如下指令，以生成名為 <code>shipping</code> 的元件：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component shipping\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rs7q6ctiygxc8fmd4rsegxm0\">該指令會生成 <code>shipping.component.ts</code> 檔案及其關聯的範本和樣式檔案。</p>\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-shipping',\n  templateUrl: './shipping.component.html',\n  styleUrls: ['./shipping.component.css']\n})\nexport class ShippingComponent {\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qspzk4sqaujnkxz2wrj71f4b\">在 <code>app.module.ts</code> 中，新增一個配送路由。其 <code>path</code> 為 <code>shipping</code>，其 component 為 <code>ShippingComponent</code>。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"shipping-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n      { path: 'shipping', component: ShippingComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n    ShippingComponent\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fb0t91go6fzn2kt8yjund0c\">新的配送元件尚未連結到任何其它元件，但你可以透過輸入其路由指定的 URL 在預覽窗格中看到它的範本。該 URL 具有以下模式：<code>https://angular-ynqttp--4200.local.webcontainer.io/shipping</code>，其 <code>angular-ynqttp--4200.local.webcontainer.io</code> 部分可能與你的 StackBlitz 專案有所不同。</p>\n</li>\n</ol>\n<h3 id=\"configuring-the-shippingcomponent-to-use-cartservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7improrao1o55tz7dx9xfyayi\">設定 <code>ShippingComponent</code> 以使用 <code>CartService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configuring-the-shippingcomponent-to-use-cartservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"catkg5dg2zlvwhnb3ikbxt2rf\">這個章節將指導你修改 <code>ShippingComponent</code> 以透過 HTTP 從 <code>shipping.json</code> 檔案中提取商品資料。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0z2zdcm37k2nfed3efditp30\">在\n<code>shipping.component.ts</code>中，匯入\n<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code>、\n<code>Observable</code> 和 \n<code>CartService</code>。</p>\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6f3y328rv20nijd5e19wdqsdt\">把購物車服務注入到 <code>ShippingComponent</code> 的 <code>constructor()</code> 建構式函式中。</p>\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"inject-cart-service\">\nconstructor(private cartService: CartService) { }\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9x69w6q94x3o4pzrftcmfqbec\">定義一個 <code>shippingCosts</code> 屬性，並從 <code>CartService</code> 中利用購物車服務的 <code>getShippingPrices()</code> 方法設定它。在 <code>ngOnInit()</code> 方法內部初始化 <code>shippingCosts</code> 屬性。</p>\n<p> <code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"props\">\nexport class ShippingComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  shippingCosts!: Observable&lt;{ type: string, price: number }[]&gt;;\n\n  ngOnInit(): void {\n    this.shippingCosts =  this.cartService.getShippingPrices();\n  }\n\n}\n\n\n</code-example></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bao7dp5u454baf1gppvfjvmbj\">更新\n<code>ShippingComponent</code>範本，使用\n<code>async</code>通道顯示運輸型別和價格。</p>\n<code-example header=\"src/app/shipping/shipping.component.html\" path=\"getting-started/src/app/shipping/shipping.component.html\">\n&lt;h3&gt;Shipping Prices&lt;/h3&gt;\n\n&lt;div class=\"shipping-item\" *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let shipping of shippingCosts | async\"&gt;\n  &lt;span&gt;{{ shipping.type }}&lt;/span&gt;\n  &lt;span&gt;{{ shipping.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/span&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6c3s58npq2qgmbp3tvapg7vvj\"><code>async</code> 通道從資料流中回傳最新值，並在給定元件的生命週期內持續這樣做。當 Angular 銷燬該組件時，\n<code>async</code> 通道會自動停止。有關 \n<code>async</code> 通道的詳細訊息，請參閱 \n<a href=\"api/common/AsyncPipe\">AsyncPipe API 文件</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8izjplxn4xjs9vw4p2jli7ace\">在購物車檢視中新增一個到配送檢視的連結。</p>\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\">\n&lt;h3&gt;Cart&lt;/h3&gt;\n\n&lt;p&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/shipping\"&gt;Shipping Prices&lt;/a&gt;\n&lt;/p&gt;\n\n&lt;div class=\"cart-item\" *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;\n  &lt;span&gt;{{ item.name }}&lt;/span&gt;\n  &lt;span&gt;{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/span&gt;\n&lt;/div&gt;\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o449a8d1g400jmti4kl8gkrs\">點選 <strong>Checkout</strong> 按鈕，檢視更新後的購物車。注意，修改本應用會導致預覽窗格重新整理，這會清空購物車。</p>\n<div class=\"lightbox\">\n<img alt=\"Cart with link to shipping prices\" src=\"generated/images/guide/start/cart-empty-with-shipping-prices.png\" width=\"301\" height=\"208\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9u9tzvusleizdlp2di7o1flje\">點選此連結可以導向到運費頁。</p>\n<div class=\"lightbox\">\n<img alt=\"Display shipping prices\" src=\"generated/images/guide/start/shipping-prices.png\" width=\"301\" height=\"238\">\n</div>\n</li>\n</ol>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1srtkx8g2ocohf3uhtq8xe170\">現在你有了一個帶有商品名錄和購物車的商店應用了，而且你還可以查詢運費。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"em5sq6gmzs0lhksugv1y9r2kz\">繼續探索 Angular：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2to8lfy1npf9l1xcehyuwa1tk\">繼續閱讀<a href=\"start/start-forms\" title=\"Forms for User Input\">表單與使用者輸入</a>部分，新增購物車檢視和結賬檢視，以完成本應用。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ds3ouq3zzq2wdn5oajkg516md\">跳到<a href=\"start/start-deployment\" title=\"Deployment\">部署</a>部分來轉為本地開發，或者把你的應用部署到 Firebase 或你自己的伺服器上。</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/localizing-angular\n - start/start-forms\n - start/start-routing\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/CurrencyPipe\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClientModule\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/ReactiveFormsModule\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/RouterLink\n - guide/architecture-services\n - guide/glossary#dependency-injection-di\n - guide/understanding-communicating-with-http\n - start\n - start/start-data#configure-appmodule-to-use-httpclient\n - start/start-data#configure-cartservice-to-get-shipping-prices\n - start/start-data#configure-cartservice-to-use-httpclient\n - start/start-data#configuring-the-shippingcomponent-to-use-cartservice\n - start/start-data#create-a-shipping-component\n - start/start-data#create-the-cart-view\n - start/start-data#create-the-shopping-cart-service\n - start/start-data#define-a-cart-service\n - start/start-data#display-the-cart-items\n - start/start-data#generate-cart-service\n - start/start-data#managing-data\n - start/start-data#retrieve-shipping-prices\n - start/start-data#set-up-the-cart-component\n - start/start-data#use-the-cart-service\n - start/start-data#whats-next\n - start/start-deployment\n - start/start-forms\n - start/start-routing\n-->"}
{"id":"start/start-data","title":"管理数据","contents":"<div class=\"content\">\n  <h1 id=\"managing-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3o2qpf2d0ynhjhidz944g48ud\">管理数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#managing-data\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3h89jjae1jbz51sqf5n73zdrw\">本章基于<a href=\"start\">以一个基本 Angular 应用快速上手</a>的第二步 —— <a href=\"start/start-routing\" title=\"Adding navigation\">添加导航</a>。在此开发阶段，本商店应用具有一个包含两个视图的商品名录：商品列表和商品详情。用户点击清单中的某个商品名称，就会在新视图中看到具有专门的 URL 或路由的详情页。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"796ub415bl3yhh3inryqkf67k\">本页将指导你分三个步骤创建购物车：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3d6luh0f5btd7wbrqx45r3vek\">修改商品详情视图，让它包含一个 “Buy” 按钮，它会把当前商品添加到由 \"购物车服务\" 管理的商品列表中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dpjnf2l0u1tbwrpxewrgpq5iw\">添加一个购物车组件，它会显示购物车中的商品。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cear34pe2rx2uc56tvsj6dhcw\">添加一个配送组件，它会使用 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 从 <code>.json</code> 文件中检索配送数据来取得购物车中这些商品的运费。</li>\n</ul>\n<p><a id=\"create-cart-service\"></a></p>\n<h2 id=\"create-the-shopping-cart-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rm2a2p9qsmp1lirzzwjvze8x\">创建购物车服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-shopping-cart-service\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9o0tvblxl2a716g1j1zkwjic7\">在 Angular 中, 服务是类的一个实例, 借助 Angular 的<a href=\"guide/glossary#dependency-injection-di\" title=\"Dependency injection definition\">依赖注入体系</a>，你可以在应用中的任意部分使用它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mjayb85paecrdmcglbyfydfd\">现在, 用户可以浏览产品信息，而应用可以模拟分享产品，以及发出产品变更通知。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kwythre6dzajyexc8wy11xym\">下一步是为用户提供一种把产品添加到购物车中的方法。本章节将带领你添加一个 <strong>Buy</strong> 按钮并且建立一个购物车服务以保存购物车中的产品信息。</p>\n<p><a id=\"generate-cart-service\"></a></p>\n<h3 id=\"define-a-cart-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56anoc5r25bsekz8jymxlwdzf\">定义购物车服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#define-a-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2i38jmue9xuy2jrc9medcc2t\">本节将引导你创建用于跟踪添加到购物车的产品的 <code>CartService</code>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vnzy0h85x6qfl5m23bok30\">在终端中通过运行以下命令生成一个新的 <code>cart</code> 服务：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service cart\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yjxo6y5w544n9c8700wioq7g\">将 <code>Product</code> 接口从 <code>./products.ts</code> 导入到 <code>cart.service.ts</code> 文件中，在 <code>CartService</code> 类中，定义一个 <code>items</code> 属性来存储购物车中当前产品的数组。</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"props\">\nimport { Product } from './products';\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n/* . . . */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n  items: Product[] = [];\n/* . . . */\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4bsbff1mysor0d0k53jxnc7j\">定义把商品添加到购物车、返回购物车商品以及清除购物车商品的方法。</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"methods\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n  items: Product[] = [];\n/* . . . */\n\n  addToCart(product: Product) {\n    this.items.push(product);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  clearCart() {\n    this.items = [];\n    return this.items;\n  }\n/* . . . */\n}\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9debghosni5jidhs34648qa6e\"><code>addToCart()</code> 方法会将产品附加到 <code>items</code> 数组中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"837i6ljvmq56xj4nf0sp4eeal\"><code>getItems()</code> 方法会收集用户加到购物车中的商品，并返回每个商品及其数量。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"932xwzsulbzo1236z96pbh7ha\"><code>clearCart()</code> 方法返回一个空数组。</li>\n</ul>\n</li>\n</ol>\n<p><a id=\"product-details-use-cart-service\"></a></p>\n<h3 id=\"use-the-cart-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bshyb6esjrmzeb9b0m6fe6v2t\">使用购物车服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#use-the-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3c5mrerxw2yzqxzmqaodsinc6\">本节会教你使用 <code>CartService</code> 来把一个商品添加到购物车中。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1z5jec3tch2fylk1gmnmowdz9\">在 <code>product-details.component.ts</code> 中导入购物车服务。</p>\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"cart-service\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { Product, products } from '../products';\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mj8byrkk6t6eln6nlp6fdtf9\">通过把购物车服务注入到这里的 <code>constructor()</code> 中来注入它。</p>\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"inject-cart-service\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8r52cc7tuxesqg4wy7p0gzx0\">定义 <code>addToCart()</code> 方法，该方法会当前商品添加到购物车中。</p>\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"add-to-cart\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  addToCart(product: Product) {\n    this.cartService.addToCart(product);\n    window.alert('Your product has been added to the cart!');\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zx053ng2ssa2cmp2ek9o5blp\"><code>addToCart()</code> 方法做了如下事情:</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvn9iux9el4028g3t3uq6pjyu\">以当前'product'作为参数</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec9h5agu9m79nl40qwqfg5q3j\">使用 <code>CartService</code> <code>addToCart()</code> 方法去添加产品到购物车中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4twtiqdfy57e0kg77cweft2i6\">显示一条你已经添加了一个产品到购物车到消息</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjln77516eazg6g0c8m3330u8\">在 <code>product-details.component.html</code> 中，添加一个带有 <strong>Buy</strong> 标签的按钮，并且把其 <code>click()</code> 事件绑定到 <code>addToCart()</code> 方法上。这段代码会为产品详情模板添加一个 <strong>Buy</strong> 按钮，并把当前产品添加到购物车中。</p>\n<code-example header=\"src/app/product-details/product-details.component.html\" path=\"getting-started/src/app/product-details/product-details.component.html\">\n&lt;h2&gt;Product Details&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product\"&gt;\n  &lt;h3&gt;{{ product.name }}&lt;/h3&gt;\n  &lt;h4&gt;{{ product.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/h4&gt;\n  &lt;p&gt;{{ product.description }}&lt;/p&gt;\n  &lt;button type=\"button\" (click)=\"addToCart(product)\"&gt;Buy&lt;/button&gt;\n&lt;/div&gt;\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ax0h58roq14pau6vmhahqx5ad\">刷新应用，以验证新的 <strong>Buy</strong> 按钮如预期般出现了，并且单击某个产品的名称，以展示其详情。</p>\n<div class=\"lightbox\">\n<img alt=\"Display details for selected product with a Buy button\" src=\"generated/images/guide/start/product-details-buy.png\" width=\"259\" height=\"233\">\n</div>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8piggabm9rco22qbwacwnocaw\">点击“Buy”按钮来把该商品添加到购物车中存储的商品列表中，并显示一条确认消息。</p>\n<div class=\"lightbox\">\n<img alt=\"Display details for selected product with a Buy button\" src=\"generated/images/guide/start/buy-alert.png\" width=\"329\" height=\"106\">\n</div>\n</li>\n</ol>\n<h2 id=\"create-the-cart-view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6614nbox0genvgu8up4ec7fjs\">创建购物车视图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-cart-view\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6876h3psflk02bulaptvjuhp\">为了让顾客看到他们的购物车，你可以用两步创建购物车视图：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"149d1j5f6mgi4ho0j257okzo1\">创建一个购物车组件并配置指向这个新组件的路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arcwynytt5okvsx6z6cdj6l8a\">显示购物车商品。</li>\n</ol>\n<h3 id=\"set-up-the-cart-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sswagsi7xbg6b1o1x3h1kama\">设置该组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#set-up-the-cart-component\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"iu2pggh8csmvj3p06xbjm95i\">要创建购物车视图，可遵循与创建 <code>ProductDetailsComponent</code> 相同的步骤，并且为这个新组件配置路由。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ktzhv77efa2c64acozd0qdyj\">通过运行以下命令在终端中生成一个名为 <code>cart</code> 的新组件：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component cart\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6e10e31tvtf1b0rldqu6oem2l\">此命令将生成 <code>cart.component.ts</code> 文件及其关联的模板和样式文件。</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css']\n})\nexport class CartComponent {\n\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vjbau279wn16x9w2jxwbfhrt\">请注意，新创建的 <code>CartComponent</code> 已添加到 <code>app.module.ts</code> 中模块的 <code>declarations</code> 中。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"declare-cart\">\nimport { CartComponent } from './cart/cart.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n  ],\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j4r90jvn7lj4fp3d0cf68lt6\">打开 <code>app.module.ts</code>，为组件 <code>CartComponent</code> 添加一个路由，其路由为 <code>cart</code>。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"cart-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f13lre3fo9i9s0niy35jf7qzj\">修改 \"Checkout\" 按钮，以便让它路由到 <code>/cart</code>。在 <code>top-bar.component.html</code> 中添加一个指向 <code>/cart</code> 的 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令。</p>\n<code-example header=\"src/app/top-bar/top-bar.component.html\" path=\"getting-started/src/app/top-bar/top-bar.component.html\" region=\"cart-route\">\n&lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/cart\" class=\"button fancy-button\"&gt;\n  &lt;em class=\"material-icons\"&gt;shopping_cart&lt;/em&gt;Checkout\n&lt;/a&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"v3k1ec4lb6aujpd31wevhat7\">要查看新的购物车组件，请点击“Checkout”按钮。你会看到默认文本“cart works!”，该 URL 的格式为 <code>https://getting-started.stackblitz.io/cart</code>，其中的 getting-started.stackblitz.io 部分可能与你的 StackBlitz 项目不同。</p>\n<div class=\"lightbox\">\n<img alt=\"Display cart view before customizing\" src=\"generated/images/guide/start/cart-works.png\" width=\"259\" height=\"193\">\n</div>\n</li>\n</ol>\n<h3 id=\"display-the-cart-items\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35ji4496j1xgv5ixc4jeeleru\">显示购物车商品<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#display-the-cart-items\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adv0rmw74fmaijxhvfyoiq0w4\">本节将告诉你如何修改购物车组件以使用购物车服务来显示购物车中的商品。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l5eooe8c4estsvpc4c3dywen\">在 <code>cart.component.ts</code> 中，从 <code>cart.service.ts</code> 文件中导入 <code>CartService</code>。</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1vv2bwbmsvh5krbvdavm4izr\">注入 <code>CartService</code>，以便购物车组件可以使用它。</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"inject-cart\">\nexport class CartComponent {\n\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpai64o4p60zdh14r4g6w6u19\">定义 <code>items</code> 属性，以便把商品存放在购物车中。</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"items\">\nexport class CartComponent {\n\n  items = this.cartService.getItems();\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2pj4cqywaouuakekk4hwusw0\">这段代码使用 <code>CartService</code> 的 <code>getItems()</code> 方法来设置条目。你以前在<a href=\"start/start-data#generate-cart-service\">创建 <code>cart.service.ts</code></a> 时定义过此方法。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjvufoagq66jvv9y16q59xwa1\">使用带有头部的购物车模板，并使用\n<code>&lt;div&gt;</code>和\n<code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>来显示每个购物车项目及其名称和价格。 生成的\n<code>CartComponent</code>模板如下所示。</p>\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\" region=\"prices\">\n&lt;h3&gt;Cart&lt;/h3&gt;\n\n&lt;div class=\"cart-item\" *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;\n  &lt;span&gt;{{ item.name }}&lt;/span&gt;\n  &lt;span&gt;{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/span&gt;\n&lt;/div&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mpqfrn7bftg3tpoqepbnhk4f\">验证你的购物车如预期般工作：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1g5u38niit08ie7o6n5enu9aa\">点击 <strong>My Store</strong>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lxqbo9fgk54u9mihehunquaa\">单击商品名称以显示其详细信息。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nh2x127ea00mj1mpwpekstsk\">点击<strong>Buy</strong> 将商品添加到购物车。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"baxbbc0w0811xtcp557y88bl0\">点击<strong>Checkout</strong>查看购物车。</li>\n</ol>\n<div class=\"lightbox\">\n<img alt=\"Cart view with products added\" src=\"generated/images/guide/start/cart-page-full.png\" width=\"259\" height=\"238\">\n</div>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bww4y0n0b8bmpk5p7pl5xfvr2\">要了解关于服务的更多信息，请参阅<a href=\"guide/architecture-services\" title=\"概念>服务简介和 DI\">“服务和依赖注入简介”</a>。</p>\n<h2 id=\"retrieve-shipping-prices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ypcy5swp30ya0vkqzruldyqu\">检索运费价格<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#retrieve-shipping-prices\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgt87vldvlupif935falyn3o4\">服务器通常采用流的形式返回数据。流是很有用的，因为它们可以很容易地转换返回的数据，也可以修改你请求数据的方式。Angular 的 HTTP 客户端（<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>）是一种内置的方式，可以从外部 API 中获取数据，并以流的形式提供给你的应用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"745zaop5x5akla03bv8ebbv7r\">本节会为你展示如何使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 从外部文件中检索运费。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfs4auriynphgfjualn0of56p\">在本指南的 StackBlitz 应用中，通过 <code>assets/shipping.json</code> 文件提供了一些预定义的配送数据。你可以利用这些数据为购物车中的商品添加运费。</p>\n<code-example header=\"src/assets/shipping.json\" path=\"getting-started/src/assets/shipping.json\">\n[\n  {\n    \"type\": \"Overnight\",\n    \"price\": 25.99\n  },\n  {\n    \"type\": \"2-Day\",\n    \"price\": 9.99\n  },\n  {\n    \"type\": \"Postal\",\n    \"price\": 2.99\n  }\n]\n\n</code-example>\n<h3 id=\"configure-appmodule-to-use-httpclient\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e07l6n47zkzaoo90te7us82d7\">配置 <code>AppModule</code> 以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-appmodule-to-use-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7otfpf6yu519v037swomas18c\">要使用 Angular 的 HTTP 客户端之前，你必须先配置你的应用来使用 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ob66mynr0t3oealgxgw7vg8m\">Angular 的 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 中注册了在整个应用中使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服务的单个实例所需的服务提供者。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7plmg50h1eqky4067uxc62hkq\">在 <code>app.module.ts</code> 的顶部从 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 包中导入 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 以及其它导入项。由于有很多其它导入项，因此这里的代码片段省略它们，以保持简洁。请确保现有的导入都还在原地。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"http-client-module-import\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kpgmhjqd7bavcnytcozadwt7\">把 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 添加到 <code>AppModule</code> <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 的 <code>imports</code> 数组中，以便全局注册 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"http-client-module\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"configure-cartservice-to-use-httpclient\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mlsp436i9hffw26wtkxos5pm\">配置 <code>CartService</code> 以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-cartservice-to-use-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1y8kk9dkv8wwz3fnp6hgz4cz\">下一步是注入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服务到你的服务中, 这样你的应用可以获取数据并且与外部 API 和资源互动。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eb55mw3hglcwg59wqgdrpypb8\">从 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 包中导入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"import-http\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport { Product } from './products';\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7p325qheihkwj2bzlifouqm4g\">把 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到 <code>CartService</code> 的构造函数中。</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"inject-http\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n  items: Product[] = [];\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>\n  ) {}\n/* . . . */\n}\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"configure-cartservice-to-get-shipping-prices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zpfqfekde51vkdxqxre8ov7m\">配置 <code>CartService</code> 以得到商品价格<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-cartservice-to-get-shipping-prices\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfbinhs5gxbpm3uz12bnqd7xx\">要从 <code>shipping.json</code> 中得到商品数据, 你可以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> <code>get()</code> 方法。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9yqxy9jnv4p18wob5iqid3mq0\">在 <code>cart.service.ts</code> 中 <code>clearCart()</code> 方法下面，定义一个新的 <code>getShippingPrices()</code> 方法，该方法会调用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>#get()</code> 方法。</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"get-shipping\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n/* . . . */\n  getShippingPrices() {\n    return this.http.get&lt;{type: string, price: number}[]&gt;('/assets/shipping.json');\n  }\n}\n\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cvx1o29v2ecv7gi4qezvdxcb\">有关 Angular 的\n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>的更多信息，请参阅\n<a href=\"guide/understanding-communicating-with-http\" title=\"通过 HTTP 与服务器进行交互\">客户端与服务器的交互</a>指南。</p>\n<h2 id=\"create-a-shipping-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"at6b8d643gvx1rd2s221ws2wj\">创建配送组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-a-shipping-component\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4x5es29z8rtii3wu9csu0dzhf\">现在你的应用已经可以检索配送数据了，你还要创建一个配送组件和相关的模板。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"610a19544xauxpc6coh4c242u\">在终端窗口中运行如下命令，以生成名为 <code>shipping</code> 的组件：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component shipping\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rs7q6ctiygxc8fmd4rsegxm0\">该命令会生成 <code>shipping.component.ts</code> 文件及其关联的模板和样式文件。</p>\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-shipping',\n  templateUrl: './shipping.component.html',\n  styleUrls: ['./shipping.component.css']\n})\nexport class ShippingComponent {\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qspzk4sqaujnkxz2wrj71f4b\">在 <code>app.module.ts</code> 中，添加一个配送路由。其 <code>path</code> 为 <code>shipping</code>，其 component 为 <code>ShippingComponent</code>。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"shipping-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n      { path: 'shipping', component: ShippingComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n    ShippingComponent\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fb0t91go6fzn2kt8yjund0c\">新的配送组件尚未链接到任何其它组件，但你可以通过输入其路由指定的 URL 在预览窗格中看到它的模板。该 URL 具有以下模式：<code>https://angular-ynqttp--4200.local.webcontainer.io/shipping</code>，其 <code>angular-ynqttp--4200.local.webcontainer.io</code> 部分可能与你的 StackBlitz 项目有所不同。</p>\n</li>\n</ol>\n<h3 id=\"configuring-the-shippingcomponent-to-use-cartservice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7improrao1o55tz7dx9xfyayi\">配置 <code>ShippingComponent</code> 以使用 <code>CartService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configuring-the-shippingcomponent-to-use-cartservice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"catkg5dg2zlvwhnb3ikbxt2rf\">这个章节将指导你修改 <code>ShippingComponent</code> 以通过 HTTP 从 <code>shipping.json</code> 文件中提取商品数据。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0z2zdcm37k2nfed3efditp30\">在\n<code>shipping.component.ts</code>中，导入\n<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code>、\n<code>Observable</code> 和 \n<code>CartService</code>。</p>\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6f3y328rv20nijd5e19wdqsdt\">把购物车服务注入到 <code>ShippingComponent</code> 的 <code>constructor()</code> 构造函数中。</p>\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"inject-cart-service\">\nconstructor(private cartService: CartService) { }\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9x69w6q94x3o4pzrftcmfqbec\">定义一个 <code>shippingCosts</code> 属性，并从 <code>CartService</code> 中利用购物车服务的 <code>getShippingPrices()</code> 方法设置它。在 <code>ngOnInit()</code> 方法内部初始化 <code>shippingCosts</code> 属性。</p>\n<p> <code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"props\">\nexport class ShippingComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  shippingCosts!: Observable&lt;{ type: string, price: number }[]&gt;;\n\n  ngOnInit(): void {\n    this.shippingCosts =  this.cartService.getShippingPrices();\n  }\n\n}\n\n\n</code-example></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bao7dp5u454baf1gppvfjvmbj\">更新\n<code>ShippingComponent</code>模板，使用\n<code>async</code>管道显示运输类型和价格。</p>\n<code-example header=\"src/app/shipping/shipping.component.html\" path=\"getting-started/src/app/shipping/shipping.component.html\">\n&lt;h3&gt;Shipping Prices&lt;/h3&gt;\n\n&lt;div class=\"shipping-item\" *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let shipping of shippingCosts | async\"&gt;\n  &lt;span&gt;{{ shipping.type }}&lt;/span&gt;\n  &lt;span&gt;{{ shipping.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/span&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6c3s58npq2qgmbp3tvapg7vvj\"><code>async</code> 管道从数据流中返回最新值，并在给定组件的生命周期内持续这样做。当 Angular 销毁该组件时，\n<code>async</code> 管道会自动停止。有关 \n<code>async</code> 管道的详细信息，请参阅 \n<a href=\"api/common/AsyncPipe\">AsyncPipe API 文档</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8izjplxn4xjs9vw4p2jli7ace\">在购物车视图中添加一个到配送视图的链接。</p>\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\">\n&lt;h3&gt;Cart&lt;/h3&gt;\n\n&lt;p&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/shipping\"&gt;Shipping Prices&lt;/a&gt;\n&lt;/p&gt;\n\n&lt;div class=\"cart-item\" *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;\n  &lt;span&gt;{{ item.name }}&lt;/span&gt;\n  &lt;span&gt;{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/span&gt;\n&lt;/div&gt;\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o449a8d1g400jmti4kl8gkrs\">点击 <strong>Checkout</strong> 按钮，查看更新后的购物车。注意，修改本应用会导致预览窗格刷新，这会清空购物车。</p>\n<div class=\"lightbox\">\n<img alt=\"Cart with link to shipping prices\" src=\"generated/images/guide/start/cart-empty-with-shipping-prices.png\" width=\"301\" height=\"208\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9u9tzvusleizdlp2di7o1flje\">点击此链接可以导航到运费页。</p>\n<div class=\"lightbox\">\n<img alt=\"Display shipping prices\" src=\"generated/images/guide/start/shipping-prices.png\" width=\"301\" height=\"238\">\n</div>\n</li>\n</ol>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1srtkx8g2ocohf3uhtq8xe170\">现在你有了一个带有商品名录和购物车的商店应用了，而且你还可以查询运费。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"em5sq6gmzs0lhksugv1y9r2kz\">继续探索 Angular：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2to8lfy1npf9l1xcehyuwa1tk\">继续阅读<a href=\"start/start-forms\" title=\"Forms for User Input\">表单与用户输入</a>部分，添加购物车视图和结账视图，以完成本应用。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ds3ouq3zzq2wdn5oajkg516md\">跳到<a href=\"start/start-deployment\" title=\"Deployment\">部署</a>部分来转为本地开发，或者把你的应用部署到 Firebase 或你自己的服务器上。</li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/localizing-angular\n - start/start-forms\n - start/start-routing\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/CurrencyPipe\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClientModule\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/ReactiveFormsModule\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/RouterLink\n - guide/architecture-services\n - guide/glossary#dependency-injection-di\n - guide/understanding-communicating-with-http\n - start\n - start/start-data#configure-appmodule-to-use-httpclient\n - start/start-data#configure-cartservice-to-get-shipping-prices\n - start/start-data#configure-cartservice-to-use-httpclient\n - start/start-data#configuring-the-shippingcomponent-to-use-cartservice\n - start/start-data#create-a-shipping-component\n - start/start-data#create-the-cart-view\n - start/start-data#create-the-shopping-cart-service\n - start/start-data#define-a-cart-service\n - start/start-data#display-the-cart-items\n - start/start-data#generate-cart-service\n - start/start-data#managing-data\n - start/start-data#retrieve-shipping-prices\n - start/start-data#set-up-the-cart-component\n - start/start-data#use-the-cart-service\n - start/start-data#whats-next\n - start/start-deployment\n - start/start-forms\n - start/start-routing\n-->"}
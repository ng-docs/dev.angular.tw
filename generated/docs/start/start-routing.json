{"id":"start/start-routing","title":"添加导航","contents":"<div class=\"content\">\n  <h1 id=\"adding-navigation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kktfrt5jzda5s5hdg0vh5ecq\">添加导航<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-routing#adding-navigation\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dabjjk2youhe3xo6p5m2vdi4m\">本指南基于入门教程的第一步：<a href=\"start\" title=\"开始使用基本的 Angular 应用\">基本 Angular 应用入门</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vrat9fuxlczpqz6s62p41m5w\">在此阶段，本在线商店应用会拥有基本的产品目录。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mq781xefrrfl8jdwynk0de2b\">在以下各节中，你将向应用添加以下功能：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1drh6opm4geirwfaqf2454cx1\">在地址栏中键入 URL 以导航到相应的产品页面</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgfdc76ollre8x2jlmsg2j7ak\">单击页面上的链接以在单页应用中导航</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"uk46yvybun54s10n9wna4c5p\">单击浏览器的后退和前进按钮以直观地在浏览器的历史记录中浏览</li>\n</ul>\n<p><a id=\"define-routes\"></a></p>\n<h2 id=\"associate-a-url-path-with-a-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5262gs5ncsaekr4cbn5wj3y23\">关联 URL 路径与组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-routing#associate-a-url-path-with-a-component\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32fh6n5y67cazrql6n4bm6k8q\">本应用已经用 Angular <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 导航到了 <code>ProductListComponent</code>。本节将介绍如何定义显示单个产品详情的路由。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bmna7tsmcsb95wl1j3qy7yfw\">生成用于展示产品详情的新组件。在终端窗口运行如下命令来生成一个新的 <code>product-details</code> 组件：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component product-details\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8jccrzuw8pwbbstdrl89itg1\">在 <code>app.module.ts</code> 中，添加产品详情的路由，其 <code>path</code> 为 <code>products/:productId</code>，其 <code>component</code> 为 <code>ProductDetailsComponent</code>。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"product-details-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n  ],\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2uqgc83hcta37uuatqrygbf0\">打开 <code>product-list.component.html</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ag708fkfbtt25y49t9ev0ztjz\">修改产品名称上的链接，使其包括以 <code>product.id</code> 为参数的 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>。</p>\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.html\" region=\"router-link\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let product of products\"&gt;\n\n  &lt;h3&gt;\n    &lt;a\n      [title]=\"product.name + ' details'\"\n      [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/products', product.id]\"&gt;\n      {{ product.name }}\n    &lt;/a&gt;\n  &lt;/h3&gt;\n\n  &lt;!-- . . . --&gt;\n\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4lm4jy1wgynislrznh6deuqqk\"><code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令可帮助你自定义 a 元素。在这里，路由或 URL 中包含一个固定的区段 <code>/products</code>。最后一段则是变量，插入当前产品的 <code>id</code>。比如，<code>id</code> 为 1 的产品的 URL 是 <code>https://getting-started-myfork.stackblitz.io/products/1</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3fhzadmj5957ru7w0b6g4b7h\">通过单击产品名称，验证路由器是否如预期般工作。应用中应该显示 <code>ProductDetailsComponent</code> 组件，其显示的内容为 “product-details works!”。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d223i9tul620s50okuiq3ma7w\">请注意，预览窗口中的 URL 发生了变化。最后一个部分是 <code>products/#</code>，其中 <code>#</code> 表示你单击的路由的编号。</p>\n<div class=\"lightbox\">\n<img alt=\"Product details view with updated URL\" src=\"generated/images/guide/start/product-details-works.png\" width=\"259\" height=\"162\">\n</div>\n</li>\n</ol>\n<h2 id=\"view-product-details\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mwktj6ynzjm740md1mt5ves5\">查看产品详情<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-routing#view-product-details\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crken51qwckax0qpqt4903nqr\"><code>ProductDetailsComponent</code> 会处理每个产品的显示工作。Angular 路由器会根据浏览器的 URL 和<a href=\"start/start-routing#define-routes\">你定义的路径</a>来显示组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyonwy9ktwg24t4ddvbn3173m\">在本节中，你将使用 Angular 路由器来组合 <code>products</code> 数据和路由信息以显示每个产品的特定详情。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45gns7hv6r306p509sm4q82qy\">在 \n<code>product-details.component.ts</code> 中，从 \n<code>@angular/router</code> 导入 \n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>，从 \n<code>@angular/core</code> 导入 \n<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code>，以及从 \n<code>../products</code> 导入 \n<code>products</code> 数组。</p>\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.1.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { Product, products } from '../products';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alt2egf9rerjkydasbzppzu7d\">定义 \n<code>product</code> 属性。 \n<code>implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> 声明表示该类实现了 \n<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> 接口，要求在创建组件时实现 \n<code>ngOnInit</code> 方法以进行初始化任务。</p>\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.1.ts\" region=\"product-prop\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  product: Product | undefined;\n  /* ... */\n}\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7zi22dksx5h2kxn2qbkj3belw\">通过把 <code>private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 添加为构造函数括号内的参数，来把 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 注入到 <code>constructor()</code> 中。</p>\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.1.ts\" region=\"props-methods\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  product: Product | undefined;\n\n  constructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) { }\n\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnn759ko0ls5smcap5hae0vxa\">Angular 路由器加载的每个组件都有自己专属的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 中包含有关路由和路由参数的信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tnkjyqyd7g48fdi494kwjc38\">通过注入 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>，你可以配置此组件以使用服务。<a href=\"start/start-data\" title=\"尝试一下：管理数据\">管理数据</a>那一步将更详细地介绍服务。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20s8sw9vpf8dgev8izlhhlqs1\">在 <code>ngOnInit()</code> 方法中，从路由参数中提取 <code>productId</code>，并在 <code>products</code> 数组中找到相应的产品。</p>\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.1.ts\" region=\"get-product\">\nngOnInit() {\n  // First get the product id from the current route.\n  const routeParams = this.route.snapshot.paramMap;\n  const productIdFromRoute = Number(routeParams.get('productId'));\n\n  // Find the product that correspond with the id provided in route.\n  this.product = products.find(product =&gt; product.id === productIdFromRoute);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xlgoulyrzdkd5t4rjhvems4s\">路由参数与你在此路由中定义的路径变量相对应。要访问路由参数，我们使用 <code>route.snapshot</code>，它是一个 <code><a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a></code>，其中包含有关该特定时刻的活动路由信息。与此路由匹配的 URL 提供了 <code>productId</code>。Angular 会使用 <code>productId</code> 来显示每个唯一产品的详情。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"av2hjanm75xprltgvd22hdxzt\">更新 <code>ProductDetailsComponent</code> 的模板以显示带有 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 的产品详情。如果产品存在，则此 <code>&lt;div&gt;</code> 会显示名称、价格和说明。</p>\n<code-example header=\"src/app/product-details/product-details.component.html\" path=\"getting-started/src/app/product-details/product-details.component.html\" region=\"details\">\n&lt;h2&gt;Product Details&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product\"&gt;\n  &lt;h3&gt;{{ product.name }}&lt;/h3&gt;\n  &lt;h4&gt;{{ product.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/h4&gt;\n  &lt;p&gt;{{ product.description }}&lt;/p&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ixvx9fcega0wm7fl97h5mu5g\">该行 \n<code>&lt;h4&gt;{{ product.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/h4&gt;</code> 使用 \n<code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code> 管道将 \n<code>product.price</code> 从数字转换为货币字符串。管道是一种在 HTML 模板中转换数据的方式。有关 Angular 管道的更多信息，请参阅 \n<a href=\"guide/pipes-overview\" title=\"Pipes\">Pipes</a>。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu9y7wh0gl513zupsks51wp90\">当用户单击产品列表中的名称时，路由器会将其导航到产品的不同 URL，显示此 <code>ProductDetailsComponent</code>，并展示产品详情。</p>\n<div class=\"lightbox\">\n<img alt=\"Product details page with updated URL and full details displayed\" src=\"generated/images/guide/start/product-details-routed.png\" width=\"259\" height=\"225\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e45a1sgo1aswtqtnbhc7p568r\">有关 Angular 路由器的更多信息，请参见<a href=\"guide/router\" title=\"路由与导航指南\">路由与导航</a>。</p>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-routing#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cul7vyx1kt4kqfqwcmkl1dv2\">你已经配置好了应用，以便查看产品详情，每个产品详情都有一个不同的 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"em5sq6gmzs0lhksugv1y9r2kz\">继续探索 Angular：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4of8yu53kwr00n17jacn7w1kk\">继续<a href=\"start/start-data\" title=\"尝试一下：管理数据\">管理数据</a>以添加购物车功能、管理购物车数据并检索外部数据以获取运费。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3x3bv3np5zu0mfdfp0z6qv8fx\">跳至<a href=\"start/start-deployment\" title=\"试试看：部署\">部署</a>以将你的应用部署到 Firebase 或转为本地开发。</li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/localizing-angular\n - start\n - start/start-data\n-->\n<!-- links from this doc:\n - api/common/CurrencyPipe\n - api/common/NgFor\n - api/common/NgIf\n - api/core/Component\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/ReactiveFormsModule\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/ActivatedRouteSnapshot\n - api/router/Router\n - api/router/RouterLink\n - guide/pipes-overview\n - guide/router\n - start\n - start/start-data\n - start/start-deployment\n - start/start-routing#adding-navigation\n - start/start-routing#associate-a-url-path-with-a-component\n - start/start-routing#define-routes\n - start/start-routing#view-product-details\n - start/start-routing#whats-next\n-->"}
{"id":"guide/what-is-angular","title":"什么是 Angular？","contents":"<div class=\"content\">\n  <h1 id=\"what-is-angular\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7d9t2i7rb35tdb20ci03gkxy3\">什么是 Angular？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#what-is-angular\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqp77qr8evzyin2hmgwwcnmky\">Angular 是一个基于 \n<a href=\"https://www.typescriptlang.org\">TypeScript</a> 构建的开发平台。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhhzu5exdnqm29q4sjwrq77kl\">作为一个平台，Angular 包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jg7y3qhc4348rtm2hp8k4bn9\">一个基于组件的框架，用于构建可伸缩的 Web 应用</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fkf3u2fcjstelj2etaqmcwim\">一组完美集成的库，涵盖各种功能，包括路由、表单管理、客户端-服务器通信等</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6csovpr2c20rterxbscq6r07\">一套开发工具，可帮助你开发、构建、测试和更新代码</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3gxrwmokjeu8ub2m8gm3s1gfe\">使用 Angular，您可以利用一个可以从单个开发人员项目扩展到企业级应用程序的平台。最重要的是，Angular 生态系统包括一个多样化的超过 170 万开发人员、库作者和内容创作者组成的群体。</p>\n<p><a id=\"essentials\"></a></p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9814cw9u2yj2ug91vrb0clxo2\">与大多数现代框架一样，Angular 期望您熟悉 HTML、CSS 和 JavaScript。此外，建议熟悉以下概念和工具：</p>\n<p><a id=\"concepts\"></a></p>\n<h3 id=\"concepts\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bs465y6dwehustqfu8rzp02\">概念<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#concepts\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8o9c2xunq4m7090a6zrhckkyz\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\">JavaScript 类</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehjeiugydme81yu137exhcrri\"><a href=\"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\">TypeScript 基础</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41ydzcofhpnt10v6i3zt2y6gw\"><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\">TypeScript 装饰器</a></li>\n</ul>\n<p><a id=\"tools\"></a></p>\n<h3 id=\"tools\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xwol16j57olv2n9pnirwf8gn\">工具<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#tools\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bf0938jzo1hlvvs569sd96iqx\"><strong>TypeScript</strong> - 这是默认随每个 Angular 应用程序一起提供的，以提供改进的工具和增强可维护性，从而获得更好的开发者体验。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69iywlojkfa4nbq4hs889b7wy\"><strong>命令行界面（CLI）</strong> - Angular 使用编译器来抽象工具复杂性并优化您的代码，这样您就可以专注于构建应用程序。</li>\n</ul>\n<p><a id=\"components\"></a></p>\n<h2 id=\"components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7vzzlnsersqq3lvejga81lr\">组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#components\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r49oe5aca9dm3j3omaksaiwa\">在 Angular 中，组件是创建应用程序的基本构建模块。通过利用组件架构，Angular 旨在为组织项目提供结构，将项目组织成可管理、组织良好的部分，并明确各自的职责，以使您的代码易于维护和扩展。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47q7h3gjwcig3wq0oc3hrnqlu\">Angular 组件可以通过 \n<code>component</code> 后缀进行标识（例如，\n<code>my-custom-name.component.ts</code>），具有以下内容：</p>\n<ul>\n<li>A decorator to define configuration options for things like:\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gntjr06m66jr58pem6yzxchr\">一个选择器，定义组件在模板中的标签名称</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aib2h1o8i69rx46v01ksuyxkr\">一个 HTML 模板，控制在浏览器中呈现的内容</li>\n</ul>\n</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2w70bwkighu1uwstgjglonao\">一个 TypeScript 类，定义组件的行为。例如处理用户输入、管理状态、定义方法等。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2mm3lk4tin11zlebgdtbvv9i\">以下是一个 TodoListItem 组件的简化示例。</p>\n<code-example language=\"ts\">\n// 📄 todo-list-item.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'todo-list-item',\n  template: ` &lt;li&gt;(TODO) Read cup of coffee introduction&lt;/li&gt; `,\n  styles: ['li { color: papayawhip; }'],\n})\nexport class TodoListItem {\n  /* <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> behavior is defined in here */\n}\n</code-example>\n<p><a id=\"behavior\"></a></p>\n<h3 id=\"behavior\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ams69bxknsvkxy7e6gbayrjfr\">行为<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#behavior\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzdxwdu9htziunbwuhhxr7n08\">现在我们已经有了组件的基本结构，让我们更深入了解如何定义组件的行为。</p>\n<h4 id=\"state\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"46jl7g8ajfzvsukbogkwqmsm5\">状态<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#state\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3n4h2pvb8h36u5ee1mxukz38\">当定义组件要管理的数据时，可以通过声明 \n<a href=\"https://www.typescriptlang.org/docs/handbook/2/classes.html#fields\">类字段</a> 来实现。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zlxrspfc4rt4p3933ay2khn2\">在 \n<code>todo-list-item.component.ts</code> 的示例中，我们想要跟踪两个属性： \n<code>taskTitle</code> 和 \n<code>isComplete</code>。使用 \n<a href=\"https://www.typescriptlang.org/docs/handbook/2/classes.html#fields\">类字段语法</a>，可以如下定义：</p>\n<code-example language=\"ts\">\n// 📄 todo-list-item.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ ... })\nexport class TodoList {\n  taskTitle = '';\n  isComplete = false;\n}\n</code-example>\n<h4 id=\"methods\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xubgaqmffibk0p3s7z4lwoiw\">方法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#methods\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2a8ylycumjicomq22606fw219\">你可以通过在组件类中声明方法来定义组件的函数。</p>\n<code-example language=\"ts\">\n// 📄 todo-list-item.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ ... })\nexport class TodoList {\n  taskTitle = '';\n  isComplete = false;\n\n  updateTitle(newTitle: string) {\n    this.taskTitle = newTitle;\n  }\n\n  completeTask() {\n    this.isComplete = true;\n  }\n}\n</code-example>\n<p><a id=\"templates\"></a></p>\n<h3 id=\"templates\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ghjndclzhjnvo01a3d1ff3nc\">模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#templates\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e48a2n5vua61oyiuoi94qq0wr\">每个组件都有一个 HTML 模板，定义了该组件渲染到 DOM 中的内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wmb12wgu1nn6kvew0igb2tma\">HTML 模板可以作为 TypeScript 类中的内联模板定义，也可以使用 \n<code>templateUrl</code> 属性在单独的文件中定义。要了解更多，请查看 \n<a href=\"guide/component-overview#defining-a-components-template\">关于定义组件模板的文档</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"846jf9b3j757z7b9uaxqpmve6\">在本文档中，示例将使用内联模板以获得更简洁的代码片段。</p>\n<h4 id=\"rendering-dynamic-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82xp9e76cuq26iwv22awk32gp\">渲染动态数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#rendering-dynamic-data\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1dyw7u83c8pd7e2cc0udsjsu\">当需要在模板中显示动态内容时，Angular 使用双大括号语法来区分静态和动态内容。</p>\n<code-example language=\"ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: ` &lt;p&gt;<a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>: {{ taskTitle }}&lt;/p&gt; `,\n})\nexport class TodoListItem {\n  taskTitle = 'Read cup of coffee';\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7u6plhsu44adqwcteowwxphrx\">这是它呈现在页面上的方式。</p>\n<code-example language=\"html\">\n&lt;p&gt;<a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>: Read cup of coffee&lt;/p&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4lurptqmmrm7ptu1tf5t3gu80\">此语法在 HTML 中声明了动态数据属性之间的\n<strong>插值</strong>。因此，每当数据发生变化，Angular 将自动更新 DOM，反映属性的新值。</p>\n<h4 id=\"dynamic-properties-and-attributes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chvqvhpscj1dksc3rp1apx1wp\">动态属性和属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#dynamic-properties-and-attributes\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3663hih6tzol3681eon1rbmca\">当需要动态设置 HTML 元素中属性的值时，目标属性将包裹在方括号中。这将通过将属性与所需的动态数据绑定，告知 Angular 声明的值应被解释为类似 JavaScript 语句的形式（\n<a href=\"guide/understanding-template-expr-overview\">带有一些 Angular 增强</a>），而不是纯字符串。</p>\n<code-example language=\"html\">\n&lt;button [disabled]=\"hasPendingChanges\"&gt;&lt;/button&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11rya6li0vccmgijw7inanz9n\">在此示例中，disabled 属性与 Angular 期望在组件状态中找到的 \n<code>hasPendingChanges</code> 变量相关联。</p>\n<h4 id=\"event-handling\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avdp5yql1zi66avgh7zlc44sx\">事件处理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#event-handling\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jbrc2r1789uefj0l0ut2sgq5\">你可以通过在括号中指定事件名称并在等号右侧调用方法来绑定事件监听器：</p>\n<code-example language=\"html\">\n&lt;button (click)=\"saveChanges()\"&gt;Save Changes&lt;/button&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4gq3yzmaczqvgjeham5o55ez\">如果需要将事件对象传递给事件监听器，Angular 提供了一个隐式的 \n<code>$event</code> 变量，可以在函数调用内部使用：</p>\n<code-example language=\"html\">\n&lt;button (click)=\"saveChanges($event)\"&gt;Save Changes&lt;/button&gt;\n</code-example>\n<p><a id=\"styles\"></a></p>\n<h3 id=\"styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4i7qnr06jiwow4wrh4huw1axt\">样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#styles\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82y0tl4ijpcxo7jtb9c3btlbf\">当你需要为组件设置样式时，有两个可选属性可以在 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器内配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bem7zz1rz242d184mdqmkrqew\">与组件模板类似，你可以在 TypeScript 类的同一文件中管理组件的样式，或者在使用 \n<code>styleUrls</code> 属性的单独文件中管理。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxrm9bdjvt84urnzm4b9rfxqx\">组件可以选择包含一组应用于该组件 DOM 的 CSS 样式：</p>\n<code-example language=\"ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'profile-pic',\n  template: `&lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> src=\"profile-photo.jpg\" alt=\"Your profile photo\" /&gt;`,\n  styles: [\n    `\n      <a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> {\n        border-radius: 50%;\n      }\n    `,\n  ],\n})\nexport class ProfilePic {\n  /* Your code goes here */\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b59ylnonnwijre959wf9ffhct\">默认情况下，组件的样式仅适用于该组件模板中的元素，以限制副作用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84xwbq0wzdaqu6a705chcgkt5\">要了解更多，请查看 \n<a href=\"guide/component-styles\">有关组件样式的文档</a>。</p>\n<p><a id=\"directives\"></a></p>\n<h2 id=\"directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\">指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#directives\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8amf31y3tmo3tcs0etxjoylb1\">在构建应用程序时，开发人员经常需要扩展 HTML 元素或 Angular 指令/组件的行为。其中包括：根据特定条件显示内容、根据应用程序数据渲染项目列表、根据用户交互更改元素的样式等。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14qgsqq1k3nbqdg59khaodgd6\">为解决这个问题，Angular 使用指令的概念，允许你以声明性和可重复使用的方式向元素添加新行为。</p>\n<h3 id=\"conditional-rendering\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47dg0xi8n3p6izueyo8kg7ebw\">条件渲染<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#conditional-rendering\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ff8q0lw1ron4brukdg07ii3a\">开发人员经常遇到的最常见场景之一是根据条件在模板中显示或隐藏内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nopsdhetxnapiy7d5q1k6i1k\">类似于 JavaScript 的 \n<code>if</code> 控制块，Angular 提供了一个内置的 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令，用于控制元素是否在表达式返回真值时渲染。</p>\n<code-example language=\"html\">\n&lt;section class=\"admin-controls\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hasAdminPrivileges\"&gt;\n  The content you are looking for is here.\n&lt;/section&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5l8ze9i7ompquokr37h6ncd9\">如果 \n<code>hasAdminPrivileges</code> 为真，应用程序将向用户显示内容，否则，该元素将从 DOM 中完全移除。</p>\n<h3 id=\"rendering-a-list\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbulhnwvp98fjsyelz40e67j2\">渲染列表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#rendering-a-list\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69aoumyjq3l4h0toal9rmc41y\">另一个常见场景是根据动态数据渲染项目列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cioy2744gwoj8zwlylvlk7ok\">类似于 JavaScript 的 \n<code>for</code> 循环，Angular 提供了另一个内置指令称为 \n<code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>，以下代码将为 \n<code>taskList</code> 中的每个项目渲染一个 \n<code>&lt;li&gt;</code> 元素。</p>\n<code-example language=\"html\">\n&lt;ul class=\"ingredient-list\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let task of taskList\"&gt;{{ task }}&lt;/li&gt;\n&lt;/ul&gt;\n</code-example>\n<h3 id=\"custom-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p61jsdo3vx6yykvn58xevbwf\">自定义指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#custom-directives\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edj0ullj9jdewk0nyk3wwbfom\">虽然内置指令有助于解决开发人员遇到的常见问题，但在某些情况下，开发人员需要特定于其应用程序的自定义行为。在这些情况下，Angular 提供了一种创建自定义指令的方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"294skyfws4wzbnuevdrxn03l\">自定义 Angular 指令可以通过 \n<code>directive</code> 后缀（例如，\n<code>my-custom-name.directive.ts</code>）来识别。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29hlpzvpvcplvafat62imhhbz\">与定义组件类似，指令由以下内容组成：</p>\n<ul>\n<li>A TypeScript decorator to define configuration options for things like:\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxl0eszp6bwsl6j06xdomhc09\">一个选择器，定义在调用组件时的标签名称</li>\n</ul>\n</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ucv5ku9skrzg69pev3ksq8av\">一个 TypeScript 类，定义指令将添加到相应 HTML 元素的扩展行为。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8hfb030vhw4rsh3fhup8us9e\">例如，这里是一个用于突出显示元素的自定义指令：</p>\n<code-example language=\"ts\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]',\n})\nexport class HighlightDirective {\n  private el = inject(<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>);\n  constructor() {\n    this.el.nativeElement.style.backgroundColor = 'yellow';\n  }\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"buw4nyzkm5ayeoyyray2p1ztr\">要将其应用于元素，可以将指令作为属性添加来调用。</p>\n<code-example language=\"html\">\n&lt;p appHighlight&gt;Look at me!&lt;/p&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pnuhhx5tsx6sqcpc26z330kv\">指令还可以利用用户事件，接受输入以进行额外定制，但这超出了本文的范围。要了解更多信息，请查看\n<a href=\"guide/attribute-directives\">有关创建自定义指令的文档</a>。</p>\n<p><a id=\"services\"></a></p>\n<h2 id=\"services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92fqgk8698jdwr0o85057qr44\">服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#services\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e11b4rbzfhnk5hprl0qaj4syw\">当需要在组件之间共享逻辑时，Angular 允许你创建一个“服务”，允许你将代码注入到组件中，并从单一事实来源管理它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74uhanpqvlsvm167ii8q6ipbi\">Angular 服务可以通过 \n<code>service</code> 后缀（例如，\n<code>my-custom-name.service.ts</code>）来识别。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lb3m4o7czldz7rfblvhuo398\">与定义组件类似，服务由以下内容组成：</p>\n<ul>\n<li>A TypeScript decorator to define configuration options for things like:\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ek964o81smueh4c6epela9ryn\"><a href=\"api/core/Injectable#providedIn\"><code>providedIn</code></a> - 这允许你定义应用程序的哪些部分可以访问该服务。例如，“root”将允许服务在应用程序中的任何地方访问。</li>\n</ul>\n</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ex5kryhp5wewtgrpteelff0mw\">一个 TypeScript 类，定义在注入服务时将可访问的所需代码</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gxj4btr5bpr6biilj3xw3dot\">这是一个 \n<code>Calculator</code> 服务的示例。</p>\n<code-example language=\"ts\">\nimport {<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>} from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nclass CalculatorService {\n  add(x: number, y: number) {\n    return x + y;\n  }\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqja3vg71b0es6qz3gjokqd2e\">如果我们想在 Receipt 组件中调用该服务，示例如下：</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { CalculatorService } from './calculator.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-receipt',\n  template: `&lt;h1&gt;The total is {{ totalCost }}&lt;/h1&gt;`,\n})\nexport class Receipt {\n  private calculatorService = inject(CalculatorService);\n  totalCost = this.calculatorService.add(50, 25);\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2w52z5zedzj9urhinsaqmq856\">在此示例中，通过调用 Angular 函数 \n<code>inject</code> 并将服务传递给它来使用 \n<code>CalculatorService</code>。</p>\n<p><a id=\"organization\"></a></p>\n<h2 id=\"organization\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpkvzd07cov37xp3yf3g8vxxt\">组织<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#organization\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22hi0lsftcli25sds72gefyco\">独立组件是 Angular v15 中引入的一种新的组织模式，是推荐的起始位置。与 \n<a href=\"guide/ngmodules\">NgModules</a> 相比，它允许开发人员通过组件组织代码并管理依赖项，而不是通过功能模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gbf8i4f0fdduj1a2spqrlaf3\">例如，在传统的 NgModule 模式中，你需要创建一个 TodoModule 并通过该模块管理所有依赖项。</p>\n<code-example language=\"ts\">\nimport {<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>} from '@angular/core';\nimport {<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>} from '@angular/forms';\nimport {TodoList} from '../todo/todo-list.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [TodoList],\n  imports: [<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>],\n  exports: [TodoList, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>],\n})\nexport class TodoModule {}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vuwlrz07zzi1d9a9vtru1mgo\">然而，现在你可以使用独立组件来实现类似的功能，而无需模块文件：</p>\n<code-example language=\"ts\">\nimport {<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>} from '@angular/forms';\nimport {TodoList} from '../todo/todo-list.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'todo-app',\n  imports: [<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>, TodoList],\n  template: ` ... &lt;todo-list [tasks]=\"taskList\"&gt;&lt;/todo-list&gt; `,\n})\nexport class PhotoGalleryComponent {\n  // component logic\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xhsjhrovvlyu0h565ntlo2t4\">尽管大部分内容应该是熟悉的（来自“组件”部分），但这种新模式中独特的两个内容是 \n<code>standalone</code> 标志和 \n<code>imports</code> 键。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rglbsmx0qsh5x7oaziezfh53\"><code>standalone</code> - 当提供值为\n<code>true</code>时，这告诉 Angular 该组件无需在 NgModule 中声明</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33ufebzcyr2etktpxjm62lq7e\"><code>imports</code> - 允许开发人员声明组件中将使用的依赖项</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pa8uew5x7eibd48lgvkjdz7y\">换句话说，开发人员可以直接在组件上下文中指定依赖项，而不必定义代码应该组织的特定上下文。</p>\n<p><a id=\"cli\"></a></p>\n<h2 id=\"command-line-interface-cli\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlbcuf6wfysvjovodwc97f0g6\">命令行界面（CLI）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#command-line-interface-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dho86htmdwg9n738251lbu2ac\">Angular CLI 是开发 Angular 应用的推荐方式，可以使一些任务变得轻松。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2b3f1bbt0336bxrgvcmoxsh\">一些常见的 Angular CLI 命令示例包括：</p>\n<!-- vale Angular.Google_WordListSuggestions = NO -->\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4ichvee5s9yr5zvjwgj5m6sh\">命令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5n7bwou7cik5b59885zxx80zw\"><a href=\"cli/build\">ng build</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awjo0nknflw24vqcelcevwzcb\">将 Angular 应用编译到输出目录中。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3opl4bzj7kheth7l1g19b0aye\"><a href=\"cli/serve\">ng serve</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jlefdce1vjkei4ex26sr52ns\">构建并为你的应用提供服务，在文件更改时重新构建。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8a5x7vpakz9jxdiejlvn3md2\"><a href=\"cli/generate\">ng generate</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nxkvg37kai12733x1rbtfiai\">基于原理图生成或修改文件。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99a6h6jtjj3ooz2hunosexc13\"><a href=\"cli/test\">ng test</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xg90wg0jfpp4xj3kvhja5yes\">在给定项目上运行单元测试。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"124annwby076m40sbvz9l2epo\"><a href=\"cli/e2e\">ng e2e</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cotipegjmo2g4nqyznqcyb3s\">构建并为一个 Angular 应用提供服务，然后运行端到端测试。</td>\n</tr>\n</tbody>\n</table>\n<!-- vale Angular.Google_WordListSuggestions = YES -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4o17f7xstwnctu3ccscsubunj\">有关 Angular CLI 的更多信息，请参阅 <a href=\"cli\">“Angular CLI 参考手册”</a>部分。</p>\n<p><a id=\"1p-libraries\"></a></p>\n<h2 id=\"first-party-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dj55g60w4s7ry52p7onuyvxj\">自带库<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#first-party-libraries\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0hsnhywxmb7un22b3aj0qopg\">Angular 提供许多第一方库来支持开发人员在构建应用程序时经常遇到的常见功能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4i4ny4sr3z9erbw2k75qm4fha\">生态系统中提供的一些受欢迎的库包括：</p>\n<!-- vale Angular.Google_Acronyms = NO -->\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4l1jf0274jgug5pksccglb1z2\">库</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6x2cfb2mx3rq7u6pk6n02ivq7\"><a href=\"guide/router\">Angular 路由器</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckmv66fcz3yv1gm03mp4ya74t\">基于 Angular 组件的高级客户端导航和路由。支持延迟加载、嵌套路由、自定义路径匹配等功能。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ndrj35c7u4ys4hv25mmoa7su\"><a href=\"guide/forms-overview\">Angular 表单</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44zh3kgyq5nyotxsm4e8rzjt1\">用于表单参与和验证的统一系统。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bdcu5wodgudgx0wwa85pze8f\"><a href=\"guide/understanding-communicating-with-http\">Angular HttpClient</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezy2nephcw8yndh8h2erm20bb\">强大的 HTTP 客户端，可以支持更高级的客户端-服务器通信。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6151gbiyixt6ug7mbcqxzludv\"><a href=\"guide/animations\">Angular 动画</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"et09yt4u8gttcen439kjq14gd\">基于应用程序状态驱动动画的丰富系统。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mdrddlg4q26546z9av9bjemq\"><a href=\"guide/service-worker-intro\">Angular PWA</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwd1s0a3l3wjbbb9bt3m4c3h4\">用于构建渐进式 Web 应用程序（PWA）的工具，包括服务工作者和 Web 应用程序清单。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lf2hh3j0pbsm8uel2ts0fv3r\"><a href=\"guide/schematics\">Angular 原理图</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d30x11t644c279w5vb2iupvd3\">自动化的搭建、重构和更新工具，简化大规模开发。</td>\n</tr>\n</tbody>\n</table>\n<!-- vale Angular.Google_Acronyms = YES -->\n<h2 id=\"next-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4pkljueu68ifjoi5994e9l8o\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ouowhvgae6nkouzg7do7ozb2\">要实际使用 Angular，请参阅我们的<a href=\"start\">入门</a>教程。本教程使用 <a href=\"https://stackblitz.com\">stackblitz.com</a>，因此你可以浏览 Angular 的可工作范例，而不必先做任何安装工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqhceffa83t0f5cx5rui512ey\">如果你对如何使用 Angular 构建应用程序感兴趣，请查看以下资源：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86hnucbq7l7n4pao3g1rjmuge\"><a href=\"tutorial/first-app\">教程</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yplp1k38y4tm5x7kaiowygcv\"><a href=\"guide/developer-guide-overview\">深入指南</a></li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间：Tue Aug 15 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - docs\n - guide/developer-guide-overview\n - guide/localizing-angular\n - guide/understanding-angular-overview\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgOptimizedImage\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/Injectable\n - api/core/Injectable#providedIn\n - api/core/NgModule\n - api/forms/FormsModule\n - api/platform-browser/Title\n - cli\n - cli/build\n - cli/e2e\n - cli/generate\n - cli/serve\n - cli/test\n - guide/animations\n - guide/attribute-directives\n - guide/component-overview#defining-a-components-template\n - guide/component-styles\n - guide/developer-guide-overview\n - guide/forms-overview\n - guide/ngmodules\n - guide/router\n - guide/schematics\n - guide/service-worker-intro\n - guide/understanding-communicating-with-http\n - guide/understanding-template-expr-overview\n - guide/what-is-angular#behavior\n - guide/what-is-angular#command-line-interface-cli\n - guide/what-is-angular#components\n - guide/what-is-angular#concepts\n - guide/what-is-angular#conditional-rendering\n - guide/what-is-angular#custom-directives\n - guide/what-is-angular#directives\n - guide/what-is-angular#dynamic-properties-and-attributes\n - guide/what-is-angular#event-handling\n - guide/what-is-angular#first-party-libraries\n - guide/what-is-angular#methods\n - guide/what-is-angular#next-steps\n - guide/what-is-angular#organization\n - guide/what-is-angular#prerequisites\n - guide/what-is-angular#rendering-a-list\n - guide/what-is-angular#rendering-dynamic-data\n - guide/what-is-angular#services\n - guide/what-is-angular#state\n - guide/what-is-angular#styles\n - guide/what-is-angular#templates\n - guide/what-is-angular#tools\n - guide/what-is-angular#what-is-angular\n - start\n - tutorial/first-app\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\n - https://stackblitz.com\n - https://www.typescriptlang.org\n - https://www.typescriptlang.org/docs/handbook/2/classes.html#fields\n - https://www.typescriptlang.org/docs/handbook/decorators.html\n - https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\n-->"}
{"id":"guide/using-libraries","title":"使用已发布到 npm 的 Angular 库","contents":"<div class=\"content\">\n  <h1 id=\"usage-of-angular-libraries-published-to-npm\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nkpqtogejc5zcsz627ntfkf6\">使用已发布到 npm 的 Angular 库<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#usage-of-angular-libraries-published-to-npm\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81odn7poe58zz8dqbwkkvqs0k\">当构建 Angular 应用时，你可以从精品第一方库，比如 <a href=\"https://material.angular.io\" title=\"Angular Material | Angular\">Angular Material</a>，以及丰富的第三方库生态系统中获益。参阅 <a href=\"resources\" title=\"Explore Angular Resources | Angular\">Angular 资源集</a>页面，了解最常用的库链接。</p>\n<h2 id=\"install-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2y7y1ekombc1odkb5mjsoa69\">安装库<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#install-libraries\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9thwasy3cw04srjwotlsf8deu\">这些库都是作为 <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm 包</a>发布的，它们通常都带有一些与 Angular CLI 集成好的原理图。要把可复用的库代码集成到应用中，你需要安装该软件包并在使用时导入它提供的功能。对于大多数已发布的 Angular 库，你可以使用 Angular CLI 的 <code>ng add &lt;lib_name&gt;</code> 命令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4j4x5eiay8iwuuqo03fut30qu\">Angular CLI 的 <code>ng add</code> 命令使用包管理器来安装库包，并调用该包中的原理图在项目代码中的添加脚手架。这些包管理器包括 <a href=\"https://www.npmjs.com\" title=\"npm\">npm</a> 或 <a href=\"https://yarnpkg.com\" title=\" Yarn\">yarn</a>。项目代码中的额外脚手架包括 import 语句、fonts 和 themes。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3j8iqme4179tmqzjwu82ouxt9\">已发布的库通常会提供一个 <code>README</code> 文件或其它文档来介绍如何把该库添加到你的应用中。例子可参阅 <a href=\"https://material.angular.io\" title=\"Angular Material | Angular\">Angular Material</a> 文档。</p>\n<h3 id=\"library-typings\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hc5cxjek45eoeh3j41s9elzi\">库的类型信息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#library-typings\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tjtrqxh6vz0tegv546aykygi\">通常，库包中会在 <code>.d.ts</code> 文件中包含类型信息。参阅 <code>node_modules/@angular/material</code> 中的例子。如果库包中没有包含类型信息并且你的 IDE 报错，你可能需要安装与该库关联的 <code>@types/&lt;lib_name&gt;</code> 包。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"av871qe4ocsz1lxjdz096crpn\">比如，假设你有一个名为 <code>d3</code> 的库：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install d3 --save\nnpm install @types/d3 --save-dev\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d81vqht1p0nf5uwsvsq383a2t\">已安装到工作区中的 <code>@types/</code> 包中所定义的类型，会自动添加到使用该库的项目的 TypeScript 配置文件中。TypeScript 默认就会在 <code>node_modules/@types</code> 文件夹中查找类型，所以你不必单独添加每一个类型包。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2igzrb3e96bzk1zbk6alb5kx4\">如果某个库没有 <code>@types/</code> 类型信息，你仍然可以手动为它添加一些类型信息。为此你要：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fi5vrwmwt3nqmzuk9mohqmry\">在 <code>src/</code> 文件夹中创建一个 <code>typings.d.ts</code> 文件。该文件会自动包含在全局类型定义中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1j4dyobcoe8w2zljw5olf0lt\">在 <code>src/typings.d.ts</code> 中添加如下代码。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\ndeclare module 'host' {\n  export interface <a href=\"api/core/Host\" class=\"code-anchor\">Host</a> {\n    protocol?: string;\n    hostname?: string;\n    pathname?: string;\n  }\n  export function parse(url: string, queryString?: string): <a href=\"api/core/Host\" class=\"code-anchor\">Host</a>;\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eryyt4q902nv2hhq7c1qsrido\">在使用该库的组件或文件中，添加如下代码。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport * as host from 'host';\nconst parsedUrl = host.parse('https://angular.io');\nconsole.log(parsedUrl.hostname);\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ddavx43u240zpa83fvqeopys4\">按需定义更多类型。</p>\n<h2 id=\"updating-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gvts5g9cd8u0pa8ikqpwup3h\">更新这些库<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#updating-libraries\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4l9mql2naipk0qtqlhdl7iv8\">库的发布者可以对这些库进行更新，而这些库也有自己的依赖，所有依赖都需要保持最新。要检查已安装库的更新，请使用 <a href=\"cli/update\" title=\"ng update | CLI |Angular\"><code>ng update</code> 命令</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab43ccbznw5ja4bw3c0vxce2s\">使用 <code>ng update &lt;lib_name&gt;</code> 命令来单独更新某个库的版本。Angular CLI 会检查库中最新发布的版本，如果最新版本比你已安装的版本新，就会下载它并更新你的 <code>package.json</code> 以匹配最新版本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fkfkbo20oom5mxba4oc57ctu\">如果要把 Angular 更新到新版本，你需要确保所用的库都是最新的。如果库之间相互依赖，你可能还要按特定的顺序更新它们。请参阅 <a href=\"https://update.angular.io\" title=\"Angular Update Guide | Angular\">Angular 升级指南</a>以获取帮助。</p>\n<h2 id=\"adding-a-library-to-the-runtime-global-scope\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vhy9xgeyzkf41zm8pskgo8f5\">把某个库添加到运行时的全局范围中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#adding-a-library-to-the-runtime-global-scope\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zovyfnk8s6nos7pwzklfmccg\">如果未将老式 JavaScript 库导入应用程序，你可以将其添加到运行时全局范围并加载它，就像将其添加到 script 标记中一样。使用工作区构建配置文件 <a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\"><code>angular.json</code></a> 中此构建目标的 <code>scripts</code> 和 <code>styles</code> 选项，配置 Angular CLI 以便在构建时执行此操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"73hwti7fu7l1309ttxfw5hssl\">比如，要使用 <a href=\"https://getbootstrap.com/docs/4.0/getting-started/introduction\" title=\"Introduction | Bootstrap\">Bootstrap 4</a> 库</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ma8518f6335pexa7w7fpy02t\">使用 npm 包管理器安装库和相关的依赖项：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install jquery --save\nnpm install popper.js --save\nnpm install bootstrap --save\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wpkyk6zerwlrvr5m3obhn64d\">在 <code>angular.json</code> 配置文件中，把关联的脚本文件添加到 \"scripts\" 数组中：</p>\n<code-example format=\"json\" language=\"json\">\n\n\"scripts\": [\n  \"node_modules/jquery/dist/jquery.slim.js\",\n  \"node_modules/popper.js/dist/umd/popper.js\",\n  \"node_modules/bootstrap/dist/js/bootstrap.js\"\n],\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ncsvfahnp2esr7df4i97w5bd\">把 <code>bootstrap.css</code> 文件添加到 \"styles\" 数组中：</p>\n<code-example format=\"css\" language=\"css\">\n\n\"styles\": [\n  \"node_modules/bootstrap/dist/css/bootstrap.css\",\n  \"src/styles.css\"\n],\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1nz6kabng0sy0gbtg2ak460c\">运行或重启 <code>ng serve</code>，看看你的应用是否正在使用 Bootstrap 4。</p>\n</li>\n</ol>\n<h3 id=\"using-runtime-global-libraries-inside-your-app\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u9s1hhn6xrg24jzdv5ph0tlq\">在你的应用中使用运行时全局库<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#using-runtime-global-libraries-inside-your-app\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uya8xo1ztfg7h0q5tbaylk07\">通过 “scripts” 数组导入某个库之后，<strong>不要</strong>在 TypeScript 代码中再次使用 import 语句导入它。以下代码片段是一个示例导入语句。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport * as $ from 'jquery';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7sf5dt2oe05rgtkssro09yw76\">如果你使用 import 语句导入它，你将拥有该库的两个不同副本：一个作为全局库导入，另一个作为模块导入。这对于带有插件的库来说尤其糟糕，比如 JQuery，因为每个副本都包含不同的插件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58iazk23dm666237h0kif7d8s\">相反，运行 <code>npm install @types/jquery</code> Angular CLI 命令为你的库下载类型信息，然后按照库的安装步骤进行操作。这样你就可以访问该库公开的全局变量了。</p>\n<h3 id=\"defining-typings-for-runtime-global-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brxa0bsz2fzwich4sbh15v9k4\">定义运行时全局库的类型信息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#defining-typings-for-runtime-global-libraries\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jqnp212y7h924fslhxmoxcu2\">如果你要用的全局库没有全局类型信息，就可以在 <code>src/typings.d.ts</code> 中手动声明它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4reizjf10jcs1ftw359bt1ndz\">比如：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\ndeclare var libraryName: any;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91z3k5s315t6gh2ao2dxy8woc\">有些脚本扩展了其它库，比如 JQuery 插件：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n$('.test').myPlugin();\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv8shxw39zov5wvl13j92jvc\">在这种情况下，所安装的 <code>@types/jquery</code> 就不包含 <code>myPlugin</code>，所以你需要在 <code>src/typings.d.ts</code> 中添加一个接口。比如：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\ninterface JQuery {\n  myPlugin(options?: any): any;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8men9jepmfk0cyyq41p0032nj\">如果不为这个由脚本定义的扩展添加接口，IDE 就会显示错误：</p>\n<code-example format=\"none\" language=\"none\">\n\n[TS][Error] Property 'myPlugin' does not exist on type 'JQuery'\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Wed Jan 05 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/libraries\n - guide/workspace-config\n-->\n<!-- links from this doc:\n - api/core/Host\n - cli/update\n - guide/npm-packages\n - guide/using-libraries#adding-a-library-to-the-runtime-global-scope\n - guide/using-libraries#defining-typings-for-runtime-global-libraries\n - guide/using-libraries#install-libraries\n - guide/using-libraries#library-typings\n - guide/using-libraries#updating-libraries\n - guide/using-libraries#usage-of-angular-libraries-published-to-npm\n - guide/using-libraries#using-runtime-global-libraries-inside-your-app\n - guide/workspace-config\n - resources\n - https://getbootstrap.com/docs/4.0/getting-started/introduction\n - https://material.angular.io\n - https://update.angular.io\n - https://www.npmjs.com\n - https://yarnpkg.com\n-->"}
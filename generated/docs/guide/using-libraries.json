{"id":"guide/using-libraries","title":"使用已發布到 npm 的 Angular 函式庫","contents":"<div class=\"content\">\n  <h1 id=\"usage-of-angular-libraries-published-to-npm\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nkpqtogejc5zcsz627ntfkf6\">使用已發布到 npm 的 Angular 函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#usage-of-angular-libraries-published-to-npm\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81odn7poe58zz8dqbwkkvqs0k\">當建立 Angular 應用時，你可以從精品第一方函式庫，比如 <a href=\"https://material.angular.io\" title=\"Angular Material | Angular\">Angular Material</a>，以及豐富的第三方庫生態系統中獲益。參閱 <a href=\"resources\" title=\"Explore Angular Resources | Angular\">Angular 資源集</a>頁面，瞭解最常用的函式庫連結。</p>\n<h2 id=\"install-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2y7y1ekombc1odkb5mjsoa69\">安裝函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#install-libraries\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9thwasy3cw04srjwotlsf8deu\">這些函式庫都是作為 <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm 套件</a>發布的，它們通常都帶有一些與 Angular CLI 整合好的原理圖。要把可複用的函式庫程式碼整合到應用中，你需要安裝該軟體套件並在使用時匯入它提供的功能。對於大多數已發布的 Angular 函式庫，你可以使用 Angular CLI 的 <code>ng add &lt;lib_name&gt;</code> 指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4j4x5eiay8iwuuqo03fut30qu\">Angular CLI 的 <code>ng add</code> 指令使用套件管理器來安裝函式庫套件，並呼叫該套件中的原理圖在專案程式碼中的新增腳手架。這些套件管理器包括 <a href=\"https://www.npmjs.com\" title=\"npm\">npm</a> 或 <a href=\"https://yarnpkg.com\" title=\" Yarn\">yarn</a>。專案程式碼中的額外腳手架包括 import 語句、fonts 和 themes。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3j8iqme4179tmqzjwu82ouxt9\">已發布的函式庫通常會提供一個 <code>README</code> 檔案或其它文件來介紹如何把該函式庫新增到你的應用中。例子可參閱 <a href=\"https://material.angular.io\" title=\"Angular Material | Angular\">Angular Material</a> 文件。</p>\n<h3 id=\"library-typings\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hc5cxjek45eoeh3j41s9elzi\">函式庫的型別訊息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#library-typings\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tjtrqxh6vz0tegv546aykygi\">通常，函式庫套件中會在 <code>.d.ts</code> 檔案中包含型別訊息。參閱 <code>node_modules/@angular/material</code> 中的例子。如果函式庫套件中沒有包含型別訊息並且你的 IDE 報錯，你可能需要安裝與該函式庫關聯的 <code>@types/&lt;lib_name&gt;</code> 套件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"av871qe4ocsz1lxjdz096crpn\">比如，假設你有一個名為 <code>d3</code> 的函式庫：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install d3 --save\nnpm install @types/d3 --save-dev\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d81vqht1p0nf5uwsvsq383a2t\">已安裝到工作區中的 <code>@types/</code> 套件中所定義的型別，會自動新增到使用該函式庫的專案的 TypeScript 設定檔案中。TypeScript 預設就會在 <code>node_modules/@types</code> 資料夾中查詢型別，所以你不必單獨新增每一個型別套件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2igzrb3e96bzk1zbk6alb5kx4\">如果某個函式庫沒有 <code>@types/</code> 型別訊息，你仍然可以手動為它新增一些型別訊息。為此你要：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fi5vrwmwt3nqmzuk9mohqmry\">在 <code>src/</code> 資料夾中建立一個 <code>typings.d.ts</code> 檔案。該檔案會自動包含在全域型別定義中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1j4dyobcoe8w2zljw5olf0lt\">在 <code>src/typings.d.ts</code> 中新增如下程式碼。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\ndeclare module 'host' {\n  export interface <a href=\"api/core/Host\" class=\"code-anchor\">Host</a> {\n    protocol?: string;\n    hostname?: string;\n    pathname?: string;\n  }\n  export function parse(url: string, queryString?: string): <a href=\"api/core/Host\" class=\"code-anchor\">Host</a>;\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eryyt4q902nv2hhq7c1qsrido\">在使用該函式庫的元件或檔案中，新增如下程式碼。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport * as host from 'host';\nconst parsedUrl = host.parse('https://angular.io');\nconsole.log(parsedUrl.hostname);\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ddavx43u240zpa83fvqeopys4\">按需定義更多型別。</p>\n<h2 id=\"updating-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gvts5g9cd8u0pa8ikqpwup3h\">更新這些函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#updating-libraries\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4l9mql2naipk0qtqlhdl7iv8\">函式庫的發布者可以對這些函式庫進行更新，而這些函式庫也有自己的依賴，所有依賴都需要保持最新。要檢查已安裝函式庫的更新，請使用 <a href=\"cli/update\" title=\"ng update | CLI |Angular\"><code>ng update</code> 指令</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab43ccbznw5ja4bw3c0vxce2s\">使用 <code>ng update &lt;lib_name&gt;</code> 指令來單獨更新某個函式庫的版本。Angular CLI 會檢查庫中最新發布的版本，如果最新版本比你已安裝的版本新，就會下載它並更新你的 <code>package.json</code> 以對應最新版本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fkfkbo20oom5mxba4oc57ctu\">如果要把 Angular 更新到新版本，你需要確保所用的函式庫都是最新的。如果函式庫之間相互依賴，你可能還要按特定的順序更新它們。請參閱 <a href=\"https://update.angular.io\" title=\"Angular Update Guide | Angular\">Angular 升級指南</a>以獲取幫助。</p>\n<h2 id=\"adding-a-library-to-the-runtime-global-scope\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vhy9xgeyzkf41zm8pskgo8f5\">把某個函式庫新增到執行時的全域範圍中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#adding-a-library-to-the-runtime-global-scope\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zovyfnk8s6nos7pwzklfmccg\">如果未將老式 JavaScript 函式庫匯入應用程式，你可以將其新增到執行時全域範圍並載入它，就像將其新增到 script 標記中一樣。使用工作區建立設定檔案 <a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\"><code>angular.json</code></a> 中此建立目標的 <code>scripts</code> 和 <code>styles</code> 選項，設定 Angular CLI 以便在建立時執行此操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"73hwti7fu7l1309ttxfw5hssl\">比如，要使用 <a href=\"https://getbootstrap.com/docs/4.0/getting-started/introduction\" title=\"Introduction | Bootstrap\">Bootstrap 4</a> 函式庫</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ma8518f6335pexa7w7fpy02t\">使用 npm 套件管理器安裝函式庫和相關的依賴項：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install jquery --save\nnpm install popper.js --save\nnpm install bootstrap --save\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wpkyk6zerwlrvr5m3obhn64d\">在 <code>angular.json</code> 設定檔案中，把關聯的指令碼檔案新增到 \"scripts\" 陣列中：</p>\n<code-example format=\"json\" language=\"json\">\n\n\"scripts\": [\n  \"node_modules/jquery/dist/jquery.slim.js\",\n  \"node_modules/popper.js/dist/umd/popper.js\",\n  \"node_modules/bootstrap/dist/js/bootstrap.js\"\n],\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ncsvfahnp2esr7df4i97w5bd\">把 <code>bootstrap.css</code> 檔案新增到 \"styles\" 陣列中：</p>\n<code-example format=\"css\" language=\"css\">\n\n\"styles\": [\n  \"node_modules/bootstrap/dist/css/bootstrap.css\",\n  \"src/styles.css\"\n],\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1nz6kabng0sy0gbtg2ak460c\">執行或重啟 <code>ng serve</code>，看看你的應用是否正在使用 Bootstrap 4。</p>\n</li>\n</ol>\n<h3 id=\"using-runtime-global-libraries-inside-your-app\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u9s1hhn6xrg24jzdv5ph0tlq\">在你的應用中使用執行時全域函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#using-runtime-global-libraries-inside-your-app\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uya8xo1ztfg7h0q5tbaylk07\">透過 『scripts』 陣列匯入某個函式庫之後，<strong>不要</strong>在 TypeScript 程式碼中再次使用 import 語句匯入它。以下程式碼片段是一個範例匯入語句。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport * as $ from 'jquery';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7sf5dt2oe05rgtkssro09yw76\">如果你使用 import 語句匯入它，你將擁有該函式庫的兩個不同副本：一個作為全域函式庫匯入，另一個作為模組匯入。這對於帶有外掛的函式庫來說尤其糟糕，比如 JQuery，因為每個副本都包含不同的外掛。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58iazk23dm666237h0kif7d8s\">相反，執行 <code>npm install @types/jquery</code> Angular CLI 指令為你的函式庫下載型別訊息，然後按照函式庫的安裝步驟進行操作。這樣你就可以訪問該函式庫公開的全域變數了。</p>\n<h3 id=\"defining-typings-for-runtime-global-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brxa0bsz2fzwich4sbh15v9k4\">定義執行時全域函式庫的型別訊息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#defining-typings-for-runtime-global-libraries\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jqnp212y7h924fslhxmoxcu2\">如果你要用的全域函式庫沒有全域型別訊息，就可以在 <code>src/typings.d.ts</code> 中手動宣告它們。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4reizjf10jcs1ftw359bt1ndz\">比如：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\ndeclare var libraryName: any;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91z3k5s315t6gh2ao2dxy8woc\">有些指令碼擴充套件了其它函式庫，比如 JQuery 外掛：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n$('.test').myPlugin();\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv8shxw39zov5wvl13j92jvc\">在這種情況下，所安裝的 <code>@types/jquery</code> 就不包含 <code>myPlugin</code>，所以你需要在 <code>src/typings.d.ts</code> 中新增一個介面。比如：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\ninterface JQuery {\n  myPlugin(options?: any): any;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8men9jepmfk0cyyq41p0032nj\">如果不為這個由指令碼定義的擴充套件新增介面，IDE 就會顯示錯誤：</p>\n<code-example format=\"none\" language=\"none\">\n\n[TS][Error] Property 'myPlugin' does not exist on type 'JQuery'\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Wed Jan 05 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/libraries\n - guide/workspace-config\n-->\n<!-- links from this doc:\n - api/core/Host\n - cli/update\n - guide/npm-packages\n - guide/using-libraries#adding-a-library-to-the-runtime-global-scope\n - guide/using-libraries#defining-typings-for-runtime-global-libraries\n - guide/using-libraries#install-libraries\n - guide/using-libraries#library-typings\n - guide/using-libraries#updating-libraries\n - guide/using-libraries#usage-of-angular-libraries-published-to-npm\n - guide/using-libraries#using-runtime-global-libraries-inside-your-app\n - guide/workspace-config\n - resources\n - https://getbootstrap.com/docs/4.0/getting-started/introduction\n - https://material.angular.io\n - https://update.angular.io\n - https://www.npmjs.com\n - https://yarnpkg.com\n-->"}
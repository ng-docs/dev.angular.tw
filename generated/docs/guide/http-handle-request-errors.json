{"id":"guide/http-handle-request-errors","title":"HTTP 客户端 - 处理请求错误","contents":"<div class=\"content\">\n  <h1 id=\"http-client---handle-request-errors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94qrrp3oxgaiz30gswpi6lstc\">HTTP 客户端 - 处理请求错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#http-client---handle-request-errors\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1o939qp6q7ex5oyvzscqaqph7\">如果请求在服务器上失败了，那么 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 就会返回一个<em>错误</em>对象而不是一个成功的响应对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8hy9tlfs8p9qt0lzzrhcearq2\">执行服务器请求的同一个服务中也应该执行错误检查、解释和解析。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49x31r556n0z8br1dm5vtsvxx\">发生错误时，你可以获得关于通知用户失败的详细信息。在某些情况下，你可能还会自动<a href=\"guide/http-handle-request-errors#retry\">重试请求</a>。</p>\n<p><a id=\"error-details\"></a></p>\n<h2 id=\"getting-error-details\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdetyz85wywdpa5mjokblbx1z\">获取错误详情<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#getting-error-details\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mte1piyt2epb1okmmy9vq3wo\">当数据访问失败时，应用会给用户提供有用的反馈。原始的错误对象作为反馈并不是特别有用。除了检测到错误已经发生之外，还需要获取错误详细信息并使用这些细节来撰写用户友好的响应。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fc5ko1l3osyqalclt46lgqri\">可能会出现两种类型的错误。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qqbyvchngjz1j8o4j1jfdxkh\">服务端可能会拒绝该请求，并返回状态码为 404 或 500 的 HTTP <em>响应</em>对象。这些是错误<em>响应</em>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ap3uptin95zeu1ribk41p32x3\">客户端也可能出现问题，比如网络错误会让请求无法成功完成，或者 RxJS 操作符也会抛出异常。这些错误的 <code>status</code> 为 <code>0</code>，并且其 <code>error</code> 属性包含一个 <code>ProgressEvent</code> 对象，此对象的 <code>type</code> 属性可以提供更详细的信息。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e09wcdccp01pehyrpgcow2gh\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 在其 <code><a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a></code> 中会捕获两种错误。可以检查这个响应是否存在错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60su70v3ctfzn7dnvxw6aoaii\">以下示例在先前定义的 ConfigService 中定义了一个错误处理程序。</p>\n<code-example header=\"app/config/config.service.ts (handleError)\" path=\"http/src/app/config/config.service.ts\" region=\"handleError\">\nprivate handleError(error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) {\n  if (error.status === 0) {\n    // A client-side or network error occurred. Handle it accordingly.\n    console.error('An error occurred:', error.error);\n  } else {\n    // The backend returned an unsuccessful response code.\n    // The response body may contain clues as to what went wrong.\n    console.error(\n      `Backend returned code ${error.status}, body was: `, error.error);\n  }\n  // Return an observable with a user-facing error message.\n  return throwError(() =&gt; new Error('Something bad happened; please try again later.'));\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fpjq6vt9pjdg2rmdy96lvmd9\">处理程序返回一个带有用户友好错误消息的 RxJS \n<code>ErrorObservable</code>。 以下代码更新了 \n<code>getConfig()</code> 方法，使用一个 \n<a href=\"guide/rx-library#operators\" title=\"RxJS Operators\">管道</a> 将 \n<code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 调用返回的所有可观察对象发送到错误处理程序。</p>\n<code-example header=\"app/config/config.service.ts (getConfig v.3 with error handler)\" path=\"http/src/app/config/config.service.ts\" region=\"getConfig_3\">\ngetConfig() {\n  return this.http.get&lt;Config&gt;(this.configUrl)\n    .pipe(\n      catchError(this.handleError)\n    );\n}\n\n</code-example>\n<p><a id=\"retry\"></a></p>\n<h2 id=\"retrying-a-failed-request\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqmvlk2iffu8isgphphrbl5cm\">重试失败的请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#retrying-a-failed-request\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"et0rutrdr5keaff63vkurc1b7\">有时候，错误只是临时性的，只要重试就可能会自动消失。比如，在移动端场景中可能会遇到网络中断的情况，只要重试一下就能拿到正确的结果。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40xa1q6ygiz8fqoj6bb9ceaso\"><a href=\"guide/rx-library\">RxJS 库</a>提供了几个<em>重试</em>操作符。比如，<code>retry()</code> 操作符会自动重新订阅一个失败的 <code>Observable</code> 几次。<em>重新订阅</em> <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法会导致它重新发出 HTTP 请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"67g8ba2areo49r9gden1o90j0\">下面的例子演示了如何在把一个失败的请求传给错误处理程序之前，先通过管道传给 <code>retry()</code> 操作符。</p>\n<code-example header=\"app/config/config.service.ts (getConfig with retry)\" path=\"http/src/app/config/config.service.ts\" region=\"getConfig\">\ngetConfig() {\n  return this.http.get&lt;Config&gt;(this.configUrl)\n    .pipe(\n      retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError) // then handle the error\n    );\n}\n\n</code-example>\n\n  <div class=\"reviewed\">最后复查时间：Tue Aug 29 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/http-request-data-from-server\n - guide/http-send-data-to-server\n - guide/understanding-communicating-with-http\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/common/http/HttpErrorResponse\n - guide/http-handle-request-errors#getting-error-details\n - guide/http-handle-request-errors#http-client---handle-request-errors\n - guide/http-handle-request-errors#retry\n - guide/http-handle-request-errors#retrying-a-failed-request\n - guide/rx-library\n - guide/rx-library#operators\n-->"}
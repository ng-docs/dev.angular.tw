{"id":"guide/http-handle-request-errors","title":"HTTP 用戶端 - 處理請求錯誤","contents":"<div class=\"content\">\n  <h1 id=\"http-client---handle-request-errors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94qrrp3oxgaiz30gswpi6lstc\">HTTP 用戶端 - 處理請求錯誤<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#http-client---handle-request-errors\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1o939qp6q7ex5oyvzscqaqph7\">如果請求在服務器上失敗了，那麼 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 就會回傳一個<em>錯誤</em>物件而不是一個成功的回應物件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8hy9tlfs8p9qt0lzzrhcearq2\">執行伺服器請求的同一個服務中也應該執行錯誤檢查、解釋和解析。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49x31r556n0z8br1dm5vtsvxx\">發生錯誤時，你可以獲得關於通知使用者失敗的詳細訊息。在某些情況下，你可能還會自動<a href=\"guide/http-handle-request-errors#retry\">重試請求</a>。</p>\n<p><a id=\"error-details\"></a></p>\n<h2 id=\"getting-error-details\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdetyz85wywdpa5mjokblbx1z\">獲取錯誤詳情<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#getting-error-details\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mte1piyt2epb1okmmy9vq3wo\">當資料訪問失敗時，應用會給使用者提供有用的反饋。原始的錯誤物件作為反饋並不是特別有用。除了檢測到錯誤已經發生之外，還需要獲取錯誤詳細訊息並使用這些細節來撰寫使用者友好的回應。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fc5ko1l3osyqalclt46lgqri\">可能會出現兩種型別的錯誤。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qqbyvchngjz1j8o4j1jfdxkh\">伺服器端可能會拒絕該請求，並回傳狀態碼為 404 或 500 的 HTTP <em>回應</em>物件。這些是錯誤<em>回應</em>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ap3uptin95zeu1ribk41p32x3\">用戶端也可能出現問題，比如網路錯誤會讓請求無法成功完成，或者 RxJS 運算子也會丟擲異常。這些錯誤的 <code>status</code> 為 <code>0</code>，並且其 <code>error</code> 屬性包含一個 <code>ProgressEvent</code> 物件，此物件的 <code>type</code> 屬性可以提供更詳細的訊息。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e09wcdccp01pehyrpgcow2gh\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 在其 <code><a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a></code> 中會捕獲兩種錯誤。可以檢查這個回應是否存在錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60su70v3ctfzn7dnvxw6aoaii\">以下範例在先前定義的 ConfigService 中定義了一個錯誤處理程式。</p>\n<code-example header=\"app/config/config.service.ts (handleError)\" path=\"http/src/app/config/config.service.ts\" region=\"handleError\">\nprivate handleError(error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) {\n  if (error.status === 0) {\n    // A client-side or network error occurred. Handle it accordingly.\n    console.error('An error occurred:', error.error);\n  } else {\n    // The backend returned an unsuccessful response code.\n    // The response body may contain clues as to what went wrong.\n    console.error(\n      `Backend returned code ${error.status}, body was: `, error.error);\n  }\n  // Return an observable with a user-facing error message.\n  return throwError(() =&gt; new Error('Something bad happened; please try again later.'));\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fpjq6vt9pjdg2rmdy96lvmd9\">處理程式回傳一個帶有使用者友好錯誤訊息的 RxJS \n<code>ErrorObservable</code>。 以下程式碼更新了 \n<code>getConfig()</code> 方法，使用一個 \n<a href=\"guide/rx-library#operators\" title=\"RxJS Operators\">通道</a> 將 \n<code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 呼叫回傳的所有可觀察物件傳送到錯誤處理程式。</p>\n<code-example header=\"app/config/config.service.ts (getConfig v.3 with error handler)\" path=\"http/src/app/config/config.service.ts\" region=\"getConfig_3\">\ngetConfig() {\n  return this.http.get&lt;Config&gt;(this.configUrl)\n    .pipe(\n      catchError(this.handleError)\n    );\n}\n\n</code-example>\n<p><a id=\"retry\"></a></p>\n<h2 id=\"retrying-a-failed-request\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqmvlk2iffu8isgphphrbl5cm\">重試失敗的請求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#retrying-a-failed-request\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"et0rutrdr5keaff63vkurc1b7\">有時候，錯誤只是臨時性的，只要重試就可能會自動消失。比如，在行動端場景中可能會遇到網路中斷的情況，只要重試一下就能拿到正確的結果。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40xa1q6ygiz8fqoj6bb9ceaso\"><a href=\"guide/rx-library\">RxJS 函式庫</a>提供了幾個<em>重試</em>運算子。比如，<code>retry()</code> 運算子會自動重新訂閱一個失敗的 <code>Observable</code> 幾次。<em>重新訂閱</em> <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法會導致它重新發出 HTTP 請求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"67g8ba2areo49r9gden1o90j0\">下面的例子示範了如何在把一個失敗的請求傳給錯誤處理程式之前，先透過通道傳給 <code>retry()</code> 運算子。</p>\n<code-example header=\"app/config/config.service.ts (getConfig with retry)\" path=\"http/src/app/config/config.service.ts\" region=\"getConfig\">\ngetConfig() {\n  return this.http.get&lt;Config&gt;(this.configUrl)\n    .pipe(\n      retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError) // then handle the error\n    );\n}\n\n</code-example>\n\n  <div class=\"reviewed\">最後複查時間：Tue Aug 29 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/http-request-data-from-server\n - guide/http-send-data-to-server\n - guide/understanding-communicating-with-http\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/common/http/HttpErrorResponse\n - guide/http-handle-request-errors#getting-error-details\n - guide/http-handle-request-errors#http-client---handle-request-errors\n - guide/http-handle-request-errors#retry\n - guide/http-handle-request-errors#retrying-a-failed-request\n - guide/rx-library\n - guide/rx-library#operators\n-->"}
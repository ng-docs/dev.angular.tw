{"id":"guide/content-projection","title":"內容投影","contents":"<div class=\"content\">\n  <h1 id=\"content-projection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"989mo7z4iqxffwo989mz2d05n\">內容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#content-projection\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"duny5kdbsspna6li3k7fgtw64\">本主題描述如何使用內容投影來建立靈活的可複用元件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a23bl0c815syprodxe0xt0ykn\">要檢視或下載本主題中使用的範例程式碼，參閱 <live-example></live-example>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zit6lzuqyh6bxd38b7gpzi82\">內容投影是一種模式，你可以在其中插入或<em>投影</em>要在另一個元件中使用的內容。比如，你可能有一個 <code>Card</code> 元件，它可以接受另一個元件提供的內容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lfzmnlxbk1m2c81zel2um9x1\">以下各節介紹了 Angular 中內容投影的常見實現，包括：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"989mo7z4iqxffwo989mz2d05n\">內容投影</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2q82db0ohnqnxlzjvg5gv7j65\"><a href=\"guide/content-projection#single-slot\">單槽內容投影</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pyp1bd4ex6uwrd9x3zl751nj\">使用這種型別的內容投影，元件從單一來源接受內容。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mzfbrjljl0zntifbch1sj5r3\"><a href=\"guide/content-projection#multi-slot\">多槽內容投影</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u4l5wnxawbge03mqy6mugs4k\">在這種情況下，元件從多個來源接受內容。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egvi6xbc7wn8lde8ppwf2sj0l\"><a href=\"guide/content-projection#conditional\">條件內容投影</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jrz96rgaxs1u19s7ncdclm65\">使用條件內容投影的元件僅在特定條件滿足時渲染內容。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"single-slot\"></a></p>\n<h2 id=\"single-slot-content-projection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lindowjcnudzg34a12y74hwu\">單插槽內容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#single-slot-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d16zzzwdoow8k6dh1nnb2bxjo\">內容投影的最基本形式是<em>單插槽內容投影</em>。單插槽內容投影是指建立一個元件，你可以在其中投影一個元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"460q8xzy2wrrfc8daqb2qcddw\">要建立使用單插槽內容投影的元件，請執行以下操作：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3ouq40r0hpcxpcwuz9yrm3uy\"><a href=\"guide/component-overview#creating-a-component\">建立一個元件</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"couwuma17mqp3ddssaul6t5cj\">在元件樣板中，新增 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，讓你希望投影的內容出現在其中。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99do85cn6mragt7t5ny01ditz\">比如，以下元件使用 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素來顯示訊息。</p>\n<code-example header=\"content-projection/src/app/zippy-basic/zippy-basic.component.ts\" path=\"content-projection/src/app/zippy-basic/zippy-basic.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-zippy-basic',\n  template: `\n    &lt;h2&gt;Single-slot content projection&lt;/h2&gt;\n    &lt;ng-content&gt;&lt;/ng-content&gt;\n  `\n})\nexport class ZippyBasicComponent {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eul2c1enuifyknh7s2bwl5v7w\">有了 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，該組件的使用者現在可以將自己的訊息投影到該組件中。比如：</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"single-slot\">\n&lt;app-zippy-basic&gt;\n  &lt;p&gt;Is content projection cool?&lt;/p&gt;\n&lt;/app-zippy-basic&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfuyfxf1o5x41gfsvj62s6og7\"><code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素是一個佔位符，它不會建立真正的 DOM 元素。<code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 的那些自定義屬性將被忽略。</p>\n</div>\n<p><a id=\"multi-slot\"></a></p>\n<h2 id=\"multi-slot-content-projection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cybgjyebya8vqphknk91ygrqz\">多插槽內容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#multi-slot-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xadmao2a8ee8cw2qsxnr4uyl\">一個元件可以具有多個插槽。每個插槽可以指定一個 CSS 選擇器，該選擇器會決定將哪些內容放入該插槽。該模式稱為<em>多插槽內容投影</em>。使用此模式，你必須指定希望投影內容出現在的位置。你可以透過使用 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 的 <code>select</code> 屬性來完成此任務。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22qayb7dshdibc9muihzgly0x\">要建立使用多插槽內容投影的元件，請執行以下操作：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3ouq40r0hpcxpcwuz9yrm3uy\"><a href=\"guide/component-overview#creating-a-component\">建立一個元件</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"couwuma17mqp3ddssaul6t5cj\">在元件樣板中，新增 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，讓你希望投影的內容出現在其中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1csc0iev4g86ik2tz2csin3og\">將 <code>select</code> 屬性新增到 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素上。Angular 使用的<a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\">選擇器</a>支援標籤名、屬性、CSS 類別和 <code>:not</code> 偽類的任意組合。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40b6nfdghu69cfob7bzio3t2f\">比如，以下元件會使用兩個 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素。</p>\n<code-example header=\"content-projection/src/app/zippy-multislot/zippy-multislot.component.ts\" path=\"content-projection/src/app/zippy-multislot/zippy-multislot.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-zippy-multislot',\n  template: `\n    &lt;h2&gt;Multi-slot content projection&lt;/h2&gt;\n\n    Default:\n    &lt;ng-content&gt;&lt;/ng-content&gt;\n\n    Question:\n    &lt;ng-content select=\"[question]\"&gt;&lt;/ng-content&gt;\n  `\n})\nexport class ZippyMultislotComponent {}\n\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8x315ietmoz6m5v7k7n6l0n\">使用 <code>question</code> 屬性的內容將投影到帶有 <code>select=[question]</code> 屬性的 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素。</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"multi-slot\">\n&lt;app-zippy-multislot&gt;\n  &lt;p question&gt;\n    Is content projection cool?\n  &lt;/p&gt;\n  &lt;p&gt;Let's learn about content projection!&lt;/p&gt;\n&lt;/app-zippy-multislot&gt;\n\n</code-example>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rcvs6jloirjksppvmufwnslm\">不帶 select 屬性的 ng-content</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jskce6efbhhmcwcfcek1xcnd\">如果你的元件包含不帶 <code>select</code> 屬性的 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，則該實例將接收所有與其他 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素都不對應的投影元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e74klc0sakc1a1do8yp2sh81x\">在前面的範例中，只有第二個 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素定義了 <code>select</code> 屬性。結果，第一個 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素就會接收投影到元件中的任何其他內容。</p>\n</div>\n<p><a id=\"conditional\"></a></p>\n<h2 id=\"conditional-content-projection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"z2tc04w4hbba6c2x9p2tkav\">有條件的內容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#conditional-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bo52zcmim35plrmp185tq8f7h\">如果你的元件需要<em>有條件地</em>渲染內容或多次渲染內容，則應設定該組件以接受一個 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素，其中包含要有條件渲染的內容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y0brt5gxy80quujyajy7b9op\">在這種情況下，不建議使用 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，因為只要元件的使用者提供了內容，即使該組件從未定義 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素或該 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素位於 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 語句的內部，該內容也總會被初始化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tnfh8ninwjyq4sstgmuy5y6m\">使用 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素，你可以讓元件根據你想要的任何條件顯式渲染內容，並可以進行多次渲染。在顯式渲染 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素之前，Angular 不會初始化該元素的內容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dqmgbiv5y9f2rtd8k5qdqoze\"><code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 進行條件內容投影的典型實現。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3ouq40r0hpcxpcwuz9yrm3uy\"><a href=\"guide/component-overview#creating-a-component\">建立一個元件</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kxp7xgjaj9f51jj9nt5q78j0\">在接受 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素的元件中，使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素渲染該樣板，比如：</p>\n<code-example header=\"content-projection/src/app/example-zippy.template.html\" path=\"content-projection/src/app/example-zippy.template.html\" region=\"ng-container\">\n&lt;ng-container [<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>]=\"content.templateRef\"&gt;&lt;/ng-container&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xt4cewsxusqt5adxza5jvsul\">本範例使用 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> 指令來渲染給定的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素，你將在後續步驟中對其進行定義。你可以將 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> 指令應用於任何型別的元素。本範例就將該指令分配給了 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素，因為該組件不需要渲染真實的 DOM 元素。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs2rv3t6xnc7j4v3m2m6b3yz6\">將 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素包裝在另一個元素（比如 <code>div</code> 元素）中，然後應用條件邏輯。</p>\n<code-example header=\"content-projection/src/app/example-zippy.template.html\" path=\"content-projection/src/app/example-zippy.template.html\" region=\"ngif\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"expanded\" [id]=\"contentId\"&gt;\n    &lt;ng-container [<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>]=\"content.templateRef\"&gt;&lt;/ng-container&gt;\n&lt;/div&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axsjbts5ffvvuwlpaw0q4liln\">在要投影內容的樣板中，將投影的內容包裝在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素中，比如：</p>\n<code-example header=\"content-projection/src/app/app.component.html\" region=\"ng-template\" path=\"content-projection/src/app/app.component.html\">\n&lt;ng-template appExampleZippyContent&gt;\n  It depends on what you do with it.\n&lt;/ng-template&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1ry6tb5kdb32icgkfckmde0c\">這個 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素定義了一個元件可以根據其自身邏輯渲染的內容區塊。元件可以使用 <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> 或 <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> 裝飾器獲得對此樣板內容的引用（即 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>）。前面的範例建立了一個自定義指令 <code>appExampleZippyContent</code> 作為 API，以將 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 標記為元件內容。藉助這個 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>，元件可以使用 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> 指令或 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 的 <code>createEmbeddedView()</code> 方法來渲染所引用的內容。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9w0iiqkz9vk1sqg8cpomt8jb\"><a href=\"guide/attribute-directives#building-an-attribute-directive\">建立一個屬性型指令</a>，它具有與這個樣板的自定義屬性相對應的選擇器。在此指令中，注入 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 實例。</p>\n<code-example header=\"content-projection/src/app/example-zippy.component.ts\" path=\"content-projection/src/app/example-zippy.component.ts\" region=\"zippycontentdirective\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appExampleZippyContent]'\n})\nexport class ZippyContentDirective {\n  constructor(public templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;unknown&gt;) {}\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ackttagktvtiwz7rvblr6hd2u\">在上一步中，你已新增了具有自定義屬性 <code>appExampleZippyContent</code> 的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素。這段程式碼提供了當 Angular 遇到該自定義屬性時要使用的邏輯。在這裡，該邏輯指示 Angular 實例化這個樣板引用。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lgucb7ppqpvt2b2huu831kf5\">在你要將內容投影到的元件中，使用 <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> 獲取此投影內容的樣板。</p>\n<code-example header=\"content-projection/src/app/example-zippy.component.ts\" path=\"content-projection/src/app/example-zippy.component.ts\" region=\"contentchild\">\n@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(ZippyContentDirective) content!: ZippyContentDirective;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xnh5y5xumcxgd9ndm9s6n4no\">在執行此步驟之前，你的應用具有一個元件，它會在滿足某些條件時實例化此樣板。你還建立了一個指令，該指令能提供對該樣板的引用。在最後一步中，<code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> 裝飾器指示 Angular 實例化指定元件中的樣板。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2w101yac2dzd6c563yl6u8ew8\">如果是多插槽內容投影，則可以使用 <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> 獲取投影元素的查詢清單（<code><a href=\"api/core/QueryList\" class=\"code-anchor\">QueryList</a></code>）。</p>\n</div>\n</li>\n</ol>\n<p><a id=\"ngprojectas \"></a></p>\n<h2 id=\"projecting-content-in-more-complex-environments\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8h3ew7tmjccla65ybnpmv388r\">在更復雜的環境中投影內容<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#projecting-content-in-more-complex-environments\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qzppvpx2lgg4k1ekcd9oqh0t\">如<a href=\"guide/content-projection#multi-slot\">多插槽內容投影</a>中所述，你通常會使用屬性、元素、CSS 類或這三者的某種組合來標識將內容投影到何處。比如，在以下 HTML 樣板中，p 標籤會使用自定義屬性 <code>question</code> 將內容投影到 <code>app-zippy-multislot</code> 元件中。</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"multi-slot\">\n&lt;app-zippy-multislot&gt;\n  &lt;p question&gt;\n    Is content projection cool?\n  &lt;/p&gt;\n  &lt;p&gt;Let's learn about content projection!&lt;/p&gt;\n&lt;/app-zippy-multislot&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3xsnnmiejflwfe34da70rcy6\">在某些情況下，你可能希望將內容投影為其他元素。比如，你要投影的內容可能是另一個元素的子元素。可以用 <code>ngProjectAs</code> 屬性來完成此操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beoqxmb5eu3a74d9irkrnt7i2\">比如，考慮以下 HTML 程式碼段落：</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"ngprojectas\">\n&lt;ng-container ngProjectAs=\"[question]\"&gt;\n  &lt;p&gt;Is content projection cool?&lt;/p&gt;\n&lt;/ng-container&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"221ayfummm4mk8670kuhfw1t4\">本範例使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 屬性來模擬將元件投影到更復雜的結構中。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8oku3ozc0x1re67qo05jh7php\">注意</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vyzkpl6imvjv3v1wykvxq8a6\"><code>ng-container</code> 元素是一個邏輯結構，可用於對其他 DOM 元素進行分組；但是，<code>ng-container</code> 本身不會在 DOM 樹中渲染。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o1dwub7nqbr72pq248s77bx4\">在這個例子中，我們要投影的內容位於另一個元素內。為了按預期方式投影此內容，此樣板使用了 <code>ngProjectAs</code> 屬性。有了 <code>ngProjectAs</code>，就可以用 <code>[question]</code> 選擇器將整個 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素投影到元件中。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/NgIf\n - api/common/NgTemplateOutlet\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/Directive\n - api/core/QueryList\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/core/ng-container\n - api/core/ng-content\n - api/core/ng-template\n - guide/attribute-directives#building-an-attribute-directive\n - guide/component-overview#creating-a-component\n - guide/content-projection#conditional\n - guide/content-projection#conditional-content-projection\n - guide/content-projection#content-projection\n - guide/content-projection#multi-slot\n - guide/content-projection#multi-slot-content-projection\n - guide/content-projection#projecting-content-in-more-complex-environments\n - guide/content-projection#single-slot\n - guide/content-projection#single-slot-content-projection\n - https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\n-->"}
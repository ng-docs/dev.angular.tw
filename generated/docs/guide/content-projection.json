{"id":"guide/content-projection","title":"内容投影","contents":"<div class=\"content\">\n  <h1 id=\"content-projection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"989mo7z4iqxffwo989mz2d05n\">内容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#content-projection\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"duny5kdbsspna6li3k7fgtw64\">本主题描述如何使用内容投影来创建灵活的可复用组件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a23bl0c815syprodxe0xt0ykn\">要查看或下载本主题中使用的范例代码，参阅 <live-example></live-example>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zit6lzuqyh6bxd38b7gpzi82\">内容投影是一种模式，你可以在其中插入或<em>投影</em>要在另一个组件中使用的内容。比如，你可能有一个 <code>Card</code> 组件，它可以接受另一个组件提供的内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lfzmnlxbk1m2c81zel2um9x1\">以下各节介绍了 Angular 中内容投影的常见实现，包括：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"989mo7z4iqxffwo989mz2d05n\">内容投影</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2q82db0ohnqnxlzjvg5gv7j65\"><a href=\"guide/content-projection#single-slot\">单槽内容投影</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pyp1bd4ex6uwrd9x3zl751nj\">使用这种类型的内容投影，组件从单一来源接受内容。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mzfbrjljl0zntifbch1sj5r3\"><a href=\"guide/content-projection#multi-slot\">多槽内容投影</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u4l5wnxawbge03mqy6mugs4k\">在这种情况下，组件从多个来源接受内容。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egvi6xbc7wn8lde8ppwf2sj0l\"><a href=\"guide/content-projection#conditional\">条件内容投影</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jrz96rgaxs1u19s7ncdclm65\">使用条件内容投影的组件仅在特定条件满足时渲染内容。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"single-slot\"></a></p>\n<h2 id=\"single-slot-content-projection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lindowjcnudzg34a12y74hwu\">单插槽内容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#single-slot-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d16zzzwdoow8k6dh1nnb2bxjo\">内容投影的最基本形式是<em>单插槽内容投影</em>。单插槽内容投影是指创建一个组件，你可以在其中投影一个组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"460q8xzy2wrrfc8daqb2qcddw\">要创建使用单插槽内容投影的组件，请执行以下操作：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3ouq40r0hpcxpcwuz9yrm3uy\"><a href=\"guide/component-overview#creating-a-component\">创建一个组件</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"couwuma17mqp3ddssaul6t5cj\">在组件模板中，添加 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，让你希望投影的内容出现在其中。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99do85cn6mragt7t5ny01ditz\">比如，以下组件使用 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素来显示消息。</p>\n<code-example header=\"content-projection/src/app/zippy-basic/zippy-basic.component.ts\" path=\"content-projection/src/app/zippy-basic/zippy-basic.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-zippy-basic',\n  template: `\n    &lt;h2&gt;Single-slot content projection&lt;/h2&gt;\n    &lt;ng-content&gt;&lt;/ng-content&gt;\n  `\n})\nexport class ZippyBasicComponent {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eul2c1enuifyknh7s2bwl5v7w\">有了 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，该组件的用户现在可以将自己的消息投影到该组件中。比如：</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"single-slot\">\n&lt;app-zippy-basic&gt;\n  &lt;p&gt;Is content projection cool?&lt;/p&gt;\n&lt;/app-zippy-basic&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfuyfxf1o5x41gfsvj62s6og7\"><code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素是一个占位符，它不会创建真正的 DOM 元素。<code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 的那些自定义属性将被忽略。</p>\n</div>\n<p><a id=\"multi-slot\"></a></p>\n<h2 id=\"multi-slot-content-projection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cybgjyebya8vqphknk91ygrqz\">多插槽内容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#multi-slot-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xadmao2a8ee8cw2qsxnr4uyl\">一个组件可以具有多个插槽。每个插槽可以指定一个 CSS 选择器，该选择器会决定将哪些内容放入该插槽。该模式称为<em>多插槽内容投影</em>。使用此模式，你必须指定希望投影内容出现在的位置。你可以通过使用 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 的 <code>select</code> 属性来完成此任务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22qayb7dshdibc9muihzgly0x\">要创建使用多插槽内容投影的组件，请执行以下操作：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3ouq40r0hpcxpcwuz9yrm3uy\"><a href=\"guide/component-overview#creating-a-component\">创建一个组件</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"couwuma17mqp3ddssaul6t5cj\">在组件模板中，添加 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，让你希望投影的内容出现在其中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1csc0iev4g86ik2tz2csin3og\">将 <code>select</code> 属性添加到 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素上。Angular 使用的<a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\">选择器</a>支持标签名、属性、CSS 类和 <code>:not</code> 伪类的任意组合。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40b6nfdghu69cfob7bzio3t2f\">比如，以下组件会使用两个 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素。</p>\n<code-example header=\"content-projection/src/app/zippy-multislot/zippy-multislot.component.ts\" path=\"content-projection/src/app/zippy-multislot/zippy-multislot.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-zippy-multislot',\n  template: `\n    &lt;h2&gt;Multi-slot content projection&lt;/h2&gt;\n\n    Default:\n    &lt;ng-content&gt;&lt;/ng-content&gt;\n\n    Question:\n    &lt;ng-content select=\"[question]\"&gt;&lt;/ng-content&gt;\n  `\n})\nexport class ZippyMultislotComponent {}\n\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8x315ietmoz6m5v7k7n6l0n\">使用 <code>question</code> 属性的内容将投影到带有 <code>select=[question]</code> 属性的 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素。</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"multi-slot\">\n&lt;app-zippy-multislot&gt;\n  &lt;p question&gt;\n    Is content projection cool?\n  &lt;/p&gt;\n  &lt;p&gt;Let's learn about content projection!&lt;/p&gt;\n&lt;/app-zippy-multislot&gt;\n\n</code-example>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rcvs6jloirjksppvmufwnslm\">不带 select 属性的 ng-content</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jskce6efbhhmcwcfcek1xcnd\">如果你的组件包含不带 <code>select</code> 属性的 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，则该实例将接收所有与其他 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素都不匹配的投影组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e74klc0sakc1a1do8yp2sh81x\">在前面的示例中，只有第二个 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素定义了 <code>select</code> 属性。结果，第一个 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素就会接收投影到组件中的任何其他内容。</p>\n</div>\n<p><a id=\"conditional\"></a></p>\n<h2 id=\"conditional-content-projection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"z2tc04w4hbba6c2x9p2tkav\">有条件的内容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#conditional-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bo52zcmim35plrmp185tq8f7h\">如果你的组件需要<em>有条件地</em>渲染内容或多次渲染内容，则应配置该组件以接受一个 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素，其中包含要有条件渲染的内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y0brt5gxy80quujyajy7b9op\">在这种情况下，不建议使用 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，因为只要组件的使用者提供了内容，即使该组件从未定义 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素或该 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素位于 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 语句的内部，该内容也总会被初始化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tnfh8ninwjyq4sstgmuy5y6m\">使用 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素，你可以让组件根据你想要的任何条件显式渲染内容，并可以进行多次渲染。在显式渲染 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素之前，Angular 不会初始化该元素的内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dqmgbiv5y9f2rtd8k5qdqoze\"><code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 进行条件内容投影的典型实现。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3ouq40r0hpcxpcwuz9yrm3uy\"><a href=\"guide/component-overview#creating-a-component\">创建一个组件</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kxp7xgjaj9f51jj9nt5q78j0\">在接受 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素的组件中，使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素渲染该模板，比如：</p>\n<code-example header=\"content-projection/src/app/example-zippy.template.html\" path=\"content-projection/src/app/example-zippy.template.html\" region=\"ng-container\">\n&lt;ng-container [<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>]=\"content.templateRef\"&gt;&lt;/ng-container&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xt4cewsxusqt5adxza5jvsul\">本示例使用 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> 指令来渲染给定的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素，你将在后续步骤中对其进行定义。你可以将 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> 指令应用于任何类型的元素。本示例就将该指令分配给了 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素，因为该组件不需要渲染真实的 DOM 元素。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs2rv3t6xnc7j4v3m2m6b3yz6\">将 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素包装在另一个元素（比如 <code>div</code> 元素）中，然后应用条件逻辑。</p>\n<code-example header=\"content-projection/src/app/example-zippy.template.html\" path=\"content-projection/src/app/example-zippy.template.html\" region=\"ngif\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"expanded\" [id]=\"contentId\"&gt;\n    &lt;ng-container [<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>]=\"content.templateRef\"&gt;&lt;/ng-container&gt;\n&lt;/div&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axsjbts5ffvvuwlpaw0q4liln\">在要投影内容的模板中，将投影的内容包装在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素中，比如：</p>\n<code-example header=\"content-projection/src/app/app.component.html\" region=\"ng-template\" path=\"content-projection/src/app/app.component.html\">\n&lt;ng-template appExampleZippyContent&gt;\n  It depends on what you do with it.\n&lt;/ng-template&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1ry6tb5kdb32icgkfckmde0c\">这个 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素定义了一个组件可以根据其自身逻辑渲染的内容块。组件可以使用 <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> 或 <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> 装饰器获得对此模板内容的引用（即 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>）。前面的示例创建了一个自定义指令 <code>appExampleZippyContent</code> 作为 API，以将 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 标记为组件内容。借助这个 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>，组件可以使用 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> 指令或 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 的 <code>createEmbeddedView()</code> 方法来渲染所引用的内容。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9w0iiqkz9vk1sqg8cpomt8jb\"><a href=\"guide/attribute-directives#building-an-attribute-directive\">创建一个属性型指令</a>，它具有与这个模板的自定义属性相匹配的选择器。在此指令中，注入 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 实例。</p>\n<code-example header=\"content-projection/src/app/example-zippy.component.ts\" path=\"content-projection/src/app/example-zippy.component.ts\" region=\"zippycontentdirective\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appExampleZippyContent]'\n})\nexport class ZippyContentDirective {\n  constructor(public templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;unknown&gt;) {}\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ackttagktvtiwz7rvblr6hd2u\">在上一步中，你已添加了具有自定义属性 <code>appExampleZippyContent</code> 的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素。这段代码提供了当 Angular 遇到该自定义属性时要使用的逻辑。在这里，该逻辑指示 Angular 实例化这个模板引用。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lgucb7ppqpvt2b2huu831kf5\">在你要将内容投影到的组件中，使用 <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> 获取此投影内容的模板。</p>\n<code-example header=\"content-projection/src/app/example-zippy.component.ts\" path=\"content-projection/src/app/example-zippy.component.ts\" region=\"contentchild\">\n@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(ZippyContentDirective) content!: ZippyContentDirective;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xnh5y5xumcxgd9ndm9s6n4no\">在执行此步骤之前，你的应用具有一个组件，它会在满足某些条件时实例化此模板。你还创建了一个指令，该指令能提供对该模板的引用。在最后一步中，<code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> 装饰器指示 Angular 实例化指定组件中的模板。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2w101yac2dzd6c563yl6u8ew8\">如果是多插槽内容投影，则可以使用 <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> 获取投影元素的查询列表（<code><a href=\"api/core/QueryList\" class=\"code-anchor\">QueryList</a></code>）。</p>\n</div>\n</li>\n</ol>\n<p><a id=\"ngprojectas \"></a></p>\n<h2 id=\"projecting-content-in-more-complex-environments\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8h3ew7tmjccla65ybnpmv388r\">在更复杂的环境中投影内容<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#projecting-content-in-more-complex-environments\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qzppvpx2lgg4k1ekcd9oqh0t\">如<a href=\"guide/content-projection#multi-slot\">多插槽内容投影</a>中所述，你通常会使用属性、元素、CSS 类或这三者的某种组合来标识将内容投影到何处。比如，在以下 HTML 模板中，p 标签会使用自定义属性 <code>question</code> 将内容投影到 <code>app-zippy-multislot</code> 组件中。</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"multi-slot\">\n&lt;app-zippy-multislot&gt;\n  &lt;p question&gt;\n    Is content projection cool?\n  &lt;/p&gt;\n  &lt;p&gt;Let's learn about content projection!&lt;/p&gt;\n&lt;/app-zippy-multislot&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3xsnnmiejflwfe34da70rcy6\">在某些情况下，你可能希望将内容投影为其他元素。比如，你要投影的内容可能是另一个元素的子元素。可以用 <code>ngProjectAs</code> 属性来完成此操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beoqxmb5eu3a74d9irkrnt7i2\">比如，考虑以下 HTML 代码段：</p>\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"ngprojectas\">\n&lt;ng-container ngProjectAs=\"[question]\"&gt;\n  &lt;p&gt;Is content projection cool?&lt;/p&gt;\n&lt;/ng-container&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"221ayfummm4mk8670kuhfw1t4\">本示例使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 属性来模拟将组件投影到更复杂的结构中。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8oku3ozc0x1re67qo05jh7php\">注意</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vyzkpl6imvjv3v1wykvxq8a6\"><code>ng-container</code> 元素是一个逻辑结构，可用于对其他 DOM 元素进行分组；但是，<code>ng-container</code> 本身不会在 DOM 树中渲染。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o1dwub7nqbr72pq248s77bx4\">在这个例子中，我们要投影的内容位于另一个元素内。为了按预期方式投影此内容，此模板使用了 <code>ngProjectAs</code> 属性。有了 <code>ngProjectAs</code>，就可以用 <code>[question]</code> 选择器将整个 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素投影到组件中。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/NgIf\n - api/common/NgTemplateOutlet\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/Directive\n - api/core/QueryList\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/core/ng-container\n - api/core/ng-content\n - api/core/ng-template\n - guide/attribute-directives#building-an-attribute-directive\n - guide/component-overview#creating-a-component\n - guide/content-projection#conditional\n - guide/content-projection#conditional-content-projection\n - guide/content-projection#content-projection\n - guide/content-projection#multi-slot\n - guide/content-projection#multi-slot-content-projection\n - guide/content-projection#projecting-content-in-more-complex-environments\n - guide/content-projection#single-slot\n - guide/content-projection#single-slot-content-projection\n - https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\n-->"}
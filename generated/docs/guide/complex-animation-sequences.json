{"id":"guide/complex-animation-sequences","title":"复杂动画序列","contents":"<div class=\"content\">\n  <h1 id=\"complex-animation-sequences\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8h9nq1h7xgyv428lndzt1rmdo\">复杂动画序列<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#complex-animation-sequences\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wtw65w7vo9ysndhyuq3y2kie\">对下列概念有基本的理解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejrwy9jlbr7n31leje9s0nwps\"><a href=\"guide/animations\">Angular 动画简介</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d2gzislo0xv4rrldotf2u8yh\"><a href=\"guide/transition-and-triggers\">过渡与触发器</a></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vf5no835n2v51cbaeultmhxp\">到目前为止，我们已经学过了单个 HTML 元素的简单动画。Angular 还允许你在进入和离开页面时播放 \"动画协调序列\"，比如当整个网格或元素列表进入或离开页面时，多个条目的动画之间需要彼此协调时间。你可以选择并行执行多个动画，或者按顺序逐个运行离散动画。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ni8fc03en2kgqcm9bx2iefhh\">用来控制复杂动画序列的函数如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dt2uvbdl3r7k4tmkiulzt8lb8\">函数</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"714wxnnqgch7206c2p29qxmz6\">查找一个或多个内部 HTML 元素。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b77cycb4t1f4z8uvk1qhs9d31\">为多个元素的动画应用级联延迟。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/animations/group\"><code>group()</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bamd5dhig4dlncjrahdifra2h\">并行运行多个动画步骤。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80bu7pu844my73fvn6xu2y5ss\">依次运行动画步骤。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"complex-sequence\"></a></p>\n<h2 id=\"the-query-function\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs1ymiunfxx4sbm87j7g6x2h2\">query() 函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#the-query-function\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"437dvekbh34thxhzp0teo1xoz\">大多数复杂动画都依赖 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 函数来查找子元素并对其应用动画，基本的例子是：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4iecnoqh39op5dvxqr6b3gip\">例子</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7x8uc92wut5jjjgd2mkjed2o\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 后跟 \n<code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rkj186haqcos5dn5e4p2dpub\">用于查询简单的 HTML 元素，并直接对它们应用动画。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8j3441edf3vuv7b7lof55vqjf\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 后跟 \n<code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7g5ch0cso6pmnm0ev41dwpi5\">用于查询子元素，这些子元素本身已应用动画元数据，并触发此类动画（否则将会被当前/父元素的动画阻止）。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oe200zuqzfubfs8olilv9kj1\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 的第一个参数是一个 <a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\">css 选择器</a>字符串，它还可以包含以下 Angular 特定的标记：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elev8izsbicr4x4j0jytnbbhp\">令牌</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"barnuidmu3zr5n0kgyqroldks\"><code>:enter</code> \n<br> \n<code>:leave</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bcwav0f8iztnp9d54h9a6yqpk\">用于进入/离开元素。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:animating</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ncy7hzc7xrcgxn3kgzbmwgpr\">用于当前正在执行动画的元素。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69fu9m7p5947ghe07ow43t4gl\"><code>@*</code> \n<br> \n<code>@triggerName</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27ox9ixhjfgaqcvg1751hf6fv\">用于具有任何—或特定—触发器的元素。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:self</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7iamzrgl2lr0o7hn3oukae5zi\">正在执行动画的元素本身。</td>\n</tr>\n</tbody>\n</table>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ds6gyfeyxlutmtruft5xx1szy\">进入和离开元素</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4g2q3g7mz2p71dhlh57xhcrvd\">并非所有子元素都会实际上被认为是进入/离开；有时，这可能是违反直觉和令人困惑的。有关更多信息，参阅 <a href=\"api/animations/query#entering-and-leaving-elements\">query api 的文档</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nyths47xrhngqk36jesey20a\">你还可以在 Querying 选项卡下的动画实时示例（在动画<a href=\"guide/animations#about-this-guide\">介绍部分介绍</a>）中看到这方面的插图。</p>\n</div>\n<h2 id=\"animate-multiple-elements-using-query-and-stagger-functions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1q29g72qdf3wzn0vzx8mb1uwt\">使用 query() 和 stagger() 函数对多个元素进行动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#animate-multiple-elements-using-query-and-stagger-functions\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cg0x0gfi7nlgppq9tt5wi5vxv\">通过 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 查询子元素后，<code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> 函数允许你定义每个查询的动画项之间的时间间隙，从而为元素之间延迟设置动画。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"314cg38q64v95bxx0lr4qkl5z\">下面的例子演示了如何使用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 和 <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> 函数对依次添加的英雄列表从上到下播放动画（有少许延迟）。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bd44xlsv7fdt4fx038srk38o\">用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 查阅正在进入或离开页面的任意元素。该查询会找出那些符合某种特定标准的元素</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pza5cxo1l8c5pzveq2upx5wv\">对每个元素，使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 为其设置初始样式。使其变得透明，并使用 <code>transform</code> 将其移出位置，以便它能滑入后就位。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv8w81owh21zmwaqcsr899gpo\">使用 <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> 来在每个动画之间延迟 30 毫秒</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"baw7hvsathps6zgso2t04mfa2\">对屏幕上的每个元素，根据一条自定义缓动曲线播放 0.5 秒的动画，同时将其淡入，而且逐步取消以前的位移效果</p>\n</li>\n</ul>\n<code-example header=\"src/app/hero-list-page.component.ts\" path=\"animations/src/app/hero-list-page.component.ts\" region=\"page-animations\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('pageAnimations', [\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter', [\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>('.hero', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({opacity: 0, transform: 'translateY(-100px)'}),\n        <a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>(30, [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('500ms cubic-bezier(0.35, 0, 0.25, 1)',\n          <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1, transform: 'none' }))\n        ])\n      ])\n    ])\n  ]),\n\n</code-example>\n<h2 id=\"parallel-animation-using-group-function\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lbz19oqu76rh9bd9auwumt6l\">使用 group() 函数进行并行动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#parallel-animation-using-group-function\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81njwco46eqin6cjpyrnxkiph\">你已经了解了如何在两个连续的动画之间添加延迟。不过你可能还想配置一些并行的动画。比如，你可能希望为同一个元素的两个 CSS 属性设置动画，但要为每个属性使用不同的 <code>easing</code> 函数。这时，你可以使用动画函数 <a href=\"api/animations/group\"><code>group()</code></a>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jd7m1vfi6xsa2tedpunizh3v\"><strong>注意</strong>：<br>\n<a href=\"api/animations/group\"><code>group()</code></a>函数用于对动画<em>步骤</em>进行分组，而不是针对动画元素。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0s0y04jcerlshrc4e3nxn2wf\">在下面的例子中，对 <code>:enter</code> 和 <code>:leave</code> 使用分组，可以配置两种不同的时序。它们会同时作用于同一个元素，但彼此独立运行。</p>\n<code-example header=\"src/app/hero-list-groups.component.ts (excerpt)\" path=\"animations/src/app/hero-list-groups.component.ts\" region=\"animationdef\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('flyInOut', [\n    state('in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      width: '*',\n      transform: 'translateX(0)', opacity: 1\n    })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ width: 10, transform: 'translateX(50px)', opacity: 0 }),\n      group([\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.3s 0.1s ease', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          transform: 'translateX(0)',\n          width: '*'\n        })),\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.3s ease', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          opacity: 1\n        }))\n      ])\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':leave', [\n      group([\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.3s ease', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          transform: 'translateX(50px)',\n          width: 10\n        })),\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.3s 0.2s ease', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          opacity: 0\n        }))\n      ])\n    ])\n  ])\n]\n\n</code-example>\n<h2 id=\"sequential-vs-parallel-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6s7ok4t8js23qmoxuvet73u6t\">顺序动画与平行动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#sequential-vs-parallel-animations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bx0rtg3qcr55mz8w7y2tovee\">复杂动画中可以同时发生很多事情。但是当你要创建一个需要让几个子动画逐个执行的动画时，该怎么办呢？以前我们使用 <a href=\"api/animations/group\"><code>group()</code></a> 来同时并行运行多个动画。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xis5fr5ip6yzuupusplybrou\">第二个名叫 <code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code> 的函数会让你一个接一个地运行这些动画。在 <code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code> 中，这些动画步骤由 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 或 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 的函数调用组成。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87k37z64rlstmi9i4dtocxwln\"><code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 用来立即应用所指定的样式数据。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ty13jabndunovlidmq1ouk8h\"><code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 用来在一定的时间间隔内应用样式数据。</li>\n</ul>\n<h2 id=\"filter-animation-example\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8z01tbzbykl6h77k28w970yrj\">过滤器动画范例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#filter-animation-example\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1uv7w65hf7yn8zmb1z9lgf3g4\">来看看范例应用中的另一个动画。在 Filter/Stagger 页，往 <strong>Search Heroes</strong> 文本框中输入一些文本，比如 <code>Magnet</code> 或 <code>tornado</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ek11inuc2njnrmy7bchvlutm\">过滤器会在你输入时实时工作。每当你键入一个新字母时，就会有一些元素离开页面，并且过滤条件也会逐渐变得更加严格。相反，当你删除过滤器中的每个字母时，英雄列表也会逐渐重新进入页面中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fubbdw74frw2s1itkcftb62u\">HTML 模板中包含一个名叫 <code>filterAnimation</code> 的触发器。</p>\n<code-example header=\"src/app/hero-list-page.component.html\" path=\"animations/src/app/hero-list-page.component.html\" region=\"filter-animations\">\n&lt;label for=\"search\"&gt;Search heroes: &lt;/label&gt;\n&lt;input type=\"text\" id=\"search\" #criteria\n       (input)=\"updateCriteria(criteria.value)\"\n       placeholder=\"Search heroes\"&gt;\n\n&lt;ul class=\"heroes\" [@filterAnimation]=\"heroesTotal\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"hero\"&gt;\n    &lt;div class=\"inner\"&gt;\n      &lt;span class=\"badge\"&gt;{{ hero.id }}&lt;/span&gt;\n      &lt;span class=\"name\"&gt;{{ hero.name }}&lt;/span&gt;\n    &lt;/div&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enhimftslp9j9f1j1jja3j1ai\">该组件装饰器中的 <code>filterAnimation</code> 包含三个过渡。</p>\n<code-example header=\"src/app/hero-list-page.component.ts\" path=\"animations/src/app/hero-list-page.component.ts\" region=\"filter-animations\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('filterAnimation', [\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter, * =&gt; 0, * =&gt; -1', []),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':increment', [\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0, width: 0 }),\n          <a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>(50, [\n            <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1, width: '*' })),\n          ]),\n        ], { optional: true })\n      ]),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':decrement', [\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>(50, [\n            <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0, width: 0 })),\n          ]),\n        ])\n      ]),\n    ]),\n  ]\n})\nexport class HeroListPageComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroesTotal = -1;\n\n  get heroes() { return this._heroes; }\n  private _heroes: Hero[] = [];\n\n  ngOnInit() {\n    this._heroes = HEROES;\n  }\n\n  updateCriteria(criteria: string) {\n    criteria = criteria ? criteria.trim() : '';\n\n    this._heroes = HEROES.filter(hero =&gt; hero.name.toLowerCase().includes(criteria.toLowerCase()));\n    const newTotal = this.heroes.length;\n\n    if (this.heroesTotal !== newTotal) {\n      this.heroesTotal = newTotal;\n    } else if (!criteria) {\n      this.heroesTotal = -1;\n    }\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4z9wl3e5mzl4552nfdka5ncs\">这个例子中的代码包含下列任务：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qhbjudyh98kkhdhnu2a20vds\">当用户首次打开或导航到此页面时，跳过所有动画（该动画会压扁已经存在的内容，因此它只会作用于那些已经存在于 DOM 中的元素）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv9mpta0xxycog6p6w1epay9o\">根据搜索框中的值过滤英雄</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jvdl990wsv45dmx6l8ixdtfn\">对于每次匹配：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5magmvz93vjlgv7erjyxtcg5\">通过将元素的不透明度和宽度设置为 0 来隐藏正在离开 DOM 的元素</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30z43w0frmqtg17xpbo5pv1g7\">对正在进入 DOM 的元素，播放一个 300 毫秒的动画。在动画期间，该元素采用其默认宽度和不透明度。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b47n9rormtihkate0cdqi0r3z\">如果有多个匹配的元素正在进入或离开 DOM，则从页面顶部的元素开始对每个元素进行交错（stagger），每个元素之间的延迟为 50 毫秒</p>\n</li>\n</ul>\n<h2 id=\"animating-the-items-of-a-reordering-list\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkf1gkkrok6uqgmvp5a624o0f\">在重新排序列表的条目时设置动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#animating-the-items-of-a-reordering-list\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"48kl4u6qrnekftgiqszfc7aow\">尽管 Angular 开箱即用的支持 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 列表项动画，但如果只是它们的顺序变化了，就无法支持。因为 Angular 会忘记哪个元素是哪个元素，从而导致这些动画被破坏。帮助 Angular 跟踪此类元素的唯一方法是将 <code><a href=\"api/core/TrackByFunction\" class=\"code-anchor\">TrackByFunction</a></code> 分配给 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 指令。这可确保 Angular 始终知道哪个元素是哪个，从而允许它始终将正确的动画应用于正确的元素。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14q4qitb4cgfe9436leoxxtm3\"><strong>重要</strong>：<br>\n如果你需要为 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 列表的条目设置动画，并且此类条目的顺序有可能在运行时更改，请始终使用 <code><a href=\"api/core/TrackByFunction\" class=\"code-anchor\">TrackByFunction</a></code>。</p>\n</div>\n<h2 id=\"animations-and-component-view-encapsulation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnolavb2l7xhdsq4yzrd1iub5\">动画和组件视图封装<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#animations-and-component-view-encapsulation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dncocwojqcrvpq7i0q0182xcx\">Angular 动画基于组件的 DOM 结构，不会直接考虑<a href=\"/guide/view-encapsulation\">视图封装</a>，这意味着使用 <code><a href=\"api/core/ViewEncapsulation#Emulated\" class=\"code-anchor\">ViewEncapsulation.Emulated</a></code> 的组件的行为方式与使用 <code><a href=\"api/core/ViewEncapsulation#None\" class=\"code-anchor\">ViewEncapsulation.None</a></code> （ <code><a href=\"api/core/ViewEncapsulation#ShadowDom\" class=\"code-anchor\">ViewEncapsulation.ShadowDom</a></code> 行为方式不同，我们将很快讨论） .</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyaeni9zyydivugm3ofekcwhb\">例如，如果要在使用模拟（emulated）视图封装的组件树的顶级组件中应用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 函数（你还会在动画指南的其余部分看到更多此类函数），则这样的查询将能够识别（并播放动画）此树的任何深度上的 DOM 元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xyqq1a5mel1f4a14ram4ygp4\">另一方面，<code><a href=\"api/core/ViewEncapsulation#ShadowDom\" class=\"code-anchor\">ViewEncapsulation.ShadowDom</a></code> 会通过在 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a> 元素中“隐藏” DOM 元素来更改组件的 DOM 结构。此类 DOM 操作就会阻碍某些动画实现的正常工作，因为它只能工作在简单的 DOM 结构上，并没有考虑 <code>ShadowRoot</code> 元素。因此，建议避免使用 ShadowDom 视图封装将动画应用到包含组件的视图。</p>\n<h2 id=\"animation-sequence-summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bny745whiscktuf4eqjir2zm9\">动画序列总结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#animation-sequence-summary\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61k6o0r1dyjwj0lakylkqn8ko\">Angular 中这些用于多元素动画的函数，都要从 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 开始，查找出内部元素，比如找出某个 <code>&lt;div&gt;</code> 中的所有图片。其余函数 <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code>、<a href=\"api/animations/group\"><code>group()</code></a> 和 <code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code> 会以级联方式或你的自定义逻辑来控制要如何应用多个动画步骤。</p>\n<h2 id=\"more-on-angular-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a26kagk7mrtsdtdkoro0iswgp\">关于 Angular 动画的更多知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oolgylns9kaynftarwog49tq\">你可能还对下列内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejrwy9jlbr7n31leje9s0nwps\"><a href=\"guide/animations\">Angular 动画简介</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d2gzislo0xv4rrldotf2u8yh\"><a href=\"guide/transition-and-triggers\">过渡与触发器</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82pieugpn2i38mksdalgha2g3\"><a href=\"guide/reusable-animations\">可复用动画</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"be5qvxhwesxxj6af0lirn21vy\"><a href=\"guide/route-animations\">路由过渡动画</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/animations\n - guide/reusable-animations\n - guide/route-animations\n - guide/transition-and-triggers\n-->\n<!-- links from this doc:\n - /guide/view-encapsulation\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/group\n - api/animations/query\n - api/animations/query#entering-and-leaving-elements\n - api/animations/sequence\n - api/animations/stagger\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/common/NgFor\n - api/common/NgForOf\n - api/core/Component\n - api/core/OnInit\n - api/core/TrackByFunction\n - api/core/ViewEncapsulation#Emulated\n - api/core/ViewEncapsulation#None\n - api/core/ViewEncapsulation#ShadowDom\n - guide/animations\n - guide/animations#about-this-guide\n - guide/complex-animation-sequences#animate-multiple-elements-using-query-and-stagger-functions\n - guide/complex-animation-sequences#animating-the-items-of-a-reordering-list\n - guide/complex-animation-sequences#animation-sequence-summary\n - guide/complex-animation-sequences#animations-and-component-view-encapsulation\n - guide/complex-animation-sequences#complex-animation-sequences\n - guide/complex-animation-sequences#filter-animation-example\n - guide/complex-animation-sequences#more-on-angular-animations\n - guide/complex-animation-sequences#parallel-animation-using-group-function\n - guide/complex-animation-sequences#prerequisites\n - guide/complex-animation-sequences#sequential-vs-parallel-animations\n - guide/complex-animation-sequences#the-query-function\n - guide/reusable-animations\n - guide/route-animations\n - guide/transition-and-triggers\n - https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\n - https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot\n-->"}
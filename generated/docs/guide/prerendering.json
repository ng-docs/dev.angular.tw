{"id":"guide/prerendering","title":"預渲染（SSG）","contents":"<div class=\"content\">\n  <h1 id=\"prerendering-ssg\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brqakocm26ebyfq2gimmewigo\">預渲染（SSG）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/prerendering#prerendering-ssg\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oyconfhpe6i5oc06408gaar3\">預渲染，通常指靜態站點生成（SSG），代表了在建立過程中將頁面渲染為靜態 HTML 檔案的方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53gpw44rwyavgckwady29vtxp\">預渲染保持了\n<a href=\"/guide/ssr/#why-use-ssr\">伺服器端渲染（SSR）</a>的同樣效能優勢。但實現了縮短的首位元組時間（TTFB），最終增強了使用者體驗。其關鍵區別在於其頁面作為靜態內容提供，沒有基於請求的渲染。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qhaw3zlz3uq25ctmarw46mu3\">當用於伺服器端渲染的資料在所有使用者中保持一致時，預渲染策略成為一個有價值的替代方案。與為每個使用者請求動態渲染頁面不同，預渲染採取主動方式提前渲染頁面。</p>\n<h2 id=\"how-to-prerender-a-page\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9mconueznqx7nmc17d3qcfya\">如何預先渲染頁面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/prerendering#how-to-prerender-a-page\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ap4wnkwouirzsn2tneboh1dq4\">要預渲染靜態頁面，請使用以下 Angular CLI 指令為應用新增 SSR 功能：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng add @angular/ssr\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bsmgff4uilatt2qa5tr731n3\">要從一開始建立具有預渲染功能的應用，請使用\n<code>ng new --ssr</code>指令。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bx5gck0gdt42wok8ml63erp8\">一旦新增了 SSR，您可以透過執行建立指令生成靜態頁面。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build\n\n</code-example>\n<h3 id=\"build-options-for-prerender\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xpkh856riqohkzffg753yy9m\">預渲染的建立選項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/prerendering#build-options-for-prerender\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2t4i6phhi5ug5be89now2sc3a\">應用建構式\n<code>prerender</code>選項可以是布林值或物件，用於更細緻的設定。 當選項為\n<code>false</code>時，不進行預渲染。當為\n<code>true</code>時，所有選項使用預設值。當為物件時，每個選項可以單獨設定。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyk2rtnidu0xcswyg7218m57s\">選項</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cwhe65hais9ueojrcln3vqi4\">預設值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>discoverRoutes</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f55zuoosdb6ts2wdr9ji51x0g\">建構式是否應處理 Angular Router 設定，以查詢所有非引數化路由並對其進行預渲染。</td>\n<td align=\"left\"><code>true</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>routesFile</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9o7kivzfpc2wf3zqx2cnpc4pg\">包含所有要預渲染的路由清單的檔案路徑，每行一個路由。如果要預渲染帶有引數化 URL 的路由，此選項會很有用。</td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n<code-example format=\"json\" language=\"json\">\n\n…\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:application\",\n      \"options\": {\n        \"prerender\": {\n          \"discoverRoutes\": false\n        },\n       },\n…\n\n</code-example>\n<h3 id=\"prerendering-parameterized-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57iibkooooeiwjg7k90qlkxw2\">引數化路由的預渲染<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/prerendering#prerendering-parameterized-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8gjlihcdpoqw5l6zllkbnwrqk\">你可以使用 \n<code>routesFile</code> 選項來預渲染引數化路由。引數化路由的範例是 \n<code>product/:id</code>，其中 \n<code>id</code> 是動態提供的。要指定這些路由，它們應該在一個文字檔案中列出，每個路由佔據一行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5l0j2c6dvipoieolxjvnjl4g1\">對於具有大量引數化路由的應用程式，考慮在執行 \n<code>ng build</code> 之前使用指令碼生成此檔案。</p>\n<code-example language=\"none\" header=\"routes.txt\">\n\n/products/1\n/products/555\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mo5xegfwk30yw7y714hdtw27\">在 \n<code>routes.txt</code> 檔案中指定路由後，使用 \n<code>routesFile</code> 選項設定建構式以預渲染產品路由。</p>\n<code-example format=\"json\" language=\"json\">\n\n…\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:application\",\n      \"options\": {\n        \"prerender\": {\n          \"routesFile\": \"routes.txt\"\n        },\n      },\n…\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5bzik988kaaocsb0qm1dzlt1g\">這將設定 \n<code>ng build</code> 在建立時預渲染 \n<code>/products/1</code> 和 \n<code>/products/555</code>。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Oct 23 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/developer-guide-overview\n-->\n<!-- links from this doc:\n - /guide/ssr/#why-use-ssr\n - cli/new\n - guide/prerendering#build-options-for-prerender\n - guide/prerendering#how-to-prerender-a-page\n - guide/prerendering#prerendering-parameterized-routes\n - guide/prerendering#prerendering-ssg\n-->"}
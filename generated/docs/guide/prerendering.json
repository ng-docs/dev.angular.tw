{"id":"guide/prerendering","title":"预渲染（SSG）","contents":"<div class=\"content\">\n  <h1 id=\"prerendering-ssg\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brqakocm26ebyfq2gimmewigo\">预渲染（SSG）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/prerendering#prerendering-ssg\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oyconfhpe6i5oc06408gaar3\">预渲染，通常指静态站点生成（SSG），代表了在构建过程中将页面渲染为静态 HTML 文件的方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53gpw44rwyavgckwady29vtxp\">预渲染保持了\n<a href=\"/guide/ssr/#why-use-ssr\">服务器端渲染（SSR）</a>的同样性能优势。但实现了缩短的首字节时间（TTFB），最终增强了用户体验。其关键区别在于其页面作为静态内容提供，没有基于请求的渲染。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qhaw3zlz3uq25ctmarw46mu3\">当用于服务器端渲染的数据在所有用户中保持一致时，预渲染策略成为一个有价值的替代方案。与为每个用户请求动态渲染页面不同，预渲染采取主动方式提前渲染页面。</p>\n<h2 id=\"how-to-prerender-a-page\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9mconueznqx7nmc17d3qcfya\">如何预先渲染页面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/prerendering#how-to-prerender-a-page\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ap4wnkwouirzsn2tneboh1dq4\">要预渲染静态页面，请使用以下 Angular CLI 命令为应用添加 SSR 功能：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng add @angular/ssr\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bsmgff4uilatt2qa5tr731n3\">要从一开始创建具有预渲染功能的应用，请使用\n<code>ng new --ssr</code>命令。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bx5gck0gdt42wok8ml63erp8\">一旦添加了 SSR，您可以通过运行构建命令生成静态页面。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build\n\n</code-example>\n<h3 id=\"build-options-for-prerender\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xpkh856riqohkzffg753yy9m\">预渲染的构建选项<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/prerendering#build-options-for-prerender\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2t4i6phhi5ug5be89now2sc3a\">应用构建器\n<code>prerender</code>选项可以是布尔值或对象，用于更细致的配置。 当选项为\n<code>false</code>时，不进行预渲染。当为\n<code>true</code>时，所有选项使用默认值。当为对象时，每个选项可以单独配置。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyk2rtnidu0xcswyg7218m57s\">选项</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cwhe65hais9ueojrcln3vqi4\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>discoverRoutes</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f55zuoosdb6ts2wdr9ji51x0g\">构建器是否应处理 Angular Router 配置，以查找所有非参数化路由并对其进行预渲染。</td>\n<td align=\"left\"><code>true</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>routesFile</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9o7kivzfpc2wf3zqx2cnpc4pg\">包含所有要预渲染的路由列表的文件路径，每行一个路由。如果要预渲染带有参数化 URL 的路由，此选项会很有用。</td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n<code-example format=\"json\" language=\"json\">\n\n…\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:application\",\n      \"options\": {\n        \"prerender\": {\n          \"discoverRoutes\": false\n        },\n       },\n…\n\n</code-example>\n<h3 id=\"prerendering-parameterized-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57iibkooooeiwjg7k90qlkxw2\">参数化路由的预渲染<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/prerendering#prerendering-parameterized-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8gjlihcdpoqw5l6zllkbnwrqk\">你可以使用 \n<code>routesFile</code> 选项来预渲染参数化路由。参数化路由的示例是 \n<code>product/:id</code>，其中 \n<code>id</code> 是动态提供的。要指定这些路由，它们应该在一个文本文件中列出，每个路由占据一行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5l0j2c6dvipoieolxjvnjl4g1\">对于具有大量参数化路由的应用程序，考虑在运行 \n<code>ng build</code> 之前使用脚本生成此文件。</p>\n<code-example language=\"none\" header=\"routes.txt\">\n\n/products/1\n/products/555\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mo5xegfwk30yw7y714hdtw27\">在 \n<code>routes.txt</code> 文件中指定路由后，使用 \n<code>routesFile</code> 选项配置构建器以预渲染产品路由。</p>\n<code-example format=\"json\" language=\"json\">\n\n…\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:application\",\n      \"options\": {\n        \"prerender\": {\n          \"routesFile\": \"routes.txt\"\n        },\n      },\n…\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5bzik988kaaocsb0qm1dzlt1g\">这将配置 \n<code>ng build</code> 在构建时预渲染 \n<code>/products/1</code> 和 \n<code>/products/555</code>。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Oct 23 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/developer-guide-overview\n-->\n<!-- links from this doc:\n - /guide/ssr/#why-use-ssr\n - cli/new\n - guide/prerendering#build-options-for-prerender\n - guide/prerendering#how-to-prerender-a-page\n - guide/prerendering#prerendering-parameterized-routes\n - guide/prerendering#prerendering-ssg\n-->"}
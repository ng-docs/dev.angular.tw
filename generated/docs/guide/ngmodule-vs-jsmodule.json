{"id":"guide/ngmodule-vs-jsmodule","title":"JavaScript 模組 vs. NgModule","contents":"<div class=\"content\">\n  <h1 id=\"javascript-modules-vs-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtpvnwvcwpt7wa4pewbe1izht\">JavaScript 模組 vs. NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#javascript-modules-vs-ngmodules\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"660ktojsqh8c6ocsrnr37xsnh\">JavaScript 模組和 NgModule 都可以幫你模組化你的程式碼，但它們卻有著本質性的不同。Angular 應用同時依賴這兩種模組。</p>\n<h2 id=\"javascript-modules-files-containing-code\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qtdqg22yzhfqqun14hdog2q4\">JavaScript 模組：包含程式碼的檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#javascript-modules-files-containing-code\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1s801nliqf6o099wozr21c1xq\"><a href=\"https://javascript.info/modules\" title=\"JavaScript.Info - 模組\">JavaScript 模組</a>是一個帶有 JavaScript 程式碼的單獨檔案，它通常包含一個應用中特定用途的類別或函式庫。JavaScript 模組讓你可以跨多個檔案進行工作。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3sezeifl75l62frq6ys2pdjez\">要了解更多關於 JavaScript 模組的訊息，參閱<a href=\"https://hacks.mozilla.org/2015/08/es6-in-depth-modules\">深入 ES6：模組</a>。關於模組規範的更多訊息，請參閱<a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-modules\">ECMAScript 標準第 6 版</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qt3xhulyiuue4g2zgmsoqups\">要讓 JavaScript 模組中的程式碼可用於其它模組，請在模組中相關程式碼的末尾使用 <code>export</code> 匯出它，比如：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class AppComponent { … }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30qwm2f743b7jx1r075hc0mn5\">如果你在另一個模組中需要來自本模組的程式碼時，請使用 <code>import</code> 語句，如下所示：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { AppComponent } from './app.component';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bzeewtj2ug87j1skjyvstqo3\">每個模組都有自己的頂級作用域。換句話說，模組中的頂級變數和函式在其他指令碼或模組中是看不到的。每個模組都為其中的識別符號提供了一個命名空間，以防止它們與其它模組中的識別符號衝突。要想使用多個模組，你可以透過建立一個全域命名空間併為它新增子模組來防止出現意外的全域變數。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azs0kndkzcwq9ch56jy21eim2\">Angular 框架本身就是作為一組 JavaScript 模組載入的。</p>\n<h2 id=\"ngmodules-classes-with-metadata-for-compiling\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70pnto02uo3in84fahcp8q4st\">NgModule：帶有供編譯用的元資料的類別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#ngmodules-classes-with-metadata-for-compiling\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lyh3gjvxoz4dqp0ymp23zuzh\"><a href=\"guide/glossary#ngmodule\" title=\"NgModule 的定義\">NgModule</a> 是帶有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器標記的類別，它帶有一個描述該應用裡這個特定部分要如何與其他部分配合使用的元資料物件。NgModule 是 Angular 特有的。雖然帶有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器的類別一般也儲存在單獨的檔案中，但它們與 JavaScript 模組的不同，因為它們包含這種元資料。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"128lglbtfndmlub34wohu5g5t\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料在指導 Angular 編譯過程中發揮了重要作用，它把你編寫的應用程式碼轉換成高效的 JavaScript 程式碼。元資料描述瞭如何編譯元件範本以及如何在執行時<a href=\"guide/glossary#injector\" title=\"注入器的定義\">建立注入器</a>。它標出了 NgModule 的<a href=\"guide/glossary#component\" title=\"元件的定義\">元件</a>、<a href=\"guide/glossary#directive\" title=\"指令的定義\">指令</a>和<a href=\"guide/glossary#pipe\" title=\"管子的定義）\">通道</a>，並且透過 <code>exports</code> 屬性把它們中的一部分標為公開的，以便外部元件可以使用它們。你還可以使用 NgModule 為<a href=\"guide/glossary#service\" title=\"服務的定義\">服務</a><a href=\"guide/glossary#provider\" title=\"提供者的定義\">新增服務提供者</a>，以便這些服務可以用在你應用的其他地方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"933nd6fxfxg911vtovi1nhvis\">不要把所有類別都作為 JavaScript 模組定義在一個巨型檔案中，而應該在 <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> 清單中宣告哪些元件、指令和通道屬於這個 NgModule。這些類別叫做<a href=\"guide/glossary#declarable\" title=\"可宣告的定義\">可宣告物件</a>。NgModule 只能匯出它自己擁有的可宣告物件類別或從其他 NgModule 中匯入的類別。它不會宣告或匯出任何其他型別的類別。對 Angular 編譯過程來說，可宣告物件是唯一值得關注的類別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpsbfg2o74udtkn1cufh8wlg3\">關於模組元資料屬性的完整描述，請參閱<a href=\"guide/ngmodule-api\" title=\"使用 NgModule 元資料\">使用模組元資料</a>。</p>\n<h2 id=\"an-example-that-uses-both\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8z8ai48jfa61cxwju0r2acldk\">同時使用兩者的例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#an-example-that-uses-both\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72i5em0wlxnq8tf26q9q0lpwn\"><a href=\"cli\">Angular CLI</a>為新應用專案生成的根模組 <code>AppModule</code> 示範了如何使用這兩種模組：</p>\n<code-example header=\"src/app/app.module.ts (default AppModule)\" path=\"ngmodules/src/app/app.module.1.ts\">\n// imports\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n// @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> decorator with its metadata\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [AppComponent],\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bt5tz4296lxgiinirqpdr2ifq\">根模組根據 <code>import</code> 語句開頭匯入 JavaScript 模組。然後使用下列陣列 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code></p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64rwx8906okxvh6xmedjbts2q\"><code>declarations</code>：屬於該 NgModule 的元件、指令和通道。新應用專案的根模組中只有一個叫做 <code>AppComponent</code> 的元件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qlcv0ge4z71ky5h13zwog46c\"><code>imports</code>：你要用的其他 NgModule，這樣你才可以使用它們的可宣告物件。新生成的根模組會匯入<a href=\"api/platform-browser/BrowserModule\" title=\"BrowserModule NgModule\"><code>BrowserModule</code></a>，以便使用特定於瀏覽器的服務，比如 <a href=\"https://www.w3.org/TR/DOM-Level-2-Core/introduction.html\" title=\"文件物件模型的定義\">DOM</a> 渲染、無害化處理和定位。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aokg298vyhml3zutd668fdrak\"><code>providers</code>：一些服務提供者，可供其他 NgModule 中的元件使用。新生成的根模組中沒有提供者。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a17l6n1vvj9f0ixsn2lsqjt6\"><code>bootstrap</code>：由 Angular 建立並插入到宿主頁面 <code>index.html</code> 中的元件，以便引導該應用。這個元件 <code>AppComponent</code> 會同時出現在 <code>declarations</code> 和 <code>bootstrap</code> 陣列中。</p>\n</li>\n</ul>\n<h2 id=\"next-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4pkljueu68ifjoi5994e9l8o\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyr8g2n6mle9kg1g7j3nhzqau\">關於 Angular 模組的更多訊息，請參閱<a href=\"guide/ngmodules\" title=\"使用 Angular 模組整理你的應用\">使用模組組織你的應用</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wn4ag9vuyrlkmixkgsi2qu4f\">要了解關於根模組的更多訊息，請參閱<a href=\"guide/bootstrapping\" title=\"用 NgModule 根啟動一款應用\">使用根模組啟動應用</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69l80r7b7wikbt4fbathkgaf3\">要了解最常使用的那些 Angular 模組，以及如何將它們匯入你的應用，請參閱<a href=\"guide/frequent-ngmodules\" title=\"經常使用的模組\">常用模組</a>。</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/bootstrapping\n - guide/frequent-ngmodules\n - guide/ngmodule-faq\n-->\n<!-- links from this doc:\n - api/core/NgModule\n - api/core/NgModule#declarations\n - api/platform-browser/BrowserModule\n - cli\n - guide/bootstrapping\n - guide/frequent-ngmodules\n - guide/glossary#component\n - guide/glossary#declarable\n - guide/glossary#directive\n - guide/glossary#injector\n - guide/glossary#ngmodule\n - guide/glossary#pipe\n - guide/glossary#provider\n - guide/glossary#service\n - guide/ngmodule-api\n - guide/ngmodule-vs-jsmodule#an-example-that-uses-both\n - guide/ngmodule-vs-jsmodule#javascript-modules-files-containing-code\n - guide/ngmodule-vs-jsmodule#javascript-modules-vs-ngmodules\n - guide/ngmodule-vs-jsmodule#next-steps\n - guide/ngmodule-vs-jsmodule#ngmodules-classes-with-metadata-for-compiling\n - guide/ngmodules\n - https://hacks.mozilla.org/2015/08/es6-in-depth-modules\n - https://javascript.info/modules\n - https://www.ecma-international.org/ecma-262/6.0/#sec-modules\n - https://www.w3.org/TR/DOM-Level-2-Core/introduction.html\n-->"}
{"id":"guide/ngmodule-vs-jsmodule","title":"JavaScript 模块 vs. NgModule","contents":"<div class=\"content\">\n  <h1 id=\"javascript-modules-vs-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtpvnwvcwpt7wa4pewbe1izht\">JavaScript 模块 vs. NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#javascript-modules-vs-ngmodules\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"660ktojsqh8c6ocsrnr37xsnh\">JavaScript 模块和 NgModule 都可以帮你模块化你的代码，但它们却有着本质性的不同。Angular 应用同时依赖这两种模块。</p>\n<h2 id=\"javascript-modules-files-containing-code\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qtdqg22yzhfqqun14hdog2q4\">JavaScript 模块：包含代码的文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#javascript-modules-files-containing-code\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1s801nliqf6o099wozr21c1xq\"><a href=\"https://javascript.info/modules\" title=\"JavaScript.Info - 模块\">JavaScript 模块</a>是一个带有 JavaScript 代码的单独文件，它通常包含一个应用中特定用途的类或函数库。JavaScript 模块让你可以跨多个文件进行工作。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3sezeifl75l62frq6ys2pdjez\">要了解更多关于 JavaScript 模块的信息，参阅<a href=\"https://hacks.mozilla.org/2015/08/es6-in-depth-modules\">深入 ES6：模块</a>。关于模块规范的更多信息，请参阅<a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-modules\">ECMAScript 标准第 6 版</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qt3xhulyiuue4g2zgmsoqups\">要让 JavaScript 模块中的代码可用于其它模块，请在模块中相关代码的末尾使用 <code>export</code> 导出它，比如：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class AppComponent { … }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30qwm2f743b7jx1r075hc0mn5\">如果你在另一个模块中需要来自本模块的代码时，请使用 <code>import</code> 语句，如下所示：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { AppComponent } from './app.component';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bzeewtj2ug87j1skjyvstqo3\">每个模块都有自己的顶级作用域。换句话说，模块中的顶级变量和函数在其他脚本或模块中是看不到的。每个模块都为其中的标识符提供了一个命名空间，以防止它们与其它模块中的标识符冲突。要想使用多个模块，你可以通过创建一个全局命名空间并为它添加子模块来防止出现意外的全局变量。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azs0kndkzcwq9ch56jy21eim2\">Angular 框架本身就是作为一组 JavaScript 模块加载的。</p>\n<h2 id=\"ngmodules-classes-with-metadata-for-compiling\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70pnto02uo3in84fahcp8q4st\">NgModule：带有供编译用的元数据的类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#ngmodules-classes-with-metadata-for-compiling\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lyh3gjvxoz4dqp0ymp23zuzh\"><a href=\"guide/glossary#ngmodule\" title=\"NgModule 的定义\">NgModule</a> 是带有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器标记的类，它带有一个描述该应用里这个特定部分要如何与其他部分配合使用的元数据对象。NgModule 是 Angular 特有的。虽然带有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器的类一般也保存在单独的文件中，但它们与 JavaScript 模块的不同，因为它们包含这种元数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"128lglbtfndmlub34wohu5g5t\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据在指导 Angular 编译过程中发挥了重要作用，它把你编写的应用代码转换成高效的 JavaScript 代码。元数据描述了如何编译组件模板以及如何在运行时<a href=\"guide/glossary#injector\" title=\"注入器的定义\">创建注入器</a>。它标出了 NgModule 的<a href=\"guide/glossary#component\" title=\"组件的定义\">组件</a>、<a href=\"guide/glossary#directive\" title=\"指令的定义\">指令</a>和<a href=\"guide/glossary#pipe\" title=\"管子的定义）\">管道</a>，并且通过 <code>exports</code> 属性把它们中的一部分标为公开的，以便外部组件可以使用它们。你还可以使用 NgModule 为<a href=\"guide/glossary#service\" title=\"服务的定义\">服务</a><a href=\"guide/glossary#provider\" title=\"提供者的定义\">添加服务提供者</a>，以便这些服务可以用在你应用的其他地方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"933nd6fxfxg911vtovi1nhvis\">不要把所有类都作为 JavaScript 模块定义在一个巨型文件中，而应该在 <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> 列表中声明哪些组件、指令和管道属于这个 NgModule。这些类叫做<a href=\"guide/glossary#declarable\" title=\"可声明的定义\">可声明对象</a>。NgModule 只能导出它自己拥有的可声明对象类或从其他 NgModule 中导入的类。它不会声明或导出任何其他类型的类。对 Angular 编译过程来说，可声明对象是唯一值得关注的类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpsbfg2o74udtkn1cufh8wlg3\">关于模块元数据属性的完整描述，请参阅<a href=\"guide/ngmodule-api\" title=\"使用 NgModule 元数据\">使用模块元数据</a>。</p>\n<h2 id=\"an-example-that-uses-both\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8z8ai48jfa61cxwju0r2acldk\">同时使用两者的例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#an-example-that-uses-both\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72i5em0wlxnq8tf26q9q0lpwn\"><a href=\"cli\">Angular CLI</a>为新应用项目生成的根模块 <code>AppModule</code> 演示了如何使用这两种模块：</p>\n<code-example header=\"src/app/app.module.ts (default AppModule)\" path=\"ngmodules/src/app/app.module.1.ts\">\n// imports\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n// @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> decorator with its metadata\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [AppComponent],\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bt5tz4296lxgiinirqpdr2ifq\">根模块根据 <code>import</code> 语句开头导入 JavaScript 模块。然后使用下列数组 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code></p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64rwx8906okxvh6xmedjbts2q\"><code>declarations</code>：属于该 NgModule 的组件、指令和管道。新应用项目的根模块中只有一个叫做 <code>AppComponent</code> 的组件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qlcv0ge4z71ky5h13zwog46c\"><code>imports</code>：你要用的其他 NgModule，这样你才可以使用它们的可声明对象。新生成的根模块会导入<a href=\"api/platform-browser/BrowserModule\" title=\"BrowserModule NgModule\"><code>BrowserModule</code></a>，以便使用特定于浏览器的服务，比如 <a href=\"https://www.w3.org/TR/DOM-Level-2-Core/introduction.html\" title=\"文档对象模型的定义\">DOM</a> 渲染、无害化处理和定位。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aokg298vyhml3zutd668fdrak\"><code>providers</code>：一些服务提供者，可供其他 NgModule 中的组件使用。新生成的根模块中没有提供者。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a17l6n1vvj9f0ixsn2lsqjt6\"><code>bootstrap</code>：由 Angular 创建并插入到宿主页面 <code>index.html</code> 中的组件，以便引导该应用。这个组件 <code>AppComponent</code> 会同时出现在 <code>declarations</code> 和 <code>bootstrap</code> 数组中。</p>\n</li>\n</ul>\n<h2 id=\"next-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4pkljueu68ifjoi5994e9l8o\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyr8g2n6mle9kg1g7j3nhzqau\">关于 Angular 模块的更多信息，请参阅<a href=\"guide/ngmodules\" title=\"使用 Angular 模块整理你的应用\">使用模块组织你的应用</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wn4ag9vuyrlkmixkgsi2qu4f\">要了解关于根模块的更多信息，请参阅<a href=\"guide/bootstrapping\" title=\"用 NgModule 根启动一款应用\">使用根模块启动应用</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69l80r7b7wikbt4fbathkgaf3\">要了解最常使用的那些 Angular 模块，以及如何将它们导入你的应用，请参阅<a href=\"guide/frequent-ngmodules\" title=\"经常使用的模块\">常用模块</a>。</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/bootstrapping\n - guide/frequent-ngmodules\n - guide/ngmodule-faq\n-->\n<!-- links from this doc:\n - api/core/NgModule\n - api/core/NgModule#declarations\n - api/platform-browser/BrowserModule\n - cli\n - guide/bootstrapping\n - guide/frequent-ngmodules\n - guide/glossary#component\n - guide/glossary#declarable\n - guide/glossary#directive\n - guide/glossary#injector\n - guide/glossary#ngmodule\n - guide/glossary#pipe\n - guide/glossary#provider\n - guide/glossary#service\n - guide/ngmodule-api\n - guide/ngmodule-vs-jsmodule#an-example-that-uses-both\n - guide/ngmodule-vs-jsmodule#javascript-modules-files-containing-code\n - guide/ngmodule-vs-jsmodule#javascript-modules-vs-ngmodules\n - guide/ngmodule-vs-jsmodule#next-steps\n - guide/ngmodule-vs-jsmodule#ngmodules-classes-with-metadata-for-compiling\n - guide/ngmodules\n - https://hacks.mozilla.org/2015/08/es6-in-depth-modules\n - https://javascript.info/modules\n - https://www.ecma-international.org/ecma-262/6.0/#sec-modules\n - https://www.w3.org/TR/DOM-Level-2-Core/introduction.html\n-->"}
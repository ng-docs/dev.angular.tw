{"id":"guide/bootstrapping","title":"启动过程","contents":"<div class=\"content\">\n  <h1 id=\"launching-your-app-with-a-root-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bhecunqj13rlqofhj2oynsyw\">启动过程<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#launching-your-app-with-a-root-module\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xq8keqzpcinu80uje7xu3rbf\">对下列知识有基本的了解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9emttq2arqyn96h22914hrq3k\"><a href=\"guide/ngmodule-vs-jsmodule\">JavaScript 模块与 NgModules</a>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gkhs148jh907n315l71fe2lv\"><code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 用于描述应用的各个部分如何组织在一起。每个应用有至少一个 Angular 模块，<em>根</em>模块就是你用来启动此应用的模块。按照惯例，它通常命名为 <code>AppModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7opag50w43de57jl99xvm60ci\">当你使用 <a href=\"cli\">Angular CLI</a> 命令 <code>ng new</code> 生成一个应用时，其默认的 <code>AppModule</code> 是这样的：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n/* JavaScript imports */\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n/* the AppModule class with the @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> decorator */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhyo9jztytv64jfqbrsgkrbeq\">在 <code>import</code> 语句之后，是一个带有 <strong><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code></strong> <a href=\"guide/glossary#decorator\" title=\"&quot;Decorator&quot; explained\">装饰器</a>的类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69n1bu36ebc6tshwn7r4qvp15\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器表明 <code>AppModule</code> 是一个 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 类。<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 获取一个元数据对象，它会告诉 Angular 如何编译和启动本应用。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jjfl3im8qh4n2vfe8bm0wyv7\">元数据对象</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">declarations</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9oemi9j8emf6nz5niiep394s6\">此应用的唯一组件。</td>\n</tr>\n<tr>\n<td align=\"left\">imports</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8i0unxotw8llho98l2atjkfwv\">导入 \n<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 以获取特定于浏览器的服务，如 DOM 渲染、消毒和位置。</td>\n</tr>\n<tr>\n<td align=\"left\">providers</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6mpiqdx0o6zmzra2qluw5j9q\">服务提供者。</td>\n</tr>\n<tr>\n<td align=\"left\">bootstrap</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sp9lnn0yg7ddogsz3ev9ldgt\">Angular 创建并插入到 \n<code>index.html</code> 主机网页中的 \n<em>根</em> 组件。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dyrwe1mjjuo7p023vecvc2tl\">Angular CLI 创建的默认应用只有一个组件 <code>AppComponent</code>，所以它会同时出现在 <code>declarations</code> 和 <code>bootstrap</code> 数组中。</p>\n<p><a id=\"declarations\"></a></p>\n<h2 id=\"the-declarations-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw3bqt30ptntvnhw1ftlh0k1l\"><code>declarations</code> 数组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-declarations-array\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8l3epl4r8j46rcy1o8vigdxpk\">该模块的 <code>declarations</code> 数组告诉 Angular 哪些组件属于该模块。当你创建更多组件时，也要把它们添加到 <code>declarations</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eh8r6mwn7dhvqy5liuw5kqxi8\">每个组件都应该（且只能）声明（declare）在一个 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 类中。如果你使用了未声明过的组件，Angular 就会报错。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e5alj0jwicz0cygdqmgwslqa\"><code>declarations</code> 数组只接受可声明对象。可声明对象包括组件、\n<a href=\"guide/attribute-directives\">指令</a> 和 \n<a href=\"guide/pipes-overview\">管道</a>。 模块的所有可声明对象必须在 \n<code>declarations</code> 数组中。 声明对象必须属于一个模块。如果尝试在多个模块中声明相同类，则编译器会报错。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59ndlvpfon8j6htlacxfyn3sv\">这些可声明的类在当前模块中是可见的，但是对其它模块中的组件是不可见的 —— 除非把它们从当前模块导出，并让对方模块导入本模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csw0xqx5ijyl4bwo9vs457epe\">下面是哪些类可以添加到 <code>declarations</code> 数组中的例子：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\ndeclarations: [\n  YourComponent,\n  YourPipe,\n  YourDirective\n],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cb1d7qpfjz52gg6pbjp0pcmnw\">每个可声明对象都只能属于一个模块，所以只能把它声明在一个 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 中。当你需要在其它模块中使用它时，就要在那里导入包含这个可声明对象的模块。</p>\n<h3 id=\"using-directives-with-ngmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7i4y5yjioo4u2bbq49bhepyr3\">通过 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 使用指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#using-directives-with-ngmodule\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f4q7nevr7v4uud9vpt345eki\">使用 <code>declarations</code> 数组声明指令。在模块中使用指令、组件或管道的步骤如下：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9n0ewwepb872xhwxbxrwoe5fe\">从你编写它的文件中导出它。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"890umz36owqtusliwth5dl2u1\">把它导入到适当的模块中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqrj6jkff6s24oev7js4bo21u\">在 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>declarations</code> 数组中声明它。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qqves76ygmcjes66x8vd3lke\">这三步的结果如下所示。在你创建指令的文件中导出它。下面的例子中，<code>item.directive.ts</code> 中的 <code>ItemDirective</code> 是 CLI 自动生成的默认指令结构。</p>\n<code-example header=\"src/app/item.directive.ts\" path=\"bootstrapping/src/app/item.directive.ts\" region=\"directive\">\n\n\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appItem]'\n})\nexport class ItemDirective {\n// code goes here\n  constructor() { }\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bof1yjz051w45wy9023ourdl3\">重点在于你要先在这里导出它才能在别处导入它。接下来，使用 JavaScript 的 <code>import</code> 语句把它导入到 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 中（这里是 <code>app.module.ts</code>）。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"bootstrapping/src/app/app.module.ts\" region=\"directive-import\">\nimport { ItemDirective } from './item.directive';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70n1qunhszqucw6wtrap2g5l5\">同样在这个文件中，把它添加到 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>declarations</code> 数组中：</p>\n<code-example header=\"src/app/app.module.ts\" path=\"bootstrapping/src/app/app.module.ts\" region=\"declarations\">\ndeclarations: [\n  AppComponent,\n  ItemDirective\n],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1sfjrbm8dy8amqeqadurojas8\">现在，你可以在组件中使用你的 \n<code>ItemDirective</code>。 此示例使用 \n<code>AppModule</code>，但对于特性模块，你可以以相同方式进行。 有关指令的更多信息，请参见 \n<a href=\"guide/attribute-directives\">属性型指令</a> 和 \n<a href=\"guide/structural-directives\">结构型指令</a>。 你也可以用相同的技术处理 \n<a href=\"guide/pipes-overview\">管道</a> 和组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6mm6qmcur6w06vjyzl6st7ya\">记住：组件、指令和管道都只能属于一个模块。你在应用中也只需要声明它们一次，因为你还可以通过导入必要的模块来使用它们。这能节省你的时间，并且帮助你的应用保持精简。</p>\n<p><a id=\"imports\"></a></p>\n<h2 id=\"the-imports-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bi6b3mmlsz6ksv2xyjagejgi2\"><code>imports</code> 数组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-imports-array\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8t8a513hliwjnvwbxz6foodu\">模块的 <code>imports</code> 数组只会出现在 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据对象中。它告诉 Angular 该模块想要正常工作，还需要哪些模块。</p>\n<code-example header=\"src/app/app.module.ts (excerpt)\" path=\"bootstrapping/src/app/app.module.ts\" region=\"imports\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n  <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>\n],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88zo8kryg5nw8hxdnw5l3mdr3\">列表中的模块导出了本模块中的各个组件模板中所引用的各个组件、指令或管道。在这个例子中，当前组件是 <code>AppComponent</code>，它引用了导出自 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>、<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 或 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 的组件、指令或管道。总之，组件的模板中可以引用在当前模块中声明的或从其它模块中导入的组件、指令、管道。</p>\n<p><a id=\"bootstrap-array\"></a></p>\n<h2 id=\"the-providers-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40cz07amhewuja5cvaroai04k\"><code>providers</code> 数组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-providers-array\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eft5y67j7r4sb3on4b8wmh4i3\"><code>providers</code> 数组中列出了该应用所需的服务。当直接把服务列在这里时，它们是全应用范围的。当你使用特性模块和惰性加载时，它们是范围化的。要了解更多，参阅<a href=\"guide/providers\">服务提供者</a>。</p>\n<h2 id=\"the-bootstrap-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3xc1opqzima0ua6pv7ddm4wf\"><code>bootstrap</code> 数组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-bootstrap-array\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2c5ogysuo8iiwpbuskhzpgfut\">应用是通过引导根模块 <code>AppModule</code> 来启动的，根模块还引用了 <code>entryComponent</code>。此外，引导过程还会创建 <code>bootstrap</code> 数组中列出的组件，并把它们逐个插入到浏览器的 DOM 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b3f20fge21m2q7y6vx3wpiuu\">每个被引导的组件都是它自己的组件树的根。插入一个被引导的组件通常触发一系列组件的创建并形成组件树。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xgqo6cbjie1eaqseokm6nz4i\">虽然也可以在宿主页面中放多个组件，但是大多数应用只有一个组件树，并且只从一个根组件开始引导。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6yf9dc09u6nmitr2yn5w9ghoe\">这个根组件通常叫做 <code>AppComponent</code>，并且位于根模块的 <code>bootstrap</code> 数组中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hp3rv9lf1ftsan1wy6k8s31k\">如果你要基于某个 API 的响应来启动此组件，或者要在一个不与其组件选择器相匹配的 DOM 节点上装载 <code>AppComponent</code>，请参见 <code><a href=\"api/core/ApplicationRef#bootstrap\" class=\"code-anchor\">ApplicationRef.bootstrap()</a></code> 的文档。</p>\n<h2 id=\"more-about-angular-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yrlh3gck8640ceyk45u61sjw\">关于 Angular 模块的更多知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#more-about-angular-modules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzg7802dzxmtymnheprwpehkg\">要进一步了解常见的 NgModules 知识，参阅 <a href=\"guide/frequent-ngmodules\">关于模块的常见问题</a>。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Aug 14 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/DoBootstrap\n - errors/NG0403\n - guide/example-apps-list\n - guide/frequent-ngmodules\n - guide/glossary\n - guide/module-types\n - guide/ngmodule-faq\n - guide/ngmodule-vs-jsmodule\n - guide/ngmodules\n - guide/upgrade-setup\n-->\n<!-- links from this doc:\n - api/common/http/HttpClientModule\n - api/core/ApplicationRef#bootstrap\n - api/core/Directive\n - api/core/NgModule\n - api/forms/FormsModule\n - api/platform-browser/BrowserModule\n - cli\n - guide/attribute-directives\n - guide/bootstrapping#launching-your-app-with-a-root-module\n - guide/bootstrapping#more-about-angular-modules\n - guide/bootstrapping#prerequisites\n - guide/bootstrapping#the-bootstrap-array\n - guide/bootstrapping#the-declarations-array\n - guide/bootstrapping#the-imports-array\n - guide/bootstrapping#the-providers-array\n - guide/bootstrapping#using-directives-with-ngmodule\n - guide/frequent-ngmodules\n - guide/glossary#decorator\n - guide/ngmodule-vs-jsmodule\n - guide/pipes-overview\n - guide/providers\n - guide/structural-directives\n-->"}
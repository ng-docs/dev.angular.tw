{"id":"guide/bootstrapping","title":"啟動過程","contents":"<div class=\"content\">\n  <h1 id=\"launching-your-app-with-a-root-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bhecunqj13rlqofhj2oynsyw\">啟動過程<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#launching-your-app-with-a-root-module\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xq8keqzpcinu80uje7xu3rbf\">對下列知識有基本的瞭解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9emttq2arqyn96h22914hrq3k\"><a href=\"guide/ngmodule-vs-jsmodule\">JavaScript 模組與 NgModules</a>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gkhs148jh907n315l71fe2lv\"><code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 用於描述應用的各個部分如何組織在一起。每個應用有至少一個 Angular 模組，<em>根</em>模組就是你用來啟動此應用的模組。按照慣例，它通常命名為 <code>AppModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7opag50w43de57jl99xvm60ci\">當你使用 <a href=\"cli\">Angular CLI</a> 指令 <code>ng new</code> 生成一個應用時，其預設的 <code>AppModule</code> 是這樣的：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n/* JavaScript imports */\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n/* the AppModule class with the @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> decorator */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhyo9jztytv64jfqbrsgkrbeq\">在 <code>import</code> 語句之後，是一個帶有 <strong><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code></strong> <a href=\"guide/glossary#decorator\" title=\"&quot;Decorator&quot; explained\">裝飾器</a>的類別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69n1bu36ebc6tshwn7r4qvp15\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器表明 <code>AppModule</code> 是一個 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 類別。<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 獲取一個元資料物件，它會告訴 Angular 如何編譯和啟動本應用。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jjfl3im8qh4n2vfe8bm0wyv7\">元資料物件</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">declarations</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9oemi9j8emf6nz5niiep394s6\">此應用的唯一元件。</td>\n</tr>\n<tr>\n<td align=\"left\">imports</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8i0unxotw8llho98l2atjkfwv\">匯入 \n<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 以獲取特定於瀏覽器的服務，如 DOM 渲染、消毒和位置。</td>\n</tr>\n<tr>\n<td align=\"left\">providers</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6mpiqdx0o6zmzra2qluw5j9q\">服務提供者。</td>\n</tr>\n<tr>\n<td align=\"left\">bootstrap</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sp9lnn0yg7ddogsz3ev9ldgt\">Angular 建立並插入到 \n<code>index.html</code> 主機網頁中的 \n<em>根</em> 元件。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dyrwe1mjjuo7p023vecvc2tl\">Angular CLI 建立的預設應用只有一個元件 <code>AppComponent</code>，所以它會同時出現在 <code>declarations</code> 和 <code>bootstrap</code> 陣列中。</p>\n<p><a id=\"declarations\"></a></p>\n<h2 id=\"the-declarations-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw3bqt30ptntvnhw1ftlh0k1l\"><code>declarations</code> 陣列<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-declarations-array\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8l3epl4r8j46rcy1o8vigdxpk\">該模組的 <code>declarations</code> 陣列告訴 Angular 哪些元件屬於該模組。當你建立更多元件時，也要把它們新增到 <code>declarations</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eh8r6mwn7dhvqy5liuw5kqxi8\">每個元件都應該（且只能）宣告（declare）在一個 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 類別中。如果你使用了未宣告過的元件，Angular 就會報錯。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e5alj0jwicz0cygdqmgwslqa\"><code>declarations</code> 陣列只接受可宣告物件。可宣告物件包括元件、\n<a href=\"guide/attribute-directives\">指令</a> 和 \n<a href=\"guide/pipes-overview\">通道</a>。 模組的所有可宣告物件必須在 \n<code>declarations</code> 陣列中。 宣告物件必須屬於一個模組。如果嘗試在多個模組中宣告相同類別，則編譯器會報錯。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59ndlvpfon8j6htlacxfyn3sv\">這些可宣告的類別在當前模組中是可見的，但是對其它模組中的元件是不可見的 —— 除非把它們從當前模組匯出，並讓對方模組匯入本模組。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csw0xqx5ijyl4bwo9vs457epe\">下面是哪些類別可以新增到 <code>declarations</code> 陣列中的例子：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\ndeclarations: [\n  YourComponent,\n  YourPipe,\n  YourDirective\n],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cb1d7qpfjz52gg6pbjp0pcmnw\">每個可宣告物件都只能屬於一個模組，所以只能把它宣告在一個 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 中。當你需要在其它模組中使用它時，就要在那裡匯入包含這個可宣告物件的模組。</p>\n<h3 id=\"using-directives-with-ngmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7i4y5yjioo4u2bbq49bhepyr3\">透過 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 使用指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#using-directives-with-ngmodule\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f4q7nevr7v4uud9vpt345eki\">使用 <code>declarations</code> 陣列宣告指令。在模組中使用指令、元件或通道的步驟如下：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9n0ewwepb872xhwxbxrwoe5fe\">從你編寫它的檔案中匯出它。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"890umz36owqtusliwth5dl2u1\">把它匯入到適當的模組中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqrj6jkff6s24oev7js4bo21u\">在 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>declarations</code> 陣列中宣告它。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qqves76ygmcjes66x8vd3lke\">這三步的結果如下所示。在你建立指令的檔案中匯出它。下面的例子中，<code>item.directive.ts</code> 中的 <code>ItemDirective</code> 是 CLI 自動生成的預設指令結構。</p>\n<code-example header=\"src/app/item.directive.ts\" path=\"bootstrapping/src/app/item.directive.ts\" region=\"directive\">\n\n\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appItem]'\n})\nexport class ItemDirective {\n// code goes here\n  constructor() { }\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bof1yjz051w45wy9023ourdl3\">重點在於你要先在這裡匯出它才能在別處匯入它。接下來，使用 JavaScript 的 <code>import</code> 語句把它匯入到 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 中（這裡是 <code>app.module.ts</code>）。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"bootstrapping/src/app/app.module.ts\" region=\"directive-import\">\nimport { ItemDirective } from './item.directive';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70n1qunhszqucw6wtrap2g5l5\">同樣在這個檔案中，把它新增到 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>declarations</code> 陣列中：</p>\n<code-example header=\"src/app/app.module.ts\" path=\"bootstrapping/src/app/app.module.ts\" region=\"declarations\">\ndeclarations: [\n  AppComponent,\n  ItemDirective\n],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1sfjrbm8dy8amqeqadurojas8\">現在，你可以在元件中使用你的 \n<code>ItemDirective</code>。 此範例使用 \n<code>AppModule</code>，但對於屬性模組，你可以以相同方式進行。 有關指令的更多訊息，請參見 \n<a href=\"guide/attribute-directives\">屬性型指令</a> 和 \n<a href=\"guide/structural-directives\">結構型指令</a>。 你也可以用相同的技術處理 \n<a href=\"guide/pipes-overview\">通道</a> 和元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6mm6qmcur6w06vjyzl6st7ya\">記住：元件、指令和通道都只能屬於一個模組。你在應用中也只需要宣告它們一次，因為你還可以透過匯入必要的模組來使用它們。這能節省你的時間，並且幫助你的應用保持精簡。</p>\n<p><a id=\"imports\"></a></p>\n<h2 id=\"the-imports-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bi6b3mmlsz6ksv2xyjagejgi2\"><code>imports</code> 陣列<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-imports-array\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8t8a513hliwjnvwbxz6foodu\">模組的 <code>imports</code> 陣列只會出現在 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料物件中。它告訴 Angular 該模組想要正常工作，還需要哪些模組。</p>\n<code-example header=\"src/app/app.module.ts (excerpt)\" path=\"bootstrapping/src/app/app.module.ts\" region=\"imports\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n  <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>\n],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88zo8kryg5nw8hxdnw5l3mdr3\">清單中的模組匯出了本模組中的各個元件範本中所引用的各個元件、指令或通道。在這個例子中，當前元件是 <code>AppComponent</code>，它引用了匯出自 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>、<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 或 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 的元件、指令或通道。總之，元件的範本中可以引用在當前模組中宣告的或從其它模組中匯入的元件、指令、通道。</p>\n<p><a id=\"bootstrap-array\"></a></p>\n<h2 id=\"the-providers-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40cz07amhewuja5cvaroai04k\"><code>providers</code> 陣列<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-providers-array\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eft5y67j7r4sb3on4b8wmh4i3\"><code>providers</code> 陣列中列出了該應用所需的服務。當直接把服務列在這裡時，它們是全應用範圍的。當你使用屬性模組和延遲載入時，它們是範圍化的。要了解更多，參閱<a href=\"guide/providers\">服務提供者</a>。</p>\n<h2 id=\"the-bootstrap-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3xc1opqzima0ua6pv7ddm4wf\"><code>bootstrap</code> 陣列<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-bootstrap-array\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2c5ogysuo8iiwpbuskhzpgfut\">應用是透過引導根模組 <code>AppModule</code> 來啟動的，根模組還引用了 <code>entryComponent</code>。此外，引導過程還會建立 <code>bootstrap</code> 陣列中列出的元件，並把它們逐個插入到瀏覽器的 DOM 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b3f20fge21m2q7y6vx3wpiuu\">每個被引導的元件都是它自己的元件樹的根。插入一個被引導的元件通常觸發一系列元件的建立並形成元件樹。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xgqo6cbjie1eaqseokm6nz4i\">雖然也可以在宿主頁面中放多個元件，但是大多數應用只有一個元件樹，並且只從一個根元件開始引導。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6yf9dc09u6nmitr2yn5w9ghoe\">這個根元件通常叫做 <code>AppComponent</code>，並且位於根模組的 <code>bootstrap</code> 陣列中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hp3rv9lf1ftsan1wy6k8s31k\">如果你要基於某個 API 的回應來啟動此元件，或者要在一個不與其元件選擇器相對應的 DOM 節點上裝載 <code>AppComponent</code>，請參見 <code><a href=\"api/core/ApplicationRef#bootstrap\" class=\"code-anchor\">ApplicationRef.bootstrap()</a></code> 的文件。</p>\n<h2 id=\"more-about-angular-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yrlh3gck8640ceyk45u61sjw\">關於 Angular 模組的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#more-about-angular-modules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzg7802dzxmtymnheprwpehkg\">要進一步瞭解常見的 NgModules 知識，參閱 <a href=\"guide/frequent-ngmodules\">關於模組的常見問題</a>。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Aug 14 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/DoBootstrap\n - errors/NG0403\n - guide/example-apps-list\n - guide/frequent-ngmodules\n - guide/glossary\n - guide/module-types\n - guide/ngmodule-faq\n - guide/ngmodule-vs-jsmodule\n - guide/ngmodules\n - guide/upgrade-setup\n-->\n<!-- links from this doc:\n - api/common/http/HttpClientModule\n - api/core/ApplicationRef#bootstrap\n - api/core/Directive\n - api/core/NgModule\n - api/forms/FormsModule\n - api/platform-browser/BrowserModule\n - cli\n - guide/attribute-directives\n - guide/bootstrapping#launching-your-app-with-a-root-module\n - guide/bootstrapping#more-about-angular-modules\n - guide/bootstrapping#prerequisites\n - guide/bootstrapping#the-bootstrap-array\n - guide/bootstrapping#the-declarations-array\n - guide/bootstrapping#the-imports-array\n - guide/bootstrapping#the-providers-array\n - guide/bootstrapping#using-directives-with-ngmodule\n - guide/frequent-ngmodules\n - guide/glossary#decorator\n - guide/ngmodule-vs-jsmodule\n - guide/pipes-overview\n - guide/providers\n - guide/structural-directives\n-->"}
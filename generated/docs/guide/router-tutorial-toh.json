{"id":"guide/router-tutorial-toh","title":"路由器教學課程：英雄之旅","contents":"<div class=\"content\">\n  <p><a id=\"router-tutorial\"></a></p>\n<h1 id=\"router-tutorial-tour-of-heroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y004yoqr0hb1r1xav0fbhcbb\">路由器教學課程：英雄之旅<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#router-tutorial-tour-of-heroes\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32iwws9tlzvuyul8vobgqemx\">本教學課程提供了關於 Angular 路由器的概要性概述。在本教學課程中，你將基於基本的路由器設定來探索諸如子路由、路由引數、延遲載入 NgModule、路由守衛和預載入資料等功能，以改善使用者體驗。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5p3ihef9qpleioy85r1lq8uca\">有關該應用最終版本的有效範例，請參閱<live-example name=\"router\"></live-example>。</p>\n<p><a id=\"router-tutorial-objectives\"></a></p>\n<h2 id=\"objectives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbta8klpv23x9gfh4twoy80po\">目標<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#objectives\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czak4gb43gwzphp8un8uk6poc\">本指南描述了一個多頁路由範例應用程式的開發過程。在此過程中，它重點介紹了路由器的關鍵屬性，比如：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c62jp9yjk0gxcctcw48fg6vpz\">將應用程式功能組織到模組中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63n00ttin79pz95fgljramt0e\">導向到元件（從 <em>Heroes</em> 連結導向到『英雄清單』）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jo1x3gb59ksks03d5ij7zoqh\">包括一個路由引數（在路由到『英雄詳細訊息』時傳入英雄的 <code>id</code>）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8v8aawiawcqfdp6f9859v4m24\">子路由（<em>危機中心</em>屬性區有自己的路由）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kns6gwx4ra50tby7nvxu0sm9\"><code>canActivate</code> 守衛（檢查路由訪問）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6d98vqdz0x9o8dk8rbvgbc4dw\"><code>canActivateChild</code> 守衛（檢查子路由訪問）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4atdvw47xr4h79ghlcfpw45jy\"><code>canDeactivate</code> 守衛（在放棄未儲存的更改之前請求許可）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d48os9mz5zng82zjx7ch7865\"><code>resolve</code> 守衛（預先獲取路由資料）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8g2r9psz8o6szz6r3n86sv9dc\">延遲載入 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vhhct20glfqtcxcvr1wsqaa6\"><code>canMatch</code> 守衛（在載入功能模組的檔案之前檢查）</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xr8b4albbs13t52zzgzycnv9\">本指南按照里程碑的順序進行，就像你逐步建立應用程式一樣，但這裡假定你已經熟悉 <a href=\"guide/architecture\">Angular 的</a>基本概念。關於 Angular 的一般性介紹，請參見<a href=\"start\">《入門指南》</a>。關於更深入的概述，請參見<a href=\"tutorial/tour-of-heroes\">《英雄之旅》</a>教學課程。</p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zh2yuyafmn2qaumsdhhvo8n9\">要完成本教學課程，你應該對以下概念有基本的瞭解：</p>\n<ul>\n<li>JavaScript</li>\n<li>HTML</li>\n<li>CSS</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vtg2wry451tucy201uexb3e4\"><a href=\"cli\">Angular CLI</a></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2md4wpdlbgon5ims4on6pkjw8\">你可能會發現<a href=\"tutorial/tour-of-heroes\">《英雄之旅》教學課程</a>很有用，但這不是必需的。</p>\n<h2 id=\"the-sample-application-in-action\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dntnmo2mg724spi2o0f05aqqi\">範例應用實戰<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#the-sample-application-in-action\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xlx70bxttnaf515c4m8m2ruc\">本教學課程的範例應用會幫助『英雄僱傭管理局』找到需要各位英雄去解決的危機。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqwrowfwlz6hszuje6zb5os79\">本應用有三個主要的屬性區：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dblrh1tzherpdlemtatw03nkf\"><em>危機中心</em>，用於維護要指派給英雄的危機清單。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2txvglo1m6kpkrppr9bjumjqy\"><em>英雄</em>屬性區，用於維護管理局僱傭的英雄清單。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7fqvwa9maiyyyhmb1p0beybc\"><em>管理</em>屬性區會管理危機和英雄的清單。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53ev4d064uiuzxjdtaegkb5bf\">點選<live-example name=\"router\" title=\"英雄職介中心的現場演練\">到線上例子的連結</live-example>試用一下。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5yg5igqeacofil4ko798kvkh\">該應用會渲染出一排導向按鈕和和一個<em>英雄清單</em>檢視。</p>\n<div class=\"lightbox\">\n<img alt=\"Example application with a row of navigation buttons and a list of heroes\" src=\"generated/images/guide/router/hero-list.gif\" width=\"400\" height=\"512\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71jgka10ty59oh1hi4vlzso9w\">選擇其中之一，該應用就會把你帶到此英雄的編輯頁面。</p>\n<div class=\"lightbox\">\n<img alt=\"Detail view of hero with additional information, input, and back button\" src=\"generated/images/guide/router/hero-detail.png\" width=\"400\" height=\"278\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"da0gxhj6tr9xq1ullydft8zxl\">修改完名字，再點選『後退』按鈕，應用又回到了英雄清單頁，其中顯示的英雄名已經變了。注意，對名字的修改會立即生效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pq6yyxuqv0x2oeue0g6fxsd8\">另外你也可以點選瀏覽器本身的後退按鈕（而不是應用中的 『Back』 按鈕），這也同樣會回到英雄清單頁。在 Angular 應用中導向也會和標準的 Web 導向一樣更新瀏覽器中的歷史。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uzi2tlekg8pu9o8xkwefenyg\">現在，點選<em>危機中心</em>連結，前往<em>危機</em>清單頁。</p>\n<div class=\"lightbox\">\n<img alt=\"Crisis Center list of crises\" src=\"generated/images/guide/router/crisis-center-list.gif\" width=\"391\" height=\"240\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ncb1i3w495jvmff2x34ds7y1\">選擇其中之一，該應用就會把你帶到此危機的編輯頁面。<em>危機詳情</em>是當前頁的子元件，就在清單的緊下方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fpzgherfzdmi6wsr0fkqrtw7\">修改危機的名稱。注意，危機清單中的相應名稱<strong>並沒有</strong>修改。</p>\n<div class=\"lightbox\">\n<img alt=\"Crisis Center detail of a crisis with data, an input, and save and cancel buttons.\" src=\"generated/images/guide/router/crisis-center-detail.gif\" width=\"388\" height=\"378\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4q8c5ljrrhca1psd8ivqnzkxq\">這和<em>英雄詳情</em>頁略有不同。<em>英雄詳情</em>會立即儲存你所做的更改。而<em>危機詳情</em>頁中，你的更改都是臨時的 —— 除非按『儲存』按鈕儲存它們，或者按『取消』按鈕放棄它們。這兩個按鈕都會導向回<em>危機中心</em>，顯示危機清單。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9r9lx5pjuwvj74e3gy2fpqhuf\">單擊瀏覽器後退按鈕或 『Heroes』 連結，可以啟用一個對話框。</p>\n<div class=\"lightbox\">\n<img alt=\"Alert that asks user to confirm discarding changes\" src=\"generated/images/guide/router/confirm-dialog.png\" width=\"250\" height=\"101\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpcnkjv30719367e4unqcat3\">你可以回答『確定』以放棄這些更改，或者回答『取消』來繼續編輯。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30qd6kw6zismtji34qyv3iqia\">這種行為的幕後是路由器的 <code>canDeactivate</code> 守衛。該守衛讓你有機會進行清理工作或在離開當前檢視之前請求使用者的許可。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p2fndfmyjse5ol598p3fph6y\"><code>Admin</code> 和 <code>Login</code> 按鈕用於示範路由器的其它能力，本章稍後的部分會講解它們。</p>\n<p><a id=\"getting-started\"></a></p>\n<h2 id=\"milestone-1-getting-started\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xrz21htex6memf6exi292ijd\">里程碑 1：起步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-1-getting-started\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gxi010jy2f6ktgki6q98w6cs\">開始本應用的一個簡版，它在兩個空路由之間導向。</p>\n<div class=\"lightbox\">\n<img alt=\"Animated image of application with a Crisis Center button and a Heroes button. The pointer clicks each button to show a view for each.\" src=\"generated/images/guide/router/router-1-anim.gif\" width=\"320\" height=\"128\">\n</div>\n<p><a id=\"import\"></a></p>\n<h3 id=\"create-a-sample-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bruw2t9iar7oam6yjy176ohbg\">建立一個範例應用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#create-a-sample-application\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6uvj3allpl538a7kohb47y5tw\">建立一個新的 Angular 專案 <em>angular-router-tour-of-heroes</em>。</p>\n<code-example format=\"shell\" language=\"shell\">\n ng new angular-router-tour-of-heroes\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7m5p0hhhbfq912888dgv9mdml\">當系統提示 <code>Would you like to add Angular routing?</code> 時，選擇 <code>N</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekg7ire5wfr2pk4k3xpx6sjtb\">當系統提示 <code>Which stylesheet format would you like to use?</code> 時，選擇 <code>CSS</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tg1q16nhuqmlomecrslvr0z5\">片刻之後，一個新專案 <code>angular-router-tour-of-heroes</code> 已準備就緒。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qnj3mqq2bopui81ylv8mlfjs\">從你的終端，導向到 <code>angular-router-tour-of-heroes</code> 目錄。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rbtxxyj4wr4fzmzpoxa2s75e\">執行 <code>ng serve</code> 來驗證新應用是否正常執行。</p>\n<code-example language=\"sh\">\n ng serve\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ckjv92jxuamm59dj19n89bpp\">開啟瀏覽器訪問 <code>http://localhost:4200</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7i916zteru1jev0f4ovpbso61\">你會發現本應用正執行在瀏覽器中。</p>\n</li>\n</ol>\n<h3 id=\"define-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gkgtzf93wc47qu8822utz857\">定義路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#define-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11whawdllfcr1r2sff9v53uq8\">路由器必須用『路由定義』的清單進行設定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ay7nnfszanw558ulwgg3nqtzl\">每個定義都被翻譯成了一個<a href=\"api/router/Route\">Route</a>物件。該物件有一個 <code>path</code> 欄位，表示該路由中的 URL 路徑部分，和一個 <code>component</code> 欄位，表示與該路由相關聯的元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9k6kke2tr0ai9ilzwgrh03qkc\">當瀏覽器的 URL 變化時或在程式碼中告訴路由器導向到一個路徑時，路由器就會翻出它用來儲存這些路由定義的登錄檔。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6g78cnnmxmp6vtj4b8i08zdz\">第一個路由執行以下操作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4g0myyg00gydovpalh988vuf4\">當瀏覽器地址欄的 URL 變化時，如果它對應上了路徑部分 <code>/crisis-center</code>，路由器就會啟用一個 <code>CrisisListComponent</code> 的實例，並顯示它的檢視。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5ozf5afeonwhbjn2narwthxn\">當應用程式請求導向到路徑 <code>/crisis-center</code> 時，路由器啟用一個 <code>CrisisListComponent</code> 的實例，顯示它的檢視，並將該路徑更新到瀏覽器地址欄和歷史。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qr54eszlhnkn05pt4ckattrf\">第一個設定定義了由兩個路由構成的陣列，它們用最短路徑指向了 <code>CrisisListComponent</code> 和 <code>HeroListComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfgghgr7nlrd5xe2mvvllts9p\">生成 <code>CrisisList</code> 和 <code>HeroList</code> 元件，以便路由器能夠渲染它們。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component crisis-list\n\n</code-example>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-list\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqd6f9odo14zyjadofpdnco\">把每個元件的內容都替換成下列範例 HTML。</p>\n<code-tabs>\n    <code-pane header=\"src/app/crisis-list/crisis-list.component.html\" path=\"router/src/app/crisis-list/crisis-list.component.1.html\">\n&lt;h2&gt;CRISIS CENTER&lt;/h2&gt;\n&lt;p&gt;Get your crisis here&lt;/p&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/hero-list/hero-list.component.html\" path=\"router/src/app/hero-list/hero-list.component.1.html\" region=\"template\">\n&lt;h2&gt;HEROES&lt;/h2&gt;\n&lt;p&gt;Get your heroes here&lt;/p&gt;\n\n\n</code-pane>\n</code-tabs>\n<h3 id=\"register-router-and-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xp6zi7ns7emunwg3sq5zefla\">註冊 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 和 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#register-router-and-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70bjw53a62kifl1bha2d9f4ff\">為了使用 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>，你必須註冊來自 <code>@angular/router</code> 套件中的 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>。定義一個路由陣列 <code>appRoutes</code>，並把它傳給 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法。<code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法會回傳一個模組，其中包含設定好的 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服務提供者，以及路由函式庫所需的其它提供者。一旦啟動了應用，<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 就會根據當前的瀏覽器 URL 進行首次導向。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d52ho0jxyw3sbe0j6za69zru0\"><strong>注意</strong>：<br>\n<code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法是用於註冊全應用級提供者的編碼模式。要詳細瞭解全應用級提供者，參見<a href=\"guide/singleton-services#forRoot-router\">單例服務</a> 一章。</p>\n</div>\n<code-example header=\"src/app/app.module.ts (first-config)\" path=\"router/src/app/app.module.1.ts\" region=\"first-config\">\nimport {<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>} from '@angular/core';\nimport {<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>} from '@angular/forms';\nimport {<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>} from '@angular/platform-browser';\nimport {<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>} from '@angular/router';\n\nimport {AppComponent} from './app.component';\nimport {CrisisListComponent} from './crisis-list/crisis-list.component';\nimport {HeroListComponent} from './hero-list/hero-list.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {path: 'crisis-center', component: CrisisListComponent},\n  {path: 'heroes', component: HeroListComponent},\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    RouterModule.forRoot(\n        appRoutes, {enableTracing: true}  // &lt;-- debugging purposes only\n        )\n  ],\n  declarations: [\n    AppComponent, HeroListComponent, CrisisListComponent,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vt3e6yppmdt5mwd8oat55t7d\">對於最小化的路由設定，把設定好的 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 新增到 <code>AppModule</code> 中就足夠了。但是，隨著應用的成長，你將需要<a href=\"guide/router-tutorial-toh#refactor-the-routing-configuration-into-a-routing-module\">將路由設定重構</a>到單獨的檔案中，並建立<a href=\"guide/router-tutorial-toh#routing-module\">路由模組</a>，路由模組是一種特殊的、專做路由的<strong>服務模組</strong>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87phumiwlfstpwaycxsa8kixu\">把 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 註冊到 <code>AppModule</code> 的 <code>imports</code> 陣列中，能讓該 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服務在應用的任何地方都能使用。</p>\n<p><a id=\"shell\"></a></p>\n<h3 id=\"add-the-router-outlet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nczog9x6m9v64dx1lc8imio3\">新增路由出口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#add-the-router-outlet\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2s9q8hmzya85j3ln5jjbeshv\">根元件 <code>AppComponent</code> 是本應用的殼。它在頂部有一個標題、一個帶兩個連結的導向條，在底部有一個<em>路由器出口</em>，路由器會在它所指定的位置上渲染各個元件。</p>\n<div class=\"lightbox\">\n<img alt=\"A nav, made of two navigation buttons, with the first button active and its associated view displayed\" src=\"generated/images/guide/router/shell-and-outlet.gif\" width=\"581\" height=\"161\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9folzeo0msltz9jeyg6mc3xmq\">路由出口扮演一個佔位符的角色，表示路由元件將會渲染到哪裡。</p>\n<p><a id=\"shell-template\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clrttf083t1d9qrrcl2h30154\">該組件所對應的範本是這樣的：</p>\n<code-example header=\"src/app/app.component.html\" path=\"router/src/app/app.component.1.html\">\n&lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n</code-example>\n<p><a id=\"wildcard\"></a></p>\n<h3 id=\"define-a-wildcard-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anjv6r9hvx2y2b0xpaz870tdr\">定義萬用字元路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#define-a-wildcard-route\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ufwapir2gxdstuugef84o8qz\">你以前在應用中建立過兩個路由，一個是 <code>/crisis-center</code>，另一個是 <code>/heroes</code>。所有其它 URL 都會導致路由器丟擲錯誤，並讓應用崩潰。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96vhxg6skni5oil45ut3jl4yw\">可以新增一個萬用字元路由來攔截所有無效的 URL，並優雅的處理它們。\n萬用字元路由的 <code>path</code> 是兩個星號（<code>**</code>），它會對應任何 URL。\n而當路由器對應不上以前定義的那些路由時，它就會選擇這個萬用字元路由。\n萬用字元路由可以導向到自定義的『404 Not Found』元件，也可以<a href=\"guide/router-tutorial-toh#redirect\">重導向</a>到一個現有路由。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a81md1g1i6vnbwy2wm61rnlf0\">路由器會使用<a href=\"guide/router-reference#example-config\">先到先得</a>的策略來選擇路由。由於萬用字元路由是最不具體的那個，因此務必確保它是路由設定中的<em>最後一個</em>路由。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5mx6xmxicui3qberd0j23hak\">要測試本屬性，請往 <code>HeroListComponent</code> 的範本中新增一個帶 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 的按鈕，並且把它的連結設定為一個不存在的路由 <code>\"/sidekicks\"</code>。</p>\n<code-example header=\"src/app/hero-list/hero-list.component.html (excerpt)\" path=\"router/src/app/hero-list/hero-list.component.1.html\">\n&lt;h2&gt;HEROES&lt;/h2&gt;\n&lt;p&gt;Get your heroes here&lt;/p&gt;\n\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\"&gt;Go to sidekicks&lt;/button&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qtornf97th1uaa93vkutrw9p\">當用戶點選該按鈕時，應用就會失敗，因為你尚未定義過 <code>\"/sidekicks\"</code> 路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ei6zczjo8pm2o1fdtr1zn01qi\">不要新增 <code>\"/sidekicks\"</code> 路由，而是定義一個『萬用字元』路由，讓它導向到 <code>PageNotFoundComponent</code> 元件。</p>\n<code-example header=\"src/app/app.module.ts (wildcard)\" path=\"router/src/app/app.module.1.ts\" region=\"wildcard\">\n  {path: '**', component: PageNotFoundComponent}  // #enddocregion wildcard\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    RouterModule.forRoot(\n        appRoutes, {enableTracing: true}  // &lt;-- debugging purposes only\n        )\n  ],\n  declarations: [\n    AppComponent, HeroListComponent, CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"359zfjnnbpdk2olrhtgjnvmbz\">建立 <code>PageNotFoundComponent</code>，以便在使用者訪問無效網址時顯示它。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component page-not-found\n\n</code-example>\n<code-example header=\"src/app/page-not-found.component.html (404 component)\" path=\"router/src/app/page-not-found/page-not-found.component.html\">\n&lt;h2&gt;Page not found&lt;/h2&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qbh7negy2sn829p8amr9jrez\">現在，當用戶訪問 <code>/sidekicks</code> 或任何無效的 URL 時，瀏覽器就會顯示『Page not found』。瀏覽器的地址欄仍指向無效的 URL。</p>\n<p><a id=\"redirect\"></a></p>\n<h3 id=\"set-up-redirects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oekkb75qtvw0cphmmiohfyfw\">設定跳轉<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#set-up-redirects\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ax4mtr1u135nnsaw4zuqzyvr5\">應用啟動時，瀏覽器地址欄中的初始 URL 預設是這樣的：</p>\n<code-example format=\"http\" language=\"http\">\n\nlocalhost:4200\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"apzgsphcbif7y87u5sy7krtgt\">它不能對應上任何硬編碼進來的路由，於是就會走到萬用字元路由中去，並且顯示 <code>PageNotFoundComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2exx41wvrcl3fh3e5azzjgxv\">這個應用需要一個有效的預設路由，在這裡應該用英雄清單作為預設頁。當用戶點選\"Heroes\"連結或把 <code>localhost:4200/heroes</code> 貼上到地址欄時，它應該導向到清單頁。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ul3wi5pidpiu3yxc4e2hd2s9\">新增一個 <code>redirect</code> 路由，把最初的相對 URL（<code>''</code>）轉換成所需的預設路徑（<code>/heroes</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28631o2arj4rhpnauwcjk5xvd\">在萬用字元路由<em>上方</em>新增一個預設路由。在下方的程式碼片段中，它出現在萬用字元路由的緊上方，展示了這個里程碑的完整 <code>appRoutes</code>。</p>\n<code-example header=\"src/app/app-routing.module.ts (appRoutes)\" path=\"router/src/app/app-routing.module.1.ts\" region=\"appRoutes\">\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes',        component: HeroListComponent },\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37iwtpdy31v24aap5k6p1n75q\">瀏覽器的地址欄會顯示 <code>.../heroes</code>，好像你直接在那裡導向一樣。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0ys98zfifp4c43dk0yzs6npf\">重導向路由需要一個 <code>pathMatch</code> 屬性，來告訴路由器如何用 URL 去對應路由的路徑。在本應用中，路由器應該只有在<em>完整的 URL</em>等於 <code>''</code> 時才選擇 <code>HeroListComponent</code> 元件，因此要把 <code>pathMatch</code> 設定為 <code>'full'</code>。</p>\n<p><a id=\"pathmatch\"></a></p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mh6vwa2cwqt4xo0q0a9a2dl6\">聚焦 pathMatch</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ne9mk1bn6w01960noqj6ph69\">從技術角度看，<code>pathMatch = 'full'</code> 會導致 URL 中<em>剩下的</em>、未對應的部分必須等於 <code>''</code>。在這個例子中，跳轉路由在一個頂層路由中，因此<em>剩下的</em>URL 和<em>完整的</em>URL 是一樣的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41fa34jw4x0agz8leufer1xx0\"><code>pathMatch</code> 的另一個可能的值是 <code>'prefix'</code>，它會告訴路由器：當<em>剩下的</em>URL 以這個跳轉路由中的 <code>prefix</code> 值開頭時，就會對應上這個跳轉路由。但這不適用於此範例應用，因為如果 <code>pathMatch</code> 值是 <code>'prefix'</code>，那麼每個 URL 都會對應 <code>''</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5p5x6a9406nu2i6ohem7qjblu\">嘗試把它設定為 <code>'prefix'</code>，並點選 <code>Go to sidekicks</code> 按鈕。這是因為它是一個無效 URL，本應顯示『Page not found』頁。但是，你仍然在『英雄清單』頁中。在地址欄中輸入一個無效的 URL，你又被路由到了 <code>/heroes</code>。<em>每一個</em> URL，無論有效與否，都會對應上這個路由定義。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3atp6z1dxwinqpet1drt475sz\">預設路由應該只有在整個 URL 等於 <code>''</code> 時才重導向到 <code>HeroListComponent</code>，別忘了把重導向路由設定為 <code>pathMatch = 'full'</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7x8drd83mghfw47ntql9msbo\">要了解更多，參見 Victor Savkin 的文章<a href=\"https://victorsavkin.com/post/146722301646/angular-router-empty-paths-componentless-routes\">關於重導向</a>。</p>\n</div>\n<h3 id=\"milestone-1-wrap-up\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbfr18qzo2ct4za4m4b2ts6kp\">里程碑 1 小結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-1-wrap-up\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec8az601sfmpzc7lkjqweb61j\">當用戶單擊某個連結時，該範例應用可以在兩個檢視之間切換。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"den3frnw7sv2ltcy1g13okwys\">里程碑 1 涵蓋了以下幾點的做法：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19t1j55wn8oqi2qtyn2t2bj4r\">載入路由函式庫</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9icx1ijo8kwl1lqhn0ul3a4ek\">往殼元件的範本中新增一個導向條，導向條中有一些 A 標籤、<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令和 <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> 指令</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck9ufhdoiaa4k6ybpi32998m\">往殼元件的範本中新增一個 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> 指令，檢視將會被顯示在那裡</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqkfyzcucpt78r8hrj4q7fuuk\">用 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 設定路由器模組</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0zmttitackuyvumtfkn9njg3\">設定路由器，使其合成 HTML5 模式的瀏覽器 URL</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayutukzv4at6a6wkbjvqszy4v\">使用萬用字元路由來處理無效路由</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13rlwh6rrzdxepergnj5tleeg\">當應用在空路徑下啟動時，導向到預設路由</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gdbszsavp4fwd0jr8sq9zsde\">這個初學者應用的結構是這樣的：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-router-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          crisis-list\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            crisis-list.component.css\n          </div>\n          <div class=\"file\">\n            crisis-list.component.html\n          </div>\n          <div class=\"file\">\n            crisis-list.component.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          hero-list\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            hero-list.component.css\n          </div>\n          <div class=\"file\">\n            hero-list.component.html\n          </div>\n          <div class=\"file\">\n            hero-list.component.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          page-not-found\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            page-not-found.component.css\n          </div>\n          <div class=\"file\">\n            page-not-found.component.html\n          </div>\n          <div class=\"file\">\n            page-not-found.component.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          app.component.css\n        </div>\n        <div class=\"file\">\n          app.component.html\n        </div>\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules …\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bcs9kd0upcdt182g8fp4xo1s\">下面是本里程碑中的檔案清單。</p>\n<code-tabs>\n    <code-pane header=\"app.component.html\" path=\"router/src/app/app.component.1.html\">\n&lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n</code-pane>\n    <code-pane header=\"app.module.ts\" path=\"router/src/app/app.module.1.ts\">\nimport {<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>} from '@angular/core';\nimport {<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>} from '@angular/forms';\nimport {<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>} from '@angular/platform-browser';\nimport {<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>} from '@angular/router';\n\nimport {AppComponent} from './app.component';\nimport {CrisisListComponent} from './crisis-list/crisis-list.component';\nimport {HeroListComponent} from './hero-list/hero-list.component';\nimport {PageNotFoundComponent} from './page-not-found/page-not-found.component';\n\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {path: 'crisis-center', component: CrisisListComponent},\n  {path: 'heroes', component: HeroListComponent},\n\n  {path: '', redirectTo: '/heroes', pathMatch: 'full'},\n  {path: '**', component: PageNotFoundComponent}  // #enddocregion wildcard\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    RouterModule.forRoot(\n        appRoutes, {enableTracing: true}  // &lt;-- debugging purposes only\n        )\n  ],\n  declarations: [\n    AppComponent, HeroListComponent, CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-list/hero-list.component.html\" path=\"router/src/app/hero-list/hero-list.component.1.html\">\n&lt;h2&gt;HEROES&lt;/h2&gt;\n&lt;p&gt;Get your heroes here&lt;/p&gt;\n\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\"&gt;Go to sidekicks&lt;/button&gt;\n\n\n</code-pane>\n    <code-pane header=\"crisis-list/crisis-list.component.html\" path=\"router/src/app/crisis-list/crisis-list.component.1.html\">\n&lt;h2&gt;CRISIS CENTER&lt;/h2&gt;\n&lt;p&gt;Get your crisis here&lt;/p&gt;\n\n\n</code-pane>\n    <code-pane header=\"page-not-found/page-not-found.component.html\" path=\"router/src/app/page-not-found/page-not-found.component.html\">\n&lt;h2&gt;Page not found&lt;/h2&gt;\n\n</code-pane>\n    <code-pane header=\"index.html\" path=\"router/src/index.html\">\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;!-- Set the base href --&gt;\n    &lt;base href=\"/\"&gt;\n    &lt;title&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/title&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;app-root&gt;&lt;/app-root&gt;\n  &lt;/body&gt;\n\n&lt;/html&gt;\n\n</code-pane>\n</code-tabs>\n<p><a id=\"routing-module\"></a></p>\n<h2 id=\"milestone-2-routing-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8885tyuyq9xd7o5hx5mcl17bz\">里程碑 2：<strong>路由模組</strong><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-2-routing-module\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1s5xw4z9bvqy0ovhkaiq2kv7\">這個里程碑會向你展示如何設定一個名叫<em>路由模組</em>的專用<em>模組</em>，它會儲存你應用的路由設定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emg8hq9kixqdxjtmxztrh2353\">路由模組有以下幾個特點：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f7is6j43c4qt0v3o63va6h1l\">把路由這個關注點從其它應用類別關注點中分離出去。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aigxlcpy3fcpska4hkpof8ct7\">測試屬性模組時，可以替換或移除路由模組。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aquzgyfm24n06f6kvm4vfqk4l\">為路由服務提供者（如守衛和解析器等）提供一個眾所周知的位置。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25a2b8xk2zyb0k8ubdja9kb77\">不要宣告元件。</li>\n</ul>\n<p><a id=\"integrate-routing\"></a></p>\n<h3 id=\"integrate-routing-with-your-app\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tuudfyhwsc2y26pbuzg2viwv\">把路由整合到應用中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#integrate-routing-with-your-app\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8lg3ab7narmryz0ecns12574\">路由應用範例中預設不包含路由。要想在使用 <a href=\"cli\">Angular CLI</a> 建立專案時支援路由，請為專案或應用的每個 NgModule 設定 <code>--routing</code> 選項。當你用 CLI 指令 <a href=\"cli/new\"><code>ng new</code></a> 建立新專案或用 <a href=\"cli/generate\"><code>ng generate app</code></a> 指令建立新應用，請指定 <code>--routing</code> 選項。這會告訴 CLI 包含上 <code>@angular/router</code> 套件，並建立一個名叫 <code>app-routing.module.ts</code> 的檔案。然後你就可以在新增到專案或應用中的任何 NgModule 中使用路由功能了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzw0ka9xtqfn5u20ssbhx53om\">比如，可以用下列指令生成帶路由的 NgModule。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module my-module --routing\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zol6kzvwjpgmllc2rn3trqz5\">這將建立一個名叫 <code>my-module-routing.module.ts</code> 的獨立檔案，來儲存這個 NgModule 的路由訊息。該檔案包含一個空的 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 物件，你可以使用一些指向各個元件和 NgModule 的路由來填充該物件。</p>\n<p><a id=\"routing-refactor\"></a></p>\n<h3 id=\"refactor-the-routing-configuration-into-a-routing-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74kiv27k5xmlicwfy7sdanzi6\">將路由設定重構為路由模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#refactor-the-routing-configuration-into-a-routing-module\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95sr1fua48k6fqo6wfu053yzs\">在 <code>/app</code> 目錄下建立一個 <code>AppRouting</code> 模組，以包含路由設定。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module app-routing --module app --flat\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7w56b1lpgwbc79z8lmur4zqai\">匯入 <code>CrisisListComponent</code>、<code>HeroListComponent</code> 和 <code>PageNotFoundComponent</code> 元件，就像 <code>app.module.ts</code> 中那樣。然後把 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 的匯入語句和路由設定以及 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 移入這個路由模組中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16xs09d2ox1xq5muglmze1fxe\">把 Angular 的 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 新增到該模組的 <code>exports</code> 陣列中，以便再次匯出它。透過再次匯出 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>，那些宣告在 <code>AppModule</code> 中的元件就可以訪問路由指令了，比如 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 和 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4r37w060mylpl71xrmxe2ydhl\">做完這些之後，該檔案變成了這樣。</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"router/src/app/app-routing.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes',        component: HeroListComponent },\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tjxv7yp6ze8z4alp6l8wzfm\">接下來，修改 <code>app.module.ts</code> 檔案，從 <code>imports</code> 陣列中移除 <code>RouterModule.forRoot</code>。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"router/src/app/app.module.2.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroListComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atrkxw4texg1wtxc61yirwtnj\">稍後，本指南將向你展示如何建立<a href=\"guide/router-tutorial-toh#heroes-functionality\">多個路由模組</a>，並<a href=\"guide/router-tutorial-toh#routing-module-order\">以正確的順序</a>匯入這些路由模組。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dlvcscnb9uhgu0kiihll7lqg\">應用繼續照常執行，你可以把路由模組作為將來每個模組維護路由設定的中心位置。</p>\n<p><a id=\"why-routing-module\"></a></p>\n<h3 id=\"benefits-of-a-routing-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tu12l0891gxe6y277rsoi5q1\">路由模組的優點<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#benefits-of-a-routing-module\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cabfury3ue5ztd833q49g95ef\">路由模組（通常稱為 <code>AppRoutingModule</code>）代替了根範本或屬性模組中的路由模組。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98bs63n2qr8tpth5fqehf42c8\">這種路由模組在你的應用不斷增長，以及設定中包括了專門的守衛和解析器函式時會非常有用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ecdh5q49aa9zidw7tgycvuuni\">在設定很簡單時，一些開發者會跳過路由模組，並將路由設定直接混合在關聯模組中（比如 <code>AppModule</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ie4qxhp72spdoovdwuvvl15w\">大多數應用都應該採用路由模組，以保持一致性。它在設定複雜時，能確保程式碼乾淨。它讓測試屬性模組更加容易。它的存在讓人一眼就能看出這個模組是帶路由的。開發者可以很自然的從路由模組中查詢和擴充套件路由設定。</p>\n<p><a id=\"heroes-feature\"></a></p>\n<h2 id=\"milestone-3-heroes-feature\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a39rma2yzgk56xnfyr1diwyct\">里程碑 3: 英雄特徵區<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-3-heroes-feature\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sb7pnm1svpd8konfu1cuuaie\">本里程碑涵蓋了以下內容：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck0dba3324fcvtw5pg8q7jvzh\">用模組把應用和路由組織為一些屬性區。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2h0u1bbk63djupjr2lwcy9s4e\">指令式的從一個元件導向到另一個</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ib1w0c68xpeiz12cv3n2a9da\">透過路由傳遞必要訊息和可選訊息</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djsgk1q2gjrncznv1ywtwh71j\">這個範例應用在<a href=\"tutorial/tour-of-heroes/toh-pt4\" title=\"英雄指南：服務\">『英雄指南』教學課程</a>的『服務』部分重新建立了英雄屬性區，並複用了<live-example name=\"toh-pt4\" title=\"Tour of Heroes: Services example code\"></live-example>中的大部分程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ch0va14z4zrxpduk89hmwa5w4\">典型的應用具有多個<em>屬性區</em>，每個屬性區都專注於特定的業務用途並擁有自己的資料夾。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blyzyb7xjf84xvx4nszqn5rj8\">該部分將向你展示如何將應用重構為不同的屬性模組、將它們匯入到主模組中，並在它們之間導向。</p>\n<p><a id=\"heroes-functionality\"></a></p>\n<h3 id=\"add-heroes-functionality\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65cr3j3zoe3ee6pd1160sbpob\">新增英雄管理功能<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#add-heroes-functionality\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d6ldjbft6ijgf07v664auyuqg\">遵循下列步驟：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6t7wicnsdurvjjyf4me0pdxp9\">為了管理這些英雄，在 <code>heroes</code> 目錄下建立一個帶路由的 <code>HeroesModule</code>，並把它註冊到根模組 <code>AppModule</code> 中。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module heroes/heroes --module app --flat --routing\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6a841p1cgg5ti3x4vpyi38hpu\">把 <code>app</code> 下佔位用的 <code>hero-list</code> 目錄移到 <code>heroes</code> 目錄中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asq8t2uhgmrualfpwmwef4ac5\">從 <live-example name=\"toh-pt4\" title=\"Tour of Heroes: Services example code\">教學課程的 \"服務\" 部分</live-example>把 <code>heroes/heroes.component.html</code> 的內容複製到 <code>hero-list.component.html</code> 範本中。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4t8np6f9fk83ktktn7fvopf91\">給 <code>&lt;h2&gt;</code> 加文字，改成 <code>&lt;h2&gt;HEROES&lt;/h2&gt;</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"825dpr4ivqft9xztit5stmbcl\">刪除範本底部的 <code>&lt;app-hero-detail&gt;</code> 元件。</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qv7fc5308jwoo5q7gf7cgw5o\">把現場演練中 <code>heroes/heroes.component.css</code> 檔案的內容複製到 <code>hero-list.component.css</code> 檔案中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n55fxkjh9zpff16fyjuvml97\">把現場演練中 <code>heroes/heroes.component.ts</code> 檔案的內容複製到 <code>hero-list.component.ts</code> 檔案中。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3kvaugxs5vy1dzwm4sbw01dkz\">把元件類別名改為 <code>HeroListComponent</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmu6s7xi0sply31hfpxytlic0\">把 <code>selector</code> 改為 <code>app-hero-list</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d32y9nswa0sbiteh08k17b1jc\">將\n<code>templateUrl</code>更改為\n<code>./hero-list.component.html</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3c9y8xzmb6xj6h29v0a92zis3\">將\n<code>styleUrls</code>更改為\n<code>./hero-list.component.css</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cl572q8sdnxrzgco199eh9qss\">對於路由元件來說，這些選擇器不是必須的，因為這些元件是在渲染頁面時動態插入的，不過選擇器對於在 HTML 元素樹中標記和選中它們是很有用的。</p>\n</div>\n</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8d4efzdoh7xnsiwntl374k0ln\">把 <code>hero-detail</code> 目錄中的 <code>hero.ts</code>、<code>hero.service.ts</code> 和 <code>mock-heroes.ts</code> 檔案複製到 <code>heroes</code> 子目錄下。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bl9577jeg5npchp2rf4nfo3eq\">把 <code>message.service.ts</code> 檔案複製到 <code>src/app</code> 目錄下。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ez2dq4z3t4vsf3alcpyjao3l\">在 <code>hero.service.ts</code> 檔案中修改匯入 <code>message.service</code> 的相對路徑。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"789mukdg57w1tz2llpv54j5zj\">接下來，更新 <code>HeroesModule</code> 的元資料。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9e943iy4ppnhdtxp73vscdchw\">匯入 <code>HeroDetailComponent</code> 和 <code>HeroListComponent</code>，並新增到 <code>HeroesModule</code> 模組的 <code>declarations</code> 陣列中。</li>\n</ul>\n<code-example header=\"src/app/heroes/heroes.module.ts\" path=\"router/src/app/heroes/heroes.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nimport { HeroesRoutingModule } from './heroes-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesRoutingModule\n  ],\n  declarations: [\n    HeroListComponent,\n    HeroDetailComponent\n  ]\n})\nexport class HeroesModule {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d60dqc2tr0f5641bb7a4wlb37\">英雄管理部分的檔案結構如下：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src/app/heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      hero-detail\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          hero-detail.component.css\n        </div>\n        <div class=\"file\">\n          hero-detail.component.html\n        </div>\n        <div class=\"file\">\n          hero-detail.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      hero-list\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          hero-list.component.css\n        </div>\n        <div class=\"file\">\n          hero-list.component.html\n        </div>\n        <div class=\"file\">\n          hero-list.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      hero.service.ts\n    </div>\n    <div class=\"file\">\n      hero.ts\n    </div>\n    <div class=\"file\">\n      heroes-routing.module.ts\n    </div>\n    <div class=\"file\">\n      heroes.module.ts\n    </div>\n    <div class=\"file\">\n      mock-heroes.ts\n    </div>\n    </div>\n  </div>\n</div>\n<p><a id=\"hero-routing-requirements\"></a></p>\n<h4 id=\"hero-feature-routing-requirements\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2t74wf1l94de2asq03zpjagl\">英雄屬性區的路由需求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#hero-feature-routing-requirements\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmsh6n9rfu6sjivjuq8w0veg1\">英雄屬性區中有兩個相互協作的元件：英雄清單和英雄詳情。當你導向到清單檢視時，它會獲取英雄清單並顯示出來。當你點選一個英雄時，詳細檢視就會顯示那個特定的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2iq5qkihw5mhvxhwav9u4u7b2\">透過把所選英雄的 id 編碼進路由的 URL 中，就能告訴詳情檢視該顯示哪個英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bz5iu93uiqe2q75upb6rdnh6\">從新位置 <code>src/app/heroes/</code> 目錄中匯入英雄相關的元件，並定義兩個『英雄管理』路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ore76q7llnbomrg20ku5yecq\">現在，你有了 <code>Heroes</code> 模組的路由，還得在 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 中把它們註冊給<em>路由器</em>，和 <code>AppRoutingModule</code> 中的做法幾乎完全一樣，只有一項重要的差別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2c8ai9tcdrfkkc48g5jymqm1c\">在 <code>AppRoutingModule</code> 中，你使用了靜態的 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法來註冊路由和全應用級服務提供者。在屬性模組中你要改用 <code>forChild()</code> 靜態方法。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4ryx2sq2hi2eattiqkxx2mtg\">只在根模組 <code>AppRoutingModule</code> 中呼叫 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code>（如果在 <code>AppModule</code> 中註冊應用的頂層路由，那就在 <code>AppModule</code> 中呼叫）。在其它模組中，你就必須呼叫 <code>RouterModule.forChild</code> 方法來註冊附屬路由。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71iztvlzrzwvp9lts5uc7x3sb\">修改後的 <code>HeroesRoutingModule</code> 是這樣的：</p>\n<code-example header=\"src/app/heroes/heroes-routing.module.ts\" path=\"router/src/app/heroes/heroes-routing.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes',  component: HeroListComponent },\n  { path: 'hero/:id', component: HeroDetailComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroesRoutingModule { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9oqbb1pzqu5s3c6p9swh6r31m\">考慮為每個屬性模組提供自己的路由設定檔案。雖然屬性路由目前還很少，但即使在小型應用中，路由也會變得越來越複雜。</p>\n</div>\n<p><a id=\"remove-duplicate-hero-routes\"></a></p>\n<h4 id=\"remove-duplicate-hero-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3t5huram6ad8fub8go6prdr0o\">移除重複的『英雄管理』路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#remove-duplicate-hero-routes\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"es3rwn9jueideq93ncs7ary3o\">英雄類別的路由目前定義在兩個地方：<code>HeroesRoutingModule</code> 中（並最終給 <code>HeroesModule</code>）和 <code>AppRoutingModule</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhbqvoszrs9wiy31e0kpkgblw\">由屬性模組提供的路由會被路由器再組合上它們所匯入的模組的路由。這讓你可以繼續定義屬性路由模組中的路由，而不用修改主路由設定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8k8d4l8rmp8kcc9fop3fnqsgr\">移除 <code>HeroListComponent</code> 的匯入和來自 <code>app-routing.module.ts</code> 中的 <code>/heroes</code> 路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jy5beliorrrmmkdy4oy2qz1\">保留預設路由和萬用字元路由，因為這些路由仍然要在應用的頂層使用。</p>\n<code-example header=\"src/app/app-routing.module.ts (v2)\" path=\"router/src/app/app-routing.module.2.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\n// import { HeroListComponent } from './hero-list/hero-list.component';  // &lt;-- delete this line\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  // { path: 'heroes',     component: HeroListComponent }, // &lt;-- delete this line\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<p><a id=\"merge-hero-routes\"></a></p>\n<h4 id=\"remove-heroes-declarations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wxzmga0fjlnfkvr98sxoza6y\">移除英雄清單的宣告<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#remove-heroes-declarations\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etz4haq0mcxdbpbibd9u5po0i\">因為 <code>HeroesModule</code> 現在提供了 <code>HeroListComponent</code>，所以把它從 <code>AppModule</code> 的 <code>declarations</code> 陣列中移除。現在你已經有了一個單獨的 <code>HeroesModule</code>，你可以用更多的元件和不同的路由來演進英雄屬性區。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6126g1ur9111feposs0lmfgva\">經過這些步驟，<code>AppModule</code> 變成了這樣：</p>\n<code-example header=\"src/app/app.module.ts\" path=\"router/src/app/app.module.3.ts\" region=\"remove-heroes\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule } from './heroes/heroes.module';\n\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<p><a id=\"routing-module-order\"></a></p>\n<h3 id=\"module-import-order\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tvxgd3eu7vqesx0d7henx3pl\">模組匯入順序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#module-import-order\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a88b5t1qkeocbmd3m4wad39ud\">請注意該模組的 <code>imports</code> 陣列，<code>AppRoutingModule</code> 是最後一個，並且位於 <code>HeroesModule</code> 之後。</p>\n<code-example header=\"src/app/app.module.ts (module-imports)\" path=\"router/src/app/app.module.3.ts\" region=\"module-imports\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n  HeroesModule,\n  AppRoutingModule\n],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ad6i0x9yy0n4idgj790pcfhj\">路由設定的順序很重要，因為路由器會接受第一個對應上導向所要求的路徑的那個路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adbfv8x71zleola68aheirck2\">當所有路由都在同一個 <code>AppRoutingModule</code> 時，你要把預設路由和<a href=\"guide/router-tutorial-toh#wildcard\">萬用字元路由</a>放在最後（這裡是在 <code>/heroes</code> 路由後面），\n這樣路由器才有機會對應到 <code>/heroes</code> 路由，否則它就會先遇到並對應上該萬用字元路由，並導向到『頁面未找到』路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94748z7c0vb736nu08zg7ias2\">每個路由模組都會根據匯入的順序把自己的路由設定追加進去。如果你先列出了 <code>AppRoutingModule</code>，那麼萬用字元路由就會被註冊在『英雄管理』路由<em>之前</em>。萬用字元路由（它對應<em>任意</em>URL）將會攔截住每一個到『英雄管理』路由的導向，因此事實上遮蔽了所有『英雄管理』路由。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfnw5jwhx08c3a7fpagwrizpc\">反轉路由模組的匯入順序，就會看到當點選英雄相關的連結時被導向了『頁面未找到』路由。\n要學習如何在執行時檢視路由器設定，參見<a href=\"guide/router-tutorial-toh#inspect-config\" title=\"Inspect the router config\">稍後的內容</a>。</p>\n</div>\n<h3 id=\"route-parameters\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7u6anazwt9tu0ltozalcoxvm\">路由引數<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#route-parameters\"><i class=\"material-icons\">link</i></a></h3>\n<p><a id=\"route-def-with-parameter\"></a></p>\n<h4 id=\"route-definition-with-a-parameter\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61q6tgw8zdj96s82xr6aq8hox\">帶引數的路由定義<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#route-definition-with-a-parameter\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23ipgdvaf37q6e8ib7jpbo386\">回到 <code>HeroesRoutingModule</code> 並再次檢查這些路由定義。<code>HeroDetailComponent</code> 路由的路徑中帶有 <code>:id</code> 標記。</p>\n<code-example header=\"src/app/heroes/heroes-routing.module.ts (excerpt)\" path=\"router/src/app/heroes/heroes-routing.module.1.ts\" region=\"hero-detail-route\">\n{ path: 'hero/:id', component: HeroDetailComponent }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzg6aqh0qcq3gbt17l3mz7p3j\"><code>:id</code> 標記會為路由引數在路徑中建立一個『空位』。在這裡，這種設定會讓路由器把英雄的 <code>id</code> 插入到那個『空位』中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewjm74aim64idtuwtukk1lzuz\">如果要告訴路由器導向到詳情元件，並讓它顯示『Magneta』，你會期望這個英雄的 <code>id</code> 像這樣顯示在瀏覽器的 URL 中：</p>\n<code-example format=\"nocode\">\n\nlocalhost:4200/hero/15\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"euypc7q2ndvl5raq3jz8yxlz3\">如果使用者把此 URL 輸入到瀏覽器的地址欄中，路由器就會識別出這種模式，同樣進入『Magneta』的詳情檢視。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4po4pdurpzthdcpq3piwzme37\">路由引數：必須的還是可選的？</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3hlsvkb4cg1do7gy38l54lhq\">在這個場景下，把路由引數的標記 <code>:id</code> 嵌入到路由定義的 <code>path</code> 中是一個好主意，因為對於 <code>HeroDetailComponent</code> 來說 <code>id</code> 是<em>必須的</em>，而且路徑中的值 <code>15</code> 已經足夠把到『Magneta』的路由和到其它英雄的路由明確區分開。</p>\n</div>\n<p><a id=\"route-parameters\"></a></p>\n<h4 id=\"setting-the-route-parameters-in-the-list-view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qcqkhuwziyp2sryye91xbuej\">在清單檢視中設定路由引數<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#setting-the-route-parameters-in-the-list-view\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6d8dik3rl8mz7j1fefhe1l2do\">然後導向到 <code>HeroDetailComponent</code> 元件。在那裡，你期望看到所選英雄的詳情，這需要兩部分訊息：導向目標和該英雄的 <code>id</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oa7qu0p2xiwn03fcuy40eml4\">因此，這個<em>連結引數陣列</em>中有兩個條目：路由的<em>路徑</em>和一個用來指定所選英雄 <code>id</code> 的<em>路由引數</em>。</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.html (link-parameters-array)\" path=\"router/src/app/heroes/hero-list/hero-list.component.1.html\" region=\"link-parameters-array\">\n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8wquftw7uy8vq7se5p0n4ohx\">路由器從該陣列中組合出了目標 URL：<code>localhost:4200/hero/15</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2awjak7jnm1vci57fehwng26v\">路由器從 URL 中解析出路由引數（<code>id:15</code>），並透過 <strong>ActivatedRoute</strong> 服務來把它提供給 <code>HeroDetailComponent</code> 元件。</p>\n<p><a id=\"activated-route-in-action\"></a></p>\n<h3 id=\"activated-route-in-action\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9us3ogf4l45eak1dxu4t2ezlp\"><code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 實戰<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#activated-route-in-action\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63hclf5phge5biraotalmcgkp\">從路由器（<code>router</code>）套件中匯入 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>、<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 和 <code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code> 令牌。</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (activated route)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.1.ts\" region=\"imports\">\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bnqdkhc8x21gaocyckjr1w42\">這裡匯入 <code>switchMap</code> 運算子是因為你稍後將會處理路由引數的可觀察物件 <code>Observable</code>。</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (switchMap operator import)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\" region=\"rxjs-operator-import\">\nimport { switchMap } from 'rxjs/operators';\n\n</code-example>\n<p><a id=\"hero-detail-ctor\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9f3yhrt5ca64vkktqbs9rpg97\">把這些服務作為私有變數新增到建構式函式中，以便 Angular 注入它們（讓它們對元件可見）。</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (constructor)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\" region=\"ctor\">\nconstructor(\n  private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  private service: HeroService\n) {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evhgu3nwtgxh88i0onu8k7uw6\">在 <code>ngOnInit()</code> 方法中，使用 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服務來檢索路由的引數，從引數中提取出英雄的 <code>id</code>，並檢索要顯示的英雄。</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (ngOnInit)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\" region=\"ngOnInit\">\nngOnInit() {\n  this.hero$ = this.route.paramMap.pipe(\n    switchMap((params: <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>) =&gt;\n      this.service.getHero(params.get('id')!))\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cglrdwk5nr84tk2qp9sb4wy4h\">當這個 map 發生變化時，<code>paramMap</code> 會從更改後的引數中獲取 <code>id</code> 引數。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wgvsozltq07lv8jkyppjhjma\">然後，讓 <code>HeroService</code> 去獲取具有該 <code>id</code> 的英雄，並回傳 <code>HeroService</code> 請求的結果。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nhm5vv7go4pdwyl6filukqgl\"><code>switchMap</code> 運算子做了兩件事。它把 <code>HeroService</code> 回傳的 <code>Observable&lt;Hero&gt;</code> 拍平，並取消以前的未完成請求。當 <code>HeroService</code> 仍在檢索舊的 <code>id</code> 時，如果使用者使用新的 <code>id</code> 重新導向到這個路由，<code>switchMap</code> 會放棄那個舊請求，並回傳新 <code>id</code> 的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bh0nbp6dyyfa5e3k3opo5e3lz\"><code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 處理這個可觀察的訂閱，而且該組件的 <code>hero</code> 屬性也會用檢索到的英雄（重新）進行設定。</p>\n<h4 id=\"parammap-api\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8twafd18vvu5upu2ppgix6id2\"><code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code> API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#parammap-api\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4r30s4pv8ucgnu73te6r36anp\"><code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code> API 的靈感來自 URLSearchParams<a href=\"https://developer.mozilla.org/docs/Web/API/URLSearchParams\">介面</a>。它提供了處理路由引數 （ <code>paramMap</code> ） 和查詢引數 （ <code>queryParamMap</code> ） 的引數訪問的方法。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wmge39hyfrylpl8ncawfdo9p\">成員</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>has(name)</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"180xquolm8te1bbnnktk7dwov\">如果引數名稱在引數對映表中，則回傳\n<code>true</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>get(name)</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmcb4alvu1867hydqsmet8wqn\">如果存在引數名稱值（一個\n<code>string</code>），則回傳該值；如果引數名稱不在對映表中，則回傳\n<code>null</code>。如果引數值實際上是值陣列，則回傳\n<em>第一個</em>元素。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>getAll(name)</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4er438qa5hsb9u1wlijmyc1y0\">如果找到引數名稱值，則回傳一個\n<code>string array</code>；如果引數名稱值不在對映表中，則回傳一個空\n<code>array</code>。當單個引數可能有多個值時，請使用\n<code>getAll</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>keys</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76brja656cka9hq4f9c5zzj3i\">回傳對映表中所有引數名稱的\n<code>string array</code>。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"reuse\"></a></p>\n<h4 id=\"observable-parammap-and-component-reuse\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"804snj5l5ygqej81mr9w3j373\"><code>paramMap</code> 可觀察物件與路由複用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#observable-parammap-and-component-reuse\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"v2iu8r2mypcsue4ivxglrote\">在這個例子中，你接收了路由引數的 <code>Observable</code> 物件。這種寫法暗示著這些路由引數在該組件的生存期內可能會變化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9er5zs1un49ptnallmvc4ry80\">預設情況下，如果它沒有訪問過其它元件就導向到了同一個元件實例，那麼路由器傾向於複用元件實例。如果複用，這些引數可以變化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caxa4rsagc9dndnxz3qzpo2jj\">假設父元件的導向欄有『前進』和『後退』按鈕，用來輪流顯示英雄清單中中英雄的詳情。每次點選都會強制導向到帶前一個或後一個 <code>id</code> 的 <code>HeroDetailComponent</code> 元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7extcs6ho6c5fq12miz9bhk3e\">你肯定不希望路由器先從 DOM 中移除當前的 <code>HeroDetailComponent</code> 實例，只是為了用下一個 <code>id</code> 重新建立它，因為它將重新渲染檢視。為了更好的使用者體驗，路由器會複用同一個元件實例，而只是更新引數。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8upx6d5rnik309k3628eyywjv\">由於 <code>ngOnInit()</code> 在每個元件實例化時只會被呼叫一次，所以你可以使用 <code>paramMap</code> 可觀察物件來檢測路由引數<em>在同一個實例中</em>何時發生了變化。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ycgjev43on7vx523cb0ekmvc\">當在元件中訂閱一個可觀察物件時，你通常總是要在元件銷燬時取消這個訂閱。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bchb8eantwc63969k3ti59w\">不過，<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 中的可觀察物件是一個例外，因為 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 及其可觀察物件與 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 本身是隔離的。<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 會在不再需要時銷燬這個路由元件，這意味著此元件的所有成員也都會銷燬，包括注入進來的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 以及那些對它的所有 <code>Observable</code> 屬性的訂閱。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"encixihr4yh9qtg9b54v5nddw\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 不會 <code>complete</code> <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 的任何 <code>Observable</code>，所以其 <code>finalize</code> 或 <code>complete</code> 程式碼區塊都不會執行。如果你要在 <code>finalize</code> 中做些什麼處理，你仍然要在 <code>ngOnDestroy</code> 中取消訂閱。如果你的 <code>Observable</code> 型通道有某些程式碼不希望在當前元件被銷燬後執行，仍然要主動取消訂閱。</p>\n</div>\n<p><a id=\"snapshot\"></a></p>\n<h4 id=\"snapshot-the-no-observable-alternative\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30xce9slnku9ypapzxv7824x5\"><code>snapshot</code>：當不需要 Observable 時的替代品<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#snapshot-the-no-observable-alternative\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6t0ghh5kcn4eb2q5j5tal2mv4\">本應用不需要複用 <code>HeroDetailComponent</code>。使用者總是會先回傳英雄清單，再選擇另一位英雄。所以，不存在從一個英雄詳情導向到另一個而不用經過英雄清單的情況。這意味著路由器每次都會建立一個全新的 <code>HeroDetailComponent</code> 實例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a44405ccxukoawx1sbex3q4x9\">假如你很確定這個 <code>HeroDetailComponent</code> 實例永遠不會被複用，你可以使用 <code>snapshot</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cctvi65eni24761wqz8g534hu\"><code>route.snapshot</code> 提供了路由引數的初始值。你可以透過它來直接訪問引數，而不用訂閱或者新增 Observable 的運算子，程式碼如下：</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (ngOnInit snapshot)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.2.ts\" region=\"snapshot\">\nngOnInit() {\n  const id = this.route.snapshot.paramMap.get('id')!;\n\n  this.hero$ = this.service.getHero(id);\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehavvjenhaucvdeo51dvmq1qj\">用這種技術，<code>snapshot</code> 只會得到這些引數的初始值。如果路由器可能複用該組件，那麼就該用 <code>paramMap</code> 可觀察物件的方式。本教學課程的範例應用中就用了 <code>paramMap</code> 可觀察物件。</p>\n</div>\n<p><a id=\"nav-to-list\"></a></p>\n<h3 id=\"navigating-back-to-the-list-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kvn9dk9rtm321v0w3y03nl9l\">導向回清單元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#navigating-back-to-the-list-component\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2yy2cbkcq42snj8kn6mwjqr1i\"><code>HeroDetailComponent</code> 的 『Back』 按鈕使用了 <code>gotoHeroes()</code> 方法，該方法會強制導向回 <code>HeroListComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1iwfxkcku0lknc6iu5pknbn1n\">路由的 <code>navigate()</code> 方法同樣接受一個單條目的<em>連結引數陣列</em>，你也可以把它繫結到 <code>[<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]</code> 指令上。它儲存著到 <code>HeroListComponent</code> 元件的路徑：</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (excerpt)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.1.ts\" region=\"gotoHeroes\">\ngotoHeroes() {\n  this.router.navigate(['/heroes']);\n}\n\n</code-example>\n<p><a id=\"optional-route-parameters\"></a></p>\n<h4 id=\"route-parameters-required-or-optional\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caopb9xi49r5tdwqj508hzr5d\">路由引數：必須還是可選？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#route-parameters-required-or-optional\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nfu1t6emjfp9rashg7p3vb4s\">如果想導向到 <code>HeroDetailComponent</code> 以對 id 為 <code>15</code> 的英雄進行檢視並編輯，就要在路由的 URL 中使用<a href=\"guide/router-tutorial-toh#route-parameters\">路由引數</a>來指定必要引數值。</p>\n<code-example format=\"http\" language=\"http\">\n\nlocalhost:4200/hero/15\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p60hh9zvby6j2u0n4h8l9g21\">你也能在路由請求中新增<em>可選</em>訊息。比如，當從 <code>hero-detail.component.ts</code> 回傳到清單時，如果能自動選中剛剛檢視過的英雄就好了。</p>\n<div class=\"lightbox\">\n  <img alt=\"Selected hero\" src=\"generated/images/guide/router/selected-hero.png\" width=\"600\" height=\"173\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dvf0fmepnckfa2zv71nongfmr\">當從 <code>HeroDetailComponent</code> 回傳時，你可以會通過把正在檢視的英雄的 <code>id</code> 作為可選引數包含在 URL 中來實現這個屬性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyla6ms79lkekiizzebhp92mr\">可選訊息還可以包含其它形式，比如：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewvk5dodspaupavrir0929soe\">結構鬆散的搜尋條件。比如 <code>name='wind*'</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44dbnh2iqbqm6posdvve5mev3\">多個值。比如 <code>after='12/31/2015' &amp; before='1/1/2017'</code> - 沒有特定的順序 - <code>before='1/1/2017' &amp; after='12/31/2015'</code> - 具有各種格式 - <code>during='currentYear'</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t4wlljp6w36ahtau13uamn2d\">由於這些引數不適合用作 URL 路徑，因此可以使用可選引數在導向過程中傳遞任意複雜的訊息。可選引數不參與模式對應，因此在表達上提供了巨大的靈活性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acugrm7rln9rmlmlql9et5gdm\">和必要引數一樣，路由器也支援透過可選引數導向。在你定義完必要引數之後，再透過一個<em>獨立的物件</em>來定義可選引數。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c44x0gh8jj7lzfhvezc9h7gaz\">通常，對於必傳的值（比如用於區分兩個路由路徑的）使用<em>必備引數</em>；當這個值是可選的、複雜的或多值的時，使用可選引數。</p>\n<p><a id=\"optionally-selecting\"></a></p>\n<h4 id=\"heroes-list-optionally-selecting-a-hero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yk2pffiydq19noewmq4jw3ly\">英雄清單：選定一個英雄（也可不選）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#heroes-list-optionally-selecting-a-hero\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nh46z935wo4gjvnqj8oo240j\">當導向到 <code>HeroDetailComponent</code> 時，你可以在<em>路由引數</em>中指定一個所要編輯的英雄 <code>id</code>，只要把它作為<a href=\"guide/router-tutorial-toh#link-parameters-array\">連結引數陣列</a>中的第二個條目就可以了。</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.html (link-parameters-array)\" path=\"router/src/app/heroes/hero-list/hero-list.component.1.html\" region=\"link-parameters-array\">\n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wyxju2yoqbfhcqtnzrrmw7t5\">路由器在導向 URL 中內嵌了 <code>id</code> 的值，這是因為你把它用一個 <code>:id</code> 佔位符當做路由引數定義在了路由的 <code>path</code> 中：</p>\n<code-example header=\"src/app/heroes/heroes-routing.module.ts (hero-detail-route)\" path=\"router/src/app/heroes/heroes-routing.module.1.ts\" region=\"hero-detail-route\">\n{ path: 'hero/:id', component: HeroDetailComponent }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hgkhpevnlgfbd7jt4rizw3li\">當用戶點選後退按鈕時，<code>HeroDetailComponent</code> 構造了另一個<em>連結引數陣列</em>，可以用它導向回 <code>HeroListComponent</code>。</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (gotoHeroes)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.1.ts\" region=\"gotoHeroes\">\ngotoHeroes() {\n  this.router.navigate(['/heroes']);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o8iije7htw5exdh0cdmp3lno\">該陣列缺少一個路由引數，這是因為以前你不需要往 <code>HeroListComponent</code> 傳送訊息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kvu4hfsvmshagqb96i4hz4so\">現在，使用導向請求傳送當前英雄的 <code>id</code>，以便 <code>HeroListComponent</code> 在其清單中突出顯示該英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csdv69gf8a85uflnct6js31hs\">傳送一個包含可選 <code>id</code> 引數的物件。為了示範，這裡還在物件中定義了一個沒用的額外引數（<code>foo</code>），<code>HeroListComponent</code> 應該忽略它。下面是修改過的導向語句：</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (go to heroes)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\" region=\"gotoHeroes\">\ngotoHeroes(hero: Hero) {\n  const heroId = hero ? hero.id : null;\n  // Pass along the hero id if available\n  // so that the HeroList component can select that hero.\n  // Include a junk 'foo' property for fun.\n  this.router.navigate(['/heroes', { id: heroId, foo: 'foo' }]);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wi5im8fascb04vpa8akqiogm\">該應用仍然能工作。點選『back』按鈕回傳英雄清單檢視。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16gs0l64asqhk2fzl6g4xzayv\">注意瀏覽器的地址欄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3mi4bw3bdne93s5eumasiymv8\">它應該是這樣的，不過也取決於你在哪裡執行它：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nlocalhost:4200/heroes;id=15;foo=foo\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arnq7kthr0pdu24a2mi7kpkg6\"><code>id</code> 的值像這樣出現在 URL 中（<code>;id=15;foo=foo</code>），但不在 URL 的路徑部分。『Heroes』路由的路徑部分並沒有定義 <code>:id</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beg7opsvcqahq3ftlfljxmpc4\">可選的路由引數沒有使用『？』和『&amp;』符號分隔，因為它們將用在 URL 查詢字串中。它們是用『;』分隔的。這是<em>矩陣 URL</em>標記法。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6h63g6htx2573s7lx1x17x277\">Matrix URL 寫法首次提出是在<a href=\"https://www.w3.org/DesignIssues/MatrixURIs.html\">1996 提案</a>中，提出者是 Web 的奠基人：Tim Berners-Lee。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8zcdxyd86xvgpqhpaj8sz1tu\">雖然 Matrix 寫法未曾進入過 HTML 標準，但它是合法的。而且在瀏覽器的路由系統中，它作為從父路由和子路由中單獨隔離出引數的方式而廣受歡迎。Angular 的路由器正是這樣一個路由系統，並支援跨瀏覽器的 Matrix 寫法。</p>\n</div>\n<p><a id=\"route-parameters-activated-route\"></a></p>\n<h3 id=\"route-parameters-in-the-activatedroute-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"196jfi3gv9aq46xcdhnqiq2c6\"><code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服務中的路由引數<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#route-parameters-in-the-activatedroute-service\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c698gkc3yutfq2llj1842jwfx\">開發到現在，英雄清單還沒有變化。沒有突出顯示的英雄行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qw5au6j3r672aj4323kgyfdo\"><code>HeroListComponent</code> 需要新增使用這些引數的程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9cg8ov5hcplh3lqebilmka9vk\">以前，當從 <code>HeroListComponent</code> 導向到 <code>HeroDetailComponent</code> 時，你透過 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服務訂閱了路由引數這個 <code>Observable</code>，並讓它能用在 <code>HeroDetailComponent</code> 中。你把該服務注入到了 <code>HeroDetailComponent</code> 的建構式函式中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1svlozsvg9jo54i9ellwy5sf6\">這次，你要進行反向導向，從 <code>HeroDetailComponent</code> 到 <code>HeroListComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nxnmb326iekouofcn39jl9j9\">首先，擴充套件該路由的匯入語句，以包含進 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服務的類別；</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.ts (import)\" path=\"router/src/app/heroes/hero-list/hero-list.component.ts\" region=\"import-router\">\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dvv80da5bkrkds3gs4xphzk5w\">匯入 <code>switchMap</code> 運算子，在路由引數的 <code>Observable</code> 物件上執行操作。</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.ts (rxjs imports)\" path=\"router/src/app/heroes/hero-list/hero-list.component.ts\" region=\"rxjs-imports\">\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qk55inc5nfinmdjnqb8bsug1\">在 <code>HeroListComponent</code> 建構式函式中注入 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.ts (constructor and ngOnInit)\" path=\"router/src/app/heroes/hero-list/hero-list.component.ts\" region=\"ctor\">\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$!: Observable&lt;Hero[]&gt;;\n  selectedId = 0;\n\n  constructor(\n    private service: HeroService,\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>\n  ) {}\n\n  ngOnInit() {\n    this.heroes$ = this.route.paramMap.pipe(\n      switchMap(params =&gt; {\n        this.selectedId = parseInt(params.get('id')!, 10);\n        return this.service.getHeroes();\n      })\n    );\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9g0gluc79t5xu1kvhz9kkc5z9\"><code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> 屬性是一個路由引數的 <code>Observable</code>。當用戶導向到這個元件時，paramMap 會發射一個新值，其中包含 <code>id</code>。在 <code>ngOnInit()</code> 中，你訂閱了這些值，設定到 <code>selectedId</code>，並獲取英雄資料。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kstdi5krepgrxgivvrzs316s\">用 <a href=\"guide/class-binding\">CSS 類別繫結</a>更新範本。\n如果該方法回傳 <code>true</code>，此繫結就會新增 CSS 類別 <code>selected</code>，否則就移除它。\n在 <code>&lt;li&gt;</code> 標記中找到它，就像這樣：</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.html\" path=\"router/src/app/heroes/hero-list/hero-list.component.html\">\n&lt;h2&gt;Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>\" [class.selected]=\"hero.id === selectedId\"&gt;\n    &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\"&gt;\n      &lt;span class=\"badge\"&gt;{{ hero.id }}&lt;/span&gt;{{ hero.name }}\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\"&gt;Go to sidekicks&lt;/button&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61jkcwnq57f9c2h7d1zj5q2ax\">當選中清單條目時，要新增一些樣式。</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.css\" path=\"router/src/app/heroes/hero-list/hero-list.component.css\" region=\"selected\">\n.heroes .selected a {\n  background-color: #d6e6f7;\n}\n\n.heroes .selected a:hover {\n  background-color: #bdd7f5;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qyu5jag0j4yuo1ecemuqvece\">當用戶從英雄清單導向到英雄『Magneta』並回傳時，『Magneta』看起來是選中的：</p>\n<div class=\"lightbox\">\n<img alt=\"Selected hero in list has different background color\" src=\"generated/images/guide/router/selected-hero.png\" width=\"600\" height=\"173\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adpfh4124pg0glq9r95xo2tfr\">這個可選的 <code>foo</code> 路由引數人畜無害，路由器會繼續忽略它。</p>\n<p><a id=\"route-animation\"></a></p>\n<h3 id=\"adding-routable-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xg2blqz8ntbs061t7q4622l9\">新增路由動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#adding-routable-animations\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75aohkyzykkabo0t5nztzyzty\">在這一節，你將為<em>英雄詳情</em>元件新增一些<a href=\"guide/animations\">動畫</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"pjq5ft2v1eetod69392pkcs7\">首先匯入 <code><a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a></code>，並新增到 <code>imports</code> 陣列中：</p>\n<code-example header=\"src/app/app.module.ts (animations-module)\" path=\"router/src/app/app.module.ts\" region=\"animations-module\">\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n  ],\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2avfm5zopsiz4itf3ikxe7mu9\">接下來，為指向 <code>HeroListComponent</code> 和 <code>HeroDetailComponent</code> 的路由定義新增一個 <code>data</code> 物件。\n轉場是基於 <a href=\"api/animations/state\"><code>state</code></a> 的，你將使用來自路由的 <code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a></code> 資料為過渡提供一個有名字的動畫 <code>state</code>。</p>\n<code-example header=\"src/app/heroes/heroes-routing.module.ts (animation data)\" path=\"router/src/app/heroes/heroes-routing.module.2.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes',  component: HeroListComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'heroes' } },\n  { path: 'hero/:id', component: HeroDetailComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'hero' } }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroesRoutingModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7njxmgrj4bxzr38i3yytqr26b\">在根目錄 <code>src/app/</code> 下建立一個 <code>animations.ts</code>。內容如下：</p>\n<code-example header=\"src/app/animations.ts (excerpt)\" path=\"router/src/app/animations.ts\">\nimport {\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>, <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>, group,\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>, <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>, <a href=\"api/animations/query\" class=\"code-anchor\">query</a>\n} from '@angular/animations';\n\n\n// Routable animations\nexport const slideInAnimation =\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimation', [\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('heroes &lt;=&gt; hero', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%'}))\n        ]),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%'}))\n        ])\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n    ])\n  ]);\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27py7vtzemdpuw97fnlg3n8qm\">該檔案做了如下工作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rr1khs7k55ivhzchnyio4qwl\">匯入動畫符號以建立動畫觸發器、控制狀態並管理狀態之間的轉場。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dj23p9yhil997pxhvkyhmjo56\">匯出了一個名叫 <code>slideInAnimation</code> 的常數，並把它設定為一個名叫 <code>routeAnimation</code> 的動畫觸發器。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vl625ls4mqsk7hjowj2malud\">定義一個轉場動畫，當在 <code>heroes</code> 和 <code>hero</code> 路由之間來回切換時，如果進入（<code>:enter</code>）應用檢視則讓元件從螢幕的左側滑入，如果離開（<code>:leave</code>）應用檢視則讓元件從右側劃出。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7spliuij8wurw9tcz6tpqsbti\">回到 <code>AppComponent</code>，從 <code>@angular/router</code> 套件匯入 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>，並從 <code>'./animations.ts</code> 匯入 <code>slideInAnimation</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e73ov13ew1uugnhm5tuymxed0\">為包含 <code>slideInAnimation</code> 的 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元資料新增一個 <code>animations</code> 陣列。</p>\n<code-example header=\"src/app/app.component.ts (animations)\" path=\"router/src/app/app.component.2.ts\" region=\"animation-imports\">\nimport { <a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a> } from '@angular/router';\nimport { slideInAnimation } from './animations';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  animations: [ slideInAnimation ]\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1ig18x4ytiir83nas9lhdru6\">要想使用路由動畫，就要把 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 包裝到一個元素中。再把 <code>@routeAnimation</code> 觸發器繫結到該元素上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djx820q8mtdvlugpxr8voasgy\">為了把 <code>@routeAnimation</code> 轉場轉場到指定的狀態，你需要從 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 的 <code>data</code> 中提供它。<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 匯出成了一個範本變數 <code>outlet</code>，這樣你就可以繫結一個到路由出口的引用了。這個例子中使用了一個 <code>routerOutlet</code> 變數。</p>\n<code-example header=\"src/app/app.component.html (router outlet)\" path=\"router/src/app/app.component.2.html\">\n&lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;div [@routeAnimation]=\"getAnimationData()\"&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bogtekqt2yin0a4g8hm9fxqwg\"><code>@routeAnimation</code> 屬性繫結到了 <code>getAnimationData()</code>，它會根據主路由所提供的 <code>data</code> 物件回傳 <code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a></code> 屬性。<code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a></code> 屬性會根據你在 <code>animations.ts</code> 中定義 <code>slideInAnimation</code> 時使用的 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a></code> 名稱進行對應。</p>\n<code-example header=\"src/app/app.component.ts (router outlet)\" path=\"router/src/app/app.component.2.ts\" region=\"function-binding\">\nexport class AppComponent {\n  constructor(private contexts: <a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a>) {}\n\n  getAnimationData() {\n      return this.contexts.getContext('primary')?.route?.snapshot?.data?.['<a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>'];\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"svkhr7d1v95t0nmy38m46u0l\">如果在兩個路由之間切換，導向進來時，<code>HeroDetailComponent</code> 和 <code>HeroListComponent</code> 會從左側滑入；導向離開時將會從右側劃出。</p>\n<p><a id=\"milestone-3-wrap-up\"></a></p>\n<h3 id=\"milestone-3-wrap-up\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azqzd9d4v8yekd594038qcb6b\">里程碑 3 的小結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-3-wrap-up\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ai2sahn0wct2hpe8l2yquux0o\">本節包括以下內容：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6iy6qqp1swwn19nbltgnhi044\">把應用組織成屬性區</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2h0u1bbk63djupjr2lwcy9s4e\">指令式的從一個元件導向到另一個</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14sx1fs9uw94cafxua0kzxyn2\">透過路由引數傳遞訊息，並在元件中訂閱它們</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jcfsrcpj889mfupwiqltz3pv\">把這個屬性分割槽模組匯入根模組 <code>AppModule</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6olp3cqtegllguj6pejik5a0c\">把動畫應用到路由元件上</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0ao7q68r2roc8hwtd42exhw6\">做完這些修改之後，目錄結構如下：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-router-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          crisis-list\n        </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              crisis-list.component.css\n            </div>\n            <div class=\"file\">\n              crisis-list.component.html\n            </div>\n            <div class=\"file\">\n              crisis-list.component.ts\n            </div>\n          </div>\n        <div class=\"file\">\n          heroes\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            hero-detail\n          </div>\n            <div class=\"children\">\n              <div class=\"file\">\n                hero-detail.component.css\n              </div>\n              <div class=\"file\">\n                hero-detail.component.html\n              </div>\n              <div class=\"file\">\n                hero-detail.component.ts\n              </div>\n            </div>\n          <div class=\"file\">\n            hero-list\n          </div>\n            <div class=\"children\">\n              <div class=\"file\">\n                hero-list.component.css\n              </div>\n              <div class=\"file\">\n                hero-list.component.html\n              </div>\n              <div class=\"file\">\n                hero-list.component.ts\n              </div>\n            </div>\n          <div class=\"file\">\n            hero.service.ts\n          </div>\n          <div class=\"file\">\n            hero.ts\n          </div>\n          <div class=\"file\">\n            heroes-routing.module.ts\n          </div>\n          <div class=\"file\">\n            heroes.module.ts\n          </div>\n          <div class=\"file\">\n            mock-heroes.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          page-not-found\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            page-not-found.component.css\n          </div>\n          <div class=\"file\">\n            page-not-found.component.html\n          </div>\n          <div class=\"file\">\n            page-not-found.component.ts\n          </div>\n        </div>\n      </div>\n      <div class=\"file\">\n        animations.ts\n      </div>\n      <div class=\"file\">\n        app.component.css\n      </div>\n      <div class=\"file\">\n        app.component.html\n      </div>\n      <div class=\"file\">\n        app.component.ts\n      </div>\n      <div class=\"file\">\n        app.module.ts\n      </div>\n      <div class=\"file\">\n        app-routing.module.ts\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        message.service.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules …\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9iuve2ut6o6sqqvpu3xnn23z\">這裡是當前版本的範例程式相關檔案。</p>\n<code-tabs>\n    <code-pane header=\"animations.ts\" path=\"router/src/app/animations.ts\">\nimport {\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>, <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>, group,\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>, <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>, <a href=\"api/animations/query\" class=\"code-anchor\">query</a>\n} from '@angular/animations';\n\n\n// Routable animations\nexport const slideInAnimation =\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimation', [\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('heroes &lt;=&gt; hero', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%'}))\n        ]),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%'}))\n        ])\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n    ])\n  ]);\n\n\n</code-pane>\n    <code-pane header=\"app.component.html\" path=\"router/src/app/app.component.2.html\">\n&lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;div [@routeAnimation]=\"getAnimationData()\"&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"app.component.ts\" path=\"router/src/app/app.component.2.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a> } from '@angular/router';\nimport { slideInAnimation } from './animations';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  animations: [ slideInAnimation ]\n})\nexport class AppComponent {\n  constructor(private contexts: <a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a>) {}\n\n  getAnimationData() {\n      return this.contexts.getContext('primary')?.route?.snapshot?.data?.['<a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>'];\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app.module.ts\" path=\"router/src/app/app.module.3.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule } from './heroes/heroes.module';\n\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n    <code-pane header=\"app-routing.module.ts\" path=\"router/src/app/app-routing.module.2.ts\" region=\"milestone3\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\n/* . . . */\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n/* . . . */\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n</code-pane>\n    <code-pane header=\"hero-list.component.css\" path=\"router/src/app/heroes/hero-list/hero-list.component.css\">\n/* HeroListComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 100%;\n}\n.heroes li {\n  position: relative;\n  cursor: pointer;\n}\n\n.heroes li:hover {\n  left: .1em;\n}\n\n.heroes a {\n  color: black;\n  text-decoration: none;\n  display: block;\n  font-size: 1.2rem;\n  background-color: #eee;\n  margin: .5rem .5rem .5rem 0;\n  padding: .5rem 0;\n  border-radius: 4px;\n}\n\n.heroes a:hover {\n  color: #2c3a41;\n  background-color: #e6e6e6;\n}\n\n.heroes a:active {\n  background-color: #525252;\n  color: #fafafa;\n}\n\n.heroes .selected a {\n  background-color: #d6e6f7;\n}\n\n.heroes .selected a:hover {\n  background-color: #bdd7f5;\n}\n\n.heroes .badge {\n  padding: .5em .6em;\n  color: white;\n  background-color: #435b60;\n  min-width: 16px;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-list.component.html\" path=\"router/src/app/heroes/hero-list/hero-list.component.html\">\n&lt;h2&gt;Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>\" [class.selected]=\"hero.id === selectedId\"&gt;\n    &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\"&gt;\n      &lt;span class=\"badge\"&gt;{{ hero.id }}&lt;/span&gt;{{ hero.name }}\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\"&gt;Go to sidekicks&lt;/button&gt;\n\n\n</code-pane>\n    <code-pane header=\"hero-list.component.ts\" path=\"router/src/app/heroes/hero-list/hero-list.component.ts\">\n// TODO: Feature Componentized like CrisisCenter\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { HeroService } from '../hero.service';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  styleUrls: ['./hero-list.component.css']\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$!: Observable&lt;Hero[]&gt;;\n  selectedId = 0;\n\n  constructor(\n    private service: HeroService,\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>\n  ) {}\n\n  ngOnInit() {\n    this.heroes$ = this.route.paramMap.pipe(\n      switchMap(params =&gt; {\n        this.selectedId = parseInt(params.get('id')!, 10);\n        return this.service.getHeroes();\n      })\n    );\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-detail.component.html\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.html\">\n&lt;h2&gt;Heroes&lt;/h2&gt;\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> as hero\"&gt;\n  &lt;h3&gt;{{ hero.name }}&lt;/h3&gt;\n  &lt;p&gt;Id: {{ hero.id }}&lt;/p&gt;\n  &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n  &lt;input type=\"text\" id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/&gt;\n  &lt;button type=\"button\" (click)=\"gotoHeroes(hero)\"&gt;Back&lt;/button&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"hero-detail.component.ts\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\">\nimport { switchMap } from 'rxjs/operators';\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { HeroService } from '../hero.service';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: ['./hero-detail.component.css']\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero$!: Observable&lt;Hero&gt;;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n    private service: HeroService\n  ) {}\n\n  ngOnInit() {\n    this.hero$ = this.route.paramMap.pipe(\n      switchMap((params: <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>) =&gt;\n        this.service.getHero(params.get('id')!))\n    );\n  }\n\n  gotoHeroes(hero: Hero) {\n    const heroId = hero ? hero.id : null;\n    // Pass along the hero id if available\n    // so that the HeroList component can select that hero.\n    // Include a junk 'foo' property for fun.\n    this.router.navigate(['/heroes', { id: heroId, foo: 'foo' }]);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hero.service.ts\" path=\"router/src/app/heroes/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&lt;Hero[]&gt; {\n    // TODO: send the message _after_ fetching the heroes\n    this.messageService.add('HeroService: fetched heroes');\n    return of(HEROES);\n  }\n\n  getHero(id: number | string) {\n    return this.getHeroes().pipe(\n      // (+) before `id` turns the string into a number\n      map((heroes: Hero[]) =&gt; heroes.find(hero =&gt; hero.id === +id)!)\n    );\n  }\n}\n\n\n\n</code-pane>\n    <code-pane header=\"heroes.module.ts\" path=\"router/src/app/heroes/heroes.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nimport { HeroesRoutingModule } from './heroes-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesRoutingModule\n  ],\n  declarations: [\n    HeroListComponent,\n    HeroDetailComponent\n  ]\n})\nexport class HeroesModule {}\n\n\n</code-pane>\n    <code-pane header=\"heroes-routing.module.ts\" path=\"router/src/app/heroes/heroes-routing.module.2.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes',  component: HeroListComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'heroes' } },\n  { path: 'hero/:id', component: HeroDetailComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'hero' } }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroesRoutingModule { }\n\n</code-pane>\n    <code-pane header=\"message.service.ts\" path=\"router/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"milestone-4\"></a></p>\n<h2 id=\"milestone-4-crisis-center-feature\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"293tg4025r7f70qt79khnw0as\">里程碑 4：危機中心<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-4-crisis-center-feature\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4rp3uz5xisfbm29qa504t7sbm\">本節將向你展示如何在應用中新增子路由並使用相對路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85iewc87xujfkbgte7k89hu69\">要為應用當前的危機中心新增更多屬性，請執行類似於 heroes 屬性的步驟：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"by6tb01kn4uxemkg3ojnal44u\">在 <code>src/app</code> 目錄下建立一個 <code>crisis-center</code> 子目錄</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ielscwu4c966mbjkgv2oxy6n\">把 <code>app/heroes</code> 中的檔案和目錄複製到新的 <code>crisis-center</code> 資料夾中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mfthkhsytydsl8oxp1sukde4\">在這些新建的檔案中，把每個 \"hero\" 都改成 \"crisis\"，每個 \"heroes\" 都改成 \"crises\"</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8elmzq19x1epvanm8zruwz7b1\">把這些 NgModule 檔案改名為 <code>crisis-center.module.ts</code> 和 <code>crisis-center-routing.module.ts</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dney7k2herw0f6r9byuqusuyk\">使用 mock 的 crises 來代替 mock 的 heroes：</p>\n<code-example header=\"src/app/crisis-center/mock-crises.ts\" path=\"router/src/app/crisis-center/mock-crises.ts\">\nimport { Crisis } from './crisis';\n\nexport const CRISES: Crisis[] = [\n  { id: 1, name: 'Dragon Burning Cities' },\n  { id: 2, name: 'Sky Rains Great White Sharks' },\n  { id: 3, name: 'Giant Asteroid Heading For Earth' },\n  { id: 4, name: 'Procrastinators Meeting Delayed Again' },\n];\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4rtdmoexr8eiyrab92mf1ivwz\">最終的危機中心可以作為引入子路由這個新概念的基礎。你可以把英雄管理保持在當前狀態，以便和<em>危機中心</em>進行對比。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pwyevu8320oxoeo10j26sowc\">遵循<a href=\"https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\" title=\"Separation of Concerns\"><em>關注點分離（Separation of Concerns）</em>原則</a>，對<em>危機中心</em>的修改不會影響 <code>AppModule</code> 或其它屬性模組中的元件。</p>\n</div>\n<p><a id=\"crisis-child-routes\"></a></p>\n<h3 id=\"a-crisis-center-with-child-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nzwbtv2p5qu0liucto3eg658\">帶有子路由的危機中心<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#a-crisis-center-with-child-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1m5ecwe55j7tp7qrzfzbemtlg\">本節會展示如何組織危機中心，來滿足 Angular 應用所推薦的模式：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awj680d2fx6ncb32o96wpdzik\">把每個屬性放在自己的目錄中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68ywaxob68gnml8zs5j1f81n1\">每個屬性都有自己的 Angular 屬性模組</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwideq8f3k1zwrwb6e699usmt\">每個屬性區都有自己的根元件</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5h2fg2qfi0gx6kyudxdhmiq1t\">每個屬性區的根元件中都有自己的路由出口及其子路由</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e37i98zu4j8iozcnz9l4lbo7m\">屬性區內的路由很少（也許永遠不會）與其它屬性區的路由產生交叉</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9x5wkhbdebirbva122bito3z\">如果你的應用具有多個屬性區，那些屬性的元件樹可能由多個元件構成，每個都包含一些其它相關元件的分支。</p>\n<p><a id=\"child-routing-component\"></a></p>\n<h3 id=\"child-routing-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28lysni9wlcl9n573y1wu2m7f\">子路由元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#child-routing-component\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgwhsu6h576vhlu3y0ozg0r8u\">在 <code>crisis-center</code> 目錄下生成一個 <code>CrisisCenter</code> 元件：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component crisis-center/crisis-center\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4t0cm544rzhthsfpaqbtclexu\">使用如下程式碼更新元件範本：</p>\n<code-example header=\"src/app/crisis-center/crisis-center/crisis-center.component.html\" path=\"router/src/app/crisis-center/crisis-center/crisis-center.component.html\">\n&lt;h2&gt;Crisis Center&lt;/h2&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hqws76mi8td4mnnwxhp5imq1\"><code>CrisisCenterComponent</code> 和 <code>AppComponent</code> 有下列共同點：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8za8wp4wjkkwj9pfgqd2idjz2\">它是危機中心屬性區的<em>根</em>，正如 <code>AppComponent</code> 是整個應用的根</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnnouxsdwje4y5fp4mrvkfewc\">它是危機管理屬性區的殼，正如 <code>AppComponent</code> 是管理高層工作流的殼</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bja7lu2dw4m25o6m6ocs9mwiz\">就像大多數的殼一樣，<code>CrisisCenterComponent</code> 類別是最小化的，因為它沒有業務邏輯，它的範本中沒有連結，只有一個標題和用於放置危機中心的子元件的 <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code>。</p>\n<p><a id=\"child-route-config\"></a></p>\n<h3 id=\"child-route-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1j88kgw5jrboldoh83ix012h4\">子路由設定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#child-route-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4dlsygqdbfebx5hb9c35mm1k\">在 <code>crisis-center</code> 目錄下生成一個 <code>CrisisCenterHome</code> 元件，作為 \"危機中心\" 屬性的宿主頁面。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component crisis-center/crisis-center-home\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dsmh4k1fjunqkzolx6zfbh7y\">用一條歡迎訊息修改 <code>Crisis Center</code> 中的範本。</p>\n<code-example header=\"src/app/crisis-center/crisis-center-home/crisis-center-home.component.html\" path=\"router/src/app/crisis-center/crisis-center-home/crisis-center-home.component.html\">\n&lt;h3&gt;Welcome to the Crisis Center&lt;/h3&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hw7e07uotjs7nd2bo7txd0ag\">把 <code>heroes-routing.module.ts</code> 檔案複製過來，改名為 <code>crisis-center-routing.module.ts</code>，並修改它。這次你要把子路由定義在父路由 <code>crisis-center</code> 中。</p>\n<code-example header=\"src/app/crisis-center/crisis-center-routing.module.ts (Routes)\" path=\"router/src/app/crisis-center/crisis-center-routing.module.1.ts\" region=\"routes\">\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7apkyaeb2qt131iewuortnl8n\">注意，父路由 <code>crisis-center</code> 有一個 <code>children</code> 屬性，它有一個包含 <code>CrisisListComponent</code> 的路由。<code>CrisisListComponent</code> 路由還有一個帶兩個路由的 <code>children</code> 陣列。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alie2dya54shzgx8khuzkze2i\">這兩個路由分別導向到了<em>危機中心</em>的兩個子元件：<code>CrisisCenterHomeComponent</code> 和 <code>CrisisDetailComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ckb23rjh9tp1kkxft13jtrt5\">對這些子路由的處理中有一些重要的差異。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17cblkkgql9kn2viqz1ghfwai\">路由器會把這些路由對應的元件放在 <code>CrisisCenterComponent</code> 的 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 中，而不是 <code>AppComponent</code> 殼元件中的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csoaamkr33fpx1rdeglwo1wft\"><code>CrisisListComponent</code> 包含危機清單和一個 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>，用以顯示 <code>Crisis Center Home</code> 和 <code>Crisis Detail</code> 這兩個路由元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ommg38tg6d86lcg0pqm3gfe2\"><code>Crisis Detail</code> 路由是 <code>Crisis List</code> 的子路由。由於路由器預設會<a href=\"guide/router-tutorial-toh#reuse\">複用元件</a>，因此當你選擇了另一個危機時，<code>CrisisDetailComponent</code> 會被複用。\n作為對比，回頭看看 <code>Hero Detail</code> 路由，每當你從清單中選擇了不同的英雄時，<a href=\"guide/router-tutorial-toh#snapshot-the-no-observable-alternative\">都會重新建立該組件</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qdy3cgxztntl2on0wlzdhok2\">在頂層，以 <code>/</code> 開頭的路徑指向的總是應用的根。但這裡是子路由。它們是在父路由路徑的基礎上做出的擴充套件。在路由樹中每深入一步，你就會在該路由的路徑上新增一個斜線 <code>/</code>（除非該路由的路徑是空的）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84tqf9a5kc2ethgz7aodvzrnz\">如果把該邏輯應用到危機中心中的導向，那麼父路徑就是 <code>/crisis-center</code>。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4unhrawxkoguy3lutfl56rqmd\">要導向到 <code>CrisisCenterHomeComponent</code>，完整的 URL 是 <code>/crisis-center</code> （<code>/crisis-center</code> + <code>''</code> + <code>''</code>）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o3gvzmc77ufu638p7oqnlalm\">要導向到 <code>CrisisDetailComponent</code> 以展示 <code>id=2</code> 的危機，完整的 URL 是 <code>/crisis-center/2</code> （<code>/crisis-center</code> + <code>''</code> + <code>'/2'</code>）</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lun7z4zyd4b4o2x8nwg7rk2w\">本例子中包含站點部分的絕對 URL，就是：</p>\n<code-example>\n\nlocalhost:4200/crisis-center/2\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xxn6c49jtll01sksd7n80ya5\">這裡是完整的 <code>crisis-center.routing.ts</code> 及其匯入語句。</p>\n<code-example header=\"src/app/crisis-center/crisis-center-routing.module.ts (excerpt)\" path=\"router/src/app/crisis-center/crisis-center-routing.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent } from './crisis-detail/crisis-detail.component';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-example>\n<p><a id=\"import-crisis-module\"></a></p>\n<h3 id=\"import-crisis-center-module-into-the-appmodule-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ujorqv0dexdlwo7n62ozagnd\">把危機中心模組匯入到 <code>AppModule</code> 的路由中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#import-crisis-center-module-into-the-appmodule-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0tue49oshioaeanpgealkuxi\">就像 <code>HeroesModule</code> 模組中一樣，你必須把 <code>CrisisCenterModule</code> 新增到 <code>AppModule</code> 的 <code>imports</code> 陣列中，就在 <code>AppRoutingModule</code> <em>前面</em>：</p>\n<code-tabs>\n    <code-pane header=\"src/app/crisis-center/crisis-center.module.ts\" path=\"router/src/app/crisis-center/crisis-center.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent } from './crisis-detail/crisis-detail.component';\n\nimport { CrisisCenterRoutingModule } from './crisis-center-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    CrisisCenterRoutingModule\n  ],\n  declarations: [\n    CrisisCenterComponent,\n    CrisisListComponent,\n    CrisisCenterHomeComponent,\n    CrisisDetailComponent\n  ]\n})\nexport class CrisisCenterModule {}\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.module.ts (import CrisisCenterModule)\" path=\"router/src/app/app.module.4.ts\" region=\"crisis-center-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule } from './heroes/heroes.module';\nimport { CrisisCenterModule } from './crisis-center/crisis-center.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    CrisisCenterModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n</code-tabs>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ukuqsks5jfhvol4qcmy2itna\">這些模組的匯入順序是至關重要的，因為這些模組中定義的路由的順序會影響路由的對應順序。如果先導入 <code>AppModule</code>，它的萬用字元路由 (<code>path: '**'</code>)。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30zi4y0ui8yw07tzcpospk6y0\">從 <code>app.routing.ts</code> 中移除危機中心的初始路由。因為現在是 <code>HeroesModule</code> 和 <code>CrisisCenter</code> 模組提供了這些屬性路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63qsmvfkogunss8e74l5bwzz3\"><code>app-routing.module.ts</code> 檔案中只有應用的頂層路由，比如預設路由和萬用字元路由。</p>\n<code-example header=\"src/app/app-routing.module.ts (v3)\" path=\"router/src/app/app-routing.module.3.ts\" region=\"v3\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<p><a id=\"relative-navigation\"></a></p>\n<h3 id=\"relative-navigation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56uvwvxuobxtcwk45vh38db0a\">相對導向<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#relative-navigation\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3i7uh22qk3533jokzc5tmnu6s\">雖然建立出了危機中心屬性區，你卻仍在使用以斜槓開頭的<strong>絕對路徑</strong>來導向到危機詳情的路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wiknk4h6aupwxhh2ryg1owqq\">路由器會從路由設定的頂層來對應像這樣的絕對路徑。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5o7odgni1k5ud3ekc7ypb2ab2\">你固然可以繼續像危機中心屬性區一樣使用絕對路徑，但是那樣會把連結釘死在特定的父路由結構上。如果你修改了父路徑 <code>/crisis-center</code>，那就不得不修改每一個連結引數陣列。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqc3xrkpw0yos569hxl6t2ooe\">透過改成定義<em>相對於</em>當前 URL 的路徑，你可以把連結從這種依賴中解放出來。當你修改了該屬性區的父路由路徑時，該屬性區內部的導向仍然完好無損。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9aqbznp7kekdj8i4teu0gypzu\">路由器支援在<em>連結引數陣列</em>中使用『目錄式』語法來為查詢路由名提供幫助：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqjm96c1pu502z8wzl2l9z73z\">類似目錄的語法</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ubk4whrf2a1nkajc6axelsls\"><code>./</code> \n<br> \n<code>無前導斜槓</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5js7uy7kcfj62ndizmh2qwest\">相對於當前級別。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>../</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dxm7y98bqrwa5ukkrwqxr4n9\">路由路徑上一級。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11d72nqahughkyd6ctl9qceak\">你可以把相對導向語法和一個祖先路徑組合起來用。如果不得不導向到一個兄弟路由，你可以用 <code>../&lt;sibling&gt;</code> 來回到上一級，然後進入兄弟路由路徑中。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e6xnwyirrau67sxoyhamqja7\">用 <code>Router.navigate</code> 方法導向到相對路徑時，你必須提供當前的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>，來讓路由器知道你現在位於路由樹中的什麼位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqr0dug3zg8vcav5rzeks9o9o\">在<em>連結引數陣列</em>後面，新增一個帶有 <code>relativeTo</code> 屬性的物件，並把它設定為當前的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。這樣路由器就會基於當前啟用路由的位置來計算出目標 URL。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6d5n4f4g4xuph4gxoj9v0bx0t\">當呼叫路由器的 <code>navigateByUrl()</code> 時，<strong>總是</strong>要指定完整的絕對路徑。</p>\n</div>\n<p><a id=\"nav-to-crisis\"></a></p>\n<h3 id=\"navigate-to-crisis-list-with-a-relative-url\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hip5lljdgebm4wo340jw913p\">使用相對 URL 導向到危機清單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#navigate-to-crisis-list-with-a-relative-url\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95poj8dtt12kgo9hgfh7hrd0x\">你已經注入了組成相對導向路徑所需的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eo7kteenfx1ld9py3xrg6pbgw\">如果用 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 來代替 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服務進行導向，就要使用相同的連結引數陣列，不過不再需要提供 <code>relativeTo</code> 屬性。<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 已經隱含在了 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ab6xm497ysdg2veamud3doss\">修改 <code>CrisisDetailComponent</code> 的 <code>gotoCrises()</code> 方法，來使用相對路徑回傳<em>危機中心</em>清單。</p>\n<code-example header=\"src/app/crisis-center/crisis-detail/crisis-detail.component.ts (relative navigation)\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\" region=\"gotoCrises-navigate\">\n// Relative navigation back to the crises\nthis.router.navigate(['../', { id: crisisId, foo: 'foo' }], { relativeTo: this.route });\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33n2c72h6eg1xxrq2zdqvzys\">注意這個路徑使用了 <code>../</code> 語法回傳上一級。如果當前危機的 <code>id</code> 是 <code>3</code>，那麼最終回傳到的路徑就是 <code>/crisis-center/;id=3;foo=foo</code>。</p>\n<p><a id=\"named-outlets\"></a></p>\n<h3 id=\"displaying-multiple-routes-in-named-outlets\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aj4bie0k14mhsy576i91u49vq\">用命名出口（outlet）顯示多重路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#displaying-multiple-routes-in-named-outlets\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pj0c5p5ep1xx06xbm5jkt0xt\">你決定給使用者提供一種方式來聯絡危機中心。當用戶點選『Contact』按鈕時，你要在一個彈出框中顯示一條訊息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6dk6602viy9tpxtpr9xppdlcx\">即使在應用中的不同頁面之間切換，這個彈出框也應該始終保持開啟狀態，直到使用者傳送了訊息或者手動取消。顯然，你不能把這個彈出框跟其它放到頁面放到同一個路由出口中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16zm9o04p49ivbar9hzxhjd9s\">迄今為止，你只定義過單路由出口，並且在其中巢狀了子路由以便對路由分組。在每個範本中，路由器只能支援一個無名主路由出口。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvcs9zgoe18c3k0utnly13m3z\">範本還可以有多個命名的路由出口。每個命名出口都自己有一組帶元件的路由。多重出口可以在同一時間根據不同的路由來顯示不同的內容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"se9u4wl60o7vqc9i6hssq7fx\">在 <code>AppComponent</code> 中新增一個名叫『popup』的出口，就在無名出口的下方。</p>\n<code-example header=\"src/app/app.component.html (outlets)\" path=\"router/src/app/app.component.4.html\" region=\"outlets\">\n&lt;div [@routeAnimation]=\"getAnimationData()\"&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84x61pby4wl1mb86sn05gh1h\">一旦你學會瞭如何把一個彈出框元件路由到該出口，那裡就是將會出現彈出框的地方。</p>\n<p><a id=\"secondary-routes\"></a></p>\n<h4 id=\"secondary-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aswnyj4h6d51g77ar73uepbjx\">第二路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#secondary-routes\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2f2tsyhzbqq59e28nrwu61dx7\">命名出口是<em>第二路由</em>的目標。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ars39gi7ix6nx9iilrdxqx32r\">第二路由很像主路由，設定方式也一樣。它們只有一些關鍵的不同點。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8sn1jejwnwzyh4ug7zjztcqvn\">它們彼此互不依賴</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hqtsb1mqxuvruib2z0kl92gv\">它們與其它路由組合使用</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d8qbarwylfl3vsmxkijd8cmjw\">它們顯示在命名出口中</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99438ai7t9vo74fihzf49nhzp\">生成一個新的元件來組合這個訊息。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component compose-message\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgf18gs60qglhw4c7k9ttv7vf\">它顯示一個簡單的表單，包括一個頭、一個訊息輸入框和兩個按鈕：『Send』和『Cancel』。</p>\n<div class=\"lightbox\">\n<img alt=\"Contact textarea with send and cancel buttons\" src=\"generated/images/guide/router/contact-form.png\" width=\"400\" height=\"377\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6gzfsxrhuy4w2qqqew4wz5h8m\">下面是該組件及其範本和樣式：</p>\n<code-tabs>\n    <code-pane header=\"src/app/compose-message/compose-message.component.html\" path=\"router/src/app/compose-message/compose-message.component.html\">\n&lt;h3&gt;Contact Crisis Center&lt;/h3&gt;\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"details\"&gt;\n  {{ details }}\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;div&gt;\n    &lt;label for=\"message\"&gt;Enter your message: &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;<a href=\"api/forms/DefaultValueAccessor\" class=\"code-anchor\">textarea</a> id=\"message\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"message\" rows=\"10\" cols=\"35\" [disabled]=\"sending\"&gt;&lt;/<a href=\"api/forms/DefaultValueAccessor\" class=\"code-anchor\">textarea</a>&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!sending\"&gt;\n  &lt;button type=\"button\" (click)=\"send()\"&gt;Send&lt;/button&gt;\n  &lt;button type=\"button\" (click)=\"cancel()\"&gt;Cancel&lt;/button&gt;\n&lt;/p&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/compose-message/compose-message.component.ts\" path=\"router/src/app/compose-message/compose-message.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-compose-message',\n  templateUrl: './compose-message.component.html',\n  styleUrls: ['./compose-message.component.css']\n})\nexport class ComposeMessageComponent {\n  details = '';\n  message = '';\n  sending = false;\n\n  constructor(private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n\n  send() {\n    this.sending = true;\n    this.details = 'Sending Message...';\n\n    setTimeout(() =&gt; {\n      this.sending = false;\n      this.closePopup();\n    }, 1000);\n  }\n\n  cancel() {\n    this.closePopup();\n  }\n\n  closePopup() {\n    // Providing a `null` value to the named outlet\n    // clears the contents of the named outlet\n    this.router.navigate([{outlets: {popup: null}}], {relativeTo: this.route.parent});\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/compose-message/compose-message.component.css\" path=\"router/src/app/compose-message/compose-message.component.css\">\n<a href=\"api/forms/DefaultValueAccessor\" class=\"code-anchor\">textarea</a> {\n  width: 100%;\n  margin-top: 1rem;\n  font-size: 1.2rem;\n  box-sizing: border-box;\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2s1i0e1d3b8uevi3vkm4s17j5\">它看起來幾乎和你以前見過其它元件一樣，但有兩個值得注意的區別。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44tcy2pgl7fv8gtwscwhuvslt\"><strong>注意</strong>：<br>\n<code>send()</code> 方法透過在『傳送』訊息之前等待一秒並關閉彈出視窗來模擬延遲。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bak75zxyrsek080wz0qzl5pc\"><code>closePopup()</code> 方法用把 <code>popup</code> 出口導向到 <code>null</code> 的方式關閉了彈出框，它在<a href=\"guide/router-tutorial-toh#clear-secondary-routes\">稍後的部分</a>有講解。</p>\n<p><a id=\"add-secondary-route\"></a></p>\n<h4 id=\"add-a-secondary-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1um8eimirk3ofo7g40jxxotcb\">新增第二路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#add-a-secondary-route\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ch02ktv4hv0zswz8cehxt2r6f\">開啟 <code>AppRoutingModule</code>，並把一個新的 <code>compose</code> 路由新增到 <code>appRoutes</code> 中。</p>\n<code-example header=\"src/app/app-routing.module.ts (compose route)\" path=\"router/src/app/app-routing.module.3.ts\" region=\"compose\">\n{\n  path: 'compose',\n  component: ComposeMessageComponent,\n  outlet: 'popup'\n},\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jdl6o3ll36ct4ak9z7c7padg\">除了 <code>path</code> 和 <code>component</code> 屬性之外還有一個新的屬性 <code>outlet</code>，它被設定成了 <code>'popup'</code>。這個路由現在指向了 <code>popup</code> 出口，而 <code>ComposeMessageComponent</code> 也將顯示在那裡。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lv09uo8qyx3k6uva3t7eru29\">為了給使用者某種途徑來開啟這個彈出框，還要往 <code>AppComponent</code> 範本中新增一個『Contact』連結。</p>\n<code-example header=\"src/app/app.component.html (contact-link)\" path=\"router/src/app/app.component.4.html\" region=\"contact-link\">\n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\"&gt;Contact&lt;/a&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zd1jq4palrj729yn4rhsgfy1\">雖然 <code>compose</code> 路由被設定到了 <code>popup</code> 出口上，但這仍然不足以把該路由和 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令聯絡起來。你還要在<em>連結引數陣列</em>中指定這個命名出口，並透過屬性繫結的形式把它繫結到 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0m8znse0kjw1pfk5w7fhlebt\"><em>連結引數陣列</em>包含一個只有一個 <code>outlets</code> 屬性的物件，它的值是另一個物件，這個物件以一個或多個路由的出口名作為屬性名。在這裡，它只有一個出口名『popup』，它的值則是另一個<em>連結引數陣列</em>，用於指定 <code>compose</code> 路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctn9ewbjbm7gryxj9yrgvkuei\">換句話說，當用戶點選此連結時，路由器會在路由出口 <code>popup</code> 中顯示與 <code>compose</code> 路由相關聯的元件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajctdbg9lnc0cg2c5325erkln\">當只需要考慮一個路由和一個無名出口時，外部物件中的這個 <code>outlets</code> 物件是完全不必要的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e039oa0l21vb0dbu13gh8ux0\">路由器假設這個路由指向了無名的主出口，併為你建立這些物件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evq49ipc3t06wryax5t0t8n3n\">路由到一個命名出口會揭示一個路由屬性：你可以在同一個 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令中為多個路由出口指定多個路由。</p>\n</div>\n<p><a id=\"secondary-route-navigation\"></a></p>\n<h4 id=\"secondary-route-navigation-merging-routes-during-navigation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9getnz6cu98tz5uotd1xor5e7\">第二路由導向：在導向期間合併路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#secondary-route-navigation-merging-routes-during-navigation\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o3h4q06zrljayjjxf792g7gw\">導向到<em>危機中心</em>並點選『Contact』，你將會在瀏覽器的地址欄看到如下 URL。</p>\n<code-example format=\"http\" language=\"http\">\n\n<a href=\"api/common/http\" class=\"code-anchor\">http</a>://…/crisis-center(popup:compose)\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56tffo8n4fy99vp62oyxl4ioe\">這個 URL 中有意義的部分是 <code>...</code> 後面的這些：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ii3n5h6urql6vakxz9wnkceq\"><code>crisis-center</code> 是主導航。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9ll3xctqy6isa2osgyn22w54\">圓括號包裹的部分是第二路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nhh3qqdjjz6q04h73xaolxt\">第二路由包括一個出口名稱（<code>popup</code>）、一個冒號分隔符和第二路由的路徑（<code>compose</code>）。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0k8sl0z91ugvek97faogm6th\">點選 <em>Heroes</em> 連結，並再次檢視 URL。</p>\n<code-example format=\"http\" language=\"http\">\n\n<a href=\"api/common/http\" class=\"code-anchor\">http</a>://…/heroes(popup:compose)\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"310bbzomumor1qfsuxtrqlarv\">主導航的部分變化了，而第二路由沒有變。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0jghy45nbw5iq1yj53v9m99v\">路由器在導向樹中對兩個獨立的分支保持追蹤，並在 URL 中對這棵樹進行表達。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"deqp4bh26atqm504qrh9ctj0g\">你還可以新增更多出口和更多路由（無論是在頂層還是在巢狀的子層）來建立一個帶有多個分支的導向樹。路由器將會生成相應的 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6eumwz1emg0rh9731u8ba3xkv\">透過像前面那樣填充 <code>outlets</code> 物件，你可以告訴路由器立即導向到一棵完整的樹。然後把這個物件透過一個<em>連結引數陣列</em>傳給 <code>router.navigate</code> 方法。</p>\n<p><a id=\"clear-secondary-routes\"></a></p>\n<h4 id=\"clearing-secondary-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0fcr26ifd4gex4re1z2dyuqp\">清除第二路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#clearing-secondary-routes\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gydz48rtoyg1vd1fag85jned\">像常規出口一樣，二級出口會一直存在，直到你導向到新元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an1vxw0nfnzvwzex3yn32ibbi\">每個第二齣口都有自己獨立的導向，跟主出口的導向彼此獨立。修改主出口中的當前路由並不會影響到 <code>popup</code> 出口中的。這就是為什麼在危機中心和英雄管理之間導向時，彈出框始終都是可見的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8yc2u9fz7dguu9l14xcaxiii\">再看 <code>closePopup()</code> 方法：</p>\n<code-example header=\"src/app/compose-message/compose-message.component.ts (closePopup)\" path=\"router/src/app/compose-message/compose-message.component.ts\" region=\"closePopup\">\nclosePopup() {\n  // Providing a `null` value to the named outlet\n  // clears the contents of the named outlet\n  this.router.navigate([{outlets: {popup: null}}], {relativeTo: this.route.parent});\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0vzb4ct1vuaqj9ltc0osktpg\">單擊 『send』 或 『cancel』 按鈕可以清除彈出檢視。<code>closePopup()</code> 函式會使用 <code><a href=\"api/router/Router#navigate\" class=\"code-anchor\">Router.navigate()</a></code> 方法強制導向，並傳入一個<a href=\"guide/router-tutorial-toh#link-parameters-array\">連結引數陣列</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kgzcvwqm1z7nsi2p4jcowmxu\">就像在 <code>AppComponent</code> 中繫結到的 <em>Contact</em> <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 一樣，它也包含了一個帶 <code>outlets</code> 屬性的物件。\n<code>outlets</code> 屬性的值是另一個物件，該物件用一些出口名稱作為屬性名。\n唯一的命名出口是 <code>'popup'</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lo97oyjm7jtk6xo8e5ruy6t\">但這次，<code>'popup'</code> 的值是 <code>null</code>。<code>null</code> 不是一個路由，但卻是一個合法的值。把 <code>popup</code> 這個 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 設定為 <code>null</code> 會清除該出口，並且從當前 URL 中移除第二路由 <code>popup</code>。</p>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpn6tgnin6a6mrom99jcgfna2\"><strong>注意:</strong> 傳遞給\n<code><a href=\"api/router/Router#navigate\" class=\"code-anchor\">Router.navigate()</a></code>的陣列中的所有指令都會針對\n<code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>中的一個\n<em>特定段</em>。 我們將\n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>的父級指定為\n<code>relativeTo</code>選項，因為我們希望從包含其引用的段中移除\n<code>'popup'</code>。 始終要注意這些指令將應用於哪些段非常重要。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"br81f30r3z8snwa7a7mus8llq\">如果未提供\n<code>relativeTo</code>給\n<code><a href=\"api/router/Router#navigate\" class=\"code-anchor\">Router.navigate()</a></code>方法，指令將從根部開始處理。 在這種特殊情況下，我們可以省略\n<code>relativeTo</code>選項，因為\n<code>'popup'</code>出口位於設定的根級。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4aha1alwkobvnldajfksj6dqt\">如果要關閉任何段深度中出現的出口，可以透過從當前URL建立一個\n<code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>，遞迴清除與出口名稱對應的段\n<code>children</code>，最後使用當前\n<code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>的\n<code>root</code>段呼叫\n<code><a href=\"api/router/Router#navigateByUrl\" class=\"code-anchor\">Router.navigateByUrl()</a></code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cxmcex29tpduaabwrtz4pxr9\"><a id=\"guards\"></a>\n<a id=\"milestone-5-route-guards\"></a></p>\n<h2 id=\"milestone-5-route-guards\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6syg1gk8g3mmh90n42zspops0\">里程碑 5：路由守衛<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-5-route-guards\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bk1obpkedg11vxlec43vbems\">現在，<em>任何使用者</em>都能在<em>任何時候</em>導向到<em>任何地方</em>。但有時候出於種種原因需要控制對該應用的不同部分的訪問。可能包括如下場景：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35vjgw06evep8d53b3lv2ohsl\">該使用者可能無權導向到目標元件</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dmn1e11p41hp1bu73fdvac89\">可能使用者得先登入（認證）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80ojrcry2dxubpc2wpkcym1yg\">在顯示目標元件前，你可能得先獲取某些資料</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpx2yoy5vumzxwnnubyqinu5s\">在離開元件前，你可能要先儲存修改</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5h3tt1vs4y89wk2z6nrcb25qx\">你可能要詢問使用者：你是否要放棄本次更改，而不用儲存它們？</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adta29bzxyk1ahgg223wqg3qm\">你可以往路由設定中新增守衛，來處理這些場景。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77i4de6k98fivgg3iw6ej9kg2\">守衛回傳一個值，以控制路由器的行為：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwjtbd29xg40cfstdf092ivac\">守衛回傳值</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3k38wf94es1g2wikmstu5eaj9\">導向過程繼續</td>\n</tr>\n<tr>\n<td align=\"left\"><code>false</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5uz1fgphfvpsyh5d1zn62xtet\">導向過程停止，使用者保持原位</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhthb3ox16msmbclm0jf7c6sc\">當前導向取消並啟動新的導向到回傳的\n<code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq4uli9z17se5t7es4q71yxov\"><strong>注意</strong>：守衛還可以告訴路由器導向到別處，這樣也會取消當前的導向。要想在守衛中這麼做，就要回傳 <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lxgu1cs6qx5xrfj7mq9y7r4x\">守衛可以用同步的方式回傳一個布林值。但在很多情況下，守衛無法用同步的方式給出答案。守衛可能會向用戶問一個問題、把更改儲存到伺服器，或者獲取新資料，而這些都是非同步操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37bicxvn72f6to11k9f7d1r1a\">因此，路由的守衛可以回傳一個 <code>Observable&lt;boolean&gt;</code> 或 <code>Promise&lt;boolean&gt;</code>，並且路由器會等待這個可觀察物件被解析為 <code>true</code> 或 <code>false</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jtv4rc37s3mxcjv9km17ddce\"><strong>注意</strong>：<br>\n提供給 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 的可觀察物件會在接收到第一個值之後自動完成（complete）。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dklww6ggzcp08lrdkth71ers\">路由器可以支援多種守衛介面：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"desyxqajywrrcoceo8i8nfe84\">守衛介面</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/router/CanActivateFn\"><code>canActivate</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"h9lnl90xi9f1d11s657l7j41\">調解導向\n<em>到</em>一個路由</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/router/CanActivateChildFn\"><code>canActivateChild</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avysa91w7mx2o2m17yj08vblx\">調解導向\n<em>到</em>子路由</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/router/CanDeactivateFn\"><code>canDeactivate</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6atyv79t4hotm5jsyxfx6f0tx\">調解導向\n<em>離開</em>當前路由</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/router/ResolveFn\"><code>resolve</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ips4w9df7qkq39ma6kw8cao5\">在路由啟用之前執行路由資料檢索</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/router/CanMatchFn\"><code>canMatch</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3lbmux543wo0tcix2fbjta06r\">控制是否應使用某個路由，即使路徑對應URL段</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7m0gpsdhcpyiydr2mg9o5q4nq\">在分層路由的每個級別上，你都可以設定多個守衛。路由器會先按照從最深的子路由由下往上檢查的順序來檢查 <code>canDeactivate()</code> 守衛。然後它會按照從上到下的順序檢查 <code>canActivate()</code> 守衛。如果屬性模組是非同步載入的，在載入它之前還會檢查 <code>canLoad()</code> 守衛。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"al4eb084jbqvv7mr0qijbt9mn\">除 <code>canMatch</code> 之外，如果<em>任何</em>一個守衛回傳 <code>false</code>，其它尚未完成的守衛會被取消，這樣整個導向就被取消了。如果 <code>canMatch</code> 守衛回傳 <code>false</code>，那麼 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 就會繼續處理這些 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 的其餘部分，以檢視是否有別的 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 設定能對應此 URL。你可以看作 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 假裝帶這個 <code>canMatch</code> 守衛的路由不存在一樣。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xb5x6xqr4hjx6ocrel8fh950\">接下來的小節中有一些例子。</p>\n<p><a id=\"can-activate-guard\"></a></p>\n<h3 id=\"canactivate-requiring-authentication\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"at3gus2z467pfp0h3doelxn6k\"><code>canActivate</code>：需要身份驗證<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#canactivate-requiring-authentication\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuvoa54g85rio1agsbdv53p8a\">應用程式通常會根據訪問者來決定是否授予某個屬性區的訪問權。你可以只對已認證過的使用者或具有特定角色的使用者授予訪問權，還可以阻止或限制使用者訪問權，直到使用者賬戶啟用為止。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5m1yzw36t0iz3anftbxuzvn0\"><code>canActivate</code> 守衛是一個管理這些導向類別業務規則的工具。</p>\n<h4 id=\"add-an-admin-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co7qet79bchbp992voeqlhjfa\">新增一個『管理』屬性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#add-an-admin-feature-module\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kcs713104qx713txdee9gc6q\">本節將指導你使用一些新的管理功能來擴充套件危機中心。首先新增一個名為 <code>AdminModule</code> 的新屬性模組。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a92uyzdqai3pk3nu0s8vk8cuf\">生成一個帶有屬性模組檔案和路由設定檔案的 <code>admin</code> 目錄。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module admin --routing\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4n0z7evzsxuqsv17u589jhnyc\">接下來，生成一些支援性元件。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component admin/admin-dashboard\n\n</code-example>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component admin/admin\n\n</code-example>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component admin/manage-crises\n\n</code-example>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component admin/manage-heroes\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2t1jik43bcathr17lpgseeleo\">管理屬性區的檔案是這樣的：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src/app/admin\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      admin\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          admin.component.css\n        </div>\n        <div class=\"file\">\n          admin.component.html\n        </div>\n        <div class=\"file\">\n          admin.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      admin-dashboard\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          admin-dashboard.component.css\n        </div>\n        <div class=\"file\">\n          admin-dashboard.component.html\n        </div>\n        <div class=\"file\">\n          admin-dashboard.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      manage-crises\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          manage-crises.component.css\n        </div>\n        <div class=\"file\">\n          manage-crises.component.html\n        </div>\n        <div class=\"file\">\n          manage-crises.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      manage-heroes\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          manage-heroes.component.css\n        </div>\n        <div class=\"file\">\n          manage-heroes.component.html\n        </div>\n        <div class=\"file\">\n          manage-heroes.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      admin.module.ts\n    </div>\n    <div class=\"file\">\n      admin-routing.module.ts\n    </div>\n  </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cire15icdmypxz7a59p1e0zn8\">管理屬性模組包含 <code>AdminComponent</code>，它用於在屬性模組內的儀表盤路由以及兩個尚未完成的用於管理危機和英雄的元件之間進行路由。</p>\n<code-tabs>\n    <code-pane header=\"src/app/admin/admin/admin.component.html\" path=\"router/src/app/admin/admin/admin.component.html\">\n&lt;h2&gt;Admin&lt;/h2&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"./\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"\n    [routerLinkActiveOptions]=\"{ exact: true }\" ariaCurrentWhenActive=\"page\"&gt;Dashboard&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"./crises\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Manage Crises&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"./heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Manage Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/admin/admin-dashboard/admin-dashboard.component.html\" path=\"router/src/app/admin/admin-dashboard/admin-dashboard.component.1.html\">\n&lt;h3&gt;Dashboard&lt;/h3&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/admin/admin.module.ts\" path=\"router/src/app/admin/admin.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\nimport { AdminComponent } from './admin/admin.component';\nimport { AdminDashboardComponent } from './admin-dashboard/admin-dashboard.component';\nimport { ManageCrisesComponent } from './manage-crises/manage-crises.component';\nimport { ManageHeroesComponent } from './manage-heroes/manage-heroes.component';\n\nimport { AdminRoutingModule } from './admin-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    AdminRoutingModule\n  ],\n  declarations: [\n    AdminComponent,\n    AdminDashboardComponent,\n    ManageCrisesComponent,\n    ManageHeroesComponent\n  ]\n})\nexport class AdminModule {}\n\n\n</code-pane>\n    <code-pane header=\"src/app/admin/manage-crises/manage-crises.component.html\" path=\"router/src/app/admin/manage-crises/manage-crises.component.html\">\n&lt;p&gt;Manage your crises here&lt;/p&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/admin/manage-heroes/manage-heroes.component.html\" path=\"router/src/app/admin/manage-heroes/manage-heroes.component.html\">\n&lt;p&gt;Manage your heroes here&lt;/p&gt;\n\n</code-pane>\n</code-tabs>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"449lkrmyxrcqq48yo7ocdliul\">雖然管理儀表盤中的 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 只包含一個沒有其它 URL 段的斜槓 <code>/</code>，但它能對應管理屬性區下的任何路由。但你只希望在訪問 <code>Dashboard</code> 路由時才啟用該連結。往 <code>Dashboard</code> 這個 routerLink 上新增另一個繫結 <code>[routerLinkActiveOptions]=\"{ exact: true }\"</code>，這樣就只有當用戶導向到 <code>/admin</code> 這個 URL 時才會啟用它，而不會在導向到它的某個子路由時。</p>\n</div>\n<p><a id=\"component-less-route\"></a></p>\n<h5 id=\"component-less-route-grouping-routes-without-a-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"538ehyfgyl1v7dvpn5odkt3ha\">無元件路由：分組路由，而不需要元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#component-less-route-grouping-routes-without-a-component\"><i class=\"material-icons\">link</i></a></h5>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6t5xjlmxb7qgrwweg3kbmebo1\">最初的管理路由設定如下：</p>\n<code-example header=\"src/app/admin/admin-routing.module.ts (admin routing)\" path=\"router/src/app/admin/admin-routing.module.1.ts\" region=\"admin-routes\">\nconst adminRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'admin',\n    component: AdminComponent,\n    children: [\n      {\n        path: '',\n        children: [\n          { path: 'crises', component: ManageCrisesComponent },\n          { path: 'heroes', component: ManageHeroesComponent },\n          { path: '', component: AdminDashboardComponent }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(adminRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AdminRoutingModule {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"od74bkowwx7oxmkpjfpyn1g3\"><code>AdminComponent</code> 下的子路由有一個 <code>path</code> 和一個 <code>children</code> 屬性，但是它沒有使用 <code>component</code>。這就定義了一個無<em>元件</em>路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ef1cloiqji6mw3cjwjpazilsh\">要把 <code>Crisis Center</code> 管理下的路由分組到 <code>admin</code> 路徑下，元件是不必要的。此外，無<em>元件</em>路由可以更容易地<a href=\"guide/router-tutorial-toh#can-activate-child-guard\">保護子路由</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37z7gdii2la2a3ovvs2ehfqsz\">接下來，把 <code>AdminModule</code> 匯入到 <code>app.module.ts</code> 中，並把它加入 <code>imports</code> 陣列中來註冊這些管理類別路由。</p>\n<code-example header=\"src/app/app.module.ts (admin module)\" path=\"router/src/app/app.module.4.ts\" region=\"admin-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule } from './heroes/heroes.module';\nimport { CrisisCenterModule } from './crisis-center/crisis-center.module';\n\nimport { AdminModule } from './admin/admin.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    CrisisCenterModule,\n    AdminModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    ComposeMessageComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22qwyu92hklzv7300i87r69vy\">然後往殼元件 <code>AppComponent</code> 中新增一個連結，讓使用者能點選它，以訪問該屬性。</p>\n<code-example header=\"src/app/app.component.html (template)\" path=\"router/src/app/app.component.5.html\">\n&lt;h1 class=\"title\"&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/admin\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Admin&lt;/a&gt;\n  &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\"&gt;Contact&lt;/a&gt;\n&lt;/nav&gt;\n&lt;div [@routeAnimation]=\"getAnimationData()\"&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n</code-example>\n<p><a id=\"guard-admin-feature\"></a></p>\n<h4 id=\"guard-the-admin-feature\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lsopkvc37ts0hlpk2h9knuv7\">守護『管理屬性』區<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#guard-the-admin-feature\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cncfwy4hcdkweqtr0jvhprm1c\">現在危機中心的每個路由都是對所有人開放的。這些新的管理屬性應該只能被已登入使用者訪問。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14roy4s5xvkw0tbpei52v69pr\">編寫一個 <code>canActivate()</code> 守衛，將正在嘗試訪問管理元件匿名使用者重導向到登入頁。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cf3rpjesffrbvcd3r0dc7eky\">在 <code>auth</code> 資料夾中建立一個名為 <code>auth.guard.ts</code> 的新檔案。<code>auth.guard.ts</code> 檔案將包含 <code>authGuard</code> 函式。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate guard auth/auth\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6q03fty6c218g12ogedc0ix6b\">為了示範這些基礎知識，這個例子只把日誌寫到控制台中，立即 <code>return</code> true，並允許繼續導向：</p>\n<code-example header=\"src/app/auth/auth.guard.ts (excerpt)\" path=\"router/src/app/auth/auth.guard.1.ts\">\n\nexport const authGuard = () =&gt; {\n  console.log('authGuard#canActivate called');\n  return true;\n};\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"n3lre78mypok6589awymdpyu\">接下來，開啟 <code>admin-routing.module.ts</code>，匯入 <code>authGuard</code> 函式，修改管理路由並透過 <code>canActivate()</code> 守衛來引用 <code>authGuard</code>：</p>\n<code-example header=\"src/app/admin/admin-routing.module.ts (guarded admin route)\" path=\"router/src/app/admin/admin-routing.module.2.ts\" region=\"admin-route\">\nimport {authGuard} from '../auth/auth.guard';\n\nimport {AdminDashboardComponent} from './admin-dashboard/admin-dashboard.component';\nimport {AdminComponent} from './admin/admin.component';\nimport {ManageCrisesComponent} from './manage-crises/manage-crises.component';\nimport {ManageHeroesComponent} from './manage-heroes/manage-heroes.component';\n\nconst adminRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [{\n  path: 'admin',\n  component: AdminComponent,\n  canActivate: [authGuard],\n\n  children: [{\n    path: '',\n    children: [\n      {path: 'crises', component: ManageCrisesComponent},\n      {path: 'heroes', component: ManageHeroesComponent},\n      {path: '', component: AdminDashboardComponent}\n    ],\n  }]\n}];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({imports: [RouterModule.forChild(adminRoutes)], exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]})\nexport class AdminRoutingModule {\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6515dgshzeni0tuwgwyeg49ri\">管理屬性區現在受此守衛保護了，不過該守衛還需要做進一步定製。</p>\n<p><a id=\"teach-auth\"></a></p>\n<h4 id=\"authenticate-with-authguard\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ioopzt3jwnaqd75sb7kuhyiz\">透過 <code>authGuard</code> 驗證<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#authenticate-with-authguard\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kmoqnhzwp9gf63nm9d5g0igz\">讓 <code>authGuard</code> 模擬身份驗證。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79xlc16ooryn1hn20i1ggm2je\"><code>authGuard</code> 可以呼叫應用中的一項服務，該服務能讓使用者登入，並且儲存當前使用者的訊息。在 <code>auth</code> 目錄下生成一個新的 <code>AuthService</code>：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service auth/auth\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3tqqxvbbgi8jssm7qovddhrg\">修改 <code>AuthService</code> 以登入此使用者：</p>\n<code-example header=\"src/app/auth/auth.service.ts (excerpt)\" path=\"router/src/app/auth/auth.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\nimport { tap, delay } from 'rxjs/operators';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class AuthService {\n  isLoggedIn = false;\n\n  // store the URL so we can redirect after logging in\n  redirectUrl: string | null = null;\n\n  login(): Observable&lt;boolean&gt; {\n    return of(true).pipe(\n      delay(1000),\n      tap(() =&gt; this.isLoggedIn = true)\n    );\n  }\n\n  logout(): void {\n    this.isLoggedIn = false;\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dq6mrwdch851f8370plkxgdpf\">雖然不會真的進行登入，但它有一個 <code>isLoggedIn</code> 標誌，用來標識是否使用者已經登入過了。它的 <code>login()</code> 方法會模擬一個對外部服務的 API 呼叫，回傳一個可觀察物件（observable）。在短暫的停頓之後，這個可觀察物件就會解析成功。<code>redirectUrl</code> 屬性將會儲存在使用者要訪問的 URL 中，以便認證完之後導向到它。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9lqipnagni25xqiwyup6saew\">為了保持最小化，這個例子會將未經身份驗證的使用者重導向到 <code>/admin</code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cm4txiipnp6xk878uvrz88212\">修改 <code>authGuard</code> 以呼叫 <code>AuthService</code>。</p>\n<code-example header=\"src/app/auth/auth.guard.ts (v2)\" path=\"router/src/app/auth/auth.guard.2.ts\">\nimport {inject} from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\n\nimport {AuthService} from './auth.service';\n\nexport const authGuard = () =&gt; {\n  const authService = inject(AuthService);\n  const router = inject(<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>);\n\n  if (authService.isLoggedIn) {\n    return true;\n  }\n\n  // Redirect to the login page\n  return router.parseUrl('/login');\n};\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77qav9nrm5cficx40hv25s1qx\">這個守衛會回傳一個同步布林結果或一個 <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>。如果使用者已登入，則回傳 <code>true</code> 並繼續導向。否則，它會重導向到登入頁面 —— 你尚未建立它。回傳一個 <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> 會告訴 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 取消當前導向並安排一個新的導向來重導向使用者。</p>\n<p><a id=\"add-login-component\"></a></p>\n<h4 id=\"add-the-logincomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ny6rqkooinf80kl25ihg1kvt\">新增 <code>LoginComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#add-the-logincomponent\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8eosl4rq7ke6xjsb5myjvnxg\">你需要一個 <code>LoginComponent</code> 來讓使用者登入進這個應用。在登入之後，你就會跳轉到前面儲存的 URL，如果沒有，就跳轉到預設 URL。該組件沒有什麼新內容，你在路由設定中使用它的方式也沒什麼新意。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component auth/login\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nadhyhddadrq0yec2itip9vh\">在 <code>auth/auth-routing.module.ts</code> 檔案中註冊一個 <code>/login</code> 路由。在 <code>app.module.ts</code> 中，匯入 <code>AuthModule</code> 並且新增到 <code>AppModule</code> 的 <code>imports</code> 中。</p>\n<code-tabs>\n    <code-pane header=\"src/app/app.module.ts\" path=\"router/src/app/app.module.ts\" region=\"auth\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\nimport { AppComponent } from './app.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule } from './heroes/heroes.module';\nimport { AuthModule } from './auth/auth.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AuthModule,\n    AppRoutingModule,\n  ],\n  declarations: [\n    AppComponent,\n    ComposeMessageComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n\n</code-pane>\n    <code-pane header=\"src/app/auth/login/login.component.html\" path=\"router/src/app/auth/login/login.component.html\">\n&lt;h2&gt;Login&lt;/h2&gt;\n&lt;p&gt;{{message}}&lt;/p&gt;\n&lt;p&gt;\n  &lt;button type=\"button\" (click)=\"login()\"  *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!authService.isLoggedIn\"&gt;Login&lt;/button&gt;\n  &lt;button type=\"button\" (click)=\"logout()\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"authService.isLoggedIn\"&gt;Logout&lt;/button&gt;\n&lt;/p&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/auth/login/login.component.ts\" path=\"router/src/app/auth/login/login.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\nimport { AuthService } from '../auth.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  message: string;\n\n  constructor(public authService: AuthService, public router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n    this.message = this.getMessage();\n  }\n\n  getMessage() {\n    return 'Logged ' + (this.authService.isLoggedIn ? 'in' : 'out');\n  }\n\n  login() {\n    this.message = 'Trying to log in ...';\n\n    this.authService.login().subscribe(() =&gt; {\n      this.message = this.getMessage();\n      if (this.authService.isLoggedIn) {\n        // Usually you would use the redirect URL from the auth service.\n        // However to keep the example simple, we will always redirect to `/admin`.\n        const redirectUrl = '/admin';\n\n        // Redirect the user\n        this.router.navigate([redirectUrl]);\n      }\n    });\n  }\n\n  logout() {\n    this.authService.logout();\n    this.message = this.getMessage();\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/auth/auth.module.ts\" path=\"router/src/app/auth/auth.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { LoginComponent } from './login/login.component';\nimport { AuthRoutingModule } from './auth-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AuthRoutingModule\n  ],\n  declarations: [\n    LoginComponent\n  ]\n})\nexport class AuthModule {}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"can-activate-child-guard\"></a></p>\n<h3 id=\"canactivatechild-guarding-child-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4w7o203q5denxk0v8lbgzp0h2\"><code>canActivateChild</code>：保護子路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#canactivatechild-guarding-child-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1bf0mz8lgn56nbbqlioy1fy\">你還可以使用 <code>canActivateChild</code> 守衛來保護子路由。<code>canActivateChild</code> 守衛和 <code>canActivate</code> 守衛很像。它們的區別在於，<code>canActivateChild</code> 會在<em>任何子路由</em>被啟用之前執行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14zdstruadwas1tkgukue89vj\">你要保護管理屬性模組，防止它被非授權訪問，還要保護這個屬性模組<em>內部</em>的那些子路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3h9m44hh66xhrnmc04f66gnfm\">同樣把這個 <code>authGuard</code> 新增到『無元件的』管理路由，來同時保護它的所有子路由，而不是為每個路由單獨新增這個 <code>authGuard</code>。</p>\n<code-example header=\"src/app/admin/admin-routing.module.ts (excerpt)\" path=\"router/src/app/admin/admin-routing.module.3.ts\" region=\"can-activate-child\">\nconst adminRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'admin',\n    component: AdminComponent,\n    canActivate: [authGuard],\n    children: [\n      {\n        path: '',\n        canActivateChild: [authGuard],\n        children: [\n          { path: 'crises', component: ManageCrisesComponent },\n          { path: 'heroes', component: ManageHeroesComponent },\n          { path: '', component: AdminDashboardComponent }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(adminRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AdminRoutingModule {}\n\n</code-example>\n<p><a id=\"can-deactivate-guard\"></a></p>\n<h3 id=\"candeactivate-handling-unsaved-changes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck58lzyz1c79x89idb6077age\"><code>canDeactivate</code>：處理未儲存的更改<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#candeactivate-handling-unsaved-changes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9xvd3iwpg9xxcvblloh1cyib\">回到 『Heroes』 工作流，該應用會立即接受對英雄的每次更改，而不進行驗證。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lxgqxmzxxvkfdkd7rztd8e9d\">在現實世界，你可能不得不積累來自使用者的更改，跨欄位驗證，在服務器上驗證，或者把變更保持在待定狀態，直到使用者確認這一組欄位或取消並還原所有變更為止。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jfvzwta1fj86rpqmbt17b7o4\">當用戶要導向離開時，你可以讓使用者自己決定該怎麼處理這些未儲存的更改。如果使用者選擇了取消，你就留下來，並允許更多改動。如果使用者選擇了確認，那就進行儲存。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85yeh1y9zmlfntojehhmnbq7w\">在儲存成功之前，你還可以繼續推遲導向。如果你讓使用者立即移到下一個介面，而儲存卻失敗了（可能因為資料不符合有效性規則），你就會丟失該錯誤的上下文環境。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"183pwgwo92yupxfuiz2czulxj\">你需要用非同步的方式等待，在服務器回傳答覆之前先停止導向。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5oq2jsvxf06afp1ic7vk4hyih\"><code>canDeactivate</code> 守衛能幫助你決定如何處理未儲存的更改，以及如何處理。</p>\n<p><a id=\"cancel-save\"></a></p>\n<h4 id=\"cancel-and-save\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yaodn3js0adzkjlr6s2l9bmk\">取消與儲存<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#cancel-and-save\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3k7no0enaqmlqyf03u26ll5i3\">使用者在 <code>CrisisDetailComponent</code> 中更新危機訊息。與 <code>HeroDetailComponent</code> 不同，使用者的改動不會立即更新危機的實體物件。當用戶按下了 Save 按鈕時，應用就更新這個實體物件；如果按了 Cancel 按鈕，那就放棄這些更改。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a34etgh2940ihql6u3jixv4nk\">這兩個按鈕都會在儲存或取消之後導向回危機清單。</p>\n<code-example header=\"src/app/crisis-center/crisis-detail/crisis-detail.component.ts (cancel and save methods)\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\" region=\"cancel-save\">\ncancel() {\n  this.gotoCrises();\n}\n\nsave() {\n  this.crisis.name = this.editName;\n  this.gotoCrises();\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4790q65o5tb6ecvo2ukyp12vl\">在這種情況下，使用者可以點選 heroes 連結，取消，按下瀏覽器後退按鈕，或者不儲存就離開。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2sy3nboyg3heei6dzpa5mw9f\">這個範例應用會彈出一個確認對話框，它會非同步等待使用者的回應，等使用者給出一個明確的答覆。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qtrzeuwtx1oyzqtomjcx2ctc\">你也可以用同步的方式等使用者的答覆，阻塞程式碼。但如果能用非同步的方式等待使用者的答覆，應用就會回應性更好，還能同時做別的事。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d29d5lxyl3xgvy14voc87p02h\">生成一個 <code>Dialog</code> 服務，以處理使用者的確認操作。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service dialog\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"660kj4d2pefqjymvymzuuinza\">為 <code>DialogService</code> 新增一個 <code>confirm()</code> 方法，以提醒使用者確認。<code>window.confirm</code> 是一個阻塞型操作，它會顯示一個模態對話框，並等待使用者的互動。</p>\n<code-example header=\"src/app/dialog.service.ts\" path=\"router/src/app/dialog.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n/**\n * Async modal dialog service\n * DialogService makes this app easier to test by faking this service.\n * TODO: better modal implementation that doesn't use window.confirm\n */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class DialogService {\n  /**\n   * Ask user to confirm an action. `message` explains the action and choices.\n   * Returns observable resolving to `true`=confirm or `false`=cancel\n   */\n  confirm(message?: string): Observable&lt;boolean&gt; {\n    const confirmation = window.confirm(message || 'Is it OK?');\n\n    return of(confirmation);\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2rda2e7ud1375tqnl9zn83v0\">它回傳<em>observable</em>，當用戶最終決定瞭如何去做時，它就會被<em>解析</em> —— 或者決定放棄更改直接導向離開（<code>true</code>），或者保留未完成的修改，留在危機編輯器中（<code>false</code>）。</p>\n<p><a id=\"canDeactivate\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1thd2811wis73nu0msrcx18hw\">生成一個守衛（guard），以檢查元件（任意元件均可）中是否存在 <code>canDeactivate()</code> 方法。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate guard can-deactivate\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co67iumy352zfw351bfiox1xi\">把下面的程式碼貼上到守衛中。</p>\n<code-example header=\"src/app/can-deactivate.guard.ts\" path=\"router/src/app/can-deactivate.guard.ts\">\nimport { <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nexport interface CanComponentDeactivate {\n  canDeactivate?: () =&gt; Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean;\n}\n\nexport const canDeactivateGuard: <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>&lt;CanComponentDeactivate&gt; =\n    (component: CanComponentDeactivate) =&gt; component.canDeactivate ? component.canDeactivate() : true;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ivhbpulnifloonzpfye0pjm\">守衛不需要知道哪個元件有 <code>deactivate</code> 方法，它可以檢測 <code>CrisisDetailComponent</code> 元件有沒有 <code>canDeactivate()</code> 方法並呼叫它。守衛在不知道任何元件 <code>deactivate</code> 方法細節的情況下，就能讓這個守衛重複使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ews35z88kh027t6a8r7ttpzf\">另外，你也可以為 <code>CrisisDetailComponent</code> 建立一個特定的 <code>canDeactivate</code> 守衛。在需要訪問外部訊息時，<code>canDeactivate()</code> 方法為你提供了元件、<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 和 <code><a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a></code> 的當前實例。如果只想為這個元件使用該守衛，並且需要獲取該組件屬性或確認路由器是否允許從該組件導向出去時，這會非常有用。</p>\n<code-example header=\"src/app/can-deactivate.guard.ts (component-specific)\" path=\"router/src/app/can-deactivate.guard.1.ts\">\nimport { Observable } from 'rxjs';\nimport { <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>,\n         <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n         <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> } from '@angular/router';\n\nimport { CrisisDetailComponent } from './crisis-center/crisis-detail/crisis-detail.component';\n\nexport const canDeactivateGuard: <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>&lt;CrisisDetailComponent&gt;  = (\n    component: CrisisDetailComponent,\n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>\n  ): Observable&lt;boolean&gt; | boolean =&gt; {\n    // Get the Crisis Center ID\n    console.log(route.paramMap.get('id'));\n\n    // Get the current URL\n    console.log(state.url);\n\n    // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n    if (!component.crisis || component.crisis.name === component.editName) {\n      return true;\n    }\n    // Otherwise ask the user with the dialog service and return its\n    // observable which resolves to true or false when the user decides\n    return component.dialogService.confirm('Discard changes?');\n  };\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9p491kjc0fbkc5qqo58n7xt2z\">看看 <code>CrisisDetailComponent</code> 元件，它已經實現了對未儲存的更改進行確認的工作流。</p>\n<code-example header=\"src/app/crisis-center/crisis-detail/crisis-detail.component.ts (excerpt)\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\" region=\"canDeactivate\">\ncanDeactivate(): Observable&lt;boolean&gt; | boolean {\n  // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n  if (!this.crisis || this.crisis.name === this.editName) {\n    return true;\n  }\n  // Otherwise ask the user with the dialog service and return its\n  // observable which resolves to true or false when the user decides\n  return this.dialogService.confirm('Discard changes?');\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2k6phecjwjkz341y7ad8uxoqm\">注意，<code>canDeactivate()</code> 方法可以同步回傳;如果沒有危機，或者沒有待處理的更改，它會立即回傳 <code>true</code>。但它也能回傳一個 <code>Promise</code> 或一個 <code>Observable</code>，路由器也會等待它解析為真值（導向）或偽造（停留在當前路由上）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38zan7dn660rw7w2y36d78uw8\">往 <code>crisis-center.routing.module.ts</code> 的危機詳情路由中用 <code>canDeactivate</code> 陣列新增一個 <code>Guard</code>（守衛）。</p>\n<code-example header=\"src/app/crisis-center/crisis-center-routing.module.ts (can deactivate guard)\" path=\"router/src/app/crisis-center/crisis-center-routing.module.3.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent } from './crisis-detail/crisis-detail.component';\n\nimport { canDeactivateGuard } from '../can-deactivate.guard';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [canDeactivateGuard]\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewf7rxhbqxg9r4wkzmj6t21ve\">現在，你已經給了使用者一個能保護未儲存更改的安全守衛。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0swougx6mvva6wecq9wtffdz\"><a id=\"Resolve\"></a>\n<a id=\"resolve-guard\"></a></p>\n<h3 id=\"resolve-pre-fetching-component-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5z3t14a11c72tgj5qq6ahlza1\"><em>Resolve</em>: 預先獲取元件資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#resolve-pre-fetching-component-data\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy9f52dx8hkr92fm1u3dgrpez\">在 <code>Hero Detail</code> 和 <code>Crisis Detail</code> 中，它們等待路由讀取完對應的英雄和危機。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gh73bnw72ez0qc41u73ynn83\">如果你在使用真實 api，很有可能資料回傳有延遲，導致無法即時顯示。在這種情況下，直到資料到達前，顯示一個空的元件不是最好的使用者體驗。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wv1w07y3z1p91pf81g8sdqa4\">最好使用解析器預先從伺服器上獲取完資料，這樣在路由啟用的那一刻資料就準備好了。還要在路由到此元件之前處理好錯誤。但當某個 <code>id</code> 無法對應到一個危機詳情時，就沒辦法處理它。這時最好把使用者帶回到『危機清單』中，那裡顯示了所有有效的『危機』。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kpgyau9w49oz4bckdyxkj219\">總之，你希望的是只有當所有必要資料都已經拿到之後，才渲染這個路由元件。</p>\n<p><a id=\"fetch-before-navigating\"></a></p>\n<h4 id=\"fetch-data-before-navigating\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezj19bd9srevtaigkd461zet6\">導向前預先載入路由訊息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#fetch-data-before-navigating\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejn0vltdsoc31pi40ru6zg9kl\">目前，<code>CrisisDetailComponent</code> 會接收選中的危機。如果該危機沒有找到，路由器就會導向回危機清單檢視。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71fc2ql3qbtc7jdy9iyjtmlbr\">如果能在該路由將要啟用時提前處理了這個問題，那麼使用者體驗會更好。<code>crisisDetailResolver</code> 服務可以接收一個 <code>Crisis</code>，而如果這個 <code>Crisis</code> 不存在，就會在啟用該路由並建立 <code>CrisisDetailComponent</code> 之前先行離開。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8s6x66jpfo6l46kevpq9tacxu\">在 <code>Crisis Center</code> 屬性區域中建立一個 <code>crisis-detail-resolver.ts</code> 檔案。此檔案將包含 <code>crisisDetailResolver</code> 函式。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate resolver crisis-center/crisis-detail-resolver\n\n</code-example>\n<code-example header=\"src/app/crisis-center/crisis-detail-resolver.ts\" path=\"router/src/app/crisis-center/crisis-detail-resolver.1.ts\">\n\nexport function crisisDetailResolver() {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7n6bippzivw99qvmh2bwll386\">把 <code>CrisisDetailComponent.ngOnInit()</code> 中與危機檢索有關的邏輯移到 <code>crisisDetailResolver</code> 中。匯入 <code>Crisis</code> 模型、<code>CrisisService</code> 和 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 以便讓你可以在找不到指定的危機時導向到別處。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9un8ylh002nkwlriphyugu2hx\">為了更明確一點，可以實現一個帶有 <code>Crisis</code> 型別的 <code><a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a></code> 介面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"78juz4uc3yqefr4xi7bzfb0m3\">注入 <code>CrisisService</code> 和 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>。該方法可以回傳一個 <code>Promise</code>、一個 <code>Observable</code> 來支援非同步方式，或者直接回傳一個值來支援同步方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"126grddtoyp4ozr6hb9qelmli\"><code>CrisisService.getCrisis()</code> 方法回傳一個可觀察物件，以防止在資料獲取完之前載入本路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c16xthz92qkr69yh1dh9crm6j\">如果它沒有回傳有效的 <code>Crisis</code>，就會回傳一個 <code>Observable</code>，以取消以前到 <code>CrisisDetailComponent</code> 的在途導向，並把使用者導向回 <code>CrisisListComponent</code>。修改後的 <code>resolver</code> 函式是這樣的：</p>\n<code-example header=\"src/app/crisis-center/crisis-detail-resolver.ts\" path=\"router/src/app/crisis-center/crisis-detail-resolver.ts\">\nimport {inject} from '@angular/core';\nimport {<a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>} from '@angular/router';\nimport {EMPTY, of} from 'rxjs';\nimport {mergeMap} from 'rxjs/operators';\n\nimport {Crisis} from './crisis';\nimport {CrisisService} from './crisis.service';\n\nexport const crisisDetailResolver: <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>&lt;Crisis&gt; = (route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>) =&gt; {\n  const router = inject(<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>);\n  const cs = inject(CrisisService);\n  const id = route.paramMap.get('id')!;\n\n  return cs.getCrisis(id).pipe(mergeMap(crisis =&gt; {\n    if (crisis) {\n      return of(crisis);\n    } else {  // id not found\n      router.navigate(['/crisis-center']);\n      return EMPTY;\n    }\n  }));\n};\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byaamu66zdvn27x8qwptz756l\">把這個解析器（resolver）匯入到 <code>crisis-center-routing.module.ts</code> 中，並往 <code>CrisisDetailComponent</code> 的路由設定中新增一個 <code>resolve</code> 物件。</p>\n<code-example header=\"src/app/crisis-center/crisis-center-routing.module.ts (resolver)\" path=\"router/src/app/crisis-center/crisis-center-routing.module.4.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent } from './crisis-detail/crisis-detail.component';\n\nimport { canDeactivateGuard } from '../can-deactivate.guard';\nimport { crisisDetailResolver } from './crisis-detail-resolver';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [canDeactivateGuard],\n            resolve: {\n              crisis: crisisDetailResolver\n            }\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75hlrthalunidss8u9tq5jfk\"><code>CrisisDetailComponent</code> 不應該再去獲取這個危機的詳情。你只要重新設定路由，就可以修改從哪裡獲取危機的詳情。把 <code>CrisisDetailComponent</code> 改成從 <code>ActivatedRoute.data.crisis</code> 屬性中獲取危機詳情，這正是你重新設定路由的恰當時機。</p>\n<code-example header=\"src/app/crisis-center/crisis-detail/crisis-detail.component.ts (ngOnInit v2)\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\" region=\"ngOnInit\">\nngOnInit() {\n  this.route.data\n    .subscribe(data =&gt; {\n      const crisis: Crisis = data['crisis'];\n      this.editName = crisis.name;\n      this.crisis = crisis;\n    });\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4exvvhsjzcbjd44mur9pfu9wp\">回顧以下三個重要點：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"118xomlpj0dkxy4wzmc12lnvs\">路由器的這個 <code><a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a></code> 介面是可選的。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dr88qkfej540hyjjqigrpnn5y\">路由器會在使用者可以導向的任何情況下呼叫該解析器，這樣你就不用針對每個用例都編寫程式碼了。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eznugnbwhhpd6crmlc19p7dhx\">在任何一個解析器中回傳空的 <code>Observable</code> 就會取消導向。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96orqunuy0n73opciu749ydin\">與里程碑相關的危機中心程式碼如下。</p>\n<code-tabs>\n    <code-pane header=\"app.component.html\" path=\"router/src/app/app.component.html\">\n&lt;div class=\"wrapper\"&gt;\n  &lt;h1 class=\"title\"&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/superheroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/admin\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Admin&lt;/a&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/login\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Login&lt;/a&gt;\n    &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\"&gt;Contact&lt;/a&gt;\n  &lt;/nav&gt;\n  &lt;div [@routeAnimation]=\"getRouteAnimationData()\"&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  &lt;/div&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"crisis-center-home.component.html\" path=\"router/src/app/crisis-center/crisis-center-home/crisis-center-home.component.html\">\n&lt;h3&gt;Welcome to the Crisis Center&lt;/h3&gt;\n\n\n</code-pane>\n    <code-pane header=\"crisis-center.component.html\" path=\"router/src/app/crisis-center/crisis-center/crisis-center.component.html\">\n&lt;h2&gt;Crisis Center&lt;/h2&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n\n</code-pane>\n    <code-pane header=\"crisis-center-routing.module.ts\" path=\"router/src/app/crisis-center/crisis-center-routing.module.4.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent } from './crisis-detail/crisis-detail.component';\n\nimport { canDeactivateGuard } from '../can-deactivate.guard';\nimport { crisisDetailResolver } from './crisis-detail-resolver';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [canDeactivateGuard],\n            resolve: {\n              crisis: crisisDetailResolver\n            }\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-pane>\n    <code-pane header=\"crisis-list.component.html\" path=\"router/src/app/crisis-center/crisis-list/crisis-list.component.html\">\n&lt;ul class=\"crises\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let crisis of crises$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>\" [class.selected]=\"crisis.id === selectedId\"&gt;\n    &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[crisis.id]\"&gt;\n      &lt;span class=\"badge\"&gt;{{ crisis.id }}&lt;/span&gt;{{ crisis.name }}\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n\n</code-pane>\n    <code-pane header=\"crisis-list.component.ts\" path=\"router/src/app/crisis-center/crisis-list/crisis-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { CrisisService } from '../crisis.service';\nimport { Crisis } from '../crisis';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-crisis-list',\n  templateUrl: './crisis-list.component.html',\n  styleUrls: ['./crisis-list.component.css']\n})\nexport class CrisisListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  crises$?: Observable&lt;Crisis[]&gt;;\n  selectedId = 0;\n\n  constructor(\n    private service: CrisisService,\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>\n  ) {}\n\n  ngOnInit() {\n    this.crises$ = this.route.firstChild?.paramMap.pipe(\n      switchMap(params =&gt; {\n        this.selectedId = parseInt(params.get('id')!, 10);\n        return this.service.getCrises();\n      })\n    );\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"crisis-detail.component.html\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"crisis\"&gt;\n  &lt;h3&gt;{{ editName }}&lt;/h3&gt;\n  &lt;p&gt;Id: {{ crisis.id }}&lt;/p&gt;\n  &lt;label for=\"crisis-name\"&gt;Crisis name: &lt;/label&gt;\n  &lt;input type=\"text\" id=\"crisis-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"editName\" placeholder=\"name\"/&gt;\n  &lt;div&gt;\n    &lt;button type=\"button\" (click)=\"save()\"&gt;Save&lt;/button&gt;\n    &lt;button type=\"button\" (click)=\"cancel()\"&gt;Cancel&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"crisis-detail.component.ts\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { Crisis } from '../crisis';\nimport { DialogService } from '../../dialog.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-crisis-detail',\n  templateUrl: './crisis-detail.component.html',\n  styleUrls: ['./crisis-detail.component.css']\n})\nexport class CrisisDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  crisis!: Crisis;\n  editName = '';\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n    public dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.route.data\n      .subscribe(data =&gt; {\n        const crisis: Crisis = data['crisis'];\n        this.editName = crisis.name;\n        this.crisis = crisis;\n      });\n  }\n\n  cancel() {\n    this.gotoCrises();\n  }\n\n  save() {\n    this.crisis.name = this.editName;\n    this.gotoCrises();\n  }\n\n  canDeactivate(): Observable&lt;boolean&gt; | boolean {\n    // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n    if (!this.crisis || this.crisis.name === this.editName) {\n      return true;\n    }\n    // Otherwise ask the user with the dialog service and return its\n    // observable which resolves to true or false when the user decides\n    return this.dialogService.confirm('Discard changes?');\n  }\n\n  gotoCrises() {\n    const crisisId = this.crisis ? this.crisis.id : null;\n    // Pass along the crisis id if available\n    // so that the CrisisListComponent can select that crisis.\n    // Add a totally useless `foo` parameter for kicks.\n    // Relative navigation back to the crises\n    this.router.navigate(['../', { id: crisisId, foo: 'foo' }], { relativeTo: this.route });\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"crisis-detail-resolver.ts\" path=\"router/src/app/crisis-center/crisis-detail-resolver.ts\">\nimport {inject} from '@angular/core';\nimport {<a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>} from '@angular/router';\nimport {EMPTY, of} from 'rxjs';\nimport {mergeMap} from 'rxjs/operators';\n\nimport {Crisis} from './crisis';\nimport {CrisisService} from './crisis.service';\n\nexport const crisisDetailResolver: <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>&lt;Crisis&gt; = (route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>) =&gt; {\n  const router = inject(<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>);\n  const cs = inject(CrisisService);\n  const id = route.paramMap.get('id')!;\n\n  return cs.getCrisis(id).pipe(mergeMap(crisis =&gt; {\n    if (crisis) {\n      return of(crisis);\n    } else {  // id not found\n      router.navigate(['/crisis-center']);\n      return EMPTY;\n    }\n  }));\n};\n\n\n</code-pane>\n    <code-pane header=\"crisis.service.ts\" path=\"router/src/app/crisis-center/crisis.service.ts\">\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { MessageService } from '../message.service';\nimport { Crisis } from './crisis';\nimport { CRISES } from './mock-crises';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class CrisisService {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> nextCrisisId = 100;\n  private crises$: BehaviorSubject&lt;Crisis[]&gt; = new BehaviorSubject&lt;Crisis[]&gt;(CRISES);\n\n  constructor(private messageService: MessageService) { }\n\n  getCrises() { return this.crises$; }\n\n  getCrisis(id: number | string) {\n    return this.getCrises().pipe(\n      map(crises =&gt; crises.find(crisis =&gt; crisis.id === +id)!)\n    );\n  }\n\n}\n\n\n</code-pane>\n    <code-pane header=\"dialog.service.ts\" path=\"router/src/app/dialog.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n/**\n * Async modal dialog service\n * DialogService makes this app easier to test by faking this service.\n * TODO: better modal implementation that doesn't use window.confirm\n */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class DialogService {\n  /**\n   * Ask user to confirm an action. `message` explains the action and choices.\n   * Returns observable resolving to `true`=confirm or `false`=cancel\n   */\n  confirm(message?: string): Observable&lt;boolean&gt; {\n    const confirmation = window.confirm(message || 'Is it OK?');\n\n    return of(confirmation);\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"985nsrjuwnvgei3slut9pbq10\">路由守衛</p>\n<code-tabs>\n    <code-pane header=\"auth.guard.ts\" path=\"router/src/app/auth/auth.guard.3.ts\">\nimport { inject } from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\nimport { AuthService } from './auth.service';\n\nexport const authGuard = () =&gt; {\n  const authService = inject(AuthService);\n  const router = inject(<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>);\n\n  if (authService.isLoggedIn) {\n    return true;\n  }\n\n  // Redirect to the login page\n  return router.parseUrl('/login');\n};\n\n\n</code-pane>\n    <code-pane header=\"can-deactivate.guard.ts\" path=\"router/src/app/can-deactivate.guard.ts\">\nimport { <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nexport interface CanComponentDeactivate {\n  canDeactivate?: () =&gt; Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean;\n}\n\nexport const canDeactivateGuard: <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>&lt;CanComponentDeactivate&gt; =\n    (component: CanComponentDeactivate) =&gt; component.canDeactivate ? component.canDeactivate() : true;\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2k5aanmdm4d34ghm8r0fyph4a\"><a id=\"query-parameters\"></a>\n<a id=\"fragment\"></a></p>\n<h3 id=\"query-parameters-and-fragments\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5ksju22p7nx3liolf5l34k7e\">查詢引數及片段<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#query-parameters-and-fragments\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1le66e7t81nr16uysq0x7ymja\">在<a href=\"guide/router-tutorial-toh#optional-route-parameters\">路由引數</a>部分，你只需要處理該路由的專屬引數。但是，你也可以用查詢引數來獲取對所有路由都可用的可選引數。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aduhag5cf13auiok4529ynkn9\"><a href=\"https://en.wikipedia.org/wiki/Fragment_identifier\">片段</a>可以引用頁面中帶有特定 <code>id</code> 屬性的元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2k881qhnxkob9x1k37o6b5eyp\">修改 <code>authGuard</code> 以提供 <code>session_id</code> 查詢引數，在導向到其它路由後，它還會存在。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crjbrz5ca2xhceh2su2qekvyf\">再新增一個錨點（<code>A</code>）元素，來讓你能跳轉到頁面中的正確位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3kpyovjtck6795nlvhi40dsf0\">為 <code>router.navigate()</code> 方法新增一個 <code><a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a></code> 物件，用來導向到 <code>/login</code> 路由。</p>\n<code-example header=\"src/app/auth/auth.guard.ts (v3)\" path=\"router/src/app/auth/auth.guard.4.ts\">\nimport { inject } from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a> } from '@angular/router';\nimport { AuthService } from './auth.service';\n\nexport const authGuard = () =&gt; {\n  const authService = inject(AuthService);\n  const router = inject(<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>);\n\n  if (authService.isLoggedIn) {\n    return true;\n  }\n\n  // Create a dummy session id\n  const sessionId = 123456789;\n\n  // Set our navigation extras object\n  // that contains our global <a href=\"api/animations/query\" class=\"code-anchor\">query</a> params and fragment\n  const navigationExtras: <a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a> = {\n    queryParams: { session_id: sessionId },\n    fragment: 'anchor'\n  };\n\n  // Redirect to the login page with extras\n  return router.createUrlTree(['/login'], navigationExtras);\n};\n\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctz85pdrhkx3pfl4g68lucrsz\">還可以在導向之間<strong>保留</strong>查詢引數和片段，而無需再次在導向中提供。在 <code>LoginComponent</code> 中的 <code>router.navigate()</code> 方法中，新增一個物件作為第二個引數，該<strong>物件</strong>提供了 <code>queryParamsHandling</code> 和 <code>preserveFragment</code>，用於傳遞當前的查詢引數和片段到下一個路由。</p>\n<code-example header=\"src/app/auth/login/login.component.ts (preserve)\" path=\"router/src/app/auth/login/login.component.ts\" region=\"preserve\">\n// Set our navigation extras object\n// that passes on our global <a href=\"api/animations/query\" class=\"code-anchor\">query</a> params and fragment\nconst navigationExtras: <a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a> = {\n  queryParamsHandling: 'preserve',\n  preserveFragment: true\n};\n\n// Redirect the user\nthis.router.navigate([redirectUrl], navigationExtras);\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96rb0g3cahqsvt9g71j9crxw4\"><code>queryParamsHandling</code> 屬性還提供了 <code>merge</code> 選項，它將會在導向時保留當前的查詢引數，並與其它查詢引數合併。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2s4lup3lr5weawusfi5eve7x8\">要在登入後導向到 Admin Dashboard 路由，請更新 <code>admin-dashboard.component.ts</code> 以處理這些查詢引數和片段。</p>\n<code-example header=\"src/app/admin/admin-dashboard/admin-dashboard.component.ts (v2)\" path=\"router/src/app/admin/admin-dashboard/admin-dashboard.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.css']\n})\nexport class AdminDashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  sessionId!: Observable&lt;string&gt;;\n  token!: Observable&lt;string&gt;;\n\n  constructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n\n  ngOnInit() {\n    // Capture the session ID if available\n    this.sessionId = this.route\n      .queryParamMap\n      .pipe(map(params =&gt; params.get('session_id') || 'None'));\n\n    // Capture the fragment if available\n    this.token = this.route\n      .fragment\n      .pipe(map(fragment =&gt; fragment || 'None'));\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"de1bjdpwctvl2qutepq7y5obs\">查詢引數和片段可透過 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服務來使用。和路由引數類似，全域查詢引數和片段也是 <code>Observable</code> 物件。在修改過的英雄管理元件中，你將藉助 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 直接把 <code>Observable</code> 傳給範本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"284cs0p4jyd3muo780thuvdgm\">按照下列步驟試驗下：點選 Admin 按鈕，它會帶著你提供的 <code>queryParamMap</code> 和 <code>fragment</code> 跳轉到登入頁。點選 Login 按鈕，你就會被重導向到 <code>Admin Dashboard</code> 頁。注意，它仍然帶著上一步提供的 <code>queryParamMap</code> 和 <code>fragment</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ohbwrmly3w23q01318u5dkjs\">你可以用這些持久化訊息來攜帶需要為每個頁面都提供的訊息，如認證令牌或會話的 ID 等。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ettb3gwtfg1rfxs7uci6mif97\">『查詢引數』和『片段』也可以分別用 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 中的 <strong>queryParamsHandling</strong> 和 <strong>preserveFragment</strong> 儲存。</p>\n</div>\n<p><a id=\"asynchronous-routing\"></a></p>\n<h2 id=\"milestone-6-asynchronous-routing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2chgfkvq14hs4d59rqxh6mafc\">里程碑 6：非同步路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-6-asynchronous-routing\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ke63v3xh2h6vdszohufkac6j\">完成上面的里程碑後，應用程式很自然地長大了。在某一個時間點，你將達到一個頂點，應用將會需要過多的時間來載入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bry2t2a930dpz4iklk5w52rf4\">為了解決這個問題，請使用非同步路由，它會根據請求來延遲載入某些屬性模組。延遲載入有很多好處。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ac9j0xk88em98fpa93rgssxxh\">你可以只在使用者請求時才載入某些屬性區。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mc7z5r2g2y8s0q9cwxz1srq8\">對於那些只訪問應用程式某些區域的使用者，這樣能加快載入速度。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9v5b376yxkn7gpytlz3z3j4ze\">你可以持續擴充延遲載入屬性區的功能，而不用增加初始載入的封裝大小。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97mg8133dzb8jtdv9x2sv2qsv\">你已經完成了一部分。透過把應用組織成一些模組：<code>AppModule</code>、<code>HeroesModule</code>、<code>AdminModule</code> 和 <code>CrisisCenterModule</code>，你已經有了可用於實現延遲載入的候選者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7rdosxwf8g89ni08woqpahkjt\">有些模組（比如 <code>AppModule</code>）必須在啟動時載入，但其它的都可以而且應該延遲載入。比如 <code>AdminModule</code> 就只有少數已認證的使用者才需要它，所以你應該只有在正確的人請求它時才載入。</p>\n<p><a id=\"lazy-loading-route-config\"></a></p>\n<h3 id=\"lazy-loading-route-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cx3na7abbjxz4srf5shzgxks\">延遲載入路由設定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#lazy-loading-route-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29a99h7fs38l7xh26bgdrgle\">把 <code>admin-routing.module.ts</code> 中的 <code>admin</code> 路徑從 <code>'admin'</code> 改為空路徑 <code>''</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cccaacgzwxkf6aukco4ks6jdn\">可以用<em>空路徑</em>路由來對路由進行分組，而不用往 URL 中新增額外的路徑片段。使用者仍舊訪問 <code>/admin</code>，並且 <code>AdminComponent</code> 仍然作為用來包含子路由的路由元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2w4s30m4fbxzoej5w7tavgc1x\">開啟 <code>AppRoutingModule</code>，並把一個新的 <code>admin</code> 路由新增到它的 <code>appRoutes</code> 陣列中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c488q7blsury70pjlwk0taszz\">給它一個 <code>loadChildren</code> 屬性（替換掉 <code>children</code> 屬性）。<code>loadChildren</code> 屬性接收一個函式，該函式使用瀏覽器內建的動態匯入語法 <code>import('...')</code> 來延遲載入程式碼，並回傳一個承諾（Promise）。其路徑是 <code>AdminModule</code> 的位置（相對於應用的根目錄）。當代碼請求並載入完畢後，這個 <code>Promise</code> 就會解析成一個包含 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的物件，也就是 <code>AdminModule</code>。</p>\n<code-example header=\"app-routing.module.ts (load children)\" path=\"router/src/app/app-routing.module.5.ts\" region=\"admin-1\">\n{\n  path: 'admin',\n  loadChildren: () =&gt; import('./admin/admin.module').then(m =&gt; m.AdminModule),\n},\n\n</code-example>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7b2og6au8ctmn486bhipvxuko\"><strong>注意</strong>：<br>\n當使用絕對路徑時，<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的檔案位置必須以 <code>src/app</code> 開頭，以便正確解析。對於自定義的 <a href=\"https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping\">使用絕對路徑的路徑對映表</a>，你必須在專案的 <code>tsconfig.json</code> 中必須設定好 <code>baseUrl</code> 和 <code>paths</code> 屬性。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"pl730zma7hn6gc5pc0ao3n8z\">當路由器導向到這個路由時，它會用 <code>loadChildren</code> 字串來動態載入 <code>AdminModule</code>，然後把 <code>AdminModule</code> 新增到當前的路由設定中，最後，它把所請求的路由載入到目標 <code>admin</code> 元件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vypqi2fixv70c08h1hnutayc\">延遲載入和重新設定工作只會發生一次，也就是在該路由首次被請求時。在後續的請求中，該模組和路由都是立即可用的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djpvi4gvtfdymj9gws23dt24w\">最後一步是把管理屬性區從主應用中完全分離開。根模組 <code>AppModule</code> 既不能載入也不能引用 <code>AdminModule</code> 及其檔案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gg1ptgsujyrto7tajw0sfz74\">在 <code>app.module.ts</code> 中，從頂部移除 <code>AdminModule</code> 的匯入語句，並且從 NgModule 的 <code>imports</code> 陣列中移除 <code>AdminModule</code>。</p>\n<p><a id=\"can-match-guard\"></a></p>\n<h3 id=\"canmatch-guarding-unauthorized-access-of-feature-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jp91zzlqv3d5lri45tocqc9f\"><code>canMatch</code>：保護對屬性模組的未授權訪問<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#canmatch-guarding-unauthorized-access-of-feature-modules\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9a63v2s614qmn0zdhmvsh27w\">你已經使用 <code>canActivate</code> 保護 <code>AdminModule</code> 了，它會阻止未授權使用者訪問管理屬性區。如果使用者未登入，它就會跳轉到登入頁。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ea3g08gnn0hocfgzf3xaqsfo\">但是路由器仍然會載入 <code>AdminModule</code> —— 即使使用者無法訪問它的任何一個元件。理想的方式是，只有在使用者已登入的情況下你才載入 <code>AdminModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewmv9caxthx20ifkbwhisu9j4\"><code>canMatch</code> 守衛控制著 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 是否會嘗試對應 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>。這能讓你擁有多個 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 設定，這些設定共享相同的 <code>path</code> 但根據不同的條件進行對應。這種方法能讓 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 轉而對應萬用字元 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ai4yn2jn7w51k5nj2ig5d5ug6\">現有的 <code>authGuard</code> 包含支援 <code>canMatch</code> 守衛的邏輯。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7klcrug9gkzobbargndplo10g\">最後，把 <code>authGuard</code> 新增到 <code>admin</code> 路由的 <code>canMatch</code> 陣列中。完整的 <code>admin</code> 路由是這樣的：</p>\n<code-example header=\"app-routing.module.ts (lazy admin route)\" path=\"router/src/app/app-routing.module.5.ts\" region=\"admin\">\n{\n  path: 'admin',\n  loadChildren: () =&gt; import('./admin/admin.module').then(m =&gt; m.AdminModule),\n  canMatch: [authGuard]\n},\n\n</code-example>\n<p><a id=\"preloading\"></a></p>\n<h3 id=\"preloading-background-loading-of-feature-areas\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b6y82wbfbl6h09q2ngcdcsbh\">預載入：屬性區的後台載入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#preloading-background-loading-of-feature-areas\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2k92ts3n96l68ppcfhvrt65df\">除了按需載入模組外，還可以透過預載入方式非同步載入模組。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rayiblmp0hbwxxg2lz9somx8\">當應用啟動時，<code>AppModule</code> 被急性載入，這意味著它會立即載入。而 <code>AdminModule</code> 只在使用者點選連結時載入，這叫做延遲載入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2g6v0i7yxq7jpwuik5p5ksvd\">預載入允許你在後台載入模組，以便當用戶啟用某個特定的路由時，就可以渲染這些資料了。考慮一下危機中心。它不是使用者看到的第一個檢視。預設情況下，英雄清單才是第一個檢視。為了獲得最小的初始有效負載和最快的啟動時間，你應該急性載入 <code>AppModule</code> 和 <code>HeroesModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xac9pp4yyiih8gm9zjv0qg10\">你可以延遲載入危機中心。但是，你幾乎可以肯定使用者會在啟動應用之後的幾分鐘內訪問危機中心。理想情況下，應用啟動時應該只加載 <code>AppModule</code> 和 <code>HeroesModule</code>，然後幾乎立即開始後台載入 <code>CrisisCenterModule</code>。在使用者瀏覽到危機中心之前，該模組應該已經載入完畢，可供訪問了。</p>\n<p><a id=\"how-preloading\"></a></p>\n<h4 id=\"how-preloading-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tfombv9nj5oay6weyrye3fnw\">預載入的工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#how-preloading-works\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cinqcsaccsszmva9bj1jtzp2n\">在每次成功的導向後，路由器會在自己的設定中查詢尚未載入並且可以預載入的模組。是否載入某個模組，以及要載入哪些模組，取決於<em>預載入策略</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5j07yrie3igo9e1arqkt5suov\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 提供了兩種預載入策略：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xboqaqdx0082ltr7bynr4y0m\">策略</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hljrk69anb40ln02lfw9lqqz\">無預載入</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"349rwh4pt5q47og9srn6x6mzx\">預設選項。延遲載入的屬性區域仍然按需載入。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49xqnvehgda1bjiqtnuitjwyb\">預載入</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jp4mdit42h6qimwbnh528xdv\">所有延遲載入的屬性區域都會預載入。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bi4s20fs8axhrms2j30z2isge\">路由器或者完全不預載入或者預載入每個延遲載入模組。\n路由器還支援<a href=\"guide/router-tutorial-toh#custom-preloading\">自定義預載入策略</a>，以便完全控制要預載入哪些模組以及何時載入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agym8gcvjy237goy6zwrypeyt\">本節將指導你把 <code>CrisisCenterModule</code> 改成延遲載入的，並使用 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 策略來預載入所有延遲載入模組。</p>\n<p><a id=\"lazy-load-crisis-center\"></a></p>\n<h4 id=\"lazy-load-the-crisis-center\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dy03znl0sn3pr6rmnpil9odpr\">延遲載入危機中心<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#lazy-load-the-crisis-center\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epx2jypyckl9welclq456p0ij\">修改路由設定，來延遲載入 <code>CrisisCenterModule</code>。修改的步驟和設定延遲載入 <code>AdminModule</code> 時一樣。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7x65qvatslc3dk89tneqmq4tq\">把 <code>CrisisCenterRoutingModule</code> 中的路徑從 <code>crisis-center</code> 改為空字串。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11b75alqia595mzgy3natpgi1\">往 <code>AppRoutingModule</code> 中新增一個 <code>crisis-center</code> 路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bqtn8huhqt6cwl46i2fn82lw\">設定 <code>loadChildren</code> 字串來載入 <code>CrisisCenterModule</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5asv98et7tpl5dknd34sd3ce1\">從 <code>app.module.ts</code> 中移除所有對 <code>CrisisCenterModule</code> 的引用。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gjr63keq29yclriyzc7e1cp1\">下面是開啟預載入之前的模組修改版：</p>\n<code-tabs>\n    <code-pane header=\"app.module.ts\" path=\"router/src/app/app.module.ts\" region=\"preload\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule } from './heroes/heroes.module';\nimport { AuthModule } from './auth/auth.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AuthModule,\n    AppRoutingModule,\n  ],\n  declarations: [\n    AppComponent,\n    ComposeMessageComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n\n</code-pane>\n    <code-pane header=\"app-routing.module.ts\" path=\"router/src/app/app-routing.module.6.ts\" region=\"preload-v1\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport {\n  <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>,\n} from '@angular/router';\n\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nimport { authGuard } from './auth/auth.guard';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'compose',\n    component: ComposeMessageComponent,\n    outlet: 'popup'\n  },\n  {\n    path: 'admin',\n    loadChildren: () =&gt; import('./admin/admin.module').then(m =&gt; m.AdminModule),\n    canMatch: [authGuard]\n  },\n  {\n    path: 'crisis-center',\n    loadChildren: () =&gt; import('./crisis-center/crisis-center.module').then(m =&gt; m.CrisisCenterModule)\n  },\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-pane>\n    <code-pane header=\"crisis-center-routing.module.ts\" path=\"router/src/app/crisis-center/crisis-center-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent } from './crisis-detail/crisis-detail.component';\n\nimport { canDeactivateGuard } from '../can-deactivate.guard';\nimport { crisisDetailResolver } from './crisis-detail-resolver';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [canDeactivateGuard],\n            resolve: {\n              crisis: crisisDetailResolver\n            }\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewvm8hrcus3twdhaw198x2kst\">你可以現在嘗試它，並確認在點選了『Crisis Center』按鈕之後載入了 <code>CrisisCenterModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pu78tzldfon5o5cdwbdpuy6u\">要為所有延遲載入模組啟用預載入功能，請從 Angular 的路由模組中匯入 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a91prmgjutl30a1pm24bn3ew9\"><code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法的第二個引數接受一個附加設定選項物件。<code>preloadingStrategy</code> 就是其中之一。把 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 新增到 <code>forRoot()</code> 呼叫中：</p>\n<code-example header=\"src/app/app-routing.module.ts (preload all)\" path=\"router/src/app/app-routing.module.6.ts\" region=\"forRoot\">\nRouterModule.forRoot(\n  appRoutes,\n  {\n    enableTracing: true, // &lt;-- debugging purposes only\n    preloadingStrategy: <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>\n  }\n)\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4rqjm55dx1t8b68rdcwd09qxr\">這項設定會讓 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 預載入器立即載入<em>所有</em>延遲載入路由（帶 <code>loadChildren</code> 屬性的路由）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83u85n3uqywr7i0174qkwfngd\">當訪問 <code>http://localhost:4200</code> 時，<code>/heroes</code> 路由立即隨之啟動，並且路由器在載入了 <code>HeroesModule</code> 之後立即開始載入 <code>CrisisCenterModule</code>。</p>\n<p><a id=\"custom-preloading\"></a></p>\n<h3 id=\"custom-preloading-strategy\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewitf0quklazbdvkzbadl06xx\">自定義預載入策略<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#custom-preloading-strategy\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98v6gbmvhv1uotrc4w4idmcdb\">在很多場景下，預載入的每個延遲載入模組都能正常工作。但是，考慮到低頻寬和使用者指標等因素，可以為特定的屬性模組使用自定義預載入策略。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwdcsohg7m1ry2x1nerke3r9l\">本節將指導你新增一個自定義策略，它只預載入 <code>data.preload</code> 標誌為 <code>true</code> 路由。回想一下，你可以在路由的 <code>data</code> 屬性中新增任何東西。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"980cn4z6fbeq507bsgg7joqhz\">在 <code>AppRoutingModule</code> 的 <code>crisis-center</code> 路由中設定 <code>data.preload</code> 標誌。</p>\n<code-example header=\"src/app/app-routing.module.ts (route data preload)\" path=\"router/src/app/app-routing.module.ts\" region=\"preload-v2\">\n{\n  path: 'crisis-center',\n  loadChildren: () =&gt; import('./crisis-center/crisis-center.module').then(m =&gt; m.CrisisCenterModule),\n  data: { preload: true }\n},\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"doq6j92002cymfi90t4xxykkx\">生成一個新的 <code>SelectivePreloadingStrategy</code> 服務。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service selective-preloading-strategy\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drl2tctgaobsa1aa6kz2yuqxk\">使用下列內容替換 <code>selective-preloading-strategy.service.ts</code>：</p>\n<code-example header=\"src/app/selective-preloading-strategy.service.ts\" path=\"router/src/app/selective-preloading-strategy.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/router/PreloadingStrategy\" class=\"code-anchor\">PreloadingStrategy</a>, <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class SelectivePreloadingStrategyService implements <a href=\"api/router/PreloadingStrategy\" class=\"code-anchor\">PreloadingStrategy</a> {\n  preloadedModules: string[] = [];\n\n  preload(route: <a href=\"api/router/Route\" class=\"code-anchor\">Route</a>, load: () =&gt; Observable&lt;any&gt;): Observable&lt;any&gt; {\n    if (route.canMatch === undefined &amp;&amp; route.data?.['preload'] &amp;&amp; route.path != null) {\n      // add the route path to the preloaded module array\n      this.preloadedModules.push(route.path);\n\n      // log the route path to the console\n      console.log('Preloaded: ' + route.path);\n\n      return load();\n    } else {\n      return of(null);\n    }\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ac1u4guu2avqn1xkuxpb95id1\"><code>SelectivePreloadingStrategyService</code> 實現了 <code><a href=\"api/router/PreloadingStrategy\" class=\"code-anchor\">PreloadingStrategy</a></code>，它有一個方法 <code>preload()</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjzyg933lfhc5ip7rxc546vdp\">路由器會用兩個引數來呼叫 <code>preload()</code> 方法：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evs1gftq1x2vz2qrf9kccn1ph\">要載入的路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1k808znfa2iswyjnujz4ncvwj\">一個載入器（loader）函式，它能非同步載入帶路由的模組。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24vyo4q630oirpr5aqvr99o77\"><code>preload</code> 的實現要回傳一個 <code>Observable</code>。如果該路由應該預載入，它就會回傳呼叫載入器函式所回傳的 <code>Observable</code>。如果該路由<em>不</em>應該預載入，它就回傳一個 <code>null</code> 值的 <code>Observable</code> 物件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70jm59o9ketg00untcbvf6mnd\">在這個例子中，如果路由的 <code>data.preload</code> 標誌是真值，則 <code>preload()</code> 方法會載入該路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cogunaiu4fa6mcvwqx5jwla7q\">它的副作用是 <code>SelectivePreloadingStrategyService</code> 會把所選路由的 <code>path</code> 記錄在它的公共陣列 <code>preloadedModules</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4h4rmbp01w8ndpn27bixzozse\">很快，你就會擴充套件 <code>AdminDashboardComponent</code> 來注入該服務，並且顯示它的 <code>preloadedModules</code> 陣列。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dbxor5x2vu0e4gn1vy69wxk89\">但是首先，要對 <code>AppRoutingModule</code> 做少量修改。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53aym10y12lq4nj6jwvup6y9q\">把 <code>SelectivePreloadingStrategyService</code> 匯入到 <code>AppRoutingModule</code> 中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dtyptof682zwjwey81d0qfvg\">把 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 策略替換成對 <code>forRoot()</code> 的呼叫，並且傳入這個 <code>SelectivePreloadingStrategyService</code>。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ara9aub48x8qyg3585d4pwn07\">現在，編輯 <code>AdminDashboardComponent</code> 以顯示這些預載入路由的日誌。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7795a846vbt5vah7enbr1hdj\">匯入 <code>SelectivePreloadingStrategyService</code>（它是一個服務）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfxrvkjderw2dq1zxkwfy1e49\">把它注入到儀表盤的建構式函式中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70lx7y467m8wu34y15vbq4lta\">修改範本來顯示這個策略服務的 <code>preloadedModules</code> 陣列。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ct6mo32w2t5y6q5zm6zbrsrqe\">現在檔案如下：</p>\n<code-example header=\"src/app/admin/admin-dashboard/admin-dashboard.component.ts (preloaded modules)\" path=\"router/src/app/admin/admin-dashboard/admin-dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { SelectivePreloadingStrategyService } from '../../selective-preloading-strategy.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.css']\n})\nexport class AdminDashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  sessionId!: Observable&lt;string&gt;;\n  token!: Observable&lt;string&gt;;\n  modules: string[] = [];\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    preloadStrategy: SelectivePreloadingStrategyService\n  ) {\n    this.modules = preloadStrategy.preloadedModules;\n  }\n\n  ngOnInit() {\n    // Capture the session ID if available\n    this.sessionId = this.route\n      .queryParamMap\n      .pipe(map(params =&gt; params.get('session_id') || 'None'));\n\n    // Capture the fragment if available\n    this.token = this.route\n      .fragment\n      .pipe(map(fragment =&gt; fragment || 'None'));\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d89ldknc4wl2e9ymr9kbg217y\">一旦應用載入完了初始路由，<code>CrisisCenterModule</code> 也被預載入了。透過 <code>Admin</code> 屬性區中的記錄就可以驗證它，『Preloaded Modules』中列出了 <code>crisis-center</code>。它也被記錄到了瀏覽器的控制台。</p>\n<p><a id=\"redirect-advanced\"></a></p>\n<h3 id=\"migrating-urls-with-redirects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"809fkg2zs0ulv1pqbakjvh371\">使用重導向遷移 URL<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#migrating-urls-with-redirects\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jmbv7j9yrr6ez6awa7ajrrae\">你已經設定好了路由，並且用指令式和聲明式的方式導向到了很多不同的路由。但是，任何應用的需求都會隨著時間而改變。你把連結 <code>/heroes</code> 和 <code>hero/:id</code> 指向了 <code>HeroListComponent</code> 和 <code>HeroDetailComponent</code> 元件。如果有這樣一個需求，要把連結 <code>heroes</code> 變成 <code>superheroes</code>，你可能仍然希望以前的 URL 能正常導向。但你也不想在應用中找到並修改每一個連結，這時候，重導向就可以省去這些瑣碎的重構工作。</p>\n<p><a id=\"url-refactor\"></a></p>\n<h4 id=\"changing-heroes-to-superheroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anhzkzcsna0galgl1xfo3nrd5\">把 <code>/heroes</code> 改為 <code>/superheroes</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#changing-heroes-to-superheroes\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42ohwc4fqqi47afmn1jzotskv\">本節將指導你將 <code>Hero</code> 路由遷移到新的 URL。在導向之前，<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 會檢查路由設定中的重導向語句，以便將來按需觸發重導向。要支援這種修改，你就要在 <code>heroes-routing.module</code> 檔案中把老的路由重導向到新的路由。</p>\n<code-example header=\"src/app/heroes/heroes-routing.module.ts (heroes redirects)\" path=\"router/src/app/heroes/heroes-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes', redirectTo: '/superheroes' },\n  { path: 'hero/:id', redirectTo: '/superhero/:id' },\n  { path: 'superheroes',  component: HeroListComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'heroes' } },\n  { path: 'superhero/:id', component: HeroDetailComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'hero' } }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroesRoutingModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lu5dbr0q9k88r7clgradcq29\">注意，這裡有兩種型別的重導向。第一種是不帶引數的從 <code>/heroes</code> 重導向到 <code>/superheroes</code>。這是一種非常直觀的重導向。第二種是從 <code>/hero/:id</code> 重導向到 <code>/superhero/:id</code>，它還要包含一個 <code>:id</code> 路由引數。路由器重導向時使用強大的模式對應功能，這樣，路由器就會檢查 URL，並且把 <code>path</code> 中帶的路由引數替換成相應的目標形式。以前，你導向到形如 <code>/hero/15</code> 的 URL 時，帶了一個路由引數 <code>id</code>，它的值是 <code>15</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5315kyexbrspyca05zrq4myy7\">在重導向的時候，路由器還支援<a href=\"guide/router-tutorial-toh#query-parameters\">查詢引數</a>和<a href=\"guide/router-tutorial-toh#fragment\">片段(fragment)</a>。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w7rzjbjs9197pzqxxb34yig0\">當使用絕對地址重導向時，路由器將會使用路由設定的 <code>redirectTo</code> 屬性中規定的查詢引數和片段。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bilx75hebd56ht13h7ty6p7by\">當使用相對地址重導向時，路由器將會使用源地址（跳轉前的地址）中的查詢引數和片段。</li>\n</ul>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1evrxq9tls57xujaovkz7y3cj\">目前，空路徑被重導向到了 <code>/heroes</code>，它又被重導向到了 <code>/superheroes</code>。這樣不行，因為 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 在每一層的路由設定中只會處理一次重導向。這樣可以防止出現無限迴圈的重導向。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23z851rl49mq3m431wbiwkclq\">所以，你要在 <code>app-routing.module.ts</code> 中修改空路徑路由，讓它重導向到 <code>/superheroes</code>。</p>\n<code-example header=\"src/app/app-routing.module.ts (superheroes redirect)\" path=\"router/src/app/app-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nimport { authGuard } from './auth/auth.guard';\nimport { SelectivePreloadingStrategyService } from './selective-preloading-strategy.service';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'compose',\n    component: ComposeMessageComponent,\n    outlet: 'popup'\n  },\n  {\n    path: 'admin',\n    loadChildren: () =&gt; import('./admin/admin.module').then(m =&gt; m.AdminModule),\n    canMatch: [authGuard]\n  },\n  {\n    path: 'crisis-center',\n    loadChildren: () =&gt; import('./crisis-center/crisis-center.module').then(m =&gt; m.CrisisCenterModule),\n    data: { preload: true }\n  },\n  { path: '',   redirectTo: '/superheroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      {\n        enableTracing: false, // &lt;-- debugging purposes only\n        preloadingStrategy: SelectivePreloadingStrategyService,\n      }\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b01s2ob9qxdroqd3f2ab3n7pi\">由於 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 與路由設定無關，所以你要修改相關的路由連結，以便在新的路由啟用時，它們也能保持啟用狀態。還要修改 <code>app.component.ts</code> 範本中的 <code>/heroes</code> 這個 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>。</p>\n<code-example header=\"src/app/app.component.html (superheroes active routerLink)\" path=\"router/src/app/app.component.html\">\n&lt;div class=\"wrapper\"&gt;\n  &lt;h1 class=\"title\"&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/superheroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/admin\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Admin&lt;/a&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/login\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Login&lt;/a&gt;\n    &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\"&gt;Contact&lt;/a&gt;\n  &lt;/nav&gt;\n  &lt;div [@routeAnimation]=\"getRouteAnimationData()\"&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  &lt;/div&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"p7ihxkz5af7661uax8vxkvo1\">修改 <code>hero-detail.component.ts</code> 中的 <code>goToHeroes()</code> 方法，使用可選的路由引數導向回 <code>/superheroes</code>。</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (goToHeroes)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.ts\" region=\"redirect\">\ngotoHeroes(hero: Hero) {\n  const heroId = hero ? hero.id : null;\n  // Pass along the hero id if available\n  // so that the HeroList component can select that hero.\n  // Include a junk 'foo' property for fun.\n  this.router.navigate(['/superheroes', {id: heroId, foo: 'foo'}]);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ay8ii1tj4turwgw4jcaotxj55\">當這些重導向設定好之後，所有以前的路由都指向了它們的新目標，並且每個 URL 也仍然能正常工作。</p>\n<p><a id=\"inspect-config\"></a></p>\n<h3 id=\"inspect-the-routers-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"867yn80cr13al92k96y4p3t0m\">審查路由器設定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#inspect-the-routers-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpex7yga71p6vhatbjzh813am\">要確定你的路由是否真的<a href=\"guide/router-tutorial-toh#routing-module-order\">按照正確的順序</a>執行的，你可以審查路由器的設定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jbymj6607famnwh4dr6wigzv\">可以透過注入路由器並在控制台中記錄其 <code>config</code> 屬性來實現。比如，把 <code>AppModule</code> 修改為這樣，並在瀏覽器的控制台視窗中檢視最終的路由設定。</p>\n<code-example header=\"src/app/app.module.ts (inspect the router config)\" path=\"router/src/app/app.module.7.ts\" region=\"inspect-config\">\nexport class AppModule {\n  // Diagnostic only: inspect router configuration\n  constructor(router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n    // Use a custom replacer to display function names in the route configs\n    const replacer = (key, value) =&gt; (typeof value === 'function') ? value.name : value;\n\n    console.log('<a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>: ', JSON.stringify(router.config, replacer, 2));\n  }\n}\n\n</code-example>\n<p><a id=\"final-app\"></a></p>\n<h2 id=\"final-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2iwytsyj4pyeb9nfrabnz533m\">最終的應用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#final-application\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvfwexc5d8e5zaom06undexe1\">對這個已完成的路由器應用，參見 <live-example name=\"router\"></live-example>的最終程式碼。</p>\n<p><a id=\"link-parameters-array\"></a></p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n\n\n\n<!-- links to this doc:\n - api/router/GuardResult\n - api/router/RouterOutlet\n - guide/deployment\n - guide/glossary\n - guide/lazy-loading-ngmodules\n - guide/router\n - guide/router-reference\n - guide/routing-overview\n - guide/testing-components-scenarios\n-->\n<!-- links from this doc:\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/animation\n - api/animations/query\n - api/animations/state\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/DefaultValueAccessor\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/platform-browser/animations/async\n - api/router/ActivatedRoute\n - api/router/ActivatedRoute#paramMap\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivateChildFn\n - api/router/CanActivateFn\n - api/router/CanDeactivateFn\n - api/router/CanMatchFn\n - api/router/ChildrenOutletContexts\n - api/router/NavigationExtras\n - api/router/ParamMap\n - api/router/PreloadAllModules\n - api/router/PreloadingStrategy\n - api/router/ResolveFn\n - api/router/Route\n - api/router/Router\n - api/router/Router#navigate\n - api/router/Router#navigateByUrl\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterModule\n - api/router/RouterModule#forChild\n - api/router/RouterModule#forRoot\n - api/router/RouterOutlet\n - api/router/RouterStateSnapshot\n - api/router/Routes\n - api/router/UrlTree\n - api/upgrade/static\n - cli\n - cli/generate\n - cli/new\n - guide/animations\n - guide/architecture\n - guide/class-binding\n - guide/router#route-order\n - guide/router-reference#example-config\n - guide/router-tutorial-toh#a-crisis-center-with-child-routes\n - guide/router-tutorial-toh#activated-route-in-action\n - guide/router-tutorial-toh#add-a-secondary-route\n - guide/router-tutorial-toh#add-an-admin-feature-module\n - guide/router-tutorial-toh#add-heroes-functionality\n - guide/router-tutorial-toh#add-the-logincomponent\n - guide/router-tutorial-toh#add-the-router-outlet\n - guide/router-tutorial-toh#adding-routable-animations\n - guide/router-tutorial-toh#authenticate-with-authguard\n - guide/router-tutorial-toh#benefits-of-a-routing-module\n - guide/router-tutorial-toh#can-activate-child-guard\n - guide/router-tutorial-toh#canactivate-requiring-authentication\n - guide/router-tutorial-toh#canactivatechild-guarding-child-routes\n - guide/router-tutorial-toh#cancel-and-save\n - guide/router-tutorial-toh#candeactivate-handling-unsaved-changes\n - guide/router-tutorial-toh#canmatch-guarding-unauthorized-access-of-feature-modules\n - guide/router-tutorial-toh#changing-heroes-to-superheroes\n - guide/router-tutorial-toh#child-route-configuration\n - guide/router-tutorial-toh#child-routing-component\n - guide/router-tutorial-toh#clear-secondary-routes\n - guide/router-tutorial-toh#clearing-secondary-routes\n - guide/router-tutorial-toh#component-less-route-grouping-routes-without-a-component\n - guide/router-tutorial-toh#create-a-sample-application\n - guide/router-tutorial-toh#custom-preloading\n - guide/router-tutorial-toh#custom-preloading-strategy\n - guide/router-tutorial-toh#define-a-wildcard-route\n - guide/router-tutorial-toh#define-routes\n - guide/router-tutorial-toh#displaying-multiple-routes-in-named-outlets\n - guide/router-tutorial-toh#fetch-data-before-navigating\n - guide/router-tutorial-toh#final-application\n - guide/router-tutorial-toh#fragment\n - guide/router-tutorial-toh#guard-the-admin-feature\n - guide/router-tutorial-toh#hero-feature-routing-requirements\n - guide/router-tutorial-toh#heroes-functionality\n - guide/router-tutorial-toh#heroes-list-optionally-selecting-a-hero\n - guide/router-tutorial-toh#how-preloading-works\n - guide/router-tutorial-toh#import-crisis-center-module-into-the-appmodule-routes\n - guide/router-tutorial-toh#inspect-config\n - guide/router-tutorial-toh#inspect-the-routers-configuration\n - guide/router-tutorial-toh#integrate-routing-with-your-app\n - guide/router-tutorial-toh#lazy-load-the-crisis-center\n - guide/router-tutorial-toh#lazy-loading-route-configuration\n - guide/router-tutorial-toh#link-parameters-array\n - guide/router-tutorial-toh#migrating-urls-with-redirects\n - guide/router-tutorial-toh#milestone-1-getting-started\n - guide/router-tutorial-toh#milestone-1-wrap-up\n - guide/router-tutorial-toh#milestone-2-routing-module\n - guide/router-tutorial-toh#milestone-3-heroes-feature\n - guide/router-tutorial-toh#milestone-3-wrap-up\n - guide/router-tutorial-toh#milestone-4-crisis-center-feature\n - guide/router-tutorial-toh#milestone-5-route-guards\n - guide/router-tutorial-toh#milestone-6-asynchronous-routing\n - guide/router-tutorial-toh#module-import-order\n - guide/router-tutorial-toh#navigate-to-crisis-list-with-a-relative-url\n - guide/router-tutorial-toh#navigating-back-to-the-list-component\n - guide/router-tutorial-toh#objectives\n - guide/router-tutorial-toh#observable-parammap-and-component-reuse\n - guide/router-tutorial-toh#optional-route-parameters\n - guide/router-tutorial-toh#parammap-api\n - guide/router-tutorial-toh#preloading-background-loading-of-feature-areas\n - guide/router-tutorial-toh#prerequisites\n - guide/router-tutorial-toh#query-parameters\n - guide/router-tutorial-toh#query-parameters-and-fragments\n - guide/router-tutorial-toh#redirect\n - guide/router-tutorial-toh#refactor-the-routing-configuration-into-a-routing-module\n - guide/router-tutorial-toh#register-router-and-routes\n - guide/router-tutorial-toh#relative-navigation\n - guide/router-tutorial-toh#remove-duplicate-hero-routes\n - guide/router-tutorial-toh#remove-heroes-declarations\n - guide/router-tutorial-toh#resolve-pre-fetching-component-data\n - guide/router-tutorial-toh#reuse\n - guide/router-tutorial-toh#route-definition-with-a-parameter\n - guide/router-tutorial-toh#route-parameters\n - guide/router-tutorial-toh#route-parameters-in-the-activatedroute-service\n - guide/router-tutorial-toh#route-parameters-required-or-optional\n - guide/router-tutorial-toh#router-tutorial-tour-of-heroes\n - guide/router-tutorial-toh#routing-module\n - guide/router-tutorial-toh#routing-module-order\n - guide/router-tutorial-toh#secondary-route-navigation-merging-routes-during-navigation\n - guide/router-tutorial-toh#secondary-routes\n - guide/router-tutorial-toh#set-up-redirects\n - guide/router-tutorial-toh#setting-the-route-parameters-in-the-list-view\n - guide/router-tutorial-toh#snapshot-the-no-observable-alternative\n - guide/router-tutorial-toh#the-sample-application-in-action\n - guide/router-tutorial-toh#wildcard\n - guide/singleton-services#forRoot-router\n - start\n - tutorial/tour-of-heroes\n - tutorial/tour-of-heroes/toh-pt4\n - https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\n - https://developer.mozilla.org/docs/Web/API/URLSearchParams\n - https://en.wikipedia.org/wiki/Fragment_identifier\n - https://vsavkin.tumblr.com/post/146722301646/angular-router-empty-paths-componentless-routes\n - https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping\n - https://www.w3.org/DesignIssues/MatrixURIs.html\n-->"}
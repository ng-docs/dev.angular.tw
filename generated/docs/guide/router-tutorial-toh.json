{"id":"guide/router-tutorial-toh","title":"路由器教程：英雄之旅","contents":"<div class=\"content\">\n  <p><a id=\"router-tutorial\"></a></p>\n<h1 id=\"router-tutorial-tour-of-heroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y004yoqr0hb1r1xav0fbhcbb\">路由器教程：英雄之旅<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#router-tutorial-tour-of-heroes\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32iwws9tlzvuyul8vobgqemx\">本教程提供了关于 Angular 路由器的概要性概述。在本教程中，你将基于基本的路由器配置来探索诸如子路由、路由参数、惰性加载 NgModule、路由守卫和预加载数据等功能，以改善用户体验。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5p3ihef9qpleioy85r1lq8uca\">有关该应用最终版本的有效示例，请参阅<live-example name=\"router\"></live-example>。</p>\n<p><a id=\"router-tutorial-objectives\"></a></p>\n<h2 id=\"objectives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbta8klpv23x9gfh4twoy80po\">目标<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#objectives\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czak4gb43gwzphp8un8uk6poc\">本指南描述了一个多页路由示例应用程序的开发过程。在此过程中，它重点介绍了路由器的关键特性，比如：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c62jp9yjk0gxcctcw48fg6vpz\">将应用程序功能组织到模块中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63n00ttin79pz95fgljramt0e\">导航到组件（从 <em>Heroes</em> 链接导航到“英雄列表”）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jo1x3gb59ksks03d5ij7zoqh\">包括一个路由参数（在路由到“英雄详细信息”时传入英雄的 <code>id</code>）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8v8aawiawcqfdp6f9859v4m24\">子路由（<em>危机中心</em>特性区有自己的路由）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kns6gwx4ra50tby7nvxu0sm9\"><code>canActivate</code> 守卫（检查路由访问）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6d98vqdz0x9o8dk8rbvgbc4dw\"><code>canActivateChild</code> 守卫（检查子路由访问）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4atdvw47xr4h79ghlcfpw45jy\"><code>canDeactivate</code> 守卫（在放弃未保存的更改之前请求许可）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d48os9mz5zng82zjx7ch7865\"><code>resolve</code> 守卫（预先获取路由数据）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8g2r9psz8o6szz6r3n86sv9dc\">惰性加载 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vhhct20glfqtcxcvr1wsqaa6\"><code>canMatch</code> 守卫（在加载功能模块的文件之前检查）</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xr8b4albbs13t52zzgzycnv9\">本指南按照里程碑的顺序进行，就像你逐步构建应用程序一样，但这里假定你已经熟悉 <a href=\"guide/architecture\">Angular 的</a>基本概念。关于 Angular 的一般性介绍，请参见<a href=\"start\">《入门指南》</a>。关于更深入的概述，请参见<a href=\"tutorial/tour-of-heroes\">《英雄之旅》</a>教程。</p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zh2yuyafmn2qaumsdhhvo8n9\">要完成本教程，你应该对以下概念有基本的了解：</p>\n<ul>\n<li>JavaScript</li>\n<li>HTML</li>\n<li>CSS</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vtg2wry451tucy201uexb3e4\"><a href=\"cli\">Angular CLI</a></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2md4wpdlbgon5ims4on6pkjw8\">你可能会发现<a href=\"tutorial/tour-of-heroes\">《英雄之旅》教程</a>很有用，但这不是必需的。</p>\n<h2 id=\"the-sample-application-in-action\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dntnmo2mg724spi2o0f05aqqi\">范例应用实战<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#the-sample-application-in-action\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xlx70bxttnaf515c4m8m2ruc\">本教程的示例应用会帮助“英雄雇佣管理局”找到需要各位英雄去解决的危机。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqwrowfwlz6hszuje6zb5os79\">本应用有三个主要的特性区：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dblrh1tzherpdlemtatw03nkf\"><em>危机中心</em>，用于维护要指派给英雄的危机列表。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2txvglo1m6kpkrppr9bjumjqy\"><em>英雄</em>特性区，用于维护管理局雇佣的英雄列表。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7fqvwa9maiyyyhmb1p0beybc\"><em>管理</em>特性区会管理危机和英雄的列表。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53ev4d064uiuzxjdtaegkb5bf\">点击<live-example name=\"router\" title=\"英雄职介中心的现场演练\">到在线例子的链接</live-example>试用一下。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5yg5igqeacofil4ko798kvkh\">该应用会渲染出一排导航按钮和和一个<em>英雄列表</em>视图。</p>\n<div class=\"lightbox\">\n<img alt=\"Example application with a row of navigation buttons and a list of heroes\" src=\"generated/images/guide/router/hero-list.gif\" width=\"400\" height=\"512\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71jgka10ty59oh1hi4vlzso9w\">选择其中之一，该应用就会把你带到此英雄的编辑页面。</p>\n<div class=\"lightbox\">\n<img alt=\"Detail view of hero with additional information, input, and back button\" src=\"generated/images/guide/router/hero-detail.png\" width=\"400\" height=\"278\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"da0gxhj6tr9xq1ullydft8zxl\">修改完名字，再点击“后退”按钮，应用又回到了英雄列表页，其中显示的英雄名已经变了。注意，对名字的修改会立即生效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pq6yyxuqv0x2oeue0g6fxsd8\">另外你也可以点击浏览器本身的后退按钮（而不是应用中的 “Back” 按钮），这也同样会回到英雄列表页。在 Angular 应用中导航也会和标准的 Web 导航一样更新浏览器中的历史。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uzi2tlekg8pu9o8xkwefenyg\">现在，点击<em>危机中心</em>链接，前往<em>危机</em>列表页。</p>\n<div class=\"lightbox\">\n<img alt=\"Crisis Center list of crises\" src=\"generated/images/guide/router/crisis-center-list.gif\" width=\"391\" height=\"240\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ncb1i3w495jvmff2x34ds7y1\">选择其中之一，该应用就会把你带到此危机的编辑页面。<em>危机详情</em>是当前页的子组件，就在列表的紧下方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fpzgherfzdmi6wsr0fkqrtw7\">修改危机的名称。注意，危机列表中的相应名称<strong>并没有</strong>修改。</p>\n<div class=\"lightbox\">\n<img alt=\"Crisis Center detail of a crisis with data, an input, and save and cancel buttons.\" src=\"generated/images/guide/router/crisis-center-detail.gif\" width=\"388\" height=\"378\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4q8c5ljrrhca1psd8ivqnzkxq\">这和<em>英雄详情</em>页略有不同。<em>英雄详情</em>会立即保存你所做的更改。而<em>危机详情</em>页中，你的更改都是临时的 —— 除非按“保存”按钮保存它们，或者按“取消”按钮放弃它们。这两个按钮都会导航回<em>危机中心</em>，显示危机列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9r9lx5pjuwvj74e3gy2fpqhuf\">单击浏览器后退按钮或 “Heroes” 链接，可以激活一个对话框。</p>\n<div class=\"lightbox\">\n<img alt=\"Alert that asks user to confirm discarding changes\" src=\"generated/images/guide/router/confirm-dialog.png\" width=\"250\" height=\"101\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpcnkjv30719367e4unqcat3\">你可以回答“确定”以放弃这些更改，或者回答“取消”来继续编辑。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30qd6kw6zismtji34qyv3iqia\">这种行为的幕后是路由器的 <code>canDeactivate</code> 守卫。该守卫让你有机会进行清理工作或在离开当前视图之前请求用户的许可。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p2fndfmyjse5ol598p3fph6y\"><code>Admin</code> 和 <code>Login</code> 按钮用于演示路由器的其它能力，本章稍后的部分会讲解它们。</p>\n<p><a id=\"getting-started\"></a></p>\n<h2 id=\"milestone-1-getting-started\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xrz21htex6memf6exi292ijd\">里程碑 1：起步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-1-getting-started\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gxi010jy2f6ktgki6q98w6cs\">开始本应用的一个简版，它在两个空路由之间导航。</p>\n<div class=\"lightbox\">\n<img alt=\"Animated image of application with a Crisis Center button and a Heroes button. The pointer clicks each button to show a view for each.\" src=\"generated/images/guide/router/router-1-anim.gif\" width=\"320\" height=\"128\">\n</div>\n<p><a id=\"import\"></a></p>\n<h3 id=\"create-a-sample-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bruw2t9iar7oam6yjy176ohbg\">创建一个范例应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#create-a-sample-application\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6uvj3allpl538a7kohb47y5tw\">创建一个新的 Angular 项目 <em>angular-router-tour-of-heroes</em>。</p>\n<code-example format=\"shell\" language=\"shell\">\n ng new angular-router-tour-of-heroes\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7m5p0hhhbfq912888dgv9mdml\">当系统提示 <code>Would you like to add Angular routing?</code> 时，选择 <code>N</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekg7ire5wfr2pk4k3xpx6sjtb\">当系统提示 <code>Which stylesheet format would you like to use?</code> 时，选择 <code>CSS</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tg1q16nhuqmlomecrslvr0z5\">片刻之后，一个新项目 <code>angular-router-tour-of-heroes</code> 已准备就绪。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qnj3mqq2bopui81ylv8mlfjs\">从你的终端，导航到 <code>angular-router-tour-of-heroes</code> 目录。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rbtxxyj4wr4fzmzpoxa2s75e\">运行 <code>ng serve</code> 来验证新应用是否正常运行。</p>\n<code-example language=\"sh\">\n ng serve\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ckjv92jxuamm59dj19n89bpp\">打开浏览器访问 <code>http://localhost:4200</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7i916zteru1jev0f4ovpbso61\">你会发现本应用正运行在浏览器中。</p>\n</li>\n</ol>\n<h3 id=\"define-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gkgtzf93wc47qu8822utz857\">定义路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#define-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11whawdllfcr1r2sff9v53uq8\">路由器必须用“路由定义”的列表进行配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ay7nnfszanw558ulwgg3nqtzl\">每个定义都被翻译成了一个<a href=\"api/router/Route\">Route</a>对象。该对象有一个 <code>path</code> 字段，表示该路由中的 URL 路径部分，和一个 <code>component</code> 字段，表示与该路由相关联的组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9k6kke2tr0ai9ilzwgrh03qkc\">当浏览器的 URL 变化时或在代码中告诉路由器导航到一个路径时，路由器就会翻出它用来保存这些路由定义的注册表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6g78cnnmxmp6vtj4b8i08zdz\">第一个路由执行以下操作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4g0myyg00gydovpalh988vuf4\">当浏览器地址栏的 URL 变化时，如果它匹配上了路径部分 <code>/crisis-center</code>，路由器就会激活一个 <code>CrisisListComponent</code> 的实例，并显示它的视图。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5ozf5afeonwhbjn2narwthxn\">当应用程序请求导航到路径 <code>/crisis-center</code> 时，路由器激活一个 <code>CrisisListComponent</code> 的实例，显示它的视图，并将该路径更新到浏览器地址栏和历史。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qr54eszlhnkn05pt4ckattrf\">第一个配置定义了由两个路由构成的数组，它们用最短路径指向了 <code>CrisisListComponent</code> 和 <code>HeroListComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfgghgr7nlrd5xe2mvvllts9p\">生成 <code>CrisisList</code> 和 <code>HeroList</code> 组件，以便路由器能够渲染它们。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component crisis-list\n\n</code-example>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-list\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqd6f9odo14zyjadofpdnco\">把每个组件的内容都替换成下列范例 HTML。</p>\n<code-tabs>\n    <code-pane header=\"src/app/crisis-list/crisis-list.component.html\" path=\"router/src/app/crisis-list/crisis-list.component.1.html\">\n&lt;h2&gt;CRISIS CENTER&lt;/h2&gt;\n&lt;p&gt;Get your crisis here&lt;/p&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/hero-list/hero-list.component.html\" path=\"router/src/app/hero-list/hero-list.component.1.html\" region=\"template\">\n&lt;h2&gt;HEROES&lt;/h2&gt;\n&lt;p&gt;Get your heroes here&lt;/p&gt;\n\n\n</code-pane>\n</code-tabs>\n<h3 id=\"register-router-and-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xp6zi7ns7emunwg3sq5zefla\">注册 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 和 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#register-router-and-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70bjw53a62kifl1bha2d9f4ff\">为了使用 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>，你必须注册来自 <code>@angular/router</code> 包中的 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>。定义一个路由数组 <code>appRoutes</code>，并把它传给 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法。<code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法会返回一个模块，其中包含配置好的 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务提供者，以及路由库所需的其它提供者。一旦启动了应用，<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 就会根据当前的浏览器 URL 进行首次导航。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d52ho0jxyw3sbe0j6za69zru0\"><strong>注意</strong>：<br>\n<code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法是用于注册全应用级提供者的编码模式。要详细了解全应用级提供者，参见<a href=\"guide/singleton-services#forRoot-router\">单例服务</a> 一章。</p>\n</div>\n<code-example header=\"src/app/app.module.ts (first-config)\" path=\"router/src/app/app.module.1.ts\" region=\"first-config\">\nimport {<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>} from '@angular/core';\nimport {<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>} from '@angular/forms';\nimport {<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>} from '@angular/platform-browser';\nimport {<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>} from '@angular/router';\n\nimport {AppComponent} from './app.component';\nimport {CrisisListComponent} from './crisis-list/crisis-list.component';\nimport {HeroListComponent} from './hero-list/hero-list.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {path: 'crisis-center', component: CrisisListComponent},\n  {path: 'heroes', component: HeroListComponent},\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    RouterModule.forRoot(\n        appRoutes, {enableTracing: true}  // &lt;-- debugging purposes only\n        )\n  ],\n  declarations: [\n    AppComponent, HeroListComponent, CrisisListComponent,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vt3e6yppmdt5mwd8oat55t7d\">对于最小化的路由配置，把配置好的 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 添加到 <code>AppModule</code> 中就足够了。但是，随着应用的成长，你将需要<a href=\"guide/router-tutorial-toh#refactor-the-routing-configuration-into-a-routing-module\">将路由配置重构</a>到单独的文件中，并创建<a href=\"guide/router-tutorial-toh#routing-module\">路由模块</a>，路由模块是一种特殊的、专做路由的<strong>服务模块</strong>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87phumiwlfstpwaycxsa8kixu\">把 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 注册到 <code>AppModule</code> 的 <code>imports</code> 数组中，能让该 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务在应用的任何地方都能使用。</p>\n<p><a id=\"shell\"></a></p>\n<h3 id=\"add-the-router-outlet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nczog9x6m9v64dx1lc8imio3\">添加路由出口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#add-the-router-outlet\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2s9q8hmzya85j3ln5jjbeshv\">根组件 <code>AppComponent</code> 是本应用的壳。它在顶部有一个标题、一个带两个链接的导航条，在底部有一个<em>路由器出口</em>，路由器会在它所指定的位置上渲染各个组件。</p>\n<div class=\"lightbox\">\n<img alt=\"A nav, made of two navigation buttons, with the first button active and its associated view displayed\" src=\"generated/images/guide/router/shell-and-outlet.gif\" width=\"581\" height=\"161\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9folzeo0msltz9jeyg6mc3xmq\">路由出口扮演一个占位符的角色，表示路由组件将会渲染到哪里。</p>\n<p><a id=\"shell-template\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clrttf083t1d9qrrcl2h30154\">该组件所对应的模板是这样的：</p>\n<code-example header=\"src/app/app.component.html\" path=\"router/src/app/app.component.1.html\">\n&lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n</code-example>\n<p><a id=\"wildcard\"></a></p>\n<h3 id=\"define-a-wildcard-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anjv6r9hvx2y2b0xpaz870tdr\">定义通配符路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#define-a-wildcard-route\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ufwapir2gxdstuugef84o8qz\">你以前在应用中创建过两个路由，一个是 <code>/crisis-center</code>，另一个是 <code>/heroes</code>。所有其它 URL 都会导致路由器抛出错误，并让应用崩溃。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96vhxg6skni5oil45ut3jl4yw\">可以添加一个通配符路由来拦截所有无效的 URL，并优雅的处理它们。\n通配符路由的 <code>path</code> 是两个星号（<code>**</code>），它会匹配任何 URL。\n而当路由器匹配不上以前定义的那些路由时，它就会选择这个通配符路由。\n通配符路由可以导航到自定义的“404 Not Found”组件，也可以<a href=\"guide/router-tutorial-toh#redirect\">重定向</a>到一个现有路由。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a81md1g1i6vnbwy2wm61rnlf0\">路由器会使用<a href=\"guide/router-reference#example-config\">先到先得</a>的策略来选择路由。由于通配符路由是最不具体的那个，因此务必确保它是路由配置中的<em>最后一个</em>路由。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5mx6xmxicui3qberd0j23hak\">要测试本特性，请往 <code>HeroListComponent</code> 的模板中添加一个带 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 的按钮，并且把它的链接设置为一个不存在的路由 <code>\"/sidekicks\"</code>。</p>\n<code-example header=\"src/app/hero-list/hero-list.component.html (excerpt)\" path=\"router/src/app/hero-list/hero-list.component.1.html\">\n&lt;h2&gt;HEROES&lt;/h2&gt;\n&lt;p&gt;Get your heroes here&lt;/p&gt;\n\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\"&gt;Go to sidekicks&lt;/button&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qtornf97th1uaa93vkutrw9p\">当用户点击该按钮时，应用就会失败，因为你尚未定义过 <code>\"/sidekicks\"</code> 路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ei6zczjo8pm2o1fdtr1zn01qi\">不要添加 <code>\"/sidekicks\"</code> 路由，而是定义一个“通配符”路由，让它导航到 <code>PageNotFoundComponent</code> 组件。</p>\n<code-example header=\"src/app/app.module.ts (wildcard)\" path=\"router/src/app/app.module.1.ts\" region=\"wildcard\">\n  {path: '**', component: PageNotFoundComponent}  // #enddocregion wildcard\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    RouterModule.forRoot(\n        appRoutes, {enableTracing: true}  // &lt;-- debugging purposes only\n        )\n  ],\n  declarations: [\n    AppComponent, HeroListComponent, CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"359zfjnnbpdk2olrhtgjnvmbz\">创建 <code>PageNotFoundComponent</code>，以便在用户访问无效网址时显示它。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component page-not-found\n\n</code-example>\n<code-example header=\"src/app/page-not-found.component.html (404 component)\" path=\"router/src/app/page-not-found/page-not-found.component.html\">\n&lt;h2&gt;Page not found&lt;/h2&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qbh7negy2sn829p8amr9jrez\">现在，当用户访问 <code>/sidekicks</code> 或任何无效的 URL 时，浏览器就会显示“Page not found”。浏览器的地址栏仍指向无效的 URL。</p>\n<p><a id=\"redirect\"></a></p>\n<h3 id=\"set-up-redirects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oekkb75qtvw0cphmmiohfyfw\">设置跳转<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#set-up-redirects\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ax4mtr1u135nnsaw4zuqzyvr5\">应用启动时，浏览器地址栏中的初始 URL 默认是这样的：</p>\n<code-example format=\"http\" language=\"http\">\n\nlocalhost:4200\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"apzgsphcbif7y87u5sy7krtgt\">它不能匹配上任何硬编码进来的路由，于是就会走到通配符路由中去，并且显示 <code>PageNotFoundComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2exx41wvrcl3fh3e5azzjgxv\">这个应用需要一个有效的默认路由，在这里应该用英雄列表作为默认页。当用户点击\"Heroes\"链接或把 <code>localhost:4200/heroes</code> 粘贴到地址栏时，它应该导航到列表页。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ul3wi5pidpiu3yxc4e2hd2s9\">添加一个 <code>redirect</code> 路由，把最初的相对 URL（<code>''</code>）转换成所需的默认路径（<code>/heroes</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28631o2arj4rhpnauwcjk5xvd\">在通配符路由<em>上方</em>添加一个默认路由。在下方的代码片段中，它出现在通配符路由的紧上方，展示了这个里程碑的完整 <code>appRoutes</code>。</p>\n<code-example header=\"src/app/app-routing.module.ts (appRoutes)\" path=\"router/src/app/app-routing.module.1.ts\" region=\"appRoutes\">\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes',        component: HeroListComponent },\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37iwtpdy31v24aap5k6p1n75q\">浏览器的地址栏会显示 <code>.../heroes</code>，好像你直接在那里导航一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0ys98zfifp4c43dk0yzs6npf\">重定向路由需要一个 <code>pathMatch</code> 属性，来告诉路由器如何用 URL 去匹配路由的路径。在本应用中，路由器应该只有在<em>完整的 URL</em>等于 <code>''</code> 时才选择 <code>HeroListComponent</code> 组件，因此要把 <code>pathMatch</code> 设置为 <code>'full'</code>。</p>\n<p><a id=\"pathmatch\"></a></p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mh6vwa2cwqt4xo0q0a9a2dl6\">聚焦 pathMatch</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ne9mk1bn6w01960noqj6ph69\">从技术角度看，<code>pathMatch = 'full'</code> 会导致 URL 中<em>剩下的</em>、未匹配的部分必须等于 <code>''</code>。在这个例子中，跳转路由在一个顶层路由中，因此<em>剩下的</em>URL 和<em>完整的</em>URL 是一样的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41fa34jw4x0agz8leufer1xx0\"><code>pathMatch</code> 的另一个可能的值是 <code>'prefix'</code>，它会告诉路由器：当<em>剩下的</em>URL 以这个跳转路由中的 <code>prefix</code> 值开头时，就会匹配上这个跳转路由。但这不适用于此示例应用，因为如果 <code>pathMatch</code> 值是 <code>'prefix'</code>，那么每个 URL 都会匹配 <code>''</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5p5x6a9406nu2i6ohem7qjblu\">尝试把它设置为 <code>'prefix'</code>，并点击 <code>Go to sidekicks</code> 按钮。这是因为它是一个无效 URL，本应显示“Page not found”页。但是，你仍然在“英雄列表”页中。在地址栏中输入一个无效的 URL，你又被路由到了 <code>/heroes</code>。<em>每一个</em> URL，无论有效与否，都会匹配上这个路由定义。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3atp6z1dxwinqpet1drt475sz\">默认路由应该只有在整个 URL 等于 <code>''</code> 时才重定向到 <code>HeroListComponent</code>，别忘了把重定向路由设置为 <code>pathMatch = 'full'</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7x8drd83mghfw47ntql9msbo\">要了解更多，参见 Victor Savkin 的帖子<a href=\"https://victorsavkin.com/post/146722301646/angular-router-empty-paths-componentless-routes\">关于重定向</a>。</p>\n</div>\n<h3 id=\"milestone-1-wrap-up\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbfr18qzo2ct4za4m4b2ts6kp\">里程碑 1 小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-1-wrap-up\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec8az601sfmpzc7lkjqweb61j\">当用户单击某个链接时，该示例应用可以在两个视图之间切换。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"den3frnw7sv2ltcy1g13okwys\">里程碑 1 涵盖了以下几点的做法：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19t1j55wn8oqi2qtyn2t2bj4r\">加载路由库</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9icx1ijo8kwl1lqhn0ul3a4ek\">往壳组件的模板中添加一个导航条，导航条中有一些 A 标签、<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令和 <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> 指令</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck9ufhdoiaa4k6ybpi32998m\">往壳组件的模板中添加一个 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> 指令，视图将会被显示在那里</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqkfyzcucpt78r8hrj4q7fuuk\">用 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 配置路由器模块</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0zmttitackuyvumtfkn9njg3\">设置路由器，使其合成 HTML5 模式的浏览器 URL</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayutukzv4at6a6wkbjvqszy4v\">使用通配符路由来处理无效路由</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13rlwh6rrzdxepergnj5tleeg\">当应用在空路径下启动时，导航到默认路由</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gdbszsavp4fwd0jr8sq9zsde\">这个初学者应用的结构是这样的：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-router-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          crisis-list\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            crisis-list.component.css\n          </div>\n          <div class=\"file\">\n            crisis-list.component.html\n          </div>\n          <div class=\"file\">\n            crisis-list.component.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          hero-list\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            hero-list.component.css\n          </div>\n          <div class=\"file\">\n            hero-list.component.html\n          </div>\n          <div class=\"file\">\n            hero-list.component.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          page-not-found\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            page-not-found.component.css\n          </div>\n          <div class=\"file\">\n            page-not-found.component.html\n          </div>\n          <div class=\"file\">\n            page-not-found.component.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          app.component.css\n        </div>\n        <div class=\"file\">\n          app.component.html\n        </div>\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules …\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bcs9kd0upcdt182g8fp4xo1s\">下面是本里程碑中的文件列表。</p>\n<code-tabs>\n    <code-pane header=\"app.component.html\" path=\"router/src/app/app.component.1.html\">\n&lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n</code-pane>\n    <code-pane header=\"app.module.ts\" path=\"router/src/app/app.module.1.ts\">\nimport {<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>} from '@angular/core';\nimport {<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>} from '@angular/forms';\nimport {<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>} from '@angular/platform-browser';\nimport {<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>} from '@angular/router';\n\nimport {AppComponent} from './app.component';\nimport {CrisisListComponent} from './crisis-list/crisis-list.component';\nimport {HeroListComponent} from './hero-list/hero-list.component';\nimport {PageNotFoundComponent} from './page-not-found/page-not-found.component';\n\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {path: 'crisis-center', component: CrisisListComponent},\n  {path: 'heroes', component: HeroListComponent},\n\n  {path: '', redirectTo: '/heroes', pathMatch: 'full'},\n  {path: '**', component: PageNotFoundComponent}  // #enddocregion wildcard\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    RouterModule.forRoot(\n        appRoutes, {enableTracing: true}  // &lt;-- debugging purposes only\n        )\n  ],\n  declarations: [\n    AppComponent, HeroListComponent, CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-list/hero-list.component.html\" path=\"router/src/app/hero-list/hero-list.component.1.html\">\n&lt;h2&gt;HEROES&lt;/h2&gt;\n&lt;p&gt;Get your heroes here&lt;/p&gt;\n\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\"&gt;Go to sidekicks&lt;/button&gt;\n\n\n</code-pane>\n    <code-pane header=\"crisis-list/crisis-list.component.html\" path=\"router/src/app/crisis-list/crisis-list.component.1.html\">\n&lt;h2&gt;CRISIS CENTER&lt;/h2&gt;\n&lt;p&gt;Get your crisis here&lt;/p&gt;\n\n\n</code-pane>\n    <code-pane header=\"page-not-found/page-not-found.component.html\" path=\"router/src/app/page-not-found/page-not-found.component.html\">\n&lt;h2&gt;Page not found&lt;/h2&gt;\n\n</code-pane>\n    <code-pane header=\"index.html\" path=\"router/src/index.html\">\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;!-- Set the base href --&gt;\n    &lt;base href=\"/\"&gt;\n    &lt;title&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/title&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;app-root&gt;&lt;/app-root&gt;\n  &lt;/body&gt;\n\n&lt;/html&gt;\n\n</code-pane>\n</code-tabs>\n<p><a id=\"routing-module\"></a></p>\n<h2 id=\"milestone-2-routing-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8885tyuyq9xd7o5hx5mcl17bz\">里程碑 2：<strong>路由模块</strong><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-2-routing-module\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1s5xw4z9bvqy0ovhkaiq2kv7\">这个里程碑会向你展示如何配置一个名叫<em>路由模块</em>的专用<em>模块</em>，它会保存你应用的路由配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emg8hq9kixqdxjtmxztrh2353\">路由模块有以下几个特点：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f7is6j43c4qt0v3o63va6h1l\">把路由这个关注点从其它应用类关注点中分离出去。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aigxlcpy3fcpska4hkpof8ct7\">测试特性模块时，可以替换或移除路由模块。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aquzgyfm24n06f6kvm4vfqk4l\">为路由服务提供者（如守卫和解析器等）提供一个众所周知的位置。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25a2b8xk2zyb0k8ubdja9kb77\">不要声明组件。</li>\n</ul>\n<p><a id=\"integrate-routing\"></a></p>\n<h3 id=\"integrate-routing-with-your-app\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tuudfyhwsc2y26pbuzg2viwv\">把路由集成到应用中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#integrate-routing-with-your-app\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8lg3ab7narmryz0ecns12574\">路由应用范例中默认不包含路由。要想在使用 <a href=\"cli\">Angular CLI</a> 创建项目时支持路由，请为项目或应用的每个 NgModule 设置 <code>--routing</code> 选项。当你用 CLI 命令 <a href=\"cli/new\"><code>ng new</code></a> 创建新项目或用 <a href=\"cli/generate\"><code>ng generate app</code></a> 命令创建新应用，请指定 <code>--routing</code> 选项。这会告诉 CLI 包含上 <code>@angular/router</code> 包，并创建一个名叫 <code>app-routing.module.ts</code> 的文件。然后你就可以在添加到项目或应用中的任何 NgModule 中使用路由功能了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzw0ka9xtqfn5u20ssbhx53om\">比如，可以用下列命令生成带路由的 NgModule。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module my-module --routing\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zol6kzvwjpgmllc2rn3trqz5\">这将创建一个名叫 <code>my-module-routing.module.ts</code> 的独立文件，来保存这个 NgModule 的路由信息。该文件包含一个空的 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 对象，你可以使用一些指向各个组件和 NgModule 的路由来填充该对象。</p>\n<p><a id=\"routing-refactor\"></a></p>\n<h3 id=\"refactor-the-routing-configuration-into-a-routing-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74kiv27k5xmlicwfy7sdanzi6\">将路由配置重构为路由模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#refactor-the-routing-configuration-into-a-routing-module\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95sr1fua48k6fqo6wfu053yzs\">在 <code>/app</code> 目录下创建一个 <code>AppRouting</code> 模块，以包含路由配置。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module app-routing --module app --flat\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7w56b1lpgwbc79z8lmur4zqai\">导入 <code>CrisisListComponent</code>、<code>HeroListComponent</code> 和 <code>PageNotFoundComponent</code> 组件，就像 <code>app.module.ts</code> 中那样。然后把 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 的导入语句和路由配置以及 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 移入这个路由模块中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16xs09d2ox1xq5muglmze1fxe\">把 Angular 的 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 添加到该模块的 <code>exports</code> 数组中，以便再次导出它。通过再次导出 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>，那些声明在 <code>AppModule</code> 中的组件就可以访问路由指令了，比如 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 和 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4r37w060mylpl71xrmxe2ydhl\">做完这些之后，该文件变成了这样。</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"router/src/app/app-routing.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes',        component: HeroListComponent },\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tjxv7yp6ze8z4alp6l8wzfm\">接下来，修改 <code>app.module.ts</code> 文件，从 <code>imports</code> 数组中移除 <code>RouterModule.forRoot</code>。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"router/src/app/app.module.2.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroListComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atrkxw4texg1wtxc61yirwtnj\">稍后，本指南将向你展示如何创建<a href=\"guide/router-tutorial-toh#heroes-functionality\">多个路由模块</a>，并<a href=\"guide/router-tutorial-toh#routing-module-order\">以正确的顺序</a>导入这些路由模块。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dlvcscnb9uhgu0kiihll7lqg\">应用继续照常运行，你可以把路由模块作为将来每个模块维护路由配置的中心位置。</p>\n<p><a id=\"why-routing-module\"></a></p>\n<h3 id=\"benefits-of-a-routing-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tu12l0891gxe6y277rsoi5q1\">路由模块的优点<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#benefits-of-a-routing-module\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cabfury3ue5ztd833q49g95ef\">路由模块（通常称为 <code>AppRoutingModule</code>）代替了根模板或特性模块中的路由模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98bs63n2qr8tpth5fqehf42c8\">这种路由模块在你的应用不断增长，以及配置中包括了专门的守卫和解析器函数时会非常有用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ecdh5q49aa9zidw7tgycvuuni\">在配置很简单时，一些开发者会跳过路由模块，并将路由配置直接混合在关联模块中（比如 <code>AppModule</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ie4qxhp72spdoovdwuvvl15w\">大多数应用都应该采用路由模块，以保持一致性。它在配置复杂时，能确保代码干净。它让测试特性模块更加容易。它的存在让人一眼就能看出这个模块是带路由的。开发者可以很自然的从路由模块中查找和扩展路由配置。</p>\n<p><a id=\"heroes-feature\"></a></p>\n<h2 id=\"milestone-3-heroes-feature\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a39rma2yzgk56xnfyr1diwyct\">里程碑 3: 英雄特征区<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-3-heroes-feature\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sb7pnm1svpd8konfu1cuuaie\">本里程碑涵盖了以下内容：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck0dba3324fcvtw5pg8q7jvzh\">用模块把应用和路由组织为一些特性区。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2h0u1bbk63djupjr2lwcy9s4e\">命令式的从一个组件导航到另一个</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ib1w0c68xpeiz12cv3n2a9da\">通过路由传递必要信息和可选信息</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djsgk1q2gjrncznv1ywtwh71j\">这个示例应用在<a href=\"tutorial/tour-of-heroes/toh-pt4\" title=\"英雄指南：服务\">“英雄指南”教程</a>的“服务”部分重新创建了英雄特性区，并复用了<live-example name=\"toh-pt4\" title=\"Tour of Heroes: Services example code\"></live-example>中的大部分代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ch0va14z4zrxpduk89hmwa5w4\">典型的应用具有多个<em>特性区</em>，每个特性区都专注于特定的业务用途并拥有自己的文件夹。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blyzyb7xjf84xvx4nszqn5rj8\">该部分将向你展示如何将应用重构为不同的特性模块、将它们导入到主模块中，并在它们之间导航。</p>\n<p><a id=\"heroes-functionality\"></a></p>\n<h3 id=\"add-heroes-functionality\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65cr3j3zoe3ee6pd1160sbpob\">添加英雄管理功能<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#add-heroes-functionality\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d6ldjbft6ijgf07v664auyuqg\">遵循下列步骤：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6t7wicnsdurvjjyf4me0pdxp9\">为了管理这些英雄，在 <code>heroes</code> 目录下创建一个带路由的 <code>HeroesModule</code>，并把它注册到根模块 <code>AppModule</code> 中。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module heroes/heroes --module app --flat --routing\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6a841p1cgg5ti3x4vpyi38hpu\">把 <code>app</code> 下占位用的 <code>hero-list</code> 目录移到 <code>heroes</code> 目录中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asq8t2uhgmrualfpwmwef4ac5\">从 <live-example name=\"toh-pt4\" title=\"Tour of Heroes: Services example code\">教程的 \"服务\" 部分</live-example>把 <code>heroes/heroes.component.html</code> 的内容复制到 <code>hero-list.component.html</code> 模板中。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4t8np6f9fk83ktktn7fvopf91\">给 <code>&lt;h2&gt;</code> 加文字，改成 <code>&lt;h2&gt;HEROES&lt;/h2&gt;</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"825dpr4ivqft9xztit5stmbcl\">删除模板底部的 <code>&lt;app-hero-detail&gt;</code> 组件。</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qv7fc5308jwoo5q7gf7cgw5o\">把现场演练中 <code>heroes/heroes.component.css</code> 文件的内容复制到 <code>hero-list.component.css</code> 文件中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n55fxkjh9zpff16fyjuvml97\">把现场演练中 <code>heroes/heroes.component.ts</code> 文件的内容复制到 <code>hero-list.component.ts</code> 文件中。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3kvaugxs5vy1dzwm4sbw01dkz\">把组件类名改为 <code>HeroListComponent</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmu6s7xi0sply31hfpxytlic0\">把 <code>selector</code> 改为 <code>app-hero-list</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d32y9nswa0sbiteh08k17b1jc\">将\n<code>templateUrl</code>更改为\n<code>./hero-list.component.html</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3c9y8xzmb6xj6h29v0a92zis3\">将\n<code>styleUrls</code>更改为\n<code>./hero-list.component.css</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cl572q8sdnxrzgco199eh9qss\">对于路由组件来说，这些选择器不是必须的，因为这些组件是在渲染页面时动态插入的，不过选择器对于在 HTML 元素树中标记和选中它们是很有用的。</p>\n</div>\n</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8d4efzdoh7xnsiwntl374k0ln\">把 <code>hero-detail</code> 目录中的 <code>hero.ts</code>、<code>hero.service.ts</code> 和 <code>mock-heroes.ts</code> 文件复制到 <code>heroes</code> 子目录下。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bl9577jeg5npchp2rf4nfo3eq\">把 <code>message.service.ts</code> 文件复制到 <code>src/app</code> 目录下。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ez2dq4z3t4vsf3alcpyjao3l\">在 <code>hero.service.ts</code> 文件中修改导入 <code>message.service</code> 的相对路径。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"789mukdg57w1tz2llpv54j5zj\">接下来，更新 <code>HeroesModule</code> 的元数据。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9e943iy4ppnhdtxp73vscdchw\">导入 <code>HeroDetailComponent</code> 和 <code>HeroListComponent</code>，并添加到 <code>HeroesModule</code> 模块的 <code>declarations</code> 数组中。</li>\n</ul>\n<code-example header=\"src/app/heroes/heroes.module.ts\" path=\"router/src/app/heroes/heroes.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nimport { HeroesRoutingModule } from './heroes-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesRoutingModule\n  ],\n  declarations: [\n    HeroListComponent,\n    HeroDetailComponent\n  ]\n})\nexport class HeroesModule {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d60dqc2tr0f5641bb7a4wlb37\">英雄管理部分的文件结构如下：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src/app/heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      hero-detail\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          hero-detail.component.css\n        </div>\n        <div class=\"file\">\n          hero-detail.component.html\n        </div>\n        <div class=\"file\">\n          hero-detail.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      hero-list\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          hero-list.component.css\n        </div>\n        <div class=\"file\">\n          hero-list.component.html\n        </div>\n        <div class=\"file\">\n          hero-list.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      hero.service.ts\n    </div>\n    <div class=\"file\">\n      hero.ts\n    </div>\n    <div class=\"file\">\n      heroes-routing.module.ts\n    </div>\n    <div class=\"file\">\n      heroes.module.ts\n    </div>\n    <div class=\"file\">\n      mock-heroes.ts\n    </div>\n    </div>\n  </div>\n</div>\n<p><a id=\"hero-routing-requirements\"></a></p>\n<h4 id=\"hero-feature-routing-requirements\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2t74wf1l94de2asq03zpjagl\">英雄特性区的路由需求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#hero-feature-routing-requirements\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmsh6n9rfu6sjivjuq8w0veg1\">英雄特性区中有两个相互协作的组件：英雄列表和英雄详情。当你导航到列表视图时，它会获取英雄列表并显示出来。当你点击一个英雄时，详细视图就会显示那个特定的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2iq5qkihw5mhvxhwav9u4u7b2\">通过把所选英雄的 id 编码进路由的 URL 中，就能告诉详情视图该显示哪个英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bz5iu93uiqe2q75upb6rdnh6\">从新位置 <code>src/app/heroes/</code> 目录中导入英雄相关的组件，并定义两个“英雄管理”路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ore76q7llnbomrg20ku5yecq\">现在，你有了 <code>Heroes</code> 模块的路由，还得在 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 中把它们注册给<em>路由器</em>，和 <code>AppRoutingModule</code> 中的做法几乎完全一样，只有一项重要的差别。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2c8ai9tcdrfkkc48g5jymqm1c\">在 <code>AppRoutingModule</code> 中，你使用了静态的 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法来注册路由和全应用级服务提供者。在特性模块中你要改用 <code>forChild()</code> 静态方法。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4ryx2sq2hi2eattiqkxx2mtg\">只在根模块 <code>AppRoutingModule</code> 中调用 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code>（如果在 <code>AppModule</code> 中注册应用的顶层路由，那就在 <code>AppModule</code> 中调用）。在其它模块中，你就必须调用 <code>RouterModule.forChild</code> 方法来注册附属路由。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71iztvlzrzwvp9lts5uc7x3sb\">修改后的 <code>HeroesRoutingModule</code> 是这样的：</p>\n<code-example header=\"src/app/heroes/heroes-routing.module.ts\" path=\"router/src/app/heroes/heroes-routing.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes',  component: HeroListComponent },\n  { path: 'hero/:id', component: HeroDetailComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroesRoutingModule { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9oqbb1pzqu5s3c6p9swh6r31m\">考虑为每个特性模块提供自己的路由配置文件。虽然特性路由目前还很少，但即使在小型应用中，路由也会变得越来越复杂。</p>\n</div>\n<p><a id=\"remove-duplicate-hero-routes\"></a></p>\n<h4 id=\"remove-duplicate-hero-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3t5huram6ad8fub8go6prdr0o\">移除重复的“英雄管理”路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#remove-duplicate-hero-routes\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"es3rwn9jueideq93ncs7ary3o\">英雄类的路由目前定义在两个地方：<code>HeroesRoutingModule</code> 中（并最终给 <code>HeroesModule</code>）和 <code>AppRoutingModule</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhbqvoszrs9wiy31e0kpkgblw\">由特性模块提供的路由会被路由器再组合上它们所导入的模块的路由。这让你可以继续定义特性路由模块中的路由，而不用修改主路由配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8k8d4l8rmp8kcc9fop3fnqsgr\">移除 <code>HeroListComponent</code> 的导入和来自 <code>app-routing.module.ts</code> 中的 <code>/heroes</code> 路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jy5beliorrrmmkdy4oy2qz1\">保留默认路由和通配符路由，因为这些路由仍然要在应用的顶层使用。</p>\n<code-example header=\"src/app/app-routing.module.ts (v2)\" path=\"router/src/app/app-routing.module.2.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\n// import { HeroListComponent } from './hero-list/hero-list.component';  // &lt;-- delete this line\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  // { path: 'heroes',     component: HeroListComponent }, // &lt;-- delete this line\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<p><a id=\"merge-hero-routes\"></a></p>\n<h4 id=\"remove-heroes-declarations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wxzmga0fjlnfkvr98sxoza6y\">移除英雄列表的声明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#remove-heroes-declarations\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etz4haq0mcxdbpbibd9u5po0i\">因为 <code>HeroesModule</code> 现在提供了 <code>HeroListComponent</code>，所以把它从 <code>AppModule</code> 的 <code>declarations</code> 数组中移除。现在你已经有了一个单独的 <code>HeroesModule</code>，你可以用更多的组件和不同的路由来演进英雄特性区。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6126g1ur9111feposs0lmfgva\">经过这些步骤，<code>AppModule</code> 变成了这样：</p>\n<code-example header=\"src/app/app.module.ts\" path=\"router/src/app/app.module.3.ts\" region=\"remove-heroes\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule } from './heroes/heroes.module';\n\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<p><a id=\"routing-module-order\"></a></p>\n<h3 id=\"module-import-order\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tvxgd3eu7vqesx0d7henx3pl\">模块导入顺序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#module-import-order\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a88b5t1qkeocbmd3m4wad39ud\">请注意该模块的 <code>imports</code> 数组，<code>AppRoutingModule</code> 是最后一个，并且位于 <code>HeroesModule</code> 之后。</p>\n<code-example header=\"src/app/app.module.ts (module-imports)\" path=\"router/src/app/app.module.3.ts\" region=\"module-imports\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n  HeroesModule,\n  AppRoutingModule\n],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ad6i0x9yy0n4idgj790pcfhj\">路由配置的顺序很重要，因为路由器会接受第一个匹配上导航所要求的路径的那个路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adbfv8x71zleola68aheirck2\">当所有路由都在同一个 <code>AppRoutingModule</code> 时，你要把默认路由和<a href=\"guide/router-tutorial-toh#wildcard\">通配符路由</a>放在最后（这里是在 <code>/heroes</code> 路由后面），\n这样路由器才有机会匹配到 <code>/heroes</code> 路由，否则它就会先遇到并匹配上该通配符路由，并导航到“页面未找到”路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94748z7c0vb736nu08zg7ias2\">每个路由模块都会根据导入的顺序把自己的路由配置追加进去。如果你先列出了 <code>AppRoutingModule</code>，那么通配符路由就会被注册在“英雄管理”路由<em>之前</em>。通配符路由（它匹配<em>任意</em>URL）将会拦截住每一个到“英雄管理”路由的导航，因此事实上屏蔽了所有“英雄管理”路由。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfnw5jwhx08c3a7fpagwrizpc\">反转路由模块的导入顺序，就会看到当点击英雄相关的链接时被导向了“页面未找到”路由。\n要学习如何在运行时查看路由器配置，参见<a href=\"guide/router-tutorial-toh#inspect-config\" title=\"Inspect the router config\">稍后的内容</a>。</p>\n</div>\n<h3 id=\"route-parameters\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7u6anazwt9tu0ltozalcoxvm\">路由参数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#route-parameters\"><i class=\"material-icons\">link</i></a></h3>\n<p><a id=\"route-def-with-parameter\"></a></p>\n<h4 id=\"route-definition-with-a-parameter\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61q6tgw8zdj96s82xr6aq8hox\">带参数的路由定义<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#route-definition-with-a-parameter\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23ipgdvaf37q6e8ib7jpbo386\">回到 <code>HeroesRoutingModule</code> 并再次检查这些路由定义。<code>HeroDetailComponent</code> 路由的路径中带有 <code>:id</code> 标记。</p>\n<code-example header=\"src/app/heroes/heroes-routing.module.ts (excerpt)\" path=\"router/src/app/heroes/heroes-routing.module.1.ts\" region=\"hero-detail-route\">\n{ path: 'hero/:id', component: HeroDetailComponent }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzg6aqh0qcq3gbt17l3mz7p3j\"><code>:id</code> 标记会为路由参数在路径中创建一个“空位”。在这里，这种配置会让路由器把英雄的 <code>id</code> 插入到那个“空位”中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewjm74aim64idtuwtukk1lzuz\">如果要告诉路由器导航到详情组件，并让它显示“Magneta”，你会期望这个英雄的 <code>id</code> 像这样显示在浏览器的 URL 中：</p>\n<code-example format=\"nocode\">\n\nlocalhost:4200/hero/15\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"euypc7q2ndvl5raq3jz8yxlz3\">如果用户把此 URL 输入到浏览器的地址栏中，路由器就会识别出这种模式，同样进入“Magneta”的详情视图。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4po4pdurpzthdcpq3piwzme37\">路由参数：必须的还是可选的？</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3hlsvkb4cg1do7gy38l54lhq\">在这个场景下，把路由参数的标记 <code>:id</code> 嵌入到路由定义的 <code>path</code> 中是一个好主意，因为对于 <code>HeroDetailComponent</code> 来说 <code>id</code> 是<em>必须的</em>，而且路径中的值 <code>15</code> 已经足够把到“Magneta”的路由和到其它英雄的路由明确区分开。</p>\n</div>\n<p><a id=\"route-parameters\"></a></p>\n<h4 id=\"setting-the-route-parameters-in-the-list-view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qcqkhuwziyp2sryye91xbuej\">在列表视图中设置路由参数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#setting-the-route-parameters-in-the-list-view\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6d8dik3rl8mz7j1fefhe1l2do\">然后导航到 <code>HeroDetailComponent</code> 组件。在那里，你期望看到所选英雄的详情，这需要两部分信息：导航目标和该英雄的 <code>id</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oa7qu0p2xiwn03fcuy40eml4\">因此，这个<em>链接参数数组</em>中有两个条目：路由的<em>路径</em>和一个用来指定所选英雄 <code>id</code> 的<em>路由参数</em>。</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.html (link-parameters-array)\" path=\"router/src/app/heroes/hero-list/hero-list.component.1.html\" region=\"link-parameters-array\">\n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8wquftw7uy8vq7se5p0n4ohx\">路由器从该数组中组合出了目标 URL：<code>localhost:4200/hero/15</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2awjak7jnm1vci57fehwng26v\">路由器从 URL 中解析出路由参数（<code>id:15</code>），并通过 <strong>ActivatedRoute</strong> 服务来把它提供给 <code>HeroDetailComponent</code> 组件。</p>\n<p><a id=\"activated-route-in-action\"></a></p>\n<h3 id=\"activated-route-in-action\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9us3ogf4l45eak1dxu4t2ezlp\"><code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 实战<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#activated-route-in-action\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63hclf5phge5biraotalmcgkp\">从路由器（<code>router</code>）包中导入 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>、<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 和 <code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code> 令牌。</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (activated route)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.1.ts\" region=\"imports\">\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bnqdkhc8x21gaocyckjr1w42\">这里导入 <code>switchMap</code> 操作符是因为你稍后将会处理路由参数的可观察对象 <code>Observable</code>。</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (switchMap operator import)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\" region=\"rxjs-operator-import\">\nimport { switchMap } from 'rxjs/operators';\n\n</code-example>\n<p><a id=\"hero-detail-ctor\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9f3yhrt5ca64vkktqbs9rpg97\">把这些服务作为私有变量添加到构造函数中，以便 Angular 注入它们（让它们对组件可见）。</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (constructor)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\" region=\"ctor\">\nconstructor(\n  private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  private service: HeroService\n) {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evhgu3nwtgxh88i0onu8k7uw6\">在 <code>ngOnInit()</code> 方法中，使用 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务来检索路由的参数，从参数中提取出英雄的 <code>id</code>，并检索要显示的英雄。</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (ngOnInit)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\" region=\"ngOnInit\">\nngOnInit() {\n  this.hero$ = this.route.paramMap.pipe(\n    switchMap((params: <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>) =&gt;\n      this.service.getHero(params.get('id')!))\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cglrdwk5nr84tk2qp9sb4wy4h\">当这个 map 发生变化时，<code>paramMap</code> 会从更改后的参数中获取 <code>id</code> 参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wgvsozltq07lv8jkyppjhjma\">然后，让 <code>HeroService</code> 去获取具有该 <code>id</code> 的英雄，并返回 <code>HeroService</code> 请求的结果。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nhm5vv7go4pdwyl6filukqgl\"><code>switchMap</code> 操作符做了两件事。它把 <code>HeroService</code> 返回的 <code>Observable&lt;Hero&gt;</code> 拍平，并取消以前的未完成请求。当 <code>HeroService</code> 仍在检索旧的 <code>id</code> 时，如果用户使用新的 <code>id</code> 重新导航到这个路由，<code>switchMap</code> 会放弃那个旧请求，并返回新 <code>id</code> 的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bh0nbp6dyyfa5e3k3opo5e3lz\"><code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 处理这个可观察的订阅，而且该组件的 <code>hero</code> 属性也会用检索到的英雄（重新）进行设置。</p>\n<h4 id=\"parammap-api\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8twafd18vvu5upu2ppgix6id2\"><code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code> API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#parammap-api\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4r30s4pv8ucgnu73te6r36anp\"><code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code> API 的灵感来自 URLSearchParams<a href=\"https://developer.mozilla.org/docs/Web/API/URLSearchParams\">接口</a>。它提供了处理路由参数 （ <code>paramMap</code> ） 和查询参数 （ <code>queryParamMap</code> ） 的参数访问的方法。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wmge39hyfrylpl8ncawfdo9p\">成员</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>has(name)</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"180xquolm8te1bbnnktk7dwov\">如果参数名称在参数映射表中，则返回\n<code>true</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>get(name)</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmcb4alvu1867hydqsmet8wqn\">如果存在参数名称值（一个\n<code>string</code>），则返回该值；如果参数名称不在映射表中，则返回\n<code>null</code>。如果参数值实际上是值数组，则返回\n<em>第一个</em>元素。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>getAll(name)</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4er438qa5hsb9u1wlijmyc1y0\">如果找到参数名称值，则返回一个\n<code>string array</code>；如果参数名称值不在映射表中，则返回一个空\n<code>array</code>。当单个参数可能有多个值时，请使用\n<code>getAll</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>keys</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76brja656cka9hq4f9c5zzj3i\">返回映射表中所有参数名称的\n<code>string array</code>。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"reuse\"></a></p>\n<h4 id=\"observable-parammap-and-component-reuse\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"804snj5l5ygqej81mr9w3j373\"><code>paramMap</code> 可观察对象与路由复用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#observable-parammap-and-component-reuse\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"v2iu8r2mypcsue4ivxglrote\">在这个例子中，你接收了路由参数的 <code>Observable</code> 对象。这种写法暗示着这些路由参数在该组件的生存期内可能会变化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9er5zs1un49ptnallmvc4ry80\">默认情况下，如果它没有访问过其它组件就导航到了同一个组件实例，那么路由器倾向于复用组件实例。如果复用，这些参数可以变化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caxa4rsagc9dndnxz3qzpo2jj\">假设父组件的导航栏有“前进”和“后退”按钮，用来轮流显示英雄列表中中英雄的详情。每次点击都会强制导航到带前一个或后一个 <code>id</code> 的 <code>HeroDetailComponent</code> 组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7extcs6ho6c5fq12miz9bhk3e\">你肯定不希望路由器先从 DOM 中移除当前的 <code>HeroDetailComponent</code> 实例，只是为了用下一个 <code>id</code> 重新创建它，因为它将重新渲染视图。为了更好的用户体验，路由器会复用同一个组件实例，而只是更新参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8upx6d5rnik309k3628eyywjv\">由于 <code>ngOnInit()</code> 在每个组件实例化时只会被调用一次，所以你可以使用 <code>paramMap</code> 可观察对象来检测路由参数<em>在同一个实例中</em>何时发生了变化。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ycgjev43on7vx523cb0ekmvc\">当在组件中订阅一个可观察对象时，你通常总是要在组件销毁时取消这个订阅。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bchb8eantwc63969k3ti59w\">不过，<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 中的可观察对象是一个例外，因为 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 及其可观察对象与 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 本身是隔离的。<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 会在不再需要时销毁这个路由组件，这意味着此组件的所有成员也都会销毁，包括注入进来的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 以及那些对它的所有 <code>Observable</code> 属性的订阅。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"encixihr4yh9qtg9b54v5nddw\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 不会 <code>complete</code> <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 的任何 <code>Observable</code>，所以其 <code>finalize</code> 或 <code>complete</code> 代码块都不会运行。如果你要在 <code>finalize</code> 中做些什么处理，你仍然要在 <code>ngOnDestroy</code> 中取消订阅。如果你的 <code>Observable</code> 型管道有某些代码不希望在当前组件被销毁后运行，仍然要主动取消订阅。</p>\n</div>\n<p><a id=\"snapshot\"></a></p>\n<h4 id=\"snapshot-the-no-observable-alternative\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30xce9slnku9ypapzxv7824x5\"><code>snapshot</code>：当不需要 Observable 时的替代品<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#snapshot-the-no-observable-alternative\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6t0ghh5kcn4eb2q5j5tal2mv4\">本应用不需要复用 <code>HeroDetailComponent</code>。用户总是会先返回英雄列表，再选择另一位英雄。所以，不存在从一个英雄详情导航到另一个而不用经过英雄列表的情况。这意味着路由器每次都会创建一个全新的 <code>HeroDetailComponent</code> 实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a44405ccxukoawx1sbex3q4x9\">假如你很确定这个 <code>HeroDetailComponent</code> 实例永远不会被复用，你可以使用 <code>snapshot</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cctvi65eni24761wqz8g534hu\"><code>route.snapshot</code> 提供了路由参数的初始值。你可以通过它来直接访问参数，而不用订阅或者添加 Observable 的操作符，代码如下：</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (ngOnInit snapshot)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.2.ts\" region=\"snapshot\">\nngOnInit() {\n  const id = this.route.snapshot.paramMap.get('id')!;\n\n  this.hero$ = this.service.getHero(id);\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehavvjenhaucvdeo51dvmq1qj\">用这种技术，<code>snapshot</code> 只会得到这些参数的初始值。如果路由器可能复用该组件，那么就该用 <code>paramMap</code> 可观察对象的方式。本教程的示例应用中就用了 <code>paramMap</code> 可观察对象。</p>\n</div>\n<p><a id=\"nav-to-list\"></a></p>\n<h3 id=\"navigating-back-to-the-list-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kvn9dk9rtm321v0w3y03nl9l\">导航回列表组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#navigating-back-to-the-list-component\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2yy2cbkcq42snj8kn6mwjqr1i\"><code>HeroDetailComponent</code> 的 “Back” 按钮使用了 <code>gotoHeroes()</code> 方法，该方法会强制导航回 <code>HeroListComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1iwfxkcku0lknc6iu5pknbn1n\">路由的 <code>navigate()</code> 方法同样接受一个单条目的<em>链接参数数组</em>，你也可以把它绑定到 <code>[<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]</code> 指令上。它保存着到 <code>HeroListComponent</code> 组件的路径：</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (excerpt)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.1.ts\" region=\"gotoHeroes\">\ngotoHeroes() {\n  this.router.navigate(['/heroes']);\n}\n\n</code-example>\n<p><a id=\"optional-route-parameters\"></a></p>\n<h4 id=\"route-parameters-required-or-optional\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caopb9xi49r5tdwqj508hzr5d\">路由参数：必须还是可选？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#route-parameters-required-or-optional\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nfu1t6emjfp9rashg7p3vb4s\">如果想导航到 <code>HeroDetailComponent</code> 以对 id 为 <code>15</code> 的英雄进行查看并编辑，就要在路由的 URL 中使用<a href=\"guide/router-tutorial-toh#route-parameters\">路由参数</a>来指定必要参数值。</p>\n<code-example format=\"http\" language=\"http\">\n\nlocalhost:4200/hero/15\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p60hh9zvby6j2u0n4h8l9g21\">你也能在路由请求中添加<em>可选</em>信息。比如，当从 <code>hero-detail.component.ts</code> 返回到列表时，如果能自动选中刚刚查看过的英雄就好了。</p>\n<div class=\"lightbox\">\n  <img alt=\"Selected hero\" src=\"generated/images/guide/router/selected-hero.png\" width=\"600\" height=\"173\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dvf0fmepnckfa2zv71nongfmr\">当从 <code>HeroDetailComponent</code> 返回时，你可以会通过把正在查看的英雄的 <code>id</code> 作为可选参数包含在 URL 中来实现这个特性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyla6ms79lkekiizzebhp92mr\">可选信息还可以包含其它形式，比如：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewvk5dodspaupavrir0929soe\">结构松散的搜索条件。比如 <code>name='wind*'</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44dbnh2iqbqm6posdvve5mev3\">多个值。比如 <code>after='12/31/2015' &amp; before='1/1/2017'</code> - 没有特定的顺序 - <code>before='1/1/2017' &amp; after='12/31/2015'</code> - 具有各种格式 - <code>during='currentYear'</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t4wlljp6w36ahtau13uamn2d\">由于这些参数不适合用作 URL 路径，因此可以使用可选参数在导航过程中传递任意复杂的信息。可选参数不参与模式匹配，因此在表达上提供了巨大的灵活性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acugrm7rln9rmlmlql9et5gdm\">和必要参数一样，路由器也支持通过可选参数导航。在你定义完必要参数之后，再通过一个<em>独立的对象</em>来定义可选参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c44x0gh8jj7lzfhvezc9h7gaz\">通常，对于必传的值（比如用于区分两个路由路径的）使用<em>必备参数</em>；当这个值是可选的、复杂的或多值的时，使用可选参数。</p>\n<p><a id=\"optionally-selecting\"></a></p>\n<h4 id=\"heroes-list-optionally-selecting-a-hero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yk2pffiydq19noewmq4jw3ly\">英雄列表：选定一个英雄（也可不选）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#heroes-list-optionally-selecting-a-hero\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nh46z935wo4gjvnqj8oo240j\">当导航到 <code>HeroDetailComponent</code> 时，你可以在<em>路由参数</em>中指定一个所要编辑的英雄 <code>id</code>，只要把它作为<a href=\"guide/router-tutorial-toh#link-parameters-array\">链接参数数组</a>中的第二个条目就可以了。</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.html (link-parameters-array)\" path=\"router/src/app/heroes/hero-list/hero-list.component.1.html\" region=\"link-parameters-array\">\n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wyxju2yoqbfhcqtnzrrmw7t5\">路由器在导航 URL 中内嵌了 <code>id</code> 的值，这是因为你把它用一个 <code>:id</code> 占位符当做路由参数定义在了路由的 <code>path</code> 中：</p>\n<code-example header=\"src/app/heroes/heroes-routing.module.ts (hero-detail-route)\" path=\"router/src/app/heroes/heroes-routing.module.1.ts\" region=\"hero-detail-route\">\n{ path: 'hero/:id', component: HeroDetailComponent }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hgkhpevnlgfbd7jt4rizw3li\">当用户点击后退按钮时，<code>HeroDetailComponent</code> 构造了另一个<em>链接参数数组</em>，可以用它导航回 <code>HeroListComponent</code>。</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (gotoHeroes)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.1.ts\" region=\"gotoHeroes\">\ngotoHeroes() {\n  this.router.navigate(['/heroes']);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o8iije7htw5exdh0cdmp3lno\">该数组缺少一个路由参数，这是因为以前你不需要往 <code>HeroListComponent</code> 发送信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kvu4hfsvmshagqb96i4hz4so\">现在，使用导航请求发送当前英雄的 <code>id</code>，以便 <code>HeroListComponent</code> 在其列表中突出显示该英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csdv69gf8a85uflnct6js31hs\">传送一个包含可选 <code>id</code> 参数的对象。为了演示，这里还在对象中定义了一个没用的额外参数（<code>foo</code>），<code>HeroListComponent</code> 应该忽略它。下面是修改过的导航语句：</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (go to heroes)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\" region=\"gotoHeroes\">\ngotoHeroes(hero: Hero) {\n  const heroId = hero ? hero.id : null;\n  // Pass along the hero id if available\n  // so that the HeroList component can select that hero.\n  // Include a junk 'foo' property for fun.\n  this.router.navigate(['/heroes', { id: heroId, foo: 'foo' }]);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wi5im8fascb04vpa8akqiogm\">该应用仍然能工作。点击“back”按钮返回英雄列表视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16gs0l64asqhk2fzl6g4xzayv\">注意浏览器的地址栏。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3mi4bw3bdne93s5eumasiymv8\">它应该是这样的，不过也取决于你在哪里运行它：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nlocalhost:4200/heroes;id=15;foo=foo\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arnq7kthr0pdu24a2mi7kpkg6\"><code>id</code> 的值像这样出现在 URL 中（<code>;id=15;foo=foo</code>），但不在 URL 的路径部分。“Heroes”路由的路径部分并没有定义 <code>:id</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beg7opsvcqahq3ftlfljxmpc4\">可选的路由参数没有使用“？”和“&amp;”符号分隔，因为它们将用在 URL 查询字符串中。它们是用“;”分隔的。这是<em>矩阵 URL</em>标记法。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6h63g6htx2573s7lx1x17x277\">Matrix URL 写法首次提出是在<a href=\"https://www.w3.org/DesignIssues/MatrixURIs.html\">1996 提案</a>中，提出者是 Web 的奠基人：Tim Berners-Lee。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8zcdxyd86xvgpqhpaj8sz1tu\">虽然 Matrix 写法未曾进入过 HTML 标准，但它是合法的。而且在浏览器的路由系统中，它作为从父路由和子路由中单独隔离出参数的方式而广受欢迎。Angular 的路由器正是这样一个路由系统，并支持跨浏览器的 Matrix 写法。</p>\n</div>\n<p><a id=\"route-parameters-activated-route\"></a></p>\n<h3 id=\"route-parameters-in-the-activatedroute-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"196jfi3gv9aq46xcdhnqiq2c6\"><code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务中的路由参数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#route-parameters-in-the-activatedroute-service\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c698gkc3yutfq2llj1842jwfx\">开发到现在，英雄列表还没有变化。没有突出显示的英雄行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qw5au6j3r672aj4323kgyfdo\"><code>HeroListComponent</code> 需要添加使用这些参数的代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9cg8ov5hcplh3lqebilmka9vk\">以前，当从 <code>HeroListComponent</code> 导航到 <code>HeroDetailComponent</code> 时，你通过 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务订阅了路由参数这个 <code>Observable</code>，并让它能用在 <code>HeroDetailComponent</code> 中。你把该服务注入到了 <code>HeroDetailComponent</code> 的构造函数中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1svlozsvg9jo54i9ellwy5sf6\">这次，你要进行反向导航，从 <code>HeroDetailComponent</code> 到 <code>HeroListComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nxnmb326iekouofcn39jl9j9\">首先，扩展该路由的导入语句，以包含进 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务的类；</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.ts (import)\" path=\"router/src/app/heroes/hero-list/hero-list.component.ts\" region=\"import-router\">\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dvv80da5bkrkds3gs4xphzk5w\">导入 <code>switchMap</code> 操作符，在路由参数的 <code>Observable</code> 对象上执行操作。</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.ts (rxjs imports)\" path=\"router/src/app/heroes/hero-list/hero-list.component.ts\" region=\"rxjs-imports\">\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qk55inc5nfinmdjnqb8bsug1\">在 <code>HeroListComponent</code> 构造函数中注入 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.ts (constructor and ngOnInit)\" path=\"router/src/app/heroes/hero-list/hero-list.component.ts\" region=\"ctor\">\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$!: Observable&lt;Hero[]&gt;;\n  selectedId = 0;\n\n  constructor(\n    private service: HeroService,\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>\n  ) {}\n\n  ngOnInit() {\n    this.heroes$ = this.route.paramMap.pipe(\n      switchMap(params =&gt; {\n        this.selectedId = parseInt(params.get('id')!, 10);\n        return this.service.getHeroes();\n      })\n    );\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9g0gluc79t5xu1kvhz9kkc5z9\"><code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> 属性是一个路由参数的 <code>Observable</code>。当用户导航到这个组件时，paramMap 会发射一个新值，其中包含 <code>id</code>。在 <code>ngOnInit()</code> 中，你订阅了这些值，设置到 <code>selectedId</code>，并获取英雄数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kstdi5krepgrxgivvrzs316s\">用 <a href=\"guide/class-binding\">CSS 类绑定</a>更新模板。\n如果该方法返回 <code>true</code>，此绑定就会添加 CSS 类 <code>selected</code>，否则就移除它。\n在 <code>&lt;li&gt;</code> 标记中找到它，就像这样：</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.html\" path=\"router/src/app/heroes/hero-list/hero-list.component.html\">\n&lt;h2&gt;Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>\" [class.selected]=\"hero.id === selectedId\"&gt;\n    &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\"&gt;\n      &lt;span class=\"badge\"&gt;{{ hero.id }}&lt;/span&gt;{{ hero.name }}\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\"&gt;Go to sidekicks&lt;/button&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61jkcwnq57f9c2h7d1zj5q2ax\">当选中列表条目时，要添加一些样式。</p>\n<code-example header=\"src/app/heroes/hero-list/hero-list.component.css\" path=\"router/src/app/heroes/hero-list/hero-list.component.css\" region=\"selected\">\n.heroes .selected a {\n  background-color: #d6e6f7;\n}\n\n.heroes .selected a:hover {\n  background-color: #bdd7f5;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qyu5jag0j4yuo1ecemuqvece\">当用户从英雄列表导航到英雄“Magneta”并返回时，“Magneta”看起来是选中的：</p>\n<div class=\"lightbox\">\n<img alt=\"Selected hero in list has different background color\" src=\"generated/images/guide/router/selected-hero.png\" width=\"600\" height=\"173\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adpfh4124pg0glq9r95xo2tfr\">这个可选的 <code>foo</code> 路由参数人畜无害，路由器会继续忽略它。</p>\n<p><a id=\"route-animation\"></a></p>\n<h3 id=\"adding-routable-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xg2blqz8ntbs061t7q4622l9\">添加路由动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#adding-routable-animations\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75aohkyzykkabo0t5nztzyzty\">在这一节，你将为<em>英雄详情</em>组件添加一些<a href=\"guide/animations\">动画</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"pjq5ft2v1eetod69392pkcs7\">首先导入 <code><a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a></code>，并添加到 <code>imports</code> 数组中：</p>\n<code-example header=\"src/app/app.module.ts (animations-module)\" path=\"router/src/app/app.module.ts\" region=\"animations-module\">\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n  ],\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2avfm5zopsiz4itf3ikxe7mu9\">接下来，为指向 <code>HeroListComponent</code> 和 <code>HeroDetailComponent</code> 的路由定义添加一个 <code>data</code> 对象。\n过渡是基于 <a href=\"api/animations/state\"><code>state</code></a> 的，你将使用来自路由的 <code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a></code> 数据为过渡提供一个有名字的动画 <code>state</code>。</p>\n<code-example header=\"src/app/heroes/heroes-routing.module.ts (animation data)\" path=\"router/src/app/heroes/heroes-routing.module.2.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes',  component: HeroListComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'heroes' } },\n  { path: 'hero/:id', component: HeroDetailComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'hero' } }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroesRoutingModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7njxmgrj4bxzr38i3yytqr26b\">在根目录 <code>src/app/</code> 下创建一个 <code>animations.ts</code>。内容如下：</p>\n<code-example header=\"src/app/animations.ts (excerpt)\" path=\"router/src/app/animations.ts\">\nimport {\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>, <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>, group,\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>, <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>, <a href=\"api/animations/query\" class=\"code-anchor\">query</a>\n} from '@angular/animations';\n\n\n// Routable animations\nexport const slideInAnimation =\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimation', [\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('heroes &lt;=&gt; hero', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%'}))\n        ]),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%'}))\n        ])\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n    ])\n  ]);\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27py7vtzemdpuw97fnlg3n8qm\">该文件做了如下工作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rr1khs7k55ivhzchnyio4qwl\">导入动画符号以构建动画触发器、控制状态并管理状态之间的过渡。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dj23p9yhil997pxhvkyhmjo56\">导出了一个名叫 <code>slideInAnimation</code> 的常量，并把它设置为一个名叫 <code>routeAnimation</code> 的动画触发器。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vl625ls4mqsk7hjowj2malud\">定义一个过渡动画，当在 <code>heroes</code> 和 <code>hero</code> 路由之间来回切换时，如果进入（<code>:enter</code>）应用视图则让组件从屏幕的左侧滑入，如果离开（<code>:leave</code>）应用视图则让组件从右侧划出。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7spliuij8wurw9tcz6tpqsbti\">回到 <code>AppComponent</code>，从 <code>@angular/router</code> 包导入 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>，并从 <code>'./animations.ts</code> 导入 <code>slideInAnimation</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e73ov13ew1uugnhm5tuymxed0\">为包含 <code>slideInAnimation</code> 的 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据添加一个 <code>animations</code> 数组。</p>\n<code-example header=\"src/app/app.component.ts (animations)\" path=\"router/src/app/app.component.2.ts\" region=\"animation-imports\">\nimport { <a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a> } from '@angular/router';\nimport { slideInAnimation } from './animations';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  animations: [ slideInAnimation ]\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1ig18x4ytiir83nas9lhdru6\">要想使用路由动画，就要把 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 包装到一个元素中。再把 <code>@routeAnimation</code> 触发器绑定到该元素上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djx820q8mtdvlugpxr8voasgy\">为了把 <code>@routeAnimation</code> 过渡过渡到指定的状态，你需要从 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 的 <code>data</code> 中提供它。<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 导出成了一个模板变量 <code>outlet</code>，这样你就可以绑定一个到路由出口的引用了。这个例子中使用了一个 <code>routerOutlet</code> 变量。</p>\n<code-example header=\"src/app/app.component.html (router outlet)\" path=\"router/src/app/app.component.2.html\">\n&lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;div [@routeAnimation]=\"getAnimationData()\"&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bogtekqt2yin0a4g8hm9fxqwg\"><code>@routeAnimation</code> 属性绑定到了 <code>getAnimationData()</code>，它会根据主路由所提供的 <code>data</code> 对象返回 <code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a></code> 属性。<code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a></code> 属性会根据你在 <code>animations.ts</code> 中定义 <code>slideInAnimation</code> 时使用的 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a></code> 名称进行匹配。</p>\n<code-example header=\"src/app/app.component.ts (router outlet)\" path=\"router/src/app/app.component.2.ts\" region=\"function-binding\">\nexport class AppComponent {\n  constructor(private contexts: <a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a>) {}\n\n  getAnimationData() {\n      return this.contexts.getContext('primary')?.route?.snapshot?.data?.['<a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>'];\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"svkhr7d1v95t0nmy38m46u0l\">如果在两个路由之间切换，导航进来时，<code>HeroDetailComponent</code> 和 <code>HeroListComponent</code> 会从左侧滑入；导航离开时将会从右侧划出。</p>\n<p><a id=\"milestone-3-wrap-up\"></a></p>\n<h3 id=\"milestone-3-wrap-up\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azqzd9d4v8yekd594038qcb6b\">里程碑 3 的小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-3-wrap-up\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ai2sahn0wct2hpe8l2yquux0o\">本节包括以下内容：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6iy6qqp1swwn19nbltgnhi044\">把应用组织成特性区</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2h0u1bbk63djupjr2lwcy9s4e\">命令式的从一个组件导航到另一个</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14sx1fs9uw94cafxua0kzxyn2\">通过路由参数传递信息，并在组件中订阅它们</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jcfsrcpj889mfupwiqltz3pv\">把这个特性分区模块导入根模块 <code>AppModule</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6olp3cqtegllguj6pejik5a0c\">把动画应用到路由组件上</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0ao7q68r2roc8hwtd42exhw6\">做完这些修改之后，目录结构如下：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-router-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          crisis-list\n        </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              crisis-list.component.css\n            </div>\n            <div class=\"file\">\n              crisis-list.component.html\n            </div>\n            <div class=\"file\">\n              crisis-list.component.ts\n            </div>\n          </div>\n        <div class=\"file\">\n          heroes\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            hero-detail\n          </div>\n            <div class=\"children\">\n              <div class=\"file\">\n                hero-detail.component.css\n              </div>\n              <div class=\"file\">\n                hero-detail.component.html\n              </div>\n              <div class=\"file\">\n                hero-detail.component.ts\n              </div>\n            </div>\n          <div class=\"file\">\n            hero-list\n          </div>\n            <div class=\"children\">\n              <div class=\"file\">\n                hero-list.component.css\n              </div>\n              <div class=\"file\">\n                hero-list.component.html\n              </div>\n              <div class=\"file\">\n                hero-list.component.ts\n              </div>\n            </div>\n          <div class=\"file\">\n            hero.service.ts\n          </div>\n          <div class=\"file\">\n            hero.ts\n          </div>\n          <div class=\"file\">\n            heroes-routing.module.ts\n          </div>\n          <div class=\"file\">\n            heroes.module.ts\n          </div>\n          <div class=\"file\">\n            mock-heroes.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          page-not-found\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            page-not-found.component.css\n          </div>\n          <div class=\"file\">\n            page-not-found.component.html\n          </div>\n          <div class=\"file\">\n            page-not-found.component.ts\n          </div>\n        </div>\n      </div>\n      <div class=\"file\">\n        animations.ts\n      </div>\n      <div class=\"file\">\n        app.component.css\n      </div>\n      <div class=\"file\">\n        app.component.html\n      </div>\n      <div class=\"file\">\n        app.component.ts\n      </div>\n      <div class=\"file\">\n        app.module.ts\n      </div>\n      <div class=\"file\">\n        app-routing.module.ts\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        message.service.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules …\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9iuve2ut6o6sqqvpu3xnn23z\">这里是当前版本的范例程序相关文件。</p>\n<code-tabs>\n    <code-pane header=\"animations.ts\" path=\"router/src/app/animations.ts\">\nimport {\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>, <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>, group,\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>, <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>, <a href=\"api/animations/query\" class=\"code-anchor\">query</a>\n} from '@angular/animations';\n\n\n// Routable animations\nexport const slideInAnimation =\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimation', [\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('heroes &lt;=&gt; hero', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%'}))\n        ]),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%'}))\n        ])\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n    ])\n  ]);\n\n\n</code-pane>\n    <code-pane header=\"app.component.html\" path=\"router/src/app/app.component.2.html\">\n&lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;div [@routeAnimation]=\"getAnimationData()\"&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"app.component.ts\" path=\"router/src/app/app.component.2.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a> } from '@angular/router';\nimport { slideInAnimation } from './animations';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  animations: [ slideInAnimation ]\n})\nexport class AppComponent {\n  constructor(private contexts: <a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a>) {}\n\n  getAnimationData() {\n      return this.contexts.getContext('primary')?.route?.snapshot?.data?.['<a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>'];\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app.module.ts\" path=\"router/src/app/app.module.3.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule } from './heroes/heroes.module';\n\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    CrisisListComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n    <code-pane header=\"app-routing.module.ts\" path=\"router/src/app/app-routing.module.2.ts\" region=\"milestone3\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\n/* . . . */\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'crisis-center', component: CrisisListComponent },\n/* . . . */\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n</code-pane>\n    <code-pane header=\"hero-list.component.css\" path=\"router/src/app/heroes/hero-list/hero-list.component.css\">\n/* HeroListComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 100%;\n}\n.heroes li {\n  position: relative;\n  cursor: pointer;\n}\n\n.heroes li:hover {\n  left: .1em;\n}\n\n.heroes a {\n  color: black;\n  text-decoration: none;\n  display: block;\n  font-size: 1.2rem;\n  background-color: #eee;\n  margin: .5rem .5rem .5rem 0;\n  padding: .5rem 0;\n  border-radius: 4px;\n}\n\n.heroes a:hover {\n  color: #2c3a41;\n  background-color: #e6e6e6;\n}\n\n.heroes a:active {\n  background-color: #525252;\n  color: #fafafa;\n}\n\n.heroes .selected a {\n  background-color: #d6e6f7;\n}\n\n.heroes .selected a:hover {\n  background-color: #bdd7f5;\n}\n\n.heroes .badge {\n  padding: .5em .6em;\n  color: white;\n  background-color: #435b60;\n  min-width: 16px;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-list.component.html\" path=\"router/src/app/heroes/hero-list/hero-list.component.html\">\n&lt;h2&gt;Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>\" [class.selected]=\"hero.id === selectedId\"&gt;\n    &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\"&gt;\n      &lt;span class=\"badge\"&gt;{{ hero.id }}&lt;/span&gt;{{ hero.name }}\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/sidekicks\"&gt;Go to sidekicks&lt;/button&gt;\n\n\n</code-pane>\n    <code-pane header=\"hero-list.component.ts\" path=\"router/src/app/heroes/hero-list/hero-list.component.ts\">\n// TODO: Feature Componentized like CrisisCenter\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { HeroService } from '../hero.service';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  styleUrls: ['./hero-list.component.css']\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$!: Observable&lt;Hero[]&gt;;\n  selectedId = 0;\n\n  constructor(\n    private service: HeroService,\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>\n  ) {}\n\n  ngOnInit() {\n    this.heroes$ = this.route.paramMap.pipe(\n      switchMap(params =&gt; {\n        this.selectedId = parseInt(params.get('id')!, 10);\n        return this.service.getHeroes();\n      })\n    );\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-detail.component.html\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.html\">\n&lt;h2&gt;Heroes&lt;/h2&gt;\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> as hero\"&gt;\n  &lt;h3&gt;{{ hero.name }}&lt;/h3&gt;\n  &lt;p&gt;Id: {{ hero.id }}&lt;/p&gt;\n  &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n  &lt;input type=\"text\" id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/&gt;\n  &lt;button type=\"button\" (click)=\"gotoHeroes(hero)\"&gt;Back&lt;/button&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"hero-detail.component.ts\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.3.ts\">\nimport { switchMap } from 'rxjs/operators';\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { HeroService } from '../hero.service';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: ['./hero-detail.component.css']\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero$!: Observable&lt;Hero&gt;;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n    private service: HeroService\n  ) {}\n\n  ngOnInit() {\n    this.hero$ = this.route.paramMap.pipe(\n      switchMap((params: <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>) =&gt;\n        this.service.getHero(params.get('id')!))\n    );\n  }\n\n  gotoHeroes(hero: Hero) {\n    const heroId = hero ? hero.id : null;\n    // Pass along the hero id if available\n    // so that the HeroList component can select that hero.\n    // Include a junk 'foo' property for fun.\n    this.router.navigate(['/heroes', { id: heroId, foo: 'foo' }]);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hero.service.ts\" path=\"router/src/app/heroes/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&lt;Hero[]&gt; {\n    // TODO: send the message _after_ fetching the heroes\n    this.messageService.add('HeroService: fetched heroes');\n    return of(HEROES);\n  }\n\n  getHero(id: number | string) {\n    return this.getHeroes().pipe(\n      // (+) before `id` turns the string into a number\n      map((heroes: Hero[]) =&gt; heroes.find(hero =&gt; hero.id === +id)!)\n    );\n  }\n}\n\n\n\n</code-pane>\n    <code-pane header=\"heroes.module.ts\" path=\"router/src/app/heroes/heroes.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nimport { HeroesRoutingModule } from './heroes-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesRoutingModule\n  ],\n  declarations: [\n    HeroListComponent,\n    HeroDetailComponent\n  ]\n})\nexport class HeroesModule {}\n\n\n</code-pane>\n    <code-pane header=\"heroes-routing.module.ts\" path=\"router/src/app/heroes/heroes-routing.module.2.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes',  component: HeroListComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'heroes' } },\n  { path: 'hero/:id', component: HeroDetailComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'hero' } }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroesRoutingModule { }\n\n</code-pane>\n    <code-pane header=\"message.service.ts\" path=\"router/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"milestone-4\"></a></p>\n<h2 id=\"milestone-4-crisis-center-feature\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"293tg4025r7f70qt79khnw0as\">里程碑 4：危机中心<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-4-crisis-center-feature\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4rp3uz5xisfbm29qa504t7sbm\">本节将向你展示如何在应用中添加子路由并使用相对路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85iewc87xujfkbgte7k89hu69\">要为应用当前的危机中心添加更多特性，请执行类似于 heroes 特性的步骤：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"by6tb01kn4uxemkg3ojnal44u\">在 <code>src/app</code> 目录下创建一个 <code>crisis-center</code> 子目录</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ielscwu4c966mbjkgv2oxy6n\">把 <code>app/heroes</code> 中的文件和目录复制到新的 <code>crisis-center</code> 文件夹中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mfthkhsytydsl8oxp1sukde4\">在这些新建的文件中，把每个 \"hero\" 都改成 \"crisis\"，每个 \"heroes\" 都改成 \"crises\"</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8elmzq19x1epvanm8zruwz7b1\">把这些 NgModule 文件改名为 <code>crisis-center.module.ts</code> 和 <code>crisis-center-routing.module.ts</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dney7k2herw0f6r9byuqusuyk\">使用 mock 的 crises 来代替 mock 的 heroes：</p>\n<code-example header=\"src/app/crisis-center/mock-crises.ts\" path=\"router/src/app/crisis-center/mock-crises.ts\">\nimport { Crisis } from './crisis';\n\nexport const CRISES: Crisis[] = [\n  { id: 1, name: 'Dragon Burning Cities' },\n  { id: 2, name: 'Sky Rains Great White Sharks' },\n  { id: 3, name: 'Giant Asteroid Heading For Earth' },\n  { id: 4, name: 'Procrastinators Meeting Delayed Again' },\n];\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4rtdmoexr8eiyrab92mf1ivwz\">最终的危机中心可以作为引入子路由这个新概念的基础。你可以把英雄管理保持在当前状态，以便和<em>危机中心</em>进行对比。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pwyevu8320oxoeo10j26sowc\">遵循<a href=\"https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\" title=\"Separation of Concerns\"><em>关注点分离（Separation of Concerns）</em>原则</a>，对<em>危机中心</em>的修改不会影响 <code>AppModule</code> 或其它特性模块中的组件。</p>\n</div>\n<p><a id=\"crisis-child-routes\"></a></p>\n<h3 id=\"a-crisis-center-with-child-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nzwbtv2p5qu0liucto3eg658\">带有子路由的危机中心<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#a-crisis-center-with-child-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1m5ecwe55j7tp7qrzfzbemtlg\">本节会展示如何组织危机中心，来满足 Angular 应用所推荐的模式：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awj680d2fx6ncb32o96wpdzik\">把每个特性放在自己的目录中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68ywaxob68gnml8zs5j1f81n1\">每个特性都有自己的 Angular 特性模块</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwideq8f3k1zwrwb6e699usmt\">每个特性区都有自己的根组件</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5h2fg2qfi0gx6kyudxdhmiq1t\">每个特性区的根组件中都有自己的路由出口及其子路由</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e37i98zu4j8iozcnz9l4lbo7m\">特性区内的路由很少（也许永远不会）与其它特性区的路由产生交叉</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9x5wkhbdebirbva122bito3z\">如果你的应用具有多个特性区，那些特性的组件树可能由多个组件构成，每个都包含一些其它相关组件的分支。</p>\n<p><a id=\"child-routing-component\"></a></p>\n<h3 id=\"child-routing-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28lysni9wlcl9n573y1wu2m7f\">子路由组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#child-routing-component\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgwhsu6h576vhlu3y0ozg0r8u\">在 <code>crisis-center</code> 目录下生成一个 <code>CrisisCenter</code> 组件：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component crisis-center/crisis-center\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4t0cm544rzhthsfpaqbtclexu\">使用如下代码更新组件模板：</p>\n<code-example header=\"src/app/crisis-center/crisis-center/crisis-center.component.html\" path=\"router/src/app/crisis-center/crisis-center/crisis-center.component.html\">\n&lt;h2&gt;Crisis Center&lt;/h2&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hqws76mi8td4mnnwxhp5imq1\"><code>CrisisCenterComponent</code> 和 <code>AppComponent</code> 有下列共同点：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8za8wp4wjkkwj9pfgqd2idjz2\">它是危机中心特性区的<em>根</em>，正如 <code>AppComponent</code> 是整个应用的根</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnnouxsdwje4y5fp4mrvkfewc\">它是危机管理特性区的壳，正如 <code>AppComponent</code> 是管理高层工作流的壳</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bja7lu2dw4m25o6m6ocs9mwiz\">就像大多数的壳一样，<code>CrisisCenterComponent</code> 类是最小化的，因为它没有业务逻辑，它的模板中没有链接，只有一个标题和用于放置危机中心的子组件的 <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code>。</p>\n<p><a id=\"child-route-config\"></a></p>\n<h3 id=\"child-route-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1j88kgw5jrboldoh83ix012h4\">子路由配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#child-route-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4dlsygqdbfebx5hb9c35mm1k\">在 <code>crisis-center</code> 目录下生成一个 <code>CrisisCenterHome</code> 组件，作为 \"危机中心\" 特性的宿主页面。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component crisis-center/crisis-center-home\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dsmh4k1fjunqkzolx6zfbh7y\">用一条欢迎信息修改 <code>Crisis Center</code> 中的模板。</p>\n<code-example header=\"src/app/crisis-center/crisis-center-home/crisis-center-home.component.html\" path=\"router/src/app/crisis-center/crisis-center-home/crisis-center-home.component.html\">\n&lt;h3&gt;Welcome to the Crisis Center&lt;/h3&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hw7e07uotjs7nd2bo7txd0ag\">把 <code>heroes-routing.module.ts</code> 文件复制过来，改名为 <code>crisis-center-routing.module.ts</code>，并修改它。这次你要把子路由定义在父路由 <code>crisis-center</code> 中。</p>\n<code-example header=\"src/app/crisis-center/crisis-center-routing.module.ts (Routes)\" path=\"router/src/app/crisis-center/crisis-center-routing.module.1.ts\" region=\"routes\">\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7apkyaeb2qt131iewuortnl8n\">注意，父路由 <code>crisis-center</code> 有一个 <code>children</code> 属性，它有一个包含 <code>CrisisListComponent</code> 的路由。<code>CrisisListComponent</code> 路由还有一个带两个路由的 <code>children</code> 数组。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alie2dya54shzgx8khuzkze2i\">这两个路由分别导航到了<em>危机中心</em>的两个子组件：<code>CrisisCenterHomeComponent</code> 和 <code>CrisisDetailComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ckb23rjh9tp1kkxft13jtrt5\">对这些子路由的处理中有一些重要的差异。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17cblkkgql9kn2viqz1ghfwai\">路由器会把这些路由对应的组件放在 <code>CrisisCenterComponent</code> 的 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 中，而不是 <code>AppComponent</code> 壳组件中的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csoaamkr33fpx1rdeglwo1wft\"><code>CrisisListComponent</code> 包含危机列表和一个 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>，用以显示 <code>Crisis Center Home</code> 和 <code>Crisis Detail</code> 这两个路由组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ommg38tg6d86lcg0pqm3gfe2\"><code>Crisis Detail</code> 路由是 <code>Crisis List</code> 的子路由。由于路由器默认会<a href=\"guide/router-tutorial-toh#reuse\">复用组件</a>，因此当你选择了另一个危机时，<code>CrisisDetailComponent</code> 会被复用。\n作为对比，回头看看 <code>Hero Detail</code> 路由，每当你从列表中选择了不同的英雄时，<a href=\"guide/router-tutorial-toh#snapshot-the-no-observable-alternative\">都会重新创建该组件</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qdy3cgxztntl2on0wlzdhok2\">在顶层，以 <code>/</code> 开头的路径指向的总是应用的根。但这里是子路由。它们是在父路由路径的基础上做出的扩展。在路由树中每深入一步，你就会在该路由的路径上添加一个斜线 <code>/</code>（除非该路由的路径是空的）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84tqf9a5kc2ethgz7aodvzrnz\">如果把该逻辑应用到危机中心中的导航，那么父路径就是 <code>/crisis-center</code>。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4unhrawxkoguy3lutfl56rqmd\">要导航到 <code>CrisisCenterHomeComponent</code>，完整的 URL 是 <code>/crisis-center</code> （<code>/crisis-center</code> + <code>''</code> + <code>''</code>）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o3gvzmc77ufu638p7oqnlalm\">要导航到 <code>CrisisDetailComponent</code> 以展示 <code>id=2</code> 的危机，完整的 URL 是 <code>/crisis-center/2</code> （<code>/crisis-center</code> + <code>''</code> + <code>'/2'</code>）</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lun7z4zyd4b4o2x8nwg7rk2w\">本例子中包含站点部分的绝对 URL，就是：</p>\n<code-example>\n\nlocalhost:4200/crisis-center/2\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xxn6c49jtll01sksd7n80ya5\">这里是完整的 <code>crisis-center.routing.ts</code> 及其导入语句。</p>\n<code-example header=\"src/app/crisis-center/crisis-center-routing.module.ts (excerpt)\" path=\"router/src/app/crisis-center/crisis-center-routing.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent } from './crisis-detail/crisis-detail.component';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-example>\n<p><a id=\"import-crisis-module\"></a></p>\n<h3 id=\"import-crisis-center-module-into-the-appmodule-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ujorqv0dexdlwo7n62ozagnd\">把危机中心模块导入到 <code>AppModule</code> 的路由中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#import-crisis-center-module-into-the-appmodule-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0tue49oshioaeanpgealkuxi\">就像 <code>HeroesModule</code> 模块中一样，你必须把 <code>CrisisCenterModule</code> 添加到 <code>AppModule</code> 的 <code>imports</code> 数组中，就在 <code>AppRoutingModule</code> <em>前面</em>：</p>\n<code-tabs>\n    <code-pane header=\"src/app/crisis-center/crisis-center.module.ts\" path=\"router/src/app/crisis-center/crisis-center.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent } from './crisis-detail/crisis-detail.component';\n\nimport { CrisisCenterRoutingModule } from './crisis-center-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    CrisisCenterRoutingModule\n  ],\n  declarations: [\n    CrisisCenterComponent,\n    CrisisListComponent,\n    CrisisCenterHomeComponent,\n    CrisisDetailComponent\n  ]\n})\nexport class CrisisCenterModule {}\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.module.ts (import CrisisCenterModule)\" path=\"router/src/app/app.module.4.ts\" region=\"crisis-center-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule } from './heroes/heroes.module';\nimport { CrisisCenterModule } from './crisis-center/crisis-center.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    CrisisCenterModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n</code-tabs>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ukuqsks5jfhvol4qcmy2itna\">这些模块的导入顺序是至关重要的，因为这些模块中定义的路由的顺序会影响路由的匹配顺序。如果先导入 <code>AppModule</code>，它的通配符路由 (<code>path: '**'</code>)。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30zi4y0ui8yw07tzcpospk6y0\">从 <code>app.routing.ts</code> 中移除危机中心的初始路由。因为现在是 <code>HeroesModule</code> 和 <code>CrisisCenter</code> 模块提供了这些特性路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63qsmvfkogunss8e74l5bwzz3\"><code>app-routing.module.ts</code> 文件中只有应用的顶层路由，比如默认路由和通配符路由。</p>\n<code-example header=\"src/app/app-routing.module.ts (v3)\" path=\"router/src/app/app-routing.module.3.ts\" region=\"v3\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      { enableTracing: true } // &lt;-- debugging purposes only\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<p><a id=\"relative-navigation\"></a></p>\n<h3 id=\"relative-navigation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56uvwvxuobxtcwk45vh38db0a\">相对导航<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#relative-navigation\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3i7uh22qk3533jokzc5tmnu6s\">虽然构建出了危机中心特性区，你却仍在使用以斜杠开头的<strong>绝对路径</strong>来导航到危机详情的路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wiknk4h6aupwxhh2ryg1owqq\">路由器会从路由配置的顶层来匹配像这样的绝对路径。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5o7odgni1k5ud3ekc7ypb2ab2\">你固然可以继续像危机中心特性区一样使用绝对路径，但是那样会把链接钉死在特定的父路由结构上。如果你修改了父路径 <code>/crisis-center</code>，那就不得不修改每一个链接参数数组。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqc3xrkpw0yos569hxl6t2ooe\">通过改成定义<em>相对于</em>当前 URL 的路径，你可以把链接从这种依赖中解放出来。当你修改了该特性区的父路由路径时，该特性区内部的导航仍然完好无损。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9aqbznp7kekdj8i4teu0gypzu\">路由器支持在<em>链接参数数组</em>中使用“目录式”语法来为查询路由名提供帮助：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqjm96c1pu502z8wzl2l9z73z\">类似目录的语法</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ubk4whrf2a1nkajc6axelsls\"><code>./</code> \n<br> \n<code>无前导斜杠</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5js7uy7kcfj62ndizmh2qwest\">相对于当前级别。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>../</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dxm7y98bqrwa5ukkrwqxr4n9\">路由路径上一级。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11d72nqahughkyd6ctl9qceak\">你可以把相对导航语法和一个祖先路径组合起来用。如果不得不导航到一个兄弟路由，你可以用 <code>../&lt;sibling&gt;</code> 来回到上一级，然后进入兄弟路由路径中。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e6xnwyirrau67sxoyhamqja7\">用 <code>Router.navigate</code> 方法导航到相对路径时，你必须提供当前的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>，来让路由器知道你现在位于路由树中的什么位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqr0dug3zg8vcav5rzeks9o9o\">在<em>链接参数数组</em>后面，添加一个带有 <code>relativeTo</code> 属性的对象，并把它设置为当前的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。这样路由器就会基于当前激活路由的位置来计算出目标 URL。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6d5n4f4g4xuph4gxoj9v0bx0t\">当调用路由器的 <code>navigateByUrl()</code> 时，<strong>总是</strong>要指定完整的绝对路径。</p>\n</div>\n<p><a id=\"nav-to-crisis\"></a></p>\n<h3 id=\"navigate-to-crisis-list-with-a-relative-url\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hip5lljdgebm4wo340jw913p\">使用相对 URL 导航到危机列表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#navigate-to-crisis-list-with-a-relative-url\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95poj8dtt12kgo9hgfh7hrd0x\">你已经注入了组成相对导航路径所需的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eo7kteenfx1ld9py3xrg6pbgw\">如果用 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 来代替 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务进行导航，就要使用相同的链接参数数组，不过不再需要提供 <code>relativeTo</code> 属性。<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 已经隐含在了 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ab6xm497ysdg2veamud3doss\">修改 <code>CrisisDetailComponent</code> 的 <code>gotoCrises()</code> 方法，来使用相对路径返回<em>危机中心</em>列表。</p>\n<code-example header=\"src/app/crisis-center/crisis-detail/crisis-detail.component.ts (relative navigation)\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\" region=\"gotoCrises-navigate\">\n// Relative navigation back to the crises\nthis.router.navigate(['../', { id: crisisId, foo: 'foo' }], { relativeTo: this.route });\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33n2c72h6eg1xxrq2zdqvzys\">注意这个路径使用了 <code>../</code> 语法返回上一级。如果当前危机的 <code>id</code> 是 <code>3</code>，那么最终返回到的路径就是 <code>/crisis-center/;id=3;foo=foo</code>。</p>\n<p><a id=\"named-outlets\"></a></p>\n<h3 id=\"displaying-multiple-routes-in-named-outlets\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aj4bie0k14mhsy576i91u49vq\">用命名出口（outlet）显示多重路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#displaying-multiple-routes-in-named-outlets\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pj0c5p5ep1xx06xbm5jkt0xt\">你决定给用户提供一种方式来联系危机中心。当用户点击“Contact”按钮时，你要在一个弹出框中显示一条消息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6dk6602viy9tpxtpr9xppdlcx\">即使在应用中的不同页面之间切换，这个弹出框也应该始终保持打开状态，直到用户发送了消息或者手动取消。显然，你不能把这个弹出框跟其它放到页面放到同一个路由出口中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16zm9o04p49ivbar9hzxhjd9s\">迄今为止，你只定义过单路由出口，并且在其中嵌套了子路由以便对路由分组。在每个模板中，路由器只能支持一个无名主路由出口。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvcs9zgoe18c3k0utnly13m3z\">模板还可以有多个命名的路由出口。每个命名出口都自己有一组带组件的路由。多重出口可以在同一时间根据不同的路由来显示不同的内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"se9u4wl60o7vqc9i6hssq7fx\">在 <code>AppComponent</code> 中添加一个名叫“popup”的出口，就在无名出口的下方。</p>\n<code-example header=\"src/app/app.component.html (outlets)\" path=\"router/src/app/app.component.4.html\" region=\"outlets\">\n&lt;div [@routeAnimation]=\"getAnimationData()\"&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84x61pby4wl1mb86sn05gh1h\">一旦你学会了如何把一个弹出框组件路由到该出口，那里就是将会出现弹出框的地方。</p>\n<p><a id=\"secondary-routes\"></a></p>\n<h4 id=\"secondary-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aswnyj4h6d51g77ar73uepbjx\">第二路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#secondary-routes\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2f2tsyhzbqq59e28nrwu61dx7\">命名出口是<em>第二路由</em>的目标。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ars39gi7ix6nx9iilrdxqx32r\">第二路由很像主路由，配置方式也一样。它们只有一些关键的不同点。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8sn1jejwnwzyh4ug7zjztcqvn\">它们彼此互不依赖</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hqtsb1mqxuvruib2z0kl92gv\">它们与其它路由组合使用</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d8qbarwylfl3vsmxkijd8cmjw\">它们显示在命名出口中</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99438ai7t9vo74fihzf49nhzp\">生成一个新的组件来组合这个消息。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component compose-message\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgf18gs60qglhw4c7k9ttv7vf\">它显示一个简单的表单，包括一个头、一个消息输入框和两个按钮：“Send”和“Cancel”。</p>\n<div class=\"lightbox\">\n<img alt=\"Contact textarea with send and cancel buttons\" src=\"generated/images/guide/router/contact-form.png\" width=\"400\" height=\"377\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6gzfsxrhuy4w2qqqew4wz5h8m\">下面是该组件及其模板和样式：</p>\n<code-tabs>\n    <code-pane header=\"src/app/compose-message/compose-message.component.html\" path=\"router/src/app/compose-message/compose-message.component.html\">\n&lt;h3&gt;Contact Crisis Center&lt;/h3&gt;\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"details\"&gt;\n  {{ details }}\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;div&gt;\n    &lt;label for=\"message\"&gt;Enter your message: &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;<a href=\"api/forms/DefaultValueAccessor\" class=\"code-anchor\">textarea</a> id=\"message\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"message\" rows=\"10\" cols=\"35\" [disabled]=\"sending\"&gt;&lt;/<a href=\"api/forms/DefaultValueAccessor\" class=\"code-anchor\">textarea</a>&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!sending\"&gt;\n  &lt;button type=\"button\" (click)=\"send()\"&gt;Send&lt;/button&gt;\n  &lt;button type=\"button\" (click)=\"cancel()\"&gt;Cancel&lt;/button&gt;\n&lt;/p&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/compose-message/compose-message.component.ts\" path=\"router/src/app/compose-message/compose-message.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-compose-message',\n  templateUrl: './compose-message.component.html',\n  styleUrls: ['./compose-message.component.css']\n})\nexport class ComposeMessageComponent {\n  details = '';\n  message = '';\n  sending = false;\n\n  constructor(private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n\n  send() {\n    this.sending = true;\n    this.details = 'Sending Message...';\n\n    setTimeout(() =&gt; {\n      this.sending = false;\n      this.closePopup();\n    }, 1000);\n  }\n\n  cancel() {\n    this.closePopup();\n  }\n\n  closePopup() {\n    // Providing a `null` value to the named outlet\n    // clears the contents of the named outlet\n    this.router.navigate([{outlets: {popup: null}}], {relativeTo: this.route.parent});\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/compose-message/compose-message.component.css\" path=\"router/src/app/compose-message/compose-message.component.css\">\n<a href=\"api/forms/DefaultValueAccessor\" class=\"code-anchor\">textarea</a> {\n  width: 100%;\n  margin-top: 1rem;\n  font-size: 1.2rem;\n  box-sizing: border-box;\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2s1i0e1d3b8uevi3vkm4s17j5\">它看起来几乎和你以前见过其它组件一样，但有两个值得注意的区别。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44tcy2pgl7fv8gtwscwhuvslt\"><strong>注意</strong>：<br>\n<code>send()</code> 方法通过在“发送”消息之前等待一秒并关闭弹出窗口来模拟延迟。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bak75zxyrsek080wz0qzl5pc\"><code>closePopup()</code> 方法用把 <code>popup</code> 出口导航到 <code>null</code> 的方式关闭了弹出框，它在<a href=\"guide/router-tutorial-toh#clear-secondary-routes\">稍后的部分</a>有讲解。</p>\n<p><a id=\"add-secondary-route\"></a></p>\n<h4 id=\"add-a-secondary-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1um8eimirk3ofo7g40jxxotcb\">添加第二路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#add-a-secondary-route\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ch02ktv4hv0zswz8cehxt2r6f\">打开 <code>AppRoutingModule</code>，并把一个新的 <code>compose</code> 路由添加到 <code>appRoutes</code> 中。</p>\n<code-example header=\"src/app/app-routing.module.ts (compose route)\" path=\"router/src/app/app-routing.module.3.ts\" region=\"compose\">\n{\n  path: 'compose',\n  component: ComposeMessageComponent,\n  outlet: 'popup'\n},\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jdl6o3ll36ct4ak9z7c7padg\">除了 <code>path</code> 和 <code>component</code> 属性之外还有一个新的属性 <code>outlet</code>，它被设置成了 <code>'popup'</code>。这个路由现在指向了 <code>popup</code> 出口，而 <code>ComposeMessageComponent</code> 也将显示在那里。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lv09uo8qyx3k6uva3t7eru29\">为了给用户某种途径来打开这个弹出框，还要往 <code>AppComponent</code> 模板中添加一个“Contact”链接。</p>\n<code-example header=\"src/app/app.component.html (contact-link)\" path=\"router/src/app/app.component.4.html\" region=\"contact-link\">\n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\"&gt;Contact&lt;/a&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zd1jq4palrj729yn4rhsgfy1\">虽然 <code>compose</code> 路由被配置到了 <code>popup</code> 出口上，但这仍然不足以把该路由和 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令联系起来。你还要在<em>链接参数数组</em>中指定这个命名出口，并通过属性绑定的形式把它绑定到 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0m8znse0kjw1pfk5w7fhlebt\"><em>链接参数数组</em>包含一个只有一个 <code>outlets</code> 属性的对象，它的值是另一个对象，这个对象以一个或多个路由的出口名作为属性名。在这里，它只有一个出口名“popup”，它的值则是另一个<em>链接参数数组</em>，用于指定 <code>compose</code> 路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctn9ewbjbm7gryxj9yrgvkuei\">换句话说，当用户点击此链接时，路由器会在路由出口 <code>popup</code> 中显示与 <code>compose</code> 路由相关联的组件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajctdbg9lnc0cg2c5325erkln\">当只需要考虑一个路由和一个无名出口时，外部对象中的这个 <code>outlets</code> 对象是完全不必要的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e039oa0l21vb0dbu13gh8ux0\">路由器假设这个路由指向了无名的主出口，并为你创建这些对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evq49ipc3t06wryax5t0t8n3n\">路由到一个命名出口会揭示一个路由特性：你可以在同一个 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令中为多个路由出口指定多个路由。</p>\n</div>\n<p><a id=\"secondary-route-navigation\"></a></p>\n<h4 id=\"secondary-route-navigation-merging-routes-during-navigation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9getnz6cu98tz5uotd1xor5e7\">第二路由导航：在导航期间合并路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#secondary-route-navigation-merging-routes-during-navigation\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o3h4q06zrljayjjxf792g7gw\">导航到<em>危机中心</em>并点击“Contact”，你将会在浏览器的地址栏看到如下 URL。</p>\n<code-example format=\"http\" language=\"http\">\n\n<a href=\"api/common/http\" class=\"code-anchor\">http</a>://…/crisis-center(popup:compose)\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56tffo8n4fy99vp62oyxl4ioe\">这个 URL 中有意义的部分是 <code>...</code> 后面的这些：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ii3n5h6urql6vakxz9wnkceq\"><code>crisis-center</code> 是主导航。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9ll3xctqy6isa2osgyn22w54\">圆括号包裹的部分是第二路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nhh3qqdjjz6q04h73xaolxt\">第二路由包括一个出口名称（<code>popup</code>）、一个冒号分隔符和第二路由的路径（<code>compose</code>）。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0k8sl0z91ugvek97faogm6th\">点击 <em>Heroes</em> 链接，并再次查看 URL。</p>\n<code-example format=\"http\" language=\"http\">\n\n<a href=\"api/common/http\" class=\"code-anchor\">http</a>://…/heroes(popup:compose)\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"310bbzomumor1qfsuxtrqlarv\">主导航的部分变化了，而第二路由没有变。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0jghy45nbw5iq1yj53v9m99v\">路由器在导航树中对两个独立的分支保持追踪，并在 URL 中对这棵树进行表达。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"deqp4bh26atqm504qrh9ctj0g\">你还可以添加更多出口和更多路由（无论是在顶层还是在嵌套的子层）来创建一个带有多个分支的导航树。路由器将会生成相应的 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6eumwz1emg0rh9731u8ba3xkv\">通过像前面那样填充 <code>outlets</code> 对象，你可以告诉路由器立即导航到一棵完整的树。然后把这个对象通过一个<em>链接参数数组</em>传给 <code>router.navigate</code> 方法。</p>\n<p><a id=\"clear-secondary-routes\"></a></p>\n<h4 id=\"clearing-secondary-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0fcr26ifd4gex4re1z2dyuqp\">清除第二路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#clearing-secondary-routes\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gydz48rtoyg1vd1fag85jned\">像常规出口一样，二级出口会一直存在，直到你导航到新组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an1vxw0nfnzvwzex3yn32ibbi\">每个第二出口都有自己独立的导航，跟主出口的导航彼此独立。修改主出口中的当前路由并不会影响到 <code>popup</code> 出口中的。这就是为什么在危机中心和英雄管理之间导航时，弹出框始终都是可见的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8yc2u9fz7dguu9l14xcaxiii\">再看 <code>closePopup()</code> 方法：</p>\n<code-example header=\"src/app/compose-message/compose-message.component.ts (closePopup)\" path=\"router/src/app/compose-message/compose-message.component.ts\" region=\"closePopup\">\nclosePopup() {\n  // Providing a `null` value to the named outlet\n  // clears the contents of the named outlet\n  this.router.navigate([{outlets: {popup: null}}], {relativeTo: this.route.parent});\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0vzb4ct1vuaqj9ltc0osktpg\">单击 “send” 或 “cancel” 按钮可以清除弹出视图。<code>closePopup()</code> 函数会使用 <code><a href=\"api/router/Router#navigate\" class=\"code-anchor\">Router.navigate()</a></code> 方法强制导航，并传入一个<a href=\"guide/router-tutorial-toh#link-parameters-array\">链接参数数组</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kgzcvwqm1z7nsi2p4jcowmxu\">就像在 <code>AppComponent</code> 中绑定到的 <em>Contact</em> <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 一样，它也包含了一个带 <code>outlets</code> 属性的对象。\n<code>outlets</code> 属性的值是另一个对象，该对象用一些出口名称作为属性名。\n唯一的命名出口是 <code>'popup'</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lo97oyjm7jtk6xo8e5ruy6t\">但这次，<code>'popup'</code> 的值是 <code>null</code>。<code>null</code> 不是一个路由，但却是一个合法的值。把 <code>popup</code> 这个 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 设置为 <code>null</code> 会清除该出口，并且从当前 URL 中移除第二路由 <code>popup</code>。</p>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpn6tgnin6a6mrom99jcgfna2\"><strong>注意:</strong> 传递给\n<code><a href=\"api/router/Router#navigate\" class=\"code-anchor\">Router.navigate()</a></code>的数组中的所有命令都会针对\n<code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>中的一个\n<em>特定段</em>。 我们将\n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>的父级指定为\n<code>relativeTo</code>选项，因为我们希望从包含其引用的段中移除\n<code>'popup'</code>。 始终要注意这些命令将应用于哪些段非常重要。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"br81f30r3z8snwa7a7mus8llq\">如果未提供\n<code>relativeTo</code>给\n<code><a href=\"api/router/Router#navigate\" class=\"code-anchor\">Router.navigate()</a></code>方法，命令将从根部开始处理。 在这种特殊情况下，我们可以省略\n<code>relativeTo</code>选项，因为\n<code>'popup'</code>出口位于配置的根级。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4aha1alwkobvnldajfksj6dqt\">如果要关闭任何段深度中出现的出口，可以通过从当前URL创建一个\n<code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>，递归清除与出口名称匹配的段\n<code>children</code>，最后使用当前\n<code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>的\n<code>root</code>段调用\n<code><a href=\"api/router/Router#navigateByUrl\" class=\"code-anchor\">Router.navigateByUrl()</a></code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cxmcex29tpduaabwrtz4pxr9\"><a id=\"guards\"></a>\n<a id=\"milestone-5-route-guards\"></a></p>\n<h2 id=\"milestone-5-route-guards\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6syg1gk8g3mmh90n42zspops0\">里程碑 5：路由守卫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-5-route-guards\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bk1obpkedg11vxlec43vbems\">现在，<em>任何用户</em>都能在<em>任何时候</em>导航到<em>任何地方</em>。但有时候出于种种原因需要控制对该应用的不同部分的访问。可能包括如下场景：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35vjgw06evep8d53b3lv2ohsl\">该用户可能无权导航到目标组件</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dmn1e11p41hp1bu73fdvac89\">可能用户得先登录（认证）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80ojrcry2dxubpc2wpkcym1yg\">在显示目标组件前，你可能得先获取某些数据</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpx2yoy5vumzxwnnubyqinu5s\">在离开组件前，你可能要先保存修改</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5h3tt1vs4y89wk2z6nrcb25qx\">你可能要询问用户：你是否要放弃本次更改，而不用保存它们？</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adta29bzxyk1ahgg223wqg3qm\">你可以往路由配置中添加守卫，来处理这些场景。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77i4de6k98fivgg3iw6ej9kg2\">守卫返回一个值，以控制路由器的行为：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwjtbd29xg40cfstdf092ivac\">守卫返回值</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3k38wf94es1g2wikmstu5eaj9\">导航过程继续</td>\n</tr>\n<tr>\n<td align=\"left\"><code>false</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5uz1fgphfvpsyh5d1zn62xtet\">导航过程停止，用户保持原位</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhthb3ox16msmbclm0jf7c6sc\">当前导航取消并启动新的导航到返回的\n<code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq4uli9z17se5t7es4q71yxov\"><strong>注意</strong>：守卫还可以告诉路由器导航到别处，这样也会取消当前的导航。要想在守卫中这么做，就要返回 <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lxgu1cs6qx5xrfj7mq9y7r4x\">守卫可以用同步的方式返回一个布尔值。但在很多情况下，守卫无法用同步的方式给出答案。守卫可能会向用户问一个问题、把更改保存到服务器，或者获取新数据，而这些都是异步操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37bicxvn72f6to11k9f7d1r1a\">因此，路由的守卫可以返回一个 <code>Observable&lt;boolean&gt;</code> 或 <code>Promise&lt;boolean&gt;</code>，并且路由器会等待这个可观察对象被解析为 <code>true</code> 或 <code>false</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jtv4rc37s3mxcjv9km17ddce\"><strong>注意</strong>：<br>\n提供给 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 的可观察对象会在接收到第一个值之后自动完成（complete）。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dklww6ggzcp08lrdkth71ers\">路由器可以支持多种守卫接口：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"desyxqajywrrcoceo8i8nfe84\">守卫接口</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/router/CanActivateFn\"><code>canActivate</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"h9lnl90xi9f1d11s657l7j41\">调解导航\n<em>到</em>一个路由</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/router/CanActivateChildFn\"><code>canActivateChild</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avysa91w7mx2o2m17yj08vblx\">调解导航\n<em>到</em>子路由</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/router/CanDeactivateFn\"><code>canDeactivate</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6atyv79t4hotm5jsyxfx6f0tx\">调解导航\n<em>离开</em>当前路由</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/router/ResolveFn\"><code>resolve</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ips4w9df7qkq39ma6kw8cao5\">在路由激活之前执行路由数据检索</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/router/CanMatchFn\"><code>canMatch</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3lbmux543wo0tcix2fbjta06r\">控制是否应使用某个路由，即使路径匹配URL段</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7m0gpsdhcpyiydr2mg9o5q4nq\">在分层路由的每个级别上，你都可以设置多个守卫。路由器会先按照从最深的子路由由下往上检查的顺序来检查 <code>canDeactivate()</code> 守卫。然后它会按照从上到下的顺序检查 <code>canActivate()</code> 守卫。如果特性模块是异步加载的，在加载它之前还会检查 <code>canLoad()</code> 守卫。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"al4eb084jbqvv7mr0qijbt9mn\">除 <code>canMatch</code> 之外，如果<em>任何</em>一个守卫返回 <code>false</code>，其它尚未完成的守卫会被取消，这样整个导航就被取消了。如果 <code>canMatch</code> 守卫返回 <code>false</code>，那么 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 就会继续处理这些 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 的其余部分，以查看是否有别的 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 配置能匹配此 URL。你可以看作 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 假装带这个 <code>canMatch</code> 守卫的路由不存在一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xb5x6xqr4hjx6ocrel8fh950\">接下来的小节中有一些例子。</p>\n<p><a id=\"can-activate-guard\"></a></p>\n<h3 id=\"canactivate-requiring-authentication\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"at3gus2z467pfp0h3doelxn6k\"><code>canActivate</code>：需要身份验证<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#canactivate-requiring-authentication\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuvoa54g85rio1agsbdv53p8a\">应用程序通常会根据访问者来决定是否授予某个特性区的访问权。你可以只对已认证过的用户或具有特定角色的用户授予访问权，还可以阻止或限制用户访问权，直到用户账户激活为止。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5m1yzw36t0iz3anftbxuzvn0\"><code>canActivate</code> 守卫是一个管理这些导航类业务规则的工具。</p>\n<h4 id=\"add-an-admin-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co7qet79bchbp992voeqlhjfa\">添加一个“管理”特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#add-an-admin-feature-module\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kcs713104qx713txdee9gc6q\">本节将指导你使用一些新的管理功能来扩展危机中心。首先添加一个名为 <code>AdminModule</code> 的新特性模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a92uyzdqai3pk3nu0s8vk8cuf\">生成一个带有特性模块文件和路由配置文件的 <code>admin</code> 目录。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module admin --routing\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4n0z7evzsxuqsv17u589jhnyc\">接下来，生成一些支持性组件。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component admin/admin-dashboard\n\n</code-example>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component admin/admin\n\n</code-example>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component admin/manage-crises\n\n</code-example>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component admin/manage-heroes\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2t1jik43bcathr17lpgseeleo\">管理特性区的文件是这样的：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src/app/admin\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      admin\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          admin.component.css\n        </div>\n        <div class=\"file\">\n          admin.component.html\n        </div>\n        <div class=\"file\">\n          admin.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      admin-dashboard\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          admin-dashboard.component.css\n        </div>\n        <div class=\"file\">\n          admin-dashboard.component.html\n        </div>\n        <div class=\"file\">\n          admin-dashboard.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      manage-crises\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          manage-crises.component.css\n        </div>\n        <div class=\"file\">\n          manage-crises.component.html\n        </div>\n        <div class=\"file\">\n          manage-crises.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      manage-heroes\n    </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          manage-heroes.component.css\n        </div>\n        <div class=\"file\">\n          manage-heroes.component.html\n        </div>\n        <div class=\"file\">\n          manage-heroes.component.ts\n        </div>\n      </div>\n    <div class=\"file\">\n      admin.module.ts\n    </div>\n    <div class=\"file\">\n      admin-routing.module.ts\n    </div>\n  </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cire15icdmypxz7a59p1e0zn8\">管理特性模块包含 <code>AdminComponent</code>，它用于在特性模块内的仪表盘路由以及两个尚未完成的用于管理危机和英雄的组件之间进行路由。</p>\n<code-tabs>\n    <code-pane header=\"src/app/admin/admin/admin.component.html\" path=\"router/src/app/admin/admin/admin.component.html\">\n&lt;h2&gt;Admin&lt;/h2&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"./\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"\n    [routerLinkActiveOptions]=\"{ exact: true }\" ariaCurrentWhenActive=\"page\"&gt;Dashboard&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"./crises\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Manage Crises&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"./heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Manage Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/admin/admin-dashboard/admin-dashboard.component.html\" path=\"router/src/app/admin/admin-dashboard/admin-dashboard.component.1.html\">\n&lt;h3&gt;Dashboard&lt;/h3&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/admin/admin.module.ts\" path=\"router/src/app/admin/admin.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\nimport { AdminComponent } from './admin/admin.component';\nimport { AdminDashboardComponent } from './admin-dashboard/admin-dashboard.component';\nimport { ManageCrisesComponent } from './manage-crises/manage-crises.component';\nimport { ManageHeroesComponent } from './manage-heroes/manage-heroes.component';\n\nimport { AdminRoutingModule } from './admin-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    AdminRoutingModule\n  ],\n  declarations: [\n    AdminComponent,\n    AdminDashboardComponent,\n    ManageCrisesComponent,\n    ManageHeroesComponent\n  ]\n})\nexport class AdminModule {}\n\n\n</code-pane>\n    <code-pane header=\"src/app/admin/manage-crises/manage-crises.component.html\" path=\"router/src/app/admin/manage-crises/manage-crises.component.html\">\n&lt;p&gt;Manage your crises here&lt;/p&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/admin/manage-heroes/manage-heroes.component.html\" path=\"router/src/app/admin/manage-heroes/manage-heroes.component.html\">\n&lt;p&gt;Manage your heroes here&lt;/p&gt;\n\n</code-pane>\n</code-tabs>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"449lkrmyxrcqq48yo7ocdliul\">虽然管理仪表盘中的 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 只包含一个没有其它 URL 段的斜杠 <code>/</code>，但它能匹配管理特性区下的任何路由。但你只希望在访问 <code>Dashboard</code> 路由时才激活该链接。往 <code>Dashboard</code> 这个 routerLink 上添加另一个绑定 <code>[routerLinkActiveOptions]=\"{ exact: true }\"</code>，这样就只有当用户导航到 <code>/admin</code> 这个 URL 时才会激活它，而不会在导航到它的某个子路由时。</p>\n</div>\n<p><a id=\"component-less-route\"></a></p>\n<h5 id=\"component-less-route-grouping-routes-without-a-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"538ehyfgyl1v7dvpn5odkt3ha\">无组件路由：分组路由，而不需要组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#component-less-route-grouping-routes-without-a-component\"><i class=\"material-icons\">link</i></a></h5>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6t5xjlmxb7qgrwweg3kbmebo1\">最初的管理路由配置如下：</p>\n<code-example header=\"src/app/admin/admin-routing.module.ts (admin routing)\" path=\"router/src/app/admin/admin-routing.module.1.ts\" region=\"admin-routes\">\nconst adminRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'admin',\n    component: AdminComponent,\n    children: [\n      {\n        path: '',\n        children: [\n          { path: 'crises', component: ManageCrisesComponent },\n          { path: 'heroes', component: ManageHeroesComponent },\n          { path: '', component: AdminDashboardComponent }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(adminRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AdminRoutingModule {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"od74bkowwx7oxmkpjfpyn1g3\"><code>AdminComponent</code> 下的子路由有一个 <code>path</code> 和一个 <code>children</code> 属性，但是它没有使用 <code>component</code>。这就定义了一个无<em>组件</em>路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ef1cloiqji6mw3cjwjpazilsh\">要把 <code>Crisis Center</code> 管理下的路由分组到 <code>admin</code> 路径下，组件是不必要的。此外，无<em>组件</em>路由可以更容易地<a href=\"guide/router-tutorial-toh#can-activate-child-guard\">保护子路由</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37z7gdii2la2a3ovvs2ehfqsz\">接下来，把 <code>AdminModule</code> 导入到 <code>app.module.ts</code> 中，并把它加入 <code>imports</code> 数组中来注册这些管理类路由。</p>\n<code-example header=\"src/app/app.module.ts (admin module)\" path=\"router/src/app/app.module.4.ts\" region=\"admin-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule } from './heroes/heroes.module';\nimport { CrisisCenterModule } from './crisis-center/crisis-center.module';\n\nimport { AdminModule } from './admin/admin.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    CrisisCenterModule,\n    AdminModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    ComposeMessageComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22qwyu92hklzv7300i87r69vy\">然后往壳组件 <code>AppComponent</code> 中添加一个链接，让用户能点击它，以访问该特性。</p>\n<code-example header=\"src/app/app.component.html (template)\" path=\"router/src/app/app.component.5.html\">\n&lt;h1 class=\"title\"&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/admin\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Admin&lt;/a&gt;\n  &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\"&gt;Contact&lt;/a&gt;\n&lt;/nav&gt;\n&lt;div [@routeAnimation]=\"getAnimationData()\"&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n</code-example>\n<p><a id=\"guard-admin-feature\"></a></p>\n<h4 id=\"guard-the-admin-feature\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lsopkvc37ts0hlpk2h9knuv7\">守护“管理特性”区<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#guard-the-admin-feature\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cncfwy4hcdkweqtr0jvhprm1c\">现在危机中心的每个路由都是对所有人开放的。这些新的管理特性应该只能被已登录用户访问。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14roy4s5xvkw0tbpei52v69pr\">编写一个 <code>canActivate()</code> 守卫，将正在尝试访问管理组件匿名用户重定向到登录页。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cf3rpjesffrbvcd3r0dc7eky\">在 <code>auth</code> 文件夹中创建一个名为 <code>auth.guard.ts</code> 的新文件。<code>auth.guard.ts</code> 文件将包含 <code>authGuard</code> 函数。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate guard auth/auth\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6q03fty6c218g12ogedc0ix6b\">为了演示这些基础知识，这个例子只把日志写到控制台中，立即 <code>return</code> true，并允许继续导航：</p>\n<code-example header=\"src/app/auth/auth.guard.ts (excerpt)\" path=\"router/src/app/auth/auth.guard.1.ts\">\n\nexport const authGuard = () =&gt; {\n  console.log('authGuard#canActivate called');\n  return true;\n};\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"n3lre78mypok6589awymdpyu\">接下来，打开 <code>admin-routing.module.ts</code>，导入 <code>authGuard</code> 函数，修改管理路由并通过 <code>canActivate()</code> 守卫来引用 <code>authGuard</code>：</p>\n<code-example header=\"src/app/admin/admin-routing.module.ts (guarded admin route)\" path=\"router/src/app/admin/admin-routing.module.2.ts\" region=\"admin-route\">\nimport {authGuard} from '../auth/auth.guard';\n\nimport {AdminDashboardComponent} from './admin-dashboard/admin-dashboard.component';\nimport {AdminComponent} from './admin/admin.component';\nimport {ManageCrisesComponent} from './manage-crises/manage-crises.component';\nimport {ManageHeroesComponent} from './manage-heroes/manage-heroes.component';\n\nconst adminRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [{\n  path: 'admin',\n  component: AdminComponent,\n  canActivate: [authGuard],\n\n  children: [{\n    path: '',\n    children: [\n      {path: 'crises', component: ManageCrisesComponent},\n      {path: 'heroes', component: ManageHeroesComponent},\n      {path: '', component: AdminDashboardComponent}\n    ],\n  }]\n}];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({imports: [RouterModule.forChild(adminRoutes)], exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]})\nexport class AdminRoutingModule {\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6515dgshzeni0tuwgwyeg49ri\">管理特性区现在受此守卫保护了，不过该守卫还需要做进一步定制。</p>\n<p><a id=\"teach-auth\"></a></p>\n<h4 id=\"authenticate-with-authguard\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ioopzt3jwnaqd75sb7kuhyiz\">通过 <code>authGuard</code> 验证<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#authenticate-with-authguard\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kmoqnhzwp9gf63nm9d5g0igz\">让 <code>authGuard</code> 模拟身份验证。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79xlc16ooryn1hn20i1ggm2je\"><code>authGuard</code> 可以调用应用中的一项服务，该服务能让用户登录，并且保存当前用户的信息。在 <code>auth</code> 目录下生成一个新的 <code>AuthService</code>：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service auth/auth\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3tqqxvbbgi8jssm7qovddhrg\">修改 <code>AuthService</code> 以登入此用户：</p>\n<code-example header=\"src/app/auth/auth.service.ts (excerpt)\" path=\"router/src/app/auth/auth.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\nimport { tap, delay } from 'rxjs/operators';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class AuthService {\n  isLoggedIn = false;\n\n  // store the URL so we can redirect after logging in\n  redirectUrl: string | null = null;\n\n  login(): Observable&lt;boolean&gt; {\n    return of(true).pipe(\n      delay(1000),\n      tap(() =&gt; this.isLoggedIn = true)\n    );\n  }\n\n  logout(): void {\n    this.isLoggedIn = false;\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dq6mrwdch851f8370plkxgdpf\">虽然不会真的进行登录，但它有一个 <code>isLoggedIn</code> 标志，用来标识是否用户已经登录过了。它的 <code>login()</code> 方法会仿真一个对外部服务的 API 调用，返回一个可观察对象（observable）。在短暂的停顿之后，这个可观察对象就会解析成功。<code>redirectUrl</code> 属性将会保存在用户要访问的 URL 中，以便认证完之后导航到它。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9lqipnagni25xqiwyup6saew\">为了保持最小化，这个例子会将未经身份验证的用户重定向到 <code>/admin</code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cm4txiipnp6xk878uvrz88212\">修改 <code>authGuard</code> 以调用 <code>AuthService</code>。</p>\n<code-example header=\"src/app/auth/auth.guard.ts (v2)\" path=\"router/src/app/auth/auth.guard.2.ts\">\nimport {inject} from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\n\nimport {AuthService} from './auth.service';\n\nexport const authGuard = () =&gt; {\n  const authService = inject(AuthService);\n  const router = inject(<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>);\n\n  if (authService.isLoggedIn) {\n    return true;\n  }\n\n  // Redirect to the login page\n  return router.parseUrl('/login');\n};\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77qav9nrm5cficx40hv25s1qx\">这个守卫会返回一个同步布尔结果或一个 <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>。如果用户已登录，则返回 <code>true</code> 并继续导航。否则，它会重定向到登录页面 —— 你尚未创建它。返回一个 <code><a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> 会告诉 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 取消当前导航并安排一个新的导航来重定向用户。</p>\n<p><a id=\"add-login-component\"></a></p>\n<h4 id=\"add-the-logincomponent\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ny6rqkooinf80kl25ihg1kvt\">添加 <code>LoginComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#add-the-logincomponent\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8eosl4rq7ke6xjsb5myjvnxg\">你需要一个 <code>LoginComponent</code> 来让用户登录进这个应用。在登录之后，你就会跳转到前面保存的 URL，如果没有，就跳转到默认 URL。该组件没有什么新内容，你在路由配置中使用它的方式也没什么新意。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component auth/login\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nadhyhddadrq0yec2itip9vh\">在 <code>auth/auth-routing.module.ts</code> 文件中注册一个 <code>/login</code> 路由。在 <code>app.module.ts</code> 中，导入 <code>AuthModule</code> 并且添加到 <code>AppModule</code> 的 <code>imports</code> 中。</p>\n<code-tabs>\n    <code-pane header=\"src/app/app.module.ts\" path=\"router/src/app/app.module.ts\" region=\"auth\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\nimport { AppComponent } from './app.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule } from './heroes/heroes.module';\nimport { AuthModule } from './auth/auth.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AuthModule,\n    AppRoutingModule,\n  ],\n  declarations: [\n    AppComponent,\n    ComposeMessageComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n\n</code-pane>\n    <code-pane header=\"src/app/auth/login/login.component.html\" path=\"router/src/app/auth/login/login.component.html\">\n&lt;h2&gt;Login&lt;/h2&gt;\n&lt;p&gt;{{message}}&lt;/p&gt;\n&lt;p&gt;\n  &lt;button type=\"button\" (click)=\"login()\"  *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!authService.isLoggedIn\"&gt;Login&lt;/button&gt;\n  &lt;button type=\"button\" (click)=\"logout()\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"authService.isLoggedIn\"&gt;Logout&lt;/button&gt;\n&lt;/p&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/auth/login/login.component.ts\" path=\"router/src/app/auth/login/login.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\nimport { AuthService } from '../auth.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  message: string;\n\n  constructor(public authService: AuthService, public router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n    this.message = this.getMessage();\n  }\n\n  getMessage() {\n    return 'Logged ' + (this.authService.isLoggedIn ? 'in' : 'out');\n  }\n\n  login() {\n    this.message = 'Trying to log in ...';\n\n    this.authService.login().subscribe(() =&gt; {\n      this.message = this.getMessage();\n      if (this.authService.isLoggedIn) {\n        // Usually you would use the redirect URL from the auth service.\n        // However to keep the example simple, we will always redirect to `/admin`.\n        const redirectUrl = '/admin';\n\n        // Redirect the user\n        this.router.navigate([redirectUrl]);\n      }\n    });\n  }\n\n  logout() {\n    this.authService.logout();\n    this.message = this.getMessage();\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/auth/auth.module.ts\" path=\"router/src/app/auth/auth.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { LoginComponent } from './login/login.component';\nimport { AuthRoutingModule } from './auth-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AuthRoutingModule\n  ],\n  declarations: [\n    LoginComponent\n  ]\n})\nexport class AuthModule {}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"can-activate-child-guard\"></a></p>\n<h3 id=\"canactivatechild-guarding-child-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4w7o203q5denxk0v8lbgzp0h2\"><code>canActivateChild</code>：保护子路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#canactivatechild-guarding-child-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1bf0mz8lgn56nbbqlioy1fy\">你还可以使用 <code>canActivateChild</code> 守卫来保护子路由。<code>canActivateChild</code> 守卫和 <code>canActivate</code> 守卫很像。它们的区别在于，<code>canActivateChild</code> 会在<em>任何子路由</em>被激活之前运行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14zdstruadwas1tkgukue89vj\">你要保护管理特性模块，防止它被非授权访问，还要保护这个特性模块<em>内部</em>的那些子路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3h9m44hh66xhrnmc04f66gnfm\">同样把这个 <code>authGuard</code> 添加到“无组件的”管理路由，来同时保护它的所有子路由，而不是为每个路由单独添加这个 <code>authGuard</code>。</p>\n<code-example header=\"src/app/admin/admin-routing.module.ts (excerpt)\" path=\"router/src/app/admin/admin-routing.module.3.ts\" region=\"can-activate-child\">\nconst adminRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'admin',\n    component: AdminComponent,\n    canActivate: [authGuard],\n    children: [\n      {\n        path: '',\n        canActivateChild: [authGuard],\n        children: [\n          { path: 'crises', component: ManageCrisesComponent },\n          { path: 'heroes', component: ManageHeroesComponent },\n          { path: '', component: AdminDashboardComponent }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(adminRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AdminRoutingModule {}\n\n</code-example>\n<p><a id=\"can-deactivate-guard\"></a></p>\n<h3 id=\"candeactivate-handling-unsaved-changes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck58lzyz1c79x89idb6077age\"><code>canDeactivate</code>：处理未保存的更改<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#candeactivate-handling-unsaved-changes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9xvd3iwpg9xxcvblloh1cyib\">回到 “Heroes” 工作流，该应用会立即接受对英雄的每次更改，而不进行验证。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lxgqxmzxxvkfdkd7rztd8e9d\">在现实世界，你可能不得不积累来自用户的更改，跨字段验证，在服务器上验证，或者把变更保持在待定状态，直到用户确认这一组字段或取消并还原所有变更为止。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jfvzwta1fj86rpqmbt17b7o4\">当用户要导航离开时，你可以让用户自己决定该怎么处理这些未保存的更改。如果用户选择了取消，你就留下来，并允许更多改动。如果用户选择了确认，那就进行保存。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85yeh1y9zmlfntojehhmnbq7w\">在保存成功之前，你还可以继续推迟导航。如果你让用户立即移到下一个界面，而保存却失败了（可能因为数据不符合有效性规则），你就会丢失该错误的上下文环境。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"183pwgwo92yupxfuiz2czulxj\">你需要用异步的方式等待，在服务器返回答复之前先停止导航。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5oq2jsvxf06afp1ic7vk4hyih\"><code>canDeactivate</code> 守卫能帮助你决定如何处理未保存的更改，以及如何处理。</p>\n<p><a id=\"cancel-save\"></a></p>\n<h4 id=\"cancel-and-save\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yaodn3js0adzkjlr6s2l9bmk\">取消与保存<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#cancel-and-save\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3k7no0enaqmlqyf03u26ll5i3\">用户在 <code>CrisisDetailComponent</code> 中更新危机信息。与 <code>HeroDetailComponent</code> 不同，用户的改动不会立即更新危机的实体对象。当用户按下了 Save 按钮时，应用就更新这个实体对象；如果按了 Cancel 按钮，那就放弃这些更改。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a34etgh2940ihql6u3jixv4nk\">这两个按钮都会在保存或取消之后导航回危机列表。</p>\n<code-example header=\"src/app/crisis-center/crisis-detail/crisis-detail.component.ts (cancel and save methods)\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\" region=\"cancel-save\">\ncancel() {\n  this.gotoCrises();\n}\n\nsave() {\n  this.crisis.name = this.editName;\n  this.gotoCrises();\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4790q65o5tb6ecvo2ukyp12vl\">在这种情况下，用户可以点击 heroes 链接，取消，按下浏览器后退按钮，或者不保存就离开。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2sy3nboyg3heei6dzpa5mw9f\">这个示例应用会弹出一个确认对话框，它会异步等待用户的响应，等用户给出一个明确的答复。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qtrzeuwtx1oyzqtomjcx2ctc\">你也可以用同步的方式等用户的答复，阻塞代码。但如果能用异步的方式等待用户的答复，应用就会响应性更好，还能同时做别的事。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d29d5lxyl3xgvy14voc87p02h\">生成一个 <code>Dialog</code> 服务，以处理用户的确认操作。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service dialog\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"660kj4d2pefqjymvymzuuinza\">为 <code>DialogService</code> 添加一个 <code>confirm()</code> 方法，以提醒用户确认。<code>window.confirm</code> 是一个阻塞型操作，它会显示一个模态对话框，并等待用户的交互。</p>\n<code-example header=\"src/app/dialog.service.ts\" path=\"router/src/app/dialog.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n/**\n * Async modal dialog service\n * DialogService makes this app easier to test by faking this service.\n * TODO: better modal implementation that doesn't use window.confirm\n */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class DialogService {\n  /**\n   * Ask user to confirm an action. `message` explains the action and choices.\n   * Returns observable resolving to `true`=confirm or `false`=cancel\n   */\n  confirm(message?: string): Observable&lt;boolean&gt; {\n    const confirmation = window.confirm(message || 'Is it OK?');\n\n    return of(confirmation);\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2rda2e7ud1375tqnl9zn83v0\">它返回<em>observable</em>，当用户最终决定了如何去做时，它就会被<em>解析</em> —— 或者决定放弃更改直接导航离开（<code>true</code>），或者保留未完成的修改，留在危机编辑器中（<code>false</code>）。</p>\n<p><a id=\"canDeactivate\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1thd2811wis73nu0msrcx18hw\">生成一个守卫（guard），以检查组件（任意组件均可）中是否存在 <code>canDeactivate()</code> 方法。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate guard can-deactivate\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co67iumy352zfw351bfiox1xi\">把下面的代码粘贴到守卫中。</p>\n<code-example header=\"src/app/can-deactivate.guard.ts\" path=\"router/src/app/can-deactivate.guard.ts\">\nimport { <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nexport interface CanComponentDeactivate {\n  canDeactivate?: () =&gt; Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean;\n}\n\nexport const canDeactivateGuard: <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>&lt;CanComponentDeactivate&gt; =\n    (component: CanComponentDeactivate) =&gt; component.canDeactivate ? component.canDeactivate() : true;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ivhbpulnifloonzpfye0pjm\">守卫不需要知道哪个组件有 <code>deactivate</code> 方法，它可以检测 <code>CrisisDetailComponent</code> 组件有没有 <code>canDeactivate()</code> 方法并调用它。守卫在不知道任何组件 <code>deactivate</code> 方法细节的情况下，就能让这个守卫重复使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ews35z88kh027t6a8r7ttpzf\">另外，你也可以为 <code>CrisisDetailComponent</code> 创建一个特定的 <code>canDeactivate</code> 守卫。在需要访问外部信息时，<code>canDeactivate()</code> 方法为你提供了组件、<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 和 <code><a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a></code> 的当前实例。如果只想为这个组件使用该守卫，并且需要获取该组件属性或确认路由器是否允许从该组件导航出去时，这会非常有用。</p>\n<code-example header=\"src/app/can-deactivate.guard.ts (component-specific)\" path=\"router/src/app/can-deactivate.guard.1.ts\">\nimport { Observable } from 'rxjs';\nimport { <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>,\n         <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n         <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> } from '@angular/router';\n\nimport { CrisisDetailComponent } from './crisis-center/crisis-detail/crisis-detail.component';\n\nexport const canDeactivateGuard: <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>&lt;CrisisDetailComponent&gt;  = (\n    component: CrisisDetailComponent,\n    route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>\n  ): Observable&lt;boolean&gt; | boolean =&gt; {\n    // Get the Crisis Center ID\n    console.log(route.paramMap.get('id'));\n\n    // Get the current URL\n    console.log(state.url);\n\n    // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n    if (!component.crisis || component.crisis.name === component.editName) {\n      return true;\n    }\n    // Otherwise ask the user with the dialog service and return its\n    // observable which resolves to true or false when the user decides\n    return component.dialogService.confirm('Discard changes?');\n  };\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9p491kjc0fbkc5qqo58n7xt2z\">看看 <code>CrisisDetailComponent</code> 组件，它已经实现了对未保存的更改进行确认的工作流。</p>\n<code-example header=\"src/app/crisis-center/crisis-detail/crisis-detail.component.ts (excerpt)\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\" region=\"canDeactivate\">\ncanDeactivate(): Observable&lt;boolean&gt; | boolean {\n  // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n  if (!this.crisis || this.crisis.name === this.editName) {\n    return true;\n  }\n  // Otherwise ask the user with the dialog service and return its\n  // observable which resolves to true or false when the user decides\n  return this.dialogService.confirm('Discard changes?');\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2k6phecjwjkz341y7ad8uxoqm\">注意，<code>canDeactivate()</code> 方法可以同步返回;如果没有危机，或者没有待处理的更改，它会立即返回 <code>true</code>。但它也能返回一个 <code>Promise</code> 或一个 <code>Observable</code>，路由器也会等待它解析为真值（导航）或伪造（停留在当前路由上）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38zan7dn660rw7w2y36d78uw8\">往 <code>crisis-center.routing.module.ts</code> 的危机详情路由中用 <code>canDeactivate</code> 数组添加一个 <code>Guard</code>（守卫）。</p>\n<code-example header=\"src/app/crisis-center/crisis-center-routing.module.ts (can deactivate guard)\" path=\"router/src/app/crisis-center/crisis-center-routing.module.3.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent } from './crisis-detail/crisis-detail.component';\n\nimport { canDeactivateGuard } from '../can-deactivate.guard';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [canDeactivateGuard]\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewf7rxhbqxg9r4wkzmj6t21ve\">现在，你已经给了用户一个能保护未保存更改的安全守卫。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0swougx6mvva6wecq9wtffdz\"><a id=\"Resolve\"></a>\n<a id=\"resolve-guard\"></a></p>\n<h3 id=\"resolve-pre-fetching-component-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5z3t14a11c72tgj5qq6ahlza1\"><em>Resolve</em>: 预先获取组件数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#resolve-pre-fetching-component-data\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy9f52dx8hkr92fm1u3dgrpez\">在 <code>Hero Detail</code> 和 <code>Crisis Detail</code> 中，它们等待路由读取完对应的英雄和危机。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gh73bnw72ez0qc41u73ynn83\">如果你在使用真实 api，很有可能数据返回有延迟，导致无法即时显示。在这种情况下，直到数据到达前，显示一个空的组件不是最好的用户体验。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wv1w07y3z1p91pf81g8sdqa4\">最好使用解析器预先从服务器上获取完数据，这样在路由激活的那一刻数据就准备好了。还要在路由到此组件之前处理好错误。但当某个 <code>id</code> 无法对应到一个危机详情时，就没办法处理它。这时最好把用户带回到“危机列表”中，那里显示了所有有效的“危机”。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kpgyau9w49oz4bckdyxkj219\">总之，你希望的是只有当所有必要数据都已经拿到之后，才渲染这个路由组件。</p>\n<p><a id=\"fetch-before-navigating\"></a></p>\n<h4 id=\"fetch-data-before-navigating\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezj19bd9srevtaigkd461zet6\">导航前预先加载路由信息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#fetch-data-before-navigating\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejn0vltdsoc31pi40ru6zg9kl\">目前，<code>CrisisDetailComponent</code> 会接收选中的危机。如果该危机没有找到，路由器就会导航回危机列表视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71fc2ql3qbtc7jdy9iyjtmlbr\">如果能在该路由将要激活时提前处理了这个问题，那么用户体验会更好。<code>crisisDetailResolver</code> 服务可以接收一个 <code>Crisis</code>，而如果这个 <code>Crisis</code> 不存在，就会在激活该路由并创建 <code>CrisisDetailComponent</code> 之前先行离开。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8s6x66jpfo6l46kevpq9tacxu\">在 <code>Crisis Center</code> 特性区域中创建一个 <code>crisis-detail-resolver.ts</code> 文件。此文件将包含 <code>crisisDetailResolver</code> 函数。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate resolver crisis-center/crisis-detail-resolver\n\n</code-example>\n<code-example header=\"src/app/crisis-center/crisis-detail-resolver.ts\" path=\"router/src/app/crisis-center/crisis-detail-resolver.1.ts\">\n\nexport function crisisDetailResolver() {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7n6bippzivw99qvmh2bwll386\">把 <code>CrisisDetailComponent.ngOnInit()</code> 中与危机检索有关的逻辑移到 <code>crisisDetailResolver</code> 中。导入 <code>Crisis</code> 模型、<code>CrisisService</code> 和 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 以便让你可以在找不到指定的危机时导航到别处。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9un8ylh002nkwlriphyugu2hx\">为了更明确一点，可以实现一个带有 <code>Crisis</code> 类型的 <code><a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a></code> 接口。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"78juz4uc3yqefr4xi7bzfb0m3\">注入 <code>CrisisService</code> 和 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>。该方法可以返回一个 <code>Promise</code>、一个 <code>Observable</code> 来支持异步方式，或者直接返回一个值来支持同步方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"126grddtoyp4ozr6hb9qelmli\"><code>CrisisService.getCrisis()</code> 方法返回一个可观察对象，以防止在数据获取完之前加载本路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c16xthz92qkr69yh1dh9crm6j\">如果它没有返回有效的 <code>Crisis</code>，就会返回一个 <code>Observable</code>，以取消以前到 <code>CrisisDetailComponent</code> 的在途导航，并把用户导航回 <code>CrisisListComponent</code>。修改后的 <code>resolver</code> 函数是这样的：</p>\n<code-example header=\"src/app/crisis-center/crisis-detail-resolver.ts\" path=\"router/src/app/crisis-center/crisis-detail-resolver.ts\">\nimport {inject} from '@angular/core';\nimport {<a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>} from '@angular/router';\nimport {EMPTY, of} from 'rxjs';\nimport {mergeMap} from 'rxjs/operators';\n\nimport {Crisis} from './crisis';\nimport {CrisisService} from './crisis.service';\n\nexport const crisisDetailResolver: <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>&lt;Crisis&gt; = (route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>) =&gt; {\n  const router = inject(<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>);\n  const cs = inject(CrisisService);\n  const id = route.paramMap.get('id')!;\n\n  return cs.getCrisis(id).pipe(mergeMap(crisis =&gt; {\n    if (crisis) {\n      return of(crisis);\n    } else {  // id not found\n      router.navigate(['/crisis-center']);\n      return EMPTY;\n    }\n  }));\n};\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byaamu66zdvn27x8qwptz756l\">把这个解析器（resolver）导入到 <code>crisis-center-routing.module.ts</code> 中，并往 <code>CrisisDetailComponent</code> 的路由配置中添加一个 <code>resolve</code> 对象。</p>\n<code-example header=\"src/app/crisis-center/crisis-center-routing.module.ts (resolver)\" path=\"router/src/app/crisis-center/crisis-center-routing.module.4.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent } from './crisis-detail/crisis-detail.component';\n\nimport { canDeactivateGuard } from '../can-deactivate.guard';\nimport { crisisDetailResolver } from './crisis-detail-resolver';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [canDeactivateGuard],\n            resolve: {\n              crisis: crisisDetailResolver\n            }\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75hlrthalunidss8u9tq5jfk\"><code>CrisisDetailComponent</code> 不应该再去获取这个危机的详情。你只要重新配置路由，就可以修改从哪里获取危机的详情。把 <code>CrisisDetailComponent</code> 改成从 <code>ActivatedRoute.data.crisis</code> 属性中获取危机详情，这正是你重新配置路由的恰当时机。</p>\n<code-example header=\"src/app/crisis-center/crisis-detail/crisis-detail.component.ts (ngOnInit v2)\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\" region=\"ngOnInit\">\nngOnInit() {\n  this.route.data\n    .subscribe(data =&gt; {\n      const crisis: Crisis = data['crisis'];\n      this.editName = crisis.name;\n      this.crisis = crisis;\n    });\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4exvvhsjzcbjd44mur9pfu9wp\">回顾以下三个重要点：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"118xomlpj0dkxy4wzmc12lnvs\">路由器的这个 <code><a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a></code> 接口是可选的。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dr88qkfej540hyjjqigrpnn5y\">路由器会在用户可以导航的任何情况下调用该解析器，这样你就不用针对每个用例都编写代码了。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eznugnbwhhpd6crmlc19p7dhx\">在任何一个解析器中返回空的 <code>Observable</code> 就会取消导航。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96orqunuy0n73opciu749ydin\">与里程碑相关的危机中心代码如下。</p>\n<code-tabs>\n    <code-pane header=\"app.component.html\" path=\"router/src/app/app.component.html\">\n&lt;div class=\"wrapper\"&gt;\n  &lt;h1 class=\"title\"&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/superheroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/admin\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Admin&lt;/a&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/login\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Login&lt;/a&gt;\n    &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\"&gt;Contact&lt;/a&gt;\n  &lt;/nav&gt;\n  &lt;div [@routeAnimation]=\"getRouteAnimationData()\"&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  &lt;/div&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"crisis-center-home.component.html\" path=\"router/src/app/crisis-center/crisis-center-home/crisis-center-home.component.html\">\n&lt;h3&gt;Welcome to the Crisis Center&lt;/h3&gt;\n\n\n</code-pane>\n    <code-pane header=\"crisis-center.component.html\" path=\"router/src/app/crisis-center/crisis-center/crisis-center.component.html\">\n&lt;h2&gt;Crisis Center&lt;/h2&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n\n</code-pane>\n    <code-pane header=\"crisis-center-routing.module.ts\" path=\"router/src/app/crisis-center/crisis-center-routing.module.4.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent } from './crisis-detail/crisis-detail.component';\n\nimport { canDeactivateGuard } from '../can-deactivate.guard';\nimport { crisisDetailResolver } from './crisis-detail-resolver';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [canDeactivateGuard],\n            resolve: {\n              crisis: crisisDetailResolver\n            }\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-pane>\n    <code-pane header=\"crisis-list.component.html\" path=\"router/src/app/crisis-center/crisis-list/crisis-list.component.html\">\n&lt;ul class=\"crises\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let crisis of crises$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>\" [class.selected]=\"crisis.id === selectedId\"&gt;\n    &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[crisis.id]\"&gt;\n      &lt;span class=\"badge\"&gt;{{ crisis.id }}&lt;/span&gt;{{ crisis.name }}\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n\n</code-pane>\n    <code-pane header=\"crisis-list.component.ts\" path=\"router/src/app/crisis-center/crisis-list/crisis-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { CrisisService } from '../crisis.service';\nimport { Crisis } from '../crisis';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-crisis-list',\n  templateUrl: './crisis-list.component.html',\n  styleUrls: ['./crisis-list.component.css']\n})\nexport class CrisisListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  crises$?: Observable&lt;Crisis[]&gt;;\n  selectedId = 0;\n\n  constructor(\n    private service: CrisisService,\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>\n  ) {}\n\n  ngOnInit() {\n    this.crises$ = this.route.firstChild?.paramMap.pipe(\n      switchMap(params =&gt; {\n        this.selectedId = parseInt(params.get('id')!, 10);\n        return this.service.getCrises();\n      })\n    );\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"crisis-detail.component.html\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"crisis\"&gt;\n  &lt;h3&gt;{{ editName }}&lt;/h3&gt;\n  &lt;p&gt;Id: {{ crisis.id }}&lt;/p&gt;\n  &lt;label for=\"crisis-name\"&gt;Crisis name: &lt;/label&gt;\n  &lt;input type=\"text\" id=\"crisis-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"editName\" placeholder=\"name\"/&gt;\n  &lt;div&gt;\n    &lt;button type=\"button\" (click)=\"save()\"&gt;Save&lt;/button&gt;\n    &lt;button type=\"button\" (click)=\"cancel()\"&gt;Cancel&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"crisis-detail.component.ts\" path=\"router/src/app/crisis-center/crisis-detail/crisis-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { Crisis } from '../crisis';\nimport { DialogService } from '../../dialog.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-crisis-detail',\n  templateUrl: './crisis-detail.component.html',\n  styleUrls: ['./crisis-detail.component.css']\n})\nexport class CrisisDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  crisis!: Crisis;\n  editName = '';\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n    public dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.route.data\n      .subscribe(data =&gt; {\n        const crisis: Crisis = data['crisis'];\n        this.editName = crisis.name;\n        this.crisis = crisis;\n      });\n  }\n\n  cancel() {\n    this.gotoCrises();\n  }\n\n  save() {\n    this.crisis.name = this.editName;\n    this.gotoCrises();\n  }\n\n  canDeactivate(): Observable&lt;boolean&gt; | boolean {\n    // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n    if (!this.crisis || this.crisis.name === this.editName) {\n      return true;\n    }\n    // Otherwise ask the user with the dialog service and return its\n    // observable which resolves to true or false when the user decides\n    return this.dialogService.confirm('Discard changes?');\n  }\n\n  gotoCrises() {\n    const crisisId = this.crisis ? this.crisis.id : null;\n    // Pass along the crisis id if available\n    // so that the CrisisListComponent can select that crisis.\n    // Add a totally useless `foo` parameter for kicks.\n    // Relative navigation back to the crises\n    this.router.navigate(['../', { id: crisisId, foo: 'foo' }], { relativeTo: this.route });\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"crisis-detail-resolver.ts\" path=\"router/src/app/crisis-center/crisis-detail-resolver.ts\">\nimport {inject} from '@angular/core';\nimport {<a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>, <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>} from '@angular/router';\nimport {EMPTY, of} from 'rxjs';\nimport {mergeMap} from 'rxjs/operators';\n\nimport {Crisis} from './crisis';\nimport {CrisisService} from './crisis.service';\n\nexport const crisisDetailResolver: <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>&lt;Crisis&gt; = (route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>) =&gt; {\n  const router = inject(<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>);\n  const cs = inject(CrisisService);\n  const id = route.paramMap.get('id')!;\n\n  return cs.getCrisis(id).pipe(mergeMap(crisis =&gt; {\n    if (crisis) {\n      return of(crisis);\n    } else {  // id not found\n      router.navigate(['/crisis-center']);\n      return EMPTY;\n    }\n  }));\n};\n\n\n</code-pane>\n    <code-pane header=\"crisis.service.ts\" path=\"router/src/app/crisis-center/crisis.service.ts\">\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { MessageService } from '../message.service';\nimport { Crisis } from './crisis';\nimport { CRISES } from './mock-crises';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class CrisisService {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> nextCrisisId = 100;\n  private crises$: BehaviorSubject&lt;Crisis[]&gt; = new BehaviorSubject&lt;Crisis[]&gt;(CRISES);\n\n  constructor(private messageService: MessageService) { }\n\n  getCrises() { return this.crises$; }\n\n  getCrisis(id: number | string) {\n    return this.getCrises().pipe(\n      map(crises =&gt; crises.find(crisis =&gt; crisis.id === +id)!)\n    );\n  }\n\n}\n\n\n</code-pane>\n    <code-pane header=\"dialog.service.ts\" path=\"router/src/app/dialog.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n/**\n * Async modal dialog service\n * DialogService makes this app easier to test by faking this service.\n * TODO: better modal implementation that doesn't use window.confirm\n */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class DialogService {\n  /**\n   * Ask user to confirm an action. `message` explains the action and choices.\n   * Returns observable resolving to `true`=confirm or `false`=cancel\n   */\n  confirm(message?: string): Observable&lt;boolean&gt; {\n    const confirmation = window.confirm(message || 'Is it OK?');\n\n    return of(confirmation);\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"985nsrjuwnvgei3slut9pbq10\">路由守卫</p>\n<code-tabs>\n    <code-pane header=\"auth.guard.ts\" path=\"router/src/app/auth/auth.guard.3.ts\">\nimport { inject } from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\nimport { AuthService } from './auth.service';\n\nexport const authGuard = () =&gt; {\n  const authService = inject(AuthService);\n  const router = inject(<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>);\n\n  if (authService.isLoggedIn) {\n    return true;\n  }\n\n  // Redirect to the login page\n  return router.parseUrl('/login');\n};\n\n\n</code-pane>\n    <code-pane header=\"can-deactivate.guard.ts\" path=\"router/src/app/can-deactivate.guard.ts\">\nimport { <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nexport interface CanComponentDeactivate {\n  canDeactivate?: () =&gt; Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean;\n}\n\nexport const canDeactivateGuard: <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>&lt;CanComponentDeactivate&gt; =\n    (component: CanComponentDeactivate) =&gt; component.canDeactivate ? component.canDeactivate() : true;\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2k5aanmdm4d34ghm8r0fyph4a\"><a id=\"query-parameters\"></a>\n<a id=\"fragment\"></a></p>\n<h3 id=\"query-parameters-and-fragments\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5ksju22p7nx3liolf5l34k7e\">查询参数及片段<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#query-parameters-and-fragments\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1le66e7t81nr16uysq0x7ymja\">在<a href=\"guide/router-tutorial-toh#optional-route-parameters\">路由参数</a>部分，你只需要处理该路由的专属参数。但是，你也可以用查询参数来获取对所有路由都可用的可选参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aduhag5cf13auiok4529ynkn9\"><a href=\"https://en.wikipedia.org/wiki/Fragment_identifier\">片段</a>可以引用页面中带有特定 <code>id</code> 属性的元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2k881qhnxkob9x1k37o6b5eyp\">修改 <code>authGuard</code> 以提供 <code>session_id</code> 查询参数，在导航到其它路由后，它还会存在。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crjbrz5ca2xhceh2su2qekvyf\">再添加一个锚点（<code>A</code>）元素，来让你能跳转到页面中的正确位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3kpyovjtck6795nlvhi40dsf0\">为 <code>router.navigate()</code> 方法添加一个 <code><a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a></code> 对象，用来导航到 <code>/login</code> 路由。</p>\n<code-example header=\"src/app/auth/auth.guard.ts (v3)\" path=\"router/src/app/auth/auth.guard.4.ts\">\nimport { inject } from '@angular/core';\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a> } from '@angular/router';\nimport { AuthService } from './auth.service';\n\nexport const authGuard = () =&gt; {\n  const authService = inject(AuthService);\n  const router = inject(<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>);\n\n  if (authService.isLoggedIn) {\n    return true;\n  }\n\n  // Create a dummy session id\n  const sessionId = 123456789;\n\n  // Set our navigation extras object\n  // that contains our global <a href=\"api/animations/query\" class=\"code-anchor\">query</a> params and fragment\n  const navigationExtras: <a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a> = {\n    queryParams: { session_id: sessionId },\n    fragment: 'anchor'\n  };\n\n  // Redirect to the login page with extras\n  return router.createUrlTree(['/login'], navigationExtras);\n};\n\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctz85pdrhkx3pfl4g68lucrsz\">还可以在导航之间<strong>保留</strong>查询参数和片段，而无需再次在导航中提供。在 <code>LoginComponent</code> 中的 <code>router.navigate()</code> 方法中，添加一个对象作为第二个参数，该<strong>对象</strong>提供了 <code>queryParamsHandling</code> 和 <code>preserveFragment</code>，用于传递当前的查询参数和片段到下一个路由。</p>\n<code-example header=\"src/app/auth/login/login.component.ts (preserve)\" path=\"router/src/app/auth/login/login.component.ts\" region=\"preserve\">\n// Set our navigation extras object\n// that passes on our global <a href=\"api/animations/query\" class=\"code-anchor\">query</a> params and fragment\nconst navigationExtras: <a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a> = {\n  queryParamsHandling: 'preserve',\n  preserveFragment: true\n};\n\n// Redirect the user\nthis.router.navigate([redirectUrl], navigationExtras);\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96rb0g3cahqsvt9g71j9crxw4\"><code>queryParamsHandling</code> 特性还提供了 <code>merge</code> 选项，它将会在导航时保留当前的查询参数，并与其它查询参数合并。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2s4lup3lr5weawusfi5eve7x8\">要在登录后导航到 Admin Dashboard 路由，请更新 <code>admin-dashboard.component.ts</code> 以处理这些查询参数和片段。</p>\n<code-example header=\"src/app/admin/admin-dashboard/admin-dashboard.component.ts (v2)\" path=\"router/src/app/admin/admin-dashboard/admin-dashboard.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.css']\n})\nexport class AdminDashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  sessionId!: Observable&lt;string&gt;;\n  token!: Observable&lt;string&gt;;\n\n  constructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n\n  ngOnInit() {\n    // Capture the session ID if available\n    this.sessionId = this.route\n      .queryParamMap\n      .pipe(map(params =&gt; params.get('session_id') || 'None'));\n\n    // Capture the fragment if available\n    this.token = this.route\n      .fragment\n      .pipe(map(fragment =&gt; fragment || 'None'));\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"de1bjdpwctvl2qutepq7y5obs\">查询参数和片段可通过 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 服务来使用。和路由参数类似，全局查询参数和片段也是 <code>Observable</code> 对象。在修改过的英雄管理组件中，你将借助 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 直接把 <code>Observable</code> 传给模板。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"284cs0p4jyd3muo780thuvdgm\">按照下列步骤试验下：点击 Admin 按钮，它会带着你提供的 <code>queryParamMap</code> 和 <code>fragment</code> 跳转到登录页。点击 Login 按钮，你就会被重定向到 <code>Admin Dashboard</code> 页。注意，它仍然带着上一步提供的 <code>queryParamMap</code> 和 <code>fragment</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ohbwrmly3w23q01318u5dkjs\">你可以用这些持久化信息来携带需要为每个页面都提供的信息，如认证令牌或会话的 ID 等。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ettb3gwtfg1rfxs7uci6mif97\">“查询参数”和“片段”也可以分别用 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 中的 <strong>queryParamsHandling</strong> 和 <strong>preserveFragment</strong> 保存。</p>\n</div>\n<p><a id=\"asynchronous-routing\"></a></p>\n<h2 id=\"milestone-6-asynchronous-routing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2chgfkvq14hs4d59rqxh6mafc\">里程碑 6：异步路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#milestone-6-asynchronous-routing\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ke63v3xh2h6vdszohufkac6j\">完成上面的里程碑后，应用程序很自然地长大了。在某一个时间点，你将达到一个顶点，应用将会需要过多的时间来加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bry2t2a930dpz4iklk5w52rf4\">为了解决这个问题，请使用异步路由，它会根据请求来惰性加载某些特性模块。惰性加载有很多好处。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ac9j0xk88em98fpa93rgssxxh\">你可以只在用户请求时才加载某些特性区。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mc7z5r2g2y8s0q9cwxz1srq8\">对于那些只访问应用程序某些区域的用户，这样能加快加载速度。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9v5b376yxkn7gpytlz3z3j4ze\">你可以持续扩充惰性加载特性区的功能，而不用增加初始加载的包体积。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97mg8133dzb8jtdv9x2sv2qsv\">你已经完成了一部分。通过把应用组织成一些模块：<code>AppModule</code>、<code>HeroesModule</code>、<code>AdminModule</code> 和 <code>CrisisCenterModule</code>，你已经有了可用于实现惰性加载的候选者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7rdosxwf8g89ni08woqpahkjt\">有些模块（比如 <code>AppModule</code>）必须在启动时加载，但其它的都可以而且应该惰性加载。比如 <code>AdminModule</code> 就只有少数已认证的用户才需要它，所以你应该只有在正确的人请求它时才加载。</p>\n<p><a id=\"lazy-loading-route-config\"></a></p>\n<h3 id=\"lazy-loading-route-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cx3na7abbjxz4srf5shzgxks\">惰性加载路由配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#lazy-loading-route-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29a99h7fs38l7xh26bgdrgle\">把 <code>admin-routing.module.ts</code> 中的 <code>admin</code> 路径从 <code>'admin'</code> 改为空路径 <code>''</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cccaacgzwxkf6aukco4ks6jdn\">可以用<em>空路径</em>路由来对路由进行分组，而不用往 URL 中添加额外的路径片段。用户仍旧访问 <code>/admin</code>，并且 <code>AdminComponent</code> 仍然作为用来包含子路由的路由组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2w4s30m4fbxzoej5w7tavgc1x\">打开 <code>AppRoutingModule</code>，并把一个新的 <code>admin</code> 路由添加到它的 <code>appRoutes</code> 数组中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c488q7blsury70pjlwk0taszz\">给它一个 <code>loadChildren</code> 属性（替换掉 <code>children</code> 属性）。<code>loadChildren</code> 属性接收一个函数，该函数使用浏览器内置的动态导入语法 <code>import('...')</code> 来惰性加载代码，并返回一个承诺（Promise）。其路径是 <code>AdminModule</code> 的位置（相对于应用的根目录）。当代码请求并加载完毕后，这个 <code>Promise</code> 就会解析成一个包含 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的对象，也就是 <code>AdminModule</code>。</p>\n<code-example header=\"app-routing.module.ts (load children)\" path=\"router/src/app/app-routing.module.5.ts\" region=\"admin-1\">\n{\n  path: 'admin',\n  loadChildren: () =&gt; import('./admin/admin.module').then(m =&gt; m.AdminModule),\n},\n\n</code-example>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7b2og6au8ctmn486bhipvxuko\"><strong>注意</strong>：<br>\n当使用绝对路径时，<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的文件位置必须以 <code>src/app</code> 开头，以便正确解析。对于自定义的 <a href=\"https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping\">使用绝对路径的路径映射表</a>，你必须在项目的 <code>tsconfig.json</code> 中必须配置好 <code>baseUrl</code> 和 <code>paths</code> 属性。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"pl730zma7hn6gc5pc0ao3n8z\">当路由器导航到这个路由时，它会用 <code>loadChildren</code> 字符串来动态加载 <code>AdminModule</code>，然后把 <code>AdminModule</code> 添加到当前的路由配置中，最后，它把所请求的路由加载到目标 <code>admin</code> 组件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vypqi2fixv70c08h1hnutayc\">惰性加载和重新配置工作只会发生一次，也就是在该路由首次被请求时。在后续的请求中，该模块和路由都是立即可用的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djpvi4gvtfdymj9gws23dt24w\">最后一步是把管理特性区从主应用中完全分离开。根模块 <code>AppModule</code> 既不能加载也不能引用 <code>AdminModule</code> 及其文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gg1ptgsujyrto7tajw0sfz74\">在 <code>app.module.ts</code> 中，从顶部移除 <code>AdminModule</code> 的导入语句，并且从 NgModule 的 <code>imports</code> 数组中移除 <code>AdminModule</code>。</p>\n<p><a id=\"can-match-guard\"></a></p>\n<h3 id=\"canmatch-guarding-unauthorized-access-of-feature-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jp91zzlqv3d5lri45tocqc9f\"><code>canMatch</code>：保护对特性模块的未授权访问<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#canmatch-guarding-unauthorized-access-of-feature-modules\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9a63v2s614qmn0zdhmvsh27w\">你已经使用 <code>canActivate</code> 保护 <code>AdminModule</code> 了，它会阻止未授权用户访问管理特性区。如果用户未登录，它就会跳转到登录页。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ea3g08gnn0hocfgzf3xaqsfo\">但是路由器仍然会加载 <code>AdminModule</code> —— 即使用户无法访问它的任何一个组件。理想的方式是，只有在用户已登录的情况下你才加载 <code>AdminModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewmv9caxthx20ifkbwhisu9j4\"><code>canMatch</code> 守卫控制着 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 是否会尝试匹配 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>。这能让你拥有多个 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 配置，这些配置共享相同的 <code>path</code> 但根据不同的条件进行匹配。这种方法能让 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 转而匹配通配符 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ai4yn2jn7w51k5nj2ig5d5ug6\">现有的 <code>authGuard</code> 包含支持 <code>canMatch</code> 守卫的逻辑。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7klcrug9gkzobbargndplo10g\">最后，把 <code>authGuard</code> 添加到 <code>admin</code> 路由的 <code>canMatch</code> 数组中。完整的 <code>admin</code> 路由是这样的：</p>\n<code-example header=\"app-routing.module.ts (lazy admin route)\" path=\"router/src/app/app-routing.module.5.ts\" region=\"admin\">\n{\n  path: 'admin',\n  loadChildren: () =&gt; import('./admin/admin.module').then(m =&gt; m.AdminModule),\n  canMatch: [authGuard]\n},\n\n</code-example>\n<p><a id=\"preloading\"></a></p>\n<h3 id=\"preloading-background-loading-of-feature-areas\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b6y82wbfbl6h09q2ngcdcsbh\">预加载：特性区的后台加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#preloading-background-loading-of-feature-areas\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2k92ts3n96l68ppcfhvrt65df\">除了按需加载模块外，还可以通过预加载方式异步加载模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rayiblmp0hbwxxg2lz9somx8\">当应用启动时，<code>AppModule</code> 被急性加载，这意味着它会立即加载。而 <code>AdminModule</code> 只在用户点击链接时加载，这叫做惰性加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2g6v0i7yxq7jpwuik5p5ksvd\">预加载允许你在后台加载模块，以便当用户激活某个特定的路由时，就可以渲染这些数据了。考虑一下危机中心。它不是用户看到的第一个视图。默认情况下，英雄列表才是第一个视图。为了获得最小的初始有效负载和最快的启动时间，你应该急性加载 <code>AppModule</code> 和 <code>HeroesModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xac9pp4yyiih8gm9zjv0qg10\">你可以惰性加载危机中心。但是，你几乎可以肯定用户会在启动应用之后的几分钟内访问危机中心。理想情况下，应用启动时应该只加载 <code>AppModule</code> 和 <code>HeroesModule</code>，然后几乎立即开始后台加载 <code>CrisisCenterModule</code>。在用户浏览到危机中心之前，该模块应该已经加载完毕，可供访问了。</p>\n<p><a id=\"how-preloading\"></a></p>\n<h4 id=\"how-preloading-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tfombv9nj5oay6weyrye3fnw\">预加载的工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#how-preloading-works\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cinqcsaccsszmva9bj1jtzp2n\">在每次成功的导航后，路由器会在自己的配置中查找尚未加载并且可以预加载的模块。是否加载某个模块，以及要加载哪些模块，取决于<em>预加载策略</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5j07yrie3igo9e1arqkt5suov\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 提供了两种预加载策略：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xboqaqdx0082ltr7bynr4y0m\">策略</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hljrk69anb40ln02lfw9lqqz\">无预加载</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"349rwh4pt5q47og9srn6x6mzx\">默认选项。惰性加载的特性区域仍然按需加载。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49xqnvehgda1bjiqtnuitjwyb\">预加载</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jp4mdit42h6qimwbnh528xdv\">所有惰性加载的特性区域都会预加载。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bi4s20fs8axhrms2j30z2isge\">路由器或者完全不预加载或者预加载每个惰性加载模块。\n路由器还支持<a href=\"guide/router-tutorial-toh#custom-preloading\">自定义预加载策略</a>，以便完全控制要预加载哪些模块以及何时加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agym8gcvjy237goy6zwrypeyt\">本节将指导你把 <code>CrisisCenterModule</code> 改成惰性加载的，并使用 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 策略来预加载所有惰性加载模块。</p>\n<p><a id=\"lazy-load-crisis-center\"></a></p>\n<h4 id=\"lazy-load-the-crisis-center\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dy03znl0sn3pr6rmnpil9odpr\">惰性加载危机中心<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#lazy-load-the-crisis-center\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epx2jypyckl9welclq456p0ij\">修改路由配置，来惰性加载 <code>CrisisCenterModule</code>。修改的步骤和配置惰性加载 <code>AdminModule</code> 时一样。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7x65qvatslc3dk89tneqmq4tq\">把 <code>CrisisCenterRoutingModule</code> 中的路径从 <code>crisis-center</code> 改为空字符串。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11b75alqia595mzgy3natpgi1\">往 <code>AppRoutingModule</code> 中添加一个 <code>crisis-center</code> 路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bqtn8huhqt6cwl46i2fn82lw\">设置 <code>loadChildren</code> 字符串来加载 <code>CrisisCenterModule</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5asv98et7tpl5dknd34sd3ce1\">从 <code>app.module.ts</code> 中移除所有对 <code>CrisisCenterModule</code> 的引用。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gjr63keq29yclriyzc7e1cp1\">下面是打开预加载之前的模块修改版：</p>\n<code-tabs>\n    <code-pane header=\"app.module.ts\" path=\"router/src/app/app.module.ts\" region=\"preload\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeroesModule } from './heroes/heroes.module';\nimport { AuthModule } from './auth/auth.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HeroesModule,\n    AuthModule,\n    AppRoutingModule,\n  ],\n  declarations: [\n    AppComponent,\n    ComposeMessageComponent,\n    PageNotFoundComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n\n</code-pane>\n    <code-pane header=\"app-routing.module.ts\" path=\"router/src/app/app-routing.module.6.ts\" region=\"preload-v1\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport {\n  <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>,\n} from '@angular/router';\n\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nimport { authGuard } from './auth/auth.guard';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'compose',\n    component: ComposeMessageComponent,\n    outlet: 'popup'\n  },\n  {\n    path: 'admin',\n    loadChildren: () =&gt; import('./admin/admin.module').then(m =&gt; m.AdminModule),\n    canMatch: [authGuard]\n  },\n  {\n    path: 'crisis-center',\n    loadChildren: () =&gt; import('./crisis-center/crisis-center.module').then(m =&gt; m.CrisisCenterModule)\n  },\n  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule {}\n\n\n</code-pane>\n    <code-pane header=\"crisis-center-routing.module.ts\" path=\"router/src/app/crisis-center/crisis-center-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { CrisisCenterHomeComponent } from './crisis-center-home/crisis-center-home.component';\nimport { CrisisListComponent } from './crisis-list/crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center/crisis-center.component';\nimport { CrisisDetailComponent } from './crisis-detail/crisis-detail.component';\n\nimport { canDeactivateGuard } from '../can-deactivate.guard';\nimport { crisisDetailResolver } from './crisis-detail-resolver';\n\nconst crisisCenterRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: '',\n        component: CrisisListComponent,\n        children: [\n          {\n            path: ':id',\n            component: CrisisDetailComponent,\n            canDeactivate: [canDeactivateGuard],\n            resolve: {\n              crisis: crisisDetailResolver\n            }\n          },\n          {\n            path: '',\n            component: CrisisCenterHomeComponent\n          }\n        ]\n      }\n    ]\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(crisisCenterRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class CrisisCenterRoutingModule { }\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewvm8hrcus3twdhaw198x2kst\">你可以现在尝试它，并确认在点击了“Crisis Center”按钮之后加载了 <code>CrisisCenterModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pu78tzldfon5o5cdwbdpuy6u\">要为所有惰性加载模块启用预加载功能，请从 Angular 的路由模块中导入 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a91prmgjutl30a1pm24bn3ew9\"><code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 方法的第二个参数接受一个附加配置选项对象。<code>preloadingStrategy</code> 就是其中之一。把 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 添加到 <code>forRoot()</code> 调用中：</p>\n<code-example header=\"src/app/app-routing.module.ts (preload all)\" path=\"router/src/app/app-routing.module.6.ts\" region=\"forRoot\">\nRouterModule.forRoot(\n  appRoutes,\n  {\n    enableTracing: true, // &lt;-- debugging purposes only\n    preloadingStrategy: <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>\n  }\n)\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4rqjm55dx1t8b68rdcwd09qxr\">这项配置会让 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 预加载器立即加载<em>所有</em>惰性加载路由（带 <code>loadChildren</code> 属性的路由）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83u85n3uqywr7i0174qkwfngd\">当访问 <code>http://localhost:4200</code> 时，<code>/heroes</code> 路由立即随之启动，并且路由器在加载了 <code>HeroesModule</code> 之后立即开始加载 <code>CrisisCenterModule</code>。</p>\n<p><a id=\"custom-preloading\"></a></p>\n<h3 id=\"custom-preloading-strategy\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewitf0quklazbdvkzbadl06xx\">自定义预加载策略<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#custom-preloading-strategy\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98v6gbmvhv1uotrc4w4idmcdb\">在很多场景下，预加载的每个惰性加载模块都能正常工作。但是，考虑到低带宽和用户指标等因素，可以为特定的特性模块使用自定义预加载策略。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwdcsohg7m1ry2x1nerke3r9l\">本节将指导你添加一个自定义策略，它只预加载 <code>data.preload</code> 标志为 <code>true</code> 路由。回想一下，你可以在路由的 <code>data</code> 属性中添加任何东西。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"980cn4z6fbeq507bsgg7joqhz\">在 <code>AppRoutingModule</code> 的 <code>crisis-center</code> 路由中设置 <code>data.preload</code> 标志。</p>\n<code-example header=\"src/app/app-routing.module.ts (route data preload)\" path=\"router/src/app/app-routing.module.ts\" region=\"preload-v2\">\n{\n  path: 'crisis-center',\n  loadChildren: () =&gt; import('./crisis-center/crisis-center.module').then(m =&gt; m.CrisisCenterModule),\n  data: { preload: true }\n},\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"doq6j92002cymfi90t4xxykkx\">生成一个新的 <code>SelectivePreloadingStrategy</code> 服务。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service selective-preloading-strategy\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drl2tctgaobsa1aa6kz2yuqxk\">使用下列内容替换 <code>selective-preloading-strategy.service.ts</code>：</p>\n<code-example header=\"src/app/selective-preloading-strategy.service.ts\" path=\"router/src/app/selective-preloading-strategy.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/router/PreloadingStrategy\" class=\"code-anchor\">PreloadingStrategy</a>, <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class SelectivePreloadingStrategyService implements <a href=\"api/router/PreloadingStrategy\" class=\"code-anchor\">PreloadingStrategy</a> {\n  preloadedModules: string[] = [];\n\n  preload(route: <a href=\"api/router/Route\" class=\"code-anchor\">Route</a>, load: () =&gt; Observable&lt;any&gt;): Observable&lt;any&gt; {\n    if (route.canMatch === undefined &amp;&amp; route.data?.['preload'] &amp;&amp; route.path != null) {\n      // add the route path to the preloaded module array\n      this.preloadedModules.push(route.path);\n\n      // log the route path to the console\n      console.log('Preloaded: ' + route.path);\n\n      return load();\n    } else {\n      return of(null);\n    }\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ac1u4guu2avqn1xkuxpb95id1\"><code>SelectivePreloadingStrategyService</code> 实现了 <code><a href=\"api/router/PreloadingStrategy\" class=\"code-anchor\">PreloadingStrategy</a></code>，它有一个方法 <code>preload()</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjzyg933lfhc5ip7rxc546vdp\">路由器会用两个参数来调用 <code>preload()</code> 方法：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evs1gftq1x2vz2qrf9kccn1ph\">要加载的路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1k808znfa2iswyjnujz4ncvwj\">一个加载器（loader）函数，它能异步加载带路由的模块。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24vyo4q630oirpr5aqvr99o77\"><code>preload</code> 的实现要返回一个 <code>Observable</code>。如果该路由应该预加载，它就会返回调用加载器函数所返回的 <code>Observable</code>。如果该路由<em>不</em>应该预加载，它就返回一个 <code>null</code> 值的 <code>Observable</code> 对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70jm59o9ketg00untcbvf6mnd\">在这个例子中，如果路由的 <code>data.preload</code> 标志是真值，则 <code>preload()</code> 方法会加载该路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cogunaiu4fa6mcvwqx5jwla7q\">它的副作用是 <code>SelectivePreloadingStrategyService</code> 会把所选路由的 <code>path</code> 记录在它的公共数组 <code>preloadedModules</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4h4rmbp01w8ndpn27bixzozse\">很快，你就会扩展 <code>AdminDashboardComponent</code> 来注入该服务，并且显示它的 <code>preloadedModules</code> 数组。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dbxor5x2vu0e4gn1vy69wxk89\">但是首先，要对 <code>AppRoutingModule</code> 做少量修改。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53aym10y12lq4nj6jwvup6y9q\">把 <code>SelectivePreloadingStrategyService</code> 导入到 <code>AppRoutingModule</code> 中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dtyptof682zwjwey81d0qfvg\">把 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 策略替换成对 <code>forRoot()</code> 的调用，并且传入这个 <code>SelectivePreloadingStrategyService</code>。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ara9aub48x8qyg3585d4pwn07\">现在，编辑 <code>AdminDashboardComponent</code> 以显示这些预加载路由的日志。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7795a846vbt5vah7enbr1hdj\">导入 <code>SelectivePreloadingStrategyService</code>（它是一个服务）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfxrvkjderw2dq1zxkwfy1e49\">把它注入到仪表盘的构造函数中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70lx7y467m8wu34y15vbq4lta\">修改模板来显示这个策略服务的 <code>preloadedModules</code> 数组。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ct6mo32w2t5y6q5zm6zbrsrqe\">现在文件如下：</p>\n<code-example header=\"src/app/admin/admin-dashboard/admin-dashboard.component.ts (preloaded modules)\" path=\"router/src/app/admin/admin-dashboard/admin-dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { SelectivePreloadingStrategyService } from '../../selective-preloading-strategy.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.css']\n})\nexport class AdminDashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  sessionId!: Observable&lt;string&gt;;\n  token!: Observable&lt;string&gt;;\n  modules: string[] = [];\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    preloadStrategy: SelectivePreloadingStrategyService\n  ) {\n    this.modules = preloadStrategy.preloadedModules;\n  }\n\n  ngOnInit() {\n    // Capture the session ID if available\n    this.sessionId = this.route\n      .queryParamMap\n      .pipe(map(params =&gt; params.get('session_id') || 'None'));\n\n    // Capture the fragment if available\n    this.token = this.route\n      .fragment\n      .pipe(map(fragment =&gt; fragment || 'None'));\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d89ldknc4wl2e9ymr9kbg217y\">一旦应用加载完了初始路由，<code>CrisisCenterModule</code> 也被预加载了。通过 <code>Admin</code> 特性区中的记录就可以验证它，“Preloaded Modules”中列出了 <code>crisis-center</code>。它也被记录到了浏览器的控制台。</p>\n<p><a id=\"redirect-advanced\"></a></p>\n<h3 id=\"migrating-urls-with-redirects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"809fkg2zs0ulv1pqbakjvh371\">使用重定向迁移 URL<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#migrating-urls-with-redirects\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jmbv7j9yrr6ez6awa7ajrrae\">你已经设置好了路由，并且用命令式和声明式的方式导航到了很多不同的路由。但是，任何应用的需求都会随着时间而改变。你把链接 <code>/heroes</code> 和 <code>hero/:id</code> 指向了 <code>HeroListComponent</code> 和 <code>HeroDetailComponent</code> 组件。如果有这样一个需求，要把链接 <code>heroes</code> 变成 <code>superheroes</code>，你可能仍然希望以前的 URL 能正常导航。但你也不想在应用中找到并修改每一个链接，这时候，重定向就可以省去这些琐碎的重构工作。</p>\n<p><a id=\"url-refactor\"></a></p>\n<h4 id=\"changing-heroes-to-superheroes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anhzkzcsna0galgl1xfo3nrd5\">把 <code>/heroes</code> 改为 <code>/superheroes</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#changing-heroes-to-superheroes\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42ohwc4fqqi47afmn1jzotskv\">本节将指导你将 <code>Hero</code> 路由迁移到新的 URL。在导航之前，<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 会检查路由配置中的重定向语句，以便将来按需触发重定向。要支持这种修改，你就要在 <code>heroes-routing.module</code> 文件中把老的路由重定向到新的路由。</p>\n<code-example header=\"src/app/heroes/heroes-routing.module.ts (heroes redirects)\" path=\"router/src/app/heroes/heroes-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { HeroListComponent } from './hero-list/hero-list.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nconst heroesRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes', redirectTo: '/superheroes' },\n  { path: 'hero/:id', redirectTo: '/superhero/:id' },\n  { path: 'superheroes',  component: HeroListComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'heroes' } },\n  { path: 'superhero/:id', component: HeroDetailComponent, data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'hero' } }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class HeroesRoutingModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lu5dbr0q9k88r7clgradcq29\">注意，这里有两种类型的重定向。第一种是不带参数的从 <code>/heroes</code> 重定向到 <code>/superheroes</code>。这是一种非常直观的重定向。第二种是从 <code>/hero/:id</code> 重定向到 <code>/superhero/:id</code>，它还要包含一个 <code>:id</code> 路由参数。路由器重定向时使用强大的模式匹配功能，这样，路由器就会检查 URL，并且把 <code>path</code> 中带的路由参数替换成相应的目标形式。以前，你导航到形如 <code>/hero/15</code> 的 URL 时，带了一个路由参数 <code>id</code>，它的值是 <code>15</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5315kyexbrspyca05zrq4myy7\">在重定向的时候，路由器还支持<a href=\"guide/router-tutorial-toh#query-parameters\">查询参数</a>和<a href=\"guide/router-tutorial-toh#fragment\">片段(fragment)</a>。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w7rzjbjs9197pzqxxb34yig0\">当使用绝对地址重定向时，路由器将会使用路由配置的 <code>redirectTo</code> 属性中规定的查询参数和片段。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bilx75hebd56ht13h7ty6p7by\">当使用相对地址重定向时，路由器将会使用源地址（跳转前的地址）中的查询参数和片段。</li>\n</ul>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1evrxq9tls57xujaovkz7y3cj\">目前，空路径被重定向到了 <code>/heroes</code>，它又被重定向到了 <code>/superheroes</code>。这样不行，因为 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 在每一层的路由配置中只会处理一次重定向。这样可以防止出现无限循环的重定向。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23z851rl49mq3m431wbiwkclq\">所以，你要在 <code>app-routing.module.ts</code> 中修改空路径路由，让它重定向到 <code>/superheroes</code>。</p>\n<code-example header=\"src/app/app-routing.module.ts (superheroes redirect)\" path=\"router/src/app/app-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { ComposeMessageComponent } from './compose-message/compose-message.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nimport { authGuard } from './auth/auth.guard';\nimport { SelectivePreloadingStrategyService } from './selective-preloading-strategy.service';\n\nconst appRoutes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'compose',\n    component: ComposeMessageComponent,\n    outlet: 'popup'\n  },\n  {\n    path: 'admin',\n    loadChildren: () =&gt; import('./admin/admin.module').then(m =&gt; m.AdminModule),\n    canMatch: [authGuard]\n  },\n  {\n    path: 'crisis-center',\n    loadChildren: () =&gt; import('./crisis-center/crisis-center.module').then(m =&gt; m.CrisisCenterModule),\n    data: { preload: true }\n  },\n  { path: '',   redirectTo: '/superheroes', pathMatch: 'full' },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      {\n        enableTracing: false, // &lt;-- debugging purposes only\n        preloadingStrategy: SelectivePreloadingStrategyService,\n      }\n    )\n  ],\n  exports: [\n    <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>\n  ]\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b01s2ob9qxdroqd3f2ab3n7pi\">由于 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 与路由配置无关，所以你要修改相关的路由链接，以便在新的路由激活时，它们也能保持激活状态。还要修改 <code>app.component.ts</code> 模板中的 <code>/heroes</code> 这个 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>。</p>\n<code-example header=\"src/app/app.component.html (superheroes active routerLink)\" path=\"router/src/app/app.component.html\">\n&lt;div class=\"wrapper\"&gt;\n  &lt;h1 class=\"title\"&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-center\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Crisis Center&lt;/a&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/superheroes\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Heroes&lt;/a&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/admin\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Admin&lt;/a&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/login\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Login&lt;/a&gt;\n    &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[{ outlets: { popup: ['compose'] } }]\"&gt;Contact&lt;/a&gt;\n  &lt;/nav&gt;\n  &lt;div [@routeAnimation]=\"getRouteAnimationData()\"&gt;\n    &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n  &lt;/div&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"popup\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"p7ihxkz5af7661uax8vxkvo1\">修改 <code>hero-detail.component.ts</code> 中的 <code>goToHeroes()</code> 方法，使用可选的路由参数导航回 <code>/superheroes</code>。</p>\n<code-example header=\"src/app/heroes/hero-detail/hero-detail.component.ts (goToHeroes)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.ts\" region=\"redirect\">\ngotoHeroes(hero: Hero) {\n  const heroId = hero ? hero.id : null;\n  // Pass along the hero id if available\n  // so that the HeroList component can select that hero.\n  // Include a junk 'foo' property for fun.\n  this.router.navigate(['/superheroes', {id: heroId, foo: 'foo'}]);\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ay8ii1tj4turwgw4jcaotxj55\">当这些重定向设置好之后，所有以前的路由都指向了它们的新目标，并且每个 URL 也仍然能正常工作。</p>\n<p><a id=\"inspect-config\"></a></p>\n<h3 id=\"inspect-the-routers-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"867yn80cr13al92k96y4p3t0m\">审查路由器配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#inspect-the-routers-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpex7yga71p6vhatbjzh813am\">要确定你的路由是否真的<a href=\"guide/router-tutorial-toh#routing-module-order\">按照正确的顺序</a>执行的，你可以审查路由器的配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jbymj6607famnwh4dr6wigzv\">可以通过注入路由器并在控制台中记录其 <code>config</code> 属性来实现。比如，把 <code>AppModule</code> 修改为这样，并在浏览器的控制台窗口中查看最终的路由配置。</p>\n<code-example header=\"src/app/app.module.ts (inspect the router config)\" path=\"router/src/app/app.module.7.ts\" region=\"inspect-config\">\nexport class AppModule {\n  // Diagnostic only: inspect router configuration\n  constructor(router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n    // Use a custom replacer to display function names in the route configs\n    const replacer = (key, value) =&gt; (typeof value === 'function') ? value.name : value;\n\n    console.log('<a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>: ', JSON.stringify(router.config, replacer, 2));\n  }\n}\n\n</code-example>\n<p><a id=\"final-app\"></a></p>\n<h2 id=\"final-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2iwytsyj4pyeb9nfrabnz533m\">最终的应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial-toh#final-application\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvfwexc5d8e5zaom06undexe1\">对这个已完成的路由器应用，参见 <live-example name=\"router\"></live-example>的最终代码。</p>\n<p><a id=\"link-parameters-array\"></a></p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n\n\n\n<!-- links to this doc:\n - api/router/GuardResult\n - api/router/RouterOutlet\n - guide/deployment\n - guide/glossary\n - guide/lazy-loading-ngmodules\n - guide/router\n - guide/router-reference\n - guide/routing-overview\n - guide/testing-components-scenarios\n-->\n<!-- links from this doc:\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/animation\n - api/animations/query\n - api/animations/state\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/DefaultValueAccessor\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/platform-browser/animations/async\n - api/router/ActivatedRoute\n - api/router/ActivatedRoute#paramMap\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivateChildFn\n - api/router/CanActivateFn\n - api/router/CanDeactivateFn\n - api/router/CanMatchFn\n - api/router/ChildrenOutletContexts\n - api/router/NavigationExtras\n - api/router/ParamMap\n - api/router/PreloadAllModules\n - api/router/PreloadingStrategy\n - api/router/ResolveFn\n - api/router/Route\n - api/router/Router\n - api/router/Router#navigate\n - api/router/Router#navigateByUrl\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterModule\n - api/router/RouterModule#forChild\n - api/router/RouterModule#forRoot\n - api/router/RouterOutlet\n - api/router/RouterStateSnapshot\n - api/router/Routes\n - api/router/UrlTree\n - api/upgrade/static\n - cli\n - cli/generate\n - cli/new\n - guide/animations\n - guide/architecture\n - guide/class-binding\n - guide/router#route-order\n - guide/router-reference#example-config\n - guide/router-tutorial-toh#a-crisis-center-with-child-routes\n - guide/router-tutorial-toh#activated-route-in-action\n - guide/router-tutorial-toh#add-a-secondary-route\n - guide/router-tutorial-toh#add-an-admin-feature-module\n - guide/router-tutorial-toh#add-heroes-functionality\n - guide/router-tutorial-toh#add-the-logincomponent\n - guide/router-tutorial-toh#add-the-router-outlet\n - guide/router-tutorial-toh#adding-routable-animations\n - guide/router-tutorial-toh#authenticate-with-authguard\n - guide/router-tutorial-toh#benefits-of-a-routing-module\n - guide/router-tutorial-toh#can-activate-child-guard\n - guide/router-tutorial-toh#canactivate-requiring-authentication\n - guide/router-tutorial-toh#canactivatechild-guarding-child-routes\n - guide/router-tutorial-toh#cancel-and-save\n - guide/router-tutorial-toh#candeactivate-handling-unsaved-changes\n - guide/router-tutorial-toh#canmatch-guarding-unauthorized-access-of-feature-modules\n - guide/router-tutorial-toh#changing-heroes-to-superheroes\n - guide/router-tutorial-toh#child-route-configuration\n - guide/router-tutorial-toh#child-routing-component\n - guide/router-tutorial-toh#clear-secondary-routes\n - guide/router-tutorial-toh#clearing-secondary-routes\n - guide/router-tutorial-toh#component-less-route-grouping-routes-without-a-component\n - guide/router-tutorial-toh#create-a-sample-application\n - guide/router-tutorial-toh#custom-preloading\n - guide/router-tutorial-toh#custom-preloading-strategy\n - guide/router-tutorial-toh#define-a-wildcard-route\n - guide/router-tutorial-toh#define-routes\n - guide/router-tutorial-toh#displaying-multiple-routes-in-named-outlets\n - guide/router-tutorial-toh#fetch-data-before-navigating\n - guide/router-tutorial-toh#final-application\n - guide/router-tutorial-toh#fragment\n - guide/router-tutorial-toh#guard-the-admin-feature\n - guide/router-tutorial-toh#hero-feature-routing-requirements\n - guide/router-tutorial-toh#heroes-functionality\n - guide/router-tutorial-toh#heroes-list-optionally-selecting-a-hero\n - guide/router-tutorial-toh#how-preloading-works\n - guide/router-tutorial-toh#import-crisis-center-module-into-the-appmodule-routes\n - guide/router-tutorial-toh#inspect-config\n - guide/router-tutorial-toh#inspect-the-routers-configuration\n - guide/router-tutorial-toh#integrate-routing-with-your-app\n - guide/router-tutorial-toh#lazy-load-the-crisis-center\n - guide/router-tutorial-toh#lazy-loading-route-configuration\n - guide/router-tutorial-toh#link-parameters-array\n - guide/router-tutorial-toh#migrating-urls-with-redirects\n - guide/router-tutorial-toh#milestone-1-getting-started\n - guide/router-tutorial-toh#milestone-1-wrap-up\n - guide/router-tutorial-toh#milestone-2-routing-module\n - guide/router-tutorial-toh#milestone-3-heroes-feature\n - guide/router-tutorial-toh#milestone-3-wrap-up\n - guide/router-tutorial-toh#milestone-4-crisis-center-feature\n - guide/router-tutorial-toh#milestone-5-route-guards\n - guide/router-tutorial-toh#milestone-6-asynchronous-routing\n - guide/router-tutorial-toh#module-import-order\n - guide/router-tutorial-toh#navigate-to-crisis-list-with-a-relative-url\n - guide/router-tutorial-toh#navigating-back-to-the-list-component\n - guide/router-tutorial-toh#objectives\n - guide/router-tutorial-toh#observable-parammap-and-component-reuse\n - guide/router-tutorial-toh#optional-route-parameters\n - guide/router-tutorial-toh#parammap-api\n - guide/router-tutorial-toh#preloading-background-loading-of-feature-areas\n - guide/router-tutorial-toh#prerequisites\n - guide/router-tutorial-toh#query-parameters\n - guide/router-tutorial-toh#query-parameters-and-fragments\n - guide/router-tutorial-toh#redirect\n - guide/router-tutorial-toh#refactor-the-routing-configuration-into-a-routing-module\n - guide/router-tutorial-toh#register-router-and-routes\n - guide/router-tutorial-toh#relative-navigation\n - guide/router-tutorial-toh#remove-duplicate-hero-routes\n - guide/router-tutorial-toh#remove-heroes-declarations\n - guide/router-tutorial-toh#resolve-pre-fetching-component-data\n - guide/router-tutorial-toh#reuse\n - guide/router-tutorial-toh#route-definition-with-a-parameter\n - guide/router-tutorial-toh#route-parameters\n - guide/router-tutorial-toh#route-parameters-in-the-activatedroute-service\n - guide/router-tutorial-toh#route-parameters-required-or-optional\n - guide/router-tutorial-toh#router-tutorial-tour-of-heroes\n - guide/router-tutorial-toh#routing-module\n - guide/router-tutorial-toh#routing-module-order\n - guide/router-tutorial-toh#secondary-route-navigation-merging-routes-during-navigation\n - guide/router-tutorial-toh#secondary-routes\n - guide/router-tutorial-toh#set-up-redirects\n - guide/router-tutorial-toh#setting-the-route-parameters-in-the-list-view\n - guide/router-tutorial-toh#snapshot-the-no-observable-alternative\n - guide/router-tutorial-toh#the-sample-application-in-action\n - guide/router-tutorial-toh#wildcard\n - guide/singleton-services#forRoot-router\n - start\n - tutorial/tour-of-heroes\n - tutorial/tour-of-heroes/toh-pt4\n - https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\n - https://developer.mozilla.org/docs/Web/API/URLSearchParams\n - https://en.wikipedia.org/wiki/Fragment_identifier\n - https://vsavkin.tumblr.com/post/146722301646/angular-router-empty-paths-componentless-routes\n - https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping\n - https://www.w3.org/DesignIssues/MatrixURIs.html\n-->"}
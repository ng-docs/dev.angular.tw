{"id":"guide/property-binding-best-practices","title":"属性绑定的最佳实践","contents":"<div class=\"content\">\n  <h1 id=\"property-binding-best-practices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zvk11hbwl4miyzy5gamauh4i\">属性绑定的最佳实践<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#property-binding-best-practices\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xqpu69m7419wj4v0079n1vbu\">通过遵循一些指导原则，你可以使用属性绑定来帮助你减少错误并让代码保持可读性。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50hozx1mkjaev5afdiw6u9s0l\">本章包含代码片段的工作实例参阅<live-example name=\"property-binding\"></live-example>。</p>\n</div>\n<h2 id=\"avoid-side-effects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bd4pltks40kz7847m4fkjfgpr\">避免副作用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#avoid-side-effects\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5u8h5uxto54km086s7p5d6y6\">模板表达式的计算应该没有明显的副作用。使用模板表达式的语法来帮你避免副作用。通常，正确的语法会阻止你为属性绑定表达式中的任何东西赋值。该语法还会阻止你使用递增和递减运算符。</p>\n<h3 id=\"an-example-of-producing-side-effects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qdmzw192s4b4139t18hryuuu\">产生副作用的一个例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#an-example-of-producing-side-effects\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rfon7bej0wf4v0fjubn7q3mx\">如果你的表达式改变了你所绑定的其它东西的值，那么这种更改就会产生副作用。Angular 可能显示也可能不显示更改后的值。如果 Angular 确实检测到了这个变化，就会抛出一个错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9blnd9okdzjmmo7e75zgch708\">作为一项最佳实践，请只使用属性和仅会返回值的方法。</p>\n<h2 id=\"return-the-proper-type\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kt8h8ra9jbbm47w46aisqutl\">返回合适的类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#return-the-proper-type\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pyvd3q0vgf3kycube0x7vi75\">模板表达式应该求值为目标属性所期望的值类型。例如，返回：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zwt4pqmk4ygob4yjn1d3sifh\">一个 <code>string</code>，如果目标属性需要一个字符串</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsfxnuic44pevqvdyi0rn071e\">一个 <code>number</code>，如果目标属性需要一个数字</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kclb37sga9v1o6skrso1q6q4\">一个 <code>object</code>，如果目标属性需要一个对象。</li>\n</ul>\n<h3 id=\"passing-in-a-string\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lkjg5dwr3irksowekjtul277\">传入字符串<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#passing-in-a-string\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fnbih7ixvexexy4h1foesn0p\">在下面的例子中，<code>ItemDetailComponent</code> 的 <code>childItem</code> 属性需要一个字符串。</p>\n<code-example header=\"src/app/app.component.html\" path=\"property-binding/src/app/app.component.html\" region=\"model-property-binding\">\n&lt;app-item-detail [childItem]=\"parentItem\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coq5egrwgqxnfd30fnd4w0shh\">你可以通过查看 <code>ItemDetailComponent</code> 来确认这种预期，其中的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 类型为 <code>string</code>：</p>\n<code-example header=\"src/app/item-detail.component.ts (setting the @Input() type)\" path=\"property-binding/src/app/item-detail.component.ts\" region=\"input-type\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() childItem = '';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7y9w79x93hh438gqjina55qr\"><code>AppComponent</code> 中的 <code>parentItem</code> 是一个字符串，这意味着 <code>[childItem]=\"parentItem\"</code> 中的 <code>parentItem</code> 应该求值为一个字符串。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"property-binding/src/app/app.component.ts\" region=\"parent-data-type\">\nparentItem = 'lamp';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r56mx6u1kd1sqtgs6zfv0d9s\">如果 <code>parentItem</code> 是其它类型的，你同样应该把 <code>childItem</code> 这个 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 指定为那个类型。</p>\n<h3 id=\"passing-in-an-object\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmunoj0uqlu9c553pgr6lbvqm\">传入一个对象<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#passing-in-an-object\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"plm6zsui3mukaapikuiq4jh5\">在这个例子中，<code>ItemListComponent</code> 是 <code>AppComponent</code> 的子组件，其 <code>items</code> 属性需要一个对象数组。</p>\n<code-example header=\"src/app/app.component.html\" path=\"property-binding/src/app/app.component.html\" region=\"pass-object\">\n&lt;app-item-list [items]=\"currentItems\"&gt;&lt;/app-item-list&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpsrhcrkzmb5tyvqip8g8jx0p\">在 <code>ItemListComponent</code> 中，<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> <code>items</code> 的类型为 <code>Item[]</code>。</p>\n<code-example header=\"src/app/item-list.component.ts\" path=\"property-binding/src/app/item-list.component.ts\" region=\"item-input\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() items: Item[] = [];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5edkrojywv5pwh3cixvqw6mh\">注意 <code>Item</code> 是一个有两个属性的对象。一个是 <code>id</code>，一个是 <code>name</code>。</p>\n<code-example header=\"src/app/item.ts\" path=\"property-binding/src/app/item.ts\" region=\"item-class\">\nexport interface Item {\n  id: number;\n  name: string;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cp1lrtdycx6ha5g1mmbqs8r\">在 <code>app.component.ts</code> 中，<code>currentItems</code> 是一个对象数组，与 <code>items.ts</code> 中的 <code>Item</code> 对象具有相同的形态：有一个 <code>id</code>，有一个 <code>name</code>。</p>\n<code-example header=\"src/app.component.ts\" path=\"property-binding/src/app/app.component.ts\" region=\"pass-object\">\ncurrentItems = [{\n  id: 21,\n  name: 'phone'\n}];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9omhffeh4mkvrd1tm8fzxdxi8\">通过提供一个形态相同的对象，你就可以满足 Angular 在计算表达式 <code>currentItems</code> 时对 <code>items</code> 的期待。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Fri Sep 01 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/property-binding\n-->\n<!-- links from this doc:\n - api/core/Input\n - guide/property-binding-best-practices#an-example-of-producing-side-effects\n - guide/property-binding-best-practices#avoid-side-effects\n - guide/property-binding-best-practices#passing-in-a-string\n - guide/property-binding-best-practices#passing-in-an-object\n - guide/property-binding-best-practices#property-binding-best-practices\n - guide/property-binding-best-practices#return-the-proper-type\n-->"}
{"id":"guide/property-binding-best-practices","title":"屬性繫結的最佳實踐","contents":"<div class=\"content\">\n  <h1 id=\"property-binding-best-practices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zvk11hbwl4miyzy5gamauh4i\">屬性繫結的最佳實踐<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#property-binding-best-practices\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xqpu69m7419wj4v0079n1vbu\">透過遵循一些指導原則，你可以使用屬性繫結來幫助你減少錯誤並讓程式碼保持可讀性。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50hozx1mkjaev5afdiw6u9s0l\">本章包含程式碼片段的工作實例參閱<live-example name=\"property-binding\"></live-example>。</p>\n</div>\n<h2 id=\"avoid-side-effects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bd4pltks40kz7847m4fkjfgpr\">避免副作用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#avoid-side-effects\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5u8h5uxto54km086s7p5d6y6\">範本表示式的計算應該沒有明顯的副作用。使用範本表示式的語法來幫你避免副作用。通常，正確的語法會阻止你為屬性繫結表示式中的任何東西賦值。該語法還會阻止你使用遞增和遞減運算符。</p>\n<h3 id=\"an-example-of-producing-side-effects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qdmzw192s4b4139t18hryuuu\">產生副作用的一個例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#an-example-of-producing-side-effects\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rfon7bej0wf4v0fjubn7q3mx\">如果你的表示式改變了你所繫結的其它東西的值，那麼這種更改就會產生副作用。Angular 可能顯示也可能不顯示更改後的值。如果 Angular 確實檢測到了這個變化，就會丟擲一個錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9blnd9okdzjmmo7e75zgch708\">作為一項最佳實踐，請只使用屬性和僅會回傳值的方法。</p>\n<h2 id=\"return-the-proper-type\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kt8h8ra9jbbm47w46aisqutl\">回傳合適的型別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#return-the-proper-type\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pyvd3q0vgf3kycube0x7vi75\">範本表示式應該求值為目標屬性所期望的值型別。例如，回傳：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zwt4pqmk4ygob4yjn1d3sifh\">一個 <code>string</code>，如果目標屬性需要一個字串</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsfxnuic44pevqvdyi0rn071e\">一個 <code>number</code>，如果目標屬性需要一個數字</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kclb37sga9v1o6skrso1q6q4\">一個 <code>object</code>，如果目標屬性需要一個物件。</li>\n</ul>\n<h3 id=\"passing-in-a-string\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lkjg5dwr3irksowekjtul277\">傳入字串<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#passing-in-a-string\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fnbih7ixvexexy4h1foesn0p\">在下面的例子中，<code>ItemDetailComponent</code> 的 <code>childItem</code> 屬性需要一個字串。</p>\n<code-example header=\"src/app/app.component.html\" path=\"property-binding/src/app/app.component.html\" region=\"model-property-binding\">\n&lt;app-item-detail [childItem]=\"parentItem\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coq5egrwgqxnfd30fnd4w0shh\">你可以透過檢視 <code>ItemDetailComponent</code> 來確認這種預期，其中的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 型別為 <code>string</code>：</p>\n<code-example header=\"src/app/item-detail.component.ts (setting the @Input() type)\" path=\"property-binding/src/app/item-detail.component.ts\" region=\"input-type\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() childItem = '';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7y9w79x93hh438gqjina55qr\"><code>AppComponent</code> 中的 <code>parentItem</code> 是一個字串，這意味著 <code>[childItem]=\"parentItem\"</code> 中的 <code>parentItem</code> 應該求值為一個字串。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"property-binding/src/app/app.component.ts\" region=\"parent-data-type\">\nparentItem = 'lamp';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r56mx6u1kd1sqtgs6zfv0d9s\">如果 <code>parentItem</code> 是其它型別的，你同樣應該把 <code>childItem</code> 這個 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 指定為那個型別。</p>\n<h3 id=\"passing-in-an-object\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmunoj0uqlu9c553pgr6lbvqm\">傳入一個物件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#passing-in-an-object\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"plm6zsui3mukaapikuiq4jh5\">在這個例子中，<code>ItemListComponent</code> 是 <code>AppComponent</code> 的子元件，其 <code>items</code> 屬性需要一個物件陣列。</p>\n<code-example header=\"src/app/app.component.html\" path=\"property-binding/src/app/app.component.html\" region=\"pass-object\">\n&lt;app-item-list [items]=\"currentItems\"&gt;&lt;/app-item-list&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpsrhcrkzmb5tyvqip8g8jx0p\">在 <code>ItemListComponent</code> 中，<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> <code>items</code> 的型別為 <code>Item[]</code>。</p>\n<code-example header=\"src/app/item-list.component.ts\" path=\"property-binding/src/app/item-list.component.ts\" region=\"item-input\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() items: Item[] = [];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5edkrojywv5pwh3cixvqw6mh\">注意 <code>Item</code> 是一個有兩個屬性的物件。一個是 <code>id</code>，一個是 <code>name</code>。</p>\n<code-example header=\"src/app/item.ts\" path=\"property-binding/src/app/item.ts\" region=\"item-class\">\nexport interface Item {\n  id: number;\n  name: string;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cp1lrtdycx6ha5g1mmbqs8r\">在 <code>app.component.ts</code> 中，<code>currentItems</code> 是一個物件陣列，與 <code>items.ts</code> 中的 <code>Item</code> 物件具有相同的形態：有一個 <code>id</code>，有一個 <code>name</code>。</p>\n<code-example header=\"src/app.component.ts\" path=\"property-binding/src/app/app.component.ts\" region=\"pass-object\">\ncurrentItems = [{\n  id: 21,\n  name: 'phone'\n}];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9omhffeh4mkvrd1tm8fzxdxi8\">透過提供一個形態相同的物件，你就可以滿足 Angular 在計算表示式 <code>currentItems</code> 時對 <code>items</code> 的期待。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Fri Sep 01 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/property-binding\n-->\n<!-- links from this doc:\n - api/core/Input\n - guide/property-binding-best-practices#an-example-of-producing-side-effects\n - guide/property-binding-best-practices#avoid-side-effects\n - guide/property-binding-best-practices#passing-in-a-string\n - guide/property-binding-best-practices#passing-in-an-object\n - guide/property-binding-best-practices#property-binding-best-practices\n - guide/property-binding-best-practices#return-the-proper-type\n-->"}
{"id":"guide/http-make-jsonp-request","title":"HTTP：发出 JSONP 请求","contents":"<div class=\"content\">\n  <h1 id=\"http-make-a-jsonp-request\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tso80qk9bvlyiwxhx2iuh0pc\">HTTP：发出 JSONP 请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-make-jsonp-request#http-make-a-jsonp-request\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzankylx4tpq2m3xo6pno7jvm\">“带填充的 JSON”(JSONP) 是一种欺骗 Web 浏览器执行带有 <code>&lt;script&gt;</code> 标签的请求的方法，该标签使用 SRC 属性发出特殊的 API 请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0cnaz3ewevn5vif9xbgbp3dp\">当服务器不支持 <a href=\"https://developer.mozilla.org/docs/Web/HTTP/CORS\">CORS 协议</a>时，应用程序可以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 跨域发出 <a href=\"https://en.wikipedia.org/wiki/JSONP\">JSONP</a> 请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"i7vfoj9wy2oigiijgrl9krpo\">Angular 的 JSONP 请求会返回一个 <code>Observable</code>。遵循订阅可观察对象变量的模式，并在使用 <a href=\"api/common/AsyncPipe\">async 管道</a>管理结果之前，使用 RxJS <code>map</code> 操作符转换响应。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvsif1z80gaei697pcn2fvl3\">通过在\n<code>app.config.ts</code>的\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>提供者数组中提供\n<code><a href=\"api/common/http/HttpClientJsonpModule\" class=\"code-anchor\">HttpClientJsonpModule</a></code>来启用JSONP，像这样：</p>\n<code-example header=\"app.config.ts (excerpt)\" path=\"http/src/app/app.config.ts\" region=\"jsonp\">\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [\n    <a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a>(<a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>),\n    <a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a>(<a href=\"api/common/http/HttpClientJsonpModule\" class=\"code-anchor\">HttpClientJsonpModule</a>),\n  ]\n};\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7odo06nb56g6yekw5kvnrheec\">在下面的示例中，\n<code>searchHeroesJsonp()</code>方法使用JSONP请求查询那些英雄名字包含从用户获取的搜索词的英雄。</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"searchHeroesJsonp\">\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable&lt;Hero[]&gt; {\n  term = term.trim();\n\n  const heroesUrl = `${this.heroesSearchUrl}?${term}`;\n  return this.http.jsonp(heroesUrl, 'callback')\n    .pipe(\n      map(result =&gt; this.jsonpResultToHeroes(result)),\n      catchError(this.handleError('searchHeroes', []))\n    );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dau9gzq40nyawjv7a6zxnepip\">此请求将\n<code>heroesUrl</code>与搜索词作为第一个参数传递，并将标准回调函数名称\n<code>callback</code>作为第二个参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"299zuqg3d7i6omwo9rpifebk9\">你可能需要对\n<code>http.jsonp</code>方法的Observable响应进行\n<code>map</code>，就像这个示例中的\n<code>jsonpResultToHeroes</code>一样。</p>\n<h2 id=\"request-non-json-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6hj4fwxyyjle7ce39fsrb6x6\">请求非 JSON 数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-make-jsonp-request#request-non-json-data\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ah3arqhjqu0lpbgytfj4mr8cj\">不是所有的 API 都会返回 JSON 数据。在下面这个例子中，<code>DownloaderService</code> 中的方法会从服务器读取文本文件，并把文件的内容记录下来，然后把这些内容使用 <code>Observable&lt;string&gt;</code> 的形式返回给调用者。</p>\n<code-example header=\"app/downloader/downloader.service.ts (getTextFile)\" linenums=\"false\" path=\"http/src/app/downloader/downloader.service.ts\" region=\"getTextFile\">\ngetTextFile(filename: string) {\n  // The Observable returned by get() is of type Observable&lt;string&gt;\n  // because a text response was specified.\n  // There's no need to pass a &lt;string&gt; type parameter to get().\n  return this.http.get(filename, {responseType: 'text'})\n    .pipe(\n      tap( // Log the result or error\n      {\n        next: (data) =&gt; this.log(filename, data),\n        error: (error) =&gt; this.logError(filename, error)\n      }\n      )\n    );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ru8xr1b26wyotrhmyxrqvesf\">这里的 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 返回字符串而不是默认的 JSON 对象，因为它的 <code>responseType</code> 选项是 <code>'text'</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59wb6mskhbr5t1rkxxx8wpn3\">RxJS 的 <code>tap</code> 操作符使代码可以检查通过可观察对象的成功值和错误值，而不会干扰它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ny1ciobxw199jkqh7rjg3ndg\">在 <code>DownloaderComponent</code> 中的 <code>download()</code> 方法通过订阅这个服务中的方法来发起一次请求。</p>\n<code-example header=\"app/downloader/downloader.component.ts (download)\" linenums=\"false\" path=\"http/src/app/downloader/downloader.component.ts\" region=\"download\">\ndownload() {\n  this.downloaderService.getTextFile('assets/textfile.txt')\n    .subscribe(results =&gt; this.contents = results);\n}\n\n</code-example>\n<p><a id=\"error-handling\"></a></p>\n\n  <div class=\"reviewed\">最后复查时间：Thu Aug 17 2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/common/http/HttpClientJsonpModule\n - api/common/http/HttpClientModule\n - api/core/ApplicationConfig\n - api/core/importProvidersFrom\n - guide/http-make-jsonp-request#http-make-a-jsonp-request\n - guide/http-make-jsonp-request#request-non-json-data\n - https://developer.mozilla.org/docs/Web/HTTP/CORS\n - https://en.wikipedia.org/wiki/JSONP\n-->"}
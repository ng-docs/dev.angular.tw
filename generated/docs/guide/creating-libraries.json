{"id":"guide/creating-libraries","title":"建立函式庫","contents":"<div class=\"content\">\n  <h1 id=\"creating-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zlzz7c1g9hkwkz1rdjs5em5m\">建立函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-libraries#creating-libraries\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brgsk5gzma2asbekb5oarlgga\">對於如何建立和發布新庫，以擴充套件 Angular 的功能，本頁面提供了一個概念性的總覽</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4h8gm2oqaey3kcgbu5f7d3s4\">如果你發現自己要在多個應用中解決同樣的問題（或者要把你的解決方案分享給其它開發者），你就有了一個潛在的函式庫。簡單的例子就是一個用來把使用者帶到你公司網站上的按鈕，該按鈕會包含在你公司建立的所有應用中。</p>\n<h2 id=\"getting-started\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1ec4dv7ru8g390agopg2loxb\">快速上手<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-libraries#getting-started\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7keygqbkfp7a542q5398pvl9o\">使用 Angular CLI，用以下指令在新的工作區中生成一個新庫的骨架：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng new my-workspace --no-create-application\ncd my-workspace\nng generate library my-lib\n\n</code-example>\n<div class=\"callout is-important\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rm2nsqx9t5lrtvumk6l4toci\">命名你的函式庫</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmpij479kqna87yvqtzoxnxpm\">如果你想稍後在公共套件登錄檔（比如 npm）中發布它，則在選擇函式庫名稱時應該非常小心。參閱<a href=\"guide/creating-libraries#publishing-your-library\">發布你的函式庫</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dl0rbs7g3k5ivhn3x4oqkixf\">避免使用以 <code>ng-</code> 為字首的名稱，比如 <code>ng-library</code>。<code>ng-</code> 字首是 Angular 框架及其庫中使用的保留關鍵字。首選 <code>ngx-</code> 字首作為用於表示該函式庫適合與 Angular 一起使用的約定。這也是登錄檔的使用者區分不同 JavaScript 框架函式庫的優秀指示器。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tfei1ju96fwcad2lssj284hh\"><code>ng generate</code> 指令會在你的工作區中建立 <code>projects/my-lib</code> 資料夾，其中包含帶有一個元件和一個服務的 NgModule。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dpys0olmqnp34nyygbuu3fzi\">要了解關於庫專案的目錄結構的詳細訊息，參閱<a href=\"guide/file-structure\">專案檔案結構</a>中的<a href=\"guide/file-structure#library-project-files\">函式庫專案檔案</a>部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jl1lqokjz7pin4ndlf76qdbl\">可以使用單一倉庫（monorepo）模式將同一個工作區用於多個專案。參閱<a href=\"guide/file-structure#multiple-projects\">建立多專案型工作區</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2q546g7l0pk5azhf97a8zwdg\">當你生成一個新庫時，該工作區的設定檔案 <code>angular.json</code> 中也增加了一個 'library' 型別的專案。</p>\n<code-example format=\"json\">\n\n\"projects\": {\n  …\n  \"my-lib\": {\n    \"root\": \"projects/my-lib\",\n    \"sourceRoot\": \"projects/my-lib/src\",\n    \"projectType\": \"library\",\n    \"prefix\": \"lib\",\n    \"architect\": {\n      \"build\": {\n        \"builder\": \"@angular-devkit/build-angular:ng-packagr\",\n        …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ed7e9xxb3gx456ja9zhh4eo0f\">可以使用 CLI 指令來建立、測試和 lint 這個專案：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build my-lib --configuration development\nng test my-lib\nng lint my-lib\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zt4f9akzidt5ghei4axdylqm\">注意，該專案設定的建構式與應用類專案的預設建構式不同。此建構式可以確保函式庫永遠使用 <a href=\"guide/aot-compiler\">AoT 編譯器</a>建立。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhy4s1q4ia0myi5sgfagm9dnr\">要讓函式庫程式碼可以複用，你必須為它定義一個公共的 API。這個『使用者層』定義了庫中消費者的可用內容。該函式庫的使用者應該可以透過單個的匯入路徑來訪問公共功能（如 NgModules、服務提供者和工具函式）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ei1f0f4jzirbdlm3hbnwvkaoq\">函式庫的公共 API 是在庫資料夾下的 <code>public-api.ts</code> 檔案中維護的。當你的函式庫被匯入應用時，從該檔案匯出的所有內容都會公開。請使用 NgModule 來暴露這些服務和元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ryyoxar8cjkoe8vl2y9uxy8h\">你的庫裡應該提供一些文件（通常是 README 檔案）來指導別人安裝和維護。</p>\n<h2 id=\"refactoring-parts-of-an-application-into-a-library\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yhhl940weroginw68vbwuq6a\">把應用中的部分內容重構成一個函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-libraries#refactoring-parts-of-an-application-into-a-library\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"al5ihssdzcnbc5c71r0mc2s4y\">為了讓你的解決方案可供複用，你需要對它進行調整，以免它依賴應用特有的程式碼。在將應用的功能遷移到庫中時，需要注意以下幾點。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"em3mt16adfi4sfuofgo9ffe77\">元件和通道之類的可宣告物件應該設計成無狀態的，這意味著它們不依賴或修改外部變數。如果確實依賴於狀態，就需要對每種情況進行評估，以決定它是應用的狀態還是函式庫要管理的狀態。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7rdao5hzn65qa27323hubsxph\">元件內部訂閱的所有可觀察物件都應該在這些元件的生命週期內進行清理和釋放</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hnyysjqonu3ucvt7qphoql8x\">元件對外暴露互動方式時，應該透過輸入引數來提供上下文，透過輸出引數來將事件傳給其它元件</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9m7b2elm6etx53ie3u4ga79db\">檢查所有內部依賴。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9us480e1xd2wmkyj6uudxhkff\">對於在元件或服務中使用的自定義類或介面，檢查它們是否依賴於其它類或介面，它們也需要一起遷移</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"algn2wzgyd7ys09rpo0idaqde\">同樣，如果你的函式庫程式碼依賴於某個服務，則需要遷移該服務</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3g041ziudiiqnxf979j7wvf0t\">如果你的函式庫程式碼或其樣板依賴於其它函式庫（比如 Angular Material），你就必須把它們設定為該函式庫的依賴</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5clq0bqzx2yxjb3lecoqozzpr\">考慮如何為用戶端應用提供服務。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xfaxmmdlgblqobk1kzzhz68f\">服務應該自己宣告提供者（而不是在 NgModule 或元件中宣告提供者），以便它們是<em>可搖樹最佳化的</em>。這樣，如果伺服器從未被注入到匯入該函式庫的應用中，編譯器就會把該服務從該 bundle 中刪除。關於這方面的更多訊息，參閱<a href=\"guide/architecture-services#providing-services\">Tree-shakable 提供者</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6wfxmpo8yyoga1rdbf2co900\">如果你在多個 NgModules 註冊全域服務提供者或提供者共享，使用<a href=\"guide/singleton-services\"><code>forRoot()</code> 和 <code>forChild()</code> 設計模式</a>由提供<a href=\"api/router/RouterModule\">RouterModule</a></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"782ph9lqnbqv2yaxlng0ybc7m\">如果你的庫中提供的可選服務可能並沒有被所有的用戶端應用所使用，那麼就可以透過<a href=\"guide/lightweight-injection-tokens\">輕量級令牌設計模式</a>為這種情況支援正確的樹狀<a href=\"guide/lightweight-injection-tokens\">結構了</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<p><a id=\"integrating-with-the-cli\"></a></p>\n<h2 id=\"integrating-with-the-cli-using-code-generation-schematics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9y10vkhp2sp8qxctllffgbzp\">使用程式碼生成原理圖與 CLI 整合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-libraries#integrating-with-the-cli-using-code-generation-schematics\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ag0x39e1e62tw58tes6mzvu73\">一個函式庫通常都包含<em>可複用的程式碼</em>，用於定義元件，服務，以及你剛才匯入到專案中的其他 Angular 工件（通道，指令等等）。函式庫被打包成一個 npm 套件，用於發布和共享。這個套件還可以包含一些<a href=\"guide/glossary#schematic\">原理圖</a>，它提供直接在專案中生成或轉換程式碼的指令，就像 CLI 用 <code>ng generate component</code> 建立一個通用的新 <code>ng generate component</code>。比如，用函式庫打包的原理圖可以為 Angular CLI 提供生成元件所需的訊息，該組件用於設定和使用該庫中定義的特定屬性或一組屬性。這方面的一個例子是 <a href=\"https://material.angular.cn/guide/schematics#navigation-schematic\">Angular Material 的導向原理圖</a>，它用來設定 CDK 的 <a href=\"https://material.angular.cn/cdk/layout/overview#breakpointobserver\"><code>BreakpointObserver</code></a> 並把它與 Material 的 <a href=\"https://material.angular.cn/components/sidenav/overview\">MatSideNav</a> 和 <a href=\"https://material.angular.cn/components/toolbar/overview\">MatToolbar</a> 元件一起使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fpikdg5hd3ixw6guim89ubyw\">建立幷包含以下幾種原理圖。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2sc7i90hxgq1wlpl7n5smmma3\">包含一個安裝原理圖，以便 <code>ng add</code> 可以把你的函式庫新增到專案中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nyna3yzgbwgayjodumbi5e8y\">在庫中包含了生成原理圖，以便 <code>ng generate</code> 可以為專案中的已定義工件（元件，服務，測試等）提供支援。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8f2f00zcdwei2rv5xmulo1ev0\">包含一個更新的原理圖，以便 <code>ng update</code> 可以更新你的函式庫的依賴，並提供一些遷移來破壞新版本中的更改。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b8futit3fft50bl82v433l2t\">你的庫中所包含的內容取決於你的任務。比如，你可以定義一個原理圖來建立一個預先填充了固定數據的下拉清單，以展示如何把它新增到一個應用中。如果你想要一個每次包含不同傳入值的下拉清單，那麼你的函式庫可以定義一個原理圖來用指定的設定建立它。然後，開發人員可以使用 <code>ng generate</code> 為自己的應用設定一個實例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bfxra1ara0dw2eum9sp5vaye\">假設你要讀取設定檔案，然後根據該設定生成表單。如果該表單需要函式庫的使用者進行額外的自定義，它可能最適合用作 schematic。但是，如果這些表單總是一樣的，開發人員不需要做太多自定義工作，那麼你就可以建立一個動態的元件來獲取設定並生成表單。通常，自定義越複雜，schematic 方式就越有用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vj061cztf7fa29uluc2xv7jf\">欲知詳情，參閱 <a href=\"guide/schematics\">原理圖概覽</a> 和 <a href=\"guide/schematics-for-libraries\">供函式庫使用的原理圖</a>。</p>\n<h2 id=\"publishing-your-library\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wz5xgr4wsch8fph15vvxikdi\">發布你的函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-libraries#publishing-your-library\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4oxj1ogjpfphqkfugd4vfugq\">使用 Angular CLI 和 npm 套件管理器來建立你的函式庫併發布為 npm 套件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3krk3jj5dztmuuett9t4kywsn\">Angular CLI 使用一個名為 <a href=\"https://github.com/ng-packagr/ng-packagr/blob/master/README.md\">ng-packagr</a> 的工具從已編譯的程式碼中建立可以發布到 npm 的軟體套件。<code>ng-packagr</code> 支援的發行格式的訊息以及有關如何為函式庫選擇正確格式的指南，參閱<a href=\"guide/creating-libraries#ivy-libraries\">使用 Ivy 建立庫</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jbeb83wzxq6xtwi660bcc3qm\">你應該總是使用 <code>production</code> 設定來建立用於分發的函式庫。這樣可以確保所生成的輸出對 npm 使用了適當的最佳化和正確的軟體套件格式。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build my-lib\ncd dist/my-lib\nnpm publish\n\n</code-example>\n<p><a id=\"lib-assets\"></a></p>\n<h2 id=\"managing-assets-in-a-library\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ij9bt7c630pne3po3cki9ttp\">管理庫中的資產（assets）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-libraries#managing-assets-in-a-library\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xe9s0obsx9bvcpal2khs55om\">對於 Angular 函式庫，可分發檔案中可包含一些額外的資產，如主題檔案、Sass mixins 或文件（如變更日誌）。欲知詳情，請參見<a href=\"https://github.com/ng-packagr/ng-packagr/blob/master/docs/copy-assets.md\">在建立時將資產複製到庫中</a>和<a href=\"https://github.com/ng-packagr/ng-packagr/blob/master/docs/embed-assets-css.md\">將資產嵌入到元件樣式中</a>。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"813j6xro9iozn5b2ygqeyhrxe\">當包含額外的資產（如 Sass mixins 或預編譯的 CSS）時，你需要將這些手動新增到主入口點的 <code>package.json</code> 中的條件化 <a href=\"guide/angular-package-format/#exports\">『exports』</a> 部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3po3vafcj969h5u6zz5k2dwe\"><code>ng-packagr</code> 會將手寫的 <code>\"exports\"</code> 與自動生成的 <code>\"exports\"</code> 合併，以便讓庫作者設定額外的匯出子路徑或自定義條件。</p>\n<code-example language=\"json\">\n\n\"exports\": {\n  \".\": {\n    \"sass\": \"./_index.scss\",\n  },\n  \"./theming\": {\n    \"sass\": \"./_theming.scss\"\n  },\n  \"./prebuilt-themes/indigo-pink.css\": {\n    \"style\": \"./prebuilt-themes/indigo-pink.css\"\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"647802sc88ng8wwfjsb4v12tu\">以上是 <a href=\"https://unpkg.com/browse/@angular/material/package.json\">@angular/material</a> 可分發檔案的摘錄。</p>\n</div>\n<h2 id=\"peer-dependencies\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avj3zq5qgopatb0hlcw6f2hee\">同級依賴<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-libraries#peer-dependencies\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79i0txjqv02kw9shhlm1ku7pu\">各種 Angular 函式庫應該把自己依賴的所有 <code>@angular/*</code> 都列為同級依賴。這確保了當各個模組請求 Angular 時，都會得到完全相同的模組。如果某個函式庫在 <code>dependencies</code> 列出 <code>@angular/core</code> 而不是用 <code>peerDependencies</code>，它可能會得到一個不同的 Angular 模組，這會破壞你的應用。</p>\n<h2 id=\"using-your-own-library-in-applications\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ag7zrl4la9hz4dy5g4ttfz0uy\">在應用中使用你自己的函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-libraries#using-your-own-library-in-applications\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gv4xrom9bkqkhs3th59yq4k3\">如果要在同一個工作空間中使用某個函式庫，你不必把它發布到 npm 套件管理器，但你還是得先建立它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6560mod8qhj7j92wsu11p3uj0\">要想在應用中使用你自己的函式庫：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ycitnry1hrhtq9hs08tk181e\">建立該函式庫。在建立之前，無法使用函式庫。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build my-lib\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lspz3ttlhbfbu0jd1vgqb5sf\">在你的應用中，按名字從庫中匯入：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { myExport } from 'my-lib';\n\n</code-example>\n</li>\n</ul>\n<h3 id=\"building-and-rebuilding-your-library\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"skmftwp7nn8zb9er0qrc6611\">建立和重建你的函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-libraries#building-and-rebuilding-your-library\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6awpdn3kdsmn82hybo4h0gju\">如果你沒有把函式庫發布為 npm 套件，然後把它從 npm 安裝到你的應用中，那麼建立步驟就是必要的。比如，如果你克隆了 git 倉庫並執行了 <code>npm install</code>，編輯器就會把 <code>my-lib</code> 的匯入顯示為缺失狀態（如果你還沒有建立過該函式庫）。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"62pm1nful4yie8p1w1pjao9ow\">當你在 Angular 應用中從某個函式庫匯入一些東西時，Angular 就會尋找函式庫名和磁碟上某個位置之間的對映關係。當你用 npm 套件安裝該函式庫時，它就對映到 <code>node_modules</code> 目錄下。當你自己建立庫時，它就會在 <code>tsconfig</code> 路徑中查詢這個對映。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gcl4l25jcvimff4fnw2m48jh\">用 Angular CLI 生成函式庫時，會自動把它的路徑新增到 <code>tsconfig</code> 檔案中。Angular CLI 使用 <code>tsconfig</code> 路徑告訴建立系統在哪裡尋找這個函式庫。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec5eknl3spzzx3ncicvabnc1\">欲知詳情，參見<a href=\"https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping\">路徑對映概覽</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e73q0ioc7kixq3671231qy7cj\">如果你發現庫中的更改沒有反映到應用中，那麼你的應用很可能正在使用這個函式庫的舊版本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ir4v9f6brs8i03o4c0m1zj9r\">每當你對它進行修改時，都可以重建你的函式庫，但這個額外的步驟需要時間。<em>增量建立</em>功能可以改善函式庫的開發體驗。每當檔案發生變化時，都會執行區域性建立，並修補一些檔案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37n00em1fomk6e7bi0c6hqfu6\">增量建立可以作為開發環境中的後台程序執行。要啟用這個屬性，可以在建立指令中加入 <code>--watch</code> 標誌：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build my-lib --watch\n\n</code-example>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xno19e4ra1nlldk54htdol9f\">CLI 的 <code>build</code> 指令為函式庫使用與應用不同的建構式，並呼叫不同的建立工具。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tzcxkceu3tzaelgepnziklu5\">應用的建立體系（<code>@angular-devkit/build-angular</code>）基於 <code>webpack</code>，並被包含在所有新的 Angular CLI 專案中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvsxo84dpu6nks7n9hv9ss5f\">函式庫的建立體系基於 <code>ng-packagr</code>。只有在使用 <code>ng generate library my-lib</code> 新增函式庫時，它才會新增到依賴項中。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r9elfqazszc4a7unk7w8ox8\">這兩種建立體系支援不同的東西，即使它們支援相同的東西，它們的執行方式也不同。這意味著同一套 TypeScript 原始碼在生成函式庫時生成的 JavaScript 程式碼可能與生成應用時生成的 JavaScript 程式碼也不同。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnq47dfaov3ivrr3qn2sz46ta\">因此，依賴於函式庫的應用應該只使用指向<em>內建函式庫</em>的 TypeScript 路徑對映。TypeScript 的路徑對映<em>不應該</em>指向函式庫的 <code>.ts</code> 源檔案。</p>\n</div>\n<p><a id=\"ivy-libraries\"></a></p>\n<h2 id=\"publishing-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jiqaj74dyktjir9mzims4gya\">發布函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-libraries#publishing-libraries\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3lnobktb67z5h86aoy2evtr7\">發布函式庫時可以使用兩種分發格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ucy8b8u5sz8a4n9mv6l83ew2\">分發格式</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wgj0ajyj49kc5w373d6t4595\">部分-Ivy（推薦）</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fubz8o4idg7hypzbmkutkgy6\">包含可被任何從 Angular v12 開始建立的 Ivy 應用程式消費的可移植程式碼。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9t465lx6s6vcuxkztnyf4691i\">完整-Ivy</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7imn0pkv29wcj25up8hdzjzu\">包含私有的 Angular Ivy 指令，不保證能夠跨不同版本的 Angular 工作。此格式要求函式庫和應用程式必須使用完全相同版本的 Angular 進行建立。該格式適用於所有函式庫和應用程式程式碼都直接從原始碼建立的環境。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qwo94rph4s02ryt4fai8a0fa\">對於發布到 npm 的函式庫，請使用 partial-Ivy 格式，因為它在 Angular 的各個補丁版本之間是穩定的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75jlq9qjrhywoz32hignxhgfi\">如果要發布到 npm，請避免使用完全 Ivy 的方式編譯函式庫，因為生成的 Ivy 指令不屬於 Angular 公共 API 的一部分，因此在補丁版本之間可能會有所不同。</p>\n<h2 id=\"ensuring-library-version-compatibility\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o4jqielq20wi30tul0uzimq0\">確保庫版本相容性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-libraries#ensuring-library-version-compatibility\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72k8bb3heyu020bfewvw1uwg7\">用於建立應用的 Angular 版本應始終與用於建立其任何依賴庫的 Angular 版本相同或更大。比如，如果你有一個使用 Angular 13 版的函式庫，則依賴於該函式庫的應用應該使用 Angular 13 版或更高版本。Angular 不支援為該應用使用早期版本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yxu23zlu6gvxeeu6nbox0xyw\">如果打算將函式庫發布到 npm，請透過在 <code>tsconfig.prod.json</code> 的 <code>\"compilationMode\": \"partial\"</code> 來使用部分 Ivy 程式碼進行編譯。這種部分格式在不同版本的 Angular 之間是穩定的，因此可以安全地發布到 npm。這種格式的程式碼在應用程式建立期間會使用相同版本的 Angular 編譯器進行處理，以確保應用程式及其所有函式庫使用的是同一個版本的 Angular。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75jlq9qjrhywoz32hignxhgfi\">如果要發布到 npm，請避免使用完全 Ivy 的方式編譯函式庫，因為生成的 Ivy 指令不屬於 Angular 公共 API 的一部分，因此在補丁版本之間可能會有所不同。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74m6iwfcafae9m7rof8tl9rsa\">如果你以前從未在 npm 中發布過軟體套件，則必須建立一個使用者帳戶。在<a href=\"https://docs.npmjs.com/getting-started/publishing-npm-packages\">發布 npm 程式套件</a>中瞭解更多訊息。</p>\n<h2 id=\"consuming-partial-ivy-code-outside-the-angular-cli\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ntgb0gaxtvbqltfhe0d02alw\">在 Angular CLI 之外使用部分 Ivy 程式碼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-libraries#consuming-partial-ivy-code-outside-the-angular-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bojhjtqotk3gdrilvgiz95sg\">應用將 npm 中的許多 Angular 函式庫安裝到其 <code>node_modules</code> 目錄中。但是，這些庫中的程式碼不能與已編譯的應用直接捆綁在一起，因為它尚未完全編譯。要完成編譯，可以使用 Angular 連結器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20evgmt84sn41q6c0j66hlh67\">對於不使用 Angular CLI 的應用程式，此連結器可用作 <a href=\"https://babeljs.io\">Babel</a> 外掛。該外掛要從 <code>@angular/compiler-cli/linker/babel</code> 匯入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1mgul1eyw3kv1w8ibtp8aam\">Angular 連結器的 Babel 外掛支援建立快取，這意味著連結器只需一次處理函式庫，而與其他 npm 操作無關。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nfessm9txlnxt4k91r73rx58\">下面的例子藉助 <a href=\"https://webpack.js.org/loaders/babel-loader/#options\">babel-loader</a> 把此連結器註冊為 <a href=\"https://babeljs.io\">Babel</a> 外掛，從而將此外掛整合到自定義 <a href=\"https://webpack.js.org\">Webpack</a> 建立中。</p>\n<code-example header=\"webpack.config.mjs\" path=\"angular-linker-plugin/webpack.config.mjs\" region=\"webpack-config\">\nimport linkerPlugin from '@angular/compiler-cli/linker/babel';\n\nexport default {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.m?js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            plugins: [linkerPlugin],\n            compact: false,\n            cacheDirectory: true,\n          }\n        }\n      }\n    ]\n  }\n  // ...\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exqsrko55t9wcwi3w7obdnxz3\">Angular CLI 自動整合了連結器外掛，因此，如果你這個函式庫的使用方也在使用 CLI，則他們可以從 npm 安裝 Ivy 原生函式庫，而無需任何其他設定。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/angular-package-format\n - guide/cli-builder\n - guide/file-structure\n - guide/glossary\n - guide/libraries\n - guide/npm-packages\n-->\n<!-- links from this doc:\n - api/router/RouterModule\n - guide/angular-package-format/#exports\n - guide/aot-compiler\n - guide/architecture-services#providing-services\n - guide/creating-libraries#building-and-rebuilding-your-library\n - guide/creating-libraries#consuming-partial-ivy-code-outside-the-angular-cli\n - guide/creating-libraries#creating-libraries\n - guide/creating-libraries#ensuring-library-version-compatibility\n - guide/creating-libraries#getting-started\n - guide/creating-libraries#integrating-with-the-cli-using-code-generation-schematics\n - guide/creating-libraries#ivy-libraries\n - guide/creating-libraries#managing-assets-in-a-library\n - guide/creating-libraries#peer-dependencies\n - guide/creating-libraries#publishing-libraries\n - guide/creating-libraries#publishing-your-library\n - guide/creating-libraries#refactoring-parts-of-an-application-into-a-library\n - guide/creating-libraries#using-your-own-library-in-applications\n - guide/file-structure\n - guide/file-structure#library-project-files\n - guide/file-structure#multiple-projects\n - guide/glossary#schematic\n - guide/lightweight-injection-tokens\n - guide/schematics\n - guide/schematics-for-libraries\n - guide/singleton-services\n - https://babeljs.io\n - https://docs.npmjs.com/getting-started/publishing-npm-packages\n - https://github.com/ng-packagr/ng-packagr/blob/master/README.md\n - https://github.com/ng-packagr/ng-packagr/blob/master/docs/copy-assets.md\n - https://github.com/ng-packagr/ng-packagr/blob/master/docs/embed-assets-css.md\n - https://material.angular.io/cdk/layout/overview#breakpointobserver\n - https://material.angular.io/components/sidenav/overview\n - https://material.angular.io/components/toolbar/overview\n - https://material.angular.io/guide/schematics#navigation-schematic\n - https://unpkg.com/browse/@angular/material/package.json\n - https://webpack.js.org\n - https://webpack.js.org/loaders/babel-loader/#options\n - https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping\n-->"}
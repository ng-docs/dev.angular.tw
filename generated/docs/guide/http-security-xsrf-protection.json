{"id":"guide/http-security-xsrf-protection","title":"HTTP 客户端 - 安全性：跨站点请求伪造（XSRF）保护","contents":"<div class=\"content\">\n  <h1 id=\"http-client---security-cross-site-request-forgery-xsrf-protection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnx8q0va87zvqiz4nkk9n376b\">HTTP 客户端 - 安全性：跨站点请求伪造（XSRF）保护<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-security-xsrf-protection#http-client---security-cross-site-request-forgery-xsrf-protection\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bpjkzt7xjai5nijhjfgt04tc\"><a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">跨站请求伪造（XSRF 或 CSRF）</a>是一种攻击技术，攻击者可以通过这种技术诱使已完成身份验证的用户在你的网站上不知不觉地执行某些操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32q01alujwestjclf068lov9o\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 支持用于防止 XSRF 攻击的<a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-header_token\">通用机制</a>。当执行 HTTP 请求时，拦截器从 cookie 中读取令牌，默认为 <code>XSRF-TOKEN</code>，并将其设置为 HTTP 标头 <code>X-XSRF-TOKEN</code>。因为只有在你的域上运行的代码才能读取 cookie，这样后端就可以确定 HTTP 请求来自你的客户端程序而不是攻击者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"62cbkl8t2muylxpcvz9c9vkk0\">默认情况下，拦截器会在所有的修改型请求中（比如 POST 等）把这个请求头发送给使用相对 URL 的请求。但不会在 GET/HEAD 请求中发送，也不会发送给使用绝对 URL 的请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55usq8wxpv5sq70xlmd1jr23b\">要获得这种优点，你的服务器需要在页面加载或首个 GET 请求中把一个名叫 <code>XSRF-TOKEN</code> 的标记写入可被 JavaScript 读到的会话 cookie 中。而在后续的请求中，服务器可以验证这个 cookie 是否与 HTTP 头 <code>X-XSRF-TOKEN</code> 的值一致，以确保只有运行在你自己域名下的代码才能发起这个请求。这个标记必须对每个用户都是唯一的，并且必须能被服务器验证，因此不能由客户端自己生成标记。把这个标记设置为你的站点认证信息并且加了盐（salt）的摘要，以提升安全性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"claya94hd1mz406slxkaobnfb\">为了防止多个 Angular 应用共享同一个域名或子域时出现冲突，要给每个应用分配一个唯一的 cookie 名称。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eglbf5r2igfg88hmaud3dl70h\"><em><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 仅支持受 XSRF 保护的客户端部分</em>。后端服务必须配置为能够为页面设置 cookie，并验证在所有符合条件的请求中是否存在该标头。如果后端服务未能正确设置它们，则会让 Angular 的默认保护失效。</p>\n</div>\n<h2 id=\"configure-custom-cookieheader-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68mssphxsumko4pwjlf7cwt2m\">配置自定义 cookie/标头名称<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-security-xsrf-protection#configure-custom-cookieheader-names\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1l2zcuui4ijcaobty18rw6ytr\">如果你的后端服务中对 XSRF 标记的 cookie 或头使用了不一样的名字，就要使用 <code><a href=\"api/common/http/HttpClientXsrfModule#withOptions\" class=\"code-anchor\">HttpClientXsrfModule.withOptions()</a></code> 来覆盖掉默认值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlylricw7qh3svigxk9k2ylaj\">将其添加到\n<code>app.config.ts</code>中\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>的\n<code>providers</code>数组中，如下所示：</p>\n<code-example header=\"app.config.ts (excerpt)\" path=\"http/src/app/app.config.ts\" region=\"xsrf\">\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [\n    <a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a>(<a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>),\n    <a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a>(\n        HttpClientXsrfModule.withOptions({\n        cookieName: 'My-Xsrf-Cookie',\n        headerName: 'My-Xsrf-Header',\n      })\n    ),\n  ]\n};\n\n\n</code-example>\n<p><a id=\"testing-requests\"></a></p>\n\n  <div class=\"reviewed\">最后复查时间：Wed Aug 16 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/security\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient\n - api/common/http/HttpClientModule\n - api/common/http/HttpClientXsrfModule#withOptions\n - api/core/ApplicationConfig\n - api/core/importProvidersFrom\n - guide/http-security-xsrf-protection#configure-custom-cookieheader-names\n - guide/http-security-xsrf-protection#http-client---security-cross-site-request-forgery-xsrf-protection\n - https://en.wikipedia.org/wiki/Cross-site_request_forgery\n - https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-header_token\n-->"}
{"id":"guide/http-security-xsrf-protection","title":"HTTP 用戶端 - 安全性：跨站點請求偽造（XSRF）保護","contents":"<div class=\"content\">\n  <h1 id=\"http-client---security-cross-site-request-forgery-xsrf-protection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnx8q0va87zvqiz4nkk9n376b\">HTTP 用戶端 - 安全性：跨站點請求偽造（XSRF）保護<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-security-xsrf-protection#http-client---security-cross-site-request-forgery-xsrf-protection\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bpjkzt7xjai5nijhjfgt04tc\"><a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">跨站請求偽造（XSRF 或 CSRF）</a>是一種攻擊技術，攻擊者可以透過這種技術誘使已完成身份驗證的使用者在你的網站上不知不覺地執行某些操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32q01alujwestjclf068lov9o\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 支援用於防止 XSRF 攻擊的<a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-header_token\">通用機制</a>。當執行 HTTP 請求時，攔截器從 cookie 中讀取令牌，預設為 <code>XSRF-TOKEN</code>，並將其設定為 HTTP 標頭 <code>X-XSRF-TOKEN</code>。因為只有在你的域上執行的程式碼才能讀取 cookie，這樣後端就可以確定 HTTP 請求來自你的用戶端程式而不是攻擊者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"62cbkl8t2muylxpcvz9c9vkk0\">預設情況下，攔截器會在所有的修改型請求中（比如 POST 等）把這個請求頭傳送給使用相對 URL 的請求。但不會在 GET/HEAD 請求中傳送，也不會傳送給使用絕對 URL 的請求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55usq8wxpv5sq70xlmd1jr23b\">要獲得這種優點，你的伺服器需要在頁面載入或首個 GET 請求中把一個名叫 <code>XSRF-TOKEN</code> 的標記寫入可被 JavaScript 讀到的會話 cookie 中。而在後續的請求中，伺服器可以驗證這個 cookie 是否與 HTTP 頭 <code>X-XSRF-TOKEN</code> 的值一致，以確保只有執行在你自己網域名稱下的程式碼才能發起這個請求。這個標記必須對每個使用者都是唯一的，並且必須能被伺服器驗證，因此不能由用戶端自己生成標記。把這個標記設定為你的站點認證訊息並且加了鹽（salt）的摘要，以提升安全性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"claya94hd1mz406slxkaobnfb\">為了防止多個 Angular 應用共享同一個網域名稱或子域時出現衝突，要給每個應用分配一個唯一的 cookie 名稱。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eglbf5r2igfg88hmaud3dl70h\"><em><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 僅支援受 XSRF 保護的用戶端部分</em>。後端服務必須設定為能夠為頁面設定 cookie，並驗證在所有符合條件的請求中是否存在該標頭。如果後端服務未能正確設定它們，則會讓 Angular 的預設保護失效。</p>\n</div>\n<h2 id=\"configure-custom-cookieheader-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68mssphxsumko4pwjlf7cwt2m\">設定自定義 cookie/標頭名稱<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-security-xsrf-protection#configure-custom-cookieheader-names\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1l2zcuui4ijcaobty18rw6ytr\">如果你的後端服務中對 XSRF 標記的 cookie 或頭使用了不一樣的名字，就要使用 <code><a href=\"api/common/http/HttpClientXsrfModule#withOptions\" class=\"code-anchor\">HttpClientXsrfModule.withOptions()</a></code> 來覆蓋掉預設值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlylricw7qh3svigxk9k2ylaj\">將其新增到\n<code>app.config.ts</code>中\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>的\n<code>providers</code>陣列中，如下所示：</p>\n<code-example header=\"app.config.ts (excerpt)\" path=\"http/src/app/app.config.ts\" region=\"xsrf\">\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [\n    <a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a>(<a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>),\n    <a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a>(\n        HttpClientXsrfModule.withOptions({\n        cookieName: 'My-Xsrf-Cookie',\n        headerName: 'My-Xsrf-Header',\n      })\n    ),\n  ]\n};\n\n\n</code-example>\n<p><a id=\"testing-requests\"></a></p>\n\n  <div class=\"reviewed\">最後複查時間：Wed Aug 16 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/security\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient\n - api/common/http/HttpClientModule\n - api/common/http/HttpClientXsrfModule#withOptions\n - api/core/ApplicationConfig\n - api/core/importProvidersFrom\n - guide/http-security-xsrf-protection#configure-custom-cookieheader-names\n - guide/http-security-xsrf-protection#http-client---security-cross-site-request-forgery-xsrf-protection\n - https://en.wikipedia.org/wiki/Cross-site_request_forgery\n - https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-header_token\n-->"}
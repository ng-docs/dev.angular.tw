{"id":"guide/service-worker-intro","title":"Angular 的 Service Worker 简介","contents":"<div class=\"content\">\n  <h1 id=\"angular-service-worker-introduction\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5bxudog612cer74evhk8xnrq2\">Angular 的 Service Worker 简介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-intro#angular-service-worker-introduction\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3q4ea0xplioo8hnmivqe69q1f\">Service Worker 可以增强传统的 Web 发布模式，并使应用程序能够提供可与原生代码（它运行在你的操作系统和硬件层面）媲美的高可靠、高性能的用户体验。为 Angular 应用添加 Service Worker 是把应用转换成<a href=\"https://web.dev/progressive-web-apps/\">渐进式应用（PWA）</a>的步骤之一。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lz37fhq89j237yc6b926q0m6\">简单来说，Service Worker 就是一段运行在 Web 浏览器中，并为应用管理缓存的脚本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edo9cfg6asy9ob8mg81himybi\">Service Worker 的功能就像一个网络代理。它们会拦截所有由应用发出的 HTTP 请求，并选择如何给出响应。比如，它们可以查询局部缓存，如果有缓存的响应数据，就用它做出响应。这种代理行为不会局限于通过程序调用 API（比如 <code>fetch</code>）发起的请求，还包括 HTML 中对资源的引用，甚至对 <code>index.html</code> 的首次请求。基于 Service Worker 的缓存是完全可编程的，并且不依赖于服务端指定的那些控制缓存策略的头。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bothubejt9fayj1j0mhdsukqh\">不像应用中的其它脚本（如 Angular 的应用包），Service Worker 在用户关闭浏览器页标签时仍然会被保留。下次浏览器加载本应用时，Service Worker 会首先加载，然后拦截加载本应用时的对每一项资源的请求。如果这个 Service Worker 就是为此而设计的，它就能<em>完全满足应用加载时的需求，而不需要依赖网络</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zj6vrzlpjw01kuqje20lpo41\">即使在快速可靠的网络中，往返延迟也可能在加载应用程序时产生显著的延迟。使用 Service Worker 来减少对网络的依赖可以显著改善用户体验。</p>\n<h2 id=\"service-workers-in-angular\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"710ds2h0tru0c4kiixhs9s64b\">Angular 中的 Service Worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-intro#service-workers-in-angular\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"634g04oo0jaky8ehgjabtoix0\">作为单页面应用，Angular 应用可以受益于 Service Worker 的优势。从版本 5.0.0 开始，Angular 提供了一份 Service Worker 的实现。Angular 开发人员可以利用 Service Worker，并受益于其增强的可靠性和性能，而无需再针对底层 API 写代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9oy05jvwnfpr6arldgeokhrh2\">Angular 的 Service Worker 的设计目标是优化那些使用慢速、不可靠网络的最终用户的体验，同时还要尽可能减小提供过期内容的风险。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4c5jvhj821vgpitgtw0iu8w5a\">为了达成此目标，Angular Service Worker 的行为遵循下列设计原则：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"523y9d3cigv006mldr4odjivd\">像安装原生应用一样缓存应用。该应用作为整体被缓存，它的所有文件作为整体进行更新。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2a43ht6ffnecfowatjmfe3vn6\">正在运行的应用使用所有文件的同一版本继续运行。不要突然开始接收来自新版本的、可能不兼容的缓存文件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83cksvq0m81j2vqlcx3xval6c\">当用户刷新本应用时，他们会看到最新的被完全缓存的版本。新的页标签中会加载最新的缓存代码。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c39487t6ynzaobdayv4h5nmdv\">在更改发布之后，相对较快的在后台进行更新。在一次完整的更新完成之前，仍然使用应用的上一个版本。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fkugy8iryoxbi8qq6b89zikd\">只要有可能，Service Worker 就会尽量节省带宽。它只会下载那些发生了变化的资源。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14ablj9xlftso5fm3nk3sb49a\">要支持这些行为，Angular 的 Service Worker 会从服务器上下载一个 <code>manifest</code> 文件。\n这个 <code>manifest</code> 文件（不同于 <a href=\"https://developer.mozilla.org/docs/Web/Manifest\">web 应用的 manifest</a>）描述要缓存的资源，并包含每个文件内容的哈希值。\n当发布了应用的一个新版本时，<code>manifest</code> 的内容就会改变，通知 Service Worker 应该下载并缓存应用的一个新版本了。\n这个 manifest 是从 CLI 生成的一个名叫 <code>ngsw-config.json</code> 的文件中生成的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80bv3hocnqmqnknlaqx6zb5xj\">安装 Angular 服务工作者与\n<a href=\"guide/service-worker-getting-started#cli-command\">运行 Angular CLI 命令</a>一样简单直接。 除了将 Angular 服务工作者注册到浏览器中，这还提供了一些可用于注入的服务，这些服务与服务工作者进行交互，可以用于控制它。 例如，应用程序可以请求在新更新可用时收到通知，或者应用程序可以请求服务工作者检查服务器是否有可用更新。</p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-intro#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3433byl2e3k9oafcrul46yv16\">要使用 Angular Service Worker 的所有功能，请使用最新版本的 Angular 和 Angular CLI。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"baidqwaylokdfppqusuwn04zz\">要注册 Service Worker，必须通过 HTTPS 而非 HTTP 访问该应用程序。浏览器会忽略通过不安全连接访问的页面上的 Service Worker。原因是 Service Worker 非常强大，因此需要格外小心，以确保 Service Worker 的脚本未被篡改。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1nxs7o2r5dtov15vcy2yjr9ip\">这条规则有一个例外：为了方便本地开发，当访问 <code>localhost</code> 上的应用时，浏览器<em>不</em>要求安全连接。</p>\n<h3 id=\"browser-support\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kdi5razdf2rr2s146m9cpxqe\">浏览器支持<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-intro#browser-support\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1geu4xsjg9juavguha1ya06c\">要从 Angular Service Worker 中受益，你的应用必须在支持 Service Worker 的 Web 浏览器中运行。当前，最新版本的 Chrome，Firefox，Edge，Safari，Opera，UC 浏览器（Android 版）和 Samsung Internet 支持 Service Worker。而 IE 和 Opera Mini 等浏览器不支持 Service Worker。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ko25vlaz56idtdbtyhtm742a\">如果用户通过不支持 Service Worker 的浏览器访问你的应用程序，则该 Service Worker 不会注册，并且不会发生相关行为，比如脱机缓存管理和推送通知。进一步来说：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azmreq7rov08wecnek7j2t634\">浏览器不会下载 Service Worker 脚本和 <code>ngsw.json</code> 清单文件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7l4s2d68pf6semepei94vrw95\">主动尝试与 Service Worker 进行交互，比如调用 <code><a href=\"api/service-worker/SwUpdate#checkForUpdate\" class=\"code-anchor\">SwUpdate.checkForUpdate()</a></code>，会返回被拒绝的承诺（Promise）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5euowedp2r6kb4rjlf3i1w384\">相关服务的可观察事件，比如\n<code><a href=\"api/service-worker/SwUpdate#versionUpdates\" class=\"code-anchor\">SwUpdate.versionUpdates</a></code>，不会被触发</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ywxpoqwk9ky1wk5120t8kp9w\">强烈建议你确保即使在浏览器中没有 Service Worker 支持的情况下，你的应用也可以正常运行。尽管不受支持的浏览器会忽略 Service Worker 缓存，但如果应用程序尝试与 Service Worker 进行交互，它将仍然会报告错误。比如，调用 <code><a href=\"api/service-worker/SwUpdate#checkForUpdate\" class=\"code-anchor\">SwUpdate.checkForUpdate()</a></code> 将返回被拒绝的 Promise。为避免此类错误，你可以使用 <code><a href=\"api/service-worker/SwUpdate#isEnabled\" class=\"code-anchor\">SwUpdate.isEnabled</a>()</code> 检查是否启用了 Angular Service Worker。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vpf89s1whzmd9nuosj8d0bv2\">要了解关于其它支持 Service Worker 的浏览器的更多信息，请参阅 <a href=\"https://caniuse.com/#feat=serviceworkers\">Can I Use</a> 页面和 <a href=\"https://developer.mozilla.org/docs/Web/API/Service_Worker_API\">MDN 文档</a>。</p>\n<h2 id=\"related-resources\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e69igq8a2xsab77xsoqacateg\">相关资源<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-intro#related-resources\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8wtp2ock1z28kah31dhqr03o9\">本节中的其余文章专门针对 Service Worker 的 Angular 实现。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3chpa91gkd8kngrnffrmr754r\"><a href=\"guide/service-worker-communications\">与 Service Worker 通讯</a>.</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53swk0yxrhfk9vwssqxhoeq0i\"><a href=\"guide/service-worker-notifications\">Service Worker 通知</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8h34vd4o8r9mh6u20crmuohp\"><a href=\"guide/service-worker-devops\">生产环境下的 Service Worker</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ew4ab2vokoabifajmxtyb01m1\"><a href=\"guide/service-worker-config\">Service Worker 配置</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"euc8u4m04wpqm4u3h2eqnb0fp\"><a href=\"guide/app-shell\">应用外壳</a></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9m70jbhou0ahqw1ybx9ybahxp\">要了解更多关于 Service Worker 的普遍性信息，参阅 <a href=\"https://developers.google.com/web/fundamentals/primers/service-workers\">Service Worker 简介</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e32buagb950sdih3dokjays7m\">要了解关于浏览器支持度的更多信息，参阅 <a href=\"https://developers.google.com/web/fundamentals/primers/service-workers\">Service Worker 简介</a> 中的<a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/#browser_support\">浏览器支持</a>部分、Jake Archibald 写的<a href=\"https://jakearchibald.github.io/isserviceworkerready\">Serviceworker 好了吗？</a>和 <a href=\"https://caniuse.com/serviceworkers\">Can I Use</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45u3qlmptdvepsf3s5wqucnpw\">关于其它建议和范例，请参阅：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chl023blm7karzv4b1gwezzg1\"><a href=\"https://web.dev/precaching-with-the-angular-service-worker\">使用 Angular Service Worker 进行预缓存</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1okxbi7w7zysugl5h944zx3e4\"><a href=\"https://web.dev/creating-pwa-with-angular-cli\">使用 Angular CLI 创建 PWA</a></li>\n</ul>\n<h2 id=\"next-step\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bio9f6q0dnpxej0ntev8d0cqg\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-intro#next-step\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2axvbmyo06sfe9h7iixy2u9ci\">要开始使用 Angular service Worker，参阅 <a href=\"guide/service-worker-getting-started\">Service Worker 快速上手</a>。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Wed Sep 06 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/service-worker\n - guide/architecture-next-steps\n - guide/developer-guide-overview\n - guide/glossary\n - guide/libraries\n - guide/service-worker-getting-started\n - guide/what-is-angular\n-->\n<!-- links from this doc:\n - api/service-worker/SwUpdate#checkForUpdate\n - api/service-worker/SwUpdate#isEnabled\n - api/service-worker/SwUpdate#versionUpdates\n - guide/app-shell\n - guide/service-worker-communications\n - guide/service-worker-config\n - guide/service-worker-devops\n - guide/service-worker-getting-started\n - guide/service-worker-getting-started#cli-command\n - guide/service-worker-intro#angular-service-worker-introduction\n - guide/service-worker-intro#browser-support\n - guide/service-worker-intro#next-step\n - guide/service-worker-intro#prerequisites\n - guide/service-worker-intro#related-resources\n - guide/service-worker-intro#service-workers-in-angular\n - guide/service-worker-notifications\n - https://caniuse.com/#feat=serviceworkers\n - https://caniuse.com/serviceworkers\n - https://developer.mozilla.org/docs/Web/API/Service_Worker_API\n - https://developer.mozilla.org/docs/Web/Manifest\n - https://developers.google.com/web/fundamentals/primers/service-workers\n - https://developers.google.com/web/fundamentals/primers/service-workers/#browser_support\n - https://jakearchibald.github.io/isserviceworkerready\n - https://web.dev/creating-pwa-with-angular-cli\n - https://web.dev/precaching-with-the-angular-service-worker\n - https://web.dev/progressive-web-apps/\n-->"}
{"id":"guide/schematics","title":"原理图（Schematic）","contents":"<div class=\"content\">\n  <h1 id=\"generating-code-using-schematics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3btkttbvwr2a8ls0scu3tums3\">原理图（Schematic）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics#generating-code-using-schematics\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjteuka9bcm1ldofdtam1os8w\">原理图是一个基于模板的支持复杂逻辑的代码生成器。它是一组通过生成代码或修改代码来转换软件项目的指令。原理图会打包成<a href=\"guide/glossary#collection\">集合（collection）</a>并用 npm 安装。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7d4meubxk8be69hazn13d6ktl\">原理图的集合可以作为一个强大的工具，以创建、修改和维护任何软件项目，特别是当要自定义 Angular 项目以满足你自己组织的特定需求时。比如，你可以借助原理图来用预定义的模板或布局生成常用的 UI 模式或特定的组件。也可以用原理图来强制执行架构规则和约定，让你的项目保持一致性和互操作性。</p>\n<h2 id=\"schematics-for-the-angular-cli\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zcrhn07afazk2x36uxusbbki\">Angular CLI 中的原理图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics#schematics-for-the-angular-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33a75y8v0ibjvadvar6ccty24\">原理图是 Angular 生态系统的一部分。<a href=\"guide/glossary#cli\">Angular CLI</a> 使用原理图对 Web 应用项目进行转换。你可以修改这些原理图，并定义新的原理图，比如更新代码以修复依赖中的重大变更，或者把新的配置项或框架添加到现有的项目中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mc7vc6b6mohghgcejob946gp\"><code>@schematics/angular</code> 集合中的原理图是 <code>ng generate</code> 和 <code>ng add</code> 命令的默认原理图。此包里包含一些有名字的原理图，可用于配置 <code>ng generate</code> 子命令的选项，比如 <code>ng generate component</code> 和 <code>ng generate service</code>。<code>ng generate</code> 的子命令是相应原理图的简写。可以用长格式来指定并生成特定的原理图或原理图集合：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate my-schematic-collection:my-schematic-name\n\n</code-example>\n<p>or</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate my-schematic-name --collection collection-name\n\n</code-example>\n<h3 id=\"configuring-cli-schematics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cr90wct719wr55gx7papbkan6\">配置 CLI 的原理图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics#configuring-cli-schematics\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"diuavpiijqdm2ruw8z2hiye9g\">与原理图相关联的 JSON 模式会告诉 Angular CLI 命令和子命令都有哪些选项以及默认值。这些默认值可以通过在命令行中为该选项提供不同的值来进行覆盖。要了解如何更改代码生成选项的默认值，请参阅“ <a href=\"guide/workspace-config\">工作区配置</a> ”。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkf3lpa3j24w5uy1eorlv87jx\">CLI 中那些用来生成项目及其部件的默认原理图，其 JSON 模式收集在 <a href=\"https://github.com/angular/angular-cli/tree/main/packages/schematics/angular\"><code>@schematics/angular</code></a> 包中。该模式描述了 CLI 中每个可用的 <code>ng generate</code> 子命令选项，如 <code>--help</code> 输出中所示。</p>\n<h2 id=\"developing-schematics-for-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23ra3v25urenaxo0uzflioaqs\">编写库的原理图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics#developing-schematics-for-libraries\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"287bu4ahbrolhqsla9jvukilf\">作为一名库开发人员，你可以创建自己的自定义原理图集合，以便把你的库与 Angular CLI 集成在一起。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jpcpfafanoi2t7fuv2le0s9r\"><em>添加（Add）原理图</em>允许开发人员使用 <code>ng add</code> 在 Angular 工作区中安装你的库</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ugrqq3d0chql9j6gxbzu7jce\"><em>生成（Generation）原理图</em>可以告诉 <code>ng generate</code> 子命令如何修改项目、添加配置和脚本，以及为库中定义的工件提供脚手架</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8sxgdepymoiiwds2o0hn4g90o\"><em>更新（Update）原理图</em>可以告诉 <code>ng update</code> 命令，如何更新库的依赖，并在发布新版本时调整其中的重大变更</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9heoq0m2ys41owkurg88ymcqm\">要了解它们的更多细节以及如何创建它们，请参阅：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csqr93mkx5rkvx296t4akijws\"><a href=\"guide/schematics-authoring\">创作原理图</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pz0vhjikj3onyr80n0p286su\"><a href=\"guide/schematics-for-libraries\">库的原理图</a></li>\n</ul>\n<h3 id=\"add-schematics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1uliry5rqpukkxboad4h56lcs\">添加（Add）原理图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics#add-schematics\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8oc1ol1nmy3up80chur6ny1bv\">库中通常都会提供一个添加原理图，以便通过 <code>ng add</code> 把这个库添加到现有项目中。<code>add</code> 命令会运行包管理器来下载新的依赖，并调用一个原理图形式的安装脚本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"berjas5wj40p3k409pb8xg5bf\">比如，<a href=\"https://material.angular.cn/guide/schematics\"><code>@angular/material</code></a> 原理图会要求 <code>add</code> 命令安装并设置 Angular Material 及其主题，并注册可通过 <code>ng generate</code> 创建的新启动器组件。可以把它作为自己的 \"添加原理图\" 的范例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwjudncrdstgtne8zhgfl9wd7\">合作伙伴和第三方库也可以通过添加原理图来支持 Angular CLI。比如，<code>@ng-bootstrap/schematics</code> 会把 <a href=\"https://ng-bootstrap.github.io\">ng-bootstrap</a> 添加到应用中，<code>@clr/angular</code> 会安装并设置 <a href=\"https://clarity.design/documentation/get-started\">VMWare 的 Clarity</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"564sl7l3duwirfq7qmwyduk8i\">\"添加原理图\" 还可以通过更改配置、添加额外依赖（比如腻子脚本），或者添加程序包特有的初始化代码来修改项目。比如，<code>@angular/pwa</code> 原理图会通过添加一个应用清单（manifest）和 Service Worker。</p>\n<h3 id=\"generation-schematics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4f73cdsbwzai2nhyuoo5yooyj\">生成（Generation）原理图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics#generation-schematics\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dc5hq5gz5t46hlhdohpbfiq5m\">生成器原理图是 <code>ng generate</code> 的操作指令。那些已经有文档的子命令会使用默认的 Angular 生成器原理图，但你可以在子命令中指定另一个原理图来生成你的库中定义的那些工件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8e6ycx51ektrtyce9l5jd1nu4\">比如，Angular Material 为它定义的一些 UI 组件提供了生成器原理图。下面的命令会使用其中一个原理图来渲染一个 Angular Material 的 <code>&lt;mat-table&gt;</code> 组件，它预先配置了一个用于排序和分页的数据源。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate @angular/material:table &lt;component-name&gt;\n\n</code-example>\n<h3 id=\"update-schematics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83cvt6l7rgrrsy0y3iaklz729\">更新原理图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics#update-schematics\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bwhg8g127rwxu2olns8bpjes\"><code>ng update</code> 命令可以用来更新工作区的库依赖。如果你没有提供任何选项或使用了 help 选项，该命令会检查你的工作区并建议要更新哪些库。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng update\nWe analyzed your package.json, there are some packages to update:\n\n    Name                                      Version                     Command to update\n    ‐-------------------------------------------------------------------------------\n    @angular/cdk                       7.2.2 -&gt; 7.3.1           ng update @angular/cdk\n    @angular/cli                       7.2.3 -&gt; 7.3.0           ng update @angular/cli\n    @angular/core                      7.2.2 -&gt; 7.2.3           ng update @angular/core\n    @angular/material                  7.2.2 -&gt; 7.3.1           ng update @angular/material\n    rxjs                                      6.3.3 -&gt; 6.4.0           ng update rxjs\n\n    There might be additional packages that are outdated.\n    Run \"ng update --all\" to try to update all at the same time.\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22y5e73fmaqr4kz5wubqs5avv\">如果你给这个命令指定一组要更新的库（或 <code>--all</code> 标志），它就会更新这些库、这些库的对等依赖，以及对等依赖的对等依赖。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zqzfp1rz9vb0h56xvo7185hu\">如果存在不一致（比如，如果在某个简单的 <a href=\"https://semver.io\">semver</a> 范围内无法匹配对等依赖），那么该命令会生成一个错误，并且不会更改工作区中的任何内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3mai0s2p1lhlzwqzqi0s8ppdw\">我们建议你不要强制更新所有的依赖项，而应该首先尝试更新特定的依赖项。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erk159jp1ile28kcjm9wxw2em\">关于 <code>ng update</code> 命令工作原理的更多信息，请参阅“<a href=\"https://github.com/angular/angular-cli/blob/main/docs/specifications/update.md\">更新命令”</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aaspnnrl34g0xdfvvp13r72hj\">如果你创建的新版本的库引入了潜在的重大更改，你可以提供一个<em>更新原理图</em>，让 <code>ng update</code> 命令能够自动解决所更新项目中的任何重大修改。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"buam1s1yof7toxwjc6mb60ovp\">比如，假设你要更新 Angular Material 库。</p>\n<code-example format=\"shell\" language=\"shell\">\nng update @angular/material\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"accossa2dmza8l29ksw4dp8ox\">该命令会在你的工作区的 <code>package.json</code> 中更新 <code>@angular/material</code> 及其依赖项 <code>@angular/cdk</code>。如果任何一个包中包含了涵盖从现有版本到新版本的迁移规则的更新原理图，那么该命令就会在你的工作区中运行这个原理图。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/creating-libraries\n - guide/glossary\n - guide/standalone-migration\n - guide/what-is-angular\n - scaling\n-->\n<!-- links from this doc:\n - guide/glossary#cli\n - guide/glossary#collection\n - guide/schematics#add-schematics\n - guide/schematics#configuring-cli-schematics\n - guide/schematics#developing-schematics-for-libraries\n - guide/schematics#generating-code-using-schematics\n - guide/schematics#generation-schematics\n - guide/schematics#schematics-for-the-angular-cli\n - guide/schematics#update-schematics\n - guide/schematics-authoring\n - guide/schematics-for-libraries\n - guide/workspace-config\n - https://clarity.design/documentation/get-started\n - https://github.com/angular/angular-cli/blob/main/docs/specifications/update.md\n - https://github.com/angular/angular-cli/tree/main/packages/schematics/angular\n - https://material.angular.io/guide/schematics\n - https://ng-bootstrap.github.io\n - https://semver.io\n-->"}
{"id":"guide/template-expression-operators","title":"樣板表達運算符","contents":"<div class=\"content\">\n  <h1 id=\"template-expression-operators\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbi882vckerp151ik158mk9k4\">樣板表達運算符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#template-expression-operators\"><i class=\"material-icons\">link</i></a></h1>\n<div class=\"callout is-critical\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4r7c5x5y77wbuducanio6c3fk\">已標記為歸檔</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58k4b2kechaaj13ikfgyyx6om\">為確保你擁有最佳的體驗，本主題已標記為歸檔，直到我們確定其清楚地傳達了最準確的訊息為止。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aozrtn2vasedtzof2srri71ad\">同時，下列主題可能會有所幫助：<a href=\"guide/hierarchical-dependency-injection\">多級注入器</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck2tsrjevyy0r4iofzx0sxxow\">如果你認為不應將此內容歸檔，請送出 <a href=\"https://github.com/angular/angular/issues/new?template=3-docs-bug.md\">GitHub 問題</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9z8zl4f144u7fmuk0owhklqfl\">Angular 樣板表達語言採用了 JavaScript 語法的子集，併為特定情況新增了一些特殊的運算符。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81el5yk7yllx1tewd03bnp7o0\">本章包含程式碼片段的工作實例參閱<live-example></live-example>。</p>\n</div>\n<p><a id=\"non-null-assertion-operator\"></a></p>\n<h2 id=\"the-non-null-assertion-operator-\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c46o8uyt9trzcngqgll9znjfz\">非空斷言運算符（<code>!</code>）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-non-null-assertion-operator-\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zsjdblck440um0mg83sbdryn\">使用 TypeScript 的 <code>--strictNullChecks</code> 標誌時，可以防止型別檢查器使用 Angular 的非空斷言運算符 <code>!</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4e7186l11sgat7c1llusl1mxi\">Angular 非空斷言運算符使 TypeScript 型別檢查器暫停對特定屬性表示式的 <code>null</code> 和 <code>undefined</code> 的嚴格檢查。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7peyq5zn3yxvseutze9t1su6h\">比如，你可以斷言 <code>item</code> 也是已定義的。</p>\n<code-example header=\"src/app/app.component.html\" path=\"template-expression-operators/src/app/app.component.html\" region=\"non-null\">\n&lt;!-- Assert color is defined, even if according to the `Item` type it could be undefined. --&gt;\n&lt;p&gt;The item's color is: {{item.color!.toUpperCase()}}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c56czgpab09tlz5mweam0lwae\">通常，你要確保任何屬性繫結都不為 <code>null</code> 或 <code>undefined</code>。但是，在某些情況下，這種狀態是可以接受的。對於這些情況，可以使用 Angular 的非空斷言運算符來防止 TypeScript 報告某個屬性為 <code>null</code> 或 <code>undefined</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eh6pxiuw0obqf13ogwutydmbu\">非空斷言運算符 <code>!</code> 是可選的，除非你要啟用嚴格的空檢查。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alqaxqvz8lq4yf3uiukb6wkh\">有關更多訊息，請參見 TypeScript 的<a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\" title=\"TypeScript 中嚴格的 null 檢查\">嚴格空檢查</a>。</p>\n<p><a id=\"any-type-cast-function\"></a></p>\n<h2 id=\"the-any-type-cast-function\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ghhx0yacoebuyks40go2fpoo\"><code>$any()</code> 型別轉換函式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-any-type-cast-function\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wgibk8dx77d2wd2encb6a1u3\">有時，繫結表示式會在 <a href=\"guide/aot-compiler\">AOT 編譯</a>期間觸發型別錯誤，並且不可能或很難完全指定型別。要使此錯誤靜音，可以使用 <code>$any()</code> 強制轉換函式把表示式強制轉換為 <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#any\"><code>any</code> 型別</a>，如下例所示：</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-1\">\n&lt;p&gt;The item's undeclared best by date is: {{$any(item).bestByDate}}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9k38b6go1rpersed7t9ui9yq\">使用 <code>$any()</code> 可以防止 TypeScript 報告 <code>bestByDate</code> 不是 <code>item</code> 物件成員的錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gtr5egj086ubzhag9szmd50d\"><code>$any()</code> 強制轉換函式也可以與 <code>this</code> 一起使用，以允許訪問元件的未宣告成員。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-2\">\n&lt;p&gt;The item's undeclared best by date is: {{$any(this).bestByDate}}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84zmdluwepqckmkfg5wpue1c4\"><code>$any()</code> 強制轉換函式可在繫結表示式中任何進行方法呼叫的地方使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6h8jg57qrz7twrb971bsau9p9\">還要注意 <code>$any()</code> 隻影響型別。生成的程式碼中沒有此方法呼叫；<code>$any()</code> 函式完全被編譯掉了。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/aot-compiler\n - guide/binding-overview\n - guide/example-apps-list\n - guide/template-syntax\n - guide/template-typecheck\n - guide/understanding-template-expr-overview\n-->\n<!-- links from this doc:\n - guide/aot-compiler\n - guide/hierarchical-dependency-injection\n - guide/template-expression-operators#template-expression-operators\n - guide/template-expression-operators#the-any-type-cast-function\n - guide/template-expression-operators#the-non-null-assertion-operator-\n - http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\n - https://github.com/angular/angular/issues/new?template=3-docs-bug.md\n - https://www.typescriptlang.org/docs/handbook/basic-types.html#any\n-->"}
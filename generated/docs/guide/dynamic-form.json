{"id":"guide/dynamic-form","title":"建立動態表單","contents":"<div class=\"content\">\n  <h1 id=\"building-dynamic-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqaxfplp6qxrifboo3fit1xgq\">建立動態表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#building-dynamic-forms\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bb67cdj5yzx3py93io7phyky\">許多表單（比如問卷）可能在格式和意圖上都非常相似。為了更快更輕鬆地生成這種表單的不同版本，你可以根據描述業務物件模型的元資料來建立<em>動態表單範本</em>。然後就可以根據資料模型中的變化，使用該範本自動生成新的表單。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pbw86bxfbfwfmqyvkcsug1j6\">如果你有這樣一種表單，其內容必須經常更改以滿足快速變化的業務需求和監管需求，該技術就特別有用。一個典型的例子就是問卷。你可能需要在不同的上下文中獲取使用者的意見。使用者要看到的表單格式和樣式應該保持不變，而你要提的實際問題則會因上下文而異。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2n4fee4wdbap5mkl03qcy2eqa\">在本教學課程中，你會建立一個渲染基本問卷的動態表單。你要為正在找工作的英雄們建立一個線上應用。英雄管理局會不斷修補應用流程，但是藉助動態表單，你可以動態建立新的表單，而無需修改應用程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jd1bfnfz46dayfz87rs41abg\">本教學課程將指導你完成以下步驟。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d66rx3b8pfwfkioypqqs1exk1\">為專案啟用回應式表單。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16z7gjkzana2h14l1yia5y47g\">建立一個資料模型來表示表單控制元件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cbcbzq5hgvq6nokjqc82aao7\">使用範例資料填充模型。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2miiy83x8wq2ebgz21pltnqkc\">開發一個元件來動態建立表單控制元件。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7iimyn93ypmi90cfopw4butoz\">你建立的表單會使用輸入驗證和樣式來改善使用者體驗。它有一個 Submit 按鈕，這個按鈕只會在所有的使用者輸入都有效時啟用，並用色彩和一些錯誤訊息來標記出無效輸入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2y35bsb1vcj2al43qe5engnsi\">這個基本版可以不斷演進，以支援更多的問題型別、更優雅的渲染體驗以及更高大上的使用者體驗。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zyqrkx2stlg7xx1sbs50qvq0\">參閱 <live-example name=\"dynamic-form\"></live-example>。</p>\n</div>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7h9zdymz2ncau11inrdi26af5\">在做本教學課程之前，你應該對下列內容有一個基本的瞭解。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hvl8rjzxrmac41qpao60jlv6\"><a href=\"https://www.typescriptlang.org/\" title=\"TypeScript 語言\">TypeScript</a>和 HTML5 程式設計</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dwhsxhtmly22t5m509dl5936\"><a href=\"guide/architecture\" title=\"Angular 應用設計概念簡介\">Angular 應用設計</a>的基本概念</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cp8qretw0bils1jwkakwf2dz\"><a href=\"guide/reactive-forms\" title=\"反應表單指南\">回應式表單</a>的基礎知識</li>\n</ul>\n<h2 id=\"enable-reactive-forms-for-your-project\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tbevbc12oy6rz8uurfwjqzxv\">為專案啟用回應式表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#enable-reactive-forms-for-your-project\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er6cgny8qq6l9waizhhd04pud\">動態表單基於回應式表單。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ycaan095gamncuu7fnc7i433\">為了讓應用程式訪問回應式表單指令，從\n<code>@angular/forms</code>函式庫中匯入\n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>到必要的元件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s9dl2g3xc4w52poq1gh6o72c\">以下程式碼展示了此範例在根模組中所做的設定。</p>\n<code-tabs>\n    <code-pane header=\"dynamic-form.component.ts\" path=\"dynamic-form/src/app/dynamic-form.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>} from '@angular/core';\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\nimport {<a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>} from '@angular/forms';\n\nimport {DynamicFormQuestionComponent} from './dynamic-form-question.component';\n\nimport {QuestionBase} from './question-base';\nimport {QuestionControlService} from './question-control.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [QuestionControlService],\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, DynamicFormQuestionComponent, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>],\n})\nexport class DynamicFormComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() questions: QuestionBase&lt;string&gt;[] | null = [];\n  form!: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  payLoad = '';\n\n  constructor(private qcs: QuestionControlService) {}\n\n  ngOnInit() {\n    this.form = this.qcs.toFormGroup(this.questions as QuestionBase&lt;string&gt;[]);\n  }\n\n  onSubmit() {\n    this.payLoad = JSON.stringify(this.form.getRawValue());\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"dynamic-form-question.component.ts\" path=\"dynamic-form/src/app/dynamic-form-question.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>} from '@angular/core';\nimport {<a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>} from '@angular/forms';\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n\nimport {QuestionBase} from './question-base';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-question',\n  templateUrl: './dynamic-form-question.component.html',\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>],\n})\nexport class DynamicFormQuestionComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() question!: QuestionBase&lt;string&gt;;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() form!: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  get isValid() {\n    return this.form.controls[this.question.key].valid;\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"object-model\"></a></p>\n<h2 id=\"create-a-form-object-model\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7w7wngysiep2zf5xbh4hdm8g\">建立一個表單物件模型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#create-a-form-object-model\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2j87n9le0ayzrpftqb6rni65l\">動態表單需要一個物件模型來描述此表單功能所需的全部場景。英雄應用表單中的例子是一組問題 - 也就是說，表單中的每個控制元件都必須提問並接受一個答案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1z90smvcfkrbd1v50ylk1vwxv\">這種型別表單的資料模型必須表示一個問題。 範例包括\n<code>DynamicFormQuestionComponent</code>，將問題定義為模型中的基本物件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79rdaglhcztrjy3alre4u0q8c\">這個 <code>QuestionBase</code> 是一組控制元件的基底類別，可以在表單中表示問題及其答案。</p>\n<code-example header=\"src/app/question-base.ts\" path=\"dynamic-form/src/app/question-base.ts\">\nexport class QuestionBase&lt;T&gt; {\n  value: T|undefined;\n  key: string;\n  label: string;\n  required: boolean;\n  order: number;\n  controlType: string;\n  type: string;\n  options: {key: string, value: string}[];\n\n  constructor(options: {\n      value?: T;\n      key?: string;\n      label?: string;\n      required?: boolean;\n      order?: number;\n      controlType?: string;\n      type?: string;\n      options?: {key: string, value: string}[];\n    } = {}) {\n    this.value = options.value;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.required = !!options.required;\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n    this.type = options.type || '';\n    this.options = options.options || [];\n  }\n}\n\n\n</code-example>\n<h3 id=\"define-control-classes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dijsuxtfg25zvw12fq9h5gsgp\">定義控制元件類別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#define-control-classes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvfdnu55ou37qqh2p0oznu8bz\">此範例從這個基底類別派生出兩個新類別，<code>TextboxQuestion</code> 和 <code>DropdownQuestion</code>，分別代表不同的控制元件型別。當你在下一步中建立表單範本時，你會實例化這些具體的問題類別，以便動態渲染相應的控制元件。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu4f3kq8ip5zd6abrfs4mcnbg\">控制元件型別</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9r8x4hymzrvm49p23s358jgk\"><code>TextboxQuestion</code> 控制元件型別</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etap2wok694610wei85kdlj6v\">提供一個問題並允許使用者輸入。 \n<code-example header=\"src/app/question-textbox.ts\" path=\"dynamic-form/src/app/question-textbox.ts\">\n  import { QuestionBase } from './question-base'; export class TextboxQuestion extends QuestionBase&lt;string&gt; { override controlType = 'textbox'; } \n</code-example> \n<code>TextboxQuestion</code> 控制元件型別在表單範本中使用 \n<code>&lt;input&gt;</code> 元素表示。該元素的 \n<code>type</code> 屬性根據在 \n<code>options</code> 引數中指定的 \n<code>type</code> 欄位來定義（例如 \n<code>text</code>、\n<code><a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a></code>、\n<code>url</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o3onqnirt3ktv0fqs3rnm6y5\"><code>DropdownQuestion</code> 控制元件型別</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3mpscdzys9qzrn5s7044swlm\">在下拉框中呈現一組選項。 \n<code-example header=\"src/app/question-dropdown.ts\" path=\"dynamic-form/src/app/question-dropdown.ts\">\n  import { QuestionBase } from './question-base'; export class DropdownQuestion extends QuestionBase&lt;string&gt; { override controlType = 'dropdown'; } \n</code-example></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"compose-form-groups\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cp207aq696qpb6gb1oi83urn\">編寫表單組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#compose-form-groups\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aaj7mkn4kp0fz1e5jw6ybuomn\">動態表單會使用一個服務來根據表單模型建立輸入控制元件的分組集合。下面的 <code>QuestionControlService</code> 會收集一組 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 實例，這些實例會消費問題模型中的元資料。你可以指定一些預設值和驗證規則。</p>\n<code-example header=\"src/app/question-control.service.ts\" path=\"dynamic-form/src/app/question-control.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms';\n\nimport { QuestionBase } from './question-base';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class QuestionControlService {\n  toFormGroup(questions: QuestionBase&lt;string&gt;[] ) {\n    const group: any = {};\n\n    questions.forEach(question =&gt; {\n      group[question.key] = question.required ? new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(question.value || '', Validators.required)\n                                              : new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(question.value || '');\n    });\n    return new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>(group);\n  }\n}\n\n\n</code-example>\n<p><a id=\"form-component\"></a></p>\n<h2 id=\"compose-dynamic-form-contents\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck8b0173q7ku3r97i6pc36ftt\">編寫動態表單內容<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#compose-dynamic-form-contents\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xkb4xcpx1bbniiy7pdbtchbp\">動態表單本身就是一個容器組件，稍後你會新增它。每個問題都會在表單元件的範本中用一個 <code>&lt;app-question&gt;</code> 標籤表示，該標籤會對應 <code>DynamicFormQuestionComponent</code> 中的一個實例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"211lcu1rid09d8q0f0qb05gv5\"><code>DynamicFormQuestionComponent</code> 負責根據資料繫結的問題物件中的各種值來渲染單個問題的詳情。該表單依靠 <a href=\"api/forms/FormGroupDirective\" title=\"API 參考\"><code>[formGroup]</code> 指令</a>來將範本 HTML 和底層的控制元件物件聯絡起來。<code>DynamicFormQuestionComponent</code> 會建立表單組，並用問題模型中定義的控制元件來填充它們，並指定顯示和驗證規則。</p>\n<code-tabs>\n    <code-pane header=\"dynamic-form-question.component.html\" path=\"dynamic-form/src/app/dynamic-form-question.component.html\">\n&lt;div [formGroup]=\"form\"&gt;\n  &lt;label [attr.for]=\"question.key\"&gt;{{question.label}}&lt;/label&gt;\n\n  &lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"question.controlType\"&gt;\n\n    &lt;input *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'textbox'\" [<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"question.key\"\n            [id]=\"question.key\" [type]=\"question.type\"&gt;\n\n    &lt;select [id]=\"question.key\" *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'dropdown'\" [<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"question.key\"&gt;\n      &lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let opt of question.options\" [value]=\"opt.key\"&gt;{{opt.value}}&lt;/option&gt;\n    &lt;/select&gt;\n\n  &lt;/div&gt;\n\n  &lt;div class=\"errorMessage\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!isValid\"&gt;{{question.label}} is required&lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"dynamic-form-question.component.ts\" path=\"dynamic-form/src/app/dynamic-form-question.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>} from '@angular/core';\nimport {<a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>} from '@angular/forms';\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n\nimport {QuestionBase} from './question-base';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-question',\n  templateUrl: './dynamic-form-question.component.html',\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>],\n})\nexport class DynamicFormQuestionComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() question!: QuestionBase&lt;string&gt;;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() form!: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  get isValid() {\n    return this.form.controls[this.question.key].valid;\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3jilllrh1wc6pavs5148k0u7\"><code>DynamicFormQuestionComponent</code> 的目標是展示模型中定義的各類別問題。你現在只有兩類別問題，但可以想象將來還會有更多。範本中的 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 語句會決定要顯示哪種型別的問題。這裡用到了帶有 <a href=\"api/forms/FormControlName\" title=\"FormControlName 指令的 API Reference 參考\"><code>formControlName</code></a> 和<a href=\"api/forms/FormGroupDirective\" title=\"FormGroupDirective API 參考指南\"><code>formGroup</code></a> 選擇器的指令。這兩個指令都是在 <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> 中定義的。</p>\n<p><a id=\"questionnaire-data\"></a></p>\n<h3 id=\"supply-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4dy2ufbimugdsfxnxhoucbgq\">提供資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#supply-data\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8iwpexu0jf236ufwmudgny5j8\">還要另外一項服務來提供一組具體的問題，以便建立出一個單獨的表單。在本練習中，你將建立 <code>QuestionService</code> 以從硬編碼的範例資料中提供這組問題。在真實世界的應用中，該服務可能會從後端獲取資料。重點是，你可以完全透過 <code>QuestionService</code> 回傳的物件來控制英雄的求職申請問卷。要想在需求發生變化時維護問卷，你只需要在 <code>questions</code> 陣列中新增、更新和刪除物件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7vk49wcq398q7ovtwouobcsj9\"><code>QuestionService</code> 以一個繫結到 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 的問題陣列的形式提供了一組問題。</p>\n<code-example header=\"src/app/question.service.ts\" path=\"dynamic-form/src/app/question.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { DropdownQuestion } from './question-dropdown';\nimport { QuestionBase } from './question-base';\nimport { TextboxQuestion } from './question-textbox';\nimport { of } from 'rxjs';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class QuestionService {\n\n  // TODO: get from a remote source of question metadata\n  getQuestions() {\n\n    const questions: QuestionBase&lt;string&gt;[] = [\n\n      new DropdownQuestion({\n        key: 'brave',\n        label: 'Bravery Rating',\n        options: [\n          {key: 'solid',  value: 'Solid'},\n          {key: 'great',  value: 'Great'},\n          {key: 'good',   value: 'Good'},\n          {key: 'unproven', value: 'Unproven'}\n        ],\n        order: 3\n      }),\n\n      new TextboxQuestion({\n        key: 'firstName',\n        label: 'First name',\n        value: 'Bombasto',\n        required: true,\n        order: 1\n      }),\n\n      new TextboxQuestion({\n        key: 'emailAddress',\n        label: 'Email',\n        type: '<a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>',\n        order: 2\n      })\n    ];\n\n    return of(questions.sort((a, b) =&gt; a.order - b.order));\n  }\n}\n\n\n</code-example>\n<p><a id=\"dynamic-template\"></a></p>\n<h2 id=\"create-a-dynamic-form-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fkafw9rdgutpwejmlktptm2o\">建立一個動態表單範本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#create-a-dynamic-form-template\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29cdtrnogmioykoa2pdvpupw1\"><code>DynamicFormComponent</code> 元件是表單的入口點和主容器，它在範本中用 <code>&lt;app-dynamic-form&gt;</code> 表示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18alem0gb50567b5gmvzqz5lx\"><code>DynamicFormComponent</code> 元件透過把每個問題都繫結到一個對應 <code>DynamicFormQuestionComponent</code> 的 <code>&lt;app-question&gt;</code> 元素來渲染問題清單。</p>\n<code-tabs>\n    <code-pane header=\"dynamic-form.component.html\" path=\"dynamic-form/src/app/dynamic-form.component.html\">\n&lt;div&gt;\n  &lt;form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\"&gt;\n\n    &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let question of questions\" class=\"form-row\"&gt;\n      &lt;app-question [question]=\"question\" [form]=\"form\"&gt;&lt;/app-question&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"form-row\"&gt;\n      &lt;button type=\"submit\" [disabled]=\"!form.valid\"&gt;Save&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n\n  &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"payLoad\" class=\"form-row\"&gt;\n    &lt;strong&gt;Saved the following values&lt;/strong&gt;&lt;br&gt;{{payLoad}}\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"dynamic-form.component.ts\" path=\"dynamic-form/src/app/dynamic-form.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>} from '@angular/core';\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\nimport {<a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>} from '@angular/forms';\n\nimport {DynamicFormQuestionComponent} from './dynamic-form-question.component';\n\nimport {QuestionBase} from './question-base';\nimport {QuestionControlService} from './question-control.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [QuestionControlService],\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, DynamicFormQuestionComponent, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>],\n})\nexport class DynamicFormComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() questions: QuestionBase&lt;string&gt;[] | null = [];\n  form!: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  payLoad = '';\n\n  constructor(private qcs: QuestionControlService) {}\n\n  ngOnInit() {\n    this.form = this.qcs.toFormGroup(this.questions as QuestionBase&lt;string&gt;[]);\n  }\n\n  onSubmit() {\n    this.payLoad = JSON.stringify(this.form.getRawValue());\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<h3 id=\"display-the-form\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0ec33w3oq87ujti7ugsyly6a\">顯示表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#display-the-form\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bs38v0a8h4aslj7rxbi2nu5i\">要顯示動態表單的一個實例，<code>AppComponent</code> 外殼範本會把一個 <code>QuestionService</code> 回傳的 <code>questions</code> 陣列傳給表單容器組件 <code>&lt;app-dynamic-form&gt;</code>。</p>\n<code-example header=\"app.component.ts\" path=\"dynamic-form/src/app/app.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\nimport {<a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a>} from '@angular/common';\n\nimport {DynamicFormComponent} from './dynamic-form.component';\n\nimport {QuestionService} from './question.service';\nimport {QuestionBase} from './question-base';\nimport {Observable} from 'rxjs';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-root',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Job Application for Heroes&lt;/h2&gt;\n      &lt;app-dynamic-form [questions]=\"questions$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>\"&gt;&lt;/app-dynamic-form&gt;\n    &lt;/div&gt;\n  `,\n  providers: [QuestionService],\n  imports: [<a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a>, DynamicFormComponent],\n})\nexport class AppComponent {\n  questions$: Observable&lt;QuestionBase&lt;any&gt;[]&gt;;\n\n  constructor(service: QuestionService) {\n    this.questions$ = service.getQuestions();\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cv94xo3clthogdowobr6vttd\">這個例子為英雄提供了一個工作申請表的模型，但是除了 <code>QuestionService</code> 回傳的物件外，沒有涉及任何跟英雄有關的問題。這種模型和數據的分離，允許你為任何型別的調查表複用這些元件，只要它與這個<em>問題</em>物件模型相容即可。</p>\n<h3 id=\"ensuring-valid-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1y39ojn5z98a6ne0k0nxys0ev\">確保資料有效<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#ensuring-valid-data\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8hg002p0zz2kh9ztm4mwfssyh\">表單範本使用元資料的動態資料繫結來渲染表單，而不用做任何與具體問題有關的硬編碼。它動態新增了控制元件元資料和驗證標準。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9og5wndr1g8tzzq1mv7exvksw\">要確保輸入有效，<em>就要</em>停用 <em>『Save』</em> 按鈕，直到此表單處於有效狀態。當表單有效時，你可以單擊 <em>『Save』</em> 按鈕，該應用就會把表單的當前值渲染為 JSON。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6zwuu5dnhi7g29sjepls67mz\">最終的表單如下圖所示。</p>\n<div class=\"lightbox\">\n<img alt=\"Dynamic-Form\" src=\"generated/images/guide/dynamic-form/dynamic-form.png\" width=\"316\" height=\"230\">\n</div>\n<h2 id=\"next-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4pkljueu68ifjoi5994e9l8o\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ef986a4dl7ybr2mxpxffx8n53\">步驟</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68estz71qe7c7pphtopktcwww\">不同型別的表單和控制元件集合</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wgs2b4nuhmrgt01qnmb9h6x7\">本教學課程展示如何建立一個問卷調查，這只是一種動態表單的一種形式。範例使用 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 來收集一組控制元件。有關不同型別動態表單的範例，請參閱回應式表單指南中的章節 \n<a href=\"guide/reactive-forms#creating-dynamic-forms\" title=\"使用陣列建立動態表單\">建立動態表單</a>。該範例還展示了如何使用 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 而不是 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 來收集一組控制元件。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3eha1tn86cy4ra2wglwp5vxxa\">驗證使用者輸入</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8c066ga1003nzqc619ufg3wmk\">章節 \n<a href=\"guide/reactive-forms#validating-form-input\" title=\"基本輸入驗證\">驗證表單輸入</a> 介紹了回應式表單中輸入驗證的基礎知識。 \n<br> \n<a href=\"guide/form-validation\" title=\"表單驗證指南\">表單驗證指南</a> 更深入地涵蓋了這個主題。</td>\n</tr>\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Wed Aug 30 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/forms-overview\n - guide/security\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/core/Component\n - api/core/Injectable\n - api/core/Input\n - api/core/OnInit\n - api/forms/EmailValidator\n - api/forms/FormArray\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/FormGroupDirective\n - api/forms/ReactiveFormsModule\n - api/forms/Validators\n - api/platform-browser/animations/async\n - guide/architecture\n - guide/dynamic-form#building-dynamic-forms\n - guide/dynamic-form#compose-dynamic-form-contents\n - guide/dynamic-form#compose-form-groups\n - guide/dynamic-form#create-a-dynamic-form-template\n - guide/dynamic-form#create-a-form-object-model\n - guide/dynamic-form#define-control-classes\n - guide/dynamic-form#display-the-form\n - guide/dynamic-form#enable-reactive-forms-for-your-project\n - guide/dynamic-form#ensuring-valid-data\n - guide/dynamic-form#next-steps\n - guide/dynamic-form#prerequisites\n - guide/dynamic-form#supply-data\n - guide/form-validation\n - guide/reactive-forms\n - guide/reactive-forms#creating-dynamic-forms\n - guide/reactive-forms#validating-form-input\n - https://www.typescriptlang.org/\n-->"}
{"id":"guide/dynamic-form","title":"构建动态表单","contents":"<div class=\"content\">\n  <h1 id=\"building-dynamic-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqaxfplp6qxrifboo3fit1xgq\">构建动态表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#building-dynamic-forms\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bb67cdj5yzx3py93io7phyky\">许多表单（比如问卷）可能在格式和意图上都非常相似。为了更快更轻松地生成这种表单的不同版本，你可以根据描述业务对象模型的元数据来创建<em>动态表单模板</em>。然后就可以根据数据模型中的变化，使用该模板自动生成新的表单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pbw86bxfbfwfmqyvkcsug1j6\">如果你有这样一种表单，其内容必须经常更改以满足快速变化的业务需求和监管需求，该技术就特别有用。一个典型的例子就是问卷。你可能需要在不同的上下文中获取用户的意见。用户要看到的表单格式和样式应该保持不变，而你要提的实际问题则会因上下文而异。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2n4fee4wdbap5mkl03qcy2eqa\">在本教程中，你会构建一个渲染基本问卷的动态表单。你要为正在找工作的英雄们建立一个在线应用。英雄管理局会不断修补应用流程，但是借助动态表单，你可以动态创建新的表单，而无需修改应用代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jd1bfnfz46dayfz87rs41abg\">本教程将指导你完成以下步骤。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d66rx3b8pfwfkioypqqs1exk1\">为项目启用响应式表单。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16z7gjkzana2h14l1yia5y47g\">建立一个数据模型来表示表单控件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cbcbzq5hgvq6nokjqc82aao7\">使用范例数据填充模型。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2miiy83x8wq2ebgz21pltnqkc\">开发一个组件来动态创建表单控件。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7iimyn93ypmi90cfopw4butoz\">你创建的表单会使用输入验证和样式来改善用户体验。它有一个 Submit 按钮，这个按钮只会在所有的用户输入都有效时启用，并用色彩和一些错误信息来标记出无效输入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2y35bsb1vcj2al43qe5engnsi\">这个基本版可以不断演进，以支持更多的问题类型、更优雅的渲染体验以及更高大上的用户体验。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zyqrkx2stlg7xx1sbs50qvq0\">参阅 <live-example name=\"dynamic-form\"></live-example>。</p>\n</div>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7h9zdymz2ncau11inrdi26af5\">在做本教程之前，你应该对下列内容有一个基本的了解。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hvl8rjzxrmac41qpao60jlv6\"><a href=\"https://www.typescriptlang.org/\" title=\"TypeScript 语言\">TypeScript</a>和 HTML5 编程</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dwhsxhtmly22t5m509dl5936\"><a href=\"guide/architecture\" title=\"Angular 应用设计概念简介\">Angular 应用设计</a>的基本概念</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cp8qretw0bils1jwkakwf2dz\"><a href=\"guide/reactive-forms\" title=\"反应表单指南\">响应式表单</a>的基础知识</li>\n</ul>\n<h2 id=\"enable-reactive-forms-for-your-project\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tbevbc12oy6rz8uurfwjqzxv\">为项目启用响应式表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#enable-reactive-forms-for-your-project\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er6cgny8qq6l9waizhhd04pud\">动态表单基于响应式表单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ycaan095gamncuu7fnc7i433\">为了让应用程序访问响应式表单指令，从\n<code>@angular/forms</code>库中导入\n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>到必要的组件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s9dl2g3xc4w52poq1gh6o72c\">以下代码展示了此范例在根模块中所做的设置。</p>\n<code-tabs>\n    <code-pane header=\"dynamic-form.component.ts\" path=\"dynamic-form/src/app/dynamic-form.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>} from '@angular/core';\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\nimport {<a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>} from '@angular/forms';\n\nimport {DynamicFormQuestionComponent} from './dynamic-form-question.component';\n\nimport {QuestionBase} from './question-base';\nimport {QuestionControlService} from './question-control.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [QuestionControlService],\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, DynamicFormQuestionComponent, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>],\n})\nexport class DynamicFormComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() questions: QuestionBase&lt;string&gt;[] | null = [];\n  form!: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  payLoad = '';\n\n  constructor(private qcs: QuestionControlService) {}\n\n  ngOnInit() {\n    this.form = this.qcs.toFormGroup(this.questions as QuestionBase&lt;string&gt;[]);\n  }\n\n  onSubmit() {\n    this.payLoad = JSON.stringify(this.form.getRawValue());\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"dynamic-form-question.component.ts\" path=\"dynamic-form/src/app/dynamic-form-question.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>} from '@angular/core';\nimport {<a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>} from '@angular/forms';\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n\nimport {QuestionBase} from './question-base';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-question',\n  templateUrl: './dynamic-form-question.component.html',\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>],\n})\nexport class DynamicFormQuestionComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() question!: QuestionBase&lt;string&gt;;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() form!: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  get isValid() {\n    return this.form.controls[this.question.key].valid;\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"object-model\"></a></p>\n<h2 id=\"create-a-form-object-model\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7w7wngysiep2zf5xbh4hdm8g\">创建一个表单对象模型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#create-a-form-object-model\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2j87n9le0ayzrpftqb6rni65l\">动态表单需要一个对象模型来描述此表单功能所需的全部场景。英雄应用表单中的例子是一组问题 - 也就是说，表单中的每个控件都必须提问并接受一个答案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1z90smvcfkrbd1v50ylk1vwxv\">这种类型表单的数据模型必须表示一个问题。 示例包括\n<code>DynamicFormQuestionComponent</code>，将问题定义为模型中的基本对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79rdaglhcztrjy3alre4u0q8c\">这个 <code>QuestionBase</code> 是一组控件的基类，可以在表单中表示问题及其答案。</p>\n<code-example header=\"src/app/question-base.ts\" path=\"dynamic-form/src/app/question-base.ts\">\nexport class QuestionBase&lt;T&gt; {\n  value: T|undefined;\n  key: string;\n  label: string;\n  required: boolean;\n  order: number;\n  controlType: string;\n  type: string;\n  options: {key: string, value: string}[];\n\n  constructor(options: {\n      value?: T;\n      key?: string;\n      label?: string;\n      required?: boolean;\n      order?: number;\n      controlType?: string;\n      type?: string;\n      options?: {key: string, value: string}[];\n    } = {}) {\n    this.value = options.value;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.required = !!options.required;\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n    this.type = options.type || '';\n    this.options = options.options || [];\n  }\n}\n\n\n</code-example>\n<h3 id=\"define-control-classes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dijsuxtfg25zvw12fq9h5gsgp\">定义控件类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#define-control-classes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvfdnu55ou37qqh2p0oznu8bz\">此范例从这个基类派生出两个新类，<code>TextboxQuestion</code> 和 <code>DropdownQuestion</code>，分别代表不同的控件类型。当你在下一步中创建表单模板时，你会实例化这些具体的问题类，以便动态渲染相应的控件。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu4f3kq8ip5zd6abrfs4mcnbg\">控件类型</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9r8x4hymzrvm49p23s358jgk\"><code>TextboxQuestion</code> 控件类型</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etap2wok694610wei85kdlj6v\">提供一个问题并允许用户输入。 \n<code-example header=\"src/app/question-textbox.ts\" path=\"dynamic-form/src/app/question-textbox.ts\">\n  import { QuestionBase } from './question-base'; export class TextboxQuestion extends QuestionBase&lt;string&gt; { override controlType = 'textbox'; } \n</code-example> \n<code>TextboxQuestion</code> 控件类型在表单模板中使用 \n<code>&lt;input&gt;</code> 元素表示。该元素的 \n<code>type</code> 属性根据在 \n<code>options</code> 参数中指定的 \n<code>type</code> 字段来定义（例如 \n<code>text</code>、\n<code><a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a></code>、\n<code>url</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o3onqnirt3ktv0fqs3rnm6y5\"><code>DropdownQuestion</code> 控件类型</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3mpscdzys9qzrn5s7044swlm\">在下拉框中呈现一组选项。 \n<code-example header=\"src/app/question-dropdown.ts\" path=\"dynamic-form/src/app/question-dropdown.ts\">\n  import { QuestionBase } from './question-base'; export class DropdownQuestion extends QuestionBase&lt;string&gt; { override controlType = 'dropdown'; } \n</code-example></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"compose-form-groups\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cp207aq696qpb6gb1oi83urn\">编写表单组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#compose-form-groups\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aaj7mkn4kp0fz1e5jw6ybuomn\">动态表单会使用一个服务来根据表单模型创建输入控件的分组集合。下面的 <code>QuestionControlService</code> 会收集一组 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 实例，这些实例会消费问题模型中的元数据。你可以指定一些默认值和验证规则。</p>\n<code-example header=\"src/app/question-control.service.ts\" path=\"dynamic-form/src/app/question-control.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms';\n\nimport { QuestionBase } from './question-base';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class QuestionControlService {\n  toFormGroup(questions: QuestionBase&lt;string&gt;[] ) {\n    const group: any = {};\n\n    questions.forEach(question =&gt; {\n      group[question.key] = question.required ? new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(question.value || '', Validators.required)\n                                              : new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(question.value || '');\n    });\n    return new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>(group);\n  }\n}\n\n\n</code-example>\n<p><a id=\"form-component\"></a></p>\n<h2 id=\"compose-dynamic-form-contents\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck8b0173q7ku3r97i6pc36ftt\">编写动态表单内容<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#compose-dynamic-form-contents\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xkb4xcpx1bbniiy7pdbtchbp\">动态表单本身就是一个容器组件，稍后你会添加它。每个问题都会在表单组件的模板中用一个 <code>&lt;app-question&gt;</code> 标签表示，该标签会匹配 <code>DynamicFormQuestionComponent</code> 中的一个实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"211lcu1rid09d8q0f0qb05gv5\"><code>DynamicFormQuestionComponent</code> 负责根据数据绑定的问题对象中的各种值来渲染单个问题的详情。该表单依靠 <a href=\"api/forms/FormGroupDirective\" title=\"API 参考\"><code>[formGroup]</code> 指令</a>来将模板 HTML 和底层的控件对象联系起来。<code>DynamicFormQuestionComponent</code> 会创建表单组，并用问题模型中定义的控件来填充它们，并指定显示和验证规则。</p>\n<code-tabs>\n    <code-pane header=\"dynamic-form-question.component.html\" path=\"dynamic-form/src/app/dynamic-form-question.component.html\">\n&lt;div [formGroup]=\"form\"&gt;\n  &lt;label [attr.for]=\"question.key\"&gt;{{question.label}}&lt;/label&gt;\n\n  &lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"question.controlType\"&gt;\n\n    &lt;input *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'textbox'\" [<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"question.key\"\n            [id]=\"question.key\" [type]=\"question.type\"&gt;\n\n    &lt;select [id]=\"question.key\" *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'dropdown'\" [<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"question.key\"&gt;\n      &lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let opt of question.options\" [value]=\"opt.key\"&gt;{{opt.value}}&lt;/option&gt;\n    &lt;/select&gt;\n\n  &lt;/div&gt;\n\n  &lt;div class=\"errorMessage\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!isValid\"&gt;{{question.label}} is required&lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"dynamic-form-question.component.ts\" path=\"dynamic-form/src/app/dynamic-form-question.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>} from '@angular/core';\nimport {<a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>} from '@angular/forms';\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n\nimport {QuestionBase} from './question-base';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-question',\n  templateUrl: './dynamic-form-question.component.html',\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>],\n})\nexport class DynamicFormQuestionComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() question!: QuestionBase&lt;string&gt;;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() form!: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  get isValid() {\n    return this.form.controls[this.question.key].valid;\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3jilllrh1wc6pavs5148k0u7\"><code>DynamicFormQuestionComponent</code> 的目标是展示模型中定义的各类问题。你现在只有两类问题，但可以想象将来还会有更多。模板中的 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 语句会决定要显示哪种类型的问题。这里用到了带有 <a href=\"api/forms/FormControlName\" title=\"FormControlName 指令的 API Reference 参考\"><code>formControlName</code></a> 和<a href=\"api/forms/FormGroupDirective\" title=\"FormGroupDirective API 参考指南\"><code>formGroup</code></a> 选择器的指令。这两个指令都是在 <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> 中定义的。</p>\n<p><a id=\"questionnaire-data\"></a></p>\n<h3 id=\"supply-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4dy2ufbimugdsfxnxhoucbgq\">提供数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#supply-data\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8iwpexu0jf236ufwmudgny5j8\">还要另外一项服务来提供一组具体的问题，以便构建出一个单独的表单。在本练习中，你将创建 <code>QuestionService</code> 以从硬编码的范例数据中提供这组问题。在真实世界的应用中，该服务可能会从后端获取数据。重点是，你可以完全通过 <code>QuestionService</code> 返回的对象来控制英雄的求职申请问卷。要想在需求发生变化时维护问卷，你只需要在 <code>questions</code> 数组中添加、更新和删除对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7vk49wcq398q7ovtwouobcsj9\"><code>QuestionService</code> 以一个绑定到 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 的问题数组的形式提供了一组问题。</p>\n<code-example header=\"src/app/question.service.ts\" path=\"dynamic-form/src/app/question.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { DropdownQuestion } from './question-dropdown';\nimport { QuestionBase } from './question-base';\nimport { TextboxQuestion } from './question-textbox';\nimport { of } from 'rxjs';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class QuestionService {\n\n  // TODO: get from a remote source of question metadata\n  getQuestions() {\n\n    const questions: QuestionBase&lt;string&gt;[] = [\n\n      new DropdownQuestion({\n        key: 'brave',\n        label: 'Bravery Rating',\n        options: [\n          {key: 'solid',  value: 'Solid'},\n          {key: 'great',  value: 'Great'},\n          {key: 'good',   value: 'Good'},\n          {key: 'unproven', value: 'Unproven'}\n        ],\n        order: 3\n      }),\n\n      new TextboxQuestion({\n        key: 'firstName',\n        label: 'First name',\n        value: 'Bombasto',\n        required: true,\n        order: 1\n      }),\n\n      new TextboxQuestion({\n        key: 'emailAddress',\n        label: 'Email',\n        type: '<a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>',\n        order: 2\n      })\n    ];\n\n    return of(questions.sort((a, b) =&gt; a.order - b.order));\n  }\n}\n\n\n</code-example>\n<p><a id=\"dynamic-template\"></a></p>\n<h2 id=\"create-a-dynamic-form-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fkafw9rdgutpwejmlktptm2o\">创建一个动态表单模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#create-a-dynamic-form-template\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29cdtrnogmioykoa2pdvpupw1\"><code>DynamicFormComponent</code> 组件是表单的入口点和主容器，它在模板中用 <code>&lt;app-dynamic-form&gt;</code> 表示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18alem0gb50567b5gmvzqz5lx\"><code>DynamicFormComponent</code> 组件通过把每个问题都绑定到一个匹配 <code>DynamicFormQuestionComponent</code> 的 <code>&lt;app-question&gt;</code> 元素来渲染问题列表。</p>\n<code-tabs>\n    <code-pane header=\"dynamic-form.component.html\" path=\"dynamic-form/src/app/dynamic-form.component.html\">\n&lt;div&gt;\n  &lt;form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\"&gt;\n\n    &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let question of questions\" class=\"form-row\"&gt;\n      &lt;app-question [question]=\"question\" [form]=\"form\"&gt;&lt;/app-question&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"form-row\"&gt;\n      &lt;button type=\"submit\" [disabled]=\"!form.valid\"&gt;Save&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n\n  &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"payLoad\" class=\"form-row\"&gt;\n    &lt;strong&gt;Saved the following values&lt;/strong&gt;&lt;br&gt;{{payLoad}}\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"dynamic-form.component.ts\" path=\"dynamic-form/src/app/dynamic-form.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>} from '@angular/core';\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\nimport {<a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>} from '@angular/forms';\n\nimport {DynamicFormQuestionComponent} from './dynamic-form-question.component';\n\nimport {QuestionBase} from './question-base';\nimport {QuestionControlService} from './question-control.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [QuestionControlService],\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, DynamicFormQuestionComponent, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>],\n})\nexport class DynamicFormComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() questions: QuestionBase&lt;string&gt;[] | null = [];\n  form!: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  payLoad = '';\n\n  constructor(private qcs: QuestionControlService) {}\n\n  ngOnInit() {\n    this.form = this.qcs.toFormGroup(this.questions as QuestionBase&lt;string&gt;[]);\n  }\n\n  onSubmit() {\n    this.payLoad = JSON.stringify(this.form.getRawValue());\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<h3 id=\"display-the-form\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0ec33w3oq87ujti7ugsyly6a\">显示表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#display-the-form\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bs38v0a8h4aslj7rxbi2nu5i\">要显示动态表单的一个实例，<code>AppComponent</code> 外壳模板会把一个 <code>QuestionService</code> 返回的 <code>questions</code> 数组传给表单容器组件 <code>&lt;app-dynamic-form&gt;</code>。</p>\n<code-example header=\"app.component.ts\" path=\"dynamic-form/src/app/app.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\nimport {<a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a>} from '@angular/common';\n\nimport {DynamicFormComponent} from './dynamic-form.component';\n\nimport {QuestionService} from './question.service';\nimport {QuestionBase} from './question-base';\nimport {Observable} from 'rxjs';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-root',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Job Application for Heroes&lt;/h2&gt;\n      &lt;app-dynamic-form [questions]=\"questions$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>\"&gt;&lt;/app-dynamic-form&gt;\n    &lt;/div&gt;\n  `,\n  providers: [QuestionService],\n  imports: [<a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a>, DynamicFormComponent],\n})\nexport class AppComponent {\n  questions$: Observable&lt;QuestionBase&lt;any&gt;[]&gt;;\n\n  constructor(service: QuestionService) {\n    this.questions$ = service.getQuestions();\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cv94xo3clthogdowobr6vttd\">这个例子为英雄提供了一个工作申请表的模型，但是除了 <code>QuestionService</code> 返回的对象外，没有涉及任何跟英雄有关的问题。这种模型和数据的分离，允许你为任何类型的调查表复用这些组件，只要它与这个<em>问题</em>对象模型兼容即可。</p>\n<h3 id=\"ensuring-valid-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1y39ojn5z98a6ne0k0nxys0ev\">确保数据有效<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#ensuring-valid-data\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8hg002p0zz2kh9ztm4mwfssyh\">表单模板使用元数据的动态数据绑定来渲染表单，而不用做任何与具体问题有关的硬编码。它动态添加了控件元数据和验证标准。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9og5wndr1g8tzzq1mv7exvksw\">要确保输入有效，<em>就要</em>禁用 <em>“Save”</em> 按钮，直到此表单处于有效状态。当表单有效时，你可以单击 <em>“Save”</em> 按钮，该应用就会把表单的当前值渲染为 JSON。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6zwuu5dnhi7g29sjepls67mz\">最终的表单如下图所示。</p>\n<div class=\"lightbox\">\n<img alt=\"Dynamic-Form\" src=\"generated/images/guide/dynamic-form/dynamic-form.png\" width=\"316\" height=\"230\">\n</div>\n<h2 id=\"next-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4pkljueu68ifjoi5994e9l8o\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ef986a4dl7ybr2mxpxffx8n53\">步骤</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68estz71qe7c7pphtopktcwww\">不同类型的表单和控件集合</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wgs2b4nuhmrgt01qnmb9h6x7\">本教程展示如何构建一个问卷调查，这只是一种动态表单的一种形式。示例使用 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 来收集一组控件。有关不同类型动态表单的示例，请参阅响应式表单指南中的章节 \n<a href=\"guide/reactive-forms#creating-dynamic-forms\" title=\"使用数组创建动态表单\">创建动态表单</a>。该示例还展示了如何使用 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 而不是 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 来收集一组控件。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3eha1tn86cy4ra2wglwp5vxxa\">验证用户输入</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8c066ga1003nzqc619ufg3wmk\">章节 \n<a href=\"guide/reactive-forms#validating-form-input\" title=\"基本输入验证\">验证表单输入</a> 介绍了响应式表单中输入验证的基础知识。 \n<br> \n<a href=\"guide/form-validation\" title=\"表单验证指南\">表单验证指南</a> 更深入地涵盖了这个主题。</td>\n</tr>\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Wed Aug 30 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/forms-overview\n - guide/security\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/core/Component\n - api/core/Injectable\n - api/core/Input\n - api/core/OnInit\n - api/forms/EmailValidator\n - api/forms/FormArray\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/FormGroupDirective\n - api/forms/ReactiveFormsModule\n - api/forms/Validators\n - api/platform-browser/animations/async\n - guide/architecture\n - guide/dynamic-form#building-dynamic-forms\n - guide/dynamic-form#compose-dynamic-form-contents\n - guide/dynamic-form#compose-form-groups\n - guide/dynamic-form#create-a-dynamic-form-template\n - guide/dynamic-form#create-a-form-object-model\n - guide/dynamic-form#define-control-classes\n - guide/dynamic-form#display-the-form\n - guide/dynamic-form#enable-reactive-forms-for-your-project\n - guide/dynamic-form#ensuring-valid-data\n - guide/dynamic-form#next-steps\n - guide/dynamic-form#prerequisites\n - guide/dynamic-form#supply-data\n - guide/form-validation\n - guide/reactive-forms\n - guide/reactive-forms#creating-dynamic-forms\n - guide/reactive-forms#validating-form-input\n - https://www.typescriptlang.org/\n-->"}
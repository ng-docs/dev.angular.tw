{"id":"guide/router","title":"常見路由任務","contents":"<div class=\"content\">\n  <h1 id=\"common-routing-tasks\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6yfs1kmhiyiv4r32nvdu0rsmc\">常見路由任務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#common-routing-tasks\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"471orehxuzjoyjiw7uznv54jh\">本主題講述當把 Angular 路由器新增到應用中時，如何實現多種常見路由任務。</p>\n<p><a id=\"basics\"></a></p>\n<h2 id=\"generate-an-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77eix3gmn0k5ci5ocg7wogm4z\">生成一個應用程式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#generate-an-application\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ne4uhkjndnuxobwd24tc96by\">以下指令使用 Angular CLI 生成一個帶有應用程式路由的基本 Angular 應用程式。以下範例中的應用程式名稱為\n<code>routing-app</code>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng new routing-app\n\n</code-example>\n<h3 id=\"adding-components-for-routing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8w9g3cq2flvfgre7s43wf229h\">為路由新增元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#adding-components-for-routing\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzf17f82n86qnpyxjrlblz2zt\">為了使用 Angular 的路由器，應用至少要有兩個元件才能從一個導向到另一個。要使用 CLI 建立元件，請在指令行輸入以下內容，其中 <code>first</code> 是元件的名稱：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component first\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zrr04peqo98hoj6lfyzy63vp\">為第二個元件重複這個步驟，但給它一個不同的名字。這裡的新名字是 <code>second</code>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component second\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"989vhyym6pf5ck9orkbw5w0zc\">CLI 會自動新增 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 字尾，所以如果在編寫 <code>first-component</code>，那麼其元件名就是 <code>FirstComponentComponent</code>。</p>\n<p><a id=\"basics-base-href\"></a></p>\n<div class=\"alert is-helpful\">\n<header><code>&lt;base href&gt;</code></header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wuom04mycej8w87t6ibtuy7o\">此指南適用於使用 CLI 生成的 Angular 應用程式。</p>\n</div>\n<h3 id=\"importing-your-new-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"754j9wgphjoioo84434yj84i0\">匯入這些新元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#importing-your-new-components\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emfitcsv6d9vjtuis4kljkzhm\">要使用新元件，將其匯入到\n<code>app.routes.ts</code>檔案的頂部，如下所示：</p>\n<code-example>\nimport {FirstComponent} from './first/first.component';\nimport {SecondComponent} from './second/second.component';\n</code-example>\n<p><a id=\"basic-route\"></a></p>\n<h2 id=\"defining-a-basic-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nwyz52auwe1skyafrmu7vnr8\">定義一個基本路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#defining-a-basic-route\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0x03vm9rom9nwtyeyrhbptzw\">建立路由有三個基本元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"563z5iyniwogwgpunvr8c5cch\">將路由匯入到\n<code>app.config.ts</code>中，並將其新增到\n<code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>函式中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6z60dllt538eswbttthioh7pl\">Angular CLI 會為您執行此步驟。 但是，如果您手動建立應用程式或使用現有非 CLI 應用程式，則請驗證匯入和設定是否正確。以下是使用 CLI 的預設\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>。</p>\n<code-example>\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [<a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(routes)]\n};\n</code-example>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5eomfft5edcaq71mro9wupva\">為您的路由設定一個\n<code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code>陣列</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jg88x9c0ezaovg51z5qvarmj\">Angular CLI 會自動執行此步驟。</p>\n</li>\n</ol>\n<code-example>\nimport { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nexport const routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [];\n</code-example>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ppp1kni20diqcbjecx7gur1v\">在 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 陣列中定義你的路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"du181sm2ajlg973yb451tturr\">這個陣列中的每個路由都是一個包含兩個屬性的 JavaScript 物件。第一個屬性 <code>path</code> 定義了該路由的 URL 路徑。第二個屬性 <code>component</code> 定義了要讓 Angular 用作相應路徑的元件。</p>\n</li>\n</ol>\n<code-example>\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'first-component', component: FirstComponent },\n  { path: 'second-component', component: SecondComponent },\n];\n</code-example>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"46usjxuup5a3hifw73o5wofhk\">把這些路由新增到你的應用中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyfextsy8gysgq9g8x8gxleyk\">現在你已經定義了路由，可以把它們新增到應用中了。首先，新增到這兩個元件的連結。把要新增路由的連結賦值給 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 屬性。將屬性的值設定為該組件，以便在使用者點選各個連結時顯示這個值。接下來，修改元件範本以包含 <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 標籤。該元素會通知 Angular，你可以用所選路由的元件更新應用的檢視。</p>\n</li>\n</ol>\n<code-example>\n&lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> App&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/first-component\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;First <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/second-component\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt;Second <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n&lt;!-- The routed views render in the &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;--&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r2an1t2ozu9hy4wu041e8f9w\">您還需要將\n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>、\n<code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code>和\n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>新增到\n<code>AppComponent</code>的匯入陣列中。</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  standalone: true,\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, <a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a>, <a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a>, <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a>],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'routing-app';\n}\n</code-example>\n<p><a id=\"route-order\"></a></p>\n<h3 id=\"route-order\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b07tqkuaeqbu6ftd6hesx7p5o\">路由順序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#route-order\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nzndb9wdjiihlmrt5jxc5t96\">路由的順序很重要，因為 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 在對應路由時使用『先到先得』策略，所以應該在不那麼具體的路由前面放置更具體的路由。首先列出靜態路徑的路由，然後是一個與預設路由對應的空路徑路由。<a href=\"guide/router#setting-up-wildcard-routes\">萬用字元路由</a>是最後一個，因為它對應每一個 URL，只有當其它路由都沒有對應時，<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 才會選擇它。</p>\n<p><a id=\"getting-route-information\"></a></p>\n<h2 id=\"getting-route-information\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20n06h04ms112eszs2htisb5t\">獲取路由訊息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#getting-route-information\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8gbgunblsv82f0o9um1jnuzti\">通常，當用戶導向你的應用時，你會希望把訊息從一個元件傳遞到另一個元件。比如，考慮一個顯示雜貨商品購物清單的應用。清單中的每一項都有一個唯一的 <code>id</code>。要想編輯某個專案，使用者需要單擊『編輯』按鈕，開啟一個 <code>EditGroceryItem</code> 元件。你希望該組件得到該商品的 <code>id</code>，以便它能向用戶顯示正確的訊息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3w05mudb7tqe2y0cpagh02o5i\">可以用一個路由把這種型別的訊息傳給你的應用元件。要做到這一點，你可以使用 <a href=\"api/router/ActivatedRoute\">ActivatedRoute</a> 介面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9s0zx5vtxhcv71rdgzry41uow\">要從路由中獲取訊息：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9a6cs8ioaqljy366bsrerzplk\">將 <code><a href=\"api/router/withComponentInputBinding\" class=\"code-anchor\">withComponentInputBinding</a></code> 屬性新增到 <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> 方法。</p>\n<code-example header=\"provideRouter feature\" path=\"router/src/app/app-routing.module.11.ts\" region=\"withComponentInputBinding\">\nproviders: [\n  <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(appRoutes, <a href=\"api/router/withComponentInputBinding\" class=\"code-anchor\">withComponentInputBinding</a>()),\n]\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5mc8am3cizwqzbkjyqzbt8l9\">更新 <code>ngOnInit()</code> 方法來訪問這個 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 並跟蹤 <code>name</code> 引數：</p>\n<code-example header=\"The component input (excerpt)\" path=\"router/src/app/heroes/hero-detail/hero-detail.component.4.ts\" region=\"id-input\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\nset id(heroId: string) {\n  this.hero$ = this.service.getHero(heroId);\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6g41zcotayizdg85kebtmyudd\"><strong>注意：</strong>\n<br> 您可以將所有路由資料與鍵值對繫結到元件輸入：靜態或已解析的路由資料、路徑引數、矩陣引數和查詢引數。 \n<br> 如果要使用父元件的路由訊息，您需要設定路由器的\n<code>paramsInheritanceStrategy</code>選項：\n<code><a href=\"api/router/withRouterConfig\" class=\"code-anchor\">withRouterConfig</a>({paramsInheritanceStrategy: 'always'})</code></p>\n</div>\n</li>\n</ol>\n<p><a id=\"wildcard-route-how-to\"></a></p>\n<h2 id=\"setting-up-wildcard-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9e4a1c9rr4vmzwir1gb1m8qbl\">設定萬用字元路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#setting-up-wildcard-routes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"627vznnx5nmk45r4bc5olwo5z\">當用戶試圖導向到那些不存在的應用部件時，在正常的應用中應該能得到很好的處理。要在應用中新增此功能，需要設定萬用字元路由。當所請求的 URL 與任何路由器路徑都不對應時，Angular 路由器就會選擇這個路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0fqm7j4zfxxemzxykonjwsde\">要設定萬用字元路由，請在 <code>routes</code> 定義中新增以下程式碼。</p>\n<code-example>\n{ path: '**', component: PageNotFoundComponent }\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eydu9ej4w5tqqofk0cjpi4hz8\">這兩個星號 <code>**</code> 告訴 Angular，這個 <code>routes</code> 定義是萬用字元路由。對於 component 屬性，你可以使用應用中的任何元件。常見的選擇包括應用專屬的 <code>PageNotFoundComponent</code>，你可以定義它來向使用者<a href=\"guide/router#404-page-how-to\">展示 404 頁面</a>，或者跳轉到應用的主元件。萬用字元路由是最後一個路由，因為它對應所有的 URL。關於路由順序的更多詳細訊息，請參閱<a href=\"guide/router#route-order\">路由順序</a>。</p>\n<p><a id=\"404-page-how-to\"></a></p>\n<h2 id=\"displaying-a-404-page\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fom1klv8evh3gy16gkcga42v\">顯示 404 頁面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#displaying-a-404-page\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wmltn0e4m9cr7ye71f9xfpd9\">要顯示 404 頁面，請設定一個<a href=\"guide/router#wildcard-route-how-to\">萬用字元路由</a>，並將 <code>component</code> 屬性設定為你要用於 404 頁面的元件，如下所示：</p>\n<code-example>\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'first-component', component: FirstComponent },\n  { path: 'second-component', component: SecondComponent },\n  { path: '**', component: PageNotFoundComponent },  // Wildcard route for a 404 page\n];\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9t1fbzeofx78mtwhhdunj5oju\"><code>path</code> 為 <code>**</code> 的最後一條路由是萬用字元路由。如果請求的 URL 與前面列出的路徑不對應，路由器會選擇這個路由，並把該使用者送到 <code>PageNotFoundComponent</code>。</p>\n<h2 id=\"setting-up-redirects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bziljukomircsk5ev5roy3zqv\">設定重導向<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#setting-up-redirects\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"62kbtaguk0jicwzogg4ncrqpc\">要設定重導向，請使用重導向源的 <code>path</code>、要重導向目標的 <code>component</code> 和一個 <code>pathMatch</code> 值來設定路由，以告訴路由器該如何對應 URL。</p>\n<code-example>\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'first-component', component: FirstComponent },\n  { path: 'second-component', component: SecondComponent },\n  { path: '',   redirectTo: '/first-component', pathMatch: 'full' }, // redirect to `first-component`\n  { path: '**', component: PageNotFoundComponent },  // Wildcard route for a 404 page\n];\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bv856oml03gltbzx0ijzwubj\">在這個例子中，第三個路由是重導向路由，所以路由器會預設跳到 <code>first-component</code> 路由。注意，這個重導向路由位於萬用字元路由之前。這裡的 <code>path: ''</code> 表示使用初始的相對 URL（<code>''</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8m6g24pcwgaw3bkf4532gcto0\">關於 <code>pathMatch</code> 的詳情，請參閱<a href=\"guide/router-tutorial-toh#pathmatch\">聚焦 <code>pathMatch</code></a>部分。</p>\n<p><a id=\"nesting-routes\"></a></p>\n<h2 id=\"nesting-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35sbodgukx4kf7s4hhy1y9vbf\">巢狀路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#nesting-routes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kxysqzei9lew1cd4s0iy9g3i\">隨著你的應用變得越來越複雜，你可能要建立一些根元件之外的相對路由。這些巢狀路由型別稱為子路由。這意味著你要為你的應用新增第二 <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code>，因為它是 <code>AppComponent</code> 之外的另一個 <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1r46m7jc9x63hk2y80g67lnjh\">在這個例子中，還有兩個子元件，<code>child-a</code> 和 <code>child-b</code>。這裡的 <code>FirstComponent</code> 有它自己的 <code>&lt;nav&gt;</code> 和 <code>AppComponent</code> 之外的第二 <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code>。</p>\n<code-example>\n&lt;h2&gt;First <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>&lt;/h2&gt;\n\n&lt;nav&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"child-a\"&gt;Child A&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"child-b\"&gt;Child B&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efde84adlxsrwbhinlgvflx38\">子路由和其它路由一樣，同時需要 <code>path</code> 和 <code>component</code>。唯一的區別是你要把子路由放在父路由的 <code>children</code> 陣列中。</p>\n<code-example>\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'first-component',\n    component: FirstComponent, // this is the component with the &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt; in the template\n    children: [\n      {\n        path: 'child-a', // child route path\n        component: ChildAComponent, // child route component that the router renders\n      },\n      {\n        path: 'child-b',\n        component: ChildBComponent, // another child route component that the router renders\n      },\n    ],\n  },\n];\n</code-example>\n<p><a id=\"setting-the-page-title\"></a></p>\n<h2 id=\"setting-the-page-title\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1y3f1ogu3i7n1ywbvjgh1xb3\">設定頁面標題<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#setting-the-page-title\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8syuyypt4lftak6dqra1x7yef\">應用程式中的每個頁面都應該有一個唯一的標題，以便可以在瀏覽器歷史記錄中識別它們。<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 使用 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 設定中的 <code>title</code> 屬性設定文件的標題。</p>\n<code-example>\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'first-component',\n    title: 'First component',\n    component: FirstComponent,  // this is the component with the &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt; in the template\n    children: [\n      {\n        path: 'child-a',  // child route path\n        title: resolvedChildATitle,\n        component: ChildAComponent,  // child route component that the router renders\n      },\n      {\n        path: 'child-b',\n        title: 'child b',\n        component: ChildBComponent,  // another child route component that the router renders\n      },\n    ],\n  },\n];\n\nconst resolvedChildATitle: <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>&lt;string&gt; = () =&gt; Promise.resolve('child a');\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afjqpkqt31nba1uikp29euhff\"><strong>注意</strong>：<br>\n<code>title</code> 屬性遵循與實現 <code><a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a></code> 的靜態路由 <code>data</code> 和動態值相同的規則。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7idrtp241295g15ac1h6uun5w\">你還可以透過擴充套件 <code><a href=\"api/router/TitleStrategy\" class=\"code-anchor\">TitleStrategy</a></code> 來提供自定義標題策略。</p>\n<code-example>\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({providedIn: 'root'})\nexport class TemplatePageTitleStrategy extends <a href=\"api/router/TitleStrategy\" class=\"code-anchor\">TitleStrategy</a> {\n  constructor(private readonly title: <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>) {\n    super();\n  }\n\n  override updateTitle(routerState: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>) {\n    const title = this.buildTitle(routerState);\n    if (title !== undefined) {\n      this.title.setTitle(`My Application | ${title}`);\n    }\n  }\n}\n\n\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [\n    <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(routes),\n    {provide: <a href=\"api/router/TitleStrategy\" class=\"code-anchor\">TitleStrategy</a>, useClass: TemplatePageTitleStrategy},\n  ]\n};\n</code-example>\n<p><a id=\"using-relative-paths\"></a></p>\n<h2 id=\"using-relative-paths\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3kxeqse99fu3esa2cetfbrm6c\">使用相對路徑<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#using-relative-paths\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mug18rwyhrpcxgnifc2mroz0\">相對路徑允許你定義相對於當前 URL 段的路徑。下面的例子展示了到另一個元件 <code>second-component</code> 的相對路由。<code>FirstComponent</code> 和 <code>SecondComponent</code> 在樹中處於同一級別，但是，指向 <code>SecondComponent</code> 的連結位於 <code>FirstComponent</code> 中，這意味著路由器必須先上升一個級別，然後進入二級目錄才能找到 <code>SecondComponent</code>。可以用 <code>../</code> 符號來上升一個級別，而不用寫出到 <code>SecondComponent</code> 的完整路徑。</p>\n<code-example>\n&lt;h2&gt;First <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>&lt;/h2&gt;\n\n&lt;nav&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"../second-component\"&gt;Relative <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> to second component&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vhb6zw0xe82g7mflcdutpput\">除了 <code>../</code>，還可以使用 <code>./</code> 或者不帶前導斜槓來指定當前級別。</p>\n<h3 id=\"specifying-a-relative-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3v5degv9d4glv5pbv8mgsavye\">指定相對路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#specifying-a-relative-route\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjs7r9rxkutwjdnvl56lgiacz\">要指定相對路由，請使用 <code><a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a></code> 中的 <code>relativeTo</code> 屬性。在元件類別中，從 <code>@angular/router</code> 匯入 <code><a href=\"api/router/NavigationExtras\" class=\"code-anchor\">NavigationExtras</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3to3xrdpvgzv7hj63okrytb53\">然後在導向方法中使用 <code>relativeTo</code> 引數。在連結引數陣列（它包含 <code>items</code>）之後新增一個物件，把該物件的 <code>relativeTo</code> 屬性設定為當前的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>，也就是 <code>this.route</code>。</p>\n<code-example>\n  goToItems() {\n    this.router.navigate(['items'], { relativeTo: this.route });\n  }\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d19iez766q0fk9qzpsyo5wbbt\"><code>navigate()</code>引數設定路由器使用當前路由作為基礎來追加\n<code>items</code>。</p>\n\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32vmbb75tl2t6jne0luifr1g2\"><code>goToItems()</code> 方法會把目標 URI 解釋為相對於當前路由的，並導向到 <code>items</code> 路由。</p>\n<h2 id=\"accessing-query-parameters-and-fragments\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cjhpl67y8pn71ai51me94x47\">訪問查詢引數和片段<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#accessing-query-parameters-and-fragments\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4yydgmyf2ih20co40p8wop36\">有時，應用中的某個屬性需要訪問路由的部件，比如查詢引數或片段（fragment）。本教學課程的這個階段使用了一個『英雄之旅』中的清單檢視，你可以在其中點選一個英雄來檢視詳情。路由器使用 <code>id</code> 來顯示正確的英雄的詳情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9p3lfvp2y0ijnfbqxnl79b9a\">首先，在要導向的元件中匯入以下成員。</p>\n<code-example header=\"Component import statements (excerpt)\">\n\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9km5lkql8tgnkdar4caw0vin7\">接下來，注入當前路由（ActivatedRoute）服務：</p>\n<code-example header=\"Component (excerpt)\">\n\nconstructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3idekcxmw3bu8ut9ff1ndsx1b\">設定這個類別，讓你有一個可觀察物件 <code>heroes$</code>、一個用來儲存英雄的 <code>id</code> 號的 <code>selectedId</code>，以及 <code>ngOnInit()</code> 中的英雄們，新增下面的程式碼來獲取所選英雄的 <code>id</code>。這個程式碼片段假設你有一個英雄清單、一個英雄服務、一個能獲取你的英雄的函式，以及用來渲染你的清單和細節的 HTML，就像在《英雄之旅》例子中一樣。</p>\n<code-example header=\"Component 1 (excerpt)\">\n\nheroes$: Observable&lt;Hero[]&gt;;\nselectedId: number;\nheroes = HEROES;\n\nngOnInit() {\n  this.heroes$ = this.route.paramMap.pipe(\n    switchMap(params =&gt; {\n      this.selectedId = Number(params.get('id'));\n      return this.service.getHeroes();\n    })\n  );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64fzmc7ivi3e9ygu3toa90kcg\">接下來，在要導向到的元件中，匯入以下成員。</p>\n<code-example header=\"Component 2 (excerpt)\">\n\nimport { <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a> } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a82ep5teyglietuh2h1q83rc7\">在元件類別的建構式函式中注入 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 和 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>，這樣在這個元件中就可以用它們了：</p>\n<code-example header=\"Component 2 (excerpt)\">\n\nhero$: Observable&lt;Hero&gt;;\n\nconstructor(\n  private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>  ) {}\n\nngOnInit() {\n  const heroId = this.route.snapshot.paramMap.get('id');\n  this.hero$ = this.service.getHero(heroId);\n}\n\ngotoItems(hero: Hero) {\n  const heroId = hero ? hero.id : null;\n  // Pass along the hero id if available\n  // so that the HeroList component can select that item.\n  this.router.navigate(['/heroes', { id: heroId }]);\n}\n\n</code-example>\n<p><a id=\"lazy-loading\"></a></p>\n<h2 id=\"lazy-loading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"506o9p6ll5bmk3b4fpor3jq4e\">延遲載入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#lazy-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3qkadhstbj3cpvf2a8iwut4l\">您可以將路由設定為延遲載入，這意味著Angular僅在需要時載入路由，而不是在應用程式啟動時載入所有路由。 此外，預載入應用程式的部分內容以改善使用者體驗。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rmo6dm0xq9683ds138qrobsm\">要了解更多有關延遲載入和預載入的訊息，請檢視專門指南\n<a href=\"guide/lazy-loading-ngmodules\">延遲載入</a>。</p>\n<h2 id=\"preventing-unauthorized-access\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ei2rfgcc8x8hiwt9b2graywc\">防止未經授權的訪問<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#preventing-unauthorized-access\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5qoxeu7cqgnio8r9kvkhnto9\">使用路由守衛來防止使用者未經授權就導向到應用的某些部分。Angular 中提供了以下路由守衛：</p>\n<ul>\n<li><a href=\"api/router/CanActivateFn\"><code>canActivate</code></a></li>\n<li><a href=\"api/router/CanActivateChildFn\"><code>canActivateChild</code></a></li>\n<li><a href=\"api/router/CanDeactivateFn\"><code>canDeactivate</code></a></li>\n<li><a href=\"api/router/CanMatchFn\"><code>canMatch</code></a></li>\n<li><a href=\"api/router/ResolveFn\"><code>resolve</code></a></li>\n<li><a href=\"api/router/CanLoadFn\"><code>canLoad</code></a></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ppq3clpcfvs2b5nokaa1fa9b\">要想使用路由守衛，可以考慮使用<a href=\"api/router/Route#componentless-routes\">無元件路由</a>，因為這對於保護子路由很方便。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2a7u1upe2l2ojpmojzcbgo15c\">為你的守衛建立一個檔案：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate guard your-guard\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1hp5y38ugifuqrx6por3mwiqi\">請在守衛檔案裡新增你要用到的守衛函式。下面的例子使用 <code>canActivateFn</code> 來保護該路由。</p>\n<code-example header=\"guard (excerpt)\">\n\nexport const yourGuardFunction: <a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a> = (\n    next: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>,\n    state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>) =&gt; {\n      // your  logic goes here\n  }\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84s5ffcp2goe2hmvbmpzrn9je\">在你的路由模組中，使用適當的屬性在你的\n<code>routes</code>設定中。在這裡，\n<code>canActivate</code>告訴路由器調解導向到這個特定路由。\n<code-example header=\"路由設定（摘要）\">\n  { path: '/your-path', component: YourComponent, canActivate: [yourGuardFunction], }\n</code-example></p>\n\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drwp4wqvlr1gesfii5wplz9pl\">關於此可工作範例的更多訊息，請參閱<a href=\"guide/router-tutorial-toh#milestone-5-route-guards\">路由導向中關於路由守衛的部分</a>。</p>\n<h2 id=\"link-parameters-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qhfopo4d1pfnp4w8mtuqehr0\">連結引數陣列<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#link-parameters-array\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evbclmqfvqfon90lxyuyum14d\">連結引數陣列儲存路由導向時所需的成分：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33wxmaradgce7bffv1e1pek8d\">指向目標元件的那個路由的路徑（path）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gqcsyzzhvrymhyafuxkfkvjj\">必備路由引數和可選路由引數，它們將進入該路由的 URL</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hraj07krpx0pkgi00zoaww83\">可以把 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令繫結到一個陣列，就像這樣：</p>\n<code-example>\n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/heroes']\"&gt;Heroes&lt;/a&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33n81j9lw6irz9n29skso5k27\">在指定路由引數時，使用如下的兩元素陣列：</p>\n<code-example>\n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/hero', hero.id]\"&gt;\n  &lt;span class=\"badge\"&gt;{{ hero.id }}&lt;/span&gt;{{ hero.name }}\n&lt;/a&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs1i3madz2neak3wnzoz3pz8n\">可以在物件中提供可選的路由引數，比如 <code>{ foo: 'foo' }</code>：</p>\n<code-example>\n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center', { foo: 'foo' }]\"&gt;Crisis Center&lt;/a&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58l933w6gvk8vtzhqatqmdbp4\">這三個例子涵蓋了你在單級路由的應用中所需的一切。不過，在你新增一個像<em>危機中心</em>一樣的子路由時，你可以建立新連結陣列。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uf5ltdmqnj19m7ntjplmzv5g\">下面這個最小化 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 例子是基於危機中心指定的<a href=\"guide/router-tutorial-toh#a-crisis-center-with-child-routes\">預設子路由</a>建立的。</p>\n<code-example>\n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center']\"&gt;Crisis Center&lt;/a&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dw3gep3o5uu2nccniutl4eb8l\">檢視以下內容：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14v844p57a6d1hesukcf58zkx\">陣列中的第一個條目標記出了父路由（<code>/crisis-center</code>）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4menlzs1x8a46oaoca0zlry62\">這個父路由沒有引數。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oy2dptjfswqve88cwifxwpti\">沒有預設的子路由，因此你得選取一個。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xgix5bu7xu8otfnsngq6zda7\">你決定跳轉到 <code>CrisisListComponent</code>，它的路由路徑是'/'，但你不用顯式的新增它。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94d9ugd7vtavija8vkz4qdfa5\">考慮以下路由器連結，它將從應用的根目錄導向到巨龍危機（Dragon Crisis）：</p>\n<code-example>\n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center', 1]\"&gt;Dragon Crisis&lt;/a&gt;\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14v844p57a6d1hesukcf58zkx\">陣列中的第一個條目標記出了父路由（<code>/crisis-center</code>）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4menlzs1x8a46oaoca0zlry62\">這個父路由沒有引數。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyftcw0jps0myf5dovp114rk\">陣列中的第二個條目（'/:id'）用來標記出到指定危機的詳情頁的子路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5o46pycfga8ab4pq9mhi42tf\">詳細的子路由需要一個 <code>id</code> 路由引數。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evo115ml1m7441zrqsgxj811p\">你把<em>巨龍危機</em>的 <code>id</code> 新增為該陣列中的第二個條目（<code>1</code>）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pu83mo4kqx0h561lh4hz6gl1\">最終生成的路徑是 <code>/crisis-center/1</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjo5k45qqwzgm6yd88zpeyumv\">你也可以把危機中心的路由單獨重新定義為 <code>AppComponent</code> 的範本：</p>\n<code-example>\ntemplate: `\n  &lt;h1 class=\"title\"&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center']\"&gt;Crisis Center&lt;/a&gt;\n    &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center/1', { foo: 'foo' }]\"&gt;Dragon Crisis&lt;/a&gt;\n    &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/crisis-center/2']\"&gt;Shark Crisis&lt;/a&gt;\n  &lt;/nav&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n`\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ahvg02mj2tn4tyzqccx8a87a\">總之，你可以用一級、兩級或多級路由來寫應用程式。連結引數陣列提供了用來表示任意深度路由的連結引數陣列以及任意合法的路由引數序列、必須的路由器引數以及可選的路由引數物件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cje103bc4wo733drju3idhpk\"><a id=\"browser-url-styles\"></a>\n<a id=\"location-strategy\"></a></p>\n<h2 id=\"locationstrategy-and-browser-url-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehca712pc4stio06wtwf6x25k\"><code><a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a></code> 和瀏覽器的網址樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#locationstrategy-and-browser-url-styles\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6s61h5xbvew5jc762pdjcb4hy\">當路由器導向到一個新的元件檢視時，它會用該檢視的 URL 來更新瀏覽器的當前地址以及歷史。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cjwk1ch4t2lwszlbl7wu53xb\">現代 HTML 5 瀏覽器支援<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Working_with_the_History_API#adding_and_modifying_history_entries\" title=\"HTML5 browser history push-state\">history.pushState</a> API，\n這是一項可以改變瀏覽器的當前地址和歷史，卻又不會觸發伺服器端頁面請求的技術。\n路由器可以合成出一個『自然的』URL，它看起來和那些需要進行頁面載入的 URL 沒什麼區別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4dh0kfeiun7dkerxczd3y4je\">下面是危機中心的 URL 在『HTML 5 pushState』風格下的樣子：</p>\n<code-example format=\"none\" language=\"http\">\n\nlocalhost:3002/crisis-center\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwqo1nqf1au2vrpcueobugmv7\">老舊的瀏覽器在當前地址的 URL 變化時總會往伺服器傳送頁面請求……唯一的例外規則是：當這些變化位於『#』（被稱為『hash』）後面時不會傳送。透過把應用內的路由 URL 拼接在 <code>#</code> 之後，路由器可以獲得這條『例外規則』帶來的優點。下面是到<em>危機中心</em>路由的『hash URL』。</p>\n<code-example format=\"none\" language=\"http\">\n\nlocalhost:3002/src/#/crisis-center\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fwmpfqgdxb062iibp38uobih\">路由器透過兩種 <code><a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a></code> 提供者來支援所有這些風格：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dycvc6pm27ridqfrosy8bqn88\">提供者</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/PathLocationStrategy\" class=\"code-anchor\">PathLocationStrategy</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"do0sjf8p9zrdj6d4amndzj1hd\">預設的 \"HTML5 pushState\" 樣式。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cy8rdsta6w5a8u4tkxlaqptju\">\"雜湊 URL\" 樣式。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50jnrw1n9t7uabt4qqrul7kvh\"><code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>函式將\n<code><a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a></code>設定為\n<code><a href=\"api/common/PathLocationStrategy\" class=\"code-anchor\">PathLocationStrategy</a></code>，這使其成為預設策略。你還可以在啟動過程中切換到\n<code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cwtuqwkrw8iq14w9dqvgs9po\">關於提供者和引導過程的更多訊息，請參閱<a href=\"guide/dependency-injection-providers\">依賴注入</a>。</p>\n</div>\n<h2 id=\"choosing-a-routing-strategy\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej3pzfpo7xmt0kdqp0h9yx5z0\">選擇路由策略<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#choosing-a-routing-strategy\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rr2d8kwrqpjo53y345wa07pn\">你必須在開發專案的早期就選擇一種路由策略，因為一旦該應用進入了生產階段，你網站的訪問者就會使用並依賴應用的這些 URL 引用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yi9kbns1m38wqqt3godx64r2\">幾乎所有的 Angular 專案都會使用預設的 HTML 5 風格。它生成的 URL 更易於被使用者理解，它也為將來做<strong>伺服器端渲染</strong>預留了空間。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8t9bg5um8bka6n185ug7sb6nl\">在服務端渲染指定的頁面，是一項可以在該應用首次載入時大幅提升回應速度的技術。那些原本需要十秒甚至更長時間載入的應用，可以預先在服務端渲染好，並在少於一秒的時間內完整渲染在使用者的裝置上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xoymk6rz6xvdh637yl039ucn\">只有當應用的 URL 看起來像是標準的 Web URL，中間沒有 hash（<code>#</code>）時，這個選項才能生效。</p>\n<h2 id=\"base-href\"><code>&lt;base href&gt;</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#base-href\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7iku8985s1o00e0ldn4ua02p\">路由器使用瀏覽器的 <a href=\"https://developer.mozilla.org/docs/Web/API/History_API/Working_with_the_History_API#adding_and_modifying_history_entries\" title=\"HTML5 browser history push-state\">history.pushState</a> API 進行導向。藉助 <code>pushState</code> 你自定義應用中的 URL 路徑 <code>localhost:4200/crisis-center</code>，應用內的 URL 和伺服器的 URL 沒有區別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c344vyfg5qxgl6s7b2wszhsa2\">現代的 HTML5 瀏覽器都支援 <code>pushState</code>，這也就是為什麼很多人把這種 URL 形式稱為 \"HTML 5\" 風格的 URL。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6x3ngchtv99wk9fd7u1u3tx3u\">路由器預設使用 HTML5 風格的導向。\n在 <a href=\"guide/router#browser-url-styles\">LocationStrategy 與瀏覽器 URL 風格</a>部分，你可以瞭解為何推薦使用 HTML5 風格的 URL，如何調整其行為，以及必要時如何切換到老式的 hash（<code>#</code>）風格。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77fp13fk2qmgk7ri9nw8llae4\">你必須在應用的 <code>index.html</code> 中<strong>新增一個 <a href=\"https://developer.mozilla.org/docs/Web/HTML/Element/base\" title=\"base href\"><code>&lt;base href&gt;</code> 元素</a></strong>才能讓 <code>pushState</code> 路由正常工作。\n瀏覽器要用 <code>&lt;base href&gt;</code> 的值為引用 CSS、指令碼和圖片檔案時使用的<em>相對</em> URL 新增字首。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gf7xyg0qzoktfhjizt9eyvyb\">請把 <code>&lt;base&gt;</code> 元素新增在 <code>&lt;head&gt;</code> 標籤的緊後面。如果應用的根目錄是 <code>app</code> 目錄，那麼就可以像這個應用程式一樣，設定 <strong><code>index.html</code></strong> 中的 <code>href</code> 值。程式碼如下。</p>\n<code-example header=\"src/index.html (base-href)\" path=\"router/src/index.html\" region=\"base-href\">\n&lt;base href=\"/\"&gt;\n\n</code-example>\n<h3 id=\"html5-urls-and-the-base-href\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kkgb5ctubnqc3ngr7sfds9ml\">HTML5 網址和 <code>&lt;base href&gt;</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#html5-urls-and-the-base-href\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38shco0l5o43d5z8n1xpn4f9m\">後面的指南中會引用 URL 的不同部分。下圖是這些部分所指內容的梗概：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"none\">\n\nfoo://example.com:8042/over/there?name=ferret#nose\n\\_/   \\______________/\\_________/ \\_________/ \\__/\n |           |            |            |        |\nscheme    authority      path        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>   fragment\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"46x69q70e1kpzoywy7du384xu\">由於路由器預設使用 <a href=\"https://developer.mozilla.org/docs/Web/API/History_API#Adding_and_modifying_history_entries\" title=\"Browser history push-state\">HTML5 pushState</a>  風格，所以你<em>必須</em>用一個 <code>&lt;base href&gt;</code> 來設定該策略（Strategy）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9co7qfzg7un54g8axo99xiqdi\">設定該策略的首選方式是往 <code>index.html</code> 的 <code>&lt;head&gt;</code> 中新增一個 <a href=\"https://developer.mozilla.org/docs/Web/HTML/Element/base\" title=\"base href\"><code>&lt;base href&gt;</code> element</a>標籤。</p>\n<code-example header=\"src/index.html (base-href)\" path=\"router/src/index.html\" region=\"base-href\">\n&lt;base href=\"/\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uon5zk1acdjc23g9yu4z4oy0\">如果沒有該標記，瀏覽器就可能無法在『深度連結』進入應用時載入資源（圖片，CSS，指令碼）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2plx9vbry3sg9d8xdw0nzo35k\">有些開發人員可能無法新增 <code>&lt;base&gt;</code> 元素，這可能是因為它們沒有訪問 <code>&lt;head&gt;</code> 或 <code>index.html</code> 的許可權。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40bkngqtv5m7preip5ei35cai\">它們仍然可以使用 HTML 5 格式的 URL，但要採取如下步驟進行補救：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3m77urwfq13ywasuq7cxpalha\">用適當的 <code><a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a></code> 值提供（provide）路由器。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3eiiqryiowehbhxm4lzs322vg\">對所有 Web 資源（CSS、圖片、指令碼和範本 HTML 檔案）使用根 URL（高優先度 URL）。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3178c2anupeamlmu0szd5d5bm\"><code>&lt;base href&gt;</code> <code>path</code> 應該以『/』結尾，因為瀏覽器會忽略 <code>path</code> 中最右邊的『 <code>/</code> 』後面的字元</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cwscz45fqlm9b588pa1m7nzw\">如果 <code>&lt;base href&gt;</code> 包含 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a></code> 部分，則只有頁內連結的 <code>path</code> 部分為空並且沒有 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a></code> 時，才會使用這裡的 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a></code>。這意味著 <code>&lt;base href&gt;</code> 中的 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a></code> 部分只有在使用 <code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code> 策略時才有用。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cipsq91exmoe39hetfuhj2l09\">如果頁內連結是根 URL（高優先度 URL），則 <code>&lt;base href&gt;</code> 不會使用。在這種方式下，<code><a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a></code> 的優先度將會導致所有由 Angular 建立的連結忽略 <code>&lt;base href&gt;</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1uo4h7pbiljj2xdlflt3f9b2d\"><code>&lt;base href&gt;</code> 中的片段（#後面的部分）<em>永遠不會</em>被使用</p>\n</li>\n</ul>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bg3ae7iiqnp626r5usqxaam0b\">有關如何使用 <code>&lt;base href&gt;</code> 建立目標 URI 的更完整訊息，請參閱 <a href=\"https://tools.ietf.org/html/rfc3986#section-5.2.2\">RFC</a>有關轉換引用的部分。</p>\n<p><a id=\"hashlocationstrategy\"></a></p>\n<h3 id=\"hashlocationstrategy\"><code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router#hashlocationstrategy\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5r6pv82hiy1r121gl4jv8nz77\">透過為\n<code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>函式新增\n<code><a href=\"api/router/withHashLocation\" class=\"code-anchor\">withHashLocation</a></code>屬性來使用\n<code><a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a></code>在\n<code>ApplicationConfiguration</code>中。</p>\n<code-example>\n  providers: [\n    <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(appRoutes, <a href=\"api/router/withHashLocation\" class=\"code-anchor\">withHashLocation</a>())\n  ]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtmsidtovqp61x6kmw10f2u12\">當使用\n<code>RouterModule.forRoot</code>時，在第二個引數中設定\n<code>useHash: true</code>：\n<code>RouterModule.forRoot(routes, {useHash: true})</code>。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Tue Oct 24 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/router\n - api/router/ActivatedRoute\n - api/router/NavigationBehaviorOptions\n - api/router/NavigationExtras\n - api/router/Route\n - api/router/Router\n - api/router/RouterModule\n - api/router/RouterState\n - api/router/TitleStrategy\n - api/router/UrlCreationOptions\n - guide/ajs-quick-reference\n - guide/architecture\n - guide/architecture-next-steps\n - guide/built-in-directives\n - guide/deployment\n - guide/docs-style-guide\n - guide/example-apps-list\n - guide/glossary\n - guide/hierarchical-dependency-injection\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/npm-packages\n - guide/router-reference\n - guide/router-tutorial\n - guide/router-tutorial-toh\n - guide/routing-overview\n - guide/routing-with-urlmatcher\n - guide/upgrade\n - guide/what-is-angular\n - start/start-routing\n - tutorial/first-app/first-app-lesson-10\n - tutorial/first-app/first-app-lesson-11\n-->\n<!-- links from this doc:\n - api/animations/query\n - api/common/APP_BASE_HREF\n - api/common/CommonModule\n - api/common/HashLocationStrategy\n - api/common/LocationStrategy\n - api/common/PathLocationStrategy\n - api/core/ApplicationConfig\n - api/core/Component\n - api/core/Injectable\n - api/core/Input\n - api/platform-browser/Title\n - api/router/ActivatedRoute\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivateChildFn\n - api/router/CanActivateFn\n - api/router/CanDeactivateFn\n - api/router/CanLoadFn\n - api/router/CanMatchFn\n - api/router/NavigationExtras\n - api/router/ParamMap\n - api/router/ResolveFn\n - api/router/Route\n - api/router/Route#componentless-routes\n - api/router/Router\n - api/router/RouterConfigOptions#paramsInheritanceStrategy\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterOutlet\n - api/router/RouterStateSnapshot\n - api/router/Routes\n - api/router/TitleStrategy\n - api/router/provideRouter\n - api/router/withComponentInputBinding\n - api/router/withHashLocation\n - api/router/withRouterConfig\n - guide/dependency-injection-providers\n - guide/lazy-loading-ngmodules\n - guide/router#404-page-how-to\n - guide/router#accessing-query-parameters-and-fragments\n - guide/router#adding-components-for-routing\n - guide/router#base-href\n - guide/router#browser-url-styles\n - guide/router#choosing-a-routing-strategy\n - guide/router#common-routing-tasks\n - guide/router#defining-a-basic-route\n - guide/router#displaying-a-404-page\n - guide/router#generate-an-application\n - guide/router#getting-route-information\n - guide/router#hashlocationstrategy\n - guide/router#html5-urls-and-the-base-href\n - guide/router#importing-your-new-components\n - guide/router#lazy-loading\n - guide/router#link-parameters-array\n - guide/router#locationstrategy-and-browser-url-styles\n - guide/router#nesting-routes\n - guide/router#preventing-unauthorized-access\n - guide/router#route-order\n - guide/router#setting-the-page-title\n - guide/router#setting-up-redirects\n - guide/router#setting-up-wildcard-routes\n - guide/router#specifying-a-relative-route\n - guide/router#using-relative-paths\n - guide/router#wildcard-route-how-to\n - guide/router-tutorial-toh#a-crisis-center-with-child-routes\n - guide/router-tutorial-toh#milestone-5-route-guards\n - guide/router-tutorial-toh#pathmatch\n - https://developer.mozilla.org/docs/Web/API/History_API#Adding_and_modifying_history_entries\n - https://developer.mozilla.org/docs/Web/API/History_API/Working_with_the_History_API#adding_and_modifying_history_entries\n - https://developer.mozilla.org/docs/Web/HTML/Element/base\n - https://tools.ietf.org/html/rfc3986#section-5.2.2\n-->"}
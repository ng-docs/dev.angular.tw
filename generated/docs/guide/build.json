{"id":"guide/build","title":"构建并运行 Angular 应用","contents":"<div class=\"content\">\n  <h1 id=\"building-and-serving-angular-apps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88hw7b6e7kfuxqib71xfmwdzt\">构建并运行 Angular 应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#building-and-serving-angular-apps\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"264k8ntig6ntsx0emx55r9tpr\">本文讨论的是 Angular 项目中与构建有关的配置项。</p>\n<p><a id=\"app-environments\"></a></p>\n<h2 id=\"configuring-application-environments\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ma6kdja1brkmk7k888c0uj86\">配置应用环境<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configuring-application-environments\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72k4p493u1zq6xuh66dum2lx8\">你可以为项目定义不同的命名构建配置，例如 <code>development</code> 和 <code>staging</code>，具有不同的默认值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bkppnhkebal80ui38062wq7s\">每个命名配置项都可以具有某些选项的默认值，并应用于各种<a href=\"guide/glossary#target\">构建目标</a>，比如 <code>build</code>、<code>serve</code> 和 <code>test</code>。<a href=\"cli\">Angular CLI</a> 的 <code>build</code>、<code>serve</code> 和 <code>test</code> 命令可以为不同的目标环境，把文件替换成合适的版本。</p>\n<h3 id=\"configure-environment-specific-defaults\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bduetr5d2s7esxw285ejrymc6\">配置针对特定环境的默认值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configure-environment-specific-defaults\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"h174ee1odgpweo20nh49nqk9\">使用 Angular CLI，首先运行此处显示的<a href=\"cli/generate#environments-command\">生成环境命令</a>以创建 <code>src/environments/</code> 目录并将项目配置为使用这些文件。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate environments\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sosmt4657puytmpadhi4v40u\">项目的 <code>src/environments/</code> 目录包含基本配置文件 <code>environment.ts</code>，它提供 <code>production</code> 的配置，即默认环境。你可以在特定于目标的配置文件中覆盖其他环境的默认值，例如 <code>development</code> 和 <code>staging</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4reizjf10jcs1ftw359bt1ndz\">比如：</p>\n<div class=\"filetree\">\n    <div class=\"file\">\n        myProject/src/environments\n    </div>\n    <div class=\"children\">\n        <div class=\"file\">\n          environment.ts\n        </div>\n        <div class=\"file\">\n          environment.development.ts\n        </div>\n        <div class=\"file\">\n          environment.staging.ts\n        </div>\n    </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2crrbos1h23l4zzftumq9rghn\">基础环境 <code>environment.ts</code> 包含了默认的环境设置。比如：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport const environment = {\n  production: true\n};\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p0cwwztefuyaat7et6q6kq0r\">当没有指定环境时，<code>build</code> 命令就会用它作为构建目标。你可以添加其它变量，可以用该环境对象附加属性的形式，也可以用独立对象的形式。比如：以下内容将会把一个变量添加到默认环境中：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport const environment = {\n  production: true,\n  apiUrl: 'http://my-prod-url'\n};\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zz71iyiwvc46yt23jyunl3mr\">你可以添加特定于目标的配置文件，例如 <code>environment.development.ts</code>。以下内容为开发构建目标设置了默认值：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://my-api-url'\n};\n\n</code-example>\n<h3 id=\"using-environment-specific-variables-in-your-app\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bho9hv9x3zox5xp2qg8omtwfz\">在应用中使用针对特定环境的变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#using-environment-specific-variables-in-your-app\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qgml65n2xboitkwjrn9hl35k\">以下应用程序结构可以为 <code>development</code> 和 <code>staging</code> 环境配置构建目标：</p>\n<div class=\"filetree\">\n    <div class=\"file\">\n        src\n    </div>\n    <div class=\"children\">\n        <div class=\"file\">\n          app\n        </div>\n        <div class=\"children\">\n            <div class=\"file\">\n              app.component.html\n            </div>\n            <div class=\"file\">\n              app.component.ts\n            </div>\n        </div>\n        <div class=\"file\">\n          environments\n        </div>\n        <div class=\"children\">\n            <div class=\"file\">\n              environment.ts\n            </div>\n            <div class=\"file\">\n              environment.development.ts\n            </div>\n            <div class=\"file\">\n              environment.staging.ts\n            </div>\n        </div>\n    </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2sdvcc2pzgw2sp1y08manamh\">要使用已定义的配置环境，组件必须导入原始版的环境文件：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { environment } from './../environments/environment';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hiltcxghmf8s1ba2nav74ov4\">这会确保 <code>build</code> 和 <code>serve</code> 命令能找到针对特定目标的配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qoq2yyn2t00sfus44vvlvltl\">组件文件（<code>app.component.ts</code>）中的下列代码可以使用该配置文件中定义的环境变量。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n  import { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n  import { environment } from './../environments/environment';\n\n  @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n  })\n  export class AppComponent {\n    constructor() {\n      console.log(environment.production); // Logs false for development environment\n    }\n\n    title = 'app works!';\n  }\n\n</code-example>\n<p><a id=\"file-replacement\"></a></p>\n<h2 id=\"configure-target-specific-file-replacements\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ch840up35ylnv5k37hepyoh4i\">配置针对特定目标的文件替换规则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configure-target-specific-file-replacements\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zr7qsau8pnnnbkr7gpmtkc71\">CLI 的主配置文件 <code>angular.json</code> 中的每个构建目标下都包含了一个 <code>fileReplacements</code> 区段。这能让你把 TypeScript 程序中的任何文件替换为针对特定目标的版本。当构建目标需要包含针对特定环境（比如生产或预生产）的代码或变量时，这非常有用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6abqd21n54m82f02j192m33bm\">默认情况下不会替换任何文件。你可以为特定的构建目标添加文件替换规则。比如：</p>\n<code-example format=\"json\" language=\"json\">\n\n  \"configurations\": {\n    \"development\": {\n      \"fileReplacements\": [\n          {\n            \"replace\": \"src/environments/environment.ts\",\n            \"with\": \"src/environments/environment.development.ts\"\n          }\n        ],\n        …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"esn3mk7f8pk9269pbi6w8bb0v\">这意味着当你使用 <code>ng build --configuration development</code> 构建开发配置时，<code>src/environments/environment.ts</code> 文件将替换为特定于目标的版本 <code>src/environments/environment.development.ts</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6g4ocsee7rr2868tqxdmaweqi\">你还可以按需添加更多配置文件。要想添加预生产环境，把 <code>src/environments/environment.ts</code> 复制为 <code>src/environments/environment.staging.ts</code>，然后在 <code>angular.json</code> 中添加 <code>staging</code> 配置：</p>\n<code-example format=\"json\" language=\"json\">\n\n  \"configurations\": {\n    \"development\": { … },\n    \"production\": { … },\n    \"staging\": {\n      \"fileReplacements\": [\n        {\n          \"replace\": \"src/environments/environment.ts\",\n          \"with\": \"src/environments/environment.staging.ts\"\n        }\n      ]\n    }\n  }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b9hnii6g591zv57yd9j8xv8fb\">你还可以往目标环境中添加更多配置项。你的构建目标支持的任何选项都可以在构建目标配置中进行覆盖。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4aaxm18q5irqc0m5qn6o45ucf\">要想使用预生产环境（staging）的配置进行构建，请运行下列命令：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build --configuration=staging\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36p6w1mfzonskp4a0438oyso8\">如果将其添加到 <code>angular.json</code> 的 \"serve:configurations\" 区段，你还可以配置 <code>serve</code> 命令来使用 目标构建配置：</p>\n<code-example format=\"json\" language=\"json\">\n\n  \"serve\": {\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": {\n      \"browserTarget\": \"your-project-name:build\"\n    },\n    \"configurations\": {\n      \"development\": {\n        \"browserTarget\": \"your-project-name:build:development\"\n      },\n      \"production\": {\n        \"browserTarget\": \"your-project-name:build:production\"\n      },\n      \"staging\": {\n        \"browserTarget\": \"your-project-name:build:staging\"\n      }\n    }\n  },\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p3c6k9qk077n6t5o6ttkwt1i\"><a id=\"size-budgets\"></a>\n<a id=\"configure-size-budgets\"></a></p>\n<h2 id=\"configuring-size-budgets\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hx5ugdfaz1upcjjlktn9xiha\">配置文件大小预算<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configuring-size-budgets\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9i8aki2fcslj3ijkrj32e6ar\">当应用的功能不断增长时，其文件大小也会同步增长。CLI 允许你通过配置项来限制文件大小，以确保应用的各个部分都处于你定义的大小范围内。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"167dxf0g3scnm9foagizhtezc\">你可以在 CLI 配置文件 <code>angular.json</code> 的 <code>budgets</code> 区段为每个<a href=\"guide/build#app-environments\">所配置的环境</a>定义这些大小范围。</p>\n<code-example format=\"json\" language=\"json\">\n\n{\n  …\n  \"configurations\": {\n    \"production\": {\n      …\n      \"budgets\": []\n    }\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3z2ssvoxs1756k992nomfgcjz\">你可以为整个应用指定大小范围，也可以为特定部分。每个条目会为一种特定的类型配置大小范围。用下列各式来指定大小的值：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f39e1sxuw8gilo5hjvhhep4dy\">尺寸数值</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mrn2snrolso1n9jjtrigmf7u\"><code>123</code> 或 \n<code>123b</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3r30dd191rd2w0bey9q4q6bkb\">字节大小。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>123kb</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5k6j2vwd86pxs3mbj1efnhpf\">千字节大小。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>123mb</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ac6e9w1d42rlexbzf3296np80\">兆字节大小。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>12%</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e11g16jg0k83x5ns0585fd5s3\">相对于基线的尺寸百分比。（对于基线值无效。）</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2sahp62uiyc5stee2w3n2shan\">如果配置了大小范围，构建系统就会在发现应用的某个部分达到或超过了你设置的大小范围时发出警告或报错。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"r1yblry1oaoj120b94avnusx\">每个范围条目是一个 JSON 对象，它具有下列属性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dkddoxcqk28ajo52wkpdu2by\">属性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66vasbp44yre2dcyqjx64g0vw\">数值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">type</td>\n<td align=\"left\">The type of budget. One of: <table> <thead> <tr> <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5hi6fx5hpdr89gqwsxztq1jc\">数值</th> <th data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40zskny0031m998f20foy4oiv\">详情</th> </tr> </thead> <tbody> <tr> <td> <code>bundle</code> </td> <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ay8unomh4ixl3q5sicb16t0d\">特定捆绑包的大小。</td> </tr> <tr> <td> <code>initial</code> </td> <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f8c091389hbhuz88bienbo0r\">用于引导应用程序所需的JavaScript大小。默认情况下，在500kb时警告，在1mb时出错。</td> </tr> <tr> <td> <code>allScript</code> </td> <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9g2flta1848jigu01i46uo1tx\">所有脚本的大小。</td> </tr> <tr> <td> <code>all</code> </td> <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4f6t8v7672wlybjs905m7nesc\">整个应用程序的大小。</td> </tr> <tr> <td> <code>anyComponentStyle</code> </td> <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"921ale2pm55jedpwmnr0nwo4t\">任何一个组件样式表的大小。默认情况下，在2kb时警告，在4kb时出错。</td> </tr> <tr> <td> <code>anyScript</code> </td> <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3crns90xctd9o8bg3cjt3sx3\">任何一个脚本的大小。</td> </tr> <tr> <td> <code>any</code> </td> <td data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4n8vb9e842dxtf91av6syk0n\">任何文件的大小。</td> </tr> </tbody> </table></td>\n</tr>\n<tr>\n<td align=\"left\">name</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jd7cr5m6proql0afx8o0cya3\">捆绑包的名称（对于\n<code>type=bundle</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\">baseline</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1epv53086i1a3zu49n418dtkb\">用于比较的基线大小。</td>\n</tr>\n<tr>\n<td align=\"left\">maximumWarning</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14v0v2trrr6l9yp6tnhdqfaqd\">相对于基线的警告最大阈值。</td>\n</tr>\n<tr>\n<td align=\"left\">maximumError</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"at72xfo9mcoc9zrpz2e23gesg\">相对于基准线的最大错误阈值。</td>\n</tr>\n<tr>\n<td align=\"left\">minimumWarning</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dla2chntl6cza6knr6hkhy79b\">相对于基准线的最小警告阈值。</td>\n</tr>\n<tr>\n<td align=\"left\">minimumError</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ffjzvk8mmmuvjevi8owmrs78\">相对于基准线的最小错误阈值。</td>\n</tr>\n<tr>\n<td align=\"left\">warning</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97be9epj15cieph3z6j1i8rvi\">相对于基准线的警告阈值（最小值和最大值）。</td>\n</tr>\n<tr>\n<td align=\"left\">error</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9chm0twsg8aquavd8woiyftw\">相对于基准线的错误阈值（最小值和最大值）。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"commonjs \"></a></p>\n<h2 id=\"configuring-commonjs-dependencies\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtt5cni4eitwlf9yrurqvqjgf\">配置 CommonJS 依赖项<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configuring-commonjs-dependencies\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2b9jp8kwbkjmqew0ipccrzqs\">建议你避免在 Angular 应用程序中依赖 CommonJS 模块。依赖 CommonJS 模块可能会阻止捆绑器和压缩器优化此应用，导致捆绑包体积变大。建议你在整个应用程序中使用 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import\">ECMAScript 模块</a>。更多信息，请参见 <a href=\"https://web.dev/commonjs-larger-bundles\">为何 CommonJS 让捆绑包变大了</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btgxs1r6jea3umzf7x3lh7vnb\">如果 Angular CLI 检测到你的浏览器端应用依赖了 CommonJS 模块，就会发出警告。要禁用这些警告，你可以把这些 CommonJS 模块的名字添加到 <code>angular.json</code> 文件的 <code>build</code> 区的 <code>allowedCommonJsDependencies</code> 选项中。</p>\n<code-example language=\"json\">\n\n\"build\": {\n  \"builder\": \"@angular-devkit/build-angular:browser\",\n  \"options\": {\n     \"allowedCommonJsDependencies\": [\n        \"lodash\"\n     ]\n     …\n   }\n   …\n},\n\n</code-example>\n<p><a id=\"browser-compat\"></a></p>\n<h2 id=\"configuring-browser-compatibility\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bbvdhz7f1axeulwv1ynf76v8\">配置浏览器兼容性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configuring-browser-compatibility\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aabn5nybhevg9nvria0shk0nh\">Angular CLI 使用 <a href=\"https://github.com/browserslist/browserslist\">Browserslist</a> 来确保对不同浏览器版本的兼容性。\n<a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a> 用于为 CSS 添加供应商前缀，而 <a href=\"https://babeljs.io/docs/en/babel-preset-env\">@babel/preset-env</a> 用于进行 JavaScript 语法转换。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rcg62fj3igw2jk31omdi00in\">在内部，Angular CLI 使用如下 <code>browserslist</code> 配置，以匹配 Angular <a href=\"guide/browser-support\">所支持的浏览器</a>。</p>\n  <code-example format=\"none\" language=\"text\">\n  last 2 Chrome versions\n  last 1 Firefox version\n  last 2 Edge major versions\n  last 2 Safari major versions\n  last 2 iOS major versions\n  Firefox ESR\n  </code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dd560jolz5d81kgemwylbhahd\">要覆盖内部配置，请运行\n<a href=\"cli/generate#config-command\"><code>ng generate config browserslist</code></a>，这将在项目目录中生成一个\n<code>.browserslistrc</code>配置文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dg61zg3zbpnr984dp1nxnoegs\">有关如何以特定浏览器和版本为目标的更多示例，请参阅<a href=\"https://github.com/browserslist/browserslist\">browserslist 存储库</a>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpbn9ooolsydmk20jmoih46pk\">使用 <a href=\"https://browsersl.ist\">browsersl.ist</a> 显示与 <code>browserslist</code> 查询兼容的浏览器。</p>\n</div>\n<p><a id=\"proxy\"></a></p>\n<h2 id=\"proxying-to-a-backend-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"as1sui53pjttfayo0ymkbvaia\">代理到后端服务器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#proxying-to-a-backend-server\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9m6hhoqijgnjceuq1haon0cip\">可以用 <code>webpack</code> 开发服务器中的<a href=\"https://webpack.js.org/configuration/dev-server/#devserver-proxy\">代理支持</a>来把特定的 URL 转发给后端服务器，只要传入 <code>--proxy-config</code> 选项就可以了。\n比如，要把所有到 <code>http://localhost:4200/api</code> 的调用都转给运行在 <code>http://localhost:3000/api</code> 上的服务器，可采取如下步骤。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4v0ny4ddq71j1v23062jxnham\">在项目的 <code>src/</code> 目录下创建一个 <code>proxy.conf.json</code> 文件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eobya4dqv87s2iodonvi2nl3q\">往这个新的代理配置文件中添加如下内容：</p>\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crcv8lvhyn4co7pfoqwxt0fp5\">在 CLI 配置文件 <code>angular.json</code> 中为 <code>serve</code> 目标添加 <code>proxyConfig</code> 选项：</p>\n<code-example format=\"json\" language=\"json\">\n\n  …\n  \"architect\": {\n    \"serve\": {\n      \"builder\": \"@angular-devkit/build-angular:dev-server\",\n      \"options\": {\n        \"browserTarget\": \"your-application-name:build\",\n        \"proxyConfig\": \"src/proxy.conf.json\"\n      },\n…\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsbqe3h7rf5wssumy8yz33bxx\">要使用这个代理选项启动开发服务器，请运行 <code>ng serve</code> 命令。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29ccg08tn5o5jyzzxchgonfcb\">可以编辑这个代理配置文件，以添加配置项，下面是一些例子。要查看所有选项的详细说明，参阅 <a href=\"https://webpack.js.org/configuration/dev-server/#devserver-proxy\">webpack DevServer 文档</a>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cj5t0symv3pmu75kne2hqqm5p\">注意：<br>\n如果你编辑了代理配置文件，必须重新启动 <code>ng serve</code> 进程才能使更改生效。</p>\n</div>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pysn8hliviy7rgf558g49k9k\">从 Node 版本 17 开始，Node 不会总是将\n<code>http://localhost:&lt;port&gt;</code>解析为\n<code>http://127.0.0.1:&lt;port&gt;</code>，这取决于每台机器的配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"248cvkxolsmh4khk8my176ai1\">如果使用代理指向\n<code>localhost</code> URL时出现\n<code>ECONNREFUSED</code>错误，您可以通过将目标从\n<code>http://localhost:&lt;port&gt;</code>更新为\n<code>http://127.0.0.1:&lt;port&gt;</code>来解决此问题。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qewuhpd6sk4ct4hqp8mj3fai\">有关更多信息，请参阅\n<a href=\"https://github.com/chimurai/http-proxy-middleware#nodejs-17-econnrefused-issue-with-ipv6-and-localhost-705\">http代理中间件文档</a>。</p>\n</div>\n<h3 id=\"rewrite-the-url-path\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jrg6qusnjadtgntlgb2lhdq\">重写 URL 路径<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#rewrite-the-url-path\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mq38dkpr523cknbxfp0asw9h\"><code>pathRewrite</code> 代理配置项能让你在运行时重写 URL 路径。比如，可以在代理配置中指定如下的 <code>pathRewrite</code> 值，以移除路径末尾的 \"api\" 部分。</p>\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false,\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    }\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tympussveb4zxejzcipnag5w\">如果你要访问的后端不在 <code>localhost</code> 上，还要设置 <code>changeOrigin</code> 选项。比如：</p>\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"/api\": {\n    \"target\": \"http://npmjs.org\",\n    \"secure\": false,\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    },\n    \"changeOrigin\": true\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lf03ysugmq8slleet7xnw9lx\">要想了解你的代理是否在如预期般工作，可以设置 <code>logLevel</code> 选项。比如：</p>\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false,\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    },\n    \"logLevel\": \"debug\"\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a998lvcjyqs0qfeu736omzjfb\">代理的有效日志级别是 <code>info</code>（默认值）、<code>debug</code>、<code>warn</code>、<code>error</code> 和 <code>silent</code>。</p>\n<h3 id=\"proxy-multiple-entries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68676s6ynzyqt7oynmcx83tks\">代理多个条目<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#proxy-multiple-entries\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agvl5kdrohmum3h9hy5vv50lv\">通过用 JavaScript 定义此配置，你还可以把多个条目代理到同一个目标。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kqgfnxf9qdforw29bp35kama\">将代理配置文件设置为 <code>proxy.conf.mjs</code> （而不是 <code>proxy.conf.json</code> ），并按照以下示例指定配置文件。</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nexport default [\n  {\n    context: [\n        '/my',\n        '/many',\n        '/endpoints',\n        '/i',\n        '/need',\n        '/to',\n        '/proxy'\n    ],\n    target: 'http://localhost:3000',\n    secure: false\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f189xhkvkvasuxx4a0ox77qx0\">在 CLI 配置文件 <code>angular.json</code> 中，指向 JavaScript 配置文件：</p>\n<code-example format=\"json\" language=\"json\">\n\n…\n\"architect\": {\n  \"serve\": {\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": {\n      \"browserTarget\": \"your-application-name:build\",\n      \"proxyConfig\": \"src/proxy.conf.mjs\"\n    },\n…\n\n</code-example>\n<h3 id=\"bypass-the-proxy\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0qkcwvxku0on5xfs49mauj4v\">绕过代理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#bypass-the-proxy\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yok7hje68e9wof2ck0yz47h0\">如果你需要根据情况绕过此代理，或在发出请求前先动态修改一下，可以添加 <code>bypass</code> 选项，就像下例的 JavaScript 所示。</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nexport default {\n  '/api/proxy': {\n    \"target\": 'http://localhost:3000',\n    \"secure\": false,\n    \"bypass\": function (req, res, proxyOptions) {\n        if (req.headers.accept.includes('html')) {\n            console.log('Skipping proxy for <a href=\"api/animations/browser\" class=\"code-anchor\">browser</a> request.');\n            return '/index.html';\n        }\n        req.headers['X-Custom-Header'] = 'yes';\n    }\n  }\n};\n\n</code-example>\n<h3 id=\"using-corporate-proxy\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94r25i030czvrd8tyz95yash8\">使用公司代理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#using-corporate-proxy\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"j7telk9ir0rhg9r6oj3ns6ks\">如果你在某个公司代理之后，此后端就无法直接代理到局域网之外的任何 URL。这种情况下，你可以把这个后端代理配置为，借助 agent 通过你的公司代理转发此调用：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install --save-dev https-proxy-agent\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"671mtfsiixjjyi2cr4bgk2ifp\">如果你定义了环境变量 <code>http_proxy</code> 或 <code>HTTP_PROXY</code>，当运行 <code>npm start</code> 时，就会自动添加一个 agent 来通过你的企业代理转发网络调用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jthtuu06rsswqxszrww1krg3\">请在 JavaScript 配置文件中使用如下内容。</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nimport HttpsProxyAgent from 'https-proxy-agent';\n\nconst proxyConfig = [{\n  context: '/api',\n  target: 'http://your-remote-server.com:3000',\n  secure: false\n}];\n\nexport default (proxyConfig) =&gt; {\n  const proxyServer = process.env.http_proxy || process.env.HTTP_PROXY;\n  if (proxyServer) {\n    const agent = new HttpsProxyAgent(proxyServer);\n    console.log('Using corporate proxy server: ' + proxyServer);\n\n    for (const entry of proxyConfig) {\n      entry.agent = agent;\n    }\n  }\n\n  return proxyConfig;\n};\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Tue Jan 17 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/aot-compiler\n - guide/architecture-next-steps\n - guide/i18n-common-merge\n - guide/npm-packages\n - guide/strict-mode\n - guide/upgrade-setup\n - guide/workspace-config\n - start/start-deployment\n-->\n<!-- links from this doc:\n - api/animations/browser\n - api/core/Component\n - cli\n - cli/generate#config-command\n - cli/generate#environments-command\n - guide/browser-support\n - guide/build#app-environments\n - guide/build#building-and-serving-angular-apps\n - guide/build#bypass-the-proxy\n - guide/build#configure-environment-specific-defaults\n - guide/build#configure-target-specific-file-replacements\n - guide/build#configuring-application-environments\n - guide/build#configuring-browser-compatibility\n - guide/build#configuring-commonjs-dependencies\n - guide/build#configuring-size-budgets\n - guide/build#proxy-multiple-entries\n - guide/build#proxying-to-a-backend-server\n - guide/build#rewrite-the-url-path\n - guide/build#using-corporate-proxy\n - guide/build#using-environment-specific-variables-in-your-app\n - guide/glossary#target\n - https://babeljs.io/docs/en/babel-preset-env\n - https://browsersl.ist\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import\n - https://github.com/browserslist/browserslist\n - https://github.com/chimurai/http-proxy-middleware#nodejs-17-econnrefused-issue-with-ipv6-and-localhost-705\n - https://github.com/postcss/autoprefixer\n - https://web.dev/commonjs-larger-bundles\n - https://webpack.js.org/configuration/dev-server/#devserverproxy\n-->"}
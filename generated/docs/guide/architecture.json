{"id":"guide/architecture","title":"Angular 概念簡介","contents":"<div class=\"content\">\n  <h1 id=\"introduction-to-angular-concepts\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7578hxgxtlup3f3iuhimhupk5\">Angular 概念簡介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#introduction-to-angular-concepts\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9znaj8vlvqbo6s8vnrzitbtgr\">Angular 是一個用 HTML 和 TypeScript 建立用戶端應用的平台與框架。Angular 本身就是用 TypeScript 寫成的。它將核心功能和可選功能作為一組 TypeScript 函式庫進行實現，你可以把它們匯入你的應用中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awruhf7iw4f9luptd7o9ldhf9\">Angular應用程式的架構依賴於某些基本概念。Angular框架的基本建立塊是Angular元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lilmq716qvdjvgva4ok66qj3\">元件定義<em>檢視</em>。檢視是一組可見的螢幕元素，Angular 可以根據你的程式邏輯和數據來選擇和修改它們。每個應用都至少有一個根元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vknb2zogcgokvv8esyvhej7w\">元件使用\n<em>服務</em>，這些服務提供與檢視直接無關的後台功能，如獲取資料。這些服務可以作為\n<em>依賴項</em>注入到元件中，使你的程式碼模組化、可重用且高效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36ff5d1p0ez7dzj7bx69o5c4t\">元件和服務是帶有裝飾器標記的類。 這些裝飾器提供元資料，告訴 Angular 如何使用它們。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lkk4jktl5dpq996tor54rxiq\">元件類別的元資料將元件類別和一個用來定義檢視的<em>樣板</em>關聯起來。樣板把普通的 HTML 和 Angular <em>指令</em>與<em>繫結標記（markup）</em>組合起來，這樣 Angular 就可以在渲染 HTML 之前先修改這些 HTML。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3mt90h2ahui1eskl7s782rb9\">服務類別的元資料提供了一些訊息，Angular 要用這些訊息來讓元件可以透過<em>依賴注入（DI）</em>使用該服務。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eiqubgj86p6rksa53rdyou6rx\">應用的元件通常會定義很多檢視，並進行分級組織。Angular 提供了 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服務來幫助你定義檢視之間的導向路徑。路由器提供了先進的瀏覽器內導向功能。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgao21v1ljoglb1cccdlsi0cf\">參閱 <a href=\"guide/glossary\">Angular 詞彙表</a> 以瞭解對 Angular 重要名詞和用法的基本定義。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5oeh6bf2o8adlc4yerbj497y\">這裡所說的範例應用，參閱<live-example></live-example>。</p>\n</div>\n<h2 id=\"components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7vzzlnsersqq3lvejga81lr\">元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#components\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zmhnjbnl9jsnqgqout82koko\">每個 Angular 應用都至少有一個元件，也就是<em>根元件</em>，它會把元件樹和頁面中的 DOM 連線起來。每個元件都會定義一個類，其中包含應用的資料和邏輯，並與一個 HTML <em>樣板</em>相關聯，該樣板定義了一個供目標環境下顯示的檢視。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qsq8qyljdcig6ea4pl8l7u2f\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器表明緊隨它的那個類是一個元件，並提供樣板和該組件專屬的元資料。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nn1j6b3xtbv617kmqchpz5st\">裝飾器是一些用於修飾 JavaScript 類別的函式。Angular 定義了許多裝飾器，這些裝飾器會把一些特定種類的元資料附加到類別上，以便 Angular 瞭解這些類別的含義以及該如何使用它們。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3olh6a6dz7ju2zaj1bwk77p2c\"><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.x5c2ndtx0\">到網上學習關於裝飾器的更多知識。</a></p>\n</div>\n<h3 id=\"templates-directives-and-data-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cxrr206451pj5cc1ovkiaeso\">樣板、指令和數據繫結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#templates-directives-and-data-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8o8123mh3h7m40kuytialzv6n\">樣板會把 HTML 和 Angular 的標記（markup）組合起來，這些標記可以在 HTML 元素顯示出來之前修改它們。樣板中的<em>指令</em>會提供程式邏輯，而<em>繫結標記</em>會把你應用中的資料和 DOM 連線在一起。有兩種型別的資料繫結：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ooenjokr56t04l5zdtm6x9cz\">資料繫結</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehfop80m9e0igm4pklg35r7g8\">事件繫結</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7b9nspb8pc816cvokbz9sus9a\">讓你的應用在目標環境中回應使用者輸入，並更新應用資料。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhtlys4gb8e2hkqb2wclwgnoe\">屬性（Property）繫結</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1ndtwxjfspvnj63i0ecmvc7n\">讓你將從應用資料計算出的值插入到 HTML 中。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5d3d4hfkxupcu0vylge3t8yo\">在檢視顯示出來之前，Angular 會先根據你的應用資料和邏輯來執行樣板中的指令並解析繫結表示式，以修改 HTML 元素和 DOM。Angular 支援<em>雙向資料繫結</em>，這意味著 DOM 中發生的變化（比如使用者的選擇）同樣可以反映回你的程式資料中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"calum0h7c8mjprjo9ggo11vcl\">你的樣板也可以用<em>通道</em>轉換要顯示的值以增強使用者體驗。比如，可以使用通道來顯示適合使用者所在本地環境的日期和貨幣格式。Angular 為一些通用的轉換提供了預定義通道，你還可以定義自己的通道。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mwp5q5jg65g50y0l4fyx3x3k\">要了解對這些概念的深入討論，參閱<a href=\"guide/architecture-components\">元件介紹</a>。</p>\n</div>\n<p><a id=\"dependency-injection\"></a></p>\n<h2 id=\"services-and-dependency-injection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"455bsnyhbxhyh9t487yrr294q\">服務與依賴注入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#services-and-dependency-injection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p10lowvxnqlbnmeaztvvlnve\">對於與特定檢視無關並希望跨元件共享的資料或邏輯，可以建立<em>服務</em>類。服務類別的定義通常緊跟在 『@Injectable()』 裝飾器之後。該裝飾器提供的元資料可以讓你的服務作為依賴<em>被注入到</em>客戶元件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8byxa5c5hvy99vybs51d6h7q9\"><em>依賴注入</em>（或 DI）讓你可以保持元件類別的精簡和高效。有了 DI，元件就不用從伺服器獲取資料、驗證使用者輸入或直接把日誌寫到控制台，而是會把這些任務委託給服務。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3j5akuph03iwxetqxk7cgwm1r\">更深入的討論，參閱<a href=\"guide/architecture-services\">服務和 DI 簡介</a>。</p>\n</div>\n<h3 id=\"routing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74nlsxkr1xp06lifpm36dhjjp\">路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#routing\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tgxq73lpsqmzq11iw5vx3axx\">Angular \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 套件提供了一個服務，讓你定義應用程式不同狀態和檢視層次之間的導向路徑。 它模仿了常見的瀏覽器導向約定：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cq00hernw02hqylcn21tkbq5q\">在地址欄輸入 URL，瀏覽器就會導向到相應的頁面。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5orex8st7tfz581ksx6a4xyyo\">在頁面中點擊連結，瀏覽器就會導向到一個新頁面。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fz3njn0busvor10kbmz5ew0e\">點選瀏覽器的前進和後退按鈕，瀏覽器就會在你的瀏覽歷史中向前或向後導向。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7llrinuiqe1tc5gt9vv2dkr9h\">路由器將 URL 類似路徑對映到元件而不是頁面。 當用戶執行操作，比如點選連結，會在瀏覽器中載入一個新元件時，路由器會攔截瀏覽器的行為，並顯示或隱藏該組件（及其子元件）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qsmgx5sj7t11szgflx7frxa4\">如果路由器確定當前應用程式狀態需要一個尚未載入的元件，路由器可以延遲載入該組件及其相關依賴項。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6040wnz1indcslu6yfpgx2gu\">路由器會根據你應用中的導向規則和數據狀態來攔截 URL。當用戶點選按鈕、選擇下拉框或收到其它任何來源的輸入時，你可以導向到一個新檢視。路由器會在瀏覽器的歷史日誌中記錄這個動作，所以前進和後退按鈕也能正常工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj2lr09oqhmgj1ig1rfijlyl0\">要定義導向規則，你就要把<em>導向路徑</em>和你的元件關聯起來。路徑（path）使用類似 URL 的語法來和程式資料整合在一起，就像樣板語法會把你的檢視和程式資料整合起來一樣。然後你就可以用程式邏輯來決定要顯示或隱藏哪些檢視，以根據你制定的訪問規則對使用者的輸入做出回應。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kkirj4uj9pmi88aw4rho9ol7\">更深入的討論，參閱<a href=\"guide/router\">路由與導向</a>。</p>\n</div>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5es7l5y9fbl904vxwkyx55rmf\">你已經瞭解了 Angular 應用程式的主要建立模組。 在以下架構頁面中瞭解更多細節。</p>\n<ul>\n<li><a href=\"guide/architecture-components\">Introduction to Components</a>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5g1w7tojwibcgacfjybywfw6e\"><a href=\"guide/architecture-components#templates-and-views\">樣板與檢視</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"me4jvicvvlnvb4ndy827nc3m\"><a href=\"guide/architecture-components#component-metadata\">元件元資料</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14v9c7o29bxqo7vglhiai21pm\"><a href=\"guide/architecture-components#data-binding\">資料繫結</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7f6gw7jf7ajy4785qmtlhno0\"><a href=\"guide/architecture-components#directives\">指令</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91m8b8dvjz6q41qd7035dbbun\"><a href=\"guide/architecture-components#pipes\">通道</a></li>\n</ul>\n</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8b3ivfy1gmglouxt0maokjam7\"><a href=\"guide/architecture-services\">服務與依賴注入簡介</a></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwucpq3va6gr3meb9r3bstmhk\">當你熟悉這些基本建立模組後，可以在文件中深入探討。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30ei587z8g3vx1vx6wsvkssph\">你可能還對幫助你建立和部署 Angular 應用程式的\n<a href=\"guide/architecture-next-steps\">工具和技術</a>感興趣。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Sep 25 2023</div>\n\n\n\n<!-- links to this doc:\n - docs\n - guide/ajs-quick-reference\n - guide/animations\n - guide/dynamic-form\n - guide/example-apps-list\n - guide/form-validation\n - guide/forms\n - guide/forms-overview\n - guide/glossary\n - guide/lifecycle-hooks\n - guide/reactive-forms\n - guide/router-tutorial-toh\n - guide/setup-local\n - guide/template-overview\n - guide/template-syntax\n - guide/testing\n - guide/understanding-angular-animation\n - guide/understanding-communicating-with-http\n - tutorial/tour-of-heroes/toh-pt6\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Injectable\n - api/router/Router\n - guide/architecture#components\n - guide/architecture#introduction-to-angular-concepts\n - guide/architecture#routing\n - guide/architecture#services-and-dependency-injection\n - guide/architecture#templates-directives-and-data-binding\n - guide/architecture#whats-next\n - guide/architecture-components\n - guide/architecture-components#component-metadata\n - guide/architecture-components#data-binding\n - guide/architecture-components#directives\n - guide/architecture-components#pipes\n - guide/architecture-components#templates-and-views\n - guide/architecture-next-steps\n - guide/architecture-services\n - guide/glossary\n - guide/router\n - https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.x5c2ndtx0\n-->"}
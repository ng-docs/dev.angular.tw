{"id":"guide/architecture","title":"Angular 概念简介","contents":"<div class=\"content\">\n  <h1 id=\"introduction-to-angular-concepts\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7578hxgxtlup3f3iuhimhupk5\">Angular 概念简介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#introduction-to-angular-concepts\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9znaj8vlvqbo6s8vnrzitbtgr\">Angular 是一个用 HTML 和 TypeScript 构建客户端应用的平台与框架。Angular 本身就是用 TypeScript 写成的。它将核心功能和可选功能作为一组 TypeScript 库进行实现，你可以把它们导入你的应用中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awruhf7iw4f9luptd7o9ldhf9\">Angular应用程序的架构依赖于某些基本概念。Angular框架的基本构建块是Angular组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lilmq716qvdjvgva4ok66qj3\">组件定义<em>视图</em>。视图是一组可见的屏幕元素，Angular 可以根据你的程序逻辑和数据来选择和修改它们。每个应用都至少有一个根组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vknb2zogcgokvv8esyvhej7w\">组件使用\n<em>服务</em>，这些服务提供与视图直接无关的后台功能，如获取数据。这些服务可以作为\n<em>依赖项</em>注入到组件中，使你的代码模块化、可重用且高效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36ff5d1p0ez7dzj7bx69o5c4t\">组件和服务是带有装饰器标记的类。 这些装饰器提供元数据，告诉 Angular 如何使用它们。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lkk4jktl5dpq996tor54rxiq\">组件类的元数据将组件类和一个用来定义视图的<em>模板</em>关联起来。模板把普通的 HTML 和 Angular <em>指令</em>与<em>绑定标记（markup）</em>组合起来，这样 Angular 就可以在渲染 HTML 之前先修改这些 HTML。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3mt90h2ahui1eskl7s782rb9\">服务类的元数据提供了一些信息，Angular 要用这些信息来让组件可以通过<em>依赖注入（DI）</em>使用该服务。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eiqubgj86p6rksa53rdyou6rx\">应用的组件通常会定义很多视图，并进行分级组织。Angular 提供了 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务来帮助你定义视图之间的导航路径。路由器提供了先进的浏览器内导航功能。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgao21v1ljoglb1cccdlsi0cf\">参阅 <a href=\"guide/glossary\">Angular 词汇表</a> 以了解对 Angular 重要名词和用法的基本定义。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5oeh6bf2o8adlc4yerbj497y\">这里所说的范例应用，参阅<live-example></live-example>。</p>\n</div>\n<h2 id=\"components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7vzzlnsersqq3lvejga81lr\">组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#components\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zmhnjbnl9jsnqgqout82koko\">每个 Angular 应用都至少有一个组件，也就是<em>根组件</em>，它会把组件树和页面中的 DOM 连接起来。每个组件都会定义一个类，其中包含应用的数据和逻辑，并与一个 HTML <em>模板</em>相关联，该模板定义了一个供目标环境下显示的视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qsq8qyljdcig6ea4pl8l7u2f\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 装饰器表明紧随它的那个类是一个组件，并提供模板和该组件专属的元数据。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nn1j6b3xtbv617kmqchpz5st\">装饰器是一些用于修饰 JavaScript 类的函数。Angular 定义了许多装饰器，这些装饰器会把一些特定种类的元数据附加到类上，以便 Angular 了解这些类的含义以及该如何使用它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3olh6a6dz7ju2zaj1bwk77p2c\"><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.x5c2ndtx0\">到网上学习关于装饰器的更多知识。</a></p>\n</div>\n<h3 id=\"templates-directives-and-data-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cxrr206451pj5cc1ovkiaeso\">模板、指令和数据绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#templates-directives-and-data-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8o8123mh3h7m40kuytialzv6n\">模板会把 HTML 和 Angular 的标记（markup）组合起来，这些标记可以在 HTML 元素显示出来之前修改它们。模板中的<em>指令</em>会提供程序逻辑，而<em>绑定标记</em>会把你应用中的数据和 DOM 连接在一起。有两种类型的数据绑定：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ooenjokr56t04l5zdtm6x9cz\">数据绑定</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehfop80m9e0igm4pklg35r7g8\">事件绑定</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7b9nspb8pc816cvokbz9sus9a\">让你的应用在目标环境中响应用户输入，并更新应用数据。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhtlys4gb8e2hkqb2wclwgnoe\">属性（Property）绑定</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1ndtwxjfspvnj63i0ecmvc7n\">让你将从应用数据计算出的值插入到 HTML 中。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5d3d4hfkxupcu0vylge3t8yo\">在视图显示出来之前，Angular 会先根据你的应用数据和逻辑来运行模板中的指令并解析绑定表达式，以修改 HTML 元素和 DOM。Angular 支持<em>双向数据绑定</em>，这意味着 DOM 中发生的变化（比如用户的选择）同样可以反映回你的程序数据中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"calum0h7c8mjprjo9ggo11vcl\">你的模板也可以用<em>管道</em>转换要显示的值以增强用户体验。比如，可以使用管道来显示适合用户所在本地环境的日期和货币格式。Angular 为一些通用的转换提供了预定义管道，你还可以定义自己的管道。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mwp5q5jg65g50y0l4fyx3x3k\">要了解对这些概念的深入讨论，参阅<a href=\"guide/architecture-components\">组件介绍</a>。</p>\n</div>\n<p><a id=\"dependency-injection\"></a></p>\n<h2 id=\"services-and-dependency-injection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"455bsnyhbxhyh9t487yrr294q\">服务与依赖注入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#services-and-dependency-injection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p10lowvxnqlbnmeaztvvlnve\">对于与特定视图无关并希望跨组件共享的数据或逻辑，可以创建<em>服务</em>类。服务类的定义通常紧跟在 “@Injectable()” 装饰器之后。该装饰器提供的元数据可以让你的服务作为依赖<em>被注入到</em>客户组件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8byxa5c5hvy99vybs51d6h7q9\"><em>依赖注入</em>（或 DI）让你可以保持组件类的精简和高效。有了 DI，组件就不用从服务器获取数据、验证用户输入或直接把日志写到控制台，而是会把这些任务委托给服务。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3j5akuph03iwxetqxk7cgwm1r\">更深入的讨论，参阅<a href=\"guide/architecture-services\">服务和 DI 简介</a>。</p>\n</div>\n<h3 id=\"routing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74nlsxkr1xp06lifpm36dhjjp\">路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#routing\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tgxq73lpsqmzq11iw5vx3axx\">Angular \n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 包提供了一个服务，让你定义应用程序不同状态和视图层次之间的导航路径。 它模仿了常见的浏览器导航约定：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cq00hernw02hqylcn21tkbq5q\">在地址栏输入 URL，浏览器就会导航到相应的页面。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5orex8st7tfz581ksx6a4xyyo\">在页面中点击链接，浏览器就会导航到一个新页面。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fz3njn0busvor10kbmz5ew0e\">点击浏览器的前进和后退按钮，浏览器就会在你的浏览历史中向前或向后导航。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7llrinuiqe1tc5gt9vv2dkr9h\">路由器将 URL 类似路径映射到组件而不是页面。 当用户执行操作，比如点击链接，会在浏览器中加载一个新组件时，路由器会拦截浏览器的行为，并显示或隐藏该组件（及其子组件）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qsmgx5sj7t11szgflx7frxa4\">如果路由器确定当前应用程序状态需要一个尚未加载的组件，路由器可以延迟加载该组件及其相关依赖项。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6040wnz1indcslu6yfpgx2gu\">路由器会根据你应用中的导航规则和数据状态来拦截 URL。当用户点击按钮、选择下拉框或收到其它任何来源的输入时，你可以导航到一个新视图。路由器会在浏览器的历史日志中记录这个动作，所以前进和后退按钮也能正常工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj2lr09oqhmgj1ig1rfijlyl0\">要定义导航规则，你就要把<em>导航路径</em>和你的组件关联起来。路径（path）使用类似 URL 的语法来和程序数据整合在一起，就像模板语法会把你的视图和程序数据整合起来一样。然后你就可以用程序逻辑来决定要显示或隐藏哪些视图，以根据你制定的访问规则对用户的输入做出响应。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kkirj4uj9pmi88aw4rho9ol7\">更深入的讨论，参阅<a href=\"guide/router\">路由与导航</a>。</p>\n</div>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5es7l5y9fbl904vxwkyx55rmf\">你已经了解了 Angular 应用程序的主要构建模块。 在以下架构页面中了解更多细节。</p>\n<ul>\n<li><a href=\"guide/architecture-components\">Introduction to Components</a>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5g1w7tojwibcgacfjybywfw6e\"><a href=\"guide/architecture-components#templates-and-views\">模板与视图</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"me4jvicvvlnvb4ndy827nc3m\"><a href=\"guide/architecture-components#component-metadata\">组件元数据</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14v9c7o29bxqo7vglhiai21pm\"><a href=\"guide/architecture-components#data-binding\">数据绑定</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7f6gw7jf7ajy4785qmtlhno0\"><a href=\"guide/architecture-components#directives\">指令</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91m8b8dvjz6q41qd7035dbbun\"><a href=\"guide/architecture-components#pipes\">管道</a></li>\n</ul>\n</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8b3ivfy1gmglouxt0maokjam7\"><a href=\"guide/architecture-services\">服务与依赖注入简介</a></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwucpq3va6gr3meb9r3bstmhk\">当你熟悉这些基本构建模块后，可以在文档中深入探讨。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30ei587z8g3vx1vx6wsvkssph\">你可能还对帮助你构建和部署 Angular 应用程序的\n<a href=\"guide/architecture-next-steps\">工具和技术</a>感兴趣。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Sep 25 2023</div>\n\n\n\n<!-- links to this doc:\n - docs\n - guide/ajs-quick-reference\n - guide/animations\n - guide/dynamic-form\n - guide/example-apps-list\n - guide/form-validation\n - guide/forms\n - guide/forms-overview\n - guide/glossary\n - guide/lifecycle-hooks\n - guide/reactive-forms\n - guide/router-tutorial-toh\n - guide/setup-local\n - guide/template-overview\n - guide/template-syntax\n - guide/testing\n - guide/understanding-angular-animation\n - guide/understanding-communicating-with-http\n - tutorial/tour-of-heroes/toh-pt6\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Injectable\n - api/router/Router\n - guide/architecture#components\n - guide/architecture#introduction-to-angular-concepts\n - guide/architecture#routing\n - guide/architecture#services-and-dependency-injection\n - guide/architecture#templates-directives-and-data-binding\n - guide/architecture#whats-next\n - guide/architecture-components\n - guide/architecture-components#component-metadata\n - guide/architecture-components#data-binding\n - guide/architecture-components#directives\n - guide/architecture-components#pipes\n - guide/architecture-components#templates-and-views\n - guide/architecture-next-steps\n - guide/architecture-services\n - guide/glossary\n - guide/router\n - https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.x5c2ndtx0\n-->"}
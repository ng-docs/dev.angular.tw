{"id":"guide/routing-with-urlmatcher","title":"教學課程：建立自定義路由對應器","contents":"<div class=\"content\">\n  <h1 id=\"tutorial-creating-custom-route-matches\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f2lz9z80lh3kej0ataey8i0u3\">教學課程：建立自定義路由對應器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#tutorial-creating-custom-route-matches\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9v16490jxq2ly06goyjtwncd\">Angular Router 支援強大的對應策略，你可以使用它來幫助使用者在應用中導向。該對應策略支援靜態路由、帶引數的可變路由、萬用字元路由等。此外，還可以為更復雜的 URL 建立你自己的自定義模式對應。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyh2lcagkhg60ufmwzbt8xmni\">在本教學課程中，你將使用 Angular 的 <code><a href=\"api/router/UrlMatcher\" class=\"code-anchor\">UrlMatcher</a></code> 來建立自定義路由對應器。此對應器在 URL 中查詢 Twitter ID。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jqqy6eakzcau3mvdxo5ptm41\">有關本教學課程最終版本的工作範例，請參閱<live-example></live-example>。</p>\n<h2 id=\"objectives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbta8klpv23x9gfh4twoy80po\">目標<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#objectives\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d10zkrvzf84c5azgfibgu8e91\">實現 Angular 的 <code><a href=\"api/router/UrlMatcher\" class=\"code-anchor\">UrlMatcher</a></code> 以建立自定義路由對應器。</p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zh2yuyafmn2qaumsdhhvo8n9\">要完成本教學課程，你應該對以下概念有基本的瞭解：</p>\n<ul>\n<li>JavaScript</li>\n<li>HTML</li>\n<li>CSS</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vtg2wry451tucy201uexb3e4\"><a href=\"cli\">Angular CLI</a></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0pvgimzysbecqdogilhpx9tk\">如果你不熟悉 Angular 路由器的工作原理，請閱讀<a href=\"guide/router-tutorial\">在單頁應用程式中使用 Angular 路由</a>。</p>\n<h2 id=\"create-a-sample-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bruw2t9iar7oam6yjy176ohbg\">建立一個範例應用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#create-a-sample-application\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3278b05xub1rxx40s2vkb30i0\">使用 Angular CLI，建立一個新應用程式 <em>angular-custom-route-match</em>。除了預設的 Angular 應用程式框架之外，還將建立一個 <em>profile</em> 元件。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uvfft0hal9dw00lysmuz36vz\">建立一個新的 Angular 專案 <em>angular-custom-route-match</em>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng new angular-custom-route-match\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7pvzb3r7wwjzjn2pb003y5a3\">當提示 <code>Would you like to add Angular routing?</code> 時，選擇 <code>Y</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekg7ire5wfr2pk4k3xpx6sjtb\">當系統提示 <code>Which stylesheet format would you like to use?</code> 時，選擇 <code>CSS</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tm8obb1nvw5741usu4224vb0\">片刻之後，一個新專案 <code>angular-custom-route-match</code> 就準備好了。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2acwyn9bhgc22geihghkx1o7w\">開啟終端視窗，進到 <code>angular-custom-route-match</code> 目錄。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1uqs3tyh6s4cjvg4hu7q5yv34\">建立一個元件 <em>profile</em>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component profile\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56ules3y3vnhml0b41efamdvd\">在你的程式碼編輯器中，找到檔案 <code>profile.component.html</code> 並將其佔位內容替換為以下 HTML。</p>\n<code-example header=\"src/app/profile/profile.component.html\" path=\"routing-with-urlmatcher/src/app/profile/profile.component.html\">\n&lt;p&gt;\n    Hello {{ username }}!\n&lt;/p&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85al3rtbu6xhgqpqia2v0qw1o\">在你的程式碼編輯器中，找到檔案 <code>app.component.html</code> 並將其佔位內容替換為以下 HTML。</p>\n<code-example header=\"src/app/app.component.html\" path=\"routing-with-urlmatcher/src/app/app.component.html\">\n&lt;h2&gt;Routing with Custom Matching&lt;/h2&gt;\n\nNavigate to &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/@Angular\"&gt;my profile&lt;/a&gt;\n\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n</code-example>\n</li>\n</ol>\n<h2 id=\"configure-your-routes-for-your-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvkdm0mhww1zdc193fadmh54i\">為你的應用程式設定路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#configure-your-routes-for-your-application\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ez1xvrmkfk1ijmjzn6l3s1cmy\">在應用程式框架就緒後，接下來需要將路由功能新增到\n<code>app.config.ts</code>檔案中。在此過程中，你將建立一個自定義URL對應器，用於查詢URL中的Twitter句柄。該句柄由前置的\n<code>@</code>符號識別。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ebw34s6a2otpzkpqilid0l4eo\">在程式碼編輯器中，開啟你的\n<code>app.config.ts</code>檔案。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fsnj6j72xvhhweoll41fbyes\">為Angular的\n<code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>和\n<code><a href=\"api/router/withComponentInputBinding\" class=\"code-anchor\">withComponentInputBinding</a></code>以及應用程式路由新增\n<code>import</code>語句。</p>\n<code-example>\nimport {<a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>, <a href=\"api/router/withComponentInputBinding\" class=\"code-anchor\">withComponentInputBinding</a>} from '@angular/router';\n\nimport {routes} from './app.routes';\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45jkgq5jje4mi9rf94zpm1h1j\">在提供者陣列中，新增一個\n<code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(routes, <a href=\"api/router/withComponentInputBinding\" class=\"code-anchor\">withComponentInputBinding</a>())</code>語句。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mjbiiusrc5lvpwaa2z5q4rfm\">透過將以下程式碼新增到應用程式路由來定義自定義路由對應器。</p>\n<code-example header=\"src/app/app.routes.ts\" path=\"routing-with-urlmatcher/src/app/app.routes.ts\" region=\"matcher\">\n{\n  matcher: (url) =&gt; {\n    if (url.length === 1 &amp;&amp; url[0].path.match(/^@[\\w]+$/gm)) {\n      return {consumed: url, posParams: {username: new <a href=\"api/router/UrlSegment\" class=\"code-anchor\">UrlSegment</a>(url[0].path.slice(1), {})}};\n    }\n\n    return null;\n  },\n  component: ProfileComponent\n},\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o28u2gzylkt6at9ap1yllq1n\">這個自定義對應器是一個執行以下任務的函式：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lsd1wyauynecsqma8rj7ybjh\">對應器驗證陣列是否只包含一個區段。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9asvl91g1hsusl6w908crvr88\">對應器使用正則表示式來確保使用者名的格式是對應的。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lm09k3rjaxvq7zd3so0ekxwt\">如果對應，則該函式回傳整個 URL，將路由引數 <code>username</code> 定義為路徑的子字串。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ef95p4jdf8k2c3jk5auqz5dy5\">如果不對應，則該函式回傳 <code>null</code> 並且路由器繼續查詢與 URL 對應的其他路由。</li>\n</ul>\n<div class=\"is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1hkbhxg5s436hlcsvge9qeia7\">自定義 URL 對應器的行為與任何其他路由定義方式是一樣的。請像定義任何其他路由一樣定義子路由或延遲載入路由。</p>\n</div>\n<h2 id=\"reading-the-route-parameters\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eovq5jj1tsvzrz2yehw1k707a\">讀取路由引數<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#reading-the-route-parameters\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5heq911uoyhyyiju5wukoidmc\">有了自定義對應器，現在可以在\n<code>profile</code>元件中繫結路由引數。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btz1ar0n536u3kw6wb2ejq9aj\">在程式碼編輯器中，開啟你的\n<code>profile.component.ts</code>檔案，並建立一個與\n<code>username</code>引數對應的\n<code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。我們之前在\n<code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>中新增了\n<code><a href=\"api/router/withComponentInputBinding\" class=\"code-anchor\">withComponentInputBinding</a></code>功能。這允許\n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>直接將訊息繫結到路由元件。</p>\n<code-example>\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() username!: string;\n</code-example>\n<h2 id=\"test-your-custom-url-matcher\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7vvao8atfk8h4ow6xi6udtvkn\">測試你的自定義 URL 對應器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#test-your-custom-url-matcher\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o5c23w6ue6sr3kk7mtfgh2as\">程式碼就緒後，就可以測試自定義 URL 對應器了。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eoq17g89px08hlgbysuxg2wxp\">在終端視窗中，執行 <code>ng serve</code> 指令。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng serve\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ckjv92jxuamm59dj19n89bpp\">開啟瀏覽器訪問 <code>http://localhost:4200</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43w733d17g01hltq946ookip0\">你會看到一個網頁，其中包含一個句子，內容為 <code>Navigate to my profile</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mxkns2sff2g3cy8jytnd2qgm\">單擊 <strong>my profile</strong> 超連結。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lr0vdd474l4l9vdvx273rpzn\">一個新的句子 <code>Hello, Angular!</code> 出現在頁面上。</p>\n</li>\n</ol>\n<h2 id=\"next-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4pkljueu68ifjoi5994e9l8o\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ibtonbthpi1nr181fjclvgqm\">當你的應用程式中有動態 URL 時，使用 Angular Router 提供的模式對應功能，可以為你提供很大的靈活性。要了解有關 Angular Router 的更多訊息，請參閱以下主題：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4komekzloksxs2iyp1mgeljwe\"><a href=\"guide/router\">應用內路由和導向</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f32tbnu2aj5akghd0cn3flxm0\"><a href=\"api/router\">路由器 API</a></li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vvu8h32d0i7b60f0p1yfxx78\">此內容基於 <a href=\"https://twitter.com/brandontroberts\">Brandon Roberts</a> 的<a href=\"https://medium.com/@brandontroberts/custom-route-matching-with-the-angular-router-fbdd48665483\">為 Angular Router 使用自定義路由對應</a>。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Tue Oct 24 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/routing-overview\n-->\n<!-- links from this doc:\n - api/core/Input\n - api/router\n - api/router/Router\n - api/router/RouterLink\n - api/router/RouterOutlet\n - api/router/UrlMatcher\n - api/router/UrlSegment\n - api/router/provideRouter\n - api/router/withComponentInputBinding\n - cli\n - guide/router\n - guide/router-tutorial\n - guide/routing-with-urlmatcher#configure-your-routes-for-your-application\n - guide/routing-with-urlmatcher#create-a-sample-application\n - guide/routing-with-urlmatcher#next-steps\n - guide/routing-with-urlmatcher#objectives\n - guide/routing-with-urlmatcher#prerequisites\n - guide/routing-with-urlmatcher#reading-the-route-parameters\n - guide/routing-with-urlmatcher#test-your-custom-url-matcher\n - guide/routing-with-urlmatcher#tutorial-creating-custom-route-matches\n - https://medium.com/@brandontroberts/custom-route-matching-with-the-angular-router-fbdd48665483\n - https://twitter.com/brandontroberts\n-->"}
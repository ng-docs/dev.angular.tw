{"id":"guide/routing-with-urlmatcher","title":"教程：创建自定义路由匹配器","contents":"<div class=\"content\">\n  <h1 id=\"tutorial-creating-custom-route-matches\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f2lz9z80lh3kej0ataey8i0u3\">教程：创建自定义路由匹配器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#tutorial-creating-custom-route-matches\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9v16490jxq2ly06goyjtwncd\">Angular Router 支持强大的匹配策略，你可以使用它来帮助用户在应用中导航。该匹配策略支持静态路由、带参数的可变路由、通配符路由等。此外，还可以为更复杂的 URL 构建你自己的自定义模式匹配。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyh2lcagkhg60ufmwzbt8xmni\">在本教程中，你将使用 Angular 的 <code><a href=\"api/router/UrlMatcher\" class=\"code-anchor\">UrlMatcher</a></code> 来构建自定义路由匹配器。此匹配器在 URL 中查找 Twitter ID。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jqqy6eakzcau3mvdxo5ptm41\">有关本教程最终版本的工作示例，请参阅<live-example></live-example>。</p>\n<h2 id=\"objectives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbta8klpv23x9gfh4twoy80po\">目标<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#objectives\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d10zkrvzf84c5azgfibgu8e91\">实现 Angular 的 <code><a href=\"api/router/UrlMatcher\" class=\"code-anchor\">UrlMatcher</a></code> 以创建自定义路由匹配器。</p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zh2yuyafmn2qaumsdhhvo8n9\">要完成本教程，你应该对以下概念有基本的了解：</p>\n<ul>\n<li>JavaScript</li>\n<li>HTML</li>\n<li>CSS</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vtg2wry451tucy201uexb3e4\"><a href=\"cli\">Angular CLI</a></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0pvgimzysbecqdogilhpx9tk\">如果你不熟悉 Angular 路由器的工作原理，请阅读<a href=\"guide/router-tutorial\">在单页应用程序中使用 Angular 路由</a>。</p>\n<h2 id=\"create-a-sample-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bruw2t9iar7oam6yjy176ohbg\">创建一个范例应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#create-a-sample-application\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3278b05xub1rxx40s2vkb30i0\">使用 Angular CLI，创建一个新应用程序 <em>angular-custom-route-match</em>。除了默认的 Angular 应用程序框架之外，还将创建一个 <em>profile</em> 组件。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uvfft0hal9dw00lysmuz36vz\">创建一个新的 Angular 项目 <em>angular-custom-route-match</em>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng new angular-custom-route-match\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7pvzb3r7wwjzjn2pb003y5a3\">当提示 <code>Would you like to add Angular routing?</code> 时，选择 <code>Y</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekg7ire5wfr2pk4k3xpx6sjtb\">当系统提示 <code>Which stylesheet format would you like to use?</code> 时，选择 <code>CSS</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tm8obb1nvw5741usu4224vb0\">片刻之后，一个新项目 <code>angular-custom-route-match</code> 就准备好了。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2acwyn9bhgc22geihghkx1o7w\">打开终端窗口，进到 <code>angular-custom-route-match</code> 目录。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1uqs3tyh6s4cjvg4hu7q5yv34\">创建一个组件 <em>profile</em>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component profile\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56ules3y3vnhml0b41efamdvd\">在你的代码编辑器中，找到文件 <code>profile.component.html</code> 并将其占位内容替换为以下 HTML。</p>\n<code-example header=\"src/app/profile/profile.component.html\" path=\"routing-with-urlmatcher/src/app/profile/profile.component.html\">\n&lt;p&gt;\n    Hello {{ username }}!\n&lt;/p&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85al3rtbu6xhgqpqia2v0qw1o\">在你的代码编辑器中，找到文件 <code>app.component.html</code> 并将其占位内容替换为以下 HTML。</p>\n<code-example header=\"src/app/app.component.html\" path=\"routing-with-urlmatcher/src/app/app.component.html\">\n&lt;h2&gt;Routing with Custom Matching&lt;/h2&gt;\n\nNavigate to &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/@Angular\"&gt;my profile&lt;/a&gt;\n\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n</code-example>\n</li>\n</ol>\n<h2 id=\"configure-your-routes-for-your-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvkdm0mhww1zdc193fadmh54i\">为你的应用程序配置路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#configure-your-routes-for-your-application\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ez1xvrmkfk1ijmjzn6l3s1cmy\">在应用程序框架就绪后，接下来需要将路由功能添加到\n<code>app.config.ts</code>文件中。在此过程中，你将创建一个自定义URL匹配器，用于查找URL中的Twitter句柄。该句柄由前置的\n<code>@</code>符号识别。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ebw34s6a2otpzkpqilid0l4eo\">在代码编辑器中，打开你的\n<code>app.config.ts</code>文件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fsnj6j72xvhhweoll41fbyes\">为Angular的\n<code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>和\n<code><a href=\"api/router/withComponentInputBinding\" class=\"code-anchor\">withComponentInputBinding</a></code>以及应用程序路由添加\n<code>import</code>语句。</p>\n<code-example>\nimport {<a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>, <a href=\"api/router/withComponentInputBinding\" class=\"code-anchor\">withComponentInputBinding</a>} from '@angular/router';\n\nimport {routes} from './app.routes';\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45jkgq5jje4mi9rf94zpm1h1j\">在提供者数组中，添加一个\n<code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(routes, <a href=\"api/router/withComponentInputBinding\" class=\"code-anchor\">withComponentInputBinding</a>())</code>语句。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mjbiiusrc5lvpwaa2z5q4rfm\">通过将以下代码添加到应用程序路由来定义自定义路由匹配器。</p>\n<code-example header=\"src/app/app.routes.ts\" path=\"routing-with-urlmatcher/src/app/app.routes.ts\" region=\"matcher\">\n{\n  matcher: (url) =&gt; {\n    if (url.length === 1 &amp;&amp; url[0].path.match(/^@[\\w]+$/gm)) {\n      return {consumed: url, posParams: {username: new <a href=\"api/router/UrlSegment\" class=\"code-anchor\">UrlSegment</a>(url[0].path.slice(1), {})}};\n    }\n\n    return null;\n  },\n  component: ProfileComponent\n},\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o28u2gzylkt6at9ap1yllq1n\">这个自定义匹配器是一个执行以下任务的函数：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lsd1wyauynecsqma8rj7ybjh\">匹配器验证数组是否只包含一个区段。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9asvl91g1hsusl6w908crvr88\">匹配器使用正则表达式来确保用户名的格式是匹配的。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lm09k3rjaxvq7zd3so0ekxwt\">如果匹配，则该函数返回整个 URL，将路由参数 <code>username</code> 定义为路径的子字符串。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ef95p4jdf8k2c3jk5auqz5dy5\">如果不匹配，则该函数返回 <code>null</code> 并且路由器继续查找与 URL 匹配的其他路由。</li>\n</ul>\n<div class=\"is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1hkbhxg5s436hlcsvge9qeia7\">自定义 URL 匹配器的行为与任何其他路由定义方式是一样的。请像定义任何其他路由一样定义子路由或惰性加载路由。</p>\n</div>\n<h2 id=\"reading-the-route-parameters\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eovq5jj1tsvzrz2yehw1k707a\">读取路由参数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#reading-the-route-parameters\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5heq911uoyhyyiju5wukoidmc\">有了自定义匹配器，现在可以在\n<code>profile</code>组件中绑定路由参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btz1ar0n536u3kw6wb2ejq9aj\">在代码编辑器中，打开你的\n<code>profile.component.ts</code>文件，并创建一个与\n<code>username</code>参数匹配的\n<code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。我们之前在\n<code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>中添加了\n<code><a href=\"api/router/withComponentInputBinding\" class=\"code-anchor\">withComponentInputBinding</a></code>功能。这允许\n<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>直接将信息绑定到路由组件。</p>\n<code-example>\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() username!: string;\n</code-example>\n<h2 id=\"test-your-custom-url-matcher\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7vvao8atfk8h4ow6xi6udtvkn\">测试你的自定义 URL 匹配器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#test-your-custom-url-matcher\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o5c23w6ue6sr3kk7mtfgh2as\">代码就绪后，就可以测试自定义 URL 匹配器了。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eoq17g89px08hlgbysuxg2wxp\">在终端窗口中，运行 <code>ng serve</code> 命令。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng serve\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ckjv92jxuamm59dj19n89bpp\">打开浏览器访问 <code>http://localhost:4200</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43w733d17g01hltq946ookip0\">你会看到一个网页，其中包含一个句子，内容为 <code>Navigate to my profile</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mxkns2sff2g3cy8jytnd2qgm\">单击 <strong>my profile</strong> 超链接。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lr0vdd474l4l9vdvx273rpzn\">一个新的句子 <code>Hello, Angular!</code> 出现在页面上。</p>\n</li>\n</ol>\n<h2 id=\"next-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4pkljueu68ifjoi5994e9l8o\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/routing-with-urlmatcher#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ibtonbthpi1nr181fjclvgqm\">当你的应用程序中有动态 URL 时，使用 Angular Router 提供的模式匹配功能，可以为你提供很大的灵活性。要了解有关 Angular Router 的更多信息，请参阅以下主题：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4komekzloksxs2iyp1mgeljwe\"><a href=\"guide/router\">应用内路由和导航</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f32tbnu2aj5akghd0cn3flxm0\"><a href=\"api/router\">路由器 API</a></li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vvu8h32d0i7b60f0p1yfxx78\">此内容基于 <a href=\"https://twitter.com/brandontroberts\">Brandon Roberts</a> 的<a href=\"https://medium.com/@brandontroberts/custom-route-matching-with-the-angular-router-fbdd48665483\">为 Angular Router 使用自定义路由匹配</a>。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Tue Oct 24 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/routing-overview\n-->\n<!-- links from this doc:\n - api/core/Input\n - api/router\n - api/router/Router\n - api/router/RouterLink\n - api/router/RouterOutlet\n - api/router/UrlMatcher\n - api/router/UrlSegment\n - api/router/provideRouter\n - api/router/withComponentInputBinding\n - cli\n - guide/router\n - guide/router-tutorial\n - guide/routing-with-urlmatcher#configure-your-routes-for-your-application\n - guide/routing-with-urlmatcher#create-a-sample-application\n - guide/routing-with-urlmatcher#next-steps\n - guide/routing-with-urlmatcher#objectives\n - guide/routing-with-urlmatcher#prerequisites\n - guide/routing-with-urlmatcher#reading-the-route-parameters\n - guide/routing-with-urlmatcher#test-your-custom-url-matcher\n - guide/routing-with-urlmatcher#tutorial-creating-custom-route-matches\n - https://medium.com/@brandontroberts/custom-route-matching-with-the-angular-router-fbdd48665483\n - https://twitter.com/brandontroberts\n-->"}
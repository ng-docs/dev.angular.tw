{"id":"guide/view-encapsulation","title":"檢視封裝","contents":"<div class=\"content\">\n  <h1 id=\"view-encapsulation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"380hjm6ccy1kvz0uhgapjhrdr\">檢視封裝<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/view-encapsulation#view-encapsulation\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvzhqnbyovf521b744ialdk3q\">在 Angular 中，元件的樣式可以封裝在元件的宿主元素中，這樣它們就不會影響應用程式的其餘部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8lxxkmzr2wsnce7xm0zobrpi0\"><code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 的裝飾器提供了 <a href=\"api/core/Component#encapsulation\"><code>encapsulation</code></a> 選項，可用來控制如何基於<em>每個元件</em>應用檢視封裝。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zod04s2r7sssi37m26i03qim\">從以下模式中選擇：</p>\n<!-- vale off -->\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fe6whjbmdtslgtp1har69ebd\">模式</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/core/ViewEncapsulation#ShadowDom\" class=\"code-anchor\">ViewEncapsulation.ShadowDom</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eb67p2cjumz2t9x2ixb8d7t85\">Angular 使用瀏覽器內建的 \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM\">Shadow DOM API</a> 將元件的檢視封裝在一個 ShadowRoot 內，作為元件的宿主元素，並以隔離的方式應用提供的樣式。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/core/ViewEncapsulation#Emulated\" class=\"code-anchor\">ViewEncapsulation.Emulated</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agsppm4ugdd31r6iv7d5pj91\">Angular 修改元件的 CSS 選擇器，以便它們僅應用於元件的檢視，不影響應用程式中的其他元素，從而\n<em>模擬</em>了 Shadow DOM 的行為。有關更多詳細訊息，請參閱 \n<a href=\"guide/view-encapsulation#inspect-generated-css\">檢查生成的 CSS</a>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/core/ViewEncapsulation#None\" class=\"code-anchor\">ViewEncapsulation.None</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"638p8n4oub84bp81xylt3fl6y\">Angular 不應用任何形式的檢視封裝，這意味著為元件指定的任何樣式實際上都是全域應用的，並且可能影響應用程式中存在的任何 HTML 元素。這種模式本質上與將樣式包含到 HTML 本身中是相同的。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"inspect-generated-css\"></a></p>\n<h2 id=\"inspecting-generated-css\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70vxfplu8xwn1brvu4w3axmzn\">檢視生成的 CSS<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/view-encapsulation#inspecting-generated-css\"><i class=\"material-icons\">link</i></a></h2>\n<!-- vale on -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdmqztd9upe2t6rn77ziqfjgj\">使用模擬檢視封裝時，Angular 會預處理所有元件的樣式，以便它們僅應用於元件的檢視。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1sj0ln990l41du3bbs5xzoaik\">在正執行的 Angular 應用程式的 DOM 中，使用模擬檢視封裝模式的元件所在的元素附加了一些額外的屬性：</p>\n<code-example language=\"html\">\n\n&lt;hero-details _nghost-pmm-5&gt;\n  &lt;h2 _ngcontent-pmm-5&gt;Mister Fantastic&lt;/h2&gt;\n  &lt;hero-team _ngcontent-pmm-5 _nghost-pmm-6&gt;\n    &lt;h3 _ngcontent-pmm-6&gt;Team&lt;/h3&gt;\n  &lt;/hero-team&gt;\n&lt;/hero-details&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a11ilzuflc9jj7r18yl5krcsy\">有兩種這樣的屬性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2e7a5u3w81azvyldqrbf228ud\">屬性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>_nghost</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25tv64w2poxfifkdsfmgatuyu\">新增到包圍元件檢視的元素中，這在本地 Shadow DOM 封裝中將是 ShadowRoots。這通常適用於元件的宿主元素。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>_ngcontent</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tkzh23v744w1qqgzst77j8xq\">新增到元件檢視中的子元素，這些元素用於將元素與它們相應的模擬 ShadowRoots（具有對應 \n<code>_nghost</code> 屬性的宿主元素）進行對應。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74p4mjg1huvx27hxwz7k2gi53\">這些屬性的確切值是 Angular 的私有實現細節。它們是自動生成的，你不應在應用程式程式碼中引用它們。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2sqhsipky7fc5rivxairrukic\">它們以生成的元件樣式為目標，這些樣式會被注入到 DOM 的 <code>&lt;head&gt;</code> 部分：</p>\n<code-example format=\"css\" language=\"css\">\n\n[_nghost-pmm-5] {\n  display: block;\n  border: 1px solid black;\n}\nh3[_ngcontent-pmm-6] {\n  background-color: white;\n  border: 1px solid #777;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8z45gzr1jq0n4kx9sxg5xst17\">這些樣式經過後期處理，以便每個 CSS 選擇器都使用適當的 <code>_nghost</code> 或 <code>_ngcontent</code> 屬性進行擴充。這些修改後的選擇器可以確保樣式以隔離和有針對性的方式應用於元件的檢視。</p>\n<h2 id=\"mixing-encapsulation-modes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"78nd5tsha6ch2h8fkjbnl6ju2\">混合封裝模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/view-encapsulation#mixing-encapsulation-modes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efdwtw7q7umlu6lvxj9gm2cb1\">如前所述，你可以在元件的裝飾器中針對<em>每個元件</em>指定封裝模式，這意味著在你的應用程式中，不同的元件可以使用不同的封裝策略。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"uoc5v2mhke4whqeaiwyx0ord\">儘管可能，但不建議這樣做。如果真的需要，你應該知道使用不同封裝模式的元件的樣式會如何彼此互動：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fe6whjbmdtslgtp1har69ebd\">模式</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/core/ViewEncapsulation#Emulated\" class=\"code-anchor\">ViewEncapsulation.Emulated</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evgabk5z3e0va63rwsprtbtvr\">元件的樣式新增到文件的 \n<code>&lt;head&gt;</code> 中，使其在整個應用程式中可用，但它們的選擇器隻影響各自元件範本中的元素。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/core/ViewEncapsulation#None\" class=\"code-anchor\">ViewEncapsulation.None</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9h67nnq77or6bvmfi6vwh82xu\">元件的樣式新增到文件的 \n<code>&lt;head&gt;</code> 中，使其在整個應用程式中可用，因此完全是全域的，並影響文件中任何對應的元素。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/core/ViewEncapsulation#ShadowDom\" class=\"code-anchor\">ViewEncapsulation.ShadowDom</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kmdojqpcq888vwaiak36p9uw\">元件的樣式僅新增到影子 DOM 宿主中，確保它們隻影響各自元件檢視中的元素。</td>\n</tr>\n</tbody>\n</table>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42abeo10ac4obz2dojfxu24lr\"><code><a href=\"api/core/ViewEncapsulation#Emulated\" class=\"code-anchor\">ViewEncapsulation.Emulated</a></code> 和 <code><a href=\"api/core/ViewEncapsulation#None\" class=\"code-anchor\">ViewEncapsulation.None</a></code> 元件的樣式也會新增到每個 <code><a href=\"api/core/ViewEncapsulation#ShadowDom\" class=\"code-anchor\">ViewEncapsulation.ShadowDom</a></code> 元件的 shadow DOM 宿主中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wymcqrwu7yecieldyay0jyzb\">這意味著帶有 <code><a href=\"api/core/ViewEncapsulation#None\" class=\"code-anchor\">ViewEncapsulation.None</a></code> 的元件的樣式將影響 shadow DOM 中的對應元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyfwx5vdvo1mkty8pfx8b8azj\">這種方法乍一看似乎有違直覺，但如果沒有它，帶有 <code><a href=\"api/core/ViewEncapsulation#None\" class=\"code-anchor\">ViewEncapsulation.None</a></code> 的元件將在使用 <code><a href=\"api/core/ViewEncapsulation#ShadowDom\" class=\"code-anchor\">ViewEncapsulation.ShadowDom</a></code> 的元件內渲染不同的效果，因為其樣式將不可用。</p>\n</div>\n<h3 id=\"examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4iecnoqh39op5dvxqr6b3gip\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/view-encapsulation#examples\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elk7ogo8xzbpvk4gnjgps2ggf\">本節展示了具有不同 <code><a href=\"api/core/ViewEncapsulation\" class=\"code-anchor\">ViewEncapsulation</a></code> 的元件的樣式如何互動的範例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cab77uht6qrpq2ef3a1vykp3a\">請參閱 <live-example nodownload=\"\"></live-example> 以自己嘗試這些元件。</p>\n<h4 id=\"no-encapsulation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdxnr5ndq00hksbo55h8lrvv5\">無封裝<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/view-encapsulation#no-encapsulation\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92fkhjqa6s7cmt2hq6j3m5idf\">第一個範例顯示了一個具有 <code><a href=\"api/core/ViewEncapsulation#None\" class=\"code-anchor\">ViewEncapsulation.None</a></code> 的元件。此元件將其範本元素著色為紅色。</p>\n<code-example header=\"src/app/no-encapsulation.component.ts\" path=\"view-encapsulation/src/app/no-encapsulation.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-no-encapsulation',\n  template: `\n    &lt;h2&gt;None&lt;/h2&gt;\n    &lt;div class=\"none-message\"&gt;No encapsulation&lt;/div&gt;\n  `,\n  styles: ['h2, .none-message { color: red; }'],\n  encapsulation: <a href=\"api/core/ViewEncapsulation#None\" class=\"code-anchor\">ViewEncapsulation.None</a>,\n})\nexport class NoEncapsulationComponent {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4j28e23ind7u947l410vbso5\">Angular 將此元件的樣式作為全域樣式新增到文件的 <code>&lt;head&gt;</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6w2ml0649mgm6hmnbpa92ts3v\">如前所述，Angular 還會將這些樣式新增到所有 shadow DOM 宿主。因此，樣式在整個應用程式中都可用。</p>\n<div class=\"lightbox\">\n<img alt=\"component with no encapsulation\" src=\"generated/images/guide/view-encapsulation/no-encapsulation.png\" width=\"500\" height=\"101\">\n</div>\n<h4 id=\"emulated-encapsulation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btmndcpayfogek5ic1656nvqy\">模擬封裝<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/view-encapsulation#emulated-encapsulation\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"974214oeolxd9fqlcfr7g138t\">第二個範例顯示了一個具有 <code><a href=\"api/core/ViewEncapsulation#Emulated\" class=\"code-anchor\">ViewEncapsulation.Emulated</a></code> 的元件。此元件將其範本元素著色為綠色。</p>\n<code-example header=\"src/app/emulated-encapsulation.component.ts\" path=\"view-encapsulation/src/app/emulated-encapsulation.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-emulated-encapsulation',\n  template: `\n    &lt;h2&gt;Emulated&lt;/h2&gt;\n    &lt;div class=\"emulated-message\"&gt;Emulated encapsulation&lt;/div&gt;\n    &lt;app-no-encapsulation&gt;&lt;/app-no-encapsulation&gt;\n  `,\n  styles: ['h2, .emulated-message { color: green; }'],\n  encapsulation: <a href=\"api/core/ViewEncapsulation#Emulated\" class=\"code-anchor\">ViewEncapsulation.Emulated</a>,\n  imports: [NoEncapsulationComponent],\n})\nexport class EmulatedEncapsulationComponent {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ystzodd5eajatkrdat6n6u54\">與 <code><a href=\"api/core/ViewEncapsulation#None\" class=\"code-anchor\">ViewEncapsulation.None</a></code> 類似，Angular 會將此元件的樣式新增到文件的 <code>&lt;head&gt;</code> 中，但它們是帶有『作用域』的樣式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f2vh8a2av1c2boruwrfgsqair\">只有直接在該組件範本中的元素才會對應其樣式。由於來自 <code>EmulatedEncapsulationComponent</code> 的樣式是特化的，因此它們會覆蓋來自 <code>NoEncapsulationComponent</code> 的全域樣式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jzrcidebts7z6y70ofxgg058\">在此範例中，<code>EmulatedEncapsulationComponent</code> 包含著 <code>NoEncapsulationComponent</code>，但 <code>NoEncapsulationComponent</code> 仍然如預期般生效了，因為 <code>EmulatedEncapsulationComponent</code> 的『範圍化』樣式與其範本中的元素並不對應。</p>\n<div class=\"lightbox\">\n<img alt=\"component with no encapsulation\" src=\"generated/images/guide/view-encapsulation/emulated-encapsulation.png\" width=\"500\" height=\"207\">\n</div>\n<h4 id=\"shadow-dom-encapsulation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8grkcz6jmje6tmbrjs7x8q2x2\">Shadow DOM 封裝<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/view-encapsulation#shadow-dom-encapsulation\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"385ctppfguz84ktancrg20gdd\">第三個範例顯示了一個具有 <code><a href=\"api/core/ViewEncapsulation#ShadowDom\" class=\"code-anchor\">ViewEncapsulation.ShadowDom</a></code> 的元件。此元件會將其範本元素著色為藍色。</p>\n<code-example header=\"src/app/shadow-dom-encapsulation.component.ts\" path=\"view-encapsulation/src/app/shadow-dom-encapsulation.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-shadow-dom-encapsulation',\n  template: `\n    &lt;h2&gt;ShadowDom&lt;/h2&gt;\n    &lt;div class=\"shadow-message\"&gt;Shadow DOM encapsulation&lt;/div&gt;\n    &lt;app-emulated-encapsulation&gt;&lt;/app-emulated-encapsulation&gt;\n    &lt;app-no-encapsulation&gt;&lt;/app-no-encapsulation&gt;\n  `,\n  styles: ['h2, .shadow-message { color: blue; }'],\n  encapsulation: <a href=\"api/core/ViewEncapsulation#ShadowDom\" class=\"code-anchor\">ViewEncapsulation.ShadowDom</a>,\n  imports: [NoEncapsulationComponent, EmulatedEncapsulationComponent],\n})\nexport class ShadowDomEncapsulationComponent {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ntkcl5ep5al9zaqliw0pvbuh\">Angular 僅將此元件的樣式新增到 shadow DOM 宿主，因此它們在 shadow DOM 之外是不可見的。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zit3qvjbbx40uoqpuhnpgdm\"><strong>注意</strong>：<br>\nAngular 還將 <code>NoEncapsulationComponent</code> 和 <code>EmulatedEncapsulationComponent</code> 的全域樣式新增到了 shadow DOM 宿主中，因此這些樣式仍然可用於該組件的範本中的元素。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hem6l9caqiez1asphzjbpcik\">在這個例子中，<code>ShadowDomEncapsulationComponent</code> 包含一個 <code>NoEncapsulationComponent</code> 和 <code>EmulatedEncapsulationComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyxt9sn4p1w2wrjid6makv4ng\"><code>ShadowDomEncapsulationComponent</code> 元件新增的樣式在該組件的整個 shadow DOM 中都可用，在 <code>NoEncapsulationComponent</code> 和 <code>EmulatedEncapsulationComponent</code> 中也是如此。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bn7kwo0ux556d9dowje05ixq\"><code>EmulatedEncapsulationComponent</code> 具有特化的『範圍化』樣式，因此該組件範本的樣式不受影響。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ei65g3trcrkfguxtf2sxet0ox\">由於 <code>ShadowDomEncapsulationComponent</code> 中的樣式是在全域樣式之後新增到 Shadow Host 中的，因此 <code>h2</code> 樣式會覆蓋 <code>NoEncapsulationComponent</code> 中的樣式。結果是 <code>NoEncapsulationComponent</code> 中的 <code>&lt;h2&gt;</code> 元素被著色為藍色而不是紅色，這可能不是元件作者的本意。</p>\n<div class=\"lightbox\">\n<img alt=\"component with no encapsulation\" src=\"generated/images/guide/view-encapsulation/shadow-dom-encapsulation.png\" width=\"500\" height=\"413\">\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Fri Apr 21 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/component-styles\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Component#encapsulation\n - api/core/ViewEncapsulation\n - api/core/ViewEncapsulation#Emulated\n - api/core/ViewEncapsulation#None\n - api/core/ViewEncapsulation#ShadowDom\n - guide/view-encapsulation#emulated-encapsulation\n - guide/view-encapsulation#examples\n - guide/view-encapsulation#inspect-generated-css\n - guide/view-encapsulation#inspecting-generated-css\n - guide/view-encapsulation#mixing-encapsulation-modes\n - guide/view-encapsulation#no-encapsulation\n - guide/view-encapsulation#shadow-dom-encapsulation\n - guide/view-encapsulation#view-encapsulation\n - https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM\n-->"}
{"id":"guide/event-binding-concepts","title":"事件繫結的工作原理","contents":"<div class=\"content\">\n  <h1 id=\"how-event-binding-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rqi6twnn6bt6z88eh7650t0l\">事件繫結的工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/event-binding-concepts#how-event-binding-works\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9x8bex7zxq3ywqj8njjyo4c5g\">在事件繫結中，Angular 會為目標事件設定事件處理函式。你還可以將事件繫結用於自定義事件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3n4cvdlcn3abn0oqaanu8vgj8\">當元件或指令引發事件時，處理程式就會執行範本語句。範本語句會執行一個動作來回應這個事件。</p>\n<h2 id=\"handling-events\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"amu1xcu8mn5qdlpa98z0404j7\">處理事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/event-binding-concepts#handling-events\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cz8lqn9xoeldu2e03g2k6o3j5\">處理事件的常見方法之一是把事件物件 <code>$event</code> 傳給處理該事件的方法。<code>$event</code> 物件通常包含該方法所需的訊息，比如使用者名或圖片 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9p5q2x37yxt2zcpypcs5mwl6e\">目標事件決定了 <code>$event</code> 物件的形態。如果目標事件是來自原生 DOM 元素的，那麼 <code>$event</code> 是一個<a href=\"https://developer.mozilla.org/docs/Web/Events\">DOM 事件物件</a>，它具有 <code>target</code> 和 <code>target.value</code> 等屬性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1porpa42qawoycejjqd02k7ci\">在下面的例子中，程式碼透過繫結到 <code>name</code> 來設定 <code>&lt;input&gt;</code> 的 <code>value</code> 屬性。</p>\n<code-example header=\"src/app/app.component.html\" path=\"event-binding/src/app/app.component.html\" region=\"event-binding-3\">\n&lt;input [value]=\"currentItem.name\"\n       (input)=\"currentItem.name=getValue($event)\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ypnslpk3ntba7z5wrvvbt5zc\">在這個例子中，會發生下列操作：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z7yvcmd1x3axrk1xaiphdis5\">該程式碼繫結到 <code>&lt;input&gt;</code> 元素的 <code>input</code> 事件，該事件允許程式碼監聽這些更改。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kdvlawcfsvbemdrsp9v6yzeu\">當用戶做出更改時，該組件會引發 <code>input</code> 事件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejzi1ehzot6i4m08bnrlf8w9b\">這個繫結會在一個上下文中執行該語句，此上下文中包含 DOM 事件物件 <code>$event</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d52s26jwscxfd1rj19tdsx4k3\">Angular 會通過呼叫 <code>getValue($event.target)</code> 來獲取更改後的文字，並用它更新 <code>name</code> 屬性。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1n69q4s86weg8hnnehgtd9i5v\">如果該事件屬於某個指令或元件，那麼 <code>$event</code> 就具有指令或元件中生成的形態。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co4wa74qy0z6ym27skdgkqpax\">在範本中，<code>$event.target</code> 的型別只是 <code>EventTarget</code>。在 <code>getValue()</code> 方法中，把此目標轉為 <code>HTMLInputElement</code> 型別，以允許對其 <code>value</code> 屬性進行型別安全的訪問。</p>\n<code-example path=\"event-binding/src/app/app.component.ts\" region=\"getValue\">\ngetValue(event: <a href=\"api/router/Event\" class=\"code-anchor\">Event</a>): string {\n  return (event.target as HTMLInputElement).value;\n}\n\n</code-example>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/event-binding\n-->\n<!-- links from this doc:\n - api/router/Event\n - guide/event-binding-concepts#handling-events\n - guide/event-binding-concepts#how-event-binding-works\n - https://developer.mozilla.org/docs/Web/Events\n-->"}
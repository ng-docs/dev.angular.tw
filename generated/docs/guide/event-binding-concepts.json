{"id":"guide/event-binding-concepts","title":"事件绑定的工作原理","contents":"<div class=\"content\">\n  <h1 id=\"how-event-binding-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rqi6twnn6bt6z88eh7650t0l\">事件绑定的工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/event-binding-concepts#how-event-binding-works\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9x8bex7zxq3ywqj8njjyo4c5g\">在事件绑定中，Angular 会为目标事件配置事件处理函数。你还可以将事件绑定用于自定义事件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3n4cvdlcn3abn0oqaanu8vgj8\">当组件或指令引发事件时，处理程序就会执行模板语句。模板语句会执行一个动作来响应这个事件。</p>\n<h2 id=\"handling-events\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"amu1xcu8mn5qdlpa98z0404j7\">处理事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/event-binding-concepts#handling-events\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cz8lqn9xoeldu2e03g2k6o3j5\">处理事件的常见方法之一是把事件对象 <code>$event</code> 传给处理该事件的方法。<code>$event</code> 对象通常包含该方法所需的信息，比如用户名或图片 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9p5q2x37yxt2zcpypcs5mwl6e\">目标事件决定了 <code>$event</code> 对象的形态。如果目标事件是来自原生 DOM 元素的，那么 <code>$event</code> 是一个<a href=\"https://developer.mozilla.org/docs/Web/Events\">DOM 事件对象</a>，它具有 <code>target</code> 和 <code>target.value</code> 等属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1porpa42qawoycejjqd02k7ci\">在下面的例子中，代码通过绑定到 <code>name</code> 来设置 <code>&lt;input&gt;</code> 的 <code>value</code> 属性。</p>\n<code-example header=\"src/app/app.component.html\" path=\"event-binding/src/app/app.component.html\" region=\"event-binding-3\">\n&lt;input [value]=\"currentItem.name\"\n       (input)=\"currentItem.name=getValue($event)\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ypnslpk3ntba7z5wrvvbt5zc\">在这个例子中，会发生下列操作：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z7yvcmd1x3axrk1xaiphdis5\">该代码绑定到 <code>&lt;input&gt;</code> 元素的 <code>input</code> 事件，该事件允许代码监听这些更改。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kdvlawcfsvbemdrsp9v6yzeu\">当用户做出更改时，该组件会引发 <code>input</code> 事件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejzi1ehzot6i4m08bnrlf8w9b\">这个绑定会在一个上下文中执行该语句，此上下文中包含 DOM 事件对象 <code>$event</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d52s26jwscxfd1rj19tdsx4k3\">Angular 会通过调用 <code>getValue($event.target)</code> 来获取更改后的文本，并用它更新 <code>name</code> 属性。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1n69q4s86weg8hnnehgtd9i5v\">如果该事件属于某个指令或组件，那么 <code>$event</code> 就具有指令或组件中生成的形态。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co4wa74qy0z6ym27skdgkqpax\">在模板中，<code>$event.target</code> 的类型只是 <code>EventTarget</code>。在 <code>getValue()</code> 方法中，把此目标转为 <code>HTMLInputElement</code> 类型，以允许对其 <code>value</code> 属性进行类型安全的访问。</p>\n<code-example path=\"event-binding/src/app/app.component.ts\" region=\"getValue\">\ngetValue(event: <a href=\"api/router/Event\" class=\"code-anchor\">Event</a>): string {\n  return (event.target as HTMLInputElement).value;\n}\n\n</code-example>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/event-binding\n-->\n<!-- links from this doc:\n - api/router/Event\n - guide/event-binding-concepts#handling-events\n - guide/event-binding-concepts#how-event-binding-works\n - https://developer.mozilla.org/docs/Web/Events\n-->"}
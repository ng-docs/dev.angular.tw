{"id":"guide/router-tutorial","title":"在单页面应用中使用 Angular 路由","contents":"<div class=\"content\">\n  <h1 id=\"using-angular-routes-in-a-single-page-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"46o14uth7hi11lt332w6q5xb8\">在单页面应用中使用 Angular 路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#using-angular-routes-in-a-single-page-application\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ppzrxhnjpdcd3v5ktpyf8mxc\">本教程将介绍如何构建一个使用多个 Angular 路由的单页面应用 SPA。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avd9zdg6w0ov2dphgh0dp7j6t\">在 SPA（Single Page Application 单页面应用）中，所有应用的所有功能都存在于同一个 HTML 页面中。当用户访问应用的各种特性时，浏览器只需渲染那些用户需要关心的部分，而不用重新加载页面。这种模式可以显著改善应用的用户体验。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2brrmk2dyqvwdim8j255r8tz\">为了定义用户如何在应用中导航，你可以使用路由。可以添加一些路由来定义用户如何从应用的某个部分导航到另一部分。也可以配置一些路由来防范意外或未经授权的行为。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7n3rl7kbvtni3ptiju15z25w4\">要探索本教程的范例应用，请参阅<live-example></live-example>。</p>\n<h2 id=\"objectives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbta8klpv23x9gfh4twoy80po\">目标<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#objectives\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70h77yo149u449vsfxt5r2m3y\">将范例应用的各个特性组织到一些模块中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35hw3aw7np2gu3ipj66xg8e11\">定义如何导航到组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43l34wph9ia165pexxzoihj5q\">使用参数把信息传给组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zo484f196joy30f76l7xhhgy\">通过嵌套多个路由来构造路由体系。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwb96wmdxz1dir5f89a3vq052\">检查用户是否可以访问路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dw5zsm38cbfqs7fwxxk77z4om\">控制该应用是否可以放弃未保存的更改。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9djs3b5v0vs0aa8c7dohmlhf\">通过预先获取路由数据和惰性加载特性模块来提高性能。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c05ue0uznbjoy1pdi6bwm0myg\">需要特定的条件来加载组件。</li>\n</ul>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zh2yuyafmn2qaumsdhhvo8n9\">要完成本教程，你应该对以下概念有基本的了解：</p>\n<ul>\n<li>JavaScript</li>\n<li>HTML</li>\n<li>CSS</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vtg2wry451tucy201uexb3e4\"><a href=\"cli\">Angular CLI</a></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2md4wpdlbgon5ims4on6pkjw8\">你可能会发现<a href=\"tutorial/tour-of-heroes\">《英雄之旅》教程</a>很有用，但这不是必需的。</p>\n<h2 id=\"create-a-sample-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bruw2t9iar7oam6yjy176ohbg\">创建一个范例应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#create-a-sample-application\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0p9p17hywrjurzhdswafpczp\">使用 Angular CLI，创建一个新的应用<em>angular-router-sample</em>。这个应用程序有两个组件：<em>crisis-list</em>和<em>heroes-list</em>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f19ajpykgfylkqg7nz8prmpmy\">创建一个新的 Angular 项目 <em>angular-router-sample</em>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng new angular-router-sample\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7m5p0hhhbfq912888dgv9mdml\">当系统提示 <code>Would you like to add Angular routing?</code> 时，选择 <code>N</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekg7ire5wfr2pk4k3xpx6sjtb\">当系统提示 <code>Which stylesheet format would you like to use?</code> 时，选择 <code>CSS</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6y7fju12vi4jlthrkhn7n476n\">一段时间后，一个新项目 <code>angular-router-sample</code> 就准备就绪了。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bg5ggztddband7g78mrugzldl\">在终端上，导航到 <code>angular-router-sample</code> 目录。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cndom1j9weg4lv711yv63cmb6\">创建一个组件 <em>crisis-list</em>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component crisis-list\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tx75849tr8xcv70wbi6vcowh\">在你的代码编辑器中，找到文件 <code>crisis-list.component.html</code> 并用如下 HTML 替换占位符内容。</p>\n<code-example header=\"src/app/crisis-list/crisis-list.component.html\" path=\"router-tutorial/src/app/crisis-list/crisis-list.component.html\">\n&lt;h3&gt;CRISIS CENTER&lt;/h3&gt;\n&lt;p&gt;Get your crisis here&lt;/p&gt;\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exd8qmu4pruckvpmaaoz6ndjn\">创建第二个组件 <code>heroes-list</code>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component heroes-list\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"73foebm8lgbk59wzbpsheyvu2\">在你的代码编辑器中，找到 <code>heroes-list.component.html</code> 文件，并用如下 HTML 替换占位符内容。</p>\n<code-example header=\"src/app/heroes-list/heroes-list.component.html\" path=\"router-tutorial/src/app/heroes-list/heroes-list.component.html\">\n&lt;h3&gt;HEROES&lt;/h3&gt;\n&lt;p&gt;Get your heroes here&lt;/p&gt;\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"836tq9d1nxnnp29ayuxnjyjkm\">在你的代码编辑器中，打开文件 <code>app.component.html</code> 并用如下 HTML 替换其内容。</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"setup\">\n&lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> Sample&lt;/h1&gt;\n&lt;app-crisis-list&gt;&lt;/app-crisis-list&gt;\n&lt;app-heroes-list&gt;&lt;/app-heroes-list&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rbtxxyj4wr4fzmzpoxa2s75e\">运行 <code>ng serve</code> 来验证新应用是否正常运行。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng serve\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ckjv92jxuamm59dj19n89bpp\">打开浏览器访问 <code>http://localhost:4200</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gh20666kkq5ojt17wlu86wey\">你会看到一个网页，它由一个标题和两个组件的 HTML 组成。</p>\n</li>\n</ol>\n<h2 id=\"define-your-routes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyola5y1m9nxg8uatetfffqsu\">定义你的各个路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#define-your-routes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bshdgcqsoyfwjezctbp7wtpi1\">在本节中，你将定义两个路由：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9oa5anm5prrc9sqzy8ybnw1he\">路由 <code>/crisis-center</code> 用来打开 <code>crisis-center</code> 组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"sd0g9kbgpe3aheelbsb4yegq\">路由 <code>/heroes-list</code> 用来打开 <code>heroes-list</code> 组件。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85yk5m8jypw6m03i23knwplwo\">路由定义是一个 JavaScript 对象。每个路由通常都有两个属性。第一个属性 <code>path</code> 是一个字符串，它指定路由的 URL 路径。第二个属性 <code>component</code> 是组件类，它指定应用要为该路由显示哪个组件。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pauvn9rfv9wwpjcl59886j7p\">从您的代码编辑器中创建并打开\n<code>app.routes.ts</code>文件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hk0nzudp30lvjfq7zm7ukfau\">为您的应用程序创建并导出一个路由列表：</li>\n</ol>\n<code-example>\nimport {<a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>} from '@angular/router';\n\nexport const routes = [];\n</code-example>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3zz9hpj3onb7e8e2hk0x9vebb\">为您的前两个组件添加两个路由：</li>\n</ol>\n<code-example>\n  {path: 'crisis-list', component: CrisisListComponent},\n  {path: 'heroes-list', component: HeroesListComponent},\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xu9jnb8s59vi8y3oi2i9x3jh\">这个路由列表是一个JavaScript对象数组，每个对象定义一个路由的属性。</p>\n<h2 id=\"import-providerouter-from-angularrouter\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nda9odd8pczwz0orc02gtf1f\">从\n<code>@angular/router</code>导入\n<code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#import-providerouter-from-angularrouter\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mbp8tdqgzvy13mzdevq887zy\">路由允许您根据URL路径显示应用程序的特定视图。 要将此功能添加到您的示例应用程序中，您需要更新\n<code>app.config.ts</code>文件以使用路由提供者函数\n<code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>。 您从\n<code>@angular/router</code>导入此提供者函数。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d6l5gm2jfhdzyrykc1boau2mq\">从您的代码编辑器中打开\n<code>app.config.ts</code>文件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l08j59og1a5wq8pzayvvytbm\">添加以下导入语句：</li>\n</ol>\n<code-example>\nimport { <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a> } from '@angular/router';\nimport { routes } from './app.routes';\n</code-example>\n<ol start=\"2\">\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c608d8zc3ohjsp3k552nwe3rj\">更新\n<code>appConfig</code>中的提供者：</li>\n</ol>\n<code-example>\nproviders: [<a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(routes)]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3iw9of2m91xh93zdh4lhl1po6\">对于基于\n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>的应用程序，请将\n<code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>放入\n<code>AppModule</code>的\n<code>providers</code>列表中，或者将其传递给应用程序中的\n<code>bootstrapModule</code>的任何模块中。</p>\n<h2 id=\"update-your-component-with-router-outlet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvq3zzxwoh1to9a8buxfhzyr1\">更新你的组件以添加 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#update-your-component-with-router-outlet\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bcccvsegwnsha8414jecgn6sb\">此刻，你已经为应用定义了两个路由。但是，你的应用仍然在你的 <code>app.component.html</code> 模板中硬编码着 <code>crisis-list</code> 和 <code>heroes-list</code> 组件。为了让你的路由正常工作，需要更新模板，以便根据 URL 路径动态加载一个组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d90yrknupaq8scwn4po0vit33\">要实现这个功能，你就可以把 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> 指令添加到模板文件中。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"iu0u9f80e6c0cpfy934pjahh\">在代码编辑器中，打开 <code>app.component.html</code> 文件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4t8f8w1m7pz0tcx3ugxbny2wg\">删除下面这几行。</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"components\">\n&lt;app-crisis-list&gt;&lt;/app-crisis-list&gt;\n&lt;app-heroes-list&gt;&lt;/app-heroes-list&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3h6qsp78md0ugkxcdaoczx2xg\">添加 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> 指令。</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"router-outlet\">\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b78y59lzgi1wqp8w39xlmr1xd\">在\n<code>app.component.ts</code>中的\n<code>AppComponent</code>的导入中添加\n<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code></p>\n</li>\n</ol>\n<code-example>\nimports: [<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a>],\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ce4t9hgwgto45hmej525ewsb0\">在浏览器中查看更新后的应用。你应该只看到应用标题。要查看 <code>crisis-list</code> 组件，就要把 <code>crisis-list</code> 添加到浏览器地址栏的路径末尾。比如：</p>\n<code-example format=\"https\" language=\"https\">\n\nhttp://localhost:4200/crisis-list\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61jvz47pgchc4serb6vnu54js\">注意，<code>crisis-list</code> 组件会显示出来。Angular 正在使用你定义的路由来动态加载组件。你可以用同样的方法加载 <code>heroes-list</code> 组件：</p>\n<code-example format=\"https\" language=\"https\">\n\nhttp://localhost:4200/heroes-list\n\n</code-example>\n<h2 id=\"control-navigation-with-ui-elements\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2l21tyedt0l9wy3p83i54bxiu\">用 UI 元素控制导航<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#control-navigation-with-ui-elements\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"audpyxuvc942spt3dw903dkt4\">目前，你的应用支持两种路由。但是目前使用这些路由的唯一方法是让用户在浏览器的地址栏中手动输入路径。在本节中，你要添加两个链接，用户可以单击它们在 <code>heroes-list</code> 和 <code>crisis-list</code> 组件之间导航。你还会添加一些 CSS 样式。虽然这些样式不是必需的，但它们可以让你更容易的识别出当前显示的组件的链接。你将在下一节中添加此功能。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wblyjov2qglwx1o8uq3z24gz\">打开 <code>app.component.html</code> 文件，在标题下方添加以下 HTML。</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"nav\">\n&lt;nav&gt;\n  &lt;a class=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-list\"&gt;Crisis Center&lt;/a&gt; |\n  &lt;a class=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes-list\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ntwy6pdjko96wdqxgv5p41fp\">这个 HTML 使用了 Angular 指令 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>。该指令将你定义的路由连接到模板文件中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zwy3q4yf96e9uj2kzfs0bikn\">在\n<code>app.component.ts</code>的\n<code>AppComponent</code>的导入列表中添加\n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>指令</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hie642ihxmh92y1wdxgvwzs4\">打开 <code>app.component.css</code> 文件并添加如下样式。</p>\n<code-example header=\"src/app/app.component.css\" path=\"router-tutorial/src/app/app.component.css\">\n.button {\n    box-shadow: inset 0 1px 0 0 #ffffff;\n    background: #ffffff linear-gradient(to bottom, #ffffff 5%, #f6f6f6 100%);\n    border-radius: 6px;\n    border: 1px solid #dcdcdc;\n    display: inline-block;\n    cursor: pointer;\n    color: #666666;\n    font-family: Arial, sans-serif;\n    font-size: 15px;\n    font-weight: bold;\n    padding: 6px 24px;\n    text-decoration: none;\n    text-shadow: 0 1px 0 #ffffff;\n    outline: 0;\n}\n.activebutton {\n    box-shadow: inset 0 1px 0 0 #dcecfb;\n    background: #bddbfa linear-gradient(to bottom, #bddbfa 5%, #80b5ea 100%);\n    border: 1px solid #84bbf3;\n    color: #ffffff;\n    text-shadow: 0 1px 0 #528ecc;\n}\n\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bl9l84npb9q0zwxt0ftzdtfj2\">如果你在浏览器中查看应用，你会看到这两个链接。单击某个链接时，会出现相应的组件。</p>\n<h2 id=\"identify-the-active-route\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5aaw65shwz9t5nrnas0p2iryp\">标出活动路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#identify-the-active-route\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3cucxsv8pqtglhow85fs9rtg\">虽然用户可以使用上一节中添加的链接来浏览你的应用，但他们并没有简单的方法来确定活动路由是什么。可以用 Angular 的 <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> 指令添加这个功能。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"iu0u9f80e6c0cpfy934pjahh\">在代码编辑器中，打开 <code>app.component.html</code> 文件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btowrdfszy9vuiyjceyfvpsxr\">更新 a 标签以包含 <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> 指令。</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"routeractivelink\">\n&lt;nav&gt;\n  &lt;a class=\"button\"\n     <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-list\"\n     <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"activebutton\"\n     ariaCurrentWhenActive=\"page\"&gt;\n    Crisis Center\n  &lt;/a&gt; |\n  &lt;a class=\"button\"\n     <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes-list\"\n     <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"activebutton\"\n     ariaCurrentWhenActive=\"page\"&gt;\n    Heroes\n  &lt;/a&gt;\n&lt;/nav&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ey4owdnfs8cx3gvb814ceizp\">在\n<code>app.component.ts</code>的\n<code>AppComponent</code>的\n<code>imports</code>列表中添加\n<code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">RouterLinkActive</a></code>指令</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yppr1st04ocym39v1g74c7z4\">再次查看你的申请表。单击其中一个按钮时，该按钮的样式会自动更新，并为该用户标出该活动组件。通过添加 <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> 指令，可以通知你的应用把一个特定的 CSS 类应用到当前的活动路由中。在本教程中，这个 CSS 类是 <code>activebutton</code>，但你可以使用任何想要的类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdza8biw9rvh4qpyxih3o2s71\">请注意，我们还为\n<code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code>的\n<code>ariaCurrentWhenActive</code>指定了一个值。这可以确保视觉障碍用户（可能无法感知应用的不同样式）也能识别活动按钮。有关更多信息，请参阅无障碍最佳实践\n<a href=\"/guide/accessibility#active-links-identification\">活动链接识别部分</a>。</p>\n<h2 id=\"adding-a-redirect\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7dl9sopp9gc27t9bz5739u6g\">添加一个重定向<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#adding-a-redirect\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p3x1tgqfqkg8pi3hyio6w4qg\">在本教程的这一步中，你将添加一个重定向路由来把用户导向 <code>/heroes-list</code> 组件。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7knlvhxqb1wbp7tk93b9z5d3\">从您的代码编辑器中打开\n<code>app.routes.ts</code>文件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dawexx7iv7dbsuqsnmommnmc2\">按照以下方式更新\n<code>routes</code>部分。</li>\n</ol>\n<code-example>\n  {path: '', redirectTo: '/heroes-list', pathMatch: 'full'},\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1z6t9z4wsd5dj2r5aamnp8jq6\">注意这个新路由使用一个空字符串作为它的路径。另外，它还把 <code>component</code> 属性替换成了这两个新属性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ghvm54f9feewnb0zbrlubp2h\">属性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>redirectTo</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e938uf1gip8t52ddbfpq56m5q\">此属性指示Angular将从空路径重定向到\n<code>heroes-list</code>路径。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>pathMatch</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nxxc300veim0gmmbk3jx5q5f\">此属性指示Angular匹配URL的多少。对于本教程，您应将此属性设置为\n<code>full</code>。当路径为空字符串时，建议使用此策略。有关此属性的更多信息，请参阅\n<a href=\"api/router/Route\">Route API文档</a>。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56lzjut8xj6fqp1r1modm8ph1\">现在，当你打开应用时，它会默认显示 <code>heroes-list</code> 组件。</p>\n<h2 id=\"adding-a-404-page\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etw4wyuye7289v04i0wyh1jea\">添加 404 页面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#adding-a-404-page\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asy28897rchmkjn1x3z643xvt\">用户可以尝试访问你尚未定义的路由。为了解决这个问题，最佳做法是显示一个 404 页面。在本节中，你将创建一个 404 页面，并更新路由配置，以便为任何未指定的路由显示该页面。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5odn6vmzpv6p35wvm2gd2ur2b\">在终端上，创建一个新的组件 <code>PageNotFound</code>。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component page-not-found\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lzkitqtouv3zcgx25x7zodg6\">在代码编辑器中，打开 <code>page-not-found.component.html</code> 文件并用下面的 HTML 替换它的内容。</p>\n<code-example header=\"src/app/page-not-found/page-not-found.component.html\" path=\"router-tutorial/src/app/page-not-found/page-not-found.component.html\">\n&lt;h2&gt;Page Not Found&lt;/h2&gt;\n&lt;p&gt;We couldn't find that page! Not even with x-ray vision.&lt;/p&gt;\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2exmv2ie9iidvkvab7qwbpt9u\">打开\n<code>app.routes.ts</code>文件，并将以下路由添加到路由列表中：</p>\n</li>\n</ol>\n<code-example>\n  {path: '**', component: PageNotFoundComponent}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fpo89176tc1clqg7mkp7xtif\">新路由使用路径 <code>**</code>。这个路径是 Angular 表示通配符路由的方式。任何与你配置中的路由都不匹配的路由都会使用这个路由。</p>\n    <div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5b89gkgy2s3cj02xretgs2y5d\">请注意，通配符路由要放在数组的末尾。路由的顺序很重要，因为 Angular 会按顺序应用路由并使用所找到的第一个匹配项。</p>\n    </div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"uiobw0pt85j3db0ljkeqhb19\">尝试导航到应用程序中不存在的路由，例如\n<code>http://localhost:4200/powers</code>。 此路由在您的\n<code>app.routes.ts</code>文件中未定义任何匹配项。 但是，由于您定义了通配符路由，应用程序会自动显示您的\n<code>PageNotFound</code>组件。</p>\n<h2 id=\"next-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4pkljueu68ifjoi5994e9l8o\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"olflv3r4gqp5225wn87tctf6\">你已经有了一个基本的应用程序，它使用 Angular 的路由功能来根据 URL 地址改变用户可以看到的组件。你还扩展了这些特性，以包含一个重定向，以及一个用来显示自定义 404 页面的通配符路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3zlxk6eimcgv1rctvds5jhbxc\">关于路由的更多信息，请参阅以下主题：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4komekzloksxs2iyp1mgeljwe\"><a href=\"guide/router\">应用内路由和导航</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f32tbnu2aj5akghd0cn3flxm0\"><a href=\"api/router\">路由器 API</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Tue Oct 24 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/routing-overview\n - guide/routing-with-urlmatcher\n-->\n<!-- links from this doc:\n - /guide/accessibility#active-links-identification\n - api/core/NgModule\n - api/router\n - api/router/Route\n - api/router/Router\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterOutlet\n - api/router/Routes\n - api/router/provideRouter\n - cli\n - guide/router\n - guide/router-tutorial#adding-a-404-page\n - guide/router-tutorial#adding-a-redirect\n - guide/router-tutorial#control-navigation-with-ui-elements\n - guide/router-tutorial#create-a-sample-application\n - guide/router-tutorial#define-your-routes\n - guide/router-tutorial#identify-the-active-route\n - guide/router-tutorial#import-providerouter-from-angularrouter\n - guide/router-tutorial#next-steps\n - guide/router-tutorial#objectives\n - guide/router-tutorial#prerequisites\n - guide/router-tutorial#update-your-component-with-router-outlet\n - guide/router-tutorial#using-angular-routes-in-a-single-page-application\n - tutorial/tour-of-heroes\n-->"}
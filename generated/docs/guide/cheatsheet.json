{"id":"guide/cheatsheet","title":"速查表","contents":"<div class=\"content\">\n  <div class=\"center-layout-wide\">\n<h1 class=\"no-toc\" id=\"cheat-sheet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3q9xg5162yzq576ij8zd0qh61\">速查表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cheatsheet#cheat-sheet\"><i class=\"material-icons\">link</i></a></h1>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p29plvvbfir7eo01lmju80ab\">引导</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic'; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8af32l32h1f1rp6vcig19pkj\">从\n<code>@angular/platform-browser-dynamic</code>中导入\n<code><a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a></code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule); </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cs52w4c6v3xp9z2f9glxb0fhf\">从指定的\n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>中使用根组件引导应用程序。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">NgModules</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core'; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6qxz5n06nsb48gmemm2ns32a\">从\n<code>@angular/core</code>导入\n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ \n&nbsp; declarations: …, \n&nbsp; imports: …, \n&nbsp; exports: …, \n&nbsp; providers: …, \n&nbsp; bootstrap: … \n}) \nclass MyModule {} </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mnff4io92mzlq1l8j7tzp7xb\">定义一个包含组件、指令、管道和提供者的模块。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> declarations: [ \n&nbsp; MyRedComponent, \n&nbsp; MyBlueComponent, \n&nbsp; MyDatePipe \n] </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ryg35mx9gjbhkfgdedx7k3fp\">属于此模块的组件、指令和管道的列表。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> imports: [ \n&nbsp; <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, \n&nbsp; SomeOtherModule \n] </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83ehjt4tyiymm7x4do2you2vf\">要导入到此模块的模块列表。导入模块中的所有内容对此模块的\n<code>declarations</code>可见。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> exports: [ \n&nbsp; MyRedComponent, \n&nbsp; MyDatePipe \n] </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2i2yyp7mugzaqvtpxxyrs33c7\">对导入此模块的模块可见的组件、指令和管道的列表。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> providers: [ \n&nbsp; MyService, \n&nbsp; { provide: … } \n] </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9m10cg840ckfe2rp6otunfx4\">对此模块内容及导入此模块的模块可见的依赖注入提供者列表。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> bootstrap: [MyAppComponent] </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44xv5um0unbdwukahkmnx8gad\">在引导此模块时要引导的组件列表。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w5kqvgmi0o4l4z6rjt7db87s\">模板语法</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;input [value]=\"firstName\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24jd9krxo2nalnessot9qyb0q\">将属性\n<code>value</code>绑定到表达式\n<code>firstName</code>的结果。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [attr.role]=\"myAriaRole\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1poyb2ls4nu5vcp8683w70d8z\">将属性\n<code>role</code>绑定到表达式\n<code>myAriaRole</code>的结果。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [class.extra-sparkle]=\"isDelightful\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5uhv95ya40bj0tib48uwllj2o\">将元素上CSS类\n<code>extra-sparkle</code>的存在与表达式\n<code>isDelightful</code>的真假绑定。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [style.width.px]=\"mySize\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epo1b9wf5zh2ienusyvwepz3u\">将样式属性\n<code>width</code>绑定到表达式\n<code>mySize</code>的结果，单位为像素。单位是可选的。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;button (click)=\"readRainbow($event)\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3jqk65rul7w35hgloiyfksok\">当单击此按钮元素（或其子元素）时调用方法\n<code>readRainbow</code>并传入事件对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div title=\"Hello {{ponyName}}\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6d784t8e62ghhfwllfk5z3b31\">将属性绑定到插值字符串，例如，\"Hello Seabiscuit\"。等效于：\n<code-example format=\"html\" hidecopy=\"\" language=\"html\">\n  &lt;div [title]=\"'Hello ' + ponyName\"&gt; \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;p&gt; \n&nbsp; Hello {{ponyName}} \n&lt;/p&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6q86xheakoie0vva7rdxxe8d0\">将文本内容绑定到插值字符串，例如，\"Hello Seabiscuit\"。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;my-cmp [(title)]=\"name\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"av5hwyzob17p6xplxyr759k6o\">设置双向数据绑定。等效于：\n<code-example format=\"html\" hidecopy=\"\" language=\"html\">\n  &lt;my-cmp [title]=\"name\" (titleChange)=\"name=$event\"&gt; \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;video #movieplayer …&gt;&lt;/video&gt; \n&lt;button (click)=\"movieplayer.play()\"&gt; \n&nbsp; Play \n&lt;/button&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"kdegutdk4b4qgwsmmc3wtho2\">创建一个名为\n<code>movieplayer</code>的局部变量，该变量可在当前模板中的数据绑定和事件绑定表达式中访问\n<code>video</code>元素实例。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;p *myUnless=\"myExpression\"&gt; \n&nbsp; … \n&lt;/p&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5oz7hhzatzapw7v7tg5yzo3f\">星号（\n<code>*</code>）字符将当前元素转换为嵌入式模板。等效于：\n<code-example format=\"html\" hidecopy=\"\" language=\"html\">\n  &lt;ng-template [myUnless]=\"myExpression\"&gt; &nbsp; &lt;p&gt; &nbsp;&nbsp;&nbsp; … &nbsp; &lt;/p&gt; &lt;/ng-template&gt; \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;p&gt; \n&nbsp; Card No.: {{cardNumber | myCardNumberFormatter}} \n&lt;/p&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"528za5x58ebs8bh37lj98bvdf\">使用名为\n<code>myCardNumberFormatter</code>的管道转换表达式\n<code>cardNumber</code>的当前值。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;p&gt; \n&nbsp; Employer: {{employer?.companyName}} \n&lt;/p&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dftpzwoyiktds5lojjodfatrr\">安全导航运算符（\n<code>?</code>）表示\n<code>employer</code>字段是可选的，如果为\n<code>undefined</code>，则应忽略表达式的其余部分。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;svg:rect x=\"0\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y=\"0\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; width=\"100\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; height=\"100\"/&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qkqqsobj4vf3q918qiv56qzw\">SVG 模板片段需要在其根元素上添加 \n<code>svg:</code> 前缀，以区分 SVG 元素和 HTML 组件。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;svg&gt; \n&nbsp; &lt;rect x=\"0\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y=\"0\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; width=\"100\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; height=\"100\"/&gt; \n&lt;/svg&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9d1qu9f7lz2nynbt37jc5dcq\">检测到一个 \n<code>&lt;svg&gt;</code> 根元素会自动识别为 SVG 元素，无需前缀。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caiz9ki6ffyzkmf5op1f69ql7\">内置指令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common'; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gzu2mcp7jkmd27bgc683elmr\">从 \n<code>@angular/common</code> 中导入 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;section *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSection\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ju1xzflyuxxu876cmc5u7gwv\">根据 \n<code>showSection</code> 表达式移除或重新创建 DOM 树的一部分。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of list\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bryhepezgk400mg4ykkvvchll\">将 \n<code>li</code> 元素及其内容转换为模板，并使用它为列表中的每个项目实例化一个视图。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"conditionExpression\"&gt;\n&nbsp; &lt;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"case1Exp\"&gt; \n&nbsp;&nbsp;&nbsp; … \n&nbsp; &lt;/ng-template&gt;\n&nbsp; &lt;ng-template <a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"case2LiteralString\"&gt; \n&nbsp;&nbsp;&nbsp; … \n&nbsp; &lt;/ng-template&gt;\n&nbsp; &lt;ng-template <a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>&gt; \n&nbsp;&nbsp;&nbsp; … \n&nbsp; &lt;/ng-template&gt; \n&lt;/div&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9evc0q7wphqh4jxnqmg4t47hl\">根据当前 \n<code>conditionExpression</code> 的值，通过选择其中一个嵌入模板来有条件地交换 \n<code>div</code> 的内容。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive, \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'disabled': isDisabled}\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ateyyrl23m9f7gmwo5b9yz279\">将 CSS 类的出现绑定到元素上，根据相关映射值的真值。右侧表达式应返回 \n<code>{class-name: true/false}</code> 映射表。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"{'property': 'value'}\"&gt; \n&lt;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"dynamicStyles()\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ay6kb4vvztg2r8oodhwr8zjxy\">允许你使用 CSS 为 HTML 元素分配样式。你可以直接使用 CSS，就像第一个示例中那样，或者你可以从组件中调用一个方法。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xsni8fgg13z9qwldwylke25i\">表单</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6puvbt4ja2ssrw6nshns6om2\">从 \n<code>@angular/forms</code> 中导入 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"userName\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7zogn1ffbztd1l1mmg473995c\">为表单控件提供双向数据绑定、解析和验证。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eeom5pdaiszm2cpagxgv939fw\">类装饰器</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, … } from '@angular/core'; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1m3wh2yl9cbb68rhhikqskxb2\">从 \n<code>@angular/core';</code> 中导入 \n<code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, &amp;hellip;</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({…}) \nclass MyComponent() {} </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ee1veddzwc3yjqyb9eu4quodw\">声明一个类是组件，并提供有关该组件的元数据。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({…}) \nclass MyDirective() {} </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8db0838b79hwvn46jgpsbewsa\">声明一个类是指令，并提供有关该指令的元数据。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({…}) \nclass MyPipe() {} </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qz5rl7e74vjgqxf5fcb03dmr\">声明一个类是管道，并提供有关该管道的元数据。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nclass MyService() {} </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3eowwrxqiduoe7o8041mtlidc\">声明一个类可以由其他类提供和注入。没有这个装饰器，编译器不会生成足够的元数据，以允许在某处注入时正确创建该类。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azk2dn7rjdadywgbbt0nzm2f\">指令配置</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ \n&nbsp; property1: value1, \n&nbsp; … \n}) </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"t15ncdni51d5ovipsgbpy6xt\">向指令添加具有值为 \n<code>value1</code> 的 \n<code>property1</code> 属性。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> selector: '.cool-button:not(a)' </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22ik3ni3scpcknqkxb06ldsks\">指定一个 CSS 选择器，用于在模板中标识该指令。支持的选择器包括 \n<code>element</code>、\n<code>[attribute]</code>、\n<code>.class</code> 和 \n<code>:not()</code>。 \n<br> 不支持父子关系选择器。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> providers: [ \n&nbsp; MyService, \n&nbsp; { provide: … } \n] </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uqgh14di2o202kssb9l1pjio\">为该指令及其子级提供依赖注入提供者列表。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8q7jaepbcy8tixv0atcr9z8e5\">组件配置 \n<br> \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 扩展自 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>，因此 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 的配置也适用于组件</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> viewProviders: [MyService, { provide: … }] </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edacqgtsy1o6nh1j4nia6rtal\">依赖注入提供者列表，仅限于该组件的视图。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> template: 'Hello {{name}}' \ntemplateUrl: 'my-component.html' </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mmwcp2dogmn05yw8sp8ojoj7\">组件视图的内联模板或外部模板URL。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> styles: ['.primary {color: red}'] \nstyleUrls: ['my-component.css'] </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60rsj6rokzemd0nkuenaw30ji\">用于样式化组件视图的内联CSS样式或外部样式表URL列表。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zy1tapigmzr60ihtg0or25ip\">指令和组件的类字段装饰器。</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, … } from '@angular/core'; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dt670xt005czqwtoam5eqakvk\">从 \n<code>@angular/core</code> 中导入 \n<code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, ...</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() myProperty; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b623x7f8jc4i37qclsr781svr\">声明一个可通过属性绑定更新的输入属性（例如：\n<code>&lt;my-cmp [myProperty]=\"someExpression\"&gt;</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() myEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>(); </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ave842j5k6ersxswxz9rqd4mn\">声明一个触发事件的输出属性，可以使用事件绑定进行订阅（例如：\n<code>&lt;my-cmp (myEvent)=\"doSomething()\"&gt;</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('class.valid') isValid; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exztr312t4402k861cwfs5ymq\">将宿主元素属性（这里是CSS类 \n<code>valid</code>）绑定到指令/组件属性（\n<code>isValid</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('click', ['$event']) onClick(e) {…} </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dgsaufp70xg0t7ydwha2n3tof\">使用一个指令/组件方法（\n<code>onClick</code>）订阅宿主元素事件（\n<code>click</code>），可选择性地传递参数（\n<code>$event</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(myPredicate) myChildComponent; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1uoi3pq1hfa2uoioqj6xyvoee\">将组件内容查询的第一个结果（\n<code>myPredicate</code>）绑定到类的属性（\n<code>myChildComponent</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a>(myPredicate) myChildComponents; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"257smj8crgmzl0znw7g5v0wgl\">将组件内容查询的结果（\n<code>myPredicate</code>）绑定到类的属性（\n<code>myChildComponents</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(myPredicate) myChildComponent; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92n9qdkf2tqbsnsvvsjrnvl9x\">将组件视图查询的第一个结果（\n<code>myPredicate</code>）绑定到类的属性（\n<code>myChildComponent</code>）。不适用于指令。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ViewChildren\" class=\"code-anchor\">ViewChildren</a>(myPredicate) myChildComponents; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ay7ok7hukr1ickapdbot7ejqk\">将组件视图查询的结果（\n<code>myPredicate</code>）绑定到类的属性（\n<code>myChildComponents</code>）。不适用于指令。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72kw4ez66luybcx31lzysw1qk\">指令和组件的变更检测和生命周期钩子（实现为类方法）</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> constructor(myService: MyService, …) { … } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eg2aqwdkxbslxouui7xudzq90\">在任何其他生命周期钩子之前调用。用于注入依赖项，但避免在此处进行任何严重的工作。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnChanges(changeRecord) { … } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ialdd7t9xdzck0okhcq0umip\">在每次更改输入属性之后，以及处理内容或子视图之前调用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnInit() { … } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nbfew2b0u9s3vhibuldqo18z\">在构造函数之后调用，初始化输入属性，并首次调用 \n<code>ngOnChanges</code> 之前调用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngDoCheck() { … } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3wrvosqynf2ke6vngsxflkog\">每次检查组件或指令的输入属性时调用。用于通过执行自定义检查来扩展变更检测。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterContentInit() { … } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bg2hhn7ewbosl6j9st7oefxv\"><code>ngOnInit</code> 后调用，当组件或指令的内容已初始化。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterContentChecked() { … } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eip7wtlphdxg02yi6zb1cjkhq\">在组件或指令内容的每次检查之后调用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterViewInit() { … } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dscuupgpmh76ax6sztlhfdvlu\">在组件视图和子视图/指令所在视图初始化后调用\n<code>ngAfterContentInit</code>之后。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterViewChecked() { … } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27hmxmg2f2b3mhworaa2ltrdh\">在组件视图和子视图/指令所在视图的每次检查之后调用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnDestroy() { … } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqvjt0ospae160oava0hg3goq\">在实例销毁之前调用一次。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ssn6uzcufropks11kqjq01rz\">依赖注入配置</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyService, useClass: MyMockService } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dpjmnvrck26iz1efj03py8is\">将\n<code>MyService</code>的提供者设置或覆盖为\n<code>MyMockService</code>类。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyService, useFactory: myFactory } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wcxyldw0djwa2sks4nnim87d\">将\n<code>MyService</code>的提供者设置或覆盖为\n<code>myFactory</code>工厂函数。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyValue, useValue: 41 } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54oq6kydlymurf93507bsm7k3\">将\n<code>MyValue</code>的提供者设置或覆盖为值\n<code>41</code>。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezodoh04qben8komampk7fumq\">路由与导航</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, … } from '@angular/router'; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31t7oppgw45rk9hirqr7bm8pr\">从\n<code>@angular/router</code>导入\n<code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, ...</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> const routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [ \n&nbsp; { path: '', component: HomeComponent }, \n&nbsp; { path: 'path/:routeParam', component: MyComponent }, \n&nbsp; { path: 'staticPath', component: … }, \n&nbsp; { path: '**', component: … }, \n&nbsp; { path: 'oldPath', redirectTo: '/staticPath' }, \n&nbsp; { path: …, component: …, data: { message: 'Custom' } } \n]); \n \nconst routing = RouterModule.forRoot(routes); </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"de2ckawbhj4yqz14mnf6b1aj1\">为应用程序配置路由。支持静态、参数化、重定向和通配符路由。还支持自定义路由数据和解析。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt; \n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"aux\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yez9ev7y3zv2s1hv4lvmaoqk\">标记要加载当前路由组件的位置。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/path\"&gt; \n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path', routeParam ]\"&gt; \n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path', { matrixParam: 'value' } ]\"&gt; \n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" [queryParams]=\"{ page: 1 }\"&gt; \n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" fragment=\"anchor\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"el7ezxr4djdy1wtuqk2j7xir7\">基于包含路由路径、必需和可选参数、查询参数和片段的路由指令，创建到不同视图的链接。要导航到根路由，请使用\n<code>/</code>前缀；对于子路由，请使用\n<code>./</code>前缀；对于兄弟或父路由，请使用\n<code>../</code>前缀。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kaylhzx2vxikrwhkplg6n93\">当\n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>成为当前活动路由时，将提供的类添加到元素中。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt; </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gndgj2al75mkessnd989xwli\">当\n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>成为当前活动路由时，将提供的类和\n<code>aria-current</code>属性添加到元素中。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canActivateGuard: <a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a> = \n&nbsp; ( \n&nbsp;&nbsp;&nbsp; route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n&nbsp;&nbsp;&nbsp; state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n&nbsp; ) =&gt; { … } \n \n{ path: …, canActivate: [canActivateGuard] } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsmvnq4zh3z0aydqam4kh8cak\">用于定义路由器首先调用的函数接口，以确定是否应激活该组件。应返回\n<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>或解析为\n<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>的Observable/Promise。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canDeactivateGuard: <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>&lt;T&gt; = \n&nbsp; ( \n&nbsp;&nbsp;&nbsp; component: T, \n&nbsp;&nbsp;&nbsp; route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n&nbsp;&nbsp;&nbsp; state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n&nbsp; ) =&gt; { … } \n \n{ path: …, canDeactivate: [canDeactivateGuard] } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adj8z9dgi8h11a518zwvtx1zu\">用于定义路由器首先调用的函数接口，以确定导航后是否应停用此组件。应返回\n<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>或解析为\n<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>的Observable/Promise。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canActivateChildGuard: <a href=\"api/router/CanActivateChildFn\" class=\"code-anchor\">CanActivateChildFn</a> = \n&nbsp; ( \n&nbsp;&nbsp;&nbsp; route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n&nbsp;&nbsp;&nbsp; state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n&nbsp; ) =&gt; { … } \n \n{ path: …, canActivateChild: [canActivateGuard], children: … } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8v55fjw8uxyq7cc1wqxf66ykc\">用于定义路由器首先调用的函数接口，以确定是否应激活子路由。应返回\n<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>或解析为\n<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>的Observable/Promise。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function resolveGuard implements <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>&lt;T&gt; = \n&nbsp; ( \n&nbsp;&nbsp;&nbsp; route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n&nbsp;&nbsp;&nbsp; state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n&nbsp; ) =&gt; { … }  \n \n{ path: …, resolve: [resolveGuard] } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rzq2gnc0h5i67w5slil9u8ok\">用于定义路由器首先调用的函数接口，以在渲染路由之前解析路由数据。应返回值或解析为值的Observable/Promise。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canLoadGuard: <a href=\"api/router/CanLoadFn\" class=\"code-anchor\">CanLoadFn</a> = \n&nbsp; ( \n&nbsp;&nbsp;&nbsp; route: <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> \n&nbsp; ) =&gt; { … } \n \n{ path: …, canLoad: [canLoadGuard], loadChildren: … } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xhkbj348addfkijp14nom634\">用于定义路由器首先调用的函数接口，以确定是否应加载惰性加载模块。应返回\n<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>或解析为\n<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>的Observable/Promise。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgClass\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/Directive\n - api/core/EventEmitter\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/Output\n - api/core/Pipe\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivateChildFn\n - api/router/CanActivateFn\n - api/router/CanDeactivateFn\n - api/router/CanLoadFn\n - api/router/ResolveFn\n - api/router/Route\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterStateSnapshot\n - api/router/Routes\n - api/router/UrlTree\n - guide/cheatsheet#cheat-sheet\n-->"}
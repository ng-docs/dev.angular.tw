{"id":"guide/angular-compiler-options","title":"Angular 編譯器選項","contents":"<div class=\"content\">\n  <h1 id=\"angular-compiler-options\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xilqqmq59uyuxok90y18qh86\">Angular 編譯器選項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#angular-compiler-options\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74hmlom0mctsk5stez50hmw6y\">使用 <a href=\"guide/aot-compiler\">預先（AoT）編譯</a> 時，可以透過在 <a href=\"guide/typescript-configuration\">TypeScript 設定檔案中</a>指定<em>樣板</em>編譯器選項來控制如何編譯應用程式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lyqhharg1okkbjg37eh5d19q\">樣板選項物件 <code>angularCompilerOptions</code> 和為 TypeScript 編譯器提供標準選項的 <code>compilerOptions</code> 物件是兄弟。</p>\n<code-example header=\"tsconfig.json\" path=\"angular-compiler-options/tsconfig.json\" region=\"angular-compiler-options\">\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    // ...\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    // ...\n    \"disableTypeScriptVersionCheck\": true\n  }\n}\n\n</code-example>\n<p><a id=\"tsconfig-extends\"></a></p>\n<h2 id=\"configuration-inheritance-with-extends\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3oyjd2c0ppw4igy474adczj30\">用 <code>extends</code> 語法設定繼承方式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#configuration-inheritance-with-extends\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ehkqx7p5g030v8vwso9qi16r\">像 TypeScript 編譯器一樣，Angular 的 AOT 編譯器也支援對 TypeScript 設定檔案中的 <code>angularCompilerOptions</code> 進行 <code>extends</code>。<code>extends</code> 屬性位於頂層，和 <code>compilerOptions</code> 和 <code>angularCompilerOptions</code> 平級。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ongwx6r7mnx878tfpja7n1s\">使用 <code>extends</code> 屬性，TypeScript 設定可以從另一個檔案中繼承設定。首先從基礎檔案中載入設定項，然後被繼承自它的設定檔案中的設定項覆寫。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4reizjf10jcs1ftw359bt1ndz\">比如：</p>\n<code-example header=\"tsconfig.app.json\" path=\"angular-compiler-options/tsconfig.app.json\" region=\"angular-compiler-options-app\">\n{\n    \"extends\": \"./tsconfig.json\",\n    \"compilerOptions\": {\n      \"outDir\": \"./out-tsc/app\",\n    // ...\n    \"angularCompilerOptions\": {\n      \"strictTemplates\": true,\n      \"preserveWhitespaces\": true,\n      // ...\n      \"disableTypeScriptVersionCheck\": true\n    }\n  }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rzwb5k44vdjcyb0z1pq2czlw\">欲知詳情，參閱 <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript 手冊</a>。</p>\n<h2 id=\"template-options\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7abskwlirg0chi56a9npy553n\">樣板選項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#template-options\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20ibuyeefl9plk3o0qckp1ayi\">以下選項可用於設定 AoT 樣板編譯器。</p>\n<h3 id=\"annotationsas\"><code>annotationsAs</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#annotationsas\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exvxw92qs2kunebehab113gg0\">修改 Angular 專有註解的生成方式，以改善搖樹最佳化。非 Angular 註解不受影響。可選值為 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> fields</code> 或 <code>decorators</code>。預設值為 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> fields</code>。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctpp22uxwoz3gz8nt4zstxtl\">預設情況下，編譯器會用類別中的靜態欄位替換裝飾器，這允許像 <a href=\"https://github.com/google/closure-compiler\">Closure 編譯器</a>這樣的高階搖樹器刪除未使用的類。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwbsl733jf0zsgauwj3l310wc\"><code>decorators</code> 值會將裝飾器保留在原處，這將使編譯速度更快。TypeScript 會生成對輔助器 <code>__decorate</code> 的呼叫。使用 <code>--emitDecoratorMetadata</code> 以支援執行時反射。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pz2oe5nc2s86vssdz1a85rxt\"><strong>注意</strong>：<br>\n這樣生成的程式碼將無法被正確地搖樹最佳化。</p>\n</div>\n</li>\n</ul>\n<h3 id=\"annotateforclosurecompiler\"><code>annotateForClosureCompiler</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#annotateforclosurecompiler\"><i class=\"material-icons\">link</i></a></h3>\n<!-- vale Angular.Angular_Spelling = NO -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fpu3e1bmdc5ut87r3lv38hy\">如果為 <code>true</code>，則使用 <a href=\"https://github.com/angular/tsickle\">Tsickle</a> 來用 <a href=\"https://jsdoc.app\">JSDoc</a> 對生成的 JavaScript 程式碼進行註解，這些註解是供 <a href=\"https://github.com/google/closure-compiler\">Closure 編譯器</a> 使用的。預設值為 <code>false</code>。</p>\n<!-- vale Angular.Angular_Spelling = YES -->\n<h3 id=\"compilationmode\"><code>compilationMode</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#compilationmode\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49iqj4dhf4x9jnl3xpz8gv2dv\">指定要使用的編譯模式。可以使用以下模式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fe6whjbmdtslgtp1har69ebd\">模式</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>'full'</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qxm7jhh4f70k6d9gbipt3vo\">根據當前使用的 Angular 版本生成完全預先編譯的程式碼。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>'partial'</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o9i98fua0ao22wd6j2tx6lr6\">生成穩定的程式碼，但是是適合發布函式庫的中間形式。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egxzpvhjmh7tbgnzs9e3np4hs\">預設值為 <code>'full'</code>。</p>\n<h3 id=\"disableexpressionlowering\"><code>disableExpressionLowering</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#disableexpressionlowering\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lcd3oxekjmxyr14k66tdbr15\">如果為 <code>true</code>（預設值），則轉換在註解中使用或允許使用的程式碼，以允許從樣板的工廠模組匯入程式碼。欲知詳情，參閱<a href=\"guide/aot-compiler#metadata-rewriting\">元資料重寫</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26d6enm82ew6z3oc06q96gr1p\">如果為 <code>false</code>，則停用此重寫，你必須手動進行重寫。</p>\n<h3 id=\"disabletypescriptversioncheck\"><code>disableTypeScriptVersionCheck</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#disabletypescriptversioncheck\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wzfg516maa7ykv5l7kqjymq5\">如果為 <code>true</code>，則在使用不受支援的 TypeScript 版本時，編譯器不會檢查 TypeScript 版本，並且不會報錯。不建議使用，因為不受支援的 TypeScript 版本可能具有未定義的行為。預設值為 <code>false</code>。</p>\n<h3 id=\"enablei18nlegacymessageidformat\"><code>enableI18nLegacyMessageIdFormat</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#enablei18nlegacymessageidformat\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wwquotwf0dy3cktwy0hnsgg7\">指示 Angular 樣板編譯器為樣板中用 <code>i18n</code> 屬性標出的訊息建立舊版 ID。關於為本地化而對消息進行標記的更多訊息，參閱<a href=\"guide/i18n-common-prepare#mark-text-in-component-template\" title=\"Mark text in component template - Prepare component for translation | Angular\">標記要翻譯的文字</a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kib4n45pfzp2x4a6t7i0uhjr\">除非你的專案依賴先前已用舊版 ID 建立的翻譯，否則請將此選項設定為 <code>false</code>。預設值為 <code>true</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgnoe5t732iquxyhlylic6a4k\">Ivy 之前版本的訊息提取工具為所提取的訊息 id 建立了多種舊格式。這些訊息格式存在一些問題，比如對空白字元的處理和對樣板原始 HTML 內部訊息的依賴。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0119v2br7ddajw4cox9nnzkm\">新的訊息格式對空白字元的改動更寬容，在所有翻譯檔案格式中都相同，並且可以直接透過呼叫 <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> 來建立。這允許應用程式程式碼中的 <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> 訊息使用與元件樣板中 <code>i18n</code> 訊息完全相同的 id。</p>\n<h3 id=\"enableresourceinlining\"><code>enableResourceInlining</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#enableresourceinlining\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8237tezv5w1x06yrunjifwb4r\">當為 <code>true</code> 時，將所有 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器中的 <code>templateUrl</code> 和 <code>styleUrls</code> 屬性替換為 <code>template</code> 和 <code>styles</code> 屬性中的行內內容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95f55cce5f188s8of98n5suz6\">啟用後，<code>ngc</code> 的 <code>.js</code> 輸出不會包含任何延遲載入的樣板或樣式 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czf1h33697lajlfqtybp5i136\">對於使用 Angular CLI 建立的庫專案，dev 設定下預設為 <code>true</code>。</p>\n<p><a id=\"enablelegacytemplate\"></a></p>\n<h3 id=\"enablelegacytemplate\"><code>enableLegacyTemplate</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#enablelegacytemplate\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"esmut60qdlqx3gn4hmfhdf3lo\">如果為 <code>true</code>，則把 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 替換為以棄用的 <code>&lt;template&gt;</code> 元素。預設值為 <code>false</code>。某些第三方 Angular 函式庫可能需要它。</p>\n<h3 id=\"flatmoduleid\"><code>flatModuleId</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#flatmoduleid\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qed3c1ck47lsaq8ohngpe6id\">用於匯入扁平模組的模組 ID（當 <code>flatModuleOutFile</code> 為 <code>true</code> 時）。從扁平模組中匯入符號時，樣板編譯器建立的引用將使用該模組的名稱。如果 <code>flatModuleOutFile</code> 為 <code>false</code> 則忽略。</p>\n<h3 id=\"flatmoduleoutfile\"><code>flatModuleOutFile</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#flatmoduleoutfile\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ersz3skwx1r9m1htlljrh21hd\">為 <code>true</code> 時，將生成指定檔案名和相應扁平模組元資料的扁平模組索引。用於建立像 <code>@angular/core</code> 和 <code>@angular/common</code> 這樣打包的扁平模組。使用此選項時，函式庫的 <code>package.json</code> 應引用所建立的扁平模組索引而不是函式庫的索引檔案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2622895gt0zusjibkpk8f68hh\">僅生成一個包含從函式庫索引匯出的所有符號所需元資料的 \n<code>.metadata.json</code> 檔案。 在建立的 \n<code>.ngfactory.js</code> 檔案中，使用扁平的模組索引來匯入符號。這些符號包括來自函式庫索引的公共 API 和被遮蔽的內部符號。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13dn9c31na9o0h9qahe9u34b6\">預設情況下，假定在 \n<code>files</code> 欄位中提供的 \n<code>.ts</code> 檔案是函式庫索引。 如果指定了多個 \n<code>.ts</code> 檔案，則使用 \n<code>libraryIndex</code> 來選擇要使用的檔案。 如果提供了多個沒有 \n<code>libraryIndex</code> 的 \n<code>.ts</code> 檔案，則會產生錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pqx3t9vd7nk0xsi4zxg1n1f0\">使用指定的 <code>flatModuleOutFile</code> 名在與函式庫索引 <code>.d.ts</code> 檔案相同的位置建立扁平模組索引 <code>.d.ts</code> 和 <code>.js</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ajicwuxuu8i08erbbdecufqv\">比如，如果一個函式庫使用 <code>public_api.ts</code> 檔案作為模組的函式庫索引，則 <code>tsconfig.json</code> 的 <code>files</code> 欄位就是 <code>[\"public_api.ts\"]</code>。然後，比如把 <code>flatModuleOutFile</code> 選項設定為 <code>\"index.js\"</code>，這將生成 <code>index.d.ts</code> 和 <code>index.metadata.json</code> 檔案。該函式庫的 <code>package.json</code> 的 <code>module</code> 欄位中就會是 <code>\"index.js\"</code>，而 <code>typings</code> 欄位將是 <code>\"index.d.ts\"</code>。</p>\n<h3 id=\"fulltemplatetypecheck\"><code>fullTemplateTypeCheck</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#fulltemplatetypecheck\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5b1uz8k7vt5cjfdrbn15c15fh\">為 <code>true</code>（推薦）時，會啟用樣板編譯器的<a href=\"guide/aot-compiler#binding-expression-validation\">繫結表示式驗證</a>階段。該階段會使用 TypeScript 來驗證繫結表示式。欲知詳情，參閱<a href=\"guide/template-typecheck\">樣板型別檢查</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4oqx4d52kn4bg6smr9fcd39to\">預設為 \n<code>false</code>，但在使用 Angular CLI 建立專案時，在建立的工作區設定中設定為 \n<code>true</code>。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24azm4drbvmx01iy84iqhnbqx\"><code>fullTemplateTypeCheck</code> 選項已經在 Angular 13 中棄用，改為使用 <code>strictTemplates</code> 家族的編譯器選項。</p>\n</div>\n<h3 id=\"generatecodeforlibraries\"><code>generateCodeForLibraries</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#generatecodeforlibraries\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv1bix628u7uqoyighoc5e5zr\">如果為 <code>true</code>，就會為 <code>.d.ts</code> 和相應的 <code>.metadata.json</code> 建立工廠檔案（<code>.ngfactory.js</code> 和 <code>.ngstyle.js</code>）。預設值為 <code>true</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djwdteuobyjffg7naytlqmc7i\">如果為 <code>false</code>，則僅為 <code>.ts</code> 檔案生成工廠檔案。當要使用工廠摘要（summary）時，請這麼設定。</p>\n<h3 id=\"preservewhitespaces\"><code>preserveWhitespaces</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#preservewhitespaces\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vib5feu4u0luyzdtwvhtlm7d\">如果為 <code>false</code>（預設值），則從編譯的樣板中刪除空白文字節點，這將生成較小的模板工廠模組。設定為 <code>true</code> 以保留空白文字節點。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38ro811tec07eyl2hmosu5hmc\">當使用水合時，建議使用 <code>preserveWhitespaces: false</code>，這是預設值。如果你透過把 <code>preserveWhitespaces: true</code> 新增到 tsconfig 中啟用了『保留空白字元』功能，水合時就可能出問題。因為這還不是一個收到全面支援的屬性。要確保伺服器端和用戶端的 tsconfig 檔案中，此項設定是一致的。欲知詳情，參見<a href=\"guide/hydration#preserve-whitespaces\">水合指南</a>。</p>\n</div>\n<h3 id=\"skipmetadataemit\"><code>skipMetadataEmit</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#skipmetadataemit\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8inkfbm5cujhciwz9hpvzmrzp\">為 <code>true</code> 時，不生成 <code>.metadata.json</code> 檔案。預設值為 <code>false</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ah6g5337fbpbcf1ilicy8bxb3\"><code>.metadata.json</code> 檔案包含樣板編譯器從 <code>.ts</code> 檔案中獲得的訊息，該訊息未包含在 TypeScript 編譯器生成的 <code>.d.ts</code> 檔案中。該訊息包括註解的內容（比如元件的樣板）等，TypeScript 會將該註解的內容傳送到 <code>.js</code> 檔案中，但不會傳送到 <code>.d.ts</code> 檔案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2mjs97frgqnyrtrn61qkcsgq\">你可以在使用工廠摘要（summary）中將其設定為 <code>true</code>，因為工廠摘要中包括 <code>.metadata.json</code> 檔案中訊息的副本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ehe9d0eklfmhuzkop03egnso\">如果要使用 TypeScript 的 <code>--outFile</code> 選項，則設定為 <code>true</code>，因為元資料檔案對於這種 TypeScript 輸出風格無效。但是，Angular 社群不建議將 <code>--outFile</code> 和 Angular 一起使用。請使用打套件程式，比如 <a href=\"https://webpack.js.org\">webpack</a>。</p>\n<h3 id=\"skiptemplatecodegen\"><code>skipTemplateCodegen</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#skiptemplatecodegen\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n1gd8adlfg75vdqui13vtru7\">為 <code>true</code> 時，不生成 <code>.ngfactory.js</code> 和 <code>.ngstyle.js</code> 檔案。這將關閉大多數樣板編譯器，並停用樣板診斷報告。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42fwxs6fydzg4mlkhgrbhn20j\">可用於指示樣板編譯器生成 <code>.metadata.json</code> 檔案，以使用 <code>npm</code> 軟體套件進行分發，同時避免產生無法分發至 <code>npm</code> 的 <code>.ngfactory.js</code> 和 <code>.ngstyle.js</code> 檔案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czf1h33697lajlfqtybp5i136\">對於使用 Angular CLI 建立的庫專案，dev 設定下預設為 <code>true</code>。</p>\n<h3 id=\"strictmetadataemit\"><code>strictMetadataEmit</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#strictmetadataemit\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gd2xrtt1lricoldd90x06zfq\">為 <code>true</code> 時，如果 <code>\"skipMetadataEmit\"</code> 為 <code>false</code> 則向 <code>.metadata.json</code> 檔案中報告錯誤。預設值為 <code>false</code>。只在 <code>\"skipMetadataEmit\"</code> 為 <code>false</code> 且 <code>\"skipTemplateCodegen\"</code> 為 <code>true</code> 時使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7rfotgwzuygndsvyuqygyi8p\">該選項是為了驗證為生成 <code>npm</code> 套件而產生的 <code>.metadata.json</code> 檔案。這種驗證是嚴格的，並且會報告元資料中的錯誤，以免當樣板編譯器使用它時再出錯。你可以透過在某個匯出符號的註解文件中使用 <code>@dynamic</code> 註解來暫時防止（suppress）該選項報告錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6pg1tuubtq7joy6w73zxv77r\"><code>.metadata.json</code> 檔案即使包含錯誤也是有效的。如果這些元資料用來確定註解的內容，則樣板編譯器會報告這些錯誤。元資料收集器無法預測哪些符號是為了在註解中使用而設計的。它會先在元資料中為匯出的符號中包含錯誤節點。然後，如果使用了這些符號，則樣板編譯器可以使用這些錯誤節點來報告錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"862a4n6fr3lbrhf0pdg6oaj22\">如果函式庫的客戶程式碼打算在註解中使用某個符號，則樣板編譯器通常不會直接報錯。而是在客戶方實際用到該符號之後才報錯。此選項允許你在函式庫的建立階段就檢測到這些錯誤，比如用於生成 Angular 函式庫本身時。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czf1h33697lajlfqtybp5i136\">對於使用 Angular CLI 建立的庫專案，dev 設定下預設為 <code>true</code>。</p>\n<h3 id=\"strictinjectionparameters\"><code>strictInjectionParameters</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#strictinjectionparameters\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nxl5p9afz45fzh320f0o467g\">如果為 <code>true</code>，則報告所提供的引數的錯誤，無法確定該引數的注入型別。如果為 <code>false</code>，則標記為 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 但其型別無法解析的類別的建構式函式引數會產生警告。\n推薦的值為 <code>true</code>，但預設值為 <code>false</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76z379h8ogtlr230hqr0e2b55\">在使用 Angular CLI 建立專案時，在建立的工作區設定中設定為\n<code>true</code>。</p>\n<h3 id=\"stricttemplates\"><code>strictTemplates</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#stricttemplates\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tas24x1exhueg4fw03uftpyf\">如果為 <code>true</code>，則啟用<a href=\"guide/template-typecheck#strict-mode\">嚴格的樣板型別檢查</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42qi9dgxeesrlyop2tp32ayqf\">這些嚴格性標誌允許你啟用和停用特定型別的嚴格樣板型別檢查。參閱<a href=\"guide/template-typecheck#troubleshooting-template-errors\">排除樣板錯誤</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76z379h8ogtlr230hqr0e2b55\">在使用 Angular CLI 建立專案時，在建立的工作區設定中設定為\n<code>true</code>。</p>\n<h3 id=\"trace\"><code>trace</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#trace\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3z0132zvc6ui9gh1dbgtlp5c0\">如果為 <code>true</code>，則在編譯樣板時輸出額外的訊息。預設值為 <code>false</code>。</p>\n<p><a id=\"cli-options\"></a></p>\n<h2 id=\"command-line-options\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9s6g9kq7zpudgyk54a675maz3\">指令行選項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#command-line-options\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"doqvlk3ud8scw38qscu9oglmo\">大多數時候你都會使用 Angular CLI 間接與 Angular 編譯器互動。當除錯某些問題時，你可能會發現直接呼叫 Angular 編譯器很有用。你可以使用 <code>@angular/compiler-cli</code> npm 套件提供的 <code>ngc</code> 指令從命令行呼叫編譯器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avmgtvtpyh7dc2sws3k56sy84\"><code>ngc</code> 指令只是 TypeScript 的 <code>tsc</code> 編譯器指令的套件裝器，主要透過<a href=\"guide/angular-compiler-options#angular-compiler-options\">前面部分</a>講過的 <code>tsconfig.json</code> 設定選項進行設定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akfejyzlvez8a4nal1hiqtq4v\">除這個設定檔案之外，你還可以使用一些 <a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\"><code>tsc</code> 指令行選項</a>來設定 <code>ngc</code>。</p>\n<!-- links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Tue Oct 24 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/aot-compiler\n - guide/deprecations\n - guide/file-structure\n - guide/language-service\n - guide/strict-mode\n - guide/typescript-configuration\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Injectable\n - api/core/ng-template\n - api/localize/init/$localize\n - api/upgrade/static\n - guide/angular-compiler-options#angular-compiler-options\n - guide/angular-compiler-options#annotateforclosurecompiler\n - guide/angular-compiler-options#annotationsas\n - guide/angular-compiler-options#command-line-options\n - guide/angular-compiler-options#compilationmode\n - guide/angular-compiler-options#configuration-inheritance-with-extends\n - guide/angular-compiler-options#disableexpressionlowering\n - guide/angular-compiler-options#disabletypescriptversioncheck\n - guide/angular-compiler-options#enablei18nlegacymessageidformat\n - guide/angular-compiler-options#enablelegacytemplate\n - guide/angular-compiler-options#enableresourceinlining\n - guide/angular-compiler-options#flatmoduleid\n - guide/angular-compiler-options#flatmoduleoutfile\n - guide/angular-compiler-options#fulltemplatetypecheck\n - guide/angular-compiler-options#generatecodeforlibraries\n - guide/angular-compiler-options#preservewhitespaces\n - guide/angular-compiler-options#skipmetadataemit\n - guide/angular-compiler-options#skiptemplatecodegen\n - guide/angular-compiler-options#strictinjectionparameters\n - guide/angular-compiler-options#strictmetadataemit\n - guide/angular-compiler-options#stricttemplates\n - guide/angular-compiler-options#template-options\n - guide/angular-compiler-options#trace\n - guide/aot-compiler\n - guide/aot-compiler#binding-expression-validation\n - guide/aot-compiler#metadata-rewriting\n - guide/hydration#preserve-whitespaces\n - guide/i18n-common-prepare#mark-text-in-component-template\n - guide/template-typecheck\n - guide/template-typecheck#strict-mode\n - guide/template-typecheck#troubleshooting-template-errors\n - guide/typescript-configuration\n - https://github.com/angular/tsickle\n - https://github.com/google/closure-compiler\n - https://jsdoc.app\n - https://webpack.js.org\n - https://www.typescriptlang.org/docs/handbook/compiler-options.html\n - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n-->"}
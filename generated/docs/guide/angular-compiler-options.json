{"id":"guide/angular-compiler-options","title":"Angular 编译器选项","contents":"<div class=\"content\">\n  <h1 id=\"angular-compiler-options\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xilqqmq59uyuxok90y18qh86\">Angular 编译器选项<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#angular-compiler-options\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74hmlom0mctsk5stez50hmw6y\">使用 <a href=\"guide/aot-compiler\">预先（AoT）编译</a> 时，可以通过在 <a href=\"guide/typescript-configuration\">TypeScript 配置文件中</a>指定<em>模板</em>编译器选项来控制如何编译应用程序。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lyqhharg1okkbjg37eh5d19q\">模板选项对象 <code>angularCompilerOptions</code> 和为 TypeScript 编译器提供标准选项的 <code>compilerOptions</code> 对象是兄弟。</p>\n<code-example header=\"tsconfig.json\" path=\"angular-compiler-options/tsconfig.json\" region=\"angular-compiler-options\">\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    // ...\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    // ...\n    \"disableTypeScriptVersionCheck\": true\n  }\n}\n\n</code-example>\n<p><a id=\"tsconfig-extends\"></a></p>\n<h2 id=\"configuration-inheritance-with-extends\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3oyjd2c0ppw4igy474adczj30\">用 <code>extends</code> 语法配置继承方式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#configuration-inheritance-with-extends\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ehkqx7p5g030v8vwso9qi16r\">像 TypeScript 编译器一样，Angular 的 AOT 编译器也支持对 TypeScript 配置文件中的 <code>angularCompilerOptions</code> 进行 <code>extends</code>。<code>extends</code> 属性位于顶层，和 <code>compilerOptions</code> 和 <code>angularCompilerOptions</code> 平级。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ongwx6r7mnx878tfpja7n1s\">使用 <code>extends</code> 属性，TypeScript 配置可以从另一个文件中继承设置。首先从基础文件中加载配置项，然后被继承自它的配置文件中的配置项覆写。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4reizjf10jcs1ftw359bt1ndz\">比如：</p>\n<code-example header=\"tsconfig.app.json\" path=\"angular-compiler-options/tsconfig.app.json\" region=\"angular-compiler-options-app\">\n{\n    \"extends\": \"./tsconfig.json\",\n    \"compilerOptions\": {\n      \"outDir\": \"./out-tsc/app\",\n    // ...\n    \"angularCompilerOptions\": {\n      \"strictTemplates\": true,\n      \"preserveWhitespaces\": true,\n      // ...\n      \"disableTypeScriptVersionCheck\": true\n    }\n  }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rzwb5k44vdjcyb0z1pq2czlw\">欲知详情，参阅 <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript 手册</a>。</p>\n<h2 id=\"template-options\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7abskwlirg0chi56a9npy553n\">模板选项<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#template-options\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20ibuyeefl9plk3o0qckp1ayi\">以下选项可用于配置 AoT 模板编译器。</p>\n<h3 id=\"annotationsas\"><code>annotationsAs</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#annotationsas\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exvxw92qs2kunebehab113gg0\">修改 Angular 专有注解的生成方式，以改善摇树优化。非 Angular 注解不受影响。可选值为 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> fields</code> 或 <code>decorators</code>。默认值为 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> fields</code>。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctpp22uxwoz3gz8nt4zstxtl\">默认情况下，编译器会用类中的静态字段替换装饰器，这允许像 <a href=\"https://github.com/google/closure-compiler\">Closure 编译器</a>这样的高级摇树器删除未使用的类。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwbsl733jf0zsgauwj3l310wc\"><code>decorators</code> 值会将装饰器保留在原处，这将使编译速度更快。TypeScript 会生成对辅助器 <code>__decorate</code> 的调用。使用 <code>--emitDecoratorMetadata</code> 以支持运行时反射。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pz2oe5nc2s86vssdz1a85rxt\"><strong>注意</strong>：<br>\n这样生成的代码将无法被正确地摇树优化。</p>\n</div>\n</li>\n</ul>\n<h3 id=\"annotateforclosurecompiler\"><code>annotateForClosureCompiler</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#annotateforclosurecompiler\"><i class=\"material-icons\">link</i></a></h3>\n<!-- vale Angular.Angular_Spelling = NO -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fpu3e1bmdc5ut87r3lv38hy\">如果为 <code>true</code>，则使用 <a href=\"https://github.com/angular/tsickle\">Tsickle</a> 来用 <a href=\"https://jsdoc.app\">JSDoc</a> 对生成的 JavaScript 代码进行注解，这些注释是供 <a href=\"https://github.com/google/closure-compiler\">Closure 编译器</a> 使用的。默认值为 <code>false</code>。</p>\n<!-- vale Angular.Angular_Spelling = YES -->\n<h3 id=\"compilationmode\"><code>compilationMode</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#compilationmode\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49iqj4dhf4x9jnl3xpz8gv2dv\">指定要使用的编译模式。可以使用以下模式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fe6whjbmdtslgtp1har69ebd\">模式</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>'full'</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qxm7jhh4f70k6d9gbipt3vo\">根据当前使用的 Angular 版本生成完全预先编译的代码。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>'partial'</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o9i98fua0ao22wd6j2tx6lr6\">生成稳定的代码，但是是适合发布库的中间形式。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egxzpvhjmh7tbgnzs9e3np4hs\">默认值为 <code>'full'</code>。</p>\n<h3 id=\"disableexpressionlowering\"><code>disableExpressionLowering</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#disableexpressionlowering\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lcd3oxekjmxyr14k66tdbr15\">如果为 <code>true</code>（默认值），则转换在注解中使用或允许使用的代码，以允许从模板的工厂模块导入代码。欲知详情，参阅<a href=\"guide/aot-compiler#metadata-rewriting\">元数据重写</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26d6enm82ew6z3oc06q96gr1p\">如果为 <code>false</code>，则禁用此重写，你必须手动进行重写。</p>\n<h3 id=\"disabletypescriptversioncheck\"><code>disableTypeScriptVersionCheck</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#disabletypescriptversioncheck\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wzfg516maa7ykv5l7kqjymq5\">如果为 <code>true</code>，则在使用不受支持的 TypeScript 版本时，编译器不会检查 TypeScript 版本，并且不会报错。不建议使用，因为不受支持的 TypeScript 版本可能具有未定义的行为。默认值为 <code>false</code>。</p>\n<h3 id=\"enablei18nlegacymessageidformat\"><code>enableI18nLegacyMessageIdFormat</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#enablei18nlegacymessageidformat\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wwquotwf0dy3cktwy0hnsgg7\">指示 Angular 模板编译器为模板中用 <code>i18n</code> 属性标出的消息创建旧版 ID。关于为本地化而对消息进行标记的更多信息，参阅<a href=\"guide/i18n-common-prepare#mark-text-in-component-template\" title=\"Mark text in component template - Prepare component for translation | Angular\">标记要翻译的文本</a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kib4n45pfzp2x4a6t7i0uhjr\">除非你的项目依赖先前已用旧版 ID 创建的翻译，否则请将此选项设置为 <code>false</code>。默认值为 <code>true</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgnoe5t732iquxyhlylic6a4k\">Ivy 之前版本的消息提取工具为所提取的消息 id 创建了多种旧格式。这些消息格式存在一些问题，比如对空白字符的处理和对模板原始 HTML 内部信息的依赖。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0119v2br7ddajw4cox9nnzkm\">新的消息格式对空白字符的改动更宽容，在所有翻译文件格式中都相同，并且可以直接通过调用 <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> 来创建。这允许应用程序代码中的 <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> 消息使用与组件模板中 <code>i18n</code> 消息完全相同的 id。</p>\n<h3 id=\"enableresourceinlining\"><code>enableResourceInlining</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#enableresourceinlining\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8237tezv5w1x06yrunjifwb4r\">当为 <code>true</code> 时，将所有 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器中的 <code>templateUrl</code> 和 <code>styleUrls</code> 属性替换为 <code>template</code> 和 <code>styles</code> 属性中的内联内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95f55cce5f188s8of98n5suz6\">启用后，<code>ngc</code> 的 <code>.js</code> 输出不会包含任何惰性加载的模板或样式 URL。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czf1h33697lajlfqtybp5i136\">对于使用 Angular CLI 创建的库项目，dev 配置下默认为 <code>true</code>。</p>\n<p><a id=\"enablelegacytemplate\"></a></p>\n<h3 id=\"enablelegacytemplate\"><code>enableLegacyTemplate</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#enablelegacytemplate\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"esmut60qdlqx3gn4hmfhdf3lo\">如果为 <code>true</code>，则把 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 替换为以弃用的 <code>&lt;template&gt;</code> 元素。默认值为 <code>false</code>。某些第三方 Angular 库可能需要它。</p>\n<h3 id=\"flatmoduleid\"><code>flatModuleId</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#flatmoduleid\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qed3c1ck47lsaq8ohngpe6id\">用于导入扁平模块的模块 ID（当 <code>flatModuleOutFile</code> 为 <code>true</code> 时）。从扁平模块中导入符号时，模板编译器创建的引用将使用该模块的名称。如果 <code>flatModuleOutFile</code> 为 <code>false</code> 则忽略。</p>\n<h3 id=\"flatmoduleoutfile\"><code>flatModuleOutFile</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#flatmoduleoutfile\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ersz3skwx1r9m1htlljrh21hd\">为 <code>true</code> 时，将生成指定文件名和相应扁平模块元数据的扁平模块索引。用于创建像 <code>@angular/core</code> 和 <code>@angular/common</code> 这样打包的扁平模块。使用此选项时，库的 <code>package.json</code> 应引用所创建的扁平模块索引而不是库的索引文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2622895gt0zusjibkpk8f68hh\">仅生成一个包含从库索引导出的所有符号所需元数据的 \n<code>.metadata.json</code> 文件。 在创建的 \n<code>.ngfactory.js</code> 文件中，使用扁平的模块索引来导入符号。这些符号包括来自库索引的公共 API 和被遮蔽的内部符号。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13dn9c31na9o0h9qahe9u34b6\">默认情况下，假定在 \n<code>files</code> 字段中提供的 \n<code>.ts</code> 文件是库索引。 如果指定了多个 \n<code>.ts</code> 文件，则使用 \n<code>libraryIndex</code> 来选择要使用的文件。 如果提供了多个没有 \n<code>libraryIndex</code> 的 \n<code>.ts</code> 文件，则会产生错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pqx3t9vd7nk0xsi4zxg1n1f0\">使用指定的 <code>flatModuleOutFile</code> 名在与库索引 <code>.d.ts</code> 文件相同的位置创建扁平模块索引 <code>.d.ts</code> 和 <code>.js</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ajicwuxuu8i08erbbdecufqv\">比如，如果一个库使用 <code>public_api.ts</code> 文件作为模块的库索引，则 <code>tsconfig.json</code> 的 <code>files</code> 字段就是 <code>[\"public_api.ts\"]</code>。然后，比如把 <code>flatModuleOutFile</code> 选项设置为 <code>\"index.js\"</code>，这将生成 <code>index.d.ts</code> 和 <code>index.metadata.json</code> 文件。该库的 <code>package.json</code> 的 <code>module</code> 字段中就会是 <code>\"index.js\"</code>，而 <code>typings</code> 字段将是 <code>\"index.d.ts\"</code>。</p>\n<h3 id=\"fulltemplatetypecheck\"><code>fullTemplateTypeCheck</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#fulltemplatetypecheck\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5b1uz8k7vt5cjfdrbn15c15fh\">为 <code>true</code>（推荐）时，会启用模板编译器的<a href=\"guide/aot-compiler#binding-expression-validation\">绑定表达式验证</a>阶段。该阶段会使用 TypeScript 来验证绑定表达式。欲知详情，参阅<a href=\"guide/template-typecheck\">模板类型检查</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4oqx4d52kn4bg6smr9fcd39to\">默认为 \n<code>false</code>，但在使用 Angular CLI 创建项目时，在创建的工作区配置中设置为 \n<code>true</code>。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24azm4drbvmx01iy84iqhnbqx\"><code>fullTemplateTypeCheck</code> 选项已经在 Angular 13 中弃用，改为使用 <code>strictTemplates</code> 家族的编译器选项。</p>\n</div>\n<h3 id=\"generatecodeforlibraries\"><code>generateCodeForLibraries</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#generatecodeforlibraries\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv1bix628u7uqoyighoc5e5zr\">如果为 <code>true</code>，就会为 <code>.d.ts</code> 和相应的 <code>.metadata.json</code> 创建工厂文件（<code>.ngfactory.js</code> 和 <code>.ngstyle.js</code>）。默认值为 <code>true</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djwdteuobyjffg7naytlqmc7i\">如果为 <code>false</code>，则仅为 <code>.ts</code> 文件生成工厂文件。当要使用工厂摘要（summary）时，请这么设置。</p>\n<h3 id=\"preservewhitespaces\"><code>preserveWhitespaces</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#preservewhitespaces\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vib5feu4u0luyzdtwvhtlm7d\">如果为 <code>false</code>（默认值），则从编译的模板中删除空白文本节点，这将生成较小的模板工厂模块。设置为 <code>true</code> 以保留空白文本节点。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38ro811tec07eyl2hmosu5hmc\">当使用水合时，建议使用 <code>preserveWhitespaces: false</code>，这是默认值。如果你通过把 <code>preserveWhitespaces: true</code> 添加到 tsconfig 中启用了“保留空白字符”功能，水合时就可能出问题。因为这还不是一个收到全面支持的特性。要确保服务端和客户端的 tsconfig 文件中，此项设置是一致的。欲知详情，参见<a href=\"guide/hydration#preserve-whitespaces\">水合指南</a>。</p>\n</div>\n<h3 id=\"skipmetadataemit\"><code>skipMetadataEmit</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#skipmetadataemit\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8inkfbm5cujhciwz9hpvzmrzp\">为 <code>true</code> 时，不生成 <code>.metadata.json</code> 文件。默认值为 <code>false</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ah6g5337fbpbcf1ilicy8bxb3\"><code>.metadata.json</code> 文件包含模板编译器从 <code>.ts</code> 文件中获得的信息，该信息未包含在 TypeScript 编译器生成的 <code>.d.ts</code> 文件中。该信息包括注解的内容（比如组件的模板）等，TypeScript 会将该注解的内容发送到 <code>.js</code> 文件中，但不会发送到 <code>.d.ts</code> 文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2mjs97frgqnyrtrn61qkcsgq\">你可以在使用工厂摘要（summary）中将其设置为 <code>true</code>，因为工厂摘要中包括 <code>.metadata.json</code> 文件中信息的副本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ehe9d0eklfmhuzkop03egnso\">如果要使用 TypeScript 的 <code>--outFile</code> 选项，则设置为 <code>true</code>，因为元数据文件对于这种 TypeScript 输出风格无效。但是，Angular 社区不建议将 <code>--outFile</code> 和 Angular 一起使用。请使用打包程序，比如 <a href=\"https://webpack.js.org\">webpack</a>。</p>\n<h3 id=\"skiptemplatecodegen\"><code>skipTemplateCodegen</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#skiptemplatecodegen\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n1gd8adlfg75vdqui13vtru7\">为 <code>true</code> 时，不生成 <code>.ngfactory.js</code> 和 <code>.ngstyle.js</code> 文件。这将关闭大多数模板编译器，并禁用模板诊断报告。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42fwxs6fydzg4mlkhgrbhn20j\">可用于指示模板编译器生成 <code>.metadata.json</code> 文件，以使用 <code>npm</code> 软件包进行分发，同时避免产生无法分发至 <code>npm</code> 的 <code>.ngfactory.js</code> 和 <code>.ngstyle.js</code> 文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czf1h33697lajlfqtybp5i136\">对于使用 Angular CLI 创建的库项目，dev 配置下默认为 <code>true</code>。</p>\n<h3 id=\"strictmetadataemit\"><code>strictMetadataEmit</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#strictmetadataemit\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gd2xrtt1lricoldd90x06zfq\">为 <code>true</code> 时，如果 <code>\"skipMetadataEmit\"</code> 为 <code>false</code> 则向 <code>.metadata.json</code> 文件中报告错误。默认值为 <code>false</code>。只在 <code>\"skipMetadataEmit\"</code> 为 <code>false</code> 且 <code>\"skipTemplateCodegen\"</code> 为 <code>true</code> 时使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7rfotgwzuygndsvyuqygyi8p\">该选项是为了验证为生成 <code>npm</code> 包而产生的 <code>.metadata.json</code> 文件。这种验证是严格的，并且会报告元数据中的错误，以免当模板编译器使用它时再出错。你可以通过在某个导出符号的注释文档中使用 <code>@dynamic</code> 注解来暂时防止（suppress）该选项报告错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6pg1tuubtq7joy6w73zxv77r\"><code>.metadata.json</code> 文件即使包含错误也是有效的。如果这些元数据用来确定注解的内容，则模板编译器会报告这些错误。元数据收集器无法预测哪些符号是为了在注解中使用而设计的。它会先在元数据中为导出的符号中包含错误节点。然后，如果使用了这些符号，则模板编译器可以使用这些错误节点来报告错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"862a4n6fr3lbrhf0pdg6oaj22\">如果库的客户代码打算在注解中使用某个符号，则模板编译器通常不会直接报错。而是在客户方实际用到该符号之后才报错。此选项允许你在库的构建阶段就检测到这些错误，比如用于生成 Angular 库本身时。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czf1h33697lajlfqtybp5i136\">对于使用 Angular CLI 创建的库项目，dev 配置下默认为 <code>true</code>。</p>\n<h3 id=\"strictinjectionparameters\"><code>strictInjectionParameters</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#strictinjectionparameters\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nxl5p9afz45fzh320f0o467g\">如果为 <code>true</code>，则报告所提供的参数的错误，无法确定该参数的注入类型。如果为 <code>false</code>，则标记为 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 但其类型无法解析的类的构造函数参数会产生警告。\n推荐的值为 <code>true</code>，但默认值为 <code>false</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76z379h8ogtlr230hqr0e2b55\">在使用 Angular CLI 创建项目时，在创建的工作区配置中设置为\n<code>true</code>。</p>\n<h3 id=\"stricttemplates\"><code>strictTemplates</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#stricttemplates\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tas24x1exhueg4fw03uftpyf\">如果为 <code>true</code>，则启用<a href=\"guide/template-typecheck#strict-mode\">严格的模板类型检查</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42qi9dgxeesrlyop2tp32ayqf\">这些严格性标志允许你启用和禁用特定类型的严格模板类型检查。参阅<a href=\"guide/template-typecheck#troubleshooting-template-errors\">排除模板错误</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76z379h8ogtlr230hqr0e2b55\">在使用 Angular CLI 创建项目时，在创建的工作区配置中设置为\n<code>true</code>。</p>\n<h3 id=\"trace\"><code>trace</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#trace\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3z0132zvc6ui9gh1dbgtlp5c0\">如果为 <code>true</code>，则在编译模板时输出额外的信息。默认值为 <code>false</code>。</p>\n<p><a id=\"cli-options\"></a></p>\n<h2 id=\"command-line-options\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9s6g9kq7zpudgyk54a675maz3\">命令行选项<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#command-line-options\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"doqvlk3ud8scw38qscu9oglmo\">大多数时候你都会使用 Angular CLI 间接与 Angular 编译器交互。当调试某些问题时，你可能会发现直接调用 Angular 编译器很有用。你可以使用 <code>@angular/compiler-cli</code> npm 包提供的 <code>ngc</code> 命令从命令行调用编译器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avmgtvtpyh7dc2sws3k56sy84\"><code>ngc</code> 命令只是 TypeScript 的 <code>tsc</code> 编译器命令的包装器，主要通过<a href=\"guide/angular-compiler-options#angular-compiler-options\">前面部分</a>讲过的 <code>tsconfig.json</code> 配置选项进行配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akfejyzlvez8a4nal1hiqtq4v\">除这个配置文件之外，你还可以使用一些 <a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\"><code>tsc</code> 命令行选项</a>来配置 <code>ngc</code>。</p>\n<!-- links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Tue Oct 24 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/aot-compiler\n - guide/deprecations\n - guide/file-structure\n - guide/language-service\n - guide/strict-mode\n - guide/typescript-configuration\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Injectable\n - api/core/ng-template\n - api/localize/init/$localize\n - api/upgrade/static\n - guide/angular-compiler-options#angular-compiler-options\n - guide/angular-compiler-options#annotateforclosurecompiler\n - guide/angular-compiler-options#annotationsas\n - guide/angular-compiler-options#command-line-options\n - guide/angular-compiler-options#compilationmode\n - guide/angular-compiler-options#configuration-inheritance-with-extends\n - guide/angular-compiler-options#disableexpressionlowering\n - guide/angular-compiler-options#disabletypescriptversioncheck\n - guide/angular-compiler-options#enablei18nlegacymessageidformat\n - guide/angular-compiler-options#enablelegacytemplate\n - guide/angular-compiler-options#enableresourceinlining\n - guide/angular-compiler-options#flatmoduleid\n - guide/angular-compiler-options#flatmoduleoutfile\n - guide/angular-compiler-options#fulltemplatetypecheck\n - guide/angular-compiler-options#generatecodeforlibraries\n - guide/angular-compiler-options#preservewhitespaces\n - guide/angular-compiler-options#skipmetadataemit\n - guide/angular-compiler-options#skiptemplatecodegen\n - guide/angular-compiler-options#strictinjectionparameters\n - guide/angular-compiler-options#strictmetadataemit\n - guide/angular-compiler-options#stricttemplates\n - guide/angular-compiler-options#template-options\n - guide/angular-compiler-options#trace\n - guide/aot-compiler\n - guide/aot-compiler#binding-expression-validation\n - guide/aot-compiler#metadata-rewriting\n - guide/hydration#preserve-whitespaces\n - guide/i18n-common-prepare#mark-text-in-component-template\n - guide/template-typecheck\n - guide/template-typecheck#strict-mode\n - guide/template-typecheck#troubleshooting-template-errors\n - guide/typescript-configuration\n - https://github.com/angular/tsickle\n - https://github.com/google/closure-compiler\n - https://jsdoc.app\n - https://webpack.js.org\n - https://www.typescriptlang.org/docs/handbook/compiler-options.html\n - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n-->"}
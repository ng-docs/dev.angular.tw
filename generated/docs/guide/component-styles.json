{"id":"guide/component-styles","title":"组件样式","contents":"<div class=\"content\">\n  <h1 id=\"component-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs2kqpz0x7tkzgkaoc869x1hd\">组件样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#component-styles\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91rzc4xzgu1n613c8qxuulkx3\">Angular 应用使用标准的 CSS 来设置样式。这意味着你可以把关于 CSS 的那些知识和技能直接用于 Angular 程序中，比如：样式表、选择器、规则以及媒体查询等。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2bo8b6v8bgadb25ms3f5wnmyf\">另外，Angular 还能把<em>组件样式</em>捆绑在组件上，以实现比标准样式表更加模块化的设计。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agwvm6ozakvraqhwg8zg6ofdy\">本章将会讲解如何加载和使用这些<em>组件样式</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"as4gj76gqug28zyju9fa38px4\">可以运行<live-example></live-example>，在 Stackblitz 中试用并下载本页的代码。</p>\n<h2 id=\"using-component-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bl1xj50auu1j6kg7jqg8n478\">使用组件样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#using-component-styles\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"293ey7vozc3djbj3v80xa9und\">对你编写的每个 Angular 组件来说，除了定义 HTML 模板之外，还要定义用于模板的 CSS 样式、 指定任意的选择器、规则和媒体查询。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kg438sv2pisa7oq8bityflqy\">实现方式之一，是在组件的元数据中设置 <code>styles</code> 属性。<code>styles</code> 属性可以接受一个包含 CSS 代码的字符串数组。通常你只给它一个字符串就行了，如同下例：</p>\n<code-example header=\"src/app/hero-app.component.ts\" path=\"component-styles/src/app/hero-app.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=\"hero\"&gt;&lt;/app-hero-main&gt;\n  `,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n<h2 id=\"component-styling-best-practices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yev519lqp6rvzdr3u6fr7ai6\">组件样式最佳实践<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#component-styling-best-practices\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2ky7z8ccdik6az45no3g1b1\">有关 Angular 如何将样式范围限定为特定组件的信息，参阅<a href=\"guide/view-encapsulation\">视图封装</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5mcij7qu0f4lqv1y4o9fyt99\">你应该将组件的样式视为该组件的私有实现细节。使用通用组件时，你不应该覆盖组件的样式，就像访问 TypeScript 类的私有成员一样。虽然 Angular 的默认样式封装可防止组件样式影响其他组件，但全局样式会影响页面上的所有组件。这包括 <code>::ng-deep</code>，它会将组件样式提升为全局样式。</p>\n<h3 id=\"authoring-a-component-to-support-customization\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bga6954xpu1kc9i6hneqjzghg\">创作支持自定义样式的组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#authoring-a-component-to-support-customization\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7q5dt3nudgkrp0jwhxw7ouvqr\">作为组件作者，你可以用四种不同的方式之一显式设计组件以接受自定义。</p>\n<h4 id=\"1-use-css-custom-properties-recommended\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"10m5c23w8qt5wkqlswpx1ghvg\">1. 使用 CSS 自定义属性（推荐）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#1-use-css-custom-properties-recommended\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"az1a1yepdhtj5kjd5hvs68gnb\">你可以通过使用 CSS 自定义属性（也称为 CSS 变量）定义其样式来为组件定义受支持的自定义 API。使用你组件的任何人都可以通过为这些属性定义值、自定义组件在渲染页面上的最终外观来使用此 API。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30org23b6im7zj7xzaz16apdc\">虽然这需要为每个自定义点定义一个自定义属性，但它创建了一个清晰的 API 契约，可以在所有样式的封装模式下工作。</p>\n<h4 id=\"2-declare-global-css-with-mixin\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edqamr5kn1y7oezqy1i9v44ya\">2.使用 <code>@mixin</code> 声明全局 CSS<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#2-declare-global-css-with-mixin\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"al85x9t6tzi4vacrri4tvar0a\">虽然 Angular 的模拟样式封装可防止样式从组件中逃逸，但它并不能防止全局 CSS 影响整个页面。虽然组件使用者应避免直接覆盖组件的 CSS 内部，但你可以通过 Sass 等 CSS 预处理器提供受支持的自定义 API。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6nyutnqaqv906ztwsl879mh6\">比如，组件可以提供一个或多个受支持的 mixin 来自定义组件外观的各个方面。虽然这种方法在其实现中使用了全局样式，但它允许组件作者通过对组件的私有 DOM 结构和 CSS 类的更改来使 mixins 保持最新。</p>\n<h4 id=\"3-customize-with-css-part\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8t8ap13lngvx2sac0vzyo0frt\">3.使用 CSS <code>::part</code> 自定义<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#3-customize-with-css-part\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6llv01cz8arqyzawopta91gve\">如果你的组件使用了 <a href=\"https://developer.mozilla.org/docs/Web/Web_Components/Using_shadow_DOM\">Shadow DOM</a>，你可以应用 <code>part</code> 属性来指定组件模板中的元素。这允许组件的使用者使用 <a href=\"https://developer.mozilla.org/docs/Web/CSS/::part\"><code>::part</code> 伪元素</a>创作针对这些特定元素的任意样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5e9zngtmj12eaqhwu1mqp6pd\">虽然这允许你限制模板中消费者可以自定义的元素，但它并不能限制哪些 CSS 属性是可自定义的。</p>\n<h4 id=\"4-provide-a-typescript-api\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enlcjv9vbrboimwp4ufpvh1uj\">4.提供 TypeScript API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#4-provide-a-typescript-api\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5e5ufiejfqrs4884xste22jal\">你可以定义一个 TypeScript API 来自定义样式，使用模板绑定来更新 CSS 类和样式。不建议这样做，因为这种样式 API 的额外 JavaScript 成本会产生比 CSS 高得多的性能成本。</p>\n<h2 id=\"special-selectors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a86cxagp25uvhy0x71rksaw16\">特殊的选择器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#special-selectors\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a42yjlbazqs6hb0b9b5tawhmd\">组件样式中有一些从影子（Shadow） DOM 样式范围领域（记录在<a href=\"https://www.w3.org\">W3C</a>的<a href=\"https://www.w3.org/TR/css-scoping-1\">CSS Scoping Module Level 1</a>中）引入的特殊<em>选择器</em>：</p>\n<h3 id=\"host\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fa9g62fzjz3yjeqt70zpzmua\">:host<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#host\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jvuow1wh5dzwntwlgjjvylqp\">每个组件都会关联一个与其组件选择器相匹配的元素。这个元素称为<em>宿主元素</em>，模板会渲染到其中。<code>:host</code> 伪类选择器可用于创建针对宿主元素自身的样式，而不是针对宿主内部的那些元素。</p>\n<code-example header=\"src/app/host-selector-example.component.ts\" path=\"component-styles/src/app/host-selector-example.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-main',\n  template: `\n      &lt;h1&gt;It Works!&lt;/h1&gt;\n      &lt;div&gt;\n        Start editing to see some magic happen :)\n      &lt;/div&gt;\n  `\n})\nexport class HostSelectorExampleComponent {\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aaq7mm0cp5zu5uye65bg38erv\">下面的样式将以组件的宿主元素为目标。应用于此选择器的任何规则都将影响宿主元素及其所有后代（在这种情况下，将所有包含的文本斜体）。（译注：后代的样式源自 CSS 的样式继承特性）</p>\n<code-example header=\"src/app/hero-details.component.css\" path=\"component-styles/src/app/hero-details.component.css\" region=\"host\">\n:host {\n  font-style: italic;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3d2bw2d0b1hkktn5u0b587ni\"><code>:host</code> 选择是是把宿主元素作为目标的<em>唯一</em>方式。除此之外，你将没办法指定它，因为宿主不是组件自身模板的一部分，而是父组件模板的一部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e80l56xmk63ksixhp7l8gip6u\">要把宿主样式作为条件，就要像<em>函数</em>一样把其它选择器放在 <code>:host</code> 后面的括号中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qojrj4piqp3zkzdp1dj7rknn\">在这个例子中，当 CSS 类 <code>active</code> 应用在宿主元素上时，宿主元素的内容也变成了粗体。</p>\n<code-example header=\"src/app/hero-details.component.css\" path=\"component-styles/src/app/hero-details.component.css\" region=\"hostfunction\">\n:host {\n  font-style: italic;\n}\n\n:host(.active) {\n  font-weight: bold;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qs93l7wqlk1mmgyjj3x2raqq\"><code>:host</code> 选择器也可以与其他选择器组合使用。在 <code>:host</code> 后面添加选择器以选择子元素，比如，使用 <code>:host h2</code> 定位组件视图内的 <code>&lt;h2&gt;</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2g0ugfqxkfywo4051zzsu1zn\">不应该在 <code>:host</code> 选择器前面添加除 <code>:host-context</code> 之外的选择器来试图基于组件视图的外部上下文为本组件设置样式。因为此类选择器的作用域不会限于组件的视图，而是会选择外部上下文，但这不是内置的行为。请改用 <code>:host-context</code> 选择器。</p>\n</div>\n<h3 id=\"host-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkjk2m4m4xnops3d8ajxsrsu1\">:host-context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#host-context\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t5he1dl0loyt66le0wpa1pvk\">有时候，需要以某些来自宿主的祖先元素为条件来决定是否要应用某些样式。比如，在文档的 <code>&lt;body&gt;</code> 元素上可能有一个用于表示样式主题（theme）的 CSS 类，你应当基于它来决定组件的样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3eka9qqvp1psdtu1x73wwo9vm\">这时可以使用 <code>:host-context()</code> 伪类选择器。它也以类似 <code>:host()</code> 形式使用。它在当前组件宿主元素的<em>祖先节点</em>中查找 CSS 类，直到文档的根节点为止。它只能与其它选择器组合使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f2y2ta7429c0ehptgrq4rweyt\">在下面的例子中，只有当该组件的某个祖先元素有 CSS 类 <code>active</code> 时，才会把该组件<em>内部</em>的所有文本置为斜体。</p>\n<code-example header=\"src/app/hero-details.component.css\" path=\"component-styles/src/app/hero-details.component.css\" region=\"hostcontext\">\n:host-context(.active) {\n  font-style: italic;\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tx17651nhjko4aqmml9sawbh\"><strong>注意</strong>：<br>\n只有宿主元素及其各级子节点会受到影响，不包括加上 <code>active</code> 类的这个节点的祖先。</p>\n</div>\n<h3 id=\"deprecated-deep--and-ng-deep\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wruzj5u3t5atzj9w2zj857kp\">已弃用 <code>/deep/</code>、<code>&gt;&gt;&gt;</code> 和 <code>::ng-deep</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#deprecated-deep--and-ng-deep\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"847fdqzdwfjxrmcgxeck676zu\">组件样式通常只会作用于组件自身的 HTML 上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"457lca46i1559t2b5aw3v2z5m\">把伪类 <code>::ng-deep</code> 应用到任何一条 CSS 规则上就会完全禁止对那条规则的视图封装。任何带有 <code>::ng-deep</code> 的样式都会变成全局样式。为了把指定的样式限定在当前组件及其下级组件中，请确保在 <code>::ng-deep</code> 之前带上 <code>:host</code> 选择器。如果 <code>::ng-deep</code> 组合器在 <code>:host</code> 伪类之外使用，该样式就会污染其它组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lru4ha7iewfh0mjmlpqtfiid\">这个例子以所有的 <code>&lt;h3&gt;</code> 元素为目标，从宿主元素到当前元素再到 DOM 中的所有子元素：</p>\n<code-example header=\"src/app/hero-details.component.css\" path=\"component-styles/src/app/hero-details.component.css\" region=\"deep\">\n:host ::ng-deep h3 {\n  font-style: italic;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d45xmkz6gfaysvmj2a6auft06\"><code>/deep/</code> 组合器还有两个别名：<code>&gt;&gt;&gt;</code> 和 <code>::ng-deep</code>。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6emfpnbc3y42606c3p1w2wmqs\"><code>/deep/</code> 和 <code>&gt;&gt;&gt;</code> 选择器只能被用在<strong>仿真 (emulated)</strong>模式下。这种方式是默认值，也是用得最多的方式。更多信息，见<a href=\"guide/view-encapsulation\">控制视图封装模式</a>一节。</p>\n</div>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aq1vwpfiwnix6zvtibvsouia7\">CSS 标准中用于 \"刺穿 Shadow DOM\" 的组合器已经被弃用，并将<a href=\"https://www.chromestatus.com/features/6750456638341120\">这个特性从主流浏览器和工具中移除</a>。因此，我们也将在 Angular 中移除对它们的支持（包括 <code>/deep/</code>、<code>&gt;&gt;&gt;</code> 和 <code>::ng-deep</code>）。目前，建议先统一使用 <code>::ng-deep</code>，以便兼容将来的工具。</p>\n</div>\n<p><a id=\"loading-styles\"></a></p>\n<h2 id=\"loading-component-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6i2sfbsnssb11d0xv9wwigo3e\">把样式加载进组件中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#loading-component-styles\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d85w4ynmk93mhmzh69zayj5jv\">有几种方式把样式加入组件：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mfegxitoy2tngo6v8ohh190f\">设置 <code>styles</code> 或 <code>styleUrls</code> 元数据</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7gjutb7eayui2uiza3htd7sn\">内联在模板的 HTML 中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyo3o7q9mn05h2yh4wd92dxa1\">通过 CSS 文件导入</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cee8s4qkyvc687b02dnfy47kc\">上述作用域规则对所有这些加载模式都适用。</p>\n<h3 id=\"styles-in-component-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdr4vwi7s2dkazitx32i8qlii\">元数据中的样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#styles-in-component-metadata\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kil7xivc4n03rk4uwkbv3tga\">给 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器添加一个 <code>styles</code> 数组型属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cs9l6valublsky2bcdzucybnh\">这个数组中的每一个字符串（通常也只有一个）定义一份 CSS。</p>\n<code-example header=\"src/app/hero-app.component.ts (CSS inline)\" path=\"component-styles/src/app/hero-app.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=\"hero\"&gt;&lt;/app-hero-main&gt;\n  `,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l709e7wi9a56gz5smjluh9a4\">注意：这些样式<strong>只对当前组件生效</strong>。它们<strong>既不会作用于模板中嵌入的任何组件</strong>，也不会作用于投影进来的组件（如 <code>ng-content</code>）。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1f672bdps3qr07m55ndm5ynp7\">当使用 <code>--inline-styles</code> 标识创建组件时，Angular CLI 的 <a href=\"cli/generate\"><code>ng generate component</code></a> 命令就会定义一个空的 <code>styles</code> 数组。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-app --inline-style\n\n</code-example>\n<h3 id=\"style-files-in-component-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6unayav8gdazg7t8dtthzq2wc\">组件元数据中的样式文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#style-files-in-component-metadata\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91tz3nsfbgd5curqw8q257eqf\">把外部 CSS 文件添加到 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 的 <code>styleUrls</code> 属性中以加载外部样式。</p>\n<code-tabs>\n    <code-pane header=\"src/app/hero-app.component.ts (CSS in file)\" path=\"component-styles/src/app/hero-app.component.1.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=\"hero\"&gt;&lt;/app-hero-main&gt;\n  `,\n  styleUrls: ['./hero-app.component.css']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-pane>\n    <code-pane header=\"src/app/hero-app.component.css\" path=\"component-styles/src/app/hero-app.component.css\">\nh1 {\n  font-weight: normal;\n}\n\n\n</code-pane>\n</code-tabs>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8s0lb7cs121xtcnkxo4b7eyf\">注意：这些样式<strong>只对当前组件生效</strong>。它们<strong>既不会作用于模板中嵌入的任何组件</strong>，也不会作用于投影进来的组件（如 <code>ng-content</code>）。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nvcsbhe8bisi9tswc3ojfg7r\">你可以指定多个样式文件，甚至可以组合使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> 和 <code>styleUrls</code> 方式。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qvt5w39apde65i06iiswntad\">当你使用 Angular CLI 的 <a href=\"cli/generate\"><code>ng generate component</code></a> 命令但不带 <code>--inline-style</code> 标志时，CLI 会为你创建一个空白的样式表文件，并且在所生成组件的 <code>styleUrls</code> 中引用该文件。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-app\n\n</code-example>\n<h3 id=\"template-inline-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yd0jisa3z9spr9q1b61hgy5s\">模板内联样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#template-inline-styles\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jew9h4t40jsr0ietd0efoqcc\">可以直接在组件的 HTML 模板中写 <code>&lt;<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;</code> 标签来内嵌 CSS 样式。</p>\n<code-example header=\"src/app/hero-controls.component.ts\" path=\"component-styles/src/app/hero-controls.component.ts\" region=\"inlinestyles\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-controls',\n  template: `\n    &lt;<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;\n      button {\n        background-color: white;\n        border: 1px solid #777;\n      }\n    &lt;/<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;\n    &lt;h3&gt;Controls&lt;/h3&gt;\n    &lt;button type=\"button\" (click)=\"activate()\"&gt;Activate&lt;/button&gt;\n  `\n})\n\n</code-example>\n<h3 id=\"template-link-tags\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cq7ogad4vtabg4fxj2xyck90g\">模板中的 link 标签<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#template-link-tags\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bjgkr3nm2ehu2uve4oky5ttd\">你也可以在组件的 HTML 模板中写 <code>&lt;link&gt;</code> 标签。</p>\n<code-example header=\"src/app/hero-team.component.ts\" path=\"component-styles/src/app/hero-team.component.ts\" region=\"stylelink\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-team',\n  template: `\n    &lt;!-- We must use a relative URL so that the AOT compiler can find the stylesheet --&gt;\n    &lt;link rel=\"stylesheet\" href=\"../assets/hero-team.component.css\"&gt;\n    &lt;h3&gt;Team&lt;/h3&gt;\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let member of hero.team\"&gt;\n        {{member}}\n      &lt;/li&gt;\n    &lt;/ul&gt;`\n})\n\n</code-example>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2sbjzw91246dkfhq16vrvmqg9\">当使用 CLI 进行构建时，要确保这个链接到的样式表文件被复制到了服务器上。参阅<a href=\"guide/workspace-config#assets-configuration\">资产文件配置指南</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5soruhc68w9754tpwgljhazit\">只要引用过，CLI 就会计入这个样式表，无论这个 link 标签的 href 指向的 URL 是相对于应用根目录的还是相对于组件文件的。</p>\n</div>\n<h3 id=\"css-imports\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edfusyq7e0yrzke4od2t0zfh6\">CSS @imports<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#css-imports\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2p0pqh7lg6vqpw5op9jfbdmi\">可以利用标准的 CSS <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/@import\"><code>@import</code> 规则</a>来把其它 CSS 文件导入到 CSS 文件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qbfjetzq9uzjaa3rpwlfmh2h\">在<em>这种</em>情况下，URL 是相对于你正在导入的 CSS 文件的。</p>\n<code-example header=\"src/app/hero-details.component.css (excerpt)\" path=\"component-styles/src/app/hero-details.component.css\" region=\"import\">\n/* The AOT compiler needs the `./` to show that this is local */\n@import './hero-details-box.css';\n\n</code-example>\n<h3 id=\"external-and-global-style-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qpg77pr2psj77bxaapv7rpdf\">外部以及全局样式文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#external-and-global-style-files\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c8o4dfnsnlsia1yzzmcvax5j\">当使用 CLI 进行构建时，你必须配置 <code>angular.json</code> 文件，使其包含<em>所有外部资源</em>（包括外部的样式表文件）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23hho69dsx3j5s3w9a9tzi9cf\">在它的 <code>styles</code> 区注册这些<strong>全局</strong>样式文件，默认情况下，它会有一个预先配置的全局 <code>styles.css</code> 文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctt9euckn7328zyr47xvfbd7l\">要了解更多，参阅 <a href=\"guide/workspace-config#styles-and-scripts-configuration\">样式配置指南</a>。</p>\n<h3 id=\"non-css-style-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vhxpqga24m8cy3h8thgbt7au\">非 CSS 样式文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#non-css-style-files\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4i0l9648dkxuzj42un1z47juv\">如果使用 CLI 进行构建，那么你可以用 <a href=\"https://sass-lang.com\">sass</a> 或 <a href=\"https://lesscss.org\">less</a> 来编写样式，并使用相应的扩展名（<code>.scss</code>、<code>.less</code>）把它们指定到 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 元数据中。例子如下：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\n…\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0ey9kfvltifzr2fdp1zya8y3\">CLI 的构建过程会运行相关的预处理器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a14rlds70czq1rbi0elgtv5px\">当使用 <code>ng generate component</code> 命令生成组件文件时，CLI 会默认生成一个空白的 CSS 样式文件（<code>.css</code>）。你可以配置 CLI，让它默认使用你喜欢的 CSS 预处理器，参阅<a href=\"guide/workspace-config#generation-schematics\">工作区配置指南</a>中的解释。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/component-overview\n - guide/deprecations\n - guide/example-apps-list\n - guide/what-is-angular\n-->\n<!-- links from this doc:\n - api/animations/style\n - api/common/NgFor\n - api/core/Component\n - api/core/Component#styleUrls\n - cli/generate\n - guide/component-styles#1-use-css-custom-properties-recommended\n - guide/component-styles#2-declare-global-css-with-mixin\n - guide/component-styles#3-customize-with-css-part\n - guide/component-styles#4-provide-a-typescript-api\n - guide/component-styles#authoring-a-component-to-support-customization\n - guide/component-styles#component-styles\n - guide/component-styles#component-styling-best-practices\n - guide/component-styles#css-imports\n - guide/component-styles#deprecated-deep--and-ng-deep\n - guide/component-styles#external-and-global-style-files\n - guide/component-styles#host\n - guide/component-styles#host-context\n - guide/component-styles#loading-component-styles\n - guide/component-styles#non-css-style-files\n - guide/component-styles#special-selectors\n - guide/component-styles#style-files-in-component-metadata\n - guide/component-styles#styles-in-component-metadata\n - guide/component-styles#template-inline-styles\n - guide/component-styles#template-link-tags\n - guide/component-styles#using-component-styles\n - guide/view-encapsulation\n - guide/workspace-config#assets-configuration\n - guide/workspace-config#generation-schematics\n - guide/workspace-config#styles-and-scripts-configuration\n - https://developer.mozilla.org\n - https://developer.mozilla.org/docs/Web/CSS/::part\n - https://developer.mozilla.org/docs/Web/Web_Components/Using_shadow_DOM\n - https://developer.mozilla.org/en/docs/Web/CSS/@import\n - https://lesscss.org\n - https://sass-lang.com\n - https://www.chromestatus.com/feature/6750456638341120\n - https://www.w3.org\n - https://www.w3.org/TR/css-scoping-1\n-->"}
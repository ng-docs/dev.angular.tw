{"id":"guide/component-styles","title":"元件樣式","contents":"<div class=\"content\">\n  <h1 id=\"component-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs2kqpz0x7tkzgkaoc869x1hd\">元件樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#component-styles\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91rzc4xzgu1n613c8qxuulkx3\">Angular 應用使用標準的 CSS 來設定樣式。這意味著你可以把關於 CSS 的那些知識和技能直接用於 Angular 程式中，比如：樣式表、選擇器、規則以及媒體查詢等。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2bo8b6v8bgadb25ms3f5wnmyf\">另外，Angular 還能把<em>元件樣式</em>捆綁在元件上，以實現比標準樣式表更加模組化的設計。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agwvm6ozakvraqhwg8zg6ofdy\">本章將會講解如何載入和使用這些<em>元件樣式</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"as4gj76gqug28zyju9fa38px4\">可以執行<live-example></live-example>，在 Stackblitz 中試用並下載本頁的程式碼。</p>\n<h2 id=\"using-component-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bl1xj50auu1j6kg7jqg8n478\">使用元件樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#using-component-styles\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"293ey7vozc3djbj3v80xa9und\">對你編寫的每個 Angular 元件來說，除了定義 HTML 樣板之外，還要定義用於樣板的 CSS 樣式、 指定任意的選擇器、規則和媒體查詢。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kg438sv2pisa7oq8bityflqy\">實現方式之一，是在元件的元資料中設定 <code>styles</code> 屬性。<code>styles</code> 屬性可以接受一個包含 CSS 程式碼的字串陣列。通常你只給它一個字串就行了，如同下例：</p>\n<code-example header=\"src/app/hero-app.component.ts\" path=\"component-styles/src/app/hero-app.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=\"hero\"&gt;&lt;/app-hero-main&gt;\n  `,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n<h2 id=\"component-styling-best-practices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yev519lqp6rvzdr3u6fr7ai6\">元件樣式最佳實踐<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#component-styling-best-practices\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2ky7z8ccdik6az45no3g1b1\">有關 Angular 如何將樣式範圍限定為特定元件的訊息，參閱<a href=\"guide/view-encapsulation\">檢視封裝</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5mcij7qu0f4lqv1y4o9fyt99\">你應該將元件的樣式視為該組件的私有實現細節。使用通用元件時，你不應該覆蓋元件的樣式，就像訪問 TypeScript 類別的私有成員一樣。雖然 Angular 的預設樣式封裝可防止元件樣式影響其他元件，但全域樣式會影響頁面上的所有元件。這包括 <code>::ng-deep</code>，它會將元件樣式提升為全域樣式。</p>\n<h3 id=\"authoring-a-component-to-support-customization\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bga6954xpu1kc9i6hneqjzghg\">創作支援自定義樣式的元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#authoring-a-component-to-support-customization\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7q5dt3nudgkrp0jwhxw7ouvqr\">作為元件作者，你可以用四種不同的方式之一顯式設計元件以接受自定義。</p>\n<h4 id=\"1-use-css-custom-properties-recommended\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"10m5c23w8qt5wkqlswpx1ghvg\">1. 使用 CSS 自定義屬性（推薦）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#1-use-css-custom-properties-recommended\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"az1a1yepdhtj5kjd5hvs68gnb\">你可以透過使用 CSS 自定義屬性（也稱為 CSS 變數）定義其樣式來為元件定義受支援的自定義 API。使用你元件的任何人都可以透過為這些屬性定義值、自定義元件在渲染頁面上的最終外觀來使用此 API。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30org23b6im7zj7xzaz16apdc\">雖然這需要為每個自定義點定義一個自定義屬性，但它建立了一個清晰的 API 契約，可以在所有樣式的封裝模式下工作。</p>\n<h4 id=\"2-declare-global-css-with-mixin\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edqamr5kn1y7oezqy1i9v44ya\">2.使用 <code>@mixin</code> 宣告全域 CSS<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#2-declare-global-css-with-mixin\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"al85x9t6tzi4vacrri4tvar0a\">雖然 Angular 的模擬樣式封裝可防止樣式從元件中逃逸，但它並不能防止全域 CSS 影響整個頁面。雖然元件使用者應避免直接覆蓋元件的 CSS 內部，但你可以透過 Sass 等 CSS 預處理器提供受支援的自定義 API。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6nyutnqaqv906ztwsl879mh6\">比如，元件可以提供一個或多個受支援的 mixin 來自定義元件外觀的各個方面。雖然這種方法在其實現中使用了全域樣式，但它允許元件作者透過對元件的私有 DOM 結構和 CSS 類別的更改來使 mixins 保持最新。</p>\n<h4 id=\"3-customize-with-css-part\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8t8ap13lngvx2sac0vzyo0frt\">3.使用 CSS <code>::part</code> 自定義<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#3-customize-with-css-part\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6llv01cz8arqyzawopta91gve\">如果你的元件使用了 <a href=\"https://developer.mozilla.org/docs/Web/Web_Components/Using_shadow_DOM\">Shadow DOM</a>，你可以應用 <code>part</code> 屬性來指定元件樣板中的元素。這允許元件的使用者使用 <a href=\"https://developer.mozilla.org/docs/Web/CSS/::part\"><code>::part</code> 偽元素</a>創作針對這些特定元素的任意樣式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5e9zngtmj12eaqhwu1mqp6pd\">雖然這允許你限制樣板中消費者可以自定義的元素，但它並不能限制哪些 CSS 屬性是可自定義的。</p>\n<h4 id=\"4-provide-a-typescript-api\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enlcjv9vbrboimwp4ufpvh1uj\">4.提供 TypeScript API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#4-provide-a-typescript-api\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5e5ufiejfqrs4884xste22jal\">你可以定義一個 TypeScript API 來自定義樣式，使用樣板繫結來更新 CSS 類別和樣式。不建議這樣做，因為這種樣式 API 的額外 JavaScript 成本會產生比 CSS 高得多的效能成本。</p>\n<h2 id=\"special-selectors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a86cxagp25uvhy0x71rksaw16\">特殊的選擇器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#special-selectors\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a42yjlbazqs6hb0b9b5tawhmd\">元件樣式中有一些從影子（Shadow） DOM 樣式範圍領域（記錄在<a href=\"https://www.w3.org\">W3C</a>的<a href=\"https://www.w3.org/TR/css-scoping-1\">CSS Scoping Module Level 1</a>中）引入的特殊<em>選擇器</em>：</p>\n<h3 id=\"host\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fa9g62fzjz3yjeqt70zpzmua\">:host<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#host\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jvuow1wh5dzwntwlgjjvylqp\">每個元件都會關聯一個與其元件選擇器相對應的元素。這個元素稱為<em>宿主元素</em>，樣板會渲染到其中。<code>:host</code> 偽類選擇器可用於建立針對宿主元素自身的樣式，而不是針對宿主內部的那些元素。</p>\n<code-example header=\"src/app/host-selector-example.component.ts\" path=\"component-styles/src/app/host-selector-example.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-main',\n  template: `\n      &lt;h1&gt;It Works!&lt;/h1&gt;\n      &lt;div&gt;\n        Start editing to see some magic happen :)\n      &lt;/div&gt;\n  `\n})\nexport class HostSelectorExampleComponent {\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aaq7mm0cp5zu5uye65bg38erv\">下面的樣式將以元件的宿主元素為目標。應用於此選擇器的任何規則都將影響宿主元素及其所有後代（在這種情況下，將所有包含的文字斜體）。（譯註：後代的樣式源自 CSS 的樣式繼承屬性）</p>\n<code-example header=\"src/app/hero-details.component.css\" path=\"component-styles/src/app/hero-details.component.css\" region=\"host\">\n:host {\n  font-style: italic;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3d2bw2d0b1hkktn5u0b587ni\"><code>:host</code> 選擇是是把宿主元素作為目標的<em>唯一</em>方式。除此之外，你將沒辦法指定它，因為宿主不是元件自身樣板的一部分，而是父元件樣板的一部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e80l56xmk63ksixhp7l8gip6u\">要把宿主樣式作為條件，就要像<em>函式</em>一樣把其它選擇器放在 <code>:host</code> 後面的括號中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qojrj4piqp3zkzdp1dj7rknn\">在這個例子中，當 CSS 類 <code>active</code> 應用在宿主元素上時，宿主元素的內容也變成了粗體。</p>\n<code-example header=\"src/app/hero-details.component.css\" path=\"component-styles/src/app/hero-details.component.css\" region=\"hostfunction\">\n:host {\n  font-style: italic;\n}\n\n:host(.active) {\n  font-weight: bold;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qs93l7wqlk1mmgyjj3x2raqq\"><code>:host</code> 選擇器也可以與其他選擇器組合使用。在 <code>:host</code> 後面新增選擇器以選擇子元素，比如，使用 <code>:host h2</code> 定位元件檢視內的 <code>&lt;h2&gt;</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2g0ugfqxkfywo4051zzsu1zn\">不應該在 <code>:host</code> 選擇器前面新增除 <code>:host-context</code> 之外的選擇器來試圖基於元件檢視的外部上下文為本元件設定樣式。因為此類選擇器的作用域不會限於元件的檢視，而是會選擇外部上下文，但這不是內建的行為。請改用 <code>:host-context</code> 選擇器。</p>\n</div>\n<h3 id=\"host-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkjk2m4m4xnops3d8ajxsrsu1\">:host-context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#host-context\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t5he1dl0loyt66le0wpa1pvk\">有時候，需要以某些來自宿主的祖先元素為條件來決定是否要應用某些樣式。比如，在文件的 <code>&lt;body&gt;</code> 元素上可能有一個用於表示樣式主題（theme）的 CSS 類，你應當基於它來決定元件的樣式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3eka9qqvp1psdtu1x73wwo9vm\">這時可以使用 <code>:host-context()</code> 偽類選擇器。它也以類似 <code>:host()</code> 形式使用。它在當前元件宿主元素的<em>祖先節點</em>中查詢 CSS 類，直到文件的根節點為止。它只能與其它選擇器組合使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f2y2ta7429c0ehptgrq4rweyt\">在下面的例子中，只有當該元件的某個祖先元素有 CSS 類 <code>active</code> 時，才會把該組件<em>內部</em>的所有文字置為斜體。</p>\n<code-example header=\"src/app/hero-details.component.css\" path=\"component-styles/src/app/hero-details.component.css\" region=\"hostcontext\">\n:host-context(.active) {\n  font-style: italic;\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tx17651nhjko4aqmml9sawbh\"><strong>注意</strong>：<br>\n只有宿主元素及其各級子節點會受到影響，不包括加上 <code>active</code> 類別的這個節點的祖先。</p>\n</div>\n<h3 id=\"deprecated-deep--and-ng-deep\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wruzj5u3t5atzj9w2zj857kp\">已棄用 <code>/deep/</code>、<code>&gt;&gt;&gt;</code> 和 <code>::ng-deep</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#deprecated-deep--and-ng-deep\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"847fdqzdwfjxrmcgxeck676zu\">元件樣式通常只會作用於元件自身的 HTML 上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"457lca46i1559t2b5aw3v2z5m\">把偽類 <code>::ng-deep</code> 應用到任何一條 CSS 規則上就會完全禁止對那條規則的檢視封裝。任何帶有 <code>::ng-deep</code> 的樣式都會變成全域樣式。為了把指定的樣式限定在當前元件及其下級元件中，請確保在 <code>::ng-deep</code> 之前帶上 <code>:host</code> 選擇器。如果 <code>::ng-deep</code> 組合器在 <code>:host</code> 偽類之外使用，該樣式就會汙染其它元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lru4ha7iewfh0mjmlpqtfiid\">這個例子以所有的 <code>&lt;h3&gt;</code> 元素為目標，從宿主元素到當前元素再到 DOM 中的所有子元素：</p>\n<code-example header=\"src/app/hero-details.component.css\" path=\"component-styles/src/app/hero-details.component.css\" region=\"deep\">\n:host ::ng-deep h3 {\n  font-style: italic;\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d45xmkz6gfaysvmj2a6auft06\"><code>/deep/</code> 組合器還有兩個別名：<code>&gt;&gt;&gt;</code> 和 <code>::ng-deep</code>。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6emfpnbc3y42606c3p1w2wmqs\"><code>/deep/</code> 和 <code>&gt;&gt;&gt;</code> 選擇器只能被用在<strong>模擬 (emulated)</strong>模式下。這種方式是預設值，也是用得最多的方式。更多訊息，見<a href=\"guide/view-encapsulation\">控制檢視封裝模式</a>一節。</p>\n</div>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aq1vwpfiwnix6zvtibvsouia7\">CSS 標準中用於 \"刺穿 Shadow DOM\" 的組合器已經被棄用，並將<a href=\"https://www.chromestatus.com/features/6750456638341120\">這個屬性從主流瀏覽器和工具中移除</a>。因此，我們也將在 Angular 中移除對它們的支援（包括 <code>/deep/</code>、<code>&gt;&gt;&gt;</code> 和 <code>::ng-deep</code>）。目前，建議先統一使用 <code>::ng-deep</code>，以便相容將來的工具。</p>\n</div>\n<p><a id=\"loading-styles\"></a></p>\n<h2 id=\"loading-component-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6i2sfbsnssb11d0xv9wwigo3e\">把樣式載入進元件中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#loading-component-styles\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d85w4ynmk93mhmzh69zayj5jv\">有幾種方式把樣式加入元件：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mfegxitoy2tngo6v8ohh190f\">設定 <code>styles</code> 或 <code>styleUrls</code> 元資料</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7gjutb7eayui2uiza3htd7sn\">行內在樣板的 HTML 中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyo3o7q9mn05h2yh4wd92dxa1\">透過 CSS 檔案匯入</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cee8s4qkyvc687b02dnfy47kc\">上述作用域規則對所有這些載入模式都適用。</p>\n<h3 id=\"styles-in-component-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdr4vwi7s2dkazitx32i8qlii\">元資料中的樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#styles-in-component-metadata\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kil7xivc4n03rk4uwkbv3tga\">給 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器新增一個 <code>styles</code> 陣列型屬性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cs9l6valublsky2bcdzucybnh\">這個陣列中的每一個字串（通常也只有一個）定義一份 CSS。</p>\n<code-example header=\"src/app/hero-app.component.ts (CSS inline)\" path=\"component-styles/src/app/hero-app.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=\"hero\"&gt;&lt;/app-hero-main&gt;\n  `,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l709e7wi9a56gz5smjluh9a4\">注意：這些樣式<strong>只對當前元件生效</strong>。它們<strong>既不會作用於樣板中嵌入的任何元件</strong>，也不會作用於投影進來的元件（如 <code>ng-content</code>）。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1f672bdps3qr07m55ndm5ynp7\">當使用 <code>--inline-styles</code> 標識建立元件時，Angular CLI 的 <a href=\"cli/generate\"><code>ng generate component</code></a> 指令就會定義一個空的 <code>styles</code> 陣列。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-app --inline-style\n\n</code-example>\n<h3 id=\"style-files-in-component-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6unayav8gdazg7t8dtthzq2wc\">元件元資料中的樣式檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#style-files-in-component-metadata\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91tz3nsfbgd5curqw8q257eqf\">把外部 CSS 檔案新增到 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 的 <code>styleUrls</code> 屬性中以載入外部樣式。</p>\n<code-tabs>\n    <code-pane header=\"src/app/hero-app.component.ts (CSS in file)\" path=\"component-styles/src/app/hero-app.component.1.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=\"hero\"&gt;&lt;/app-hero-main&gt;\n  `,\n  styleUrls: ['./hero-app.component.css']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-pane>\n    <code-pane header=\"src/app/hero-app.component.css\" path=\"component-styles/src/app/hero-app.component.css\">\nh1 {\n  font-weight: normal;\n}\n\n\n</code-pane>\n</code-tabs>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8s0lb7cs121xtcnkxo4b7eyf\">注意：這些樣式<strong>只對當前元件生效</strong>。它們<strong>既不會作用於樣板中嵌入的任何元件</strong>，也不會作用於投影進來的元件（如 <code>ng-content</code>）。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nvcsbhe8bisi9tswc3ojfg7r\">你可以指定多個樣式檔案，甚至可以組合使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> 和 <code>styleUrls</code> 方式。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qvt5w39apde65i06iiswntad\">當你使用 Angular CLI 的 <a href=\"cli/generate\"><code>ng generate component</code></a> 指令但不帶 <code>--inline-style</code> 標誌時，CLI 會為你建立一個空白的樣式表檔案，並且在所生成元件的 <code>styleUrls</code> 中引用該檔案。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-app\n\n</code-example>\n<h3 id=\"template-inline-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yd0jisa3z9spr9q1b61hgy5s\">樣板行內樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#template-inline-styles\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jew9h4t40jsr0ietd0efoqcc\">可以直接在元件的 HTML 樣板中寫 <code>&lt;<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;</code> 標籤來內嵌 CSS 樣式。</p>\n<code-example header=\"src/app/hero-controls.component.ts\" path=\"component-styles/src/app/hero-controls.component.ts\" region=\"inlinestyles\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-controls',\n  template: `\n    &lt;<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;\n      button {\n        background-color: white;\n        border: 1px solid #777;\n      }\n    &lt;/<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;\n    &lt;h3&gt;Controls&lt;/h3&gt;\n    &lt;button type=\"button\" (click)=\"activate()\"&gt;Activate&lt;/button&gt;\n  `\n})\n\n</code-example>\n<h3 id=\"template-link-tags\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cq7ogad4vtabg4fxj2xyck90g\">樣板中的 link 標籤<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#template-link-tags\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bjgkr3nm2ehu2uve4oky5ttd\">你也可以在元件的 HTML 樣板中寫 <code>&lt;link&gt;</code> 標籤。</p>\n<code-example header=\"src/app/hero-team.component.ts\" path=\"component-styles/src/app/hero-team.component.ts\" region=\"stylelink\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-team',\n  template: `\n    &lt;!-- We must use a relative URL so that the AOT compiler can find the stylesheet --&gt;\n    &lt;link rel=\"stylesheet\" href=\"../assets/hero-team.component.css\"&gt;\n    &lt;h3&gt;Team&lt;/h3&gt;\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let member of hero.team\"&gt;\n        {{member}}\n      &lt;/li&gt;\n    &lt;/ul&gt;`\n})\n\n</code-example>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2sbjzw91246dkfhq16vrvmqg9\">當使用 CLI 進行建立時，要確保這個連結到的樣式表檔案被複制到了伺服器上。參閱<a href=\"guide/workspace-config#assets-configuration\">資產檔案設定指南</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5soruhc68w9754tpwgljhazit\">只要引用過，CLI 就會計入這個樣式表，無論這個 link 標籤的 href 指向的 URL 是相對於應用根目錄的還是相對於元件檔案的。</p>\n</div>\n<h3 id=\"css-imports\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edfusyq7e0yrzke4od2t0zfh6\">CSS @imports<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#css-imports\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2p0pqh7lg6vqpw5op9jfbdmi\">可以利用標準的 CSS <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/@import\"><code>@import</code> 規則</a>來把其它 CSS 檔案匯入到 CSS 檔案中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qbfjetzq9uzjaa3rpwlfmh2h\">在<em>這種</em>情況下，URL 是相對於你正在匯入的 CSS 檔案的。</p>\n<code-example header=\"src/app/hero-details.component.css (excerpt)\" path=\"component-styles/src/app/hero-details.component.css\" region=\"import\">\n/* The AOT compiler needs the `./` to show that this is local */\n@import './hero-details-box.css';\n\n</code-example>\n<h3 id=\"external-and-global-style-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qpg77pr2psj77bxaapv7rpdf\">外部以及全域樣式檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#external-and-global-style-files\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c8o4dfnsnlsia1yzzmcvax5j\">當使用 CLI 進行建立時，你必須設定 <code>angular.json</code> 檔案，使其包含<em>所有外部資源</em>（包括外部的樣式表檔案）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23hho69dsx3j5s3w9a9tzi9cf\">在它的 <code>styles</code> 區註冊這些<strong>全域</strong>樣式檔案，預設情況下，它會有一個預先設定的全域 <code>styles.css</code> 檔案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctt9euckn7328zyr47xvfbd7l\">要了解更多，參閱 <a href=\"guide/workspace-config#styles-and-scripts-configuration\">樣式設定指南</a>。</p>\n<h3 id=\"non-css-style-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vhxpqga24m8cy3h8thgbt7au\">非 CSS 樣式檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#non-css-style-files\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4i0l9648dkxuzj42un1z47juv\">如果使用 CLI 進行建立，那麼你可以用 <a href=\"https://sass-lang.com\">sass</a> 或 <a href=\"https://lesscss.org\">less</a> 來編寫樣式，並使用相應的副檔名（<code>.scss</code>、<code>.less</code>）把它們指定到 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 元資料中。例子如下：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\n…\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0ey9kfvltifzr2fdp1zya8y3\">CLI 的建立過程會執行相關的預處理器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a14rlds70czq1rbi0elgtv5px\">當使用 <code>ng generate component</code> 指令生成元件檔案時，CLI 會預設生成一個空白的 CSS 樣式檔案（<code>.css</code>）。你可以設定 CLI，讓它預設使用你喜歡的 CSS 預處理器，參閱<a href=\"guide/workspace-config#generation-schematics\">工作區設定指南</a>中的解釋。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/component-overview\n - guide/deprecations\n - guide/example-apps-list\n - guide/what-is-angular\n-->\n<!-- links from this doc:\n - api/animations/style\n - api/common/NgFor\n - api/core/Component\n - api/core/Component#styleUrls\n - cli/generate\n - guide/component-styles#1-use-css-custom-properties-recommended\n - guide/component-styles#2-declare-global-css-with-mixin\n - guide/component-styles#3-customize-with-css-part\n - guide/component-styles#4-provide-a-typescript-api\n - guide/component-styles#authoring-a-component-to-support-customization\n - guide/component-styles#component-styles\n - guide/component-styles#component-styling-best-practices\n - guide/component-styles#css-imports\n - guide/component-styles#deprecated-deep--and-ng-deep\n - guide/component-styles#external-and-global-style-files\n - guide/component-styles#host\n - guide/component-styles#host-context\n - guide/component-styles#loading-component-styles\n - guide/component-styles#non-css-style-files\n - guide/component-styles#special-selectors\n - guide/component-styles#style-files-in-component-metadata\n - guide/component-styles#styles-in-component-metadata\n - guide/component-styles#template-inline-styles\n - guide/component-styles#template-link-tags\n - guide/component-styles#using-component-styles\n - guide/view-encapsulation\n - guide/workspace-config#assets-configuration\n - guide/workspace-config#generation-schematics\n - guide/workspace-config#styles-and-scripts-configuration\n - https://developer.mozilla.org\n - https://developer.mozilla.org/docs/Web/CSS/::part\n - https://developer.mozilla.org/docs/Web/Web_Components/Using_shadow_DOM\n - https://developer.mozilla.org/en/docs/Web/CSS/@import\n - https://lesscss.org\n - https://sass-lang.com\n - https://www.chromestatus.com/feature/6750456638341120\n - https://www.w3.org\n - https://www.w3.org/TR/css-scoping-1\n-->"}
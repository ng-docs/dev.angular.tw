{"id":"guide/schematics-for-libraries","title":"函式庫的原理圖","contents":"<div class=\"content\">\n  <h1 id=\"schematics-for-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0tpmwh7ayfgel7xsonxno8h3\">函式庫的原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#schematics-for-libraries\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c67mo0zy32owx4mcuktajykv\">當建立 Angular 函式庫時，你可以為同時為它打包進一組原理圖，並把它與 Angular CLI 整合在一起。藉助原理圖，使用者可以用 <code>ng add</code> 來安裝你這個函式庫的初始版本，可以用 <code>ng generate</code> 來建立你在庫中定義的一些工件，可以用 <code>ng update</code> 來調整他們的專案，以支援你在函式庫的新版本中引入的重大變更。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"658i64tiye6kda2gzcbx7cbfh\">這三種原理圖都可以作為你打包進庫中的集合的一部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94xvcsc00hund95w2r7a8962k\">下載<live-example downloadonly=\"\">函式庫的原理圖專案</live-example>以獲取一個已完成下列步驟的例子。</p>\n<h2 id=\"creating-a-schematics-collection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpow710nw9arsmw4yue91x4na\">建立一個原理圖集合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#creating-a-schematics-collection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8u426bzgp76avdupx6c6lkmy\">要開始一個集合，你需要建立一些原理圖檔案。下列步驟說明了如何在不修改任何專案檔案的情況下新增初始支援。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfwfroq8yg91abdrhwgk7mqsl\">在函式庫的根資料夾中，建立一個 <code>schematics/</code> 資料夾。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aegf62knclqlwfwd3j0o4lu9g\">在 <code>schematics/</code> 資料夾中，為你的第一個原理圖建立一個 <code>ng-add/</code> 資料夾。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cclazxcgoszq4dwixw5eiodry\">在 <code>schematics/</code> 資料夾的根級，建立一個 <code>collection.json</code> 檔案。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hpvnrr524j8w0a14ttahgxva\">編輯 <code>collection.json</code> 檔案來定義你的集合的初始模式定義。</p>\n<code-example header=\"projects/my-lib/schematics/collection.json (Schematics Collection)\" path=\"schematics-for-libraries/projects/my-lib/schematics/collection.1.json\">\n{\n  \"$schema\": \"../../../node_modules/@angular-devkit/schematics/collection-schema.json\",\n  \"schematics\": {\n    \"ng-add\": {\n      \"description\": \"Add my library to the project.\",\n      \"factory\": \"./ng-add/index#ngAdd\",\n      \"schema\": \"./ng-add/schema.json\"\n    }\n  }\n}\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"62312gvv6f2fq2jb3cb82nlc1\"><code>$schema</code> 路徑是相對於 Angular Devkit 集合模式定義的。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epe57i8ed73nc0b9y02rn25cx\"><code>schematics</code> 物件描述了該集合中的命名原理圖。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"at3ts7okrrtwqkmftqqho75zu\">第一個條目是名為 <code>ng-add</code> 的原理圖。它包含了描述，並指向執行此原理圖時要呼叫的工廠函式。</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj9qugh58p0m8d7a4n6ds0pjl\">在這個庫專案的 <code>package.json</code> 檔案中，新增一個 『schematics』 的條目，裡面帶有你的模式定義檔案的路徑。當 Angular CLI 執行指令時，會根據這個條目在你的集合中查詢指定名字的原理圖。</p>\n<code-example header=\"projects/my-lib/package.json (Schematics Collection Reference)\" path=\"schematics-for-libraries/projects/my-lib/package.json\" region=\"collection\">\n{\n  \"name\": \"my-lib\",\n  \"version\": \"0.0.1\",\n  \"schematics\": \"./schematics/collection.json\",\n}\n\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"130s5de8lzym0c3wjk348buzi\">你所建立的初始模式告訴 CLI 在哪裡可以找到支援 <code>ng add</code> 指令的原理圖。現在，你已準備好建立該原理圖了。</p>\n<h2 id=\"providing-installation-support\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94bjhcepmuzvsps9f0r0bzs69\">提供安裝支援<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#providing-installation-support\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fzwzm8b1jok5xa7enyj736hv\"><code>ng add</code> 指令的原理圖可以增強使用者的初始安裝過程。可以按如下步驟定義這種原理圖。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81n233alp4yy491dwchggzsei\">進入 <code>&lt;lib-root&gt;/schematics/ng-add/</code> 目錄。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyooj6deeogp02qrnwvpvcyo8\">建立主檔案 <code>index.ts</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"u8c6y7qo3ot0h1xnvjfh8ptg\">開啟 <code>index.ts</code> 並新增原理圖工廠函式的原始碼。</p>\n<code-example header=\"projects/my-lib/schematics/ng-add/index.ts (ng-add Rule Factory)\" path=\"schematics-for-libraries/projects/my-lib/schematics/ng-add/index.ts\">\nimport { Rule } from '@angular-devkit/schematics';\nimport { addRootImport } from '@schematics/angular/utility';\nimport { Schema } from './schema';\n\nexport function ngAdd(options: Schema): Rule {\n  // Add an import `MyLibModule` from `my-lib` to the root of the user's project.\n  return addRootImport(options.project, ({code, external}) =&gt;\n    code`${external('MyLibModule', 'my-lib')}`);\n}\n\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"y7bhudvbudklrptl7r3jd1et\">Angular CLI將自動安裝函式庫的最新版本，這個例子透過將\n<code>MyLibModule</code>新增到應用程式的根目錄進一步擴充套件了。 \n<code>addRootImport</code>函式接受一個需要回傳程式碼區塊的回呼函式。您可以在用\n<code>code</code>函式標記的字串中編寫任何程式碼，任何外部符號都必須用\n<code>external</code>函式包裝，以確保生成適當的匯入語句。</p>\n<h3 id=\"define-dependency-type\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pywyrx1e58sbneypuaqh3cox\">定義依賴型別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#define-dependency-type\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f2km5c4v6dj2fnm4qyy2vks1p\">如果該函式庫應該新增到 <code>dependencies</code> 中、<code>devDependencies</code> 中，或者不用儲存到專案的 <code>package.json</code> 設定檔案中，請使用 <code>ng-add</code> 的 <code>save</code> 選項進行設定</p>\n<code-example header=\"projects/my-lib/package.json (ng-add Reference)\" path=\"schematics-for-libraries/projects/my-lib/package.json\" region=\"ng-add\">\n\"ng-add\": {\n  \"save\": \"devDependencies\"\n},\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9oahsccg0lenq695w6sdn9ol9\">可能的值有：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bulyvki1easdsqhng9yr2vtyi\">數值</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>false</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axhx0wn01pzowye8334r9bcje\">不要將套件新增到\n<code>package.json</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2evca1cjzfqcdpxpjdge4kcva\">將套件新增到依賴項</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\"dependencies\"</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2evca1cjzfqcdpxpjdge4kcva\">將套件新增到依賴項</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\"devDependencies\"</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asul6b74i2obzzpje1l19t0p2\">將套件新增到devDependencies</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"building-your-schematics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4l3abe1q87gge838veufwbtns\">建立你的原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#building-your-schematics\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2axveauioqx4oazffswnbg4e8\">要把你的原理圖和函式庫打包到一起，就必須把這個函式庫設定成單獨建立原理圖，然後再把它們新增到發布套件中。你必須<em>先建立庫</em>再建立原理圖，這樣才能把它們放到正確的目錄下。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7g9t02ka8ahfzhs1rmnf565mu\">你的函式庫需要一個自定義的 Typescript 設定檔案，裡面帶有如何把原理圖編譯進函式庫的發布版的一些指令。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4j9f6twqmdumpdjmbj57aciz\">要把這些原理圖新增到函式庫的發布套件中，就要把這些指令碼新增到該函式庫的 <code>package.json</code> 檔案中。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u2i5z5gw9itsfkfd5i9ahnus\">假設你在 Angular 工作區中有一個庫專案 <code>my-lib</code>。要想告訴函式庫如何建立原理圖，就要在生成的 <code>tsconfig.lib.json</code> 函式庫設定檔案旁新增一個 <code>tsconfig.schematics.json</code> 檔案。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ccuviw7hrh39mbcwuz4upfo0v\">編輯 <code>tsconfig.schematics.json</code> 檔案，新增如下內容。</p>\n<code-example header=\"projects/my-lib/tsconfig.schematics.json (TypeScript Config)\" path=\"schematics-for-libraries/projects/my-lib/tsconfig.schematics.json\">\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"lib\": [\n      \"es2018\",\n      \"dom\"\n    ],\n    \"declaration\": true,\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"noEmitOnError\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noImplicitAny\": true,\n    \"noImplicitThis\": true,\n    \"noUnusedParameters\": true,\n    \"noUnusedLocals\": true,\n    \"rootDir\": \"schematics\",\n    \"outDir\": \"../../dist/my-lib/schematics\",\n    \"skipDefaultLibCheck\": true,\n    \"skipLibCheck\": true,\n    \"sourceMap\": true,\n    \"strictNullChecks\": true,\n    \"target\": \"es6\",\n    \"types\": [\n      \"jasmine\",\n      \"node\"\n    ]\n  },\n  \"include\": [\n    \"schematics/**/*\"\n  ],\n  \"exclude\": [\n    \"schematics/*/files/**/*\"\n  ]\n}\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyk2rtnidu0xcswyg7218m57s\">選項</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>rootDir</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9a7tnjtgr2h91q1o0ifbocf6o\">指定您的\n<code>schematics</code>資料夾包含要編譯的輸入檔案。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>outDir</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eo3z19powq7wrv337bid1ycoq\">對映到函式庫的輸出資料夾。預設情況下，這是工作區根目錄下\n<code>dist/my-lib</code>資料夾。</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yuqq5pf4j1qhee1y39jnxv1h\">要確保你的原理圖源檔案會被編譯進函式庫套件中，請把下列指令碼新增到庫專案的根資料夾（<code>projects/my-lib</code>）下的 <code>package.json</code> 檔案中。</p>\n<code-example header=\"projects/my-lib/package.json (Build Scripts)\" path=\"schematics-for-libraries/projects/my-lib/package.json\">\n{\n  \"name\": \"my-lib\",\n  \"version\": \"0.0.1\",\n  \"scripts\": {\n    \"build\": \"tsc -p tsconfig.schematics.json\",\n    \"postbuild\": \"copyfiles schematics/*/schema.json schematics/*/files/** schematics/collection.json ../../dist/my-lib/\"\n  },\n  \"peerDependencies\": {\n    \"@angular/common\": \"^16.1.0\",\n    \"@angular/core\": \"^16.1.0\"\n  },\n  \"schematics\": \"./schematics/collection.json\",\n  \"ng-add\": {\n    \"save\": \"devDependencies\"\n  },\n  \"devDependencies\": {\n    \"copyfiles\": \"file:../../node_modules/copyfiles\",\n    \"typescript\": \"file:../../node_modules/typescript\"\n  }\n}\n\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tj8lux7qswqyfayb270b9gsr\"><code>build</code> 指令碼使用自定義的 <code>tsconfig.schematics.json</code> 檔案來編譯你的原理圖。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hdek7tc8fquu0h36e4vdroc\"><code>postbuild</code> 指令碼會在 <code>build</code> 指令碼完成後複製原理圖檔案。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r4p89ndbkhl2wlq1mvw7t3z4\"><code>build</code> 和 <code>postbuild</code> 指令碼都需要用到 <code>copyfiles</code> 和 <code>typescript</code> 依賴項。要安裝這些依賴項，請導向到 <code>devDependencies</code> 中定義的路徑，並在執行這些指令碼之前執行 <code>npm install</code> 指令。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"providing-generation-support\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zsjzh8rwo8inpret06exllih\">提供產生器支援<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#providing-generation-support\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83kly8jc2wvezd7l7v86yvydt\">你可以把一個命名原理圖新增到集合中，讓你的使用者可以使用 <code>ng generate</code> 指令來建立你在庫中定義的工件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ysvduow8csoqjp1jpu8dvrnf\">我們假設你的函式庫定義了一項需要進行某些設定的服務 <code>my-service</code>。你希望使用者能夠用下面的 CLI 指令來生成它。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate my-lib:my-service\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n6m32ttmownklzl07fzktbs8\">首先，在 <code>schematics</code> 資料夾中新建一個子資料夾 <code>my-service</code>。</p>\n<h3 id=\"configure-the-new-schematic\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ratkdlkod58smkz0nmlq17rl\">設定新的原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#configure-the-new-schematic\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jgiryoxn1oauqxfonhuw79sx\">當你要把一個原理圖新增到集合中時，就必須在該集合的模式中指向它，並提供一些設定檔案來定義使用者可以傳給該指令的選項。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aoul61nwksf8ha0pbks6h82\">編輯一下 <code>schematics/collection.json</code> 檔案，指向新的原理圖子資料夾，並附上一個指向模式檔案的指標，該檔案將會指定新原理圖的輸入。</p>\n<code-example header=\"projects/my-lib/schematics/collection.json (Schematics Collection)\" path=\"schematics-for-libraries/projects/my-lib/schematics/collection.json\">\n{\n  \"$schema\": \"../../../node_modules/@angular-devkit/schematics/collection-schema.json\",\n  \"schematics\": {\n    \"ng-add\": {\n      \"description\": \"Add my library to the project.\",\n      \"factory\": \"./ng-add/index#ngAdd\",\n      \"schema\": \"./ng-add/schema.json\"\n    },\n    \"my-service\": {\n      \"description\": \"Generate a service in the project.\",\n      \"factory\": \"./my-service/index#myService\",\n      \"schema\": \"./my-service/schema.json\"\n    }\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqdvxe0z2xag7kmp8uk3wbfpz\">進入 <code>&lt;lib-root&gt;/schematics/my-service/</code> 目錄。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tok7ekb4nibcqiui6nh8vksu\">建立一個 <code>schema.json</code> 檔案並定義該原理圖的可用選項。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/schema.json (Schematic JSON Schema)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/schema.json\">\n{\n  \"$schema\": \"http://json-schema.org/schema\",\n  \"$id\": \"SchematicsMyService\",\n  \"title\": \"My Service Schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"description\": \"The name of the service.\",\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\",\n      \"format\": \"path\",\n      \"description\": \"The path to create the service.\",\n      \"visible\": false\n    },\n    \"project\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the project.\",\n      \"$default\": {\n        \"$source\": \"projectName\"\n      }\n    }\n   },\n  \"required\": [\n    \"name\"\n  ]\n}\n\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cxpsfd3hnrop1yv4q012aaki\"><em>id</em>：這個模式定義在集合中的唯一 ID。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ev55hglavv0ssw7wlohca6i5b\"><em>title</em>：一個人類可讀的模式描述。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b9k5cng0ginko7uvronqtu8qz\"><em>type</em>：由這些屬性提供的型別描述符。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bxfy5wc8tafa1q12e2ifs88dd\"><em>properties</em>：一個定義該原理圖可用選項的物件。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59llnc12us4kbjwpq8zj0konf\">每個選項都會把 key 與型別、描述和一個可選的別名關聯起來。該類別型定義了你所期望的值的形態，並在使用者請求你的原理圖給出用法幫助時顯示這份描述。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9q9plzomhlh8ugzbtags1oa0\">關於原理圖的更多自定義選項，請參閱工作區的模式定義。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"736i29n1dtaco06apu4urqywa\">建立一個 <code>schema.ts</code> 檔案，並定義一個介面，用於存放 <code>schema.json</code> 檔案中定義的各個選項的值。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/schema.ts (Schematic Interface)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/schema.ts\">\nexport interface Schema {\n  // The name of the service.\n  name: string;\n\n  // The path to create the service.\n  path?: string;\n\n  // The name of the project.\n  project?: string;\n}\n\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyk2rtnidu0xcswyg7218m57s\">選項</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">name</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1duwhgcx1wujnjv7hnrtx44a\">要為建立的服務提供的名稱</td>\n</tr>\n<tr>\n<td align=\"left\">path</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f09j6348j6jwiutf3wkdwkrxp\">覆蓋提供給原理圖的路徑。預設路徑值基於當前工作目錄。</td>\n</tr>\n<tr>\n<td align=\"left\">project</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pkm7z4ltkx29e3ewd8619603\">為原理圖提供要在其上執行的特定專案。在原理圖中，如果使用者未提供選項，則可以提供預設值。</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<h3 id=\"add-template-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5k2cddbg2hta9xlw5uzsl8wd9\">新增樣板檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#add-template-files\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byffjy2ci3r5dvqcm3fremfoo\">要把工件新增到專案中，你的原理圖就需要自己的樣板檔案。原理圖樣板支援特殊的語法來執行程式碼和變數替換。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hqm2grze7pgowmy84gnsewg5\">在 <code>schematics/my-service/</code> 目錄下建立一個 <code>files/</code> 資料夾。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19y3fxipbacmxrwo597xlwc3c\">建立一個名叫 <code>__name@dasherize__.service.ts.template</code> 的檔案，它定義了一個可以用來生成檔案的樣板。這裡的樣板會生成一個已把 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到其建構式函式中的服務。</p>\n<code-example lang=\"typescript\" header=\"projects/my-lib/schematics/my-service/files/__name@dasherize__.service.ts.template (Schematic Template)\">\n\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class &lt;%= classify(name) %&gt;Service {\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n}\n\n</code-example>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zbw2vf0vnb4vx60geddk8h2e\"><code>classify</code> 和 <code>dasherize</code> 方法是實用函式，你的原理圖會用它們來轉換你的樣板原始碼和檔案名。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eni5nznf0v466wyqpan8cypto\"><code>name</code> 是工廠函式提供的一個屬性。它與你在模式中定義的 <code>name</code> 是一樣的。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"add-the-factory-function\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkfp92wn0lqwx2ryf50kq0bjg\">新增工廠函式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#add-the-factory-function\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkal07o7vhrvchj40eearnpnz\">現在，你已經有了基礎設施，可以開始定義一個 main 函式來執行要對使用者專案做的各種修改了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dp6y0365lt1ajv0xee5hjppjk\">Schematics 框架提供了一個檔案樣板系統，它支援路徑和內容樣板。系統會操作在這個輸入檔案樹（<code>Tree</code>）中載入的檔案內或路徑中定義的佔位符，用傳給 <code>Rule</code> 的值來填充它們。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dw4rpabok2i9rk7hdlu4bnfl6\">關於這些資料結構和語法的詳細訊息，請參閱 <a href=\"https://github.com/angular/angular-cli/blob/main/packages/angular_devkit/schematics/README.md\">Schematics 的 README</a>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ew04tgyh0co70zc5b85klntd3\">建立主檔案 <code>index.ts</code> 併為你的原理圖工廠函式新增原始碼。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pldrlzpnvuvg8glhblxvfanu\">首先，匯入你需要的原理圖定義。Schematics 框架提供了許多實用函式來建立規則或在執行原理圖時和使用規則。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Imports)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"schematics-imports\">\nimport {\n  Rule, Tree, SchematicsException,\n  apply, url, applyTemplates, move,\n  chain, mergeWith\n} from '@angular-devkit/schematics';\n\nimport { strings, normalize, virtualFs, workspaces } from '@angular-devkit/core';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cayv5qhamyy1fm1jp5ivlttat\">匯入已定義的模式介面，它會為你的原理圖選項提供型別訊息。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Schema Import)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"schema-imports\">\nimport {\n  Rule, Tree, SchematicsException,\n  apply, url, applyTemplates, move,\n  chain, mergeWith\n} from '@angular-devkit/schematics';\n\nimport { strings, normalize, virtualFs, workspaces } from '@angular-devkit/core';\n\nimport { Schema as MyServiceSchema } from './schema';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92mja2ifgx7af11th6zhv0e4i\">要想建立 \"產生器原理圖\"，我們從一個空白的規則工廠開始。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Initial Rule)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.1.ts\" region=\"factory\">\nexport function myService(options: MyServiceSchema): Rule {\n  return (tree: Tree) =&gt; tree;\n}\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ile85kkr33jze11lmykadm6j\">這個規則工廠回傳樹而不做任何修改。這些選項都是從 <code>ng generate</code> 指令傳過來的選項值。</p>\n<h2 id=\"define-a-generation-rule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"boko0athqp4brsqjihg2fxk1k\">定義一個產生器規則<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#define-a-generation-rule\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awg7oxiumdfjjeui14huvatq0\">你現在有了一個框架，可用來建立一些真正修改使用者程式的程式碼，以便對庫中定義的服務進行設定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5y2y1uc6mkfgzdq4rpumiqmlc\">使用者安裝過此函式庫的 Angular 工作區中會包含多個專案（應用和函式庫）。使用者可以在指令行中指定一個專案，也可以使用它的預設值。在任何一種情況下，你的程式碼都需要知道應該在哪個專案上應用此原理圖，這樣才能從該專案的設定中檢索訊息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5toa3tnyibsgf2rlgo7vfkoku\">可以使用傳給工廠函式的 <code>Tree</code> 物件來做到這一點。透過 <code>Tree</code> 的一些方法，你可以訪問此工作區的完整檔案樹，以便在執行原理圖時讀寫檔案。</p>\n<h3 id=\"get-the-project-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77670o14lac2r8zh3x7rl32w2\">獲取專案設定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#get-the-project-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0xhnycx56artibdm23e1xbuz\">要確定目標專案，可以使用 <code>workspaces.readWorkspace</code> 方法在工作區的根目錄下讀取工作區設定檔案 <code>angular.json</code> 的內容。要想使用 <code>workspaces.readWorkspace</code>，你要先從這個 <code>Tree</code> 建立出一個 <code>workspaces.WorkspaceHost</code>。將以下程式碼新增到工廠函式中。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Schema Import)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"workspace\">\nimport {\n  Rule, Tree, SchematicsException,\n  apply, url, applyTemplates, move,\n  chain, mergeWith\n} from '@angular-devkit/schematics';\n\nimport { strings, normalize, virtualFs, workspaces } from '@angular-devkit/core';\n\nimport { Schema as MyServiceSchema } from './schema';\n\nfunction createHost(tree: Tree): workspaces.WorkspaceHost {\n  return {\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> readFile(path: string): Promise&lt;string&gt; {\n      const data = tree.read(path);\n      if (!data) {\n        throw new SchematicsException('File not found.');\n      }\n      return virtualFs.fileBufferToString(data);\n    },\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> writeFile(path: string, data: string): Promise&lt;void&gt; {\n      return tree.overwrite(path, data);\n    },\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> isDirectory(path: string): Promise&lt;boolean&gt; {\n      return !tree.exists(path) &amp;&amp; tree.getDir(path).subfiles.length &gt; 0;\n    },\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> isFile(path: string): Promise&lt;boolean&gt; {\n      return tree.exists(path);\n    },\n  };\n}\n\nexport function myService(options: MyServiceSchema): Rule {\n  return <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> (tree: Tree) =&gt; {\n    const host = createHost(tree);\n    const { workspace } = await workspaces.readWorkspace('/', host);\n\n  };\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65bvuzo16a0d0y432de72ex86\">一定要檢查此上下文是否存在，並丟擲相應的錯誤。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13oda8ahwdz2b3b47wvm2vfwi\">現在你有了專案名稱，用它來檢索指定專案的設定訊息。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Project)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"project-info\">\nconst project = (options.project != null) ? workspace.projects.get(options.project) : null;\nif (!project) {\n  throw new SchematicsException(`Invalid project name: ${options.project}`);\n}\n\nconst projectType = project.extensions.projectType === 'application' ? 'app' : 'lib';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6q46g97ili52anu7r596sezhl\">此 <code>workspace.projects</code> 物件包含指定專案的全部設定訊息。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ekapjmb4dhxfzp6eleljiojh\"><code>options.path</code> 決定了應用原理圖之後，要把原理圖樣板檔案移動到的位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96webnf7a4mc5lt7dbxowoooz\">原理圖模式中的 <code>path</code> 選項預設會替換為當前工作目錄。如果未定義 <code>path</code>，就使用專案設定中的 <code>sourceRoot</code> 和 <code>projectType</code> 來確定。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Project Info)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"path\">\nif (options.path === undefined) {\n  options.path = `${project.sourceRoot}/${projectType}`;\n}\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"define-the-rule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epggc8qwxcvlf4m5tcj89nw96\">定義規則<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#define-the-rule\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exxmduvqzjbyb1v1g8o5v41b3\"><code>Rule</code> 可以使用外部樣板檔案，對它們進行轉換，並使用轉換後的樣板回傳另一個 <code>Rule</code> 物件。可以用樣板來生成原理圖所需的任意自定義檔案。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49rou0ocznfad39yca7dqbz0o\">將以下程式碼新增到工廠函式中。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Template transform)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"template\">\nconst templateSource = apply(url('./files'), [\n  applyTemplates({\n    classify: strings.classify,\n    dasherize: strings.dasherize,\n    name: options.name\n  }),\n  move(normalize(options.path as string))\n]);\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xubgaqmffibk0p3s7z4lwoiw\">方法</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>apply()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4w6c2oz6awcb8pucduci1c7bj\">對源應用多個規則並回傳轉換後的源。它接受2個引數，一個源和一個規則陣列。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>url()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5agekbzvjrzkz89mh4sdzjpuf\">從檔案系統中讀取源檔案，相對於原理圖。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>applyTemplates()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4s8she14v6vf3smh5lyh8sbun\">接收方法和屬性的引數，用於在原理圖樣板和原理圖檔案名中提供可用的內容。回傳一個\n<code>Rule</code>。這裡定義了\n<code>classify()</code>和\n<code>dasherize()</code>方法，以及\n<code>name</code>屬性。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>classify()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1sm7yeth9nfl8k1my343rx6wf\">接受一個值並以標題格式回傳該值。例如，如果提供的名稱是\n<code>my service</code>，則回傳為\n<code>MyService</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>dasherize()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"av9jp3in5vg11mba7a63fotht\">接受一個值並以破折號和小寫格式回傳該值。例如，如果提供的名稱是MyService，則回傳為\n<code>my-service</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>move()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1e6g7h1gcjxgj1wtexdyh4mbx\">將提供的源檔案移動到它們的目標位置，當應用原理圖時。</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axtt7len442ksusj93nl9k5jl\">最後，規則工廠必須回傳一條規則。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Chain Rule)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"chain\">\nreturn chain([\n  mergeWith(templateSource)\n]);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ffs5f8ezao2suvqasmilcatt\">該 <code>chain()</code> 方法允許你把多個規則組合到一個規則中，這樣就可以在一個原理圖中執行多個操作。這裡你只是把樣板規則和原理圖要執行的程式碼合併在一起。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gyk9zd3s37t4zbdwz2xr9z5r\">請看原理圖規則函式的一個完整例子。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\">\nimport {\n  Rule, Tree, SchematicsException,\n  apply, url, applyTemplates, move,\n  chain, mergeWith\n} from '@angular-devkit/schematics';\n\nimport { strings, normalize, virtualFs, workspaces } from '@angular-devkit/core';\n\nimport { Schema as MyServiceSchema } from './schema';\n\nfunction createHost(tree: Tree): workspaces.WorkspaceHost {\n  return {\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> readFile(path: string): Promise&lt;string&gt; {\n      const data = tree.read(path);\n      if (!data) {\n        throw new SchematicsException('File not found.');\n      }\n      return virtualFs.fileBufferToString(data);\n    },\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> writeFile(path: string, data: string): Promise&lt;void&gt; {\n      return tree.overwrite(path, data);\n    },\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> isDirectory(path: string): Promise&lt;boolean&gt; {\n      return !tree.exists(path) &amp;&amp; tree.getDir(path).subfiles.length &gt; 0;\n    },\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> isFile(path: string): Promise&lt;boolean&gt; {\n      return tree.exists(path);\n    },\n  };\n}\n\nexport function myService(options: MyServiceSchema): Rule {\n  return <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> (tree: Tree) =&gt; {\n    const host = createHost(tree);\n    const { workspace } = await workspaces.readWorkspace('/', host);\n\n\n    const project = (options.project != null) ? workspace.projects.get(options.project) : null;\n    if (!project) {\n      throw new SchematicsException(`Invalid project name: ${options.project}`);\n    }\n\n    const projectType = project.extensions.projectType === 'application' ? 'app' : 'lib';\n\n    if (options.path === undefined) {\n      options.path = `${project.sourceRoot}/${projectType}`;\n    }\n\n    const templateSource = apply(url('./files'), [\n      applyTemplates({\n        classify: strings.classify,\n        dasherize: strings.dasherize,\n        name: options.name\n      }),\n      move(normalize(options.path as string))\n    ]);\n\n    return chain([\n      mergeWith(templateSource)\n    ]);\n  };\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xacdjiw9l16p3gpm036xsog7\">關於規則和實用工具方法的詳細訊息，請參閱<a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/schematics#provided-rules\">預定義規則</a>。</p>\n<h2 id=\"running-your-library-schematic\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aold32uyuob089icwmnjl9wkq\">執行你的庫原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#running-your-library-schematic\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87ly3xkay8a859bhxx90mmq97\">在建立庫和原理圖之後，你就可以安裝一個原理圖集合來執行你的專案了。下面的步驟介紹瞭如何使用上面建立的原理圖來生成服務。</p>\n<h3 id=\"build-your-library-and-schematics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2eb4ioq1v2m6yx8xp0peh5ax4\">建立你的函式庫和原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#build-your-library-and-schematics\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwht40o6i29fzgrk2ykug64ff\">在工作區的根目錄下，執行函式庫的 <code>ng build</code> 指令。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build my-lib\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22goufcjjw1gq0vuzjj0ejkov\">然後，進入函式庫目錄，建立原理圖</p>\n<code-example format=\"shell\" language=\"shell\">\n\ncd projects/my-lib\nnpm run build\n\n</code-example>\n<h3 id=\"link-the-library\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1o74d19gaulhr5nps8clfoo2t\">連結這個函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#link-the-library\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfc4lqsh3mjv413edsyb3pd7h\">這些函式庫和原理圖都已打包好了，就放在你工作區根目錄下的 <code>dist/my-lib</code> 資料夾中。要執行這個原理圖，你需要把這個函式庫連結到 <code>node_modules</code> 資料夾中。在工作區的根目錄下，執行 <code>npm link</code> 指令，並把你的可分發函式庫的路徑作為引數。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm link dist/my-lib\n\n</code-example>\n<h3 id=\"run-the-schematic\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sx8ycipbi0osno0gk9zpgj30\">執行原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#run-the-schematic\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hytclehxcdr6vztf2slcygz0\">現在你的函式庫已經安裝完畢，可以使用 <code>ng generate</code> 指令來執行原理圖了。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate my-lib:my-service --name my-data\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1osllwumnir4k6cyt0r2md25\">在控制台中，你會看到原理圖已經執行過了，<code>my-data.service.ts</code> 檔案被建立在了你的 app 資料夾中。</p>\n<code-example language=\"shell\" hidecopy=\"\">\n\nCREATE src/app/my-data.service.ts (208 bytes)\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/creating-libraries\n - guide/schematics\n - guide/schematics-authoring\n-->\n<!-- links from this doc:\n - api/common/http\n - api/common/http/HttpClient\n - api/core/Injectable\n - api/platform-browser/animations/async\n - guide/schematics-for-libraries#add-template-files\n - guide/schematics-for-libraries#add-the-factory-function\n - guide/schematics-for-libraries#build-your-library-and-schematics\n - guide/schematics-for-libraries#building-your-schematics\n - guide/schematics-for-libraries#configure-the-new-schematic\n - guide/schematics-for-libraries#creating-a-schematics-collection\n - guide/schematics-for-libraries#define-a-generation-rule\n - guide/schematics-for-libraries#define-dependency-type\n - guide/schematics-for-libraries#define-the-rule\n - guide/schematics-for-libraries#get-the-project-configuration\n - guide/schematics-for-libraries#link-the-library\n - guide/schematics-for-libraries#providing-generation-support\n - guide/schematics-for-libraries#providing-installation-support\n - guide/schematics-for-libraries#run-the-schematic\n - guide/schematics-for-libraries#running-your-library-schematic\n - guide/schematics-for-libraries#schematics-for-libraries\n - https://github.com/angular/angular-cli/blob/main/packages/angular_devkit/schematics/README.md\n - https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/schematics#provided-rules\n-->"}
{"id":"guide/schematics-for-libraries","title":"库的原理图","contents":"<div class=\"content\">\n  <h1 id=\"schematics-for-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0tpmwh7ayfgel7xsonxno8h3\">库的原理图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#schematics-for-libraries\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c67mo0zy32owx4mcuktajykv\">当创建 Angular 库时，你可以为同时为它打包进一组原理图，并把它与 Angular CLI 集成在一起。借助原理图，用户可以用 <code>ng add</code> 来安装你这个库的初始版本，可以用 <code>ng generate</code> 来创建你在库中定义的一些工件，可以用 <code>ng update</code> 来调整他们的项目，以支持你在库的新版本中引入的重大变更。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"658i64tiye6kda2gzcbx7cbfh\">这三种原理图都可以作为你打包进库中的集合的一部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94xvcsc00hund95w2r7a8962k\">下载<live-example downloadonly=\"\">库的原理图项目</live-example>以获取一个已完成下列步骤的例子。</p>\n<h2 id=\"creating-a-schematics-collection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpow710nw9arsmw4yue91x4na\">创建一个原理图集合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#creating-a-schematics-collection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8u426bzgp76avdupx6c6lkmy\">要开始一个集合，你需要创建一些原理图文件。下列步骤说明了如何在不修改任何项目文件的情况下添加初始支持。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfwfroq8yg91abdrhwgk7mqsl\">在库的根文件夹中，创建一个 <code>schematics/</code> 文件夹。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aegf62knclqlwfwd3j0o4lu9g\">在 <code>schematics/</code> 文件夹中，为你的第一个原理图创建一个 <code>ng-add/</code> 文件夹。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cclazxcgoszq4dwixw5eiodry\">在 <code>schematics/</code> 文件夹的根级，创建一个 <code>collection.json</code> 文件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hpvnrr524j8w0a14ttahgxva\">编辑 <code>collection.json</code> 文件来定义你的集合的初始模式定义。</p>\n<code-example header=\"projects/my-lib/schematics/collection.json (Schematics Collection)\" path=\"schematics-for-libraries/projects/my-lib/schematics/collection.1.json\">\n{\n  \"$schema\": \"../../../node_modules/@angular-devkit/schematics/collection-schema.json\",\n  \"schematics\": {\n    \"ng-add\": {\n      \"description\": \"Add my library to the project.\",\n      \"factory\": \"./ng-add/index#ngAdd\",\n      \"schema\": \"./ng-add/schema.json\"\n    }\n  }\n}\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"62312gvv6f2fq2jb3cb82nlc1\"><code>$schema</code> 路径是相对于 Angular Devkit 集合模式定义的。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epe57i8ed73nc0b9y02rn25cx\"><code>schematics</code> 对象描述了该集合中的命名原理图。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"at3ts7okrrtwqkmftqqho75zu\">第一个条目是名为 <code>ng-add</code> 的原理图。它包含了描述，并指向执行此原理图时要调用的工厂函数。</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj9qugh58p0m8d7a4n6ds0pjl\">在这个库项目的 <code>package.json</code> 文件中，添加一个 “schematics” 的条目，里面带有你的模式定义文件的路径。当 Angular CLI 运行命令时，会根据这个条目在你的集合中查找指定名字的原理图。</p>\n<code-example header=\"projects/my-lib/package.json (Schematics Collection Reference)\" path=\"schematics-for-libraries/projects/my-lib/package.json\" region=\"collection\">\n{\n  \"name\": \"my-lib\",\n  \"version\": \"0.0.1\",\n  \"schematics\": \"./schematics/collection.json\",\n}\n\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"130s5de8lzym0c3wjk348buzi\">你所创建的初始模式告诉 CLI 在哪里可以找到支持 <code>ng add</code> 命令的原理图。现在，你已准备好创建该原理图了。</p>\n<h2 id=\"providing-installation-support\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94bjhcepmuzvsps9f0r0bzs69\">提供安装支持<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#providing-installation-support\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fzwzm8b1jok5xa7enyj736hv\"><code>ng add</code> 命令的原理图可以增强用户的初始安装过程。可以按如下步骤定义这种原理图。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81n233alp4yy491dwchggzsei\">进入 <code>&lt;lib-root&gt;/schematics/ng-add/</code> 目录。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyooj6deeogp02qrnwvpvcyo8\">创建主文件 <code>index.ts</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"u8c6y7qo3ot0h1xnvjfh8ptg\">打开 <code>index.ts</code> 并添加原理图工厂函数的源代码。</p>\n<code-example header=\"projects/my-lib/schematics/ng-add/index.ts (ng-add Rule Factory)\" path=\"schematics-for-libraries/projects/my-lib/schematics/ng-add/index.ts\">\nimport { Rule } from '@angular-devkit/schematics';\nimport { addRootImport } from '@schematics/angular/utility';\nimport { Schema } from './schema';\n\nexport function ngAdd(options: Schema): Rule {\n  // Add an import `MyLibModule` from `my-lib` to the root of the user's project.\n  return addRootImport(options.project, ({code, external}) =&gt;\n    code`${external('MyLibModule', 'my-lib')}`);\n}\n\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"y7bhudvbudklrptl7r3jd1et\">Angular CLI将自动安装库的最新版本，这个例子通过将\n<code>MyLibModule</code>添加到应用程序的根目录进一步扩展了。 \n<code>addRootImport</code>函数接受一个需要返回代码块的回调函数。您可以在用\n<code>code</code>函数标记的字符串中编写任何代码，任何外部符号都必须用\n<code>external</code>函数包装，以确保生成适当的导入语句。</p>\n<h3 id=\"define-dependency-type\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pywyrx1e58sbneypuaqh3cox\">定义依赖类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#define-dependency-type\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f2km5c4v6dj2fnm4qyy2vks1p\">如果该库应该添加到 <code>dependencies</code> 中、<code>devDependencies</code> 中，或者不用保存到项目的 <code>package.json</code> 配置文件中，请使用 <code>ng-add</code> 的 <code>save</code> 选项进行配置</p>\n<code-example header=\"projects/my-lib/package.json (ng-add Reference)\" path=\"schematics-for-libraries/projects/my-lib/package.json\" region=\"ng-add\">\n\"ng-add\": {\n  \"save\": \"devDependencies\"\n},\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9oahsccg0lenq695w6sdn9ol9\">可能的值有：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bulyvki1easdsqhng9yr2vtyi\">数值</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>false</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axhx0wn01pzowye8334r9bcje\">不要将包添加到\n<code>package.json</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2evca1cjzfqcdpxpjdge4kcva\">将包添加到依赖项</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\"dependencies\"</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2evca1cjzfqcdpxpjdge4kcva\">将包添加到依赖项</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\"devDependencies\"</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asul6b74i2obzzpje1l19t0p2\">将包添加到devDependencies</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"building-your-schematics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4l3abe1q87gge838veufwbtns\">构建你的原理图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#building-your-schematics\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2axveauioqx4oazffswnbg4e8\">要把你的原理图和库打包到一起，就必须把这个库配置成单独构建原理图，然后再把它们添加到发布包中。你必须<em>先构建库</em>再构建原理图，这样才能把它们放到正确的目录下。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7g9t02ka8ahfzhs1rmnf565mu\">你的库需要一个自定义的 Typescript 配置文件，里面带有如何把原理图编译进库的发布版的一些指令。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4j9f6twqmdumpdjmbj57aciz\">要把这些原理图添加到库的发布包中，就要把这些脚本添加到该库的 <code>package.json</code> 文件中。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u2i5z5gw9itsfkfd5i9ahnus\">假设你在 Angular 工作区中有一个库项目 <code>my-lib</code>。要想告诉库如何构建原理图，就要在生成的 <code>tsconfig.lib.json</code> 库配置文件旁添加一个 <code>tsconfig.schematics.json</code> 文件。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ccuviw7hrh39mbcwuz4upfo0v\">编辑 <code>tsconfig.schematics.json</code> 文件，添加如下内容。</p>\n<code-example header=\"projects/my-lib/tsconfig.schematics.json (TypeScript Config)\" path=\"schematics-for-libraries/projects/my-lib/tsconfig.schematics.json\">\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"lib\": [\n      \"es2018\",\n      \"dom\"\n    ],\n    \"declaration\": true,\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"noEmitOnError\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noImplicitAny\": true,\n    \"noImplicitThis\": true,\n    \"noUnusedParameters\": true,\n    \"noUnusedLocals\": true,\n    \"rootDir\": \"schematics\",\n    \"outDir\": \"../../dist/my-lib/schematics\",\n    \"skipDefaultLibCheck\": true,\n    \"skipLibCheck\": true,\n    \"sourceMap\": true,\n    \"strictNullChecks\": true,\n    \"target\": \"es6\",\n    \"types\": [\n      \"jasmine\",\n      \"node\"\n    ]\n  },\n  \"include\": [\n    \"schematics/**/*\"\n  ],\n  \"exclude\": [\n    \"schematics/*/files/**/*\"\n  ]\n}\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyk2rtnidu0xcswyg7218m57s\">选项</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>rootDir</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9a7tnjtgr2h91q1o0ifbocf6o\">指定您的\n<code>schematics</code>文件夹包含要编译的输入文件。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>outDir</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eo3z19powq7wrv337bid1ycoq\">映射到库的输出文件夹。默认情况下，这是工作区根目录下\n<code>dist/my-lib</code>文件夹。</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yuqq5pf4j1qhee1y39jnxv1h\">要确保你的原理图源文件会被编译进库包中，请把下列脚本添加到库项目的根文件夹（<code>projects/my-lib</code>）下的 <code>package.json</code> 文件中。</p>\n<code-example header=\"projects/my-lib/package.json (Build Scripts)\" path=\"schematics-for-libraries/projects/my-lib/package.json\">\n{\n  \"name\": \"my-lib\",\n  \"version\": \"0.0.1\",\n  \"scripts\": {\n    \"build\": \"tsc -p tsconfig.schematics.json\",\n    \"postbuild\": \"copyfiles schematics/*/schema.json schematics/*/files/** schematics/collection.json ../../dist/my-lib/\"\n  },\n  \"peerDependencies\": {\n    \"@angular/common\": \"^16.1.0\",\n    \"@angular/core\": \"^16.1.0\"\n  },\n  \"schematics\": \"./schematics/collection.json\",\n  \"ng-add\": {\n    \"save\": \"devDependencies\"\n  },\n  \"devDependencies\": {\n    \"copyfiles\": \"file:../../node_modules/copyfiles\",\n    \"typescript\": \"file:../../node_modules/typescript\"\n  }\n}\n\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tj8lux7qswqyfayb270b9gsr\"><code>build</code> 脚本使用自定义的 <code>tsconfig.schematics.json</code> 文件来编译你的原理图。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hdek7tc8fquu0h36e4vdroc\"><code>postbuild</code> 脚本会在 <code>build</code> 脚本完成后复制原理图文件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r4p89ndbkhl2wlq1mvw7t3z4\"><code>build</code> 和 <code>postbuild</code> 脚本都需要用到 <code>copyfiles</code> 和 <code>typescript</code> 依赖项。要安装这些依赖项，请导航到 <code>devDependencies</code> 中定义的路径，并在运行这些脚本之前运行 <code>npm install</code> 命令。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"providing-generation-support\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zsjzh8rwo8inpret06exllih\">提供生成器支持<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#providing-generation-support\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83kly8jc2wvezd7l7v86yvydt\">你可以把一个命名原理图添加到集合中，让你的用户可以使用 <code>ng generate</code> 命令来创建你在库中定义的工件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ysvduow8csoqjp1jpu8dvrnf\">我们假设你的库定义了一项需要进行某些设置的服务 <code>my-service</code>。你希望用户能够用下面的 CLI 命令来生成它。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate my-lib:my-service\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n6m32ttmownklzl07fzktbs8\">首先，在 <code>schematics</code> 文件夹中新建一个子文件夹 <code>my-service</code>。</p>\n<h3 id=\"configure-the-new-schematic\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ratkdlkod58smkz0nmlq17rl\">配置新的原理图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#configure-the-new-schematic\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jgiryoxn1oauqxfonhuw79sx\">当你要把一个原理图添加到集合中时，就必须在该集合的模式中指向它，并提供一些配置文件来定义用户可以传给该命令的选项。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aoul61nwksf8ha0pbks6h82\">编辑一下 <code>schematics/collection.json</code> 文件，指向新的原理图子文件夹，并附上一个指向模式文件的指针，该文件将会指定新原理图的输入。</p>\n<code-example header=\"projects/my-lib/schematics/collection.json (Schematics Collection)\" path=\"schematics-for-libraries/projects/my-lib/schematics/collection.json\">\n{\n  \"$schema\": \"../../../node_modules/@angular-devkit/schematics/collection-schema.json\",\n  \"schematics\": {\n    \"ng-add\": {\n      \"description\": \"Add my library to the project.\",\n      \"factory\": \"./ng-add/index#ngAdd\",\n      \"schema\": \"./ng-add/schema.json\"\n    },\n    \"my-service\": {\n      \"description\": \"Generate a service in the project.\",\n      \"factory\": \"./my-service/index#myService\",\n      \"schema\": \"./my-service/schema.json\"\n    }\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqdvxe0z2xag7kmp8uk3wbfpz\">进入 <code>&lt;lib-root&gt;/schematics/my-service/</code> 目录。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tok7ekb4nibcqiui6nh8vksu\">创建一个 <code>schema.json</code> 文件并定义该原理图的可用选项。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/schema.json (Schematic JSON Schema)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/schema.json\">\n{\n  \"$schema\": \"http://json-schema.org/schema\",\n  \"$id\": \"SchematicsMyService\",\n  \"title\": \"My Service Schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"description\": \"The name of the service.\",\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\",\n      \"format\": \"path\",\n      \"description\": \"The path to create the service.\",\n      \"visible\": false\n    },\n    \"project\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the project.\",\n      \"$default\": {\n        \"$source\": \"projectName\"\n      }\n    }\n   },\n  \"required\": [\n    \"name\"\n  ]\n}\n\n\n</code-example>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cxpsfd3hnrop1yv4q012aaki\"><em>id</em>：这个模式定义在集合中的唯一 ID。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ev55hglavv0ssw7wlohca6i5b\"><em>title</em>：一个人类可读的模式描述。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b9k5cng0ginko7uvronqtu8qz\"><em>type</em>：由这些属性提供的类型描述符。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bxfy5wc8tafa1q12e2ifs88dd\"><em>properties</em>：一个定义该原理图可用选项的对象。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59llnc12us4kbjwpq8zj0konf\">每个选项都会把 key 与类型、描述和一个可选的别名关联起来。该类型定义了你所期望的值的形态，并在用户请求你的原理图给出用法帮助时显示这份描述。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9q9plzomhlh8ugzbtags1oa0\">关于原理图的更多自定义选项，请参阅工作区的模式定义。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"736i29n1dtaco06apu4urqywa\">创建一个 <code>schema.ts</code> 文件，并定义一个接口，用于存放 <code>schema.json</code> 文件中定义的各个选项的值。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/schema.ts (Schematic Interface)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/schema.ts\">\nexport interface Schema {\n  // The name of the service.\n  name: string;\n\n  // The path to create the service.\n  path?: string;\n\n  // The name of the project.\n  project?: string;\n}\n\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyk2rtnidu0xcswyg7218m57s\">选项</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">name</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1duwhgcx1wujnjv7hnrtx44a\">要为创建的服务提供的名称</td>\n</tr>\n<tr>\n<td align=\"left\">path</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f09j6348j6jwiutf3wkdwkrxp\">覆盖提供给原理图的路径。默认路径值基于当前工作目录。</td>\n</tr>\n<tr>\n<td align=\"left\">project</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pkm7z4ltkx29e3ewd8619603\">为原理图提供要在其上运行的特定项目。在原理图中，如果用户未提供选项，则可以提供默认值。</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<h3 id=\"add-template-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5k2cddbg2hta9xlw5uzsl8wd9\">添加模板文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#add-template-files\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byffjy2ci3r5dvqcm3fremfoo\">要把工件添加到项目中，你的原理图就需要自己的模板文件。原理图模板支持特殊的语法来执行代码和变量替换。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hqm2grze7pgowmy84gnsewg5\">在 <code>schematics/my-service/</code> 目录下创建一个 <code>files/</code> 文件夹。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19y3fxipbacmxrwo597xlwc3c\">创建一个名叫 <code>__name@dasherize__.service.ts.template</code> 的文件，它定义了一个可以用来生成文件的模板。这里的模板会生成一个已把 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到其构造函数中的服务。</p>\n<code-example lang=\"typescript\" header=\"projects/my-lib/schematics/my-service/files/__name@dasherize__.service.ts.template (Schematic Template)\">\n\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class &lt;%= classify(name) %&gt;Service {\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n}\n\n</code-example>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zbw2vf0vnb4vx60geddk8h2e\"><code>classify</code> 和 <code>dasherize</code> 方法是实用函数，你的原理图会用它们来转换你的模板源码和文件名。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eni5nznf0v466wyqpan8cypto\"><code>name</code> 是工厂函数提供的一个属性。它与你在模式中定义的 <code>name</code> 是一样的。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"add-the-factory-function\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkfp92wn0lqwx2ryf50kq0bjg\">添加工厂函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#add-the-factory-function\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkal07o7vhrvchj40eearnpnz\">现在，你已经有了基础设施，可以开始定义一个 main 函数来执行要对用户项目做的各种修改了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dp6y0365lt1ajv0xee5hjppjk\">Schematics 框架提供了一个文件模板系统，它支持路径和内容模板。系统会操作在这个输入文件树（<code>Tree</code>）中加载的文件内或路径中定义的占位符，用传给 <code>Rule</code> 的值来填充它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dw4rpabok2i9rk7hdlu4bnfl6\">关于这些数据结构和语法的详细信息，请参阅 <a href=\"https://github.com/angular/angular-cli/blob/main/packages/angular_devkit/schematics/README.md\">Schematics 的 README</a>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ew04tgyh0co70zc5b85klntd3\">创建主文件 <code>index.ts</code> 并为你的原理图工厂函数添加源代码。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pldrlzpnvuvg8glhblxvfanu\">首先，导入你需要的原理图定义。Schematics 框架提供了许多实用函数来创建规则或在执行原理图时和使用规则。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Imports)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"schematics-imports\">\nimport {\n  Rule, Tree, SchematicsException,\n  apply, url, applyTemplates, move,\n  chain, mergeWith\n} from '@angular-devkit/schematics';\n\nimport { strings, normalize, virtualFs, workspaces } from '@angular-devkit/core';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cayv5qhamyy1fm1jp5ivlttat\">导入已定义的模式接口，它会为你的原理图选项提供类型信息。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Schema Import)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"schema-imports\">\nimport {\n  Rule, Tree, SchematicsException,\n  apply, url, applyTemplates, move,\n  chain, mergeWith\n} from '@angular-devkit/schematics';\n\nimport { strings, normalize, virtualFs, workspaces } from '@angular-devkit/core';\n\nimport { Schema as MyServiceSchema } from './schema';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92mja2ifgx7af11th6zhv0e4i\">要想构建 \"生成器原理图\"，我们从一个空白的规则工厂开始。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Initial Rule)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.1.ts\" region=\"factory\">\nexport function myService(options: MyServiceSchema): Rule {\n  return (tree: Tree) =&gt; tree;\n}\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ile85kkr33jze11lmykadm6j\">这个规则工厂返回树而不做任何修改。这些选项都是从 <code>ng generate</code> 命令传过来的选项值。</p>\n<h2 id=\"define-a-generation-rule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"boko0athqp4brsqjihg2fxk1k\">定义一个生成器规则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#define-a-generation-rule\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awg7oxiumdfjjeui14huvatq0\">你现在有了一个框架，可用来创建一些真正修改用户程序的代码，以便对库中定义的服务进行设置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5y2y1uc6mkfgzdq4rpumiqmlc\">用户安装过此库的 Angular 工作区中会包含多个项目（应用和库）。用户可以在命令行中指定一个项目，也可以使用它的默认值。在任何一种情况下，你的代码都需要知道应该在哪个项目上应用此原理图，这样才能从该项目的配置中检索信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5toa3tnyibsgf2rlgo7vfkoku\">可以使用传给工厂函数的 <code>Tree</code> 对象来做到这一点。通过 <code>Tree</code> 的一些方法，你可以访问此工作区的完整文件树，以便在运行原理图时读写文件。</p>\n<h3 id=\"get-the-project-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77670o14lac2r8zh3x7rl32w2\">获取项目配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#get-the-project-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0xhnycx56artibdm23e1xbuz\">要确定目标项目，可以使用 <code>workspaces.readWorkspace</code> 方法在工作区的根目录下读取工作区配置文件 <code>angular.json</code> 的内容。要想使用 <code>workspaces.readWorkspace</code>，你要先从这个 <code>Tree</code> 创建出一个 <code>workspaces.WorkspaceHost</code>。将以下代码添加到工厂函数中。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Schema Import)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"workspace\">\nimport {\n  Rule, Tree, SchematicsException,\n  apply, url, applyTemplates, move,\n  chain, mergeWith\n} from '@angular-devkit/schematics';\n\nimport { strings, normalize, virtualFs, workspaces } from '@angular-devkit/core';\n\nimport { Schema as MyServiceSchema } from './schema';\n\nfunction createHost(tree: Tree): workspaces.WorkspaceHost {\n  return {\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> readFile(path: string): Promise&lt;string&gt; {\n      const data = tree.read(path);\n      if (!data) {\n        throw new SchematicsException('File not found.');\n      }\n      return virtualFs.fileBufferToString(data);\n    },\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> writeFile(path: string, data: string): Promise&lt;void&gt; {\n      return tree.overwrite(path, data);\n    },\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> isDirectory(path: string): Promise&lt;boolean&gt; {\n      return !tree.exists(path) &amp;&amp; tree.getDir(path).subfiles.length &gt; 0;\n    },\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> isFile(path: string): Promise&lt;boolean&gt; {\n      return tree.exists(path);\n    },\n  };\n}\n\nexport function myService(options: MyServiceSchema): Rule {\n  return <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> (tree: Tree) =&gt; {\n    const host = createHost(tree);\n    const { workspace } = await workspaces.readWorkspace('/', host);\n\n  };\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65bvuzo16a0d0y432de72ex86\">一定要检查此上下文是否存在，并抛出相应的错误。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13oda8ahwdz2b3b47wvm2vfwi\">现在你有了项目名称，用它来检索指定项目的配置信息。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Project)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"project-info\">\nconst project = (options.project != null) ? workspace.projects.get(options.project) : null;\nif (!project) {\n  throw new SchematicsException(`Invalid project name: ${options.project}`);\n}\n\nconst projectType = project.extensions.projectType === 'application' ? 'app' : 'lib';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6q46g97ili52anu7r596sezhl\">此 <code>workspace.projects</code> 对象包含指定项目的全部配置信息。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ekapjmb4dhxfzp6eleljiojh\"><code>options.path</code> 决定了应用原理图之后，要把原理图模板文件移动到的位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96webnf7a4mc5lt7dbxowoooz\">原理图模式中的 <code>path</code> 选项默认会替换为当前工作目录。如果未定义 <code>path</code>，就使用项目配置中的 <code>sourceRoot</code> 和 <code>projectType</code> 来确定。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Project Info)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"path\">\nif (options.path === undefined) {\n  options.path = `${project.sourceRoot}/${projectType}`;\n}\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"define-the-rule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epggc8qwxcvlf4m5tcj89nw96\">定义规则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#define-the-rule\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exxmduvqzjbyb1v1g8o5v41b3\"><code>Rule</code> 可以使用外部模板文件，对它们进行转换，并使用转换后的模板返回另一个 <code>Rule</code> 对象。可以用模板来生成原理图所需的任意自定义文件。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49rou0ocznfad39yca7dqbz0o\">将以下代码添加到工厂函数中。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Template transform)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"template\">\nconst templateSource = apply(url('./files'), [\n  applyTemplates({\n    classify: strings.classify,\n    dasherize: strings.dasherize,\n    name: options.name\n  }),\n  move(normalize(options.path as string))\n]);\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xubgaqmffibk0p3s7z4lwoiw\">方法</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>apply()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4w6c2oz6awcb8pucduci1c7bj\">对源应用多个规则并返回转换后的源。它接受2个参数，一个源和一个规则数组。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>url()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5agekbzvjrzkz89mh4sdzjpuf\">从文件系统中读取源文件，相对于原理图。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>applyTemplates()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4s8she14v6vf3smh5lyh8sbun\">接收方法和属性的参数，用于在原理图模板和原理图文件名中提供可用的内容。返回一个\n<code>Rule</code>。这里定义了\n<code>classify()</code>和\n<code>dasherize()</code>方法，以及\n<code>name</code>属性。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>classify()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1sm7yeth9nfl8k1my343rx6wf\">接受一个值并以标题格式返回该值。例如，如果提供的名称是\n<code>my service</code>，则返回为\n<code>MyService</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>dasherize()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"av9jp3in5vg11mba7a63fotht\">接受一个值并以破折号和小写格式返回该值。例如，如果提供的名称是MyService，则返回为\n<code>my-service</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>move()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1e6g7h1gcjxgj1wtexdyh4mbx\">将提供的源文件移动到它们的目标位置，当应用原理图时。</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axtt7len442ksusj93nl9k5jl\">最后，规则工厂必须返回一条规则。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Chain Rule)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"chain\">\nreturn chain([\n  mergeWith(templateSource)\n]);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ffs5f8ezao2suvqasmilcatt\">该 <code>chain()</code> 方法允许你把多个规则组合到一个规则中，这样就可以在一个原理图中执行多个操作。这里你只是把模板规则和原理图要执行的代码合并在一起。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gyk9zd3s37t4zbdwz2xr9z5r\">请看原理图规则函数的一个完整例子。</p>\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\">\nimport {\n  Rule, Tree, SchematicsException,\n  apply, url, applyTemplates, move,\n  chain, mergeWith\n} from '@angular-devkit/schematics';\n\nimport { strings, normalize, virtualFs, workspaces } from '@angular-devkit/core';\n\nimport { Schema as MyServiceSchema } from './schema';\n\nfunction createHost(tree: Tree): workspaces.WorkspaceHost {\n  return {\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> readFile(path: string): Promise&lt;string&gt; {\n      const data = tree.read(path);\n      if (!data) {\n        throw new SchematicsException('File not found.');\n      }\n      return virtualFs.fileBufferToString(data);\n    },\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> writeFile(path: string, data: string): Promise&lt;void&gt; {\n      return tree.overwrite(path, data);\n    },\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> isDirectory(path: string): Promise&lt;boolean&gt; {\n      return !tree.exists(path) &amp;&amp; tree.getDir(path).subfiles.length &gt; 0;\n    },\n    <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> isFile(path: string): Promise&lt;boolean&gt; {\n      return tree.exists(path);\n    },\n  };\n}\n\nexport function myService(options: MyServiceSchema): Rule {\n  return <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> (tree: Tree) =&gt; {\n    const host = createHost(tree);\n    const { workspace } = await workspaces.readWorkspace('/', host);\n\n\n    const project = (options.project != null) ? workspace.projects.get(options.project) : null;\n    if (!project) {\n      throw new SchematicsException(`Invalid project name: ${options.project}`);\n    }\n\n    const projectType = project.extensions.projectType === 'application' ? 'app' : 'lib';\n\n    if (options.path === undefined) {\n      options.path = `${project.sourceRoot}/${projectType}`;\n    }\n\n    const templateSource = apply(url('./files'), [\n      applyTemplates({\n        classify: strings.classify,\n        dasherize: strings.dasherize,\n        name: options.name\n      }),\n      move(normalize(options.path as string))\n    ]);\n\n    return chain([\n      mergeWith(templateSource)\n    ]);\n  };\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xacdjiw9l16p3gpm036xsog7\">关于规则和实用工具方法的详细信息，请参阅<a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/schematics#provided-rules\">预定义规则</a>。</p>\n<h2 id=\"running-your-library-schematic\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aold32uyuob089icwmnjl9wkq\">运行你的库原理图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#running-your-library-schematic\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87ly3xkay8a859bhxx90mmq97\">在构建库和原理图之后，你就可以安装一个原理图集合来运行你的项目了。下面的步骤介绍了如何使用上面创建的原理图来生成服务。</p>\n<h3 id=\"build-your-library-and-schematics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2eb4ioq1v2m6yx8xp0peh5ax4\">构建你的库和原理图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#build-your-library-and-schematics\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwht40o6i29fzgrk2ykug64ff\">在工作区的根目录下，运行库的 <code>ng build</code> 命令。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build my-lib\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22goufcjjw1gq0vuzjj0ejkov\">然后，进入库目录，构建原理图</p>\n<code-example format=\"shell\" language=\"shell\">\n\ncd projects/my-lib\nnpm run build\n\n</code-example>\n<h3 id=\"link-the-library\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1o74d19gaulhr5nps8clfoo2t\">链接这个库<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#link-the-library\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfc4lqsh3mjv413edsyb3pd7h\">这些库和原理图都已打包好了，就放在你工作区根目录下的 <code>dist/my-lib</code> 文件夹中。要运行这个原理图，你需要把这个库链接到 <code>node_modules</code> 文件夹中。在工作区的根目录下，运行 <code>npm link</code> 命令，并把你的可分发库的路径作为参数。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm link dist/my-lib\n\n</code-example>\n<h3 id=\"run-the-schematic\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sx8ycipbi0osno0gk9zpgj30\">运行原理图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#run-the-schematic\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hytclehxcdr6vztf2slcygz0\">现在你的库已经安装完毕，可以使用 <code>ng generate</code> 命令来运行原理图了。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate my-lib:my-service --name my-data\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1osllwumnir4k6cyt0r2md25\">在控制台中，你会看到原理图已经运行过了，<code>my-data.service.ts</code> 文件被创建在了你的 app 文件夹中。</p>\n<code-example language=\"shell\" hidecopy=\"\">\n\nCREATE src/app/my-data.service.ts (208 bytes)\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/creating-libraries\n - guide/schematics\n - guide/schematics-authoring\n-->\n<!-- links from this doc:\n - api/common/http\n - api/common/http/HttpClient\n - api/core/Injectable\n - api/platform-browser/animations/async\n - guide/schematics-for-libraries#add-template-files\n - guide/schematics-for-libraries#add-the-factory-function\n - guide/schematics-for-libraries#build-your-library-and-schematics\n - guide/schematics-for-libraries#building-your-schematics\n - guide/schematics-for-libraries#configure-the-new-schematic\n - guide/schematics-for-libraries#creating-a-schematics-collection\n - guide/schematics-for-libraries#define-a-generation-rule\n - guide/schematics-for-libraries#define-dependency-type\n - guide/schematics-for-libraries#define-the-rule\n - guide/schematics-for-libraries#get-the-project-configuration\n - guide/schematics-for-libraries#link-the-library\n - guide/schematics-for-libraries#providing-generation-support\n - guide/schematics-for-libraries#providing-installation-support\n - guide/schematics-for-libraries#run-the-schematic\n - guide/schematics-for-libraries#running-your-library-schematic\n - guide/schematics-for-libraries#schematics-for-libraries\n - https://github.com/angular/angular-cli/blob/main/packages/angular_devkit/schematics/README.md\n - https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/schematics#provided-rules\n-->"}
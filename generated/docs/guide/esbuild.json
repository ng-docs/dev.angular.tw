{"id":"guide/esbuild","title":"使用 Angular CLI 的新构建系统入门","contents":"<div class=\"content\">\n  <h1 id=\"getting-started-with-the-angular-clis-new-build-system\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"851riiai7imirtb6b6se220ln\">使用 Angular CLI 的新构建系统入门<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#getting-started-with-the-angular-clis-new-build-system\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9yrz43osae8ht7a3ah7duuur\">在 v17 及更高版本中，新的构建系统提供了一种改进的构建 Angular 应用程序的方法。这个新的构建系统包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brr3umunat7p3wx4wpqq2w2x7\">使用 ESM 的现代输出格式，带有动态导入表达式以支持延迟模块加载。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9u48qvxb9wl9r8sq04qwi2dud\">初始构建和增量重建的构建时性能更快。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"424qyzifnoh6larzgbtuv3b9q\">较新的 JavaScript 生态系统工具，例如<a href=\"https://esbuild.github.io/\">esbuild</a>和<a href=\"https://vitejs.dev/\">Vite</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dr844eghkoibbg0gbrzzgzppa\">集成的 SSR 和预渲染功能</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dcul830ytdw2tso997ynd8i5\">这个新的构建系统是稳定的，并且完全支持与 Angular 应用程序一起使用。 你可以迁移到新的构建系统，该系统适用于使用 \n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> 构建器的应用程序。 如果使用自定义构建器，请参考该构建器的文档，了解可能的迁移选项。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bu6khm5er9xrjoflx2j3buxaa\">现有基于 Webpack 的构建系统仍然被认为是稳定的，并且得到全面支持。 应用程序可以继续使用 \n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> 构建器，在更新时不会自动迁移。</p>\n</div>\n<h2 id=\"for-new-applications\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ocsdrlw5kvnkhdpph5ych1p7\">对于新应用程序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#for-new-applications\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alopbgds8avk3lhyzhp5g2mc7\">新应用程序将默认使用这个新的构建系统，通过 \n<code>application</code> 构建器。</p>\n<h2 id=\"for-existing-applications\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsfzgizjbbgjfrvlcbi93gr31\">对于现有应用程序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#for-existing-applications\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec3ip2h7uoqm0k8w0cdhv1rv1\">对于现有项目，你可以选择使用新构建器的两种不同选项来逐个应用程序进行选择性使用。 两种选项都被 Angular 团队认为是稳定的并得到全面支持。 选择使用哪种选项取决于你需要进行多少改变来迁移，以及你希望在项目中使用哪些新功能。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2leyr3qep6ef1mnw2agtncsxm\">构建器</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2sh3wxohsfrspm1b47vnqjcr5\">配置更改</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f46tqcikm4tgov1jhoxdjlvit\">代码更改</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"z0mj4u12exb450o8t1l8iwht\">集成的 SSR</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>application</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2576zr6pf8w8ct6kcdarjhfgk\">需要进行多个选项更改。如果使用 SSR，需要更新额外的目标。</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wbuadgtym14vrtwlq09c6xls\">是，如果使用 SSR</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qzstzs5yva1ifawityjo2t6d\">是</td>\n</tr>\n<tr>\n<td align=\"left\"><code>browser-esbuild</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xtg4mizjryo3unir835cdjgo\">仅构建器名称</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aiqiizjc3vhrwkbaupg2hgti3\">不*</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2j26jl1x07opyz4dbfelj957\">不</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kejcnsf7eows7lre421u94ij\">通常更喜欢使用\n<code>application</code>构建器，因为它改进了服务器端渲染（SSR）构建，并使客户端渲染项目更容易在未来采用SSR。但是，这需要更多的迁移工作，特别是对于现有的SSR应用程序来说。如果\n<code>application</code>构建器对于你的项目来说很难采用，\n<code>browser-esbuild</code>可能是一个更简单的解决方案，它可以带来大部分构建性能优势，同时变更较少。</p>\n<h3 id=\"using-the-browser-esbuild-builder\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dlynntjx355aqx2ke3frlm73\">使用\n<code>browser-esbuild</code>构建器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#using-the-browser-esbuild-builder\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2mrujj899a07rdzim660ycqo\">在\n<code>@angular-devkit/build-angular</code>包中提供了一个名为\n<code>browser-esbuild</code>的构建器，这个包在由Angular CLI生成的应用程序中存在。这个构建器是现有\n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code>构建器的即插即用替代，提供了现有的浏览器应用程序构建系统。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81oq4az4c4rboxtoyofe0wpcv\">兼容性选项旨在最小化初始迁移应用程序所需的更改量。这是通过另一个构建器（\n<code>browser-esbuild</code>）提供的。你可以更新任何应用程序目标的\n<code>build</code>目标以迁移到新的构建系统。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9spw2i9szajkpnh272sc3ty61\">以下是你通常会在应用程序的 <code>angular.json</code> 中找到的内容：</p>\n<code-example language=\"json\" hidecopy=\"true\">\n...\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser\",\n...\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vkficvjtoyx3jb8yu6mj2xus\">更改 <code>builder</code> 字段就是你要进行的唯一更改。</p>\n<code-example language=\"json\" hidecopy=\"true\">\n...\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser-esbuild\",\n...\n</code-example>\n<h3 id=\"using-the-application-builder\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jemjwjw8rzbcjb9etl7xljfj\">使用\n<code>application</code>构建器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#using-the-application-builder\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c072pgi6zeyw5diwivzpaq6t4\">在由Angular CLI生成的应用程序中，\n<code>@angular-devkit/build-angular</code>包中还提供了一个名为\n<code>application</code>的构建器。这个构建器是通过\n<code>ng new</code>创建的所有新应用程序的默认值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9spw2i9szajkpnh272sc3ty61\">以下是你通常会在应用程序的 <code>angular.json</code> 中找到的内容：</p>\n<code-example language=\"json\" hidecopy=\"true\">\n...\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser\",\n...\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e28dtzun0ix5qecd9hh8eexqy\">更改\n<code>builder</code>字段是你需要进行的第一个更改。</p>\n<code-example language=\"json\" hidecopy=\"true\">\n...\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:application\",\n...\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8e6xd03w0lk3x2s8dgkunwqa\">一旦构建器名称已更改，\n<code>build</code>目标内的选项将需要更新。下表列出了所有需要调整或移除的\n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code>构建器选项。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drnjuqmcgjb4cd7jb24lyai50\"><code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code>选项</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehouyeifhpzg8osbkqtw2bzju\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>main</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hlo2zri6pfe00dfxsn096t3x\">将选项重命名为\n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>polyfills</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7bwnnpgfjfedgvep2kn249bs\">将值转换为数组</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9snmztewkk29mf0jps0uns9v\">可能已经迁移</td>\n</tr>\n<tr>\n<td align=\"left\"><code>buildOptimizer</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5or17udmsdva7inv4tdacim\">移除选项</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>resourcesOutputPath</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2yeqir89843xhm77kppvzjxx9\">将选项移动到\n<code>outputPath.media</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9w54qdstla0fvw7wbdile6059\">默认为\n<code>media</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>vendorChunk</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5or17udmsdva7inv4tdacim\">移除选项</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>commonChunk</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5or17udmsdva7inv4tdacim\">移除选项</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>deployUrl</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5or17udmsdva7inv4tdacim\">移除选项</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>ngswConfigPath</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7uj4ycdn9k0lde7zv078s75y\">将值移动到\n<code>serviceWorker</code>并移除选项</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bnudyfhbpqienztg5ex3figy\"><code>serviceWorker</code> 现在要么是 \n<code>false</code>，要么是一个配置路径</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qonfi9o1p35fppjlrnymok53\">如果应用当前没有使用 SSR，这应该是允许 \n<code>ng build</code> 正常工作的最后一步。 第一次执行 \n<code>ng build</code> 后，根据行为差异或应用程序对特定于 Webpack 功能的使用，可能会出现新的警告或错误。 许多警告将提供如何解决问题的建议。 如果发现警告不正确或解决方案不明显，请在 \n<a href=\"https://github.com/angular/angular-cli/issues\">GitHub</a> 上提出问题。 此外，本指南的后续部分提供了关于几种特定情况以及当前已知问题的额外信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77vjq1ze5dxbnb69c82pu0jlv\">对于新使用 SSR 的应用程序，\n<a href=\"/guide/ssr\">Angular SSR 指南</a> 提供了关于为应用程序添加 SSR 设置的过程的额外信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4lr3vqgr9prqvzrjh82pn05n\">对于已经使用 SSR 的应用程序，需要进行额外调整以更新应用程序服务器，以支持新的集成 SSR 功能。 现在 \n<code>application</code> 构建器为所有以下现有构建器提供了集成功能：</p>\n<ul>\n<li><code>app-shell</code></li>\n<li><code>prerender</code></li>\n<li><code>server</code></li>\n<li><code>ssr-dev-server</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2eqexewqr9mm0zmiwbf22k7za\"><code>ng update</code> 过程将自动移除之前位于 \n<code>@nguniversal</code> 范围包中的一些构建器的用法。 新的 \n<code>@angular/ssr</code> 包也将在更新期间自动添加和使用，并且在更新期间会调整配置和代码。 \n<code>@angular/ssr</code> 包支持 \n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> 构建器以及 \n<code>application</code> 构建器。 要从单独的 SSR 构建器转换为 \n<code>application</code> 构建器的集成功能，运行实验性的 \n<code>use-application-builder</code> 迁移。</p>\n<code-example language=\"shell\">\n\nng update @angular/cli --name use-application-builder\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnuxfyvxe9h00bly724rij1dn\">迁移会执行以下操作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51qbwe7ek6hez4ktq6d3ejppc\">将现有的 \n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> 或 \n<code>browser-esbuild</code> 目标转换为 \n<code>application</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65bfswavfmst1xypecfd4b2l3\">移除任何先前的 SSR 构建器（因为现在是 \n<code>application</code> 做这个工作）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38per68qfftx7h2tabgz32t12\">相应地更新配置。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axmdnezk068f4zf5a3dw2p5n9\">合并\n<code>tsconfig.server.json</code>和\n<code>tsconfig.app.json</code>，并添加 TypeScript 选项\n<code>\"esModuleInterop\": true</code>以确保\n<code>express</code>导入符合\n<a href=\"guide/esbuild#esm-default-imports-vs-namespace-imports\">ESM</a>标准。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwbwrnzxtted0l8w0t09sljrh\">更新应用程序服务器代码以使用新的引导和输出目录结构。</li>\n</ul>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"m1jlixu053m17w2yhp139n4l\">请记得移除应用程序服务器代码中的任何 CommonJS 假设，比如\n<code>require</code>，\n<code>__filename</code>，\n<code>__dirname</code>或其他来自\n<a href=\"https://nodejs.org/api/modules.html#the-module-scope\">CommonJS 模块作用域</a>的结构。所有应用程序代码应该兼容 ESM。这不适用于第三方依赖项。</p>\n</div>\n<h2 id=\"executing-a-build\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y4mmt2u3qngb48uy6h0vppb0\">执行构建<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#executing-a-build\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2e9xlkralwxgjkjzzjq6542i9\">一旦更新了应用程序配置，构建可以像以前一样使用\n<code>ng build</code>执行。 根据构建器迁移的选择，某些命令行选项可能会有所不同。 如果构建命令包含在任何\n<code>npm</code>或其他脚本中，请确保对其进行审查和更新。 对于已迁移到\n<code>application</code>构建器并使用 SSR 和/或预渲染的应用程序，现在也可以从脚本中移除额外的\n<code>ng run</code>命令，因为\n<code>ng build</code>已集成了 SSR 支持。</p>\n<code-example language=\"shell\">\n\nng build\n\n</code-example>\n<h2 id=\"starting-the-development-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18e081k2p966lrlu4dm2hrx0t\">启动开发服务器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#starting-the-development-server\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7eprrlvelx0cq2w5ggn507otr\">开发服务器将自动检测新的构建系统并使用它构建应用程序。 启动开发服务器无需对\n<code>dev-server</code>构建器配置或命令行进行任何更改。</p>\n<code-example language=\"shell\">\n\nng serve\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"900l0uhnq5r052mu4gswj3lo6\">你可以继续使用以前在开发服务器上使用过的那些<a href=\"/cli/serve\">命令行选项</a>。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5yuelayx7vh26gbaphycwg94\">目前不支持基于 JavaScript 的模块热替换（HMR）。 但是，默认情况下支持全局样式表（\n<code>styles</code>构建选项）的 HMR。 Angular 的重点 HMR 功能目前已计划，并将在将来的版本中引入。</p>\n</div>\n<h2 id=\"unimplemented-options-and-behavior\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4wwdh7v3u03vbzxlgw90pt52\">未实现的选项和行为<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#unimplemented-options-and-behavior\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d44vzw5b7btju8g7maqssjkgf\">几个构建选项尚未实现，但将在构建系统走向稳定状态时添加进去。如果你的应用程序使用这些选项，你仍然可以在不删除它们的情况下试用构建系统。将为任何未实现的选项发出警告，并在构建时忽略它们。但是，如果你的应用程序依赖于这些选项中的任何一个来运行，你可能需要等等才能尝试。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zvbocbzh90eblbm3rufq2af9\"><a href=\"https://github.com/angular/angular-cli/issues/25102\">WASM 导入</a> —— WASM 仍然可以通过<a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running\">标准的网络 API</a>手动加载。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"heyv9lm89l4yd16ygw4st338\">通过 <code>ng-packagr</code> 使用新的构建系统来构建库目前也不可能，但对构建库的支持将在未来的版本中提供。</p>\n<h2 id=\"esm-default-imports-vs-namespace-imports\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abr6ttwilip0qfl5rg5bfg6bl\">ESM 默认导入与命名空间导入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#esm-default-imports-vs-namespace-imports\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3cq9n7tv2s8ugly9w34eupx14\">默认情况下，TypeScript 允许将默认导出作为命名空间导入，然后在调用表达式中使用。不幸的是，这与 ECMAScript 规范不同。新构建系统中的底层捆绑器 ( <code>esbuild</code> ) 需要符合规范的 ESM 代码。如果你的应用程序使用不正确的包导入类型，构建系统现在将生成警告。但是，为了让 TypeScript 接受正确的用法，必须在应用程序的 <code>tsconfig</code> 文件中启用 TypeScript 选项。启用后，<a href=\"https://www.typescriptlang.org/tsconfig#esModuleInterop\"><code>esModuleInterop</code></a>选项可以更好地与 ECMAScript 规范保持一致，并且也被 TypeScript 团队推荐。启用后，你可以在适用于 ECMAScript 兼容形式的情况下更新包的导入代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1t4lre89h7cn3um7c3caimvtj\">以 <a href=\"https://npmjs.com/package/moment\"><code>moment</code></a> 包为例，以下应用代码会导致运行时错误：</p>\n<code-example language=\"ts\">\nimport * as moment from 'moment';\n\nconsole.log(moment().format());\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ou2znr00qe5gk2kjb610w0az\">构建时将生成警告，通知你存在潜在问题。警告将类似于：</p>\n<code-example format=\"shell\" language=\"shell\" hidecopy=\"true\">\n▲ [WARNING] Calling \"moment\" will crash at run-time because it's an import namespace object, not a function [call-import-namespace]\n\n    src/main.ts:2:12:\n      2 │ console.log(moment().format());\n        ╵             ~~~~~~\n\nConsider changing \"moment\" to a default import instead:\n\n    src/main.ts:1:7:\n      1 │ import * as moment from 'moment';\n        │        ~~~~~~~~~~~\n        ╵        moment\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40x6ludt90m0rl3o1ea38a6vg\">但是，你可以通过为应用程序启用 <code>esModuleInterop</code> TypeScript 选项并将导入更改为以下内容来避免运行时错误和警告：</p>\n<code-example language=\"ts\">\nimport moment from 'moment';\n\nconsole.log(moment().format());\n</code-example>\n<h2 id=\"vite-as-a-development-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wjaqv87vu4lzihzp3cstdgms\">Vite 作为开发服务器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#vite-as-a-development-server\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"125n9i27vs8ascrqc76bryj97\">Angular CLI 中 Vite 目前仅仅用在<strong>开发服务器范围</strong>内。即使不使用底层的 Vite 构建系统，Vite 也提供了一个功能齐全的开发服务器和客户端支持，该服务器已被捆绑到一个低依赖性 npm 包中。这让它成为提供综合开发服务器功能的理想选择。当前的开发服务器进程使用新构建系统在内存中生成应用程序的开发构建，并将结果传递给 Vite 为应用程序提供服务。Vite 的使用很像基于 Webpack 的开发服务器，封装在 Angular CLI <code>dev-server</code> builder 中，目前无法直接配置。</p>\n<h2 id=\"known-issues\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52bb0cpx9ors2iudvwkml8srh\">已知的问题<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#known-issues\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"672see3aj5o2y7aidfu95r3h4\">当前，你在尝试新构建系统时可能会遇到几个已知问题。此列表将更新以保持最新。如果这些问题中的任何一个正在阻止你尝试新的构建系统，请稍后再回来查看，那时候它可能已经解决了。</p>\n<h3 id=\"type-checking-of-web-worker-code-and-processing-of-nested-web-workers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1xcktgmw3m1zrdi67yloq8un\">Web Worker 代码的类型检查和嵌套 Web Worker 的处理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#type-checking-of-web-worker-code-and-processing-of-nested-web-workers\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tg522prgtx91557yu8ii9uux\">Web Worker 可以在应用程序代码中使用相同的语法（\n<code>new Worker(new URL('&lt;workerfile&gt;', import.meta.url))</code>），这是与\n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code>构建器支持的相同。 但是，TypeScript 编译器目前不会对 Worker 中的代码进行类型检查。支持 TypeScript 代码，只是不进行类型检查。 此外，任何嵌套的 Worker 不会被构建系统处理。嵌套 Worker 是一个在另一个 Worker 文件中实例化 Worker 的情况。</p>\n<h3 id=\"order-dependent-side-effectful-imports-in-lazy-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2g1cm0hzjxubvkzafa1qqbxu\">惰性模块中依赖于顺序的副作用导入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#order-dependent-side-effectful-imports-in-lazy-modules\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prv5twk8ls690wffucivbjnd\">依赖于特定顺序并且也在多个惰性模块中使用的 import 语句会导致顶级语句乱序执行。这并不常见，因为它取决于有副作用模块的使用，并且不适用于 <code>polyfills</code> 选项。这是由底层捆绑器中的<a href=\"https://github.com/evanw/esbuild/issues/399\">缺陷</a>引起的，但将在未来的更新中解决。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rjhb5h1sq229g8qtsm3tjuw6\">建议在可能的情况下尽量避免使用具有非局部副作用（腻子脚本除外）的模块，而不要考虑使用哪个构建系统，以避免这种特定问题。具有非局部副作用的模块还可能会对应用的大小和运行时性能产生负面影响。</p>\n</div>\n<h2 id=\"bug-reports\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1clb4wppaz892hfpdh5a5o16\">错误报告<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#bug-reports\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o3mlfcjcgfzrx743i7tk0w35\">在 <a href=\"https://github.com/angular/angular-cli/issues\">GitHub</a> 上报告问题和功能请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l6rusy4wzajseatlxmd7dj54\">请尽可能提供最小化的重现工程，以帮助团队解决问题。</p>\n\n  \n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /cli/serve\n - /guide/ssr\n - api/animations/browser\n - guide/esbuild#bug-reports\n - guide/esbuild#esm-default-imports-vs-namespace-imports\n - guide/esbuild#executing-a-build\n - guide/esbuild#for-existing-applications\n - guide/esbuild#for-new-applications\n - guide/esbuild#getting-started-with-the-angular-clis-new-build-system\n - guide/esbuild#known-issues\n - guide/esbuild#order-dependent-side-effectful-imports-in-lazy-modules\n - guide/esbuild#starting-the-development-server\n - guide/esbuild#type-checking-of-web-worker-code-and-processing-of-nested-web-workers\n - guide/esbuild#unimplemented-options-and-behavior\n - guide/esbuild#using-the-application-builder\n - guide/esbuild#using-the-browser-esbuild-builder\n - guide/esbuild#vite-as-a-development-server\n - https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running\n - https://esbuild.github.io/\n - https://github.com/angular/angular-cli/issues\n - https://github.com/angular/angular-cli/issues/25102\n - https://github.com/evanw/esbuild/issues/399\n - https://nodejs.org/api/modules.html#the-module-scope\n - https://npmjs.com/package/moment\n - https://vitejs.dev/\n - https://www.typescriptlang.org/tsconfig#esModuleInterop\n-->"}
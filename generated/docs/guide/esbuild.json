{"id":"guide/esbuild","title":"使用 Angular CLI 的新建立系統入門","contents":"<div class=\"content\">\n  <h1 id=\"getting-started-with-the-angular-clis-new-build-system\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"851riiai7imirtb6b6se220ln\">使用 Angular CLI 的新建立系統入門<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#getting-started-with-the-angular-clis-new-build-system\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9yrz43osae8ht7a3ah7duuur\">在 v17 及更高版本中，新的建立系統提供了一種改進的建立 Angular 應用程式的方法。這個新的建立系統包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brr3umunat7p3wx4wpqq2w2x7\">使用 ESM 的現代輸出格式，帶有動態匯入表示式以支援延遲模組載入。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9u48qvxb9wl9r8sq04qwi2dud\">初始建立和增量重建的建立時效能更快。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"424qyzifnoh6larzgbtuv3b9q\">較新的 JavaScript 生態系統工具，例如<a href=\"https://esbuild.github.io/\">esbuild</a>和<a href=\"https://vitejs.dev/\">Vite</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dr844eghkoibbg0gbrzzgzppa\">整合的 SSR 和預渲染功能</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dcul830ytdw2tso997ynd8i5\">這個新的建立系統是穩定的，並且完全支援與 Angular 應用程式一起使用。 你可以遷移到新的建立系統，該系統適用於使用 \n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> 建構式的應用程式。 如果使用自定義建構式，請參考該建構式的文件，瞭解可能的遷移選項。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bu6khm5er9xrjoflx2j3buxaa\">現有基於 Webpack 的建立系統仍然被認為是穩定的，並且得到全面支援。 應用程式可以繼續使用 \n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> 建構式，在更新時不會自動遷移。</p>\n</div>\n<h2 id=\"for-new-applications\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ocsdrlw5kvnkhdpph5ych1p7\">對於新應用程式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#for-new-applications\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alopbgds8avk3lhyzhp5g2mc7\">新應用程式將預設使用這個新的建立系統，透過 \n<code>application</code> 建構式。</p>\n<h2 id=\"for-existing-applications\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsfzgizjbbgjfrvlcbi93gr31\">對於現有應用程式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#for-existing-applications\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec3ip2h7uoqm0k8w0cdhv1rv1\">對於現有專案，你可以選擇使用新建構式的兩種不同選項來逐個應用程式進行選擇性使用。 兩種選項都被 Angular 團隊認為是穩定的並得到全面支援。 選擇使用哪種選項取決於你需要進行多少改變來遷移，以及你希望在專案中使用哪些新功能。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2leyr3qep6ef1mnw2agtncsxm\">建構式</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2sh3wxohsfrspm1b47vnqjcr5\">設定更改</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f46tqcikm4tgov1jhoxdjlvit\">程式碼更改</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"z0mj4u12exb450o8t1l8iwht\">整合的 SSR</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>application</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2576zr6pf8w8ct6kcdarjhfgk\">需要進行多個選項更改。如果使用 SSR，需要更新額外的目標。</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wbuadgtym14vrtwlq09c6xls\">是，如果使用 SSR</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qzstzs5yva1ifawityjo2t6d\">是</td>\n</tr>\n<tr>\n<td align=\"left\"><code>browser-esbuild</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xtg4mizjryo3unir835cdjgo\">僅建構式名稱</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aiqiizjc3vhrwkbaupg2hgti3\">不*</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2j26jl1x07opyz4dbfelj957\">不</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kejcnsf7eows7lre421u94ij\">通常更喜歡使用\n<code>application</code>建構式，因為它改進了伺服器端渲染（SSR）建立，並使用戶端渲染專案更容易在未來採用SSR。但是，這需要更多的遷移工作，特別是對於現有的SSR應用程式來說。如果\n<code>application</code>建構式對於你的專案來說很難採用，\n<code>browser-esbuild</code>可能是一個更簡單的解決方案，它可以帶來大部分建立效能優勢，同時變更較少。</p>\n<h3 id=\"using-the-browser-esbuild-builder\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dlynntjx355aqx2ke3frlm73\">使用\n<code>browser-esbuild</code>建構式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#using-the-browser-esbuild-builder\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2mrujj899a07rdzim660ycqo\">在\n<code>@angular-devkit/build-angular</code>套件中提供了一個名為\n<code>browser-esbuild</code>的建構式，這個套件在由Angular CLI生成的應用程式中存在。這個建構式是現有\n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code>建構式的即插即用替代，提供了現有的瀏覽器應用程式建立系統。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81oq4az4c4rboxtoyofe0wpcv\">相容性選項旨在最小化初始遷移應用程式所需的更改量。這是透過另一個建構式（\n<code>browser-esbuild</code>）提供的。你可以更新任何應用程式目標的\n<code>build</code>目標以遷移到新的建立系統。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9spw2i9szajkpnh272sc3ty61\">以下是你通常會在應用程式的 <code>angular.json</code> 中找到的內容：</p>\n<code-example language=\"json\" hidecopy=\"true\">\n...\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser\",\n...\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vkficvjtoyx3jb8yu6mj2xus\">更改 <code>builder</code> 欄位就是你要進行的唯一更改。</p>\n<code-example language=\"json\" hidecopy=\"true\">\n...\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser-esbuild\",\n...\n</code-example>\n<h3 id=\"using-the-application-builder\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jemjwjw8rzbcjb9etl7xljfj\">使用\n<code>application</code>建構式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#using-the-application-builder\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c072pgi6zeyw5diwivzpaq6t4\">在由Angular CLI生成的應用程式中，\n<code>@angular-devkit/build-angular</code>套件中還提供了一個名為\n<code>application</code>的建構式。這個建構式是透過\n<code>ng new</code>建立的所有新應用程式的預設值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9spw2i9szajkpnh272sc3ty61\">以下是你通常會在應用程式的 <code>angular.json</code> 中找到的內容：</p>\n<code-example language=\"json\" hidecopy=\"true\">\n...\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser\",\n...\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e28dtzun0ix5qecd9hh8eexqy\">更改\n<code>builder</code>欄位是你需要進行的第一個更改。</p>\n<code-example language=\"json\" hidecopy=\"true\">\n...\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:application\",\n...\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8e6xd03w0lk3x2s8dgkunwqa\">一旦建構式名稱已更改，\n<code>build</code>目標內的選項將需要更新。下表列出了所有需要調整或移除的\n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code>建構式選項。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drnjuqmcgjb4cd7jb24lyai50\"><code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code>選項</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehouyeifhpzg8osbkqtw2bzju\">備註</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>main</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hlo2zri6pfe00dfxsn096t3x\">將選項重新命名為\n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>polyfills</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7bwnnpgfjfedgvep2kn249bs\">將值轉換為陣列</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9snmztewkk29mf0jps0uns9v\">可能已經遷移</td>\n</tr>\n<tr>\n<td align=\"left\"><code>buildOptimizer</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5or17udmsdva7inv4tdacim\">移除選項</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>resourcesOutputPath</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2yeqir89843xhm77kppvzjxx9\">將選項移動到\n<code>outputPath.media</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9w54qdstla0fvw7wbdile6059\">預設為\n<code>media</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>vendorChunk</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5or17udmsdva7inv4tdacim\">移除選項</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>commonChunk</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5or17udmsdva7inv4tdacim\">移除選項</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>deployUrl</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5or17udmsdva7inv4tdacim\">移除選項</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>ngswConfigPath</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7uj4ycdn9k0lde7zv078s75y\">將值移動到\n<code>serviceWorker</code>並移除選項</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bnudyfhbpqienztg5ex3figy\"><code>serviceWorker</code> 現在要麼是 \n<code>false</code>，要麼是一個設定路徑</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qonfi9o1p35fppjlrnymok53\">如果應用當前沒有使用 SSR，這應該是允許 \n<code>ng build</code> 正常工作的最後一步。 第一次執行 \n<code>ng build</code> 後，根據行為差異或應用程式對特定於 Webpack 功能的使用，可能會出現新的警告或錯誤。 許多警告將提供如何解決問題的建議。 如果發現警告不正確或解決方案不明顯，請在 \n<a href=\"https://github.com/angular/angular-cli/issues\">GitHub</a> 上提出問題。 此外，本指南的後續部分提供了關於幾種特定情況以及當前已知問題的額外訊息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77vjq1ze5dxbnb69c82pu0jlv\">對於新使用 SSR 的應用程式，\n<a href=\"/guide/ssr\">Angular SSR 指南</a> 提供了關於為應用程式新增 SSR 設定的過程的額外訊息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4lr3vqgr9prqvzrjh82pn05n\">對於已經使用 SSR 的應用程式，需要進行額外調整以更新應用程式伺服器，以支援新的整合 SSR 功能。 現在 \n<code>application</code> 建構式為所有以下現有建構式提供了整合功能：</p>\n<ul>\n<li><code>app-shell</code></li>\n<li><code>prerender</code></li>\n<li><code>server</code></li>\n<li><code>ssr-dev-server</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2eqexewqr9mm0zmiwbf22k7za\"><code>ng update</code> 過程將自動移除之前位於 \n<code>@nguniversal</code> 範圍套件中的一些建構式的用法。 新的 \n<code>@angular/ssr</code> 套件也將在更新期間自動新增和使用，並且在更新期間會調整設定和程式碼。 \n<code>@angular/ssr</code> 套件支援 \n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> 建構式以及 \n<code>application</code> 建構式。 要從單獨的 SSR 建構式轉換為 \n<code>application</code> 建構式的整合功能，執行實驗性的 \n<code>use-application-builder</code> 遷移。</p>\n<code-example language=\"shell\">\n\nng update @angular/cli --name use-application-builder\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnuxfyvxe9h00bly724rij1dn\">遷移會執行以下操作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51qbwe7ek6hez4ktq6d3ejppc\">將現有的 \n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> 或 \n<code>browser-esbuild</code> 目標轉換為 \n<code>application</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65bfswavfmst1xypecfd4b2l3\">移除任何先前的 SSR 建構式（因為現在是 \n<code>application</code> 做這個工作）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38per68qfftx7h2tabgz32t12\">相應地更新設定。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axmdnezk068f4zf5a3dw2p5n9\">合併\n<code>tsconfig.server.json</code>和\n<code>tsconfig.app.json</code>，並新增 TypeScript 選項\n<code>\"esModuleInterop\": true</code>以確保\n<code>express</code>匯入符合\n<a href=\"guide/esbuild#esm-default-imports-vs-namespace-imports\">ESM</a>標準。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwbwrnzxtted0l8w0t09sljrh\">更新應用程式伺服器程式碼以使用新的引導和輸出目錄結構。</li>\n</ul>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"m1jlixu053m17w2yhp139n4l\">請記得移除應用程式伺服器程式碼中的任何 CommonJS 假設，比如\n<code>require</code>，\n<code>__filename</code>，\n<code>__dirname</code>或其他來自\n<a href=\"https://nodejs.org/api/modules.html#the-module-scope\">CommonJS 模組作用域</a>的結構。所有應用程式程式碼應該相容 ESM。這不適用於第三方依賴項。</p>\n</div>\n<h2 id=\"executing-a-build\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y4mmt2u3qngb48uy6h0vppb0\">執行建立<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#executing-a-build\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2e9xlkralwxgjkjzzjq6542i9\">一旦更新了應用程式設定，建立可以像以前一樣使用\n<code>ng build</code>執行。 根據建構式遷移的選擇，某些指令行選項可能會有所不同。 如果建立指令包含在任何\n<code>npm</code>或其他指令碼中，請確保對其進行審查和更新。 對於已遷移到\n<code>application</code>建構式並使用 SSR 和/或預渲染的應用程式，現在也可以從指令碼中移除額外的\n<code>ng run</code>指令，因為\n<code>ng build</code>已整合了 SSR 支援。</p>\n<code-example language=\"shell\">\n\nng build\n\n</code-example>\n<h2 id=\"starting-the-development-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18e081k2p966lrlu4dm2hrx0t\">啟動開發伺服器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#starting-the-development-server\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7eprrlvelx0cq2w5ggn507otr\">開發伺服器將自動檢測新的建立系統並使用它建立應用程式。 啟動開發伺服器無需對\n<code>dev-server</code>建構式設定或指令行進行任何更改。</p>\n<code-example language=\"shell\">\n\nng serve\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"900l0uhnq5r052mu4gswj3lo6\">你可以繼續使用以前在開發伺服器上使用過的那些<a href=\"/cli/serve\">指令行選項</a>。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5yuelayx7vh26gbaphycwg94\">目前不支援基於 JavaScript 的模組熱替換（HMR）。 但是，預設情況下支援全域樣式表（\n<code>styles</code>建立選項）的 HMR。 Angular 的重點 HMR 功能目前已計劃，並將在將來的版本中引入。</p>\n</div>\n<h2 id=\"unimplemented-options-and-behavior\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4wwdh7v3u03vbzxlgw90pt52\">未實現的選項和行為<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#unimplemented-options-and-behavior\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d44vzw5b7btju8g7maqssjkgf\">幾個建立選項尚未實現，但將在建立系統走向穩定狀態時新增進去。如果你的應用程式使用這些選項，你仍然可以在不刪除它們的情況下試用建立系統。將為任何未實現的選項發出警告，並在建立時忽略它們。但是，如果你的應用程式依賴於這些選項中的任何一個來執行，你可能需要等等才能嘗試。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zvbocbzh90eblbm3rufq2af9\"><a href=\"https://github.com/angular/angular-cli/issues/25102\">WASM 匯入</a> —— WASM 仍然可以透過<a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running\">標準的網路 API</a>手動載入。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"heyv9lm89l4yd16ygw4st338\">透過 <code>ng-packagr</code> 使用新的建立系統來建立庫目前也不可能，但對建立庫的支援將在未來的版本中提供。</p>\n<h2 id=\"esm-default-imports-vs-namespace-imports\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abr6ttwilip0qfl5rg5bfg6bl\">ESM 預設匯入與命名空間匯入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#esm-default-imports-vs-namespace-imports\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3cq9n7tv2s8ugly9w34eupx14\">預設情況下，TypeScript 允許將預設匯出作為命名空間匯入，然後在呼叫表示式中使用。不幸的是，這與 ECMAScript 規範不同。新建立系統中的底層捆綁器 ( <code>esbuild</code> ) 需要符合規範的 ESM 程式碼。如果你的應用程式使用不正確的套件匯入型別，建立系統現在將生成警告。但是，為了讓 TypeScript 接受正確的用法，必須在應用程式的 <code>tsconfig</code> 檔案中啟用 TypeScript 選項。啟用後，<a href=\"https://www.typescriptlang.org/tsconfig#esModuleInterop\"><code>esModuleInterop</code></a>選項可以更好地與 ECMAScript 規範保持一致，並且也被 TypeScript 團隊推薦。啟用後，你可以在適用於 ECMAScript 相容形式的情況下更新套件的匯入程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1t4lre89h7cn3um7c3caimvtj\">以 <a href=\"https://npmjs.com/package/moment\"><code>moment</code></a> 套件為例，以下應用程式碼會導致執行時錯誤：</p>\n<code-example language=\"ts\">\nimport * as moment from 'moment';\n\nconsole.log(moment().format());\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ou2znr00qe5gk2kjb610w0az\">建立時將生成警告，通知你存在潛在問題。警告將類似於：</p>\n<code-example format=\"shell\" language=\"shell\" hidecopy=\"true\">\n▲ [WARNING] Calling \"moment\" will crash at run-time because it's an import namespace object, not a function [call-import-namespace]\n\n    src/main.ts:2:12:\n      2 │ console.log(moment().format());\n        ╵             ~~~~~~\n\nConsider changing \"moment\" to a default import instead:\n\n    src/main.ts:1:7:\n      1 │ import * as moment from 'moment';\n        │        ~~~~~~~~~~~\n        ╵        moment\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40x6ludt90m0rl3o1ea38a6vg\">但是，你可以透過為應用程式啟用 <code>esModuleInterop</code> TypeScript 選項並將匯入更改為以下內容來避免執行時錯誤和警告：</p>\n<code-example language=\"ts\">\nimport moment from 'moment';\n\nconsole.log(moment().format());\n</code-example>\n<h2 id=\"vite-as-a-development-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wjaqv87vu4lzihzp3cstdgms\">Vite 作為開發伺服器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#vite-as-a-development-server\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"125n9i27vs8ascrqc76bryj97\">Angular CLI 中 Vite 目前僅僅用在<strong>開發伺服器範圍</strong>內。即使不使用底層的 Vite 建立系統，Vite 也提供了一個功能齊全的開發伺服器和用戶端支援，該服務器已被捆綁到一個低依賴性 npm 套件中。這讓它成為提供綜合開發伺服器功能的理想選擇。當前的開發伺服器程序使用新建立系統在記憶體中生成應用程式的開發建立，並將結果傳遞給 Vite 為應用程式提供服務。Vite 的使用很像基於 Webpack 的開發伺服器，封裝在 Angular CLI <code>dev-server</code> builder 中，目前無法直接設定。</p>\n<h2 id=\"known-issues\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52bb0cpx9ors2iudvwkml8srh\">已知的問題<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#known-issues\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"672see3aj5o2y7aidfu95r3h4\">當前，你在嘗試新建立系統時可能會遇到幾個已知問題。此清單將更新以保持最新。如果這些問題中的任何一個正在阻止你嘗試新的建立系統，請稍後再回來檢視，那時候它可能已經解決了。</p>\n<h3 id=\"type-checking-of-web-worker-code-and-processing-of-nested-web-workers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1xcktgmw3m1zrdi67yloq8un\">Web Worker 程式碼的型別檢查和巢狀 Web Worker 的處理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#type-checking-of-web-worker-code-and-processing-of-nested-web-workers\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tg522prgtx91557yu8ii9uux\">Web Worker 可以在應用程式程式碼中使用相同的語法（\n<code>new Worker(new URL('&lt;workerfile&gt;', import.meta.url))</code>），這是與\n<code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code>建構式支援的相同。 但是，TypeScript 編譯器目前不會對 Worker 中的程式碼進行型別檢查。支援 TypeScript 程式碼，只是不進行型別檢查。 此外，任何巢狀的 Worker 不會被建立系統處理。巢狀 Worker 是一個在另一個 Worker 檔案中實例化 Worker 的情況。</p>\n<h3 id=\"order-dependent-side-effectful-imports-in-lazy-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2g1cm0hzjxubvkzafa1qqbxu\">惰性模組中依賴於順序的副作用匯入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#order-dependent-side-effectful-imports-in-lazy-modules\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prv5twk8ls690wffucivbjnd\">依賴於特定順序並且也在多個惰性模組中使用的 import 語句會導致頂級語句亂序執行。這並不常見，因為它取決於有副作用模組的使用，並且不適用於 <code>polyfills</code> 選項。這是由底層捆綁器中的<a href=\"https://github.com/evanw/esbuild/issues/399\">缺陷</a>引起的，但將在未來的更新中解決。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rjhb5h1sq229g8qtsm3tjuw6\">建議在可能的情況下儘量避免使用具有非區域性副作用（膩子指令碼除外）的模組，而不要考慮使用哪個建立系統，以避免這種特定問題。具有非區域性副作用的模組還可能會對應用的大小和執行時效能產生負面影響。</p>\n</div>\n<h2 id=\"bug-reports\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1clb4wppaz892hfpdh5a5o16\">錯誤報告<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#bug-reports\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o3mlfcjcgfzrx743i7tk0w35\">在 <a href=\"https://github.com/angular/angular-cli/issues\">GitHub</a> 上報告問題和功能請求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l6rusy4wzajseatlxmd7dj54\">請儘可能提供最小化的重現工程，以幫助團隊解決問題。</p>\n\n  \n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /cli/serve\n - /guide/ssr\n - api/animations/browser\n - guide/esbuild#bug-reports\n - guide/esbuild#esm-default-imports-vs-namespace-imports\n - guide/esbuild#executing-a-build\n - guide/esbuild#for-existing-applications\n - guide/esbuild#for-new-applications\n - guide/esbuild#getting-started-with-the-angular-clis-new-build-system\n - guide/esbuild#known-issues\n - guide/esbuild#order-dependent-side-effectful-imports-in-lazy-modules\n - guide/esbuild#starting-the-development-server\n - guide/esbuild#type-checking-of-web-worker-code-and-processing-of-nested-web-workers\n - guide/esbuild#unimplemented-options-and-behavior\n - guide/esbuild#using-the-application-builder\n - guide/esbuild#using-the-browser-esbuild-builder\n - guide/esbuild#vite-as-a-development-server\n - https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running\n - https://esbuild.github.io/\n - https://github.com/angular/angular-cli/issues\n - https://github.com/angular/angular-cli/issues/25102\n - https://github.com/evanw/esbuild/issues/399\n - https://nodejs.org/api/modules.html#the-module-scope\n - https://npmjs.com/package/moment\n - https://vitejs.dev/\n - https://www.typescriptlang.org/tsconfig#esModuleInterop\n-->"}
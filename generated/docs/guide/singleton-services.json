{"id":"guide/singleton-services","title":"单例服务","contents":"<div class=\"content\">\n  <h1 id=\"singleton-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"essl9gfrqg45g47n7kl5z0gxp\">单例服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#singleton-services\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckm5exsmenhkp3azz44373i80\">单例服务是指在应用中只存在一个实例的服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eh2l68rr7ss3ycwrop1q5fy7f\">本页中描述的这种全应用级单例服务的例子位于<live-example name=\"ngmodules\"></live-example>，它示范了 NgModule 的所有已文档化的特性。</p>\n<h2 id=\"providing-a-singleton-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8sl670sylcg1vukn5ecj4wovf\">提供单例服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#providing-a-singleton-service\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y76osnfeejbdfugpj5ht65uf\">在 Angular 中有两种方式来生成单例服务：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"329g9ooljb3vitn0s0f8zekb8\">把 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 中的 <code>providedIn</code> 属性设置为 <code>\"root\"</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d90rvxzdcxavsqd78a9f4zkie\">把该服务包含在 <code>AppModule</code> 或某个只会被 <code>AppModule</code> 导入的模块中。</li>\n</ul>\n<p><a id=\"providedIn\"></a></p>\n<h3 id=\"using-providedin\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sydl5lj799ufsa0u4e8poilr\">使用 <code>providedIn</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#using-providedin\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ul4l5lweo0gplbkw1tbw0tqt\">从 Angular 6.0 开始，创建单例服务的首选方式就是在那个服务类的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 装饰器上把 <code>providedIn</code> 设置为 <code>root</code>。这会告诉 Angular 在应用的根上提供此服务。</p>\n<code-example path=\"providers/src/app/user.service.0.ts\" header=\"src/app/user.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class UserService {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75lab7982uh4gmvu3cun97zb2\">要想深入了解关于服务的信息，参阅<a href=\"tutorial/tour-of-heroes\">《英雄之旅》教程</a>中的<a href=\"tutorial/tour-of-heroes/toh-pt4\">服务</a>一章。</p>\n<h3 id=\"ngmodule-providers-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cc44zmw8gd45i4uw212aujet\">NgModule 的 <code>providers</code> 数组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#ngmodule-providers-array\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e19cv09wn2m2kntmk4kfd0tpo\">在基于 Angular 6.0 以前的版本构建的应用中，服务是注册在 NgModule 的 <code>providers</code> 数组中的，就像这样：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  …\n  providers: [UserService],\n  …\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3la7z01run2fxk7buz2v7v6my\">如果这个 NgModule 是根模块 <code>AppModule</code>，此 <code>UserService</code> 就会是单例的，并且在整个应用中都可用。虽然你可能会看到这种形式的代码，但是最好使用在服务自身的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器上设置 <code>providedIn</code> 属性的形式，因为 Angular 6.0 可以对这些服务进行摇树优化。</p>\n<p><a id=\"forRoot\"></a></p>\n<h2 id=\"the-forroot-pattern\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s0x3w8qbcdtrtmjvai66phid\"><code>forRoot()</code> 模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#the-forroot-pattern\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51psyzuys866g3h6zjz8h858\">通常，你只需要用 <code>providedIn</code> 提供服务，用 <code>forRoot()</code>/<code>forChild()</code> 提供路由即可。不过，理解 <code>forRoot()</code> 为何能够确保服务只有单个实例，可以让你学会更深层次的开发知识。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mh6e525k4s32t63j15xw7dno\">如果模块同时定义了 providers（服务）和 declarations（组件、指令、管道），那么，当你同时在多个特性模块中加载此模块时，这些服务就会被注册在多个地方。这会导致出现多个服务实例，并且该服务的行为不再像单例一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"duvt9n4tph6fv99rvd92j1cj8\">有多种方式来防止这种现象：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6c77enka4e93umiet17z2ysu7\">用 <a href=\"guide/singleton-services#providedIn\"><code>providedIn</code> 语法</a>代替在模块中注册服务的方式。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kn27x0cn4z2oagix406bbqs\">把你的服务分离到它们自己的模块中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kjw06zvs1ojwnc9s6bvqnckf\">在模块中分别定义 <code>forRoot()</code> 和 <code>forChild()</code> 方法。</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fazs687c3nu8t64u652drx3z\"><strong>注意</strong>：<br>\n有两个范例应用可以让你查看这种情况，更高级的方式参阅 <live-example nodownload=\"\" name=\"ngmodules\">NgModules 现场演练</live-example>，它在路由模块中包含 <code>forRoot()</code> 和 <code>forChild()</code>，而 <code>GreetingModule</code> 是一个比较简单的<live-example name=\"lazy-loading-ngmodules\" nodownload=\"\">惰性加载范例</live-example>。在<a href=\"guide/lazy-loading-ngmodules\">惰性加载模块</a>中有简要的解释。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5l3boadny9lt6wny39iji3voj\">使用 <code>forRoot()</code> 来把提供者从该模块中分离出去，这样你就能在根模块中导入该模块时带上 <code>providers</code>，并且在子模块中导入它时不带 <code>providers</code>。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhk1f4h5qgwmhpyhizas6vqp1\">在该模块中创建一个静态方法 <code>forRoot()</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec1j9fb17jc1rv1tx0vqjx023\">把这些提供者放进 <code>forRoot()</code> 方法中。</li>\n</ol>\n<code-example header=\"src/app/greeting/greeting.module.ts\" path=\"ngmodules/src/app/greeting/greeting.module.ts\" region=\"for-root\">\n<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: UserServiceConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&lt;GreetingModule&gt; {\n  return {\n    ngModule: GreetingModule,\n    providers: [\n      {provide: UserServiceConfig, useValue: config }\n    ]\n  };\n}\n\n</code-example>\n<p><a id=\"forRoot-router\"></a></p>\n<h3 id=\"forroot-and-the-router\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nokude0pv5h8b0udcdq6k5oj\"><code>forRoot()</code> 和 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#forroot-and-the-router\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"z6rcqe52pij99ooj5rryx9ra\"><code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 中提供了 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务，同时还有一些路由指令，比如 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 和 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 等。应用的根模块导入了 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>，以便应用中有一个 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服务，并且让应用的根组件可以访问各个路由器指令。任何一个特性模块也必须导入 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>，这样它们的组件模板中才能使用这些路由器指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bljhuyhd050oqinempnbgb95\">如果 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 没有 <code>forRoot()</code>，那么每个特性模块都会实例化一个新的 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 实例，而这会破坏应用的正常逻辑，因为应用中只能有一个 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 实例。通过使用 <code>forRoot()</code> 方法，应用的根模块中会导入 <code>RouterModule.forRoot(...)</code>，从而获得一个 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 实例，而所有的特性模块要导入 <code>RouterModule.forChild(...)</code>，它就不会实例化另外的 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5145gvemm41ybxncbuighq8b5\"><strong>注意</strong>：<br>\n如果你的某个模块也同时有 providers 和 declarations，你也<em>可以</em>使用这种技巧来把它们分开。你可能会在某些传统应用中看到这种模式。\n不过，从 Angular 6.0 开始，提供服务的最佳实践是使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的 <code>providedIn</code> 属性。</p>\n</div>\n<h3 id=\"how-forroot-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pww07skb60zzs9sttya55pwp\"><code>forRoot()</code> 的工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#how-forroot-works\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6y4uoif8lxgq3hp7946zuobu3\"><code>forRoot()</code> 会接受一个服务配置对象，并返回一个 <a href=\"api/core/ModuleWithProviders\">ModuleWithProviders</a> 对象，它带有下列属性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ghvm54f9feewnb0zbrlubp2h\">属性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>ngModule</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eygwsloky787ughuhexsrwatq\">在这个例子中，\n<code>GreetingModule</code> 类</td>\n</tr>\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"644209uzx56nzirffhrirte29\">配置的提供者</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9h4q4qpdmy3luv60porfaet5u\">在这个 <live-example name=\"ngmodules\">现场演练</live-example>中，根模块 <code>AppModule</code> 导入了 <code>GreetingModule</code>，并把它的 <code>providers</code> 添加到了 <code>AppModule</code> 的服务提供者列表中。特别是，Angular 会把所有从其它模块导入的提供者追加到本模块的 <code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> 中列出的提供者之前。这种顺序可以确保你在 <code>AppModule</code> 的 <code>providers</code> 中显式列出的提供者，其优先级高于导入模块中给出的提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"864jajxpkgr2dpg06hwto61i4\">在这个范例应用中，导入 <code>GreetingModule</code>，并只在 <code>AppModule</code> 中调用一次它的 <code>forRoot()</code> 方法。像这样注册它一次就可以防止出现多个实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23ju25ho9yhlu9lh2h1u2zd0n\">你还可以在 <code>GreetingModule</code> 中添加一个用于配置 <code>UserService</code> 的 <code>forRoot()</code> 方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1f5akp6fr3mevaetgemgz6x7\">在下面的例子中，可选的注入 <code>UserServiceConfig</code> 扩展了 <code>UserService</code>。如果 <code>UserServiceConfig</code> 存在，就从这个配置中设置用户名。</p>\n<code-example header=\"src/app/greeting/user.service.ts (constructor)\" path=\"ngmodules/src/app/greeting/user.service.ts\" region=\"ctor\">\nconstructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() config?: UserServiceConfig) {\n  if (config) { this._userName = config.userName; }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw17be10ps7ht9yd3btrmmgts\">下面是一个接受 <code>UserServiceConfig</code> 参数的 <code>forRoot()</code> 方法：</p>\n<code-example header=\"src/app/greeting/greeting.module.ts (forRoot)\" path=\"ngmodules/src/app/greeting/greeting.module.ts\" region=\"for-root\">\n<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: UserServiceConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&lt;GreetingModule&gt; {\n  return {\n    ngModule: GreetingModule,\n    providers: [\n      {provide: UserServiceConfig, useValue: config }\n    ]\n  };\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gx3mhgsnkj5daff9lz33280e\">最后，在 <code>AppModule</code> 的 <code>imports</code><em>列表</em>中调用它。在下面的代码片段中，省略了文件的另一部分。要查看完整文件，参阅 <live-example name=\"ngmodules\"></live-example> 或继续阅读本文档的后续章节。</p>\n<code-example header=\"src/app/app.module.ts (imports)\" path=\"ngmodules/src/app/app.module.ts\" region=\"import-for-root\">\nimport { GreetingModule } from './greeting/greeting.module';\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    GreetingModule.forRoot({userName: 'Miss Marple'}),\n  ],\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b75rkwyju6qhemnu8wpudb3rk\">该应用不再显示默认的 “Sherlock Holmes”，而是用 “Miss Marple” 作为用户名称。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9erq0f8g283hszee80ft0bjhk\">记住：在本文件的顶部要以 JavaScript import 形式导入 <code>GreetingModule</code>，并且不要把它多次加入到本 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 列表中。</p>\n<h2 id=\"prevent-reimport-of-the-greetingmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwqlvjmfz4rnbs3dwmovfopyi\">防止重复导入 <code>GreetingModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#prevent-reimport-of-the-greetingmodule\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba8f3t34syo6j9f629alqfzxf\">只有根模块 <code>AppModule</code> 才能导入 <code>GreetingModule</code>。如果一个惰性加载模块也导入了它，该应用就会为服务生成<a href=\"guide/ngmodule-faq#q-why-bad\">多个实例</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"48f5jjz1xps2v2p705eqjtgfm\">要想防止惰性加载模块重复导入 <code>GreetingModule</code>，可以添加如下的 <code>GreetingModule</code> 构造函数。</p>\n<code-example header=\"src/app/greeting/greeting.module.ts\" path=\"ngmodules/src/app/greeting/greeting.module.ts\" region=\"ctor\">\nconstructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() parentModule?: GreetingModule) {\n  if (parentModule) {\n    throw new Error(\n      'GreetingModule is already loaded. Import it in the AppModule only');\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3a0yzblog8ey8johnkyw6wg43\">该构造函数要求 Angular 把 <code>GreetingModule</code> 注入它自己。如果 Angular 在<em>当前</em>注入器中查找 <code>GreetingModule</code>，这次注入就会导致死循环，但是 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 装饰器的意思是 \"在注入器树中层次高于我的祖先注入器中查找 <code>GreetingModule</code>。\"</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhhbmphz1tfqmv25bhlxjled2\">默认情况下，当注入器找不到想找的提供者时，会抛出一个错误。但 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> 装饰器表示找不到该服务也无所谓。于是注入器会返回 <code>null</code>，<code>parentModule</code> 参数也就被赋成了空值，而构造函数没有任何异常。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yf1qzu417e4apogeisw078rp\">但如果你把 <code>GreetingModule</code> 导入到像 <code>CustomersModule</code> 这样的惰性加载模块中，事情就不一样了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azm70gy05buczdal5s9gm4ax0\">Angular 创建惰性加载模块时会给它一个自己的注入器，它是根注入器的<em>子注入器</em>。<code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 让 Angular 在其父注入器中查找 <code>GreetingModule</code>，这次，它的父注入器是根注入器（而上次的父注入器是空）。当然，这次它找到了由根模块 <code>AppModule</code> 导入的实例。该构造函数检测到存在 <code>parentModule</code>，于是抛出一个错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9m50t7f8nvybl5x6afb19lenh\">以下这两个文件仅供参考：</p>\n<code-tabs>\n   <code-pane header=\"app.module.ts\" path=\"ngmodules/src/app/app.module.ts\">\n\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\n\n/* App Root */\nimport { AppComponent } from './app.component';\n\n/* Feature Modules */\nimport { ContactModule } from './contact/contact.module';\nimport { GreetingModule } from './greeting/greeting.module';\n\n/* Routing Module */\nimport { AppRoutingModule } from './app-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    ContactModule,\n    GreetingModule.forRoot({userName: 'Miss Marple'}),\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-pane>\n   <code-pane header=\"greeting.module.ts\" region=\"whole-greeting-module\" path=\"ngmodules/src/app/greeting/greeting.module.ts\">\nimport { <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>, <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>, <a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>, <a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a> } from '@angular/core';\n\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\nimport { GreetingComponent } from './greeting.component';\nimport { UserServiceConfig } from './user.service';\n\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> ],\n  declarations: [ GreetingComponent ],\n  exports:      [ GreetingComponent ]\n})\nexport class GreetingModule {\n  constructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() parentModule?: GreetingModule) {\n    if (parentModule) {\n      throw new Error(\n        'GreetingModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: UserServiceConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&lt;GreetingModule&gt; {\n    return {\n      ngModule: GreetingModule,\n      providers: [\n        {provide: UserServiceConfig, useValue: config }\n      ]\n    };\n  }\n}\n\n</code-pane>\n</code-tabs>\n<h2 id=\"more-on-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpukz8usqrzb3byrzbogm52l\">关于 NgModule 的更多知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ho2p43rev7e4non44xvp10gw\">你还可能对下列内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"333kmlh2gpl3qap77tif02avu\"><a href=\"guide/sharing-ngmodules\">共享模块</a>解释了本页中涉及的这些概念</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n61fq4bh64oca64ah92fj77g\"><a href=\"guide/lazy-loading-ngmodules\">惰性加载模块</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lvx2smj79lwdeup8531yjvm4\"><a href=\"guide/ngmodule-faq\">NgModule 常见问题</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/creating-libraries\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/ngmodule-faq\n - guide/providers\n - guide/router-tutorial-toh\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/core/Injectable\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/core/NgModule#providers\n - api/core/Optional\n - api/core/SkipSelf\n - api/platform-browser/BrowserModule\n - api/router/Router\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/upgrade/static\n - guide/lazy-loading-ngmodules\n - guide/ngmodule-faq\n - guide/ngmodule-faq#q-why-bad\n - guide/sharing-ngmodules\n - guide/singleton-services#forroot-and-the-router\n - guide/singleton-services#how-forroot-works\n - guide/singleton-services#more-on-ngmodules\n - guide/singleton-services#ngmodule-providers-array\n - guide/singleton-services#prevent-reimport-of-the-greetingmodule\n - guide/singleton-services#providedIn\n - guide/singleton-services#providing-a-singleton-service\n - guide/singleton-services#singleton-services\n - guide/singleton-services#the-forroot-pattern\n - guide/singleton-services#using-providedin\n - tutorial/tour-of-heroes\n - tutorial/tour-of-heroes/toh-pt4\n-->"}
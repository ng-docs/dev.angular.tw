{"id":"guide/singleton-services","title":"單例服務","contents":"<div class=\"content\">\n  <h1 id=\"singleton-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"essl9gfrqg45g47n7kl5z0gxp\">單例服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#singleton-services\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckm5exsmenhkp3azz44373i80\">單例服務是指在應用中只存在一個實例的服務。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eh2l68rr7ss3ycwrop1q5fy7f\">本頁中描述的這種全應用級單例服務的例子位於<live-example name=\"ngmodules\"></live-example>，它示範了 NgModule 的所有已文件化的屬性。</p>\n<h2 id=\"providing-a-singleton-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8sl670sylcg1vukn5ecj4wovf\">提供單例服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#providing-a-singleton-service\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y76osnfeejbdfugpj5ht65uf\">在 Angular 中有兩種方式來生成單例服務：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"329g9ooljb3vitn0s0f8zekb8\">把 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 中的 <code>providedIn</code> 屬性設定為 <code>\"root\"</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d90rvxzdcxavsqd78a9f4zkie\">把該服務包含在 <code>AppModule</code> 或某個只會被 <code>AppModule</code> 匯入的模組中。</li>\n</ul>\n<p><a id=\"providedIn\"></a></p>\n<h3 id=\"using-providedin\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sydl5lj799ufsa0u4e8poilr\">使用 <code>providedIn</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#using-providedin\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ul4l5lweo0gplbkw1tbw0tqt\">從 Angular 6.0 開始，建立單例服務的首選方式就是在那個服務類別的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 裝飾器上把 <code>providedIn</code> 設定為 <code>root</code>。這會告訴 Angular 在應用的根上提供此服務。</p>\n<code-example path=\"providers/src/app/user.service.0.ts\" header=\"src/app/user.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class UserService {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75lab7982uh4gmvu3cun97zb2\">要想深入瞭解關於服務的訊息，參閱<a href=\"tutorial/tour-of-heroes\">《英雄之旅》教學課程</a>中的<a href=\"tutorial/tour-of-heroes/toh-pt4\">服務</a>一章。</p>\n<h3 id=\"ngmodule-providers-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cc44zmw8gd45i4uw212aujet\">NgModule 的 <code>providers</code> 陣列<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#ngmodule-providers-array\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e19cv09wn2m2kntmk4kfd0tpo\">在基於 Angular 6.0 以前的版本建立的應用中，服務是註冊在 NgModule 的 <code>providers</code> 陣列中的，就像這樣：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  …\n  providers: [UserService],\n  …\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3la7z01run2fxk7buz2v7v6my\">如果這個 NgModule 是根模組 <code>AppModule</code>，此 <code>UserService</code> 就會是單例的，並且在整個應用中都可用。雖然你可能會看到這種形式的程式碼，但是最好使用在服務自身的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器上設定 <code>providedIn</code> 屬性的形式，因為 Angular 6.0 可以對這些服務進行搖樹最佳化。</p>\n<p><a id=\"forRoot\"></a></p>\n<h2 id=\"the-forroot-pattern\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s0x3w8qbcdtrtmjvai66phid\"><code>forRoot()</code> 模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#the-forroot-pattern\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51psyzuys866g3h6zjz8h858\">通常，你只需要用 <code>providedIn</code> 提供服務，用 <code>forRoot()</code>/<code>forChild()</code> 提供路由即可。不過，理解 <code>forRoot()</code> 為何能夠確保服務只有單個實例，可以讓你學會更深層次的開發知識。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mh6e525k4s32t63j15xw7dno\">如果模組同時定義了 providers（服務）和 declarations（元件、指令、通道），那麼，當你同時在多個屬性模組中載入此模組時，這些服務就會被註冊在多個地方。這會導致出現多個服務實例，並且該服務的行為不再像單例一樣。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"duvt9n4tph6fv99rvd92j1cj8\">有多種方式來防止這種現象：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6c77enka4e93umiet17z2ysu7\">用 <a href=\"guide/singleton-services#providedIn\"><code>providedIn</code> 語法</a>代替在模組中註冊服務的方式。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kn27x0cn4z2oagix406bbqs\">把你的服務分離到它們自己的模組中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kjw06zvs1ojwnc9s6bvqnckf\">在模組中分別定義 <code>forRoot()</code> 和 <code>forChild()</code> 方法。</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fazs687c3nu8t64u652drx3z\"><strong>注意</strong>：<br>\n有兩個範例應用可以讓你檢視這種情況，更高階的方式參閱 <live-example nodownload=\"\" name=\"ngmodules\">NgModules 現場演練</live-example>，它在路由模組中包含 <code>forRoot()</code> 和 <code>forChild()</code>，而 <code>GreetingModule</code> 是一個比較簡單的<live-example name=\"lazy-loading-ngmodules\" nodownload=\"\">延遲載入範例</live-example>。在<a href=\"guide/lazy-loading-ngmodules\">延遲載入模組</a>中有簡要的解釋。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5l3boadny9lt6wny39iji3voj\">使用 <code>forRoot()</code> 來把提供者從該模組中分離出去，這樣你就能在根模組中匯入該模組時帶上 <code>providers</code>，並且在子模組中匯入它時不帶 <code>providers</code>。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhk1f4h5qgwmhpyhizas6vqp1\">在該模組中建立一個靜態方法 <code>forRoot()</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec1j9fb17jc1rv1tx0vqjx023\">把這些提供者放進 <code>forRoot()</code> 方法中。</li>\n</ol>\n<code-example header=\"src/app/greeting/greeting.module.ts\" path=\"ngmodules/src/app/greeting/greeting.module.ts\" region=\"for-root\">\n<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: UserServiceConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&lt;GreetingModule&gt; {\n  return {\n    ngModule: GreetingModule,\n    providers: [\n      {provide: UserServiceConfig, useValue: config }\n    ]\n  };\n}\n\n</code-example>\n<p><a id=\"forRoot-router\"></a></p>\n<h3 id=\"forroot-and-the-router\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nokude0pv5h8b0udcdq6k5oj\"><code>forRoot()</code> 和 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#forroot-and-the-router\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"z6rcqe52pij99ooj5rryx9ra\"><code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 中提供了 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服務，同時還有一些路由指令，比如 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 和 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 等。應用的根模組匯入了 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>，以便應用中有一個 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服務，並且讓應用的根元件可以訪問各個路由器指令。任何一個屬性模組也必須匯入 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>，這樣它們的元件範本中才能使用這些路由器指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bljhuyhd050oqinempnbgb95\">如果 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 沒有 <code>forRoot()</code>，那麼每個屬性模組都會實例化一個新的 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 實例，而這會破壞應用的正常邏輯，因為應用中只能有一個 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 實例。透過使用 <code>forRoot()</code> 方法，應用的根模組中會匯入 <code>RouterModule.forRoot(...)</code>，從而獲得一個 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 實例，而所有的屬性模組要匯入 <code>RouterModule.forChild(...)</code>，它就不會實例化另外的 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5145gvemm41ybxncbuighq8b5\"><strong>注意</strong>：<br>\n如果你的某個模組也同時有 providers 和 declarations，你也<em>可以</em>使用這種技巧來把它們分開。你可能會在某些傳統應用中看到這種模式。\n不過，從 Angular 6.0 開始，提供服務的最佳實踐是使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的 <code>providedIn</code> 屬性。</p>\n</div>\n<h3 id=\"how-forroot-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pww07skb60zzs9sttya55pwp\"><code>forRoot()</code> 的工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#how-forroot-works\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6y4uoif8lxgq3hp7946zuobu3\"><code>forRoot()</code> 會接受一個服務設定物件，並回傳一個 <a href=\"api/core/ModuleWithProviders\">ModuleWithProviders</a> 物件，它帶有下列屬性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ghvm54f9feewnb0zbrlubp2h\">屬性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>ngModule</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eygwsloky787ughuhexsrwatq\">在這個例子中，\n<code>GreetingModule</code> 類別</td>\n</tr>\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"644209uzx56nzirffhrirte29\">設定的提供者</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9h4q4qpdmy3luv60porfaet5u\">在這個 <live-example name=\"ngmodules\">現場演練</live-example>中，根模組 <code>AppModule</code> 匯入了 <code>GreetingModule</code>，並把它的 <code>providers</code> 新增到了 <code>AppModule</code> 的服務提供者清單中。特別是，Angular 會把所有從其它模組匯入的提供者追加到本模組的 <code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> 中列出的提供者之前。這種順序可以確保你在 <code>AppModule</code> 的 <code>providers</code> 中顯式列出的提供者，其優先級高於匯入模組中給出的提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"864jajxpkgr2dpg06hwto61i4\">在這個範例應用中，匯入 <code>GreetingModule</code>，並只在 <code>AppModule</code> 中呼叫一次它的 <code>forRoot()</code> 方法。像這樣註冊它一次就可以防止出現多個實例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23ju25ho9yhlu9lh2h1u2zd0n\">你還可以在 <code>GreetingModule</code> 中新增一個用於設定 <code>UserService</code> 的 <code>forRoot()</code> 方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1f5akp6fr3mevaetgemgz6x7\">在下面的例子中，可選的注入 <code>UserServiceConfig</code> 擴充套件了 <code>UserService</code>。如果 <code>UserServiceConfig</code> 存在，就從這個設定中設定使用者名。</p>\n<code-example header=\"src/app/greeting/user.service.ts (constructor)\" path=\"ngmodules/src/app/greeting/user.service.ts\" region=\"ctor\">\nconstructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() config?: UserServiceConfig) {\n  if (config) { this._userName = config.userName; }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw17be10ps7ht9yd3btrmmgts\">下面是一個接受 <code>UserServiceConfig</code> 引數的 <code>forRoot()</code> 方法：</p>\n<code-example header=\"src/app/greeting/greeting.module.ts (forRoot)\" path=\"ngmodules/src/app/greeting/greeting.module.ts\" region=\"for-root\">\n<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: UserServiceConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&lt;GreetingModule&gt; {\n  return {\n    ngModule: GreetingModule,\n    providers: [\n      {provide: UserServiceConfig, useValue: config }\n    ]\n  };\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gx3mhgsnkj5daff9lz33280e\">最後，在 <code>AppModule</code> 的 <code>imports</code><em>清單</em>中呼叫它。在下面的程式碼片段中，省略了檔案的另一部分。要檢視完整檔案，參閱 <live-example name=\"ngmodules\"></live-example> 或繼續閱讀本文件的後續章節。</p>\n<code-example header=\"src/app/app.module.ts (imports)\" path=\"ngmodules/src/app/app.module.ts\" region=\"import-for-root\">\nimport { GreetingModule } from './greeting/greeting.module';\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    GreetingModule.forRoot({userName: 'Miss Marple'}),\n  ],\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b75rkwyju6qhemnu8wpudb3rk\">該應用不再顯示預設的 『Sherlock Holmes』，而是用 『Miss Marple』 作為使用者名稱。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9erq0f8g283hszee80ft0bjhk\">記住：在本文件的頂部要以 JavaScript import 形式匯入 <code>GreetingModule</code>，並且不要把它多次加入到本 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 清單中。</p>\n<h2 id=\"prevent-reimport-of-the-greetingmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwqlvjmfz4rnbs3dwmovfopyi\">防止重複匯入 <code>GreetingModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#prevent-reimport-of-the-greetingmodule\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba8f3t34syo6j9f629alqfzxf\">只有根模組 <code>AppModule</code> 才能匯入 <code>GreetingModule</code>。如果一個延遲載入模組也匯入了它，該應用就會為服務生成<a href=\"guide/ngmodule-faq#q-why-bad\">多個實例</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"48f5jjz1xps2v2p705eqjtgfm\">要想防止延遲載入模組重複匯入 <code>GreetingModule</code>，可以新增如下的 <code>GreetingModule</code> 建構式函式。</p>\n<code-example header=\"src/app/greeting/greeting.module.ts\" path=\"ngmodules/src/app/greeting/greeting.module.ts\" region=\"ctor\">\nconstructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() parentModule?: GreetingModule) {\n  if (parentModule) {\n    throw new Error(\n      'GreetingModule is already loaded. Import it in the AppModule only');\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3a0yzblog8ey8johnkyw6wg43\">該建構式函式要求 Angular 把 <code>GreetingModule</code> 注入它自己。如果 Angular 在<em>當前</em>注入器中查詢 <code>GreetingModule</code>，這次注入就會導致死迴圈，但是 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 裝飾器的意思是 \"在注入器樹中層次高於我的祖先注入器中查詢 <code>GreetingModule</code>。\"</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhhbmphz1tfqmv25bhlxjled2\">預設情況下，當注入器找不到想找的提供者時，會丟擲一個錯誤。但 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> 裝飾器表示找不到該服務也無所謂。於是注入器會回傳 <code>null</code>，<code>parentModule</code> 引數也就被賦成了空值，而建構式函式沒有任何異常。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yf1qzu417e4apogeisw078rp\">但如果你把 <code>GreetingModule</code> 匯入到像 <code>CustomersModule</code> 這樣的延遲載入模組中，事情就不一樣了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azm70gy05buczdal5s9gm4ax0\">Angular 建立延遲載入模組時會給它一個自己的注入器，它是根注入器的<em>子注入器</em>。<code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 讓 Angular 在其父注入器中查詢 <code>GreetingModule</code>，這次，它的父注入器是根注入器（而上次的父注入器是空）。當然，這次它找到了由根模組 <code>AppModule</code> 匯入的實例。該建構式函式檢測到存在 <code>parentModule</code>，於是丟擲一個錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9m50t7f8nvybl5x6afb19lenh\">以下這兩個檔案僅供參考：</p>\n<code-tabs>\n   <code-pane header=\"app.module.ts\" path=\"ngmodules/src/app/app.module.ts\">\n\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\n\n/* App Root */\nimport { AppComponent } from './app.component';\n\n/* Feature Modules */\nimport { ContactModule } from './contact/contact.module';\nimport { GreetingModule } from './greeting/greeting.module';\n\n/* Routing Module */\nimport { AppRoutingModule } from './app-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    ContactModule,\n    GreetingModule.forRoot({userName: 'Miss Marple'}),\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-pane>\n   <code-pane header=\"greeting.module.ts\" region=\"whole-greeting-module\" path=\"ngmodules/src/app/greeting/greeting.module.ts\">\nimport { <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>, <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>, <a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>, <a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a> } from '@angular/core';\n\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\nimport { GreetingComponent } from './greeting.component';\nimport { UserServiceConfig } from './user.service';\n\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> ],\n  declarations: [ GreetingComponent ],\n  exports:      [ GreetingComponent ]\n})\nexport class GreetingModule {\n  constructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() parentModule?: GreetingModule) {\n    if (parentModule) {\n      throw new Error(\n        'GreetingModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: UserServiceConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&lt;GreetingModule&gt; {\n    return {\n      ngModule: GreetingModule,\n      providers: [\n        {provide: UserServiceConfig, useValue: config }\n      ]\n    };\n  }\n}\n\n</code-pane>\n</code-tabs>\n<h2 id=\"more-on-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpukz8usqrzb3byrzbogm52l\">關於 NgModule 的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/singleton-services#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ho2p43rev7e4non44xvp10gw\">你還可能對下列內容感興趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"333kmlh2gpl3qap77tif02avu\"><a href=\"guide/sharing-ngmodules\">共享模組</a>解釋了本頁中涉及的這些概念</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n61fq4bh64oca64ah92fj77g\"><a href=\"guide/lazy-loading-ngmodules\">延遲載入模組</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lvx2smj79lwdeup8531yjvm4\"><a href=\"guide/ngmodule-faq\">NgModule 常見問題</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/creating-libraries\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/ngmodule-faq\n - guide/providers\n - guide/router-tutorial-toh\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/core/Injectable\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/core/NgModule#providers\n - api/core/Optional\n - api/core/SkipSelf\n - api/platform-browser/BrowserModule\n - api/router/Router\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/upgrade/static\n - guide/lazy-loading-ngmodules\n - guide/ngmodule-faq\n - guide/ngmodule-faq#q-why-bad\n - guide/sharing-ngmodules\n - guide/singleton-services#forroot-and-the-router\n - guide/singleton-services#how-forroot-works\n - guide/singleton-services#more-on-ngmodules\n - guide/singleton-services#ngmodule-providers-array\n - guide/singleton-services#prevent-reimport-of-the-greetingmodule\n - guide/singleton-services#providedIn\n - guide/singleton-services#providing-a-singleton-service\n - guide/singleton-services#singleton-services\n - guide/singleton-services#the-forroot-pattern\n - guide/singleton-services#using-providedin\n - tutorial/tour-of-heroes\n - tutorial/tour-of-heroes/toh-pt4\n-->"}
{"id":"guide/style-precedence","title":"样式的优先级","contents":"<div class=\"content\">\n  <h1 id=\"style-precedence\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lu05pka3kxkagqqha1ocaozb\">样式的优先级<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#style-precedence\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7unsw2yu6gg61yk04g18rbqtw\">当存在多个绑定具有相同的类名或样式属性名时，Angular 会使用一组优先级规则来确定要应用于此元素的类或样式。这些规则指定了与样式和类相关的绑定的优先顺序。最有特异性的优先级最高，最宽松的优先级最低，样式优先级如下：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"am0uw03g3clv2iiyr1ivzsqkf\">模板绑定是最具体的，因为它们会直接且排他地应用于元素，因此它们具有最高的优先级。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2r869jihckj5ihjje5wkdo5p\">绑定类型</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4iecnoqh39op5dvxqr6b3gip\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhtlys4gb8e2hkqb2wclwgnoe\">属性（Property）绑定</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pv3il6pqnbldp8pnuij7awlj\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [class.foo]=\"hasFoo\"&gt; </code-example> <code-example format=\"html\" hidecopy=\"\" language=\"html\">&lt;div [style.color]=\"color\"&gt; </code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jqwswpidmrefdy0z2hf1cec\">映射绑定</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gqm6t0sfsc06g4qg7st1jdsu\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [class]=\"classExpression\"&gt; </code-example> <code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\"&gt; </code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nhu1zvhgwdgbwe9aqvqyrhxd\">静态值</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hb0vfti0xvj2gkxismochkcm\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div class=\"foo\"&gt; </code-example> <code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\"&gt; </code-example></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5g9csha6y1pdrmhmqf6e0k7ym\">指令的宿主绑定不太有特异性，因为你可以在多个位置使用该指令，因此它们的优先级比模板绑定低。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2r869jihckj5ihjje5wkdo5p\">绑定类型</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4iecnoqh39op5dvxqr6b3gip\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhtlys4gb8e2hkqb2wclwgnoe\">属性（Property）绑定</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bockrqabhon1robz9gqiywhlj\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[class.foo]': 'hasFoo'} </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[style.color]': 'color'} </code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jqwswpidmrefdy0z2hf1cec\">映射绑定</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jvmqyfyg5j46x5mw8l6h7qnl\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[class]': 'classExpr'} </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpr'} </code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nhu1zvhgwdgbwe9aqvqyrhxd\">静态值</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7a10ay5sgxeitkm4nl7h0e4d8\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'class': 'foo'} </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'} </code-example></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahgynsowikjipmbf7g3v038ig\">组件宿主绑定的优先级最低。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2r869jihckj5ihjje5wkdo5p\">绑定类型</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4iecnoqh39op5dvxqr6b3gip\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhtlys4gb8e2hkqb2wclwgnoe\">属性（Property）绑定</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2if99svccubup8wa7lwyknszq\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[class.foo]': 'hasFoo'} </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\">host: {'[style.color]': 'color'} </code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jqwswpidmrefdy0z2hf1cec\">映射绑定</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7ejiyl6tg9431dynu1jouam5\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[class]': 'classExpression'} </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpression'} </code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nhu1zvhgwdgbwe9aqvqyrhxd\">静态值</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7a10ay5sgxeitkm4nl7h0e4d8\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'class': 'foo'} </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> host: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'} </code-example></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<h2 id=\"precedence-and-specificity\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9d33qeilbt0ga26iqt34stxls\">优先级与特异性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#precedence-and-specificity\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4etrq78hgvk1xmiucwuqhx99\">在下面的示例中，与 <code>[class.special]</code> 对特定类的绑定优先于一般性的 <code>[class]</code> 绑定。同样，到特定样式的绑定（比如 <code>[style.color]</code>）要优先于一般性的 <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> 绑定。</p>\n<code-example header=\"src/app/app.component.html\" path=\"attribute-binding/src/app/app.component.html\" region=\"basic-specificity\">\n&lt;h3&gt;Basic specificity&lt;/h3&gt;\n\n&lt;!-- The `class.special` binding overrides any value for the `special` class in `classExpression`.  --&gt;\n&lt;div [class.special]=\"isSpecial\" [class]=\"classExpression\"&gt;Some text.&lt;/div&gt;\n\n&lt;!-- The `style.border` binding overrides any value for the `border` property in `styleExpression`.  --&gt;\n&lt;div [style.border]=\"border\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\"&gt;Some text.&lt;/div&gt;\n\n</code-example>\n<h2 id=\"precedence-and-bindings-from-different-sources\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axxwc4onoh570590w57hb2sv2\">来自不同来源的优先级和绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#precedence-and-bindings-from-different-sources\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ag1mllfjltg8qyn3t60qm3q7\">特异性规则也作用于绑定，即使它们来自不同的来源。元素可以具有源自针对自身模板的绑定、源自其匹配指令的宿主绑定以及源自匹配其组件的宿主绑定。</p>\n<code-example header=\"src/app/app.component.html\" path=\"attribute-binding/src/app/app.component.html\" region=\"source-specificity\">\n&lt;h3&gt;Source specificity&lt;/h3&gt;\n\n&lt;!-- The `class.special` template binding overrides any host binding to the `special` class set by `dirWithClassBinding` or `comp-with-host-binding`.--&gt;\n\n&lt;comp-with-host-binding [class.special]=\"isSpecial\" dirWithClassBinding&gt;&lt;/comp-with-host-binding&gt;\n\n\n&lt;!-- The `style.color` template binding overrides any host binding to the `color` property set by `dirWithStyleBinding` or `comp-with-host-binding`. --&gt;\n&lt;div&gt;\n  &lt;comp-with-host-binding [style.color]=\"color\" dirWithStyleBinding&gt;&lt;/comp-with-host-binding&gt;\n&lt;/div&gt;\n\n&lt;h3&gt;Dynamic vs <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>&lt;/h3&gt;\n\n&lt;!-- If `[class.special]` equals false, this value overrides the `class=\"special\"` below --&gt;\n&lt;div class=\"special\" [class.special]=\"false\"&gt;Some text.&lt;/div&gt;\n\n&lt;!-- If `styleExpression` has a value for the `border` property, this value overrides the `<a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"border: dotted darkblue 3px\"` below --&gt;\n&lt;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"border: dotted darkblue 3px\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\"&gt;Some text.&lt;/div&gt;\n\n\n&lt;div class=\"readability\"&gt;\n  &lt;comp-with-host-binding dirWithHostBinding&gt;&lt;/comp-with-host-binding&gt;\n&lt;/div&gt;\n\n&lt;app-my-input-with-attribute-decorator type=\"number\"&gt;&lt;/app-my-input-with-attribute-decorator&gt;\n\n\n</code-example>\n<h2 id=\"precedence-of-bindings-and-static-attributes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kt6315eyhmw6el1tyx0cxmcd\">绑定和静态 Attribute 的优先级<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#precedence-of-bindings-and-static-attributes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86536upzr07ef0b1c4dhgjoum\">绑定优先于静态属性，因为它们是动态的。在以下情况下，<code>class</code> 和 <code>[class]</code> 具有相似的特异性，但是 <code>[class]</code> 绑定更有优先权。</p>\n<code-example header=\"src/app/app.component.html\" path=\"attribute-binding/src/app/app.component.html\" region=\"dynamic-priority\">\n&lt;h3&gt;Dynamic vs <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>&lt;/h3&gt;\n\n&lt;!-- If `[class.special]` equals false, this value overrides the `class=\"special\"` below --&gt;\n&lt;div class=\"special\" [class.special]=\"false\"&gt;Some text.&lt;/div&gt;\n\n&lt;!-- If `styleExpression` has a value for the `border` property, this value overrides the `<a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"border: dotted darkblue 3px\"` below --&gt;\n&lt;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"border: dotted darkblue 3px\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\"&gt;Some text.&lt;/div&gt;\n\n\n</code-example>\n<p><a id=\"styling-delegation\"></a></p>\n<h2 id=\"delegating-to-styles-with-lower-precedence\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eridto4a3xyeqazt2g80fieas\">委托给优先级较低的样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#delegating-to-styles-with-lower-precedence\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8j3k4nd2baxvlgjvqrh1agn8v\">通过使用 <code>undefined</code> 值，较高优先级的样式也可以让位于较低优先级的样式。比如，考虑以下模板：</p>\n<code-example header=\"src/app/app.component.html\" path=\"attribute-binding/src/app/app.component.html\" region=\"style-delegation\">\n&lt;comp-with-host-binding dirWithHostBinding&gt;&lt;/comp-with-host-binding&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jdaf49hinw66o0hcjx570nax\">假设 <code>dirWithHostBinding</code> 指令和 <code>comp-with-host-binding</code> 组件都具有 <code>[style.width]</code> 宿主绑定。</p>\n<code-example header=\"src/app/comp-with-host-binding.component.ts and dirWithHostBinding.directive.ts\" path=\"attribute-binding/src/app/comp-with-host-binding.component.ts\" region=\"hostbinding\">\n@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.width')\nwidth = '200px';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"covmp3sfl9gpz746ai41dp0m5\">如果 <code>dirWithHostBinding</code> 将其绑定设置为 <code>undefined</code>，则 <code>width</code> 属性将回退到 <code>comp-with-host-binding</code> 宿主绑定的值。</p>\n<code-example format=\"typescript\" header=\"dirWithHostBinding directive\" language=\"typescript\">\n\n@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.width')\nwidth = ''; // undefined\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2szd1xol9g8ni3x8ucc96pwa\">但如果 <code>dirWithHostBinding</code> 将其绑定设置为 <code>null</code>（只有 undefined 是例外），则 Angular 会完全移除 <code>width</code> 属性。</p>\n<code-example format=\"typescript\" header=\"dirWithHostBinding\" language=\"typescript\">\n\n@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.width')\nwidth = null;\n\n</code-example>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/class-binding\n-->\n<!-- links from this doc:\n - api/animations/style\n - api/core/HostBinding\n - api/upgrade/static\n - guide/style-precedence#delegating-to-styles-with-lower-precedence\n - guide/style-precedence#precedence-and-bindings-from-different-sources\n - guide/style-precedence#precedence-and-specificity\n - guide/style-precedence#precedence-of-bindings-and-static-attributes\n - guide/style-precedence#style-precedence\n-->"}
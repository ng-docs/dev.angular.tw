{"id":"guide/template-statements","title":"模板语句","contents":"<div class=\"content\">\n  <h1 id=\"template-statements\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3h6h64ogldnmi7qf3gggut7p\">模板语句<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#template-statements\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"but0i4tc7y7jtmgjpry4ppvp5\">模板语句是可在 HTML 中用于响应用户事件的方法或属性。使用模板语句，你的应用可以通过诸如显示动态内容或提交表单之类的动作吸引用户。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dkq8dm61bgipn5dpahuyclx8\">关于本指南中的语法和代码段的信息，请参阅<live-example name=\"template-syntax\">Template syntax</live-example>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnofh6e8ge1eovztf1k48u19t\">在以下示例中，模板语句 <code>deleteHero()</code> 出现在 <code>=</code> 号右侧的引号中，<code>(event)=\"statement\"</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\">\n&lt;button type=\"button\" (click)=\"deleteHero()\"&gt;Delete hero&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vd2naj84ofehtun8ph70w412\">当用户单击 <strong>Delete hero</strong> 按钮时，Angular 就会调用组件类中 <code>deleteHero()</code> 方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3cn3i3ihx1fqjc7ezz2u36pep\">可以将模板语句与元素、组件或指令一起使用以响应事件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6eh6ahi8t2eampf2c6sp1dvof\">响应事件是 Angular <a href=\"guide/glossary#unidirectional-data-flow\">单向数据流</a>的一个方面。你可以在单个事件循环中更改应用程序中的任何内容。</p>\n</div>\n<h2 id=\"syntax\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p44mx807exjp3s0k9dwbuxla\">语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#syntax\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qkkmsuba64chabgt8b0xousd\">与<a href=\"guide/interpolation\">模板表达式</a>一样，模板语句使用类似于 JavaScript 的语言。但是，模板语句的解析器与模板表达式的解析器有所不同。此外，模板语句解析器特别支持基本赋值 <code>=</code> 和带有分号 <code>;</code> 的串联表达式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckwze78p30j6zoo7yylstxvq6\">不允许使用以下 JavaScript 和模板表达式语法：</p>\n<ul>\n<li><code>new</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qo3c8z0tazjokvi1pluiohra\">递增和递减运算符 <code>++</code> 和 <code>--</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pr47it3z2s15favw4i6s3oxe\">赋值运算符，比如 <code>+=</code> 和 <code>-=</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjrqlord5kfqnzuw7jfeotj13\">按位运算符，比如 <code>|</code> 和 <code>&amp;</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3q7v9l6cl0bnh3zxbhjxwo8gc\">管道操作符</li>\n</ul>\n<h2 id=\"statement-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cguu1rzuch240shyt0c3o7thy\">语句的上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#statement-context\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bos69zuv8i4cqly67p5csco0b\">语句具有上下文 - 也就是语句所属应用中的特定部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61a7dx04dtjr1rqljbpprnw5v\">语句只能引用语句上下文中的内容，通常是组件实例。比如，<code>(click)=\"deleteHero()\"</code> 中的 <code>deleteHero()</code> 就是下面代码段中的组件方法之一。</p>\n<code-example header=\"src/app/app.component.html\" path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\">\n&lt;button type=\"button\" (click)=\"deleteHero()\"&gt;Delete hero&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8o7xd811gljpmk1b6tbk9aj12\">语句上下文还可以引用模板自身的上下文属性。在下面的示例中，组件的事件处理方法 <code>onSave()</code> 将模板自己的 <code>$event</code> 对象用作参数。在接下来的两行中，<code>deleteHero()</code> 方法接收了<a href=\"guide/structural-directives#shorthand\">模板输入变量</a> <code>hero</code> 作为参数，而 <code>onSubmit()</code> 接收了<a href=\"guide/template-reference-variables\">模板引用变量</a> <code>#heroForm</code> 作为参数。</p>\n<code-example header=\"src/app/app.component.html\" path=\"template-syntax/src/app/app.component.html\" region=\"context-var-statement\">\n&lt;button type=\"button\" (click)=\"onSave($event)\"&gt;Save&lt;/button&gt;\n&lt;button type=\"button\" *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" (click)=\"deleteHero(hero)\"&gt;{{hero.name}}&lt;/button&gt;\n&lt;form #heroForm (ngSubmit)=\"onSubmit(heroForm)\"&gt; ... &lt;/form&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yt2hy11jexx18jpbcwt44i7a\">在这个例子中，<code>$event</code> 对象、<code>hero</code> 和 <code>#heroForm</code> 的上下文都是其模板。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1c7bhg3nh4lu7m7z2exn6i1bo\">模板上下文中的名称优先于组件上下文中的名称。前面 <code>deleteHero(hero)</code> 中的 <code>hero</code> 是模板输入变量，而不是组件的 <code>hero</code> 属性。</p>\n<h2 id=\"statement-best-practices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4k8sni58r2949fznir3m5mzrs\">模板语句最佳实践<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#statement-best-practices\"><i class=\"material-icons\">link</i></a></h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ek8e4x2w81qq5uycuuqaae0n\">实践</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90l6p6i4qc71c9afmg0hvhzal\">简洁性</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jo10btrxtlz0bz8fqulog8dg\">使用方法调用或基本属性赋值来保持模板语句简洁。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cex5xa6v9xdnuf1h5rdx18md\">在上下文中工作</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9x327rcr92xz5sj26fx5f3wyz\">模板语句的上下文可以是组件类实例或模板本身。因此，模板语句不能引用全局命名空间中的任何内容，如\n<code>window</code>或\n<code>document</code>。例如，模板语句不能调用\n<code>console.log()</code>或\n<code>Math.max()</code>。</td>\n</tr>\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Aug 14 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/binding-syntax\n - guide/event-binding\n - guide/template-syntax\n - guide/user-input\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - guide/glossary#unidirectional-data-flow\n - guide/interpolation\n - guide/pipes-overview\n - guide/structural-directives#shorthand\n - guide/template-reference-variables\n - guide/template-statements#statement-best-practices\n - guide/template-statements#statement-context\n - guide/template-statements#syntax\n - guide/template-statements#template-statements\n-->"}
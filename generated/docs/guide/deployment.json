{"id":"guide/deployment","title":"部署","contents":"<div class=\"content\">\n  <h1 id=\"deployment\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv5xyx954f4euqqbhzcw4cntn\">部署<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deployment\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ow1ahp4bquea3r5gb895r8xk\">当你准备把 Angular 应用部署到远程服务器上时，有很多可选的部署方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"131fojefm50pcqrwdany9wpoz\"><a id=\"dev-deploy\"></a>\n<a id=\"copy-files\"></a></p>\n<h2 id=\"simple-deployment-options\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9g53xopnbps8d31pjcvwj94m4\">最简单的部署选项<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#simple-deployment-options\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cx2mjwzupapewt0y2vjx7z9wi\">在完整部署应用之前，你可以先临时用一种技术来测试流程、构建配置和部署行为。</p>\n<h3 id=\"building-and-serving-from-disk\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81627arwd1fcb0aupynaf8zaa\">从磁盘构建和提供服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#building-and-serving-from-disk\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sluzifp11v6cdkp4igv5lk0s\">在开发过程中，你通常会使用 <code>ng serve</code> 命令来借助 <a href=\"https://webpack.js.org/guides/development/#webpack-dev-server\">webpack-dev-server</a> 在本地内存中构建、监控和提供服务。但是，当你打算部署它时，就必须使用 <code>ng build</code> 命令来构建应用并在其它地方部署这些构建成果。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9g0d0seqru50ipwayxg5rw3ps\"><code>ng build</code> 和 <code>ng serve</code> 在构建项目之前都会清除输出文件夹，但只有 <code>ng build</code> 命令会把生成的构建成果写入输出文件夹中。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7doue110hipmcyb26l6qbo6sw\">默认情况下，输出目录是 <code>dist/project-name/</code>。要输出到其它文件夹，就要修改 <code>angular.json</code> 中的 <code>outputPath</code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9yx9v3uz89l5oiqxchtyjkkcc\">当开发临近收尾时，让本地 Web 服务器使用输出文件夹中的内容提供服务可以让你更好地了解当应用部署到远程服务器时的行为。你需要用两个终端才能体验到实时刷新的特性。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cyyvybz2uaedg3soehzsq9ed\">在第一个终端上，在<em>监控（watch）</em>模式下执行 <a href=\"cli/build\"><code>ng build</code> 命令</a>把该应用编译进 <code>dist</code> 文件夹。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build --watch\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ablp5y65vymr6hr92bb9sy13j\">与 <code>ng serve</code> 命令一样，当源文件发生变化时，就会重新生成输出文件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3gk3a7vyqtbjy6b820fkzg0do\">在第二个终端上，安装一个 Web 服务器（比如 <a href=\"https://github.com/johnpapa/lite-server\">lite-server</a>），然后使用输出文件夹中的内容运行它。比如：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nlite-server --baseDir=\"dist/project-name\"\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blbbxr8pgucukkx583w7v4b99\">每当输出了新文件时，服务器就会自动刷新你的浏览器。</p>\n</li>\n</ul>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tfrunzuhawbdqhsnriea2da2\">该方法只能用于开发和测试，在部署应用时，它不受支持，也不是安全的方式。</p>\n</div>\n<h3 id=\"automatic-deployment-with-the-cli\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djqzyeys0ugqez6d80swl559i\">使用 CLI 进行自动部署<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#automatic-deployment-with-the-cli\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8f7ij4g0jd45jnxohqvajferw\">Angular CLI 命令 <code>ng deploy</code>（在版本 8.3.0 中引入）执行与你的项目关联的 <code>deploy</code> <a href=\"guide/cli-builder\">CLI 构建器</a>。有许多第三方构建器实现了到不同平台的部署功能。你可以通过运行 <code>ng add [package name]</code> 把它们中的任何一个添加到项目中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4m754e12iryuxu6906kt0g91s\">添加具有部署功能的程序包时，它将为所选项目自动更新自动更新工作区配置（<code>angular.json</code> 文件）中的 <code>deploy</code> 部分。然后，你就可以使用 <code>ng deploy</code> 命令来部署该项目了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sfhqsb7blce47gbq42peo2t7\">比如，以下命令将项目自动部署到 Firebase。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng add @angular/fire\nng deploy\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4jshpvvs3s5xjvoauqi7vsrg\">该命令是交互式的。在这种情况下，你必须拥有或创建 Firebase 帐户，并使用该帐户进行身份验证。该命令提示你选择要部署的 Firebase 项目。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vf7zqv81g8jko0lfi9tv8k00\">该命令会构建你的应用，并将生产环境的资产文件上传到 Firebase。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exvt3kmjsiiu6z70dzcwawis9\">在下表中，你可以找到实现了到不同平台部署功能的软件包列表。每个软件包的 <code>deploy</code> 命令可能需要不同的命令行选项。你可以通过以下与包名称相关的链接来阅读更多内容：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z393y96ullrkhsmsr4bv7wo8\">部署到</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xgsw2mzyxp4abkks03qoyo30\">包</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bnztze3zthccrsbxcldk1gop\"><a href=\"https://firebase.google.com/docs/hosting\">Firebase hosting</a></td>\n<td align=\"left\"><a href=\"https://npmjs.org/package/@angular/fire\"><code>@angular/fire</code></a></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7419dr9lfy3w8jft4lq3n7ovu\"><a href=\"https://vercel.com/solutions/angular\">Vercel</a></td>\n<td align=\"left\"><a href=\"https://github.com/vercel/vercel/tree/main/examples/angular\"><code>vercel init angular</code></a></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o4xon4qgn9cyako1vbm3aedx\"><a href=\"https://www.netlify.com\">Netlify</a></td>\n<td align=\"left\"><a href=\"https://npmjs.org/package/@netlify-builder/deploy\"><code>@netlify-builder/deploy</code></a></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71fwkaf7xjlrxjrnsfwcfhny7\"><a href=\"https://pages.github.com\">GitHub pages</a></td>\n<td align=\"left\"><a href=\"https://npmjs.org/package/angular-cli-ghpages\"><code>angular-cli-ghpages</code></a></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6adlztvemhdhgfnkhkawtw462\"><a href=\"https://aws.amazon.com/s3/?nc2=h_ql_prod_st_s3\">Amazon Cloud S3</a></td>\n<td align=\"left\"><a href=\"https://www.npmjs.com/package/@jefiozie/ngx-aws-deploy\"><code>@jefiozie/ngx-aws-deploy</code></a></td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"att60rwv832ucexpz37y4odee\">如果要部署到自己管理的服务器上，或者缺少针对你喜欢的云平台的构建器，则可以创建支持你使用 <code>ng deploy</code> 命令的构建器，或者通读本指南以了解如何手动部署应用程序。</p>\n<h3 id=\"basic-deployment-to-a-remote-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajlq9qy8ph19id4pl4qcf6t69\">最简化的部署方式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#basic-deployment-to-a-remote-server\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tan2qappr2d1mwrb5i2utd88\">最简化的部署方式就是为开发环境构建，并把其输出复制到 Web 服务器上。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv1ze2aft1zoa9pbsf0p0emem\">使用开发环境进行构建</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ay3c4n6li4opsehc2rqlpw63\">把输出目录（默认为 <code>dist/</code>）下的<em>每个文件</em>都复制到到服务器上的某个目录下。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3q6aljs138cfzwnb6v2iw3ijw\">配置服务器，让缺失的文件都重定向到 <code>index.html</code> 上。\n欲知详情，参阅<a href=\"guide/deployment#fallback\">稍后</a>的服务端重定向部分。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dp2aika4bmt26zii95o08xh4y\">这是对应用进行生产环境部署的最简方式。</p>\n<p><a id=\"deploy-to-github\"></a></p>\n<h3 id=\"deploy-to-github-pages\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37hxoceqllbe9f1fj7lozde6b\">部署到 GitHub Pages<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deploy-to-github-pages\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b856ybx0at6wmo2v0ajindamw\">要将 Angular 应用程序部署到 <a href=\"https://help.github.com/articles/what-is-github-pages\">GitHub Pages</a>，请遵循以下步骤：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mmalmtpyq8cf5cekt5hjkelk\">为你的项目<a href=\"https://help.github.com/articles/create-a-repo\">创建一个 GitHub Pages 仓库</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rwt7v0a9yhfj64r3t4qmqio8\">通过添加指定你在上一步中创建的 GitHub 存储库的远端地址，来在本地项目中配置 <code>git</code>。创建存储库时，GitHub 已提供了这些命令，以便你可以在命令提示符下复制和粘贴它们。尽管 GitHub 会为你填上某些特定于项目的设置，但这些命令应该类似于以下形式：</p>\n<code-example format=\"shell\" language=\"shell\">\n\ngit remote add origin https://github.com/your-username/your-project-name.git\ngit branch -M main\ngit push -u origin main\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8aqos1jt2c8joswk5q726prld\">当你从 GitHub 粘贴这些命令时，它们会自动运行。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ewl1p55629u8v7dtdc2ycqgl\">创建并签出一个名为 <code>gh-pages</code> 的 <code>git</code> 分支。</p>\n<code-example format=\"shell\" language=\"shell\">\n\ngit checkout -b gh-pages\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22jp0zazbt4n73srruvemw6hc\">借助 Angular CLI 命令 <a href=\"cli/build\"><code>ng build</code></a>和以下选项，使用 Github 项目名称构建应用。这里的 <code>your_project_name</code> 是你在步骤 1 中为 GitHub 存储库提供的项目的名称。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3biibyp65eltezno2wlrflofv\">确保在项目名称的两边都包含有斜杠，如 <code>/your_project_name/</code> 的斜杠。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build --output-path docs --base-href /your_project_name/\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92fv6l64oh8u4ubtt02a6e3wa\">当构建完成时，把 <code>docs/index.html</code> 复制为 <code>docs/404.html</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31j76o9np1v9etjslczzmgw84\">提交你的更改，并推送。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3aoxgjkcr6v492lfols0rndt\">在 GitHub 项目页面上，转到 Settings 并向下滚动到 GitHub Pages 部分，以配置<a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source\">要从 docs 文件夹发布</a>的站点。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6y3a0dt4s8lo2ochr72ouj0wf\">单击保存。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jry0eh5lej92rqkkv9yqn64p\">单击 GitHub Pages 区顶部的 “GitHub Pages” 链接，以查看已部署的应用程序。链接的格式为 <code>https://&lt;user_name&gt;.github.io/&lt;project_name&gt;</code>。</p>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ld1223txbthyvxmo3fk4zw6t\">参阅 <a href=\"https://github.com/angular-buch/angular-cli-ghpages\">angular-cli-ghpages</a>，这个包用到了全部这些特性，还提供了一些额外功能。</p>\n</div>\n<p><a id=\"server-configuration\"></a></p>\n<h2 id=\"server-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cus25l7be89usrqmjupkn8lo3\">服务端配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#server-configuration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ara9sa2dk62wxzr535k7ok8gu\">这一节涵盖了你可能对服务器或准备部署到服务器的文件要做的那些修改。</p>\n<p><a id=\"fallback\"></a></p>\n<h3 id=\"routed-apps-must-fall-back-to-indexhtml\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65wi3y6wgao593e6pixh3c7o8\">带路由的应用必须以 <code>index.html</code> 作为后备页面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#routed-apps-must-fall-back-to-indexhtml\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brn8owoj5dqbyyefjrlecdnam\">Angular 应用很适合用简单的静态 HTML 服务器提供服务。\n你不需要服务端引擎来动态合成应用页面，因为 Angular 会在客户端完成这件事。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"h8zlavfaqiruoi2x2np5pn8i\">如果该应用使用 Angular 路由器，你就必须配置服务器，让它对不存在的文件返回应用的宿主页（<code>index.html</code>）。</p>\n<p><a id=\"deep-link\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqm4slyllv49yvs1m18ua9so0\">带路由的应用应该支持“深链接”。\n所谓<em>深链接</em>就是指一个 URL，它用于指定到应用内某个组件的路径。\n比如，<code>http://www.mysite.com/heroes/42</code> 就是一个到英雄详情页面的<em>深链接</em>，用于显示 <code>id: 42</code> 的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pfaai9eu018fr2qoevh37eu1\">当用户从运行中的客户端应用导航到这个 URL 时，这没问题。\nAngular 路由器会拦截这个 URL，并且把它路由到正确的页面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mfjgpwyld7k0xrcjbx4aqi3s\">但是，当从邮件中点击链接或在浏览器地址栏中输入它或仅仅在英雄详情页刷新下浏览器时，所有这些操作都是由浏览器本身处理的，在应用的控制范围之外。\n浏览器会直接向服务器请求那个 URL，路由器没机会插手。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4dwy545kktwmtxtbv3ftcpfr\">静态服务器会在收到对 <code>http://www.mysite.com/</code> 的请求时返回 <code>index.html</code>，但是会拒绝对 <code>http://www.mysite.com/heroes/42</code> 的请求，\n并返回一个 <code>404 - Not Found</code> 错误，除非，它被配置成了返回 <code>index.html</code>。</p>\n<h4 id=\"fallback-configuration-examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mafbfbru0jg3vqoocfewctnk\">后备页面配置范例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#fallback-configuration-examples\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qh0vd35z7dtay8fxfnce0exv\">没有一种配置可以适用于所有服务器。\n后面这些部分会描述对常见服务器的配置方式。\n这个列表虽然不够详尽，但可以为你提供一个良好的起点。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7fdih3qwjpmwpyyoxyse1yco\">服务器</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8uv9sjfx5zgdo2cgneelhtbjj\"><a href=\"https://httpd.apache.org\">Apache</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52g7l65lgl7flf9lpughn78a0\">将重写规则添加到.htaccess文件中，如下所示（ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess）：\n<code-example format=\"apache\" language=\"apache\">\n  RewriteEngine On # 如果请求的是现有资源或目录，则按原样处理 RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR] RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d RewriteRule ^ - [L] # 如果请求的资源不存在，则使用index.html RewriteRule ^ /index.html \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1a2gi8sf7xpft4o5njnqtu688\"><a href=\"https://nginx.org\">Nginx</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajo0y5wt5q7kit1yl3oy9nkjv\">使用try_files，如在Front Controller Pattern Web Apps中描述的那样修改以提供index.html：\n<code-example format=\"nginx\" language=\"nginx\">\n  try_files $uri $uri/ /index.html; \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fawuzuu0t22hybxv9inv1is2\"><a href=\"https://www.ruby-lang.org\">Ruby</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2ps8nigolngda6lu89u6tjdb\">使用 (\n<a href=\"http://sinatrarb.com\">sinatra</a>) 创建一个 Ruby 服务器，其中包含一个基本的 Ruby 文件用于配置服务器 \n<code>server.rb</code>: \n<code-example format=\"ruby\" language=\"ruby\">\n  require 'sinatra' # 文件夹结构 # . # -- server.rb # -- public # &nbsp;&nbsp; |-- 项目名称 # &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |-- index.html get '/' do &nbsp; folderDir = settings.public_folder + '/项目名称' # ng 构建输出文件夹 &nbsp; send_file File.join(folderDir, 'index.html') end \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.iis.net\">IIS</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92x09eqzo98zmqr02n7i1iew7\">向 \n<code>web.config</code> 添加一个重写规则，类似于此处显示的规则 \n<a href=\"https://stackoverflow.com/a/26152011\">here</a>: \n<code-example format=\"xml\" language=\"xml\">\n  &lt;system.webServer&gt; &nbsp; &lt;rewrite&gt; &nbsp;&nbsp;&nbsp; &lt;rules&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;rule name=\"Angular \n <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>\" stopProcessing=\"true\"&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;match url=\".*\" /&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;conditions logicalGrouping=\"MatchAll\"&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" /&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" /&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/conditions&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;action type=\"Rewrite\" url=\"/index.html\" /&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/rule&gt; &nbsp;&nbsp;&nbsp; &lt;/rules&gt; &nbsp; &lt;/rewrite&gt; &lt;/system.webServer&gt; \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqp6rqqfgn8hb4gi3vqa0jv76\"><a href=\"https://pages.github.com\">GitHub Pages</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pnfeb3ndyd89fn903avymth3\">你无法直接配置 GitHub Pages 服务器，但可以添加一个 404 页面。将 \n<code>index.html</code> 复制到 \n<code>404.html</code>。它仍将作为 404 响应提供，但浏览器将处理该页面并正确加载应用程序。另外，最好从主目录中的 \n<code>docs</code> 提供，并创建一个 \n<code>.nojekyll</code> 文件</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bnztze3zthccrsbxcldk1gop\"><a href=\"https://firebase.google.com/docs/hosting\">Firebase hosting</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaez60dbr5zockhcv96uscg3\">添加一个 \n<a href=\"https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\">重写规则</a>。\n<code-example language=\"json\">\n  \"rewrites\": [ { &nbsp; \"source\": \"**\", &nbsp; \"destination\": \"/index.html\" } ] \n</code-example></td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"mime\"></a></p>\n<h3 id=\"configuring-correct-mime-type-for-javascript-assets\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u80lmg8et93iuzdlijwepa6q\">为 JavaScript 资产配置正确的 MIME 类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#configuring-correct-mime-type-for-javascript-assets\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5j8ya272ji997m9sauapa3iv6\">你的所有应用程序 JavaScript 文件都必须由服务器提供出来，并将 <a href=\"https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type\"><code>Content-Type</code> 标头</a>设置为 <code>text/javascript</code> 或其他<a href=\"https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types#textjavascript\">与 JavaScript 兼容的 MIME-type</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dr8njtnyyeq5n3foq38rfiuhg\">默认情况下，大多数服务器和托管服务已经这样做了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jllcdiz70leg3b5a871x4n1v\">如果服务器为 JavaScript 文件配置了错误的 MIME 类型，将导致应用程序无法启动并出现以下错误：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nFailed to load module script: The server responded with a non-JavaScript MIME type of \"text/plain\". Strict MIME type checking is enforced for module scripts per HTML spec.\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kvn3zri1qxiuxwehq4c0nqqm\">如果是这种情况，你将需要检查你的服务器配置并将其重新配置为使用 <code>Content-Type: text/javascript</code> 来提供 <code>.js</code> 文件。有关如何执行此操作的说明，参阅服务器手册。</p>\n<p><a id=\"cors\"></a></p>\n<h3 id=\"requesting-services-from-a-different-server-cors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3zpa9m01ec4axufgfr5mltumh\">请求来自另一个服务器的服务（CORS）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#requesting-services-from-a-different-server-cors\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26eq5q00fm9kpk418rpieiqp1\">Angular 开发者在向与该应用的宿主服务器不同域的服务器发起请求时，可能会遇到一种<a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" title=\"Cross-origin resource sharing\"><em>跨域资源共享</em></a>错误。\n浏览器会阻止该请求，除非得到那台服务器的明确许可。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a12z6kr5e5pdgc7ioe4uwldms\">客户端应用对这种错误无能为力。\n服务器必须配置成可以接受来自该应用的请求。\n要了解如何对特定的服务器开启 CORS，参阅 <a href=\"https://enable-cors.org/server.html\" title=\"Enabling CORS server\">enable-cors.org</a>。</p>\n<p><a id=\"optimize\"></a></p>\n<h2 id=\"production-optimizations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wwt99gu4am1wtjrx7zj40993\">为生产环境优化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#production-optimizations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4b3tn3sdt9i0v9sis2b9dn1r8\"><code>production</code> 配置项指定如下优化特性。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"920kaz2p0y1fs418qurz1o45h\">特性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an97f0sxfbxresfzdh7hxwdn7\"><a href=\"guide/aot-compiler\">预先编译 (AOT) Compilation</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yb8zz8ddt7tdwji6yyvyaph\">预先编译 Angular 组件模板。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3d82kn7r32k93e2e6wqyccxfg\"><a href=\"guide/deployment#prod-mode\">生产模式</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9f0v26zrjobww0yt7oyc84vf\">优化应用程序以获得最佳的运行时性能</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qvpxlyam835o3zcyin4x0ddo\">捆绑</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9md491yzrupbmvu5dsqaemxgl\">将许多应用程序和库文件合并为几个捆绑包。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ek5u9nqf8h8b8uzwnu5ybna0y\">最小化</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a55ozwq9oql8f3dbm49k0nzzo\">删除多余的空格、注释和可选令牌。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8tcjpc7i38anfw6ez29z8cfuq\">优化</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61a61zdf3lt17q9ubraz1ca7x\">重写代码以使用简短、神秘的变量和函数名称。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wp9k2dwc9z66yx7vn2f3185d\">消除死代码</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f36g8lp8gbh3xshxu2cp5siy4\">删除未引用的模块和大部分未使用的代码。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evpmg620xddf764u06d0kazfu\">要了解关于 CLI 构建选项及其作用的更多知识，参阅 <a href=\"cli/build\"><code>ng build</code></a>。</p>\n<p><a id=\"prod-mode\"></a></p>\n<h3 id=\"production-mode-at-runtime\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ozodidgw5cwplx1z3lfnoplr\">运行时的生产模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#production-mode-at-runtime\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8v80fm56c7pnrli36yn5hnr6z\">当你使用 <code>ng serve</code> 在本地运行应用程序时，Angular 会在运行时使用开发模式配置。运行时的开发模式支持额外的安全检查、更详细的错误消息和调试实用程序，例如<a href=\"errors/NG0100\">检查后表达式更改</a>检测。Angular 在浏览器控制台输出一条消息，表明开发模式已启用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekuuipnkutcnnvyd97drqxur1\">这些额外的检查在开发过程中很有帮助，但它们需要捆绑包中的额外代码，这在生产中是不可取的。为确保对包大小没有影响，构建优化器在生产模式下构建时从包中删除仅用于开发的代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epw4lpn7u1i0l3m40v5f43wlu\">使用生产配置构建应用程序会自动启用 Angular 的运行时生产模式。\n<a id=\"lazy-loading\"></a></p>\n<h3 id=\"lazy-loading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"506o9p6ll5bmk3b4fpor3jq4e\">惰性加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aexabm60u2q25440axvi9sh3x\">通过只加载应用启动时绝对必须的那些模块，你可以极大缩短应用启动的时间。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gsdg6idvatpxds07kyd8yzb\">可以配置 Angular 的路由器，来推迟所有其它模块（及其相关代码）的加载时机，方法有<a href=\"guide/router-tutorial-toh#preloading\" title=\"Preloading\">一直等到应用启动完毕</a>，或者当用到时才按需<a href=\"guide/router#lazy-loading\" title=\"Lazy loading\"><em>惰性加载</em></a>。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nujmd0xvpsvts3usdizjwi7p\">不要急性（eagerly）导入来自惰性加载模块中的任何东西</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a580lyjcbyfhy6apbpz9n35nr\">如果要惰性加载某个模块，就要小心别在应用启动时要急性加载的模块（比如根模块 <code>AppModule</code>）中导入它。\n如果那么做，该模块就会立刻加载起来。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gesidm01qe0sc0smu3mn9c5k\">配置打包方式时必须考虑惰性加载。\n因为默认情况下惰性加载的模块没有在 JavaScript 中导入过，因此打包器默认会排除它们。\n打包器不认识路由器配置，也就不能为惰性加载的模块创建独立的包。\n你必须手动创建这些包。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85kjke55cq5z1yujab19uxtzn\">CLI 会运行 <a href=\"https://github.com/angular/angular-cli/tree/main/packages/ngtools/webpack\">Angular Ahead-of-Time Webpack 插件</a>，它会自动识别出惰性加载的 <code>NgModules</code>，并为它们创建独立的包。</p>\n</div>\n<p><a id=\"measure\"></a></p>\n<h3 id=\"measure-performance\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61gtuj9ulcklgc16wrc3bv18c\">测量性能<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#measure-performance\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bweckyybbac7h7lfgwid3gdk\">如果你对哪些东西拖慢了应用有更加清晰、精确的了解，就可以更好地决定优化什么以及如何优化。\n慢的原因可能和你所想的不一样。\n你可能花费了大量的时间和金钱来优化一些实际上无关紧要的东西，甚至可能让应用变得更慢。\n你应该测量应用在运行环境中的实际行为，这才是最重要的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4e5tsrhuk4l4sjma8k7spt4gy\"><a href=\"https://developer.chrome.com/docs/devtools/network/reference\" title=\"Chrome DevTools 网络性能\">Chrome DevTools 的网络和性能页</a>是你开始学习如何测量性能的好地方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7z4jxzz310gxzkplo3j1igw32\"><a href=\"https://www.webpagetest.org\">WebPageTest</a>工具是另一个不错的选择，它还能帮你验证这次部署是否成功。</p>\n<p><a id=\"inspect-bundle\"></a></p>\n<h3 id=\"inspect-the-bundles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n7405oc0r4l9ueyrptfcggqw\">检查发布包<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#inspect-the-bundles\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bc9l1oss2obt6wvuaxiacwer\"><a href=\"https://github.com/danvk/source-map-explorer/blob/master/README.md\">source-map-explorer</a> 工具可以帮你在生产环境构建之后探查 JavaScript 包。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pzamuhovihop5gj5xgg4n2xo\">安装 <code>source-map-explorer</code>：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install source-map-explorer --save-dev\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rflrtkbcn8fv6ryx52snt0mn\">为生产环境构建应用，包括源码映射表（source map）</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build --source-map\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25l6augui8ag09vrbzth4kst3\">在 <code>dist/</code> 目录下列出生成的包。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nls dist/project-name/*.js\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv5vn71jasreh21va7cwgn52t\">运行浏览器来生成其中一个包的图形化表示。\n下面的例子展示了 <code>main</code> 包的图表。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnode_modules/.bin/source-map-explorer dist/project-name/main*\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82fj5ormp0w2bznsfsfejet6e\"><code>source-map-explorer</code> 会分析与包一起生成的 source map，并画出所有依赖的地图，精确展示哪些类包含在哪个包中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e89zbq8vaivl8y4g3di1jjb3k\">下面是范例应用 <code>cli-quickstart</code> 中 <code>main</code> 包的输出。</p>\n<div class=\"lightbox\">\n<img alt=\"quickstart sourcemap explorer\" src=\"generated/images/guide/deployment/quickstart-sourcemap-explorer.png\" width=\"767\" height=\"401\">\n</div>\n<p><a id=\"base-tag\"></a></p>\n<h2 id=\"the-base-tag\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7q21xrxin9eqbr8jcse8aq1kk\"><code>base</code> 标签<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#the-base-tag\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vb3v2pmd70hiey7rc1zsci1t\">HTML 的 <a href=\"guide/router\"><code>&lt;base href=\"...\" /&gt;</code></a> 标签指定了用于解析静态文件（如图片、脚本和样式表）相对地址的基地址。\n比如，对于 <code>&lt;base href=\"/my/app/\"&gt;</code>，浏览器就会把 <code>some/place/foo.jpg</code> 这样的 URL 解析成到 <code>my/app/some/place/foo.jpg</code> 的请求。\n在导航期间，Angular 路由器使用 <em>base href</em> 作为到组件模板文件和模块文件的基地址。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lrk3m3lrdulnf5930xmynq0k\">另请参阅 <a href=\"api/common/APP_BASE_HREF\" title=\"API: APP_BASE_HREF\"><code>APP_BASE_HREF</code></a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c06g0o9nrmt3fp8haft3he78m\">在开发期间，你通常会在存有 <code>index.html</code> 的目录下启动开发服务器。\n那就是根目录，你要在 <code>index.html</code> 的顶部附近添加 <code>&lt;base href=\"/\"&gt;</code>，因为 <code>/</code> 就是该应用的根路径。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dm7qkuhrh3z9auqpt9f89ca07\">但是在共享或生产服务器上，你可能会在子目录下启动服务器。\n比如，当前应用的加载地址可能类似于 <code>http://www.mysite.com/my/app</code>，这里的子目录就是 <code>my/app/</code>。所以你就要往服务端版本的 <code>index.html</code> 中添加 <code>&lt;base href=\"/my/app/\"&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzmgalks8lzl7wmw2q42a51jy\">这里如果不配置 <code>base</code> 标签，应用就会失败，并在浏览器的控制台中为缺失的文件显示一个 <code>404 - Not Found</code> 错误。看看它<em>试图</em>从哪里去查找那些文件，并据此调整 base 标签。</p>\n<p><a id=\"deploy-url\"></a></p>\n<h2 id=\"the-deploy-url\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"250bbvrm7415glb29s4pvfiqc\">部署 url（<code>deploy-url</code>）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#the-deploy-url\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qc5bc3743f1z6850pjkn0yro\">一个命令行选项，用于指定在<em>编译</em>时解析图片、脚本和样式表等资产（assets）的相对 URL 的基础路径。比如：<code>ng build --deploy-url /my/assets</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wr7nj0ag90od0v85mv84jfq2\"><code>deploy url</code> 和 <code>base href</code> 这两个定义的作用有所重叠。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"257u5cvt1e3dxk0qw04nn98o0\">两者都可用于初始脚本、样式表、惰性脚本和 css 资源。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ko6c8wb2oque5sh0eo23n7i4\">但是，定义 <code>base href</code> 有一些独有的作用。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f19c0icfd3jfx8cahah661eq9\">定义 <code>base href</code> 可用于定位相对路径模板（HTML）资产和针对相对路径的 fetch/XMLHttpRequests。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e1hj5lyidyq63lrb94lborxk\">也可以使用 \n<code>base href</code> 来定义 Angular 路由器的默认基础路径 (参见 \n<a href=\"api/common/APP_BASE_HREF\"><code>APP_BASE_HREF</code></a>)。对于配置更复杂的用户，可能需要在应用程序内手动配置 \n<code><a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a></code> 令牌（例如，应用程序路由基础路径为 \n<code>/</code>，但 \n<code> assets/scripts/etc.</code> 位于 \n<code>/assets/</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9x2e3c6p4ewwowbojp51i1imj\">与可以只在一个地方定义的 <code>base href</code> 不同，<code>deploy url</code> 需要在构建时硬编码到应用程序中。这意味着指定 <code>deploy url</code> 会降低构建速度，但这是使用在整个应用程序中嵌入自己的选项的代价。这也是为什么说 <code>base href</code> 通常是更好的选择。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/deprecations\n - guide/i18n-common-deploy\n - guide/npm-packages\n - guide/upgrade-setup\n - start/start-deployment\n-->\n<!-- links from this doc:\n - api/common/APP_BASE_HREF\n - api/router/Routes\n - cli/build\n - errors/NG0100\n - guide/aot-compiler\n - guide/cli-builder\n - guide/deployment#automatic-deployment-with-the-cli\n - guide/deployment#basic-deployment-to-a-remote-server\n - guide/deployment#building-and-serving-from-disk\n - guide/deployment#configuring-correct-mime-type-for-javascript-assets\n - guide/deployment#deploy-to-github-pages\n - guide/deployment#deployment\n - guide/deployment#fallback\n - guide/deployment#fallback-configuration-examples\n - guide/deployment#inspect-the-bundles\n - guide/deployment#lazy-loading\n - guide/deployment#measure-performance\n - guide/deployment#prod-mode\n - guide/deployment#production-mode-at-runtime\n - guide/deployment#production-optimizations\n - guide/deployment#requesting-services-from-a-different-server-cors\n - guide/deployment#routed-apps-must-fall-back-to-indexhtml\n - guide/deployment#server-configuration\n - guide/deployment#simple-deployment-options\n - guide/deployment#the-base-tag\n - guide/deployment#the-deploy-url\n - guide/router\n - guide/router#lazy-loading\n - guide/router-tutorial-toh#preloading\n - http://sinatrarb.com\n - https://aws.amazon.com/s3/?nc2=h_ql_prod_st_s3\n - https://developer.chrome.com/docs/devtools/network/reference\n - https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types#textjavascript\n - https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type\n - https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source\n - https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\n - https://enable-cors.org/server.html\n - https://firebase.google.com/docs/hosting\n - https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\n - https://github.com/angular-buch/angular-cli-ghpages\n - https://github.com/angular/angular-cli/tree/main/packages/ngtools/webpack\n - https://github.com/danvk/source-map-explorer/blob/master/README.md\n - https://github.com/isaacs/github/issues/408\n - https://github.com/johnpapa/lite-server\n - https://github.com/vercel/vercel/tree/main/examples/angular\n - https://help.github.com/articles/create-a-repo\n - https://help.github.com/articles/what-is-github-pages\n - https://httpd.apache.org\n - https://httpd.apache.org/docs/current/mod/mod_rewrite.html\n - https://nginx.org\n - https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess\n - https://npmjs.org/package/@angular/fire\n - https://npmjs.org/package/@netlify-builder/deploy\n - https://npmjs.org/package/angular-cli-ghpages\n - https://pages.github.com\n - https://stackoverflow.com/a/26152011\n - https://vercel.com/solutions/angular\n - https://webpack.js.org/guides/development/#webpack-dev-server\n - https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\n - https://www.iis.net\n - https://www.netlify.com\n - https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\n - https://www.npmjs.com/package/@jefiozie/ngx-aws-deploy\n - https://www.ruby-lang.org\n - https://www.webpagetest.org\n-->"}
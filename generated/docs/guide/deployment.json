{"id":"guide/deployment","title":"部署","contents":"<div class=\"content\">\n  <h1 id=\"deployment\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv5xyx954f4euqqbhzcw4cntn\">部署<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deployment\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ow1ahp4bquea3r5gb895r8xk\">當你準備把 Angular 應用部署到遠端伺服器上時，有很多可選的部署方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"131fojefm50pcqrwdany9wpoz\"><a id=\"dev-deploy\"></a>\n<a id=\"copy-files\"></a></p>\n<h2 id=\"simple-deployment-options\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9g53xopnbps8d31pjcvwj94m4\">最簡單的部署選項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#simple-deployment-options\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cx2mjwzupapewt0y2vjx7z9wi\">在完整部署應用之前，你可以先臨時用一種技術來測試流程、建立設定和部署行為。</p>\n<h3 id=\"building-and-serving-from-disk\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81627arwd1fcb0aupynaf8zaa\">從磁碟建立和提供服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#building-and-serving-from-disk\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sluzifp11v6cdkp4igv5lk0s\">在開發過程中，你通常會使用 <code>ng serve</code> 指令來藉助 <a href=\"https://webpack.js.org/guides/development/#webpack-dev-server\">webpack-dev-server</a> 在本地記憶體中建立、監控和提供服務。但是，當你打算部署它時，就必須使用 <code>ng build</code> 指令來建立應用並在其它地方部署這些建立成果。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9g0d0seqru50ipwayxg5rw3ps\"><code>ng build</code> 和 <code>ng serve</code> 在建立專案之前都會清除輸出資料夾，但只有 <code>ng build</code> 指令會把生成的建立成果寫入輸出資料夾中。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7doue110hipmcyb26l6qbo6sw\">預設情況下，輸出目錄是 <code>dist/project-name/</code>。要輸出到其它資料夾，就要修改 <code>angular.json</code> 中的 <code>outputPath</code>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9yx9v3uz89l5oiqxchtyjkkcc\">當開發臨近收尾時，讓本地 Web 伺服器使用輸出資料夾中的內容提供服務可以讓你更好地瞭解當應用部署到遠端伺服器時的行為。你需要用兩個終端才能體驗到實時重新整理的屬性。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cyyvybz2uaedg3soehzsq9ed\">在第一個終端上，在<em>監控（watch）</em>模式下執行 <a href=\"cli/build\"><code>ng build</code> 指令</a>把該應用編譯進 <code>dist</code> 資料夾。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build --watch\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ablp5y65vymr6hr92bb9sy13j\">與 <code>ng serve</code> 指令一樣，當源檔案發生變化時，就會重新生成輸出檔案。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3gk3a7vyqtbjy6b820fkzg0do\">在第二個終端上，安裝一個 Web 伺服器（比如 <a href=\"https://github.com/johnpapa/lite-server\">lite-server</a>），然後使用輸出資料夾中的內容執行它。比如：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nlite-server --baseDir=\"dist/project-name\"\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blbbxr8pgucukkx583w7v4b99\">每當輸出了新檔案時，伺服器就會自動重新整理你的瀏覽器。</p>\n</li>\n</ul>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tfrunzuhawbdqhsnriea2da2\">該方法只能用於開發和測試，在部署應用時，它不受支援，也不是安全的方式。</p>\n</div>\n<h3 id=\"automatic-deployment-with-the-cli\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djqzyeys0ugqez6d80swl559i\">使用 CLI 進行自動部署<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#automatic-deployment-with-the-cli\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8f7ij4g0jd45jnxohqvajferw\">Angular CLI 指令 <code>ng deploy</code>（在版本 8.3.0 中引入）執行與你的專案關聯的 <code>deploy</code> <a href=\"guide/cli-builder\">CLI 建構式</a>。有許多第三方建構式實現了到不同平台的部署功能。你可以透過執行 <code>ng add [package name]</code> 把它們中的任何一個新增到專案中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4m754e12iryuxu6906kt0g91s\">新增具有部署功能的程式套件時，它將為所選專案自動更新自動更新工作區設定（<code>angular.json</code> 檔案）中的 <code>deploy</code> 部分。然後，你就可以使用 <code>ng deploy</code> 指令來部署該專案了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sfhqsb7blce47gbq42peo2t7\">比如，以下指令將專案自動部署到 Firebase。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng add @angular/fire\nng deploy\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4jshpvvs3s5xjvoauqi7vsrg\">該指令是互動式的。在這種情況下，你必須擁有或建立 Firebase 帳戶，並使用該帳戶進行身份驗證。該指令提示你選擇要部署的 Firebase 專案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vf7zqv81g8jko0lfi9tv8k00\">該指令會建立你的應用，並將生產環境的資產檔案上傳到 Firebase。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exvt3kmjsiiu6z70dzcwawis9\">在下表中，你可以找到實現了到不同平台部署功能的軟體套件清單。每個軟體套件的 <code>deploy</code> 指令可能需要不同的指令行選項。你可以透過以下與套件名稱相關的連結來閱讀更多內容：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z393y96ullrkhsmsr4bv7wo8\">部署到</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xgsw2mzyxp4abkks03qoyo30\">套件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bnztze3zthccrsbxcldk1gop\"><a href=\"https://firebase.google.com/docs/hosting\">Firebase hosting</a></td>\n<td align=\"left\"><a href=\"https://npmjs.org/package/@angular/fire\"><code>@angular/fire</code></a></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7419dr9lfy3w8jft4lq3n7ovu\"><a href=\"https://vercel.com/solutions/angular\">Vercel</a></td>\n<td align=\"left\"><a href=\"https://github.com/vercel/vercel/tree/main/examples/angular\"><code>vercel init angular</code></a></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o4xon4qgn9cyako1vbm3aedx\"><a href=\"https://www.netlify.com\">Netlify</a></td>\n<td align=\"left\"><a href=\"https://npmjs.org/package/@netlify-builder/deploy\"><code>@netlify-builder/deploy</code></a></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71fwkaf7xjlrxjrnsfwcfhny7\"><a href=\"https://pages.github.com\">GitHub pages</a></td>\n<td align=\"left\"><a href=\"https://npmjs.org/package/angular-cli-ghpages\"><code>angular-cli-ghpages</code></a></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6adlztvemhdhgfnkhkawtw462\"><a href=\"https://aws.amazon.com/s3/?nc2=h_ql_prod_st_s3\">Amazon Cloud S3</a></td>\n<td align=\"left\"><a href=\"https://www.npmjs.com/package/@jefiozie/ngx-aws-deploy\"><code>@jefiozie/ngx-aws-deploy</code></a></td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"att60rwv832ucexpz37y4odee\">如果要部署到自己管理的伺服器上，或者缺少針對你喜歡的雲平台的建構式，則可以建立支援你使用 <code>ng deploy</code> 指令的建構式，或者通讀本指南以瞭解如何手動部署應用程式。</p>\n<h3 id=\"basic-deployment-to-a-remote-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajlq9qy8ph19id4pl4qcf6t69\">最簡化的部署方式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#basic-deployment-to-a-remote-server\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tan2qappr2d1mwrb5i2utd88\">最簡化的部署方式就是為開發環境建立，並把其輸出複製到 Web 伺服器上。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv1ze2aft1zoa9pbsf0p0emem\">使用開發環境進行建立</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ay3c4n6li4opsehc2rqlpw63\">把輸出目錄（預設為 <code>dist/</code>）下的<em>每個檔案</em>都複製到到伺服器上的某個目錄下。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3q6aljs138cfzwnb6v2iw3ijw\">設定服務器，讓缺失的檔案都重導向到 <code>index.html</code> 上。\n欲知詳情，參閱<a href=\"guide/deployment#fallback\">稍後</a>的伺服器端重導向部分。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dp2aika4bmt26zii95o08xh4y\">這是對應用進行生產環境部署的最簡方式。</p>\n<p><a id=\"deploy-to-github\"></a></p>\n<h3 id=\"deploy-to-github-pages\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37hxoceqllbe9f1fj7lozde6b\">部署到 GitHub Pages<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deploy-to-github-pages\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b856ybx0at6wmo2v0ajindamw\">要將 Angular 應用程式部署到 <a href=\"https://help.github.com/articles/what-is-github-pages\">GitHub Pages</a>，請遵循以下步驟：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mmalmtpyq8cf5cekt5hjkelk\">為你的專案<a href=\"https://help.github.com/articles/create-a-repo\">建立一個 GitHub Pages 倉庫</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rwt7v0a9yhfj64r3t4qmqio8\">透過新增指定你在上一步中建立的 GitHub 儲存庫的遠端地址，來在本地專案中設定 <code>git</code>。建立儲存庫時，GitHub 已提供了這些指令，以便你可以在指令提示符下複製和貼上它們。儘管 GitHub 會為你填上某些特定於專案的設定，但這些指令應該類似於以下形式：</p>\n<code-example format=\"shell\" language=\"shell\">\n\ngit remote add origin https://github.com/your-username/your-project-name.git\ngit branch -M main\ngit push -u origin main\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8aqos1jt2c8joswk5q726prld\">當你從 GitHub 貼上這些指令時，它們會自動執行。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ewl1p55629u8v7dtdc2ycqgl\">建立並簽出一個名為 <code>gh-pages</code> 的 <code>git</code> 分支。</p>\n<code-example format=\"shell\" language=\"shell\">\n\ngit checkout -b gh-pages\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22jp0zazbt4n73srruvemw6hc\">藉助 Angular CLI 指令 <a href=\"cli/build\"><code>ng build</code></a>和以下選項，使用 Github 專案名稱建立應用。這裡的 <code>your_project_name</code> 是你在步驟 1 中為 GitHub 儲存庫提供的專案的名稱。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3biibyp65eltezno2wlrflofv\">確保在專案名稱的兩邊都包含有斜槓，如 <code>/your_project_name/</code> 的斜槓。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build --output-path docs --base-href /your_project_name/\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92fv6l64oh8u4ubtt02a6e3wa\">當建立完成時，把 <code>docs/index.html</code> 複製為 <code>docs/404.html</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31j76o9np1v9etjslczzmgw84\">送出你的更改，並推送。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3aoxgjkcr6v492lfols0rndt\">在 GitHub 專案頁面上，轉到 Settings 並向下捲動到 GitHub Pages 部分，以設定<a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source\">要從 docs 資料夾發布</a>的站點。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6y3a0dt4s8lo2ochr72ouj0wf\">單擊儲存。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jry0eh5lej92rqkkv9yqn64p\">單擊 GitHub Pages 區頂部的 『GitHub Pages』 連結，以檢視已部署的應用程式。連結的格式為 <code>https://&lt;user_name&gt;.github.io/&lt;project_name&gt;</code>。</p>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ld1223txbthyvxmo3fk4zw6t\">參閱 <a href=\"https://github.com/angular-buch/angular-cli-ghpages\">angular-cli-ghpages</a>，這個套件用到了全部這些屬性，還提供了一些額外功能。</p>\n</div>\n<p><a id=\"server-configuration\"></a></p>\n<h2 id=\"server-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cus25l7be89usrqmjupkn8lo3\">伺服器端設定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#server-configuration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ara9sa2dk62wxzr535k7ok8gu\">這一節涵蓋了你可能對伺服器或準備部署到伺服器的檔案要做的那些修改。</p>\n<p><a id=\"fallback\"></a></p>\n<h3 id=\"routed-apps-must-fall-back-to-indexhtml\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65wi3y6wgao593e6pixh3c7o8\">帶路由的應用必須以 <code>index.html</code> 作為備用頁面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#routed-apps-must-fall-back-to-indexhtml\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brn8owoj5dqbyyefjrlecdnam\">Angular 應用很適合用簡單的靜態 HTML 伺服器提供服務。\n你不需要伺服器端引擎來動態合成應用頁面，因為 Angular 會在用戶端完成這件事。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"h8zlavfaqiruoi2x2np5pn8i\">如果該應用使用 Angular 路由器，你就必須設定服務器，讓它對不存在的檔案回傳應用的宿主頁（<code>index.html</code>）。</p>\n<p><a id=\"deep-link\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqm4slyllv49yvs1m18ua9so0\">帶路由的應用應該支援『深連結』。\n所謂<em>深連結</em>就是指一個 URL，它用於指定到應用內某個元件的路徑。\n比如，<code>http://www.mysite.com/heroes/42</code> 就是一個到英雄詳情頁面的<em>深連結</em>，用於顯示 <code>id: 42</code> 的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pfaai9eu018fr2qoevh37eu1\">當用戶從執行中的用戶端應用導向到這個 URL 時，這沒問題。\nAngular 路由器會攔截這個 URL，並且把它路由到正確的頁面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mfjgpwyld7k0xrcjbx4aqi3s\">但是，當從郵件中點擊連結或在瀏覽器地址欄中輸入它或僅僅在英雄詳情頁重新整理下瀏覽器時，所有這些操作都是由瀏覽器本身處理的，在應用的控制範圍之外。\n瀏覽器會直接向伺服器請求那個 URL，路由器沒機會插手。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4dwy545kktwmtxtbv3ftcpfr\">靜態伺服器會在收到對 <code>http://www.mysite.com/</code> 的請求時回傳 <code>index.html</code>，但是會拒絕對 <code>http://www.mysite.com/heroes/42</code> 的請求，\n並回傳一個 <code>404 - Not Found</code> 錯誤，除非，它被設定成了回傳 <code>index.html</code>。</p>\n<h4 id=\"fallback-configuration-examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mafbfbru0jg3vqoocfewctnk\">備用頁面設定範例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#fallback-configuration-examples\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qh0vd35z7dtay8fxfnce0exv\">沒有一種設定可以適用於所有伺服器。\n後面這些部分會描述對常見伺服器的設定方式。\n這個清單雖然不夠詳盡，但可以為你提供一個良好的起點。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7fdih3qwjpmwpyyoxyse1yco\">伺服器</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8uv9sjfx5zgdo2cgneelhtbjj\"><a href=\"https://httpd.apache.org\">Apache</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52g7l65lgl7flf9lpughn78a0\">將重寫規則新增到.htaccess檔案中，如下所示（ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess）：\n<code-example format=\"apache\" language=\"apache\">\n  RewriteEngine On # 如果請求的是現有資源或目錄，則按原樣處理 RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR] RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d RewriteRule ^ - [L] # 如果請求的資源不存在，則使用index.html RewriteRule ^ /index.html \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1a2gi8sf7xpft4o5njnqtu688\"><a href=\"https://nginx.org\">Nginx</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajo0y5wt5q7kit1yl3oy9nkjv\">使用try_files，如在Front Controller Pattern Web Apps中描述的那樣修改以提供index.html：\n<code-example format=\"nginx\" language=\"nginx\">\n  try_files $uri $uri/ /index.html; \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fawuzuu0t22hybxv9inv1is2\"><a href=\"https://www.ruby-lang.org\">Ruby</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2ps8nigolngda6lu89u6tjdb\">使用 (\n<a href=\"http://sinatrarb.com\">sinatra</a>) 建立一個 Ruby 伺服器，其中包含一個基本的 Ruby 檔案用於設定服務器 \n<code>server.rb</code>: \n<code-example format=\"ruby\" language=\"ruby\">\n  require 'sinatra' # 資料夾結構 # . # -- server.rb # -- public # &nbsp;&nbsp; |-- 專案名稱 # &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |-- index.html get '/' do &nbsp; folderDir = settings.public_folder + '/專案名稱' # ng 建立輸出資料夾 &nbsp; send_file File.join(folderDir, 'index.html') end \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.iis.net\">IIS</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92x09eqzo98zmqr02n7i1iew7\">向 \n<code>web.config</code> 新增一個重寫規則，類似於此處顯示的規則 \n<a href=\"https://stackoverflow.com/a/26152011\">here</a>: \n<code-example format=\"xml\" language=\"xml\">\n  &lt;system.webServer&gt; &nbsp; &lt;rewrite&gt; &nbsp;&nbsp;&nbsp; &lt;rules&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;rule name=\"Angular \n <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>\" stopProcessing=\"true\"&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;match url=\".*\" /&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;conditions logicalGrouping=\"MatchAll\"&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" /&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" /&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/conditions&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;action type=\"Rewrite\" url=\"/index.html\" /&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/rule&gt; &nbsp;&nbsp;&nbsp; &lt;/rules&gt; &nbsp; &lt;/rewrite&gt; &lt;/system.webServer&gt; \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqp6rqqfgn8hb4gi3vqa0jv76\"><a href=\"https://pages.github.com\">GitHub Pages</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pnfeb3ndyd89fn903avymth3\">你無法直接設定 GitHub Pages 伺服器，但可以新增一個 404 頁面。將 \n<code>index.html</code> 複製到 \n<code>404.html</code>。它仍將作為 404 回應提供，但瀏覽器將處理該頁面並正確載入應用程式。另外，最好從主目錄中的 \n<code>docs</code> 提供，並建立一個 \n<code>.nojekyll</code> 檔案</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bnztze3zthccrsbxcldk1gop\"><a href=\"https://firebase.google.com/docs/hosting\">Firebase hosting</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaez60dbr5zockhcv96uscg3\">新增一個 \n<a href=\"https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\">重寫規則</a>。\n<code-example language=\"json\">\n  \"rewrites\": [ { &nbsp; \"source\": \"**\", &nbsp; \"destination\": \"/index.html\" } ] \n</code-example></td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"mime\"></a></p>\n<h3 id=\"configuring-correct-mime-type-for-javascript-assets\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u80lmg8et93iuzdlijwepa6q\">為 JavaScript 資產設定正確的 MIME 型別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#configuring-correct-mime-type-for-javascript-assets\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5j8ya272ji997m9sauapa3iv6\">你的所有應用程式 JavaScript 檔案都必須由伺服器提供出來，並將 <a href=\"https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type\"><code>Content-Type</code> 標頭</a>設定為 <code>text/javascript</code> 或其他<a href=\"https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types#textjavascript\">與 JavaScript 相容的 MIME-type</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dr8njtnyyeq5n3foq38rfiuhg\">預設情況下，大多數伺服器和託管服務已經這樣做了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jllcdiz70leg3b5a871x4n1v\">如果伺服器為 JavaScript 檔案設定了錯誤的 MIME 型別，將導致應用程式無法啟動並出現以下錯誤：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nFailed to load module script: The server responded with a non-JavaScript MIME type of \"text/plain\". Strict MIME type checking is enforced for module scripts per HTML spec.\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kvn3zri1qxiuxwehq4c0nqqm\">如果是這種情況，你將需要檢查你的伺服器設定並將其重新設定為使用 <code>Content-Type: text/javascript</code> 來提供 <code>.js</code> 檔案。有關如何執行此操作的說明，參閱伺服器手冊。</p>\n<p><a id=\"cors\"></a></p>\n<h3 id=\"requesting-services-from-a-different-server-cors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3zpa9m01ec4axufgfr5mltumh\">請求來自另一個伺服器的服務（CORS）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#requesting-services-from-a-different-server-cors\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26eq5q00fm9kpk418rpieiqp1\">Angular 開發者在向與該應用的宿主伺服器不同域的伺服器發起請求時，可能會遇到一種<a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" title=\"Cross-origin resource sharing\"><em>跨域資源共享</em></a>錯誤。\n瀏覽器會阻止該請求，除非得到那台伺服器的明確許可。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a12z6kr5e5pdgc7ioe4uwldms\">用戶端應用對這種錯誤無能為力。\n伺服器必須設定成可以接受來自該應用的請求。\n要了解如何對特定的伺服器開啟 CORS，參閱 <a href=\"https://enable-cors.org/server.html\" title=\"Enabling CORS server\">enable-cors.org</a>。</p>\n<p><a id=\"optimize\"></a></p>\n<h2 id=\"production-optimizations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wwt99gu4am1wtjrx7zj40993\">為生產環境最佳化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#production-optimizations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4b3tn3sdt9i0v9sis2b9dn1r8\"><code>production</code> 設定項指定如下最佳化屬性。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"920kaz2p0y1fs418qurz1o45h\">屬性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an97f0sxfbxresfzdh7hxwdn7\"><a href=\"guide/aot-compiler\">預先編譯 (AOT) Compilation</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yb8zz8ddt7tdwji6yyvyaph\">預先編譯 Angular 元件樣板。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3d82kn7r32k93e2e6wqyccxfg\"><a href=\"guide/deployment#prod-mode\">生產模式</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9f0v26zrjobww0yt7oyc84vf\">最佳化應用程式以獲得最佳的執行時效能</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qvpxlyam835o3zcyin4x0ddo\">捆綁</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9md491yzrupbmvu5dsqaemxgl\">將許多應用程式和函式庫檔案合併為幾個捆綁包。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ek5u9nqf8h8b8uzwnu5ybna0y\">最小化</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a55ozwq9oql8f3dbm49k0nzzo\">刪除多餘的空格、註解和可選令牌。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8tcjpc7i38anfw6ez29z8cfuq\">最佳化</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61a61zdf3lt17q9ubraz1ca7x\">重寫程式碼以使用簡短、神秘的變數和函式名稱。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wp9k2dwc9z66yx7vn2f3185d\">消除死程式碼</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f36g8lp8gbh3xshxu2cp5siy4\">刪除未引用的模組和大部分未使用的程式碼。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evpmg620xddf764u06d0kazfu\">要了解關於 CLI 建立選項及其作用的更多知識，參閱 <a href=\"cli/build\"><code>ng build</code></a>。</p>\n<p><a id=\"prod-mode\"></a></p>\n<h3 id=\"production-mode-at-runtime\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ozodidgw5cwplx1z3lfnoplr\">執行時的生產模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#production-mode-at-runtime\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8v80fm56c7pnrli36yn5hnr6z\">當你使用 <code>ng serve</code> 在本地執行應用程式時，Angular 會在執行時使用開發模式設定。執行時的開發模式支援額外的安全檢查、更詳細的錯誤訊息和除錯實用程式，例如<a href=\"errors/NG0100\">檢查後表示式更改</a>檢測。Angular 在瀏覽器控制台輸出一條訊息，表明開發模式已啟用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekuuipnkutcnnvyd97drqxur1\">這些額外的檢查在開發過程中很有幫助，但它們需要捆綁包中的額外程式碼，這在生產中是不可取的。為確保對套件大小沒有影響，建立最佳化器在生產模式下建立時從套件中刪除僅用於開發的程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epw4lpn7u1i0l3m40v5f43wlu\">使用生產設定建立應用程式會自動啟用 Angular 的執行時生產模式。\n<a id=\"lazy-loading\"></a></p>\n<h3 id=\"lazy-loading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"506o9p6ll5bmk3b4fpor3jq4e\">延遲載入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aexabm60u2q25440axvi9sh3x\">透過只加載應用啟動時絕對必須的那些模組，你可以極大縮短應用啟動的時間。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gsdg6idvatpxds07kyd8yzb\">可以設定 Angular 的路由器，來推遲所有其它模組（及其相關程式碼）的載入時機，方法有<a href=\"guide/router-tutorial-toh#preloading\" title=\"Preloading\">一直等到應用啟動完畢</a>，或者當用到時才按需<a href=\"guide/router#lazy-loading\" title=\"Lazy loading\"><em>延遲載入</em></a>。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nujmd0xvpsvts3usdizjwi7p\">不要急性（eagerly）匯入來自延遲載入模組中的任何東西</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a580lyjcbyfhy6apbpz9n35nr\">如果要延遲載入某個模組，就要小心別在應用啟動時要急性載入的模組（比如根模組 <code>AppModule</code>）中匯入它。\n如果那麼做，該模組就會立刻載入起來。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gesidm01qe0sc0smu3mn9c5k\">設定打包方式時必須考慮延遲載入。\n因為預設情況下延遲載入的模組沒有在 JavaScript 中匯入過，因此打包器預設會排除它們。\n打包器不認識路由器設定，也就不能為延遲載入的模組建立獨立的套件。\n你必須手動建立這些套件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85kjke55cq5z1yujab19uxtzn\">CLI 會執行 <a href=\"https://github.com/angular/angular-cli/tree/main/packages/ngtools/webpack\">Angular Ahead-of-Time Webpack 外掛</a>，它會自動識別出延遲載入的 <code>NgModules</code>，併為它們建立獨立的套件。</p>\n</div>\n<p><a id=\"measure\"></a></p>\n<h3 id=\"measure-performance\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61gtuj9ulcklgc16wrc3bv18c\">測量效能<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#measure-performance\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bweckyybbac7h7lfgwid3gdk\">如果你對哪些東西拖慢了應用有更加清晰、精確的瞭解，就可以更好地決定最佳化什麼以及如何最佳化。\n慢的原因可能和你所想的不一樣。\n你可能花費了大量的時間和金錢來最佳化一些實際上無關緊要的東西，甚至可能讓應用變得更慢。\n你應該測量應用在執行環境中的實際行為，這才是最重要的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4e5tsrhuk4l4sjma8k7spt4gy\"><a href=\"https://developer.chrome.com/docs/devtools/network/reference\" title=\"Chrome DevTools 網路效能\">Chrome DevTools 的網路和效能頁</a>是你開始學習如何測量效能的好地方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7z4jxzz310gxzkplo3j1igw32\"><a href=\"https://www.webpagetest.org\">WebPageTest</a>工具是另一個不錯的選擇，它還能幫你驗證這次部署是否成功。</p>\n<p><a id=\"inspect-bundle\"></a></p>\n<h3 id=\"inspect-the-bundles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n7405oc0r4l9ueyrptfcggqw\">檢查發布套件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#inspect-the-bundles\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bc9l1oss2obt6wvuaxiacwer\"><a href=\"https://github.com/danvk/source-map-explorer/blob/master/README.md\">source-map-explorer</a> 工具可以幫你在生產環境建立之後探查 JavaScript 套件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pzamuhovihop5gj5xgg4n2xo\">安裝 <code>source-map-explorer</code>：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install source-map-explorer --save-dev\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rflrtkbcn8fv6ryx52snt0mn\">為生產環境建立應用，包括原始碼對映表（source map）</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng build --source-map\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25l6augui8ag09vrbzth4kst3\">在 <code>dist/</code> 目錄下列出生成的套件。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nls dist/project-name/*.js\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv5vn71jasreh21va7cwgn52t\">執行瀏覽器來生成其中一個套件的圖形化表示。\n下面的例子展示了 <code>main</code> 套件的圖表。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnode_modules/.bin/source-map-explorer dist/project-name/main*\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82fj5ormp0w2bznsfsfejet6e\"><code>source-map-explorer</code> 會分析與套件一起生成的 source map，並畫出所有依賴的地圖，精確展示哪些類包含在哪個套件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e89zbq8vaivl8y4g3di1jjb3k\">下面是範例應用 <code>cli-quickstart</code> 中 <code>main</code> 套件的輸出。</p>\n<div class=\"lightbox\">\n<img alt=\"quickstart sourcemap explorer\" src=\"generated/images/guide/deployment/quickstart-sourcemap-explorer.png\" width=\"767\" height=\"401\">\n</div>\n<p><a id=\"base-tag\"></a></p>\n<h2 id=\"the-base-tag\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7q21xrxin9eqbr8jcse8aq1kk\"><code>base</code> 標籤<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#the-base-tag\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vb3v2pmd70hiey7rc1zsci1t\">HTML 的 <a href=\"guide/router\"><code>&lt;base href=\"...\" /&gt;</code></a> 標籤指定了用於解析靜態檔案（如圖片、指令碼和樣式表）相對地址的基地址。\n比如，對於 <code>&lt;base href=\"/my/app/\"&gt;</code>，瀏覽器就會把 <code>some/place/foo.jpg</code> 這樣的 URL 解析成到 <code>my/app/some/place/foo.jpg</code> 的請求。\n在導向期間，Angular 路由器使用 <em>base href</em> 作為到元件樣板檔案和模組檔案的基地址。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lrk3m3lrdulnf5930xmynq0k\">另請參閱 <a href=\"api/common/APP_BASE_HREF\" title=\"API: APP_BASE_HREF\"><code>APP_BASE_HREF</code></a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c06g0o9nrmt3fp8haft3he78m\">在開發期間，你通常會在存有 <code>index.html</code> 的目錄下啟動開發伺服器。\n那就是根目錄，你要在 <code>index.html</code> 的頂部附近新增 <code>&lt;base href=\"/\"&gt;</code>，因為 <code>/</code> 就是該應用的根路徑。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dm7qkuhrh3z9auqpt9f89ca07\">但是在共享或生產伺服器上，你可能會在子目錄下啟動伺服器。\n比如，當前應用的載入地址可能類似於 <code>http://www.mysite.com/my/app</code>，這裡的子目錄就是 <code>my/app/</code>。所以你就要往伺服器端版本的 <code>index.html</code> 中新增 <code>&lt;base href=\"/my/app/\"&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzmgalks8lzl7wmw2q42a51jy\">這裡如果不設定 <code>base</code> 標籤，應用就會失敗，並在瀏覽器的控制台中為缺失的檔案顯示一個 <code>404 - Not Found</code> 錯誤。看看它<em>試圖</em>從哪裡去查詢那些檔案，並據此調整 base 標籤。</p>\n<p><a id=\"deploy-url\"></a></p>\n<h2 id=\"the-deploy-url\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"250bbvrm7415glb29s4pvfiqc\">部署 url（<code>deploy-url</code>）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#the-deploy-url\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qc5bc3743f1z6850pjkn0yro\">一個指令行選項，用於指定在<em>編譯</em>時解析圖片、指令碼和樣式表等資產（assets）的相對 URL 的基礎路徑。比如：<code>ng build --deploy-url /my/assets</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wr7nj0ag90od0v85mv84jfq2\"><code>deploy url</code> 和 <code>base href</code> 這兩個定義的作用有所重疊。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"257u5cvt1e3dxk0qw04nn98o0\">兩者都可用於初始指令碼、樣式表、惰性指令碼和 css 資源。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ko6c8wb2oque5sh0eo23n7i4\">但是，定義 <code>base href</code> 有一些獨有的作用。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f19c0icfd3jfx8cahah661eq9\">定義 <code>base href</code> 可用於定位相對路徑樣板（HTML）資產和針對相對路徑的 fetch/XMLHttpRequests。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e1hj5lyidyq63lrb94lborxk\">也可以使用 \n<code>base href</code> 來定義 Angular 路由器的預設基礎路徑 (參見 \n<a href=\"api/common/APP_BASE_HREF\"><code>APP_BASE_HREF</code></a>)。對於設定更復雜的使用者，可能需要在應用程式內手動設定 \n<code><a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a></code> 令牌（例如，應用程式路由基礎路徑為 \n<code>/</code>，但 \n<code> assets/scripts/etc.</code> 位於 \n<code>/assets/</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9x2e3c6p4ewwowbojp51i1imj\">與可以只在一個地方定義的 <code>base href</code> 不同，<code>deploy url</code> 需要在建立時硬編碼到應用程式中。這意味著指定 <code>deploy url</code> 會降低建立速度，但這是使用在整個應用程式中嵌入自己的選項的代價。這也是為什麼說 <code>base href</code> 通常是更好的選擇。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/deprecations\n - guide/i18n-common-deploy\n - guide/npm-packages\n - guide/upgrade-setup\n - start/start-deployment\n-->\n<!-- links from this doc:\n - api/common/APP_BASE_HREF\n - api/router/Routes\n - cli/build\n - errors/NG0100\n - guide/aot-compiler\n - guide/cli-builder\n - guide/deployment#automatic-deployment-with-the-cli\n - guide/deployment#basic-deployment-to-a-remote-server\n - guide/deployment#building-and-serving-from-disk\n - guide/deployment#configuring-correct-mime-type-for-javascript-assets\n - guide/deployment#deploy-to-github-pages\n - guide/deployment#deployment\n - guide/deployment#fallback\n - guide/deployment#fallback-configuration-examples\n - guide/deployment#inspect-the-bundles\n - guide/deployment#lazy-loading\n - guide/deployment#measure-performance\n - guide/deployment#prod-mode\n - guide/deployment#production-mode-at-runtime\n - guide/deployment#production-optimizations\n - guide/deployment#requesting-services-from-a-different-server-cors\n - guide/deployment#routed-apps-must-fall-back-to-indexhtml\n - guide/deployment#server-configuration\n - guide/deployment#simple-deployment-options\n - guide/deployment#the-base-tag\n - guide/deployment#the-deploy-url\n - guide/router\n - guide/router#lazy-loading\n - guide/router-tutorial-toh#preloading\n - http://sinatrarb.com\n - https://aws.amazon.com/s3/?nc2=h_ql_prod_st_s3\n - https://developer.chrome.com/docs/devtools/network/reference\n - https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types#textjavascript\n - https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type\n - https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source\n - https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\n - https://enable-cors.org/server.html\n - https://firebase.google.com/docs/hosting\n - https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\n - https://github.com/angular-buch/angular-cli-ghpages\n - https://github.com/angular/angular-cli/tree/main/packages/ngtools/webpack\n - https://github.com/danvk/source-map-explorer/blob/master/README.md\n - https://github.com/isaacs/github/issues/408\n - https://github.com/johnpapa/lite-server\n - https://github.com/vercel/vercel/tree/main/examples/angular\n - https://help.github.com/articles/create-a-repo\n - https://help.github.com/articles/what-is-github-pages\n - https://httpd.apache.org\n - https://httpd.apache.org/docs/current/mod/mod_rewrite.html\n - https://nginx.org\n - https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess\n - https://npmjs.org/package/@angular/fire\n - https://npmjs.org/package/@netlify-builder/deploy\n - https://npmjs.org/package/angular-cli-ghpages\n - https://pages.github.com\n - https://stackoverflow.com/a/26152011\n - https://vercel.com/solutions/angular\n - https://webpack.js.org/guides/development/#webpack-dev-server\n - https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\n - https://www.iis.net\n - https://www.netlify.com\n - https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\n - https://www.npmjs.com/package/@jefiozie/ngx-aws-deploy\n - https://www.ruby-lang.org\n - https://www.webpagetest.org\n-->"}
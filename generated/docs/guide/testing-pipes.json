{"id":"guide/testing-pipes","title":"测试管道","contents":"<div class=\"content\">\n  <h1 id=\"testing-pipes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2ymw98ugrj0bw4ej7m4vgkf8\">测试管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-pipes#testing-pipes\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hsf2g6xw094a6lvfxhucsvo8\">你可以在不使用 Angular 测试工具的情况下测试\n<a href=\"guide/pipes-overview\">管道</a>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jhe3g7pull8hzqtm08p46wf0\">如果你要试验本指南中所讲的应用，请<live-example name=\"testing\" nodownload=\"\">在浏览器中运行它</live-example>或<live-example name=\"testing\" downloadonly=\"\">下载并在本地运行它</live-example>。</p>\n</div>\n<h2 id=\"testing-the-titlecasepipe\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0cppl5o62v3aoiyhoptbwuno\">测试 <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-pipes#testing-the-titlecasepipe\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqo45x7kjw0cj03g3kb5xn633\">这个管道类有一个方法 <code>transform</code>，它把输入值变成一个转换后的输出值。<code>transform</code> 的实现很少会与 DOM 交互。除了 <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code> 元数据和一个接口之外，大多数管道都不依赖于 Angular。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"duns4hg9dwvpntmgd3mgub3ui\">考虑一个 <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code>，它会把每个单词的第一个字母大写。这里是通过正则表达式实现的。</p>\n<code-example header=\"app/shared/title-case.pipe.ts\" path=\"testing/src/app/shared/title-case.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'titlecase', standalone: true, pure: true })\n/** Transform to <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> Case: uppercase the first letter of the words in a string. */\nexport class <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a> implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(input: string): string {\n    return input.length === 0\n      ? ''\n      : input.replace(/\\w\\S*/g, (txt) =&gt; txt[0].toUpperCase() + txt.slice(1).toLowerCase());\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64osqp3hrhq44i9c6fejc0d7x\">任何使用正则表达式的东西都值得彻底测试。使用简单的 Jasmine 来探索预期的案例和边缘情况。</p>\n<code-example header=\"app/shared/title-case.pipe.spec.ts\" path=\"testing/src/app/shared/title-case.pipe.spec.ts\" region=\"excerpt\">\ndescribe('<a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a>', () =&gt; {\n  // This pipe is a pure, stateless function so no need for BeforeEach\n  const pipe = new <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a>();\n\n  it('transforms \"abc\" to \"Abc\"', () =&gt; {\n    expect(pipe.transform('abc')).toBe('Abc');\n  });\n\n  it('transforms \"abc def\" to \"Abc Def\"', () =&gt; {\n    expect(pipe.transform('abc def')).toBe('Abc Def');\n  });\n\n  // ... more tests ...\n});\n\n</code-example>\n<p><a id=\"write-tests\"></a></p>\n<h2 id=\"writing-dom-tests-to-support-a-pipe-test\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sdo0o7rhjy78xut0teh3jw0l\">编写 DOM 测试来支持管道测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-pipes#writing-dom-tests-to-support-a-pipe-test\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlpd91jl1yzwou7nf86134iqd\">这些都是对管道进行<em>隔离</em>测试的。他们无法判断当 <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code> 应用于组件中时是否能正常运行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pqgnklmt2rjs9c0bvp3po8of\">考虑添加这样的组件测试：</p>\n<code-example header=\"app/hero/hero-detail.component.spec.ts (pipe test)\" path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"title-case-pipe\">\nit('should convert hero name to <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> Case', () =&gt; {\n  // get the name's input and display elements from the DOM\n  const hostElement: HTMLElement = harness.routeNativeElement!;\n  const nameInput: HTMLInputElement = hostElement.querySelector('input')!;\n  const nameDisplay: HTMLElement = hostElement.querySelector('span')!;\n\n  // simulate user entering a new name into the input box\n  nameInput.value = 'quick BROWN  fOx';\n\n  // Dispatch a DOM event so that Angular learns of input value change.\n  nameInput.dispatchEvent(new <a href=\"api/router/Event\" class=\"code-anchor\">Event</a>('input'));\n\n  // Tell Angular to update the display binding through the title pipe\n  harness.detectChanges();\n\n  expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n});\n\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Thu Sep 07 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/testing\n-->\n<!-- links from this doc:\n - api/common/TitleCasePipe\n - api/core/Pipe\n - api/core/PipeTransform\n - api/platform-browser/Title\n - api/router/Event\n - guide/pipes-overview\n - guide/testing-pipes#testing-pipes\n - guide/testing-pipes#testing-the-titlecasepipe\n - guide/testing-pipes#writing-dom-tests-to-support-a-pipe-test\n-->"}
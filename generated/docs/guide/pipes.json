{"id":"guide/pipes","title":"用通道轉換資料","contents":"<div class=\"content\">\n  <h1 id=\"transforming-data-using-pipes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ynz4ntalblxfc8458m6lprr3\">用通道轉換資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#transforming-data-using-pipes\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dz70vxwzy0r721hxes7gerzdg\"><a href=\"guide/glossary#pipe\" title=\"通道的定義\">通道</a>用來對字串、貨幣金額、日期和其他顯示資料進行轉換和格式化。通道是一些簡單的函式，可以在<a href=\"guide/glossary#template-expression\" title=\"樣板表示式的定義\">樣板表示式</a>中用來接受輸入值並回傳一個轉換後的值。比如，你可以使用一個通道把日期顯示為 <strong>1988 年 4 月 15 日</strong>，而不是其原始字串格式。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52b8y6b0m87ijmxc4268fkcpf\">本主題中使用的範例應用，參閱<live-example></live-example>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aty8pvhfpul4gcauwa3nmo7wc\">Angular 為典型的資料轉換提供了內建的通道，包括國際化的轉換（i18n），它使用本地化訊息來格式化資料。資料格式化常用的內建通道如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4c1vv1rgp7phpgpk7rg59bjk0\">通道</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/common/DatePipe\"><code>DatePipe</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1akl69rz8a1me49o5ehugw0lu\">根據區域設定規則格式化日期值。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/common/UpperCasePipe\"><code>UpperCasePipe</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7j7h3zn8zk5onqps4xzua66f2\">把文字轉換成全大寫形式。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/common/LowerCasePipe\"><code>LowerCasePipe</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2uh0ahm9ryydiryybfua28a8l\">把文字轉換成全小寫形式。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/common/CurrencyPipe\"><code>CurrencyPipe</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rkeb45sjcxhphdvjzaukcob\">將數字轉換為根據語言環境規則格式化的貨幣字串。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/common/DecimalPipe\"><code>DecimalPipe</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfx0yg92hkslc10ftsy2r7cei\">將數字轉換為帶有小數點的字串，根據語言環境規則進行格式化。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/common/PercentPipe\"><code>PercentPipe</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38cgzyn8pps1fp8hg593qk6nj\">將數字轉換為百分比字串，根據語言環境規則進行格式化。</td>\n</tr>\n</tbody>\n</table>\n<div class=\"alert is-helpful\">\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yc75zxrtnpw3l6w86ut8ss08\">關於內建通道的完整清單，請參閱<a href=\"api/common#pipes\" title=\"通道 API 參考總結\">通道 API 文件</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dunilzc2gkkkqd3yqem8qvr1c\">要了解有關使用通道進行國際化 (i18n) 工作的更多訊息，請參閱<a href=\"guide/i18n-common-format-data-locale\" title=\"Format data based on locale | Angular\">根據區域設定格式化資料</a>。</li>\n</ul>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7s5iiuf9m4k1univgr8zzj18j\">你還可以建立通道來封裝自定義轉換，並在樣板表示式中使用自定義通道。</p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wyytvry32tk8ql2rb30h4gbe\">要想使用通道，你應該對這些內容有基本的瞭解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f512ofu3j70k8r0x9j4ndns9\"><a href=\"guide/glossary#typescript\" title=\"Typescript 的定義\">Typescript</a> 和 HTML5 程式設計</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50hp7mok5haxrkaj68jn7uors\">帶有 CSS 樣式的 HTML <a href=\"guide/glossary#template\" title=\"樣板的定義\">樣板</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"y8gvmnzd0c37pnkvqq9cf8fg\"><a href=\"guide/glossary#component\" title=\"元件的定義\">元件</a></li>\n</ul>\n<h2 id=\"using-a-pipe-in-a-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfs8xgtee8br2hsr8dat5a984\">在樣板中使用通道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#using-a-pipe-in-a-template\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2syj6pzq0tf15h3sj3hip8ucv\">要應用通道，請在樣板表示式中使用通道運算子（\n<code>|</code>），如下麵的程式碼範例所示。</p>\n<code-example header=\"birthday.component.html (template)\" path=\"pipes/src/app/birthday.component.html\">\n&lt;p&gt;The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a> }}&lt;/p&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bk66e22o1oebi1bhjcec4sd8r\">元件的\n<code>birthday</code>值透過通道運算子（\n<code>|</code>）流向\n<a href=\"api/common/DatePipe\"><code>DatePipe</code></a>，其通道名稱為\n<code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code>。 通道以預設格式呈現日期為\n<strong>Apr 15, 1988</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5u77p0kjqi3fh71qx0unpuzyi\">檢視元件類別。</p>\n<code-example header=\"birthday.component.ts (class)\" path=\"pipes/src/app/birthday.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a> } from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-birthday',\n  templateUrl: './birthday.component.html',\n  imports: [<a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a>],\n})\nexport class BirthdayComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87xtkwzhx2a5mi6ut7tx8p83n\">因為這是一個\n<a href=\"guide/standalone-components\">獨立元件</a>，它從\n<code>@angular/common</code>匯入\n<code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code>，這是所有內建通道的來源。</p>\n<p><a id=\"parameterizing-a-pipe\"></a></p>\n<h2 id=\"transforming-data-with-parameters-and-chained-pipes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b4a9d0lyu6gy7m4elaz7euiv\">使用引數和通道鏈來格式化資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#transforming-data-with-parameters-and-chained-pipes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9jtkc00shxjxbn2epk5c7zjb\">某些通道有\n<em>可選</em>引數，用於微調通道的輸出。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57w35i3hk6v5g3919ed0e3i2z\">例如，\n<a href=\"api/common/CurrencyPipe\" title=\"API 參考\"><code>CurrencyPipe</code></a> 接受一個國家程式碼作為引數。 要指定引數，請在通道名稱（\n<code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code>）後跟一個冒號（\n<code>:</code>）和引數值（國家程式碼）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8y3tkumrdeiejp0yqst175asw\">樣板表示式 \n<code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR' }}</code> 顯示帶有歐元符號（€）字首的金額。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kemvtni1n7eefwf7bepv07fh\">某些通道接受多個\n<em>可選</em>引數。透過冒號分隔，將每個引數傳遞給通道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zqdw3fzj1kozf9spgzp2mu7m\">例如，\n<code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR':'歐元 '}}</code> 顯示帶有標籤\"歐元\"（第二個引數）而不是歐元符號的金額。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ruavzhqybc1svq8ee047q5d0\">一些通道，例如\n<a href=\"/api/common/SlicePipe\" title=\"SlicePipe的API參考\"><code>SlicePipe</code></a>，\n<em>需要</em>至少一個引數，可能允許更多的\n<em>可選</em>引數。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"uuz180qqza3kker46r3zqph7\">表示式\n<code>{{ anArray | <a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a>:1:5 }}</code>顯示一個包含從元素\n<code>1</code>開始到元素\n<code>5</code>結束的元素子集的新字串。</p>\n<h2 id=\"example-formatting-a-date\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qgptgdnstpqby6redeyn9ey\">範例：格式化日期<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#example-formatting-a-date\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ulpjk01mghhridrpjjgufp0q\">以下範例示範了使用\n<a href=\"api/common/DatePipe\" title=\"API參考\"><code>DatePipe</code></a>格式化英雄出生日期的兩種方法。</p>\n<code-tabs>\n    <code-pane header=\"birthday-formatting.component.html (template)\" path=\"pipes/src/app/birthday-formatting.component.html\">\n&lt;p&gt;The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:\"shortDate\" }} in the \"shortDate\" format.&lt;/p&gt;\n\n&lt;p&gt;The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:format }} in \"{{format}}\" format.\n  Click the toggle button to change formats.&lt;/p&gt;\n\n&lt;button type=\"button\" (click)=\"toggleFormat()\"&gt;Toggle Format&lt;/button&gt;\n\n\n</code-pane>\n    <code-pane header=\"birthday-formatting.component.ts (class)\" path=\"pipes/src/app/birthday-formatting.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a> } from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-birthday-formatting',\n  templateUrl: './birthday-formatting.component.html',\n  imports: [<a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a>],\n})\nexport class BirthdayFormattingComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based\n  toggle = true;\n\n  get format()   { return this.toggle ? 'mediumDate' : 'fullDate'; }\n\n  toggleFormat() { this.toggle = !this.toggle; }\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7t92muwxnyqgnljvkyi32o56o\">在樣板中，第一個表示式將出生日期傳遞給\n<code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code>，帶有一個字面的日期格式引數\"shortDate\"。輸出為\n<strong>04/15/88</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a99klw6gxwik4xy5dpif48qvt\">第二個表示式將出生日期傳遞給\n<code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code>，帶有一個日期格式引數，該引數與元件屬性\n<em>繫結</em>（\n<code>format</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44q7a0bny6qk6roeh8n21eoco\">點選\"切換\"按鈕會在兩種\n<em>許多可能的預定義格式</em>中切換該屬性值，\n<code>'mediumDate'</code>和\n<code>'fullDate'</code>。輸出為\n<strong>1988年4月15日</strong>或\n<strong>1988年4月15日星期五</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xlm5zqn6su5hfxrxbslzrr4g\">頁面以指定的格式顯示出生日期。</p>\n<h2 id=\"example-chaining-two-pipes-together\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dimegpak9r7oleybkekroq2mn\">範例：連結兩個通道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#example-chaining-two-pipes-together\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hchmf6swku9l7847tkjlgic3\">使用\"通道連結語法\"連線多個通道，使一個通道的輸出成為下一個通道的輸入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84l3lmvzwayoj6g3ey7t1u0ij\">以下範例將出生日期傳遞給\n<code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code>，然後將結果轉發給\n<code><a href=\"api/common/UpperCasePipe\" title=\"API參考\">UpperCasePipe</a></code>通道，使用\"通道連結語法\"。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fsh11za2teufagtyi8n58az3\">再次示範了\n<code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code>使用\n<em>帶</em>和\n<em>不帶</em>格式引數。注意兩個結果（\n<strong>APR 15, 1988</strong>和\n<strong>FRIDAY, APRIL 15, 1988</strong>）都是大寫的。</p>\n<code-tabs>\n    <code-pane header=\"birthday-pipe-chaining.component.html (template)\" path=\"pipes/src/app/birthday-pipe-chaining.component.html\">\n&lt;p&gt;\n  The chained hero's uppercase birthday is\n  {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a> | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}\n&lt;/p&gt;\n\n&lt;p&gt;\n  The chained hero's uppercase birthday in \"fullDate\" format is\n  {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'fullDate' | uppercase}}\n&lt;/p&gt;\n\n\n</code-pane>\n    <code-pane header=\"birthday-pipe-chaining.component.ts (class)\" path=\"pipes/src/app/birthday-pipe-chaining.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a>, <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>} from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-birthday-pipe-chaining',\n  templateUrl: './birthday-pipe-chaining.component.html',\n  imports: [<a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a>, <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>],\n})\nexport class BirthdayPipeChainingComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"boyw8onnz42z6bs9vtodh0xvb\">切換到類別檔案以檢視這是一個\n<a href=\"guide/standalone-components\">獨立元件</a>；它從\n<code>@angular/common</code>匯入了這兩個通道，這是所有內建通道的來源。</p>\n<p><a id=\"Custom-pipes\"></a></p>\n<h2 id=\"creating-pipes-for-custom-data-transformations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byn6vq1dhq9z2si0f3n6ikiod\">為自定義資料轉換建立通道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#creating-pipes-for-custom-data-transformations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ce283l8k5iq11u057ke94pp9\">建立自定義通道來封裝那些內建通道沒有提供的轉換。然後就可以在樣板表示式中使用自定義通道了，像內建通道一樣，把輸入值轉換成顯示輸出。</p>\n<h3 id=\"marking-a-class-as-a-pipe\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmncqwy4zdbr1ix9izi238ci4\">把一個類標記為一個通道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#marking-a-class-as-a-pipe\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65fdrtpssa9hhg6q8cu8tq8ue\">要把類標記為通道並提供設定元資料，請把 <a href=\"api/core/Pipe\" title=\"Pipe 的 API 引用\"><code>@Pipe</code></a> <a href=\"guide/glossary#decorator--decoration\" title=\"裝飾器的定義\">裝飾器</a>應用到這個類別上。通道類名是 <a href=\"guide/glossary#case-types\" title=\"案例型別的定義\">UpperCamelCase</a>（類別名稱的一般約定），相應的 <code>name</code> 字串是 <a href=\"guide/glossary#case-types\" title=\"案例型別的定義\">camelCase</a> 的。不要在 <code>name</code> 中使用連字元。詳細訊息和更多範例，請參閱<a href=\"guide/styleguide#pipe-names\" title=\"Angular 編碼風格指南中的通道名稱\">通道名稱</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59woxknp7rmjrsh7t0u53y0tr\">在樣板表示式中使用 <code>name</code> 就像在內建通道中一樣。</p>\n<div class=\"alert is-important\">\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43g2a048gj6mua53osdf3lswv\">把你的通道包含在 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料的 <code>declarations</code> 欄位中，以便它能用於樣板。請檢視範例應用中的 <code>app.module.ts</code> 檔案（<live-example></live-example>）。有關詳細訊息，請參閱 <a href=\"guide/ngmodules\" title=\"NgModules 簡介\">NgModules</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ezd59rf88ywl9d0v07ag11c6\">註冊自定義通道。<a href=\"cli\" title=\"CLI 概述和指令參考\">Angular CLI</a> 的 <a href=\"cli/generate#pipe\" title=\"ng 在 CLI Command Reference 中生成通道\"><code>ng generate pipe</code></a> 指令會自動註冊該通道。</p>\n</li>\n</ul>\n</div>\n<h3 id=\"using-the-pipetransform-interface\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coz9qgu2vendycp7ynb13ugbr\">使用 PipeTransform 介面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#using-the-pipetransform-interface\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qvbkrg9wnpmv888xqmtnnndw\">在自定義通道類中實現 <a href=\"api/core/PipeTransform\" title=\"PipeTransform 的 API 參考\"><code>PipeTransform</code></a> 介面來執行轉換。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rdwu0ty9ppt7pbhl77s60rk5\">Angular 呼叫 <code>transform</code> 方法，該方法使用繫結的值作為第一個引數，把其它任何引數都以清單的形式作為第二個引數，並回傳轉換後的值。</p>\n<h3 id=\"example-transforming-a-value-exponentially\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8nxbr3fmax5b8puwr1r32cix\">範例：指數級轉換<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#example-transforming-a-value-exponentially\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5o59bxhab8w3jz1n0dyos17e\">在遊戲中，可能希望實現一種指數級轉換，以指數級增加英雄的力量。比如，如果英雄的得分是 2，那麼英雄的能量會指數級增長 10 次，最終得分為 1024。你可以使用自定義通道進行這種轉換。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hxuxz2tjgo19fh04hpo4t8b0\">下列程式碼範例顯示了兩個元件定義：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n2c7wfntpyw9gnmnqx5bqxht\">檔案</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>exponential-strength.pipe.ts</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3igz5d81kp6l76nsth93e11n1\">定義了一個名為\n<code>exponentialStrength</code>的自定義通道，具有執行轉換的\n<code>transform</code>方法。它為傳遞給通道的引數定義了一個引數\n<code>exponent</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>power-booster.component.ts</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vgobxe8ww4h6i5xvpsadw9cf\">示範如何使用通道，指定一個值（\n<code>2</code>）和指數引數（\n<code>10</code>）。</td>\n</tr>\n</tbody>\n</table>\n<code-tabs>\n    <code-pane header=\"src/app/exponential-strength.pipe.ts\" path=\"pipes/src/app/exponential-strength.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n/*\n * Raise the value exponentially\n * Takes an exponent argument that defaults to 1.\n * Usage:\n *   value | exponentialStrength:exponent\n * Example:\n *   {{ 2 | exponentialStrength:10 }}\n *   formats to: 1024\n*/\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'exponentialStrength'\n})\nexport class ExponentialStrengthPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(value: number, exponent = 1): number {\n    return Math.pow(value, exponent);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/power-booster.component.ts\" path=\"pipes/src/app/power-booster.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { ExponentialStrengthPipe } from './exponential-strength.pipe';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-power-booster',\n  template: `\n    &lt;h2&gt;Power Booster&lt;/h2&gt;\n    &lt;p&gt;Super power boost: {{2 | exponentialStrength: 10}}&lt;/p&gt;\n  `,\n  imports: [ExponentialStrengthPipe]\n})\nexport class PowerBoosterComponent { }\n\n\n</code-pane>\n</code-tabs>\n<!--todo: replace with screen capture -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"953cupjezya903jzm3cso9rlv\">瀏覽器顯示如下：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"none\">\n\nPower Booster\n\nSuperpower boost: 1024\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6smig3c0kds033zvsh9oyj72j\">要檢查 <code>exponentialStrength</code> 通道的行為，請檢視<live-example></live-example>，並在樣板中修改值和可選的指數引數。</p>\n</div>\n<p><a id=\"change-detection\"></a></p>\n<h2 id=\"detecting-changes-with-data-binding-in-pipes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6si0hb0fhllrppmvtexv81uxc\">透過通道中的資料繫結來檢測變更<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#detecting-changes-with-data-binding-in-pipes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qoiq2uas14p336x5d2irbw6i\">你可以透過帶有通道的<a href=\"guide/glossary#data-binding\" title=\"資料繫結的定義\">資料繫結</a>來顯示值並回應使用者操作。如果是原始型別的輸入值，比如 <code>String</code> 或 <code>Number</code>，或者是物件引用型的輸入值，比如 <code>Date</code> 或 <code>Array</code>，那麼每當 Angular 檢測到輸入值或引用有變化時，就會執行該輸入通道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34ld98z79o9vxgonv06xqu0va\">比如，你可以修改前面的自定義通道範例，透過 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的雙向繫結來輸入數量和提升因子，如下麵的程式碼範例所示。</p>\n<code-example header=\"src/app/power-boost-calculator.component.ts\" path=\"pipes/src/app/power-boost-calculator.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { ExponentialStrengthPipe } from './exponential-strength.pipe';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-power-boost-calculator',\n  template: `\n    &lt;h2&gt;Power Boost Calculator&lt;/h2&gt;\n    &lt;label for=\"power-input\"&gt;Normal power: &lt;/label&gt;\n    &lt;input id=\"power-input\" type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"power\"&gt;\n    &lt;label for=\"boost-input\"&gt;Boost factor: &lt;/label&gt;\n    &lt;input id=\"boost-input\" type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"factor\"&gt;\n    &lt;p&gt;\n      Super Hero Power: {{power | exponentialStrength: factor}}\n    &lt;/p&gt;\n  `,\n  imports: [ExponentialStrengthPipe, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>],\n  styles: ['input {margin: .5rem 0;}']\n})\nexport class PowerBoostCalculatorComponent {\n  power = 5;\n  factor = 1;\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2caizv1urb9kiqn6wotb97o5q\">每當使用者改變 『normal power』 值或 『boost factor』 時，就會執行 <code>exponentialStrength</code> 通道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tjfetf3opzedk9414uqap4se\">Angular 會檢測每次變更，並立即執行該通道。對於原始輸入值，這很好。但是，如果要在複合物件中更改某些<em>內部值</em>（比如日期中的月份、陣列中的元素或物件中的屬性），就需要瞭解變更檢測的工作原理，以及如何使用 <code>impure</code>（非純）通道。</p>\n<h3 id=\"how-change-detection-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbzojdcj45x3zth0q6q7xlk56\">變更檢測的工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#how-change-detection-works\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ib6w6qmcghaoar7pcrznhzs5\">Angular 會在每次 DOM 事件（每次按鍵、滑鼠移動、計時器滴答和伺服器回應）之後執行的<a href=\"guide/glossary#change-detection\" title=\"變更檢測的定義\">變更檢測</a>過程中查詢對資料繫結值的<a href=\"guide/glossary#change-detection\" title=\"變更檢測的定義\">更改</a>。下面這段不使用通道的例子示範了 Angular 如何利用預設的變更檢測策略來監控和更新 <code>heroes</code> 陣列中每個英雄的顯示效果。範例顯示如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n2c7wfntpyw9gnmnqx5bqxht\">檔案</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>flying-heroes.component.html (v1)</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmiurfuhjvs5ls5ul4n98497l\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code>重複器顯示英雄名稱。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>flying-heroes.component.ts (v1)</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ewqiqo0qxa8oibjoi9adgvd9\">提供英雄，將英雄新增到陣列中，並重置陣列。</td>\n</tr>\n</tbody>\n</table>\n<code-tabs>\n    <code-pane header=\"src/app/flying-heroes.component.html (v1)\" path=\"pipes/src/app/flying-heroes.component.html\" region=\"template-1\">\n&lt;label for=\"hero-name\"&gt;New hero name: &lt;/label&gt;\n&lt;input type=\"text\" #box id=\"hero-name\" (keyup.enter)=\"addHero(box.value); box.value=''\" placeholder=\"hero name\"&gt;\n  &lt;button type=\"button\" (click)=\"reset()\"&gt;Reset list of heroes&lt;/button&gt;\n  &lt;!&lt;!-- Only used in deprecated `pipes.md` --&gt;\n  &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    {{hero.name}}\n  &lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/flying-heroes.component.ts (v1)\" path=\"pipes/src/app/flying-heroes.component.ts\" region=\"v1\">\nexport class FlyingHeroesComponent {\n  heroes: any[] = [];\n  canFly = true;\n  constructor() { this.reset(); }\n\n  addHero(name: string) {\n    name = name.trim();\n    if (!name) { return; }\n    const hero = { name, canFly: this.canFly };\n      this.heroes.push(hero);\n  }\n\n  reset() { this.heroes = HEROES.slice(); }\n}\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9s86ytsok49oqu6xu5qqsvlu3\">每次使用者新增一個英雄時，Angular 都會更新顯示內容。如果使用者點選了 <strong>Reset</strong> 按鈕，Angular 就會用原來這些英雄組成的新陣列來替換 <code>heroes</code>，並更新顯示。如果你新增刪除或更改了某個英雄的能力，Angular 也會檢測這些變化並更新顯示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajyrsh4yx75249elt1dr1yjfe\">然而，如果對於每次更改都執行一個通道來更新顯示，就會降低你應用的效能。因此，Angular 會使用更快的變更檢測演算法來執行通道，如下一節所述。</p>\n<p><a id=\"pure-and-impure-pipes\"></a></p>\n<h3 id=\"detecting-pure-changes-to-primitives-and-object-references\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22of8qm26xosc9yxgzxgywv1u\">檢測原始型別和物件引用的純變更<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#detecting-pure-changes-to-primitives-and-object-references\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"965ymi0lf05gryj18t4yqmrao\">透過預設情況下，通道會定義成<em>純的（pure）</em>，這樣 Angular 只有在檢測到輸入值發生了<em>純變更</em>時才會執行該通道。純變更是對原始輸入值（比如 <code>String</code>、<code>Number</code>、<code>Boolean</code> 或 <code>Symbol</code>）的變更，或是對物件引用的變更（比如 <code>Date</code>、<code>Array</code>、<code>Function</code>、<code>Object</code>）。</p>\n<p><a id=\"pure-pipe-pure-fn\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2f5x4nes859ke5pzcx5buybjm\">純通道必須使用純函式，它能處理輸入並回傳沒有副作用的值。換句話說，給定相同的輸入，純函式應該總是回傳相同的輸出。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eawd8xi3u4o5fod3rhbbwkmc2\">使用純通道，Angular 會忽略複合物件中的變化，比如往現有陣列中新增的元素，因為檢查原始值或物件引用比對物件中的差異進行深度檢查要快得多。Angular 可以快速判斷是否可以跳過執行該通道並更新檢視。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2032yyyxvmme2n6tychh65jy1\">但是，以陣列作為輸入的純通道可能無法正常工作。為了示範這個問題，修改前面的例子來把英雄清單過濾成那些會飛的英雄。在 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中使用 <code>FlyingHeroesPipe</code>，程式碼如下。這個例子的顯示如下：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qw3swizk7gjszrmqsadt03iu\">帶有新通道的樣板（<code>flying-heroes.component.html (flyers)</code>）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21mfa0678jczy1josek8pr7iq\"><code>FlyingHeroesPipe</code> 自定義通道實現（<code>flying-heroes.pipe.ts</code>）</li>\n</ul>\n<code-tabs>\n    <code-pane header=\"src/app/flying-heroes.component.html (flyers)\" path=\"pipes/src/app/flying-heroes.component.html\" region=\"template-flying-heroes\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of (heroes | flyingHeroes)\"&gt;\n  {{hero.name}}\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/flying-heroes.pipe.ts\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"pure\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\nimport { Hero } from './heroes';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'flyingHeroes'\n})\nexport class FlyingHeroesPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(allHeroes: Hero[]) {\n    return allHeroes.filter(hero =&gt; hero.canFly);\n  }\n}\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jk0clctxnr5bb1e5t5psx0mc\">該應用現在展示了意想不到的行為：當用戶新增了會飛的英雄時，它們都不會出現在 『Heroes who fly』 中。發生這種情況是因為新增英雄的程式碼會把它 push 到 <code>heroes</code> 陣列中：</p>\n<code-example header=\"src/app/flying-heroes.component.ts\" path=\"pipes/src/app/flying-heroes.component.ts\" region=\"push\">\nthis.heroes.push(hero);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f40ebjiidd10245p4tlqj1o\">而變更檢測器會忽略對陣列元素的更改，所以通道不會執行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f61wszmxqimh4e9egsqeajvy\">Angular 忽略了被改變的陣列元素的原因是對陣列的<em>引用</em>沒有改變。由於 Angular 認為該陣列仍是相同的，所以不會更新其顯示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eetxjsoonwn60su3awpewj79j\">獲得所需行為的方法之一是更改物件引用本身。可以用一個包含新更改過的元素的新陣列替換該陣列，然後把這個新陣列作為輸入傳給通道。在上面的例子中，你可以建立一個附加了新英雄的陣列，並把它賦值給 <code>heroes</code>。Angular 檢測到了這個陣列引用的變化，並執行了該通道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82jegtyjyvi2q34eeo9mw5f2h\">總結一下，如果修改了輸入陣列，純通道就不會執行。如果<em>替換</em>了輸入陣列，就會執行該通道並更新顯示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnyim8z98i7oh2h9sf38wnp86\">上述例子示範了如何更改元件的程式碼來適應某個通道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dzingyrem2rz8zqhb2twi3se\">為了讓你的元件更簡單，獨立於那些使用通道的 HTML，你可以用一個<em>不純的</em>通道來檢測複合物件（如數組）中的變化，如下一節所述。</p>\n<p><a id=\"impure-flying-heroes\"></a></p>\n<h3 id=\"detecting-impure-changes-within-composite-objects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80ydb5lyb6qfa13b6810naahj\">檢測複合物件中的非純變更<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#detecting-impure-changes-within-composite-objects\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"j5rlii894d5c15dp2unv86a6\">要在複合物件<em>內部</em>進行更改後執行自定義通道（比如更改陣列元素），就需要把通道定義為 <code>impure</code> 以檢測非純的變更。每當按鍵或滑鼠移動時，Angular 都會檢測到一次變更，從而執行一個非純通道。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crb8r9hlv2oczg0zd6xorsmts\">雖然非純通道很實用，但要小心使用。長時間執行非純通道可能會大大降低你的應用速度。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yo5vbppn0adok3sfup5b6l6m\">透過把 <code>pure</code> 標誌設定為 <code>false</code> 來把通道設定成非純的：</p>\n<code-example header=\"src/app/flying-heroes.pipe.ts\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"pipe-decorator\">\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'flyingHeroesImpure',\n  pure: false\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gkbs92jx50ph1oq2mmy0q4g6\">下面的程式碼顯示了 <code>FlyingHeroesImpurePipe</code> 的完整實現，它擴充套件了 <code>FlyingHeroesPipe</code> 以繼承其屬性。這個例子表明你不需要修改其他任何東西 - 唯一的區別就是在通道元資料中把 <code>pure</code> 標誌設定為 <code>false</code>。</p>\n<code-tabs>\n    <code-pane header=\"src/app/flying-heroes.pipe.ts (FlyingHeroesImpurePipe)\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"impure\">\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'flyingHeroesImpure',\n  pure: false\n})\nexport class FlyingHeroesImpurePipe extends FlyingHeroesPipe { }\n\n</code-pane>\n    <code-pane header=\"src/app/flying-heroes.pipe.ts (FlyingHeroesPipe)\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"pure\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\nimport { Hero } from './heroes';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'flyingHeroes'\n})\nexport class FlyingHeroesPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(allHeroes: Hero[]) {\n    return allHeroes.filter(hero =&gt; hero.canFly);\n  }\n}\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab0yym78bss8cfrjg134lgnq6\">對於非純通道，<code>FlyingHeroesImpurePipe</code> 是個不錯的選擇，因為它的 <code>transform</code> 函式非常簡單快捷：</p>\n<code-example header=\"src/app/flying-heroes.pipe.ts (filter)\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"filter\">\nreturn allHeroes.filter(hero =&gt; hero.canFly);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8wras6tu5oymhfblfmykvisxf\">你可以從 <code>FlyingHeroesComponent</code> 派生一個 <code>FlyingHeroesImpureComponent</code>。如下麵的程式碼所示，只有樣板中的通道發生了變化。</p>\n<code-example header=\"src/app/flying-heroes-impure.component.html (excerpt)\" path=\"pipes/src/app/flying-heroes-impure.component.html\" region=\"template-flying-heroes\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of (heroes | flyingHeroesImpure)\"&gt;\n  {{hero.name}}\n&lt;/div&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7koyfc6115w5tug1euoj59dr\">要想確認是否在使用者新增英雄時更新了顯示，請參閱<live-example></live-example>。</p>\n</div>\n<p><a id=\"async-pipe\"></a></p>\n<h2 id=\"unwrapping-data-from-an-observable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2kb5nzomzhfq1a0wnn462b4m\">從一個可觀察物件中解開資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#unwrapping-data-from-an-observable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9v5bm3x23ezxzg1us4b4086xe\"><a href=\"guide/glossary#observable\" title=\"可觀察物件的定義\">可觀察物件</a>能讓你在應用的各個部分之間傳遞訊息。建議在事件處理、非同步程式設計以及處理多個值時使用這些可觀察物件。可觀察物件可以提供任意型別的單個或多個值，可以是同步的（作為一個函式為它的呼叫者提供一個值），也可以是非同步的。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"audl9oatxdubw7v1hc608iocd\">關於可觀察物件的詳細訊息和範例，請參閱<a href=\"guide/observables#using-observables-to-pass-values\" title=\"使用可觀察物件傳遞值『\">可觀察物件概覽</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fskdq9ebwtcu0d0pw2brbdnk\">使用內建的 <a href=\"api/common/AsyncPipe\" title=\"AsyncPipe 的 API 描述\"><code>AsyncPipe</code></a> 接受一個可觀察物件作為輸入，並自動訂閱輸入。如果沒有這個通道，你的元件程式碼就必須訂閱這個可觀察物件來使用它的值，提取已解析的值、把它們公開進行繫結，並在銷燬這段可觀察物件時取消訂閱，以防止記憶體洩漏。<code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 是一個非純通道，可以節省元件中的樣板程式碼，以維護訂閱，並在資料到達時持續從該可觀察物件中提供值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3u85emoj4hqq52kk3iyo05e9v\">以下程式碼範例將訊息字串的可觀察物件（\n<code>message$</code>）繫結到帶有\n<code>async</code>通道的檢視中。</p>\n<code-example header=\"src/app/hero-async-message.component.ts\" path=\"pipes/src/app/hero-async-message.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a> } from '@angular/common';\n\nimport { Observable, interval } from 'rxjs';\nimport { map, startWith, take } from 'rxjs/operators';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-hero-async-message',\n  template: `\n    &lt;h2&gt;Async Messages and <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a>&lt;/h2&gt;\n    &lt;p&gt;{{ message$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> }}&lt;/p&gt;\n    &lt;button type=\"button\" (click)=\"resend()\"&gt;Resend Messages&lt;/button&gt;`,\n  imports: [<a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a>],\n})\nexport class HeroAsyncMessageComponent {\n  message$: Observable&lt;string&gt;;\n\n  private messages = [\n    'You are my hero!',\n    'You are the best hero!',\n    'Will you be my hero?'\n  ];\n\n  constructor() {\n    this.message$ = this.getResendObservable();\n  }\n\n  resend() {\n    this.message$ = this.getResendObservable();\n  }\n\n  private getResendObservable() {\n    return interval(1000).pipe(\n      map(i =&gt; `Message #${i + 1}: ${this.messages[i]}`),\n      take(this.messages.length),\n      startWith('Waiting for messages...')\n    );\n  }\n}\n\n\n</code-example>\n<p><a id=\"no-filter-pipe\"></a></p>\n<h2 id=\"caching-http-requests\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t9fg98i4m0rnhm0isecz3jhh\">快取 HTTP 請求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#caching-http-requests\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qje1khkn0f874wpxtm8ux3ap\">要\n<em>使用HTTP與後端服務進行通訊</em>，\n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>服務使用可觀察物件，並提供\n<code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code>方法從伺服器獲取資料。 這個非同步方法傳送一個HTTP請求，並回傳一個發出回應請求資料的可觀察物件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an7x10ogbomyebxfiswshml8s\">如 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 所示，你可以使用非純通道 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 接受一個可觀察物件作為輸入，並自動訂閱輸入。你也可以建立一個非純通道來建立和緩存 HTTP 請求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dcn7b3pmkucdjx8yia24g7nqv\">每當元件執行變更檢測時就會呼叫非純通道，這可能每隔幾毫秒就執行一次。為避免出現效能問題，只有當請求的 URL 發生變化時才會呼叫該服務器（如下例所示），並使用該通道快取伺服器的回應。顯示如下：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csvhg3e8dbicz9c42a14jxw8l\"><code>fetch</code> 通道（<code>fetch-json.pipe.ts</code>）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tkk6egf1n4va1nsc6rf0cjt\">一個用於示範該請求的挽具元件（<code>hero-list.component.ts</code>），它使用一個樣板，該樣板定義了兩個到該通道的繫結，該通道會向 <code>heroes.json</code> 檔案請求英雄陣列。第二個繫結把 <code>fetch</code> 通道與內建的 <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a></code> 串聯起來，以 JSON 格式顯示同一份英雄資料。</li>\n</ul>\n<code-tabs>\n    <code-pane header=\"src/app/fetch-json.pipe.ts\" path=\"pipes/src/app/fetch-json.pipe.ts\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'fetch',\n  pure: false,\n})\nexport class FetchJsonPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  private cachedData: any = null;\n  private cachedUrl = '';\n\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n\n  transform(url: string): any {\n    if (url !== this.cachedUrl) {\n      this.cachedData = null;\n      this.cachedUrl = url;\n      this.http.get(url).subscribe(result =&gt; this.cachedData = result);\n    }\n\n    return this.cachedData;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/hero-list.component.ts\" path=\"pipes/src/app/hero-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, <a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a> } from '@angular/common';\n\nimport { FetchJsonPipe } from './fetch-json.pipe';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-hero-list',\n  template: `\n    &lt;h2&gt;Heroes from JSON File&lt;/h2&gt;\n\n    &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of ('assets/heroes.json' | fetch) \"&gt;\n      {{hero.name}}\n    &lt;/div&gt;\n\n    &lt;p&gt;Heroes as JSON:\n      {{'assets/heroes.json' | fetch | json}}\n    &lt;/p&gt;`,\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, FetchJsonPipe, <a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a>]\n})\nexport class HeroListComponent { }\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9cq3383np2373up92swueg3ql\">在上面的例子中，通道請求資料時的剖面展示了如下幾點：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4h3u1kumhbpolp6b5hlkubvjs\">每個繫結都有自己的通道實例。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9g53ei9n1t3k9qb0jd32n4ml\">每個通道實例都會快取自己的 URL 和數據，並且只調用一次伺服器。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kl5i8d0r489r81lg9qibdc1c\"><code>fetch</code> 和 <code>fetch-json</code> 通道會像這樣在瀏覽器中顯示英雄：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"none\">\n\nHeroes from JSON File\n\nWindstorm\nBombasto\nMagneto\nTornado\n\nHeroes as JSON: [ { \"name\": \"Windstorm\", \"canFly\": true }, { \"name\": \"Bombasto\", \"canFly\": false }, { \"name\": \"Magneto\", \"canFly\": false }, { \"name\": \"Tornado\", \"canFly\": true } ]\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13ms352dhy165rh902mndlqp5\">內建的 <a href=\"api/common/JsonPipe\" title=\"JsonPipe 的 API 描述\">JsonPipe</a> 提供了一種方法來診斷一個離奇失敗的資料繫結，或用來檢查一個物件是否能用於將來的繫結。</p>\n</div>\n<h2 id=\"pipes-and-precedence\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"587c761afmyc4ahsnazycr0lf\">通道的優先級<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#pipes-and-precedence\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8y9hohb4xh8lrahvmvdou7hkh\">有時你想在將選擇傳遞給通道之前根據某些條件在兩個值之間進行選擇。你可以在樣板中使用 JavaScript 三元運算符（\n<code>?:</code>）來做出選擇。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8lw2yog80e0cm5t17dmnmkv7w\">注意！通道運算符的優先級比 JavaScript 三元運算符（\n<code>?:</code>）高。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bvjx8rm1ylf77hrihyvrc67l\">如果你簡單地按照從左到右的方式評估表示式，你可能會對結果感到驚訝。例如，</p>\n<code-example>\ncondition ? a : b | pipe \n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vx6blrrbxm6oqc3q6dufjgzj\">被解析為</p>\n<code-example>\ncondition ? a : (b | pipe)\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30cep0iivl50ftndd582kf5ef\"><code>b</code> 的值透過 \n<code>pipe</code>；\n<code>a</code> 的值\n<em>不會</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ja6rq281i9z2zdgt7hg0a61k\">如果你希望通道應用於三元表示式的結果，請將整個表示式用括號括起來。例如，</p>\n<code-example>\n(condition ? a : b) | pipe\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kjobrd86i3u2nc07kd5n2tcv\">一般來說，你應該始終使用括號來確保 Angular 按照你的意圖評估表示式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6v5pc426ufvmvgd45f1jlb84s\">在 \n<live-example nodownload=\"\">\n 通道範例\n</live-example> 的 \"通道和優先級\" 部分更詳細地探討了這個問題。</p>\n<!-- links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Aug 14 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n-->\n<!-- links from this doc:\n - /api/common/SlicePipe\n - api/common#pipes\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/DatePipe#pre-defined-format-options\n - api/common/DecimalPipe\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgFor\n - api/common/PercentPipe\n - api/common/SlicePipe\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/core/Component\n - api/core/NgModule\n - api/core/Pipe\n - api/core/PipeTransform\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/animations/async\n - cli\n - cli/generate#pipe\n - guide/glossary#case-types\n - guide/glossary#change-detection\n - guide/glossary#component\n - guide/glossary#data-binding\n - guide/glossary#decorator--decoration\n - guide/glossary#observable\n - guide/glossary#pipe\n - guide/glossary#template\n - guide/glossary#template-expression\n - guide/glossary#typescript\n - guide/i18n-common-format-data-locale\n - guide/ngmodules\n - guide/observables#using-observables-to-pass-values\n - guide/pipes#caching-http-requests\n - guide/pipes#creating-pipes-for-custom-data-transformations\n - guide/pipes#detecting-changes-with-data-binding-in-pipes\n - guide/pipes#detecting-impure-changes-within-composite-objects\n - guide/pipes#detecting-pure-changes-to-primitives-and-object-references\n - guide/pipes#example-chaining-two-pipes-together\n - guide/pipes#example-formatting-a-date\n - guide/pipes#example-transforming-a-value-exponentially\n - guide/pipes#how-change-detection-works\n - guide/pipes#marking-a-class-as-a-pipe\n - guide/pipes#pipes-and-precedence\n - guide/pipes#prerequisites\n - guide/pipes#transforming-data-using-pipes\n - guide/pipes#transforming-data-with-parameters-and-chained-pipes\n - guide/pipes#unwrapping-data-from-an-observable\n - guide/pipes#using-a-pipe-in-a-template\n - guide/pipes#using-the-pipetransform-interface\n - guide/standalone-components\n - guide/styleguide#pipe-names\n - guide/understanding-communicating-with-http\n-->"}
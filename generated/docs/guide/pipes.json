{"id":"guide/pipes","title":"用管道转换数据","contents":"<div class=\"content\">\n  <h1 id=\"transforming-data-using-pipes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ynz4ntalblxfc8458m6lprr3\">用管道转换数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#transforming-data-using-pipes\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dz70vxwzy0r721hxes7gerzdg\"><a href=\"guide/glossary#pipe\" title=\"管道的定义\">管道</a>用来对字符串、货币金额、日期和其他显示数据进行转换和格式化。管道是一些简单的函数，可以在<a href=\"guide/glossary#template-expression\" title=\"模板表达式的定义\">模板表达式</a>中用来接受输入值并返回一个转换后的值。比如，你可以使用一个管道把日期显示为 <strong>1988 年 4 月 15 日</strong>，而不是其原始字符串格式。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52b8y6b0m87ijmxc4268fkcpf\">本主题中使用的范例应用，参阅<live-example></live-example>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aty8pvhfpul4gcauwa3nmo7wc\">Angular 为典型的数据转换提供了内置的管道，包括国际化的转换（i18n），它使用本地化信息来格式化数据。数据格式化常用的内置管道如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4c1vv1rgp7phpgpk7rg59bjk0\">管道</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"api/common/DatePipe\"><code>DatePipe</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1akl69rz8a1me49o5ehugw0lu\">根据区域设置规则格式化日期值。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/common/UpperCasePipe\"><code>UpperCasePipe</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7j7h3zn8zk5onqps4xzua66f2\">把文本转换成全大写形式。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/common/LowerCasePipe\"><code>LowerCasePipe</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2uh0ahm9ryydiryybfua28a8l\">把文本转换成全小写形式。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/common/CurrencyPipe\"><code>CurrencyPipe</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rkeb45sjcxhphdvjzaukcob\">将数字转换为根据语言环境规则格式化的货币字符串。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/common/DecimalPipe\"><code>DecimalPipe</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfx0yg92hkslc10ftsy2r7cei\">将数字转换为带有小数点的字符串，根据语言环境规则进行格式化。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/common/PercentPipe\"><code>PercentPipe</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38cgzyn8pps1fp8hg593qk6nj\">将数字转换为百分比字符串，根据语言环境规则进行格式化。</td>\n</tr>\n</tbody>\n</table>\n<div class=\"alert is-helpful\">\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yc75zxrtnpw3l6w86ut8ss08\">关于内置管道的完整列表，请参阅<a href=\"api/common#pipes\" title=\"管道 API 参考总结\">管道 API 文档</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dunilzc2gkkkqd3yqem8qvr1c\">要了解有关使用管道进行国际化 (i18n) 工作的更多信息，请参阅<a href=\"guide/i18n-common-format-data-locale\" title=\"Format data based on locale | Angular\">根据区域设置格式化数据</a>。</li>\n</ul>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7s5iiuf9m4k1univgr8zzj18j\">你还可以创建管道来封装自定义转换，并在模板表达式中使用自定义管道。</p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wyytvry32tk8ql2rb30h4gbe\">要想使用管道，你应该对这些内容有基本的了解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f512ofu3j70k8r0x9j4ndns9\"><a href=\"guide/glossary#typescript\" title=\"Typescript 的定义\">Typescript</a> 和 HTML5 编程</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50hp7mok5haxrkaj68jn7uors\">带有 CSS 样式的 HTML <a href=\"guide/glossary#template\" title=\"模板的定义\">模板</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"y8gvmnzd0c37pnkvqq9cf8fg\"><a href=\"guide/glossary#component\" title=\"组件的定义\">组件</a></li>\n</ul>\n<h2 id=\"using-a-pipe-in-a-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfs8xgtee8br2hsr8dat5a984\">在模板中使用管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#using-a-pipe-in-a-template\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2syj6pzq0tf15h3sj3hip8ucv\">要应用管道，请在模板表达式中使用管道操作符（\n<code>|</code>），如下面的代码示例所示。</p>\n<code-example header=\"birthday.component.html (template)\" path=\"pipes/src/app/birthday.component.html\">\n&lt;p&gt;The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a> }}&lt;/p&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bk66e22o1oebi1bhjcec4sd8r\">组件的\n<code>birthday</code>值通过管道操作符（\n<code>|</code>）流向\n<a href=\"api/common/DatePipe\"><code>DatePipe</code></a>，其管道名称为\n<code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code>。 管道以默认格式呈现日期为\n<strong>Apr 15, 1988</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5u77p0kjqi3fh71qx0unpuzyi\">查看组件类。</p>\n<code-example header=\"birthday.component.ts (class)\" path=\"pipes/src/app/birthday.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a> } from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-birthday',\n  templateUrl: './birthday.component.html',\n  imports: [<a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a>],\n})\nexport class BirthdayComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87xtkwzhx2a5mi6ut7tx8p83n\">因为这是一个\n<a href=\"guide/standalone-components\">独立组件</a>，它从\n<code>@angular/common</code>导入\n<code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code>，这是所有内置管道的来源。</p>\n<p><a id=\"parameterizing-a-pipe\"></a></p>\n<h2 id=\"transforming-data-with-parameters-and-chained-pipes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b4a9d0lyu6gy7m4elaz7euiv\">使用参数和管道链来格式化数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#transforming-data-with-parameters-and-chained-pipes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9jtkc00shxjxbn2epk5c7zjb\">某些管道有\n<em>可选</em>参数，用于微调管道的输出。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57w35i3hk6v5g3919ed0e3i2z\">例如，\n<a href=\"api/common/CurrencyPipe\" title=\"API 参考\"><code>CurrencyPipe</code></a> 接受一个国家代码作为参数。 要指定参数，请在管道名称（\n<code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code>）后跟一个冒号（\n<code>:</code>）和参数值（国家代码）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8y3tkumrdeiejp0yqst175asw\">模板表达式 \n<code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR' }}</code> 显示带有欧元符号（€）前缀的金额。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kemvtni1n7eefwf7bepv07fh\">某些管道接受多个\n<em>可选</em>参数。通过冒号分隔，将每个参数传递给管道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zqdw3fzj1kozf9spgzp2mu7m\">例如，\n<code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR':'欧元 '}}</code> 显示带有标签\"欧元\"（第二个参数）而不是欧元符号的金额。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ruavzhqybc1svq8ee047q5d0\">一些管道，例如\n<a href=\"/api/common/SlicePipe\" title=\"SlicePipe的API参考\"><code>SlicePipe</code></a>，\n<em>需要</em>至少一个参数，可能允许更多的\n<em>可选</em>参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"uuz180qqza3kker46r3zqph7\">表达式\n<code>{{ anArray | <a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a>:1:5 }}</code>显示一个包含从元素\n<code>1</code>开始到元素\n<code>5</code>结束的元素子集的新字符串。</p>\n<h2 id=\"example-formatting-a-date\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qgptgdnstpqby6redeyn9ey\">范例：格式化日期<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#example-formatting-a-date\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ulpjk01mghhridrpjjgufp0q\">以下示例演示了使用\n<a href=\"api/common/DatePipe\" title=\"API参考\"><code>DatePipe</code></a>格式化英雄出生日期的两种方法。</p>\n<code-tabs>\n    <code-pane header=\"birthday-formatting.component.html (template)\" path=\"pipes/src/app/birthday-formatting.component.html\">\n&lt;p&gt;The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:\"shortDate\" }} in the \"shortDate\" format.&lt;/p&gt;\n\n&lt;p&gt;The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:format }} in \"{{format}}\" format.\n  Click the toggle button to change formats.&lt;/p&gt;\n\n&lt;button type=\"button\" (click)=\"toggleFormat()\"&gt;Toggle Format&lt;/button&gt;\n\n\n</code-pane>\n    <code-pane header=\"birthday-formatting.component.ts (class)\" path=\"pipes/src/app/birthday-formatting.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a> } from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-birthday-formatting',\n  templateUrl: './birthday-formatting.component.html',\n  imports: [<a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a>],\n})\nexport class BirthdayFormattingComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based\n  toggle = true;\n\n  get format()   { return this.toggle ? 'mediumDate' : 'fullDate'; }\n\n  toggleFormat() { this.toggle = !this.toggle; }\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7t92muwxnyqgnljvkyi32o56o\">在模板中，第一个表达式将出生日期传递给\n<code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code>，带有一个字面的日期格式参数\"shortDate\"。输出为\n<strong>04/15/88</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a99klw6gxwik4xy5dpif48qvt\">第二个表达式将出生日期传递给\n<code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code>，带有一个日期格式参数，该参数与组件属性\n<em>绑定</em>（\n<code>format</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44q7a0bny6qk6roeh8n21eoco\">点击\"切换\"按钮会在两种\n<em>许多可能的预定义格式</em>中切换该属性值，\n<code>'mediumDate'</code>和\n<code>'fullDate'</code>。输出为\n<strong>1988年4月15日</strong>或\n<strong>1988年4月15日星期五</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xlm5zqn6su5hfxrxbslzrr4g\">页面以指定的格式显示出生日期。</p>\n<h2 id=\"example-chaining-two-pipes-together\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dimegpak9r7oleybkekroq2mn\">示例：链接两个管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#example-chaining-two-pipes-together\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hchmf6swku9l7847tkjlgic3\">使用\"管道链接语法\"连接多个管道，使一个管道的输出成为下一个管道的输入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84l3lmvzwayoj6g3ey7t1u0ij\">以下示例将出生日期传递给\n<code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code>，然后将结果转发给\n<code><a href=\"api/common/UpperCasePipe\" title=\"API参考\">UpperCasePipe</a></code>管道，使用\"管道链接语法\"。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fsh11za2teufagtyi8n58az3\">再次演示了\n<code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code>使用\n<em>带</em>和\n<em>不带</em>格式参数。注意两个结果（\n<strong>APR 15, 1988</strong>和\n<strong>FRIDAY, APRIL 15, 1988</strong>）都是大写的。</p>\n<code-tabs>\n    <code-pane header=\"birthday-pipe-chaining.component.html (template)\" path=\"pipes/src/app/birthday-pipe-chaining.component.html\">\n&lt;p&gt;\n  The chained hero's uppercase birthday is\n  {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a> | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}\n&lt;/p&gt;\n\n&lt;p&gt;\n  The chained hero's uppercase birthday in \"fullDate\" format is\n  {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'fullDate' | uppercase}}\n&lt;/p&gt;\n\n\n</code-pane>\n    <code-pane header=\"birthday-pipe-chaining.component.ts (class)\" path=\"pipes/src/app/birthday-pipe-chaining.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a>, <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>} from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-birthday-pipe-chaining',\n  templateUrl: './birthday-pipe-chaining.component.html',\n  imports: [<a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a>, <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a>],\n})\nexport class BirthdayPipeChainingComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"boyw8onnz42z6bs9vtodh0xvb\">切换到类文件以查看这是一个\n<a href=\"guide/standalone-components\">独立组件</a>；它从\n<code>@angular/common</code>导入了这两个管道，这是所有内置管道的来源。</p>\n<p><a id=\"Custom-pipes\"></a></p>\n<h2 id=\"creating-pipes-for-custom-data-transformations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byn6vq1dhq9z2si0f3n6ikiod\">为自定义数据转换创建管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#creating-pipes-for-custom-data-transformations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ce283l8k5iq11u057ke94pp9\">创建自定义管道来封装那些内置管道没有提供的转换。然后就可以在模板表达式中使用自定义管道了，像内置管道一样，把输入值转换成显示输出。</p>\n<h3 id=\"marking-a-class-as-a-pipe\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmncqwy4zdbr1ix9izi238ci4\">把一个类标记为一个管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#marking-a-class-as-a-pipe\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65fdrtpssa9hhg6q8cu8tq8ue\">要把类标记为管道并提供配置元数据，请把 <a href=\"api/core/Pipe\" title=\"Pipe 的 API 引用\"><code>@Pipe</code></a> <a href=\"guide/glossary#decorator--decoration\" title=\"装饰器的定义\">装饰器</a>应用到这个类上。管道类名是 <a href=\"guide/glossary#case-types\" title=\"案例类型的定义\">UpperCamelCase</a>（类名的一般约定），相应的 <code>name</code> 字符串是 <a href=\"guide/glossary#case-types\" title=\"案例类型的定义\">camelCase</a> 的。不要在 <code>name</code> 中使用连字符。详细信息和更多范例，请参阅<a href=\"guide/styleguide#pipe-names\" title=\"Angular 编码风格指南中的管道名称\">管道名称</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59woxknp7rmjrsh7t0u53y0tr\">在模板表达式中使用 <code>name</code> 就像在内置管道中一样。</p>\n<div class=\"alert is-important\">\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43g2a048gj6mua53osdf3lswv\">把你的管道包含在 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据的 <code>declarations</code> 字段中，以便它能用于模板。请查看范例应用中的 <code>app.module.ts</code> 文件（<live-example></live-example>）。有关详细信息，请参阅 <a href=\"guide/ngmodules\" title=\"NgModules 简介\">NgModules</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ezd59rf88ywl9d0v07ag11c6\">注册自定义管道。<a href=\"cli\" title=\"CLI 概述和命令参考\">Angular CLI</a> 的 <a href=\"cli/generate#pipe\" title=\"ng 在 CLI Command Reference 中生成管道\"><code>ng generate pipe</code></a> 命令会自动注册该管道。</p>\n</li>\n</ul>\n</div>\n<h3 id=\"using-the-pipetransform-interface\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coz9qgu2vendycp7ynb13ugbr\">使用 PipeTransform 接口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#using-the-pipetransform-interface\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qvbkrg9wnpmv888xqmtnnndw\">在自定义管道类中实现 <a href=\"api/core/PipeTransform\" title=\"PipeTransform 的 API 参考\"><code>PipeTransform</code></a> 接口来执行转换。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rdwu0ty9ppt7pbhl77s60rk5\">Angular 调用 <code>transform</code> 方法，该方法使用绑定的值作为第一个参数，把其它任何参数都以列表的形式作为第二个参数，并返回转换后的值。</p>\n<h3 id=\"example-transforming-a-value-exponentially\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8nxbr3fmax5b8puwr1r32cix\">范例：指数级转换<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#example-transforming-a-value-exponentially\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5o59bxhab8w3jz1n0dyos17e\">在游戏中，可能希望实现一种指数级转换，以指数级增加英雄的力量。比如，如果英雄的得分是 2，那么英雄的能量会指数级增长 10 次，最终得分为 1024。你可以使用自定义管道进行这种转换。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hxuxz2tjgo19fh04hpo4t8b0\">下列代码范例显示了两个组件定义：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n2c7wfntpyw9gnmnqx5bqxht\">文件</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>exponential-strength.pipe.ts</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3igz5d81kp6l76nsth93e11n1\">定义了一个名为\n<code>exponentialStrength</code>的自定义管道，具有执行转换的\n<code>transform</code>方法。它为传递给管道的参数定义了一个参数\n<code>exponent</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>power-booster.component.ts</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vgobxe8ww4h6i5xvpsadw9cf\">演示如何使用管道，指定一个值（\n<code>2</code>）和指数参数（\n<code>10</code>）。</td>\n</tr>\n</tbody>\n</table>\n<code-tabs>\n    <code-pane header=\"src/app/exponential-strength.pipe.ts\" path=\"pipes/src/app/exponential-strength.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n/*\n * Raise the value exponentially\n * Takes an exponent argument that defaults to 1.\n * Usage:\n *   value | exponentialStrength:exponent\n * Example:\n *   {{ 2 | exponentialStrength:10 }}\n *   formats to: 1024\n*/\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'exponentialStrength'\n})\nexport class ExponentialStrengthPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(value: number, exponent = 1): number {\n    return Math.pow(value, exponent);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/power-booster.component.ts\" path=\"pipes/src/app/power-booster.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { ExponentialStrengthPipe } from './exponential-strength.pipe';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-power-booster',\n  template: `\n    &lt;h2&gt;Power Booster&lt;/h2&gt;\n    &lt;p&gt;Super power boost: {{2 | exponentialStrength: 10}}&lt;/p&gt;\n  `,\n  imports: [ExponentialStrengthPipe]\n})\nexport class PowerBoosterComponent { }\n\n\n</code-pane>\n</code-tabs>\n<!--todo: replace with screen capture -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"953cupjezya903jzm3cso9rlv\">浏览器显示如下：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"none\">\n\nPower Booster\n\nSuperpower boost: 1024\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6smig3c0kds033zvsh9oyj72j\">要检查 <code>exponentialStrength</code> 管道的行为，请查看<live-example></live-example>，并在模板中修改值和可选的指数参数。</p>\n</div>\n<p><a id=\"change-detection\"></a></p>\n<h2 id=\"detecting-changes-with-data-binding-in-pipes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6si0hb0fhllrppmvtexv81uxc\">通过管道中的数据绑定来检测变更<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#detecting-changes-with-data-binding-in-pipes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qoiq2uas14p336x5d2irbw6i\">你可以通过带有管道的<a href=\"guide/glossary#data-binding\" title=\"数据绑定的定义\">数据绑定</a>来显示值并响应用户操作。如果是原始类型的输入值，比如 <code>String</code> 或 <code>Number</code>，或者是对象引用型的输入值，比如 <code>Date</code> 或 <code>Array</code>，那么每当 Angular 检测到输入值或引用有变化时，就会执行该输入管道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34ld98z79o9vxgonv06xqu0va\">比如，你可以修改前面的自定义管道范例，通过 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的双向绑定来输入数量和提升因子，如下面的代码范例所示。</p>\n<code-example header=\"src/app/power-boost-calculator.component.ts\" path=\"pipes/src/app/power-boost-calculator.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { ExponentialStrengthPipe } from './exponential-strength.pipe';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-power-boost-calculator',\n  template: `\n    &lt;h2&gt;Power Boost Calculator&lt;/h2&gt;\n    &lt;label for=\"power-input\"&gt;Normal power: &lt;/label&gt;\n    &lt;input id=\"power-input\" type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"power\"&gt;\n    &lt;label for=\"boost-input\"&gt;Boost factor: &lt;/label&gt;\n    &lt;input id=\"boost-input\" type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"factor\"&gt;\n    &lt;p&gt;\n      Super Hero Power: {{power | exponentialStrength: factor}}\n    &lt;/p&gt;\n  `,\n  imports: [ExponentialStrengthPipe, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>],\n  styles: ['input {margin: .5rem 0;}']\n})\nexport class PowerBoostCalculatorComponent {\n  power = 5;\n  factor = 1;\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2caizv1urb9kiqn6wotb97o5q\">每当用户改变 “normal power” 值或 “boost factor” 时，就会执行 <code>exponentialStrength</code> 管道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tjfetf3opzedk9414uqap4se\">Angular 会检测每次变更，并立即运行该管道。对于原始输入值，这很好。但是，如果要在复合对象中更改某些<em>内部值</em>（比如日期中的月份、数组中的元素或对象中的属性），就需要了解变更检测的工作原理，以及如何使用 <code>impure</code>（非纯）管道。</p>\n<h3 id=\"how-change-detection-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbzojdcj45x3zth0q6q7xlk56\">变更检测的工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#how-change-detection-works\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ib6w6qmcghaoar7pcrznhzs5\">Angular 会在每次 DOM 事件（每次按键、鼠标移动、计时器滴答和服务器响应）之后运行的<a href=\"guide/glossary#change-detection\" title=\"变更检测的定义\">变更检测</a>过程中查找对数据绑定值的<a href=\"guide/glossary#change-detection\" title=\"变更检测的定义\">更改</a>。下面这段不使用管道的例子演示了 Angular 如何利用默认的变更检测策略来监控和更新 <code>heroes</code> 数组中每个英雄的显示效果。范例显示如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n2c7wfntpyw9gnmnqx5bqxht\">文件</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>flying-heroes.component.html (v1)</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmiurfuhjvs5ls5ul4n98497l\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code>重复器显示英雄名称。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>flying-heroes.component.ts (v1)</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ewqiqo0qxa8oibjoi9adgvd9\">提供英雄，将英雄添加到数组中，并重置数组。</td>\n</tr>\n</tbody>\n</table>\n<code-tabs>\n    <code-pane header=\"src/app/flying-heroes.component.html (v1)\" path=\"pipes/src/app/flying-heroes.component.html\" region=\"template-1\">\n&lt;label for=\"hero-name\"&gt;New hero name: &lt;/label&gt;\n&lt;input type=\"text\" #box id=\"hero-name\" (keyup.enter)=\"addHero(box.value); box.value=''\" placeholder=\"hero name\"&gt;\n  &lt;button type=\"button\" (click)=\"reset()\"&gt;Reset list of heroes&lt;/button&gt;\n  &lt;!&lt;!-- Only used in deprecated `pipes.md` --&gt;\n  &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    {{hero.name}}\n  &lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/flying-heroes.component.ts (v1)\" path=\"pipes/src/app/flying-heroes.component.ts\" region=\"v1\">\nexport class FlyingHeroesComponent {\n  heroes: any[] = [];\n  canFly = true;\n  constructor() { this.reset(); }\n\n  addHero(name: string) {\n    name = name.trim();\n    if (!name) { return; }\n    const hero = { name, canFly: this.canFly };\n      this.heroes.push(hero);\n  }\n\n  reset() { this.heroes = HEROES.slice(); }\n}\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9s86ytsok49oqu6xu5qqsvlu3\">每次用户添加一个英雄时，Angular 都会更新显示内容。如果用户点击了 <strong>Reset</strong> 按钮，Angular 就会用原来这些英雄组成的新数组来替换 <code>heroes</code>，并更新显示。如果你添加删除或更改了某个英雄的能力，Angular 也会检测这些变化并更新显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajyrsh4yx75249elt1dr1yjfe\">然而，如果对于每次更改都执行一个管道来更新显示，就会降低你应用的性能。因此，Angular 会使用更快的变更检测算法来执行管道，如下一节所述。</p>\n<p><a id=\"pure-and-impure-pipes\"></a></p>\n<h3 id=\"detecting-pure-changes-to-primitives-and-object-references\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22of8qm26xosc9yxgzxgywv1u\">检测原始类型和对象引用的纯变更<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#detecting-pure-changes-to-primitives-and-object-references\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"965ymi0lf05gryj18t4yqmrao\">通过默认情况下，管道会定义成<em>纯的（pure）</em>，这样 Angular 只有在检测到输入值发生了<em>纯变更</em>时才会执行该管道。纯变更是对原始输入值（比如 <code>String</code>、<code>Number</code>、<code>Boolean</code> 或 <code>Symbol</code>）的变更，或是对对象引用的变更（比如 <code>Date</code>、<code>Array</code>、<code>Function</code>、<code>Object</code>）。</p>\n<p><a id=\"pure-pipe-pure-fn\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2f5x4nes859ke5pzcx5buybjm\">纯管道必须使用纯函数，它能处理输入并返回没有副作用的值。换句话说，给定相同的输入，纯函数应该总是返回相同的输出。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eawd8xi3u4o5fod3rhbbwkmc2\">使用纯管道，Angular 会忽略复合对象中的变化，比如往现有数组中新增的元素，因为检查原始值或对象引用比对对象中的差异进行深度检查要快得多。Angular 可以快速判断是否可以跳过执行该管道并更新视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2032yyyxvmme2n6tychh65jy1\">但是，以数组作为输入的纯管道可能无法正常工作。为了演示这个问题，修改前面的例子来把英雄列表过滤成那些会飞的英雄。在 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中使用 <code>FlyingHeroesPipe</code>，代码如下。这个例子的显示如下：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qw3swizk7gjszrmqsadt03iu\">带有新管道的模板（<code>flying-heroes.component.html (flyers)</code>）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21mfa0678jczy1josek8pr7iq\"><code>FlyingHeroesPipe</code> 自定义管道实现（<code>flying-heroes.pipe.ts</code>）</li>\n</ul>\n<code-tabs>\n    <code-pane header=\"src/app/flying-heroes.component.html (flyers)\" path=\"pipes/src/app/flying-heroes.component.html\" region=\"template-flying-heroes\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of (heroes | flyingHeroes)\"&gt;\n  {{hero.name}}\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/flying-heroes.pipe.ts\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"pure\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\nimport { Hero } from './heroes';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'flyingHeroes'\n})\nexport class FlyingHeroesPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(allHeroes: Hero[]) {\n    return allHeroes.filter(hero =&gt; hero.canFly);\n  }\n}\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jk0clctxnr5bb1e5t5psx0mc\">该应用现在展示了意想不到的行为：当用户添加了会飞的英雄时，它们都不会出现在 “Heroes who fly” 中。发生这种情况是因为添加英雄的代码会把它 push 到 <code>heroes</code> 数组中：</p>\n<code-example header=\"src/app/flying-heroes.component.ts\" path=\"pipes/src/app/flying-heroes.component.ts\" region=\"push\">\nthis.heroes.push(hero);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f40ebjiidd10245p4tlqj1o\">而变更检测器会忽略对数组元素的更改，所以管道不会运行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f61wszmxqimh4e9egsqeajvy\">Angular 忽略了被改变的数组元素的原因是对数组的<em>引用</em>没有改变。由于 Angular 认为该数组仍是相同的，所以不会更新其显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eetxjsoonwn60su3awpewj79j\">获得所需行为的方法之一是更改对象引用本身。可以用一个包含新更改过的元素的新数组替换该数组，然后把这个新数组作为输入传给管道。在上面的例子中，你可以创建一个附加了新英雄的数组，并把它赋值给 <code>heroes</code>。Angular 检测到了这个数组引用的变化，并执行了该管道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82jegtyjyvi2q34eeo9mw5f2h\">总结一下，如果修改了输入数组，纯管道就不会执行。如果<em>替换</em>了输入数组，就会执行该管道并更新显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnyim8z98i7oh2h9sf38wnp86\">上述例子演示了如何更改组件的代码来适应某个管道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dzingyrem2rz8zqhb2twi3se\">为了让你的组件更简单，独立于那些使用管道的 HTML，你可以用一个<em>不纯的</em>管道来检测复合对象（如数组）中的变化，如下一节所述。</p>\n<p><a id=\"impure-flying-heroes\"></a></p>\n<h3 id=\"detecting-impure-changes-within-composite-objects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80ydb5lyb6qfa13b6810naahj\">检测复合对象中的非纯变更<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#detecting-impure-changes-within-composite-objects\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"j5rlii894d5c15dp2unv86a6\">要在复合对象<em>内部</em>进行更改后执行自定义管道（比如更改数组元素），就需要把管道定义为 <code>impure</code> 以检测非纯的变更。每当按键或鼠标移动时，Angular 都会检测到一次变更，从而执行一个非纯管道。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crb8r9hlv2oczg0zd6xorsmts\">虽然非纯管道很实用，但要小心使用。长时间运行非纯管道可能会大大降低你的应用速度。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yo5vbppn0adok3sfup5b6l6m\">通过把 <code>pure</code> 标志设置为 <code>false</code> 来把管道设置成非纯的：</p>\n<code-example header=\"src/app/flying-heroes.pipe.ts\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"pipe-decorator\">\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'flyingHeroesImpure',\n  pure: false\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gkbs92jx50ph1oq2mmy0q4g6\">下面的代码显示了 <code>FlyingHeroesImpurePipe</code> 的完整实现，它扩展了 <code>FlyingHeroesPipe</code> 以继承其特性。这个例子表明你不需要修改其他任何东西 - 唯一的区别就是在管道元数据中把 <code>pure</code> 标志设置为 <code>false</code>。</p>\n<code-tabs>\n    <code-pane header=\"src/app/flying-heroes.pipe.ts (FlyingHeroesImpurePipe)\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"impure\">\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'flyingHeroesImpure',\n  pure: false\n})\nexport class FlyingHeroesImpurePipe extends FlyingHeroesPipe { }\n\n</code-pane>\n    <code-pane header=\"src/app/flying-heroes.pipe.ts (FlyingHeroesPipe)\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"pure\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\nimport { Hero } from './heroes';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'flyingHeroes'\n})\nexport class FlyingHeroesPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(allHeroes: Hero[]) {\n    return allHeroes.filter(hero =&gt; hero.canFly);\n  }\n}\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab0yym78bss8cfrjg134lgnq6\">对于非纯管道，<code>FlyingHeroesImpurePipe</code> 是个不错的选择，因为它的 <code>transform</code> 函数非常简单快捷：</p>\n<code-example header=\"src/app/flying-heroes.pipe.ts (filter)\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"filter\">\nreturn allHeroes.filter(hero =&gt; hero.canFly);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8wras6tu5oymhfblfmykvisxf\">你可以从 <code>FlyingHeroesComponent</code> 派生一个 <code>FlyingHeroesImpureComponent</code>。如下面的代码所示，只有模板中的管道发生了变化。</p>\n<code-example header=\"src/app/flying-heroes-impure.component.html (excerpt)\" path=\"pipes/src/app/flying-heroes-impure.component.html\" region=\"template-flying-heroes\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of (heroes | flyingHeroesImpure)\"&gt;\n  {{hero.name}}\n&lt;/div&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7koyfc6115w5tug1euoj59dr\">要想确认是否在用户添加英雄时更新了显示，请参阅<live-example></live-example>。</p>\n</div>\n<p><a id=\"async-pipe\"></a></p>\n<h2 id=\"unwrapping-data-from-an-observable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2kb5nzomzhfq1a0wnn462b4m\">从一个可观察对象中解包数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#unwrapping-data-from-an-observable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9v5bm3x23ezxzg1us4b4086xe\"><a href=\"guide/glossary#observable\" title=\"可观察对象的定义\">可观察对象</a>能让你在应用的各个部分之间传递消息。建议在事件处理、异步编程以及处理多个值时使用这些可观察对象。可观察对象可以提供任意类型的单个或多个值，可以是同步的（作为一个函数为它的调用者提供一个值），也可以是异步的。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"audl9oatxdubw7v1hc608iocd\">关于可观察对象的详细信息和范例，请参阅<a href=\"guide/observables#using-observables-to-pass-values\" title=\"使用可观察对象传递值“\">可观察对象概览</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fskdq9ebwtcu0d0pw2brbdnk\">使用内置的 <a href=\"api/common/AsyncPipe\" title=\"AsyncPipe 的 API 描述\"><code>AsyncPipe</code></a> 接受一个可观察对象作为输入，并自动订阅输入。如果没有这个管道，你的组件代码就必须订阅这个可观察对象来使用它的值，提取已解析的值、把它们公开进行绑定，并在销毁这段可观察对象时取消订阅，以防止内存泄漏。<code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 是一个非纯管道，可以节省组件中的样板代码，以维护订阅，并在数据到达时持续从该可观察对象中提供值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3u85emoj4hqq52kk3iyo05e9v\">以下代码示例将消息字符串的可观察对象（\n<code>message$</code>）绑定到带有\n<code>async</code>管道的视图中。</p>\n<code-example header=\"src/app/hero-async-message.component.ts\" path=\"pipes/src/app/hero-async-message.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a> } from '@angular/common';\n\nimport { Observable, interval } from 'rxjs';\nimport { map, startWith, take } from 'rxjs/operators';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-hero-async-message',\n  template: `\n    &lt;h2&gt;Async Messages and <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a>&lt;/h2&gt;\n    &lt;p&gt;{{ message$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> }}&lt;/p&gt;\n    &lt;button type=\"button\" (click)=\"resend()\"&gt;Resend Messages&lt;/button&gt;`,\n  imports: [<a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a>],\n})\nexport class HeroAsyncMessageComponent {\n  message$: Observable&lt;string&gt;;\n\n  private messages = [\n    'You are my hero!',\n    'You are the best hero!',\n    'Will you be my hero?'\n  ];\n\n  constructor() {\n    this.message$ = this.getResendObservable();\n  }\n\n  resend() {\n    this.message$ = this.getResendObservable();\n  }\n\n  private getResendObservable() {\n    return interval(1000).pipe(\n      map(i =&gt; `Message #${i + 1}: ${this.messages[i]}`),\n      take(this.messages.length),\n      startWith('Waiting for messages...')\n    );\n  }\n}\n\n\n</code-example>\n<p><a id=\"no-filter-pipe\"></a></p>\n<h2 id=\"caching-http-requests\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t9fg98i4m0rnhm0isecz3jhh\">缓存 HTTP 请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#caching-http-requests\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qje1khkn0f874wpxtm8ux3ap\">要\n<em>使用HTTP与后端服务进行通信</em>，\n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>服务使用可观察对象，并提供\n<code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code>方法从服务器获取数据。 这个异步方法发送一个HTTP请求，并返回一个发出响应请求数据的可观察对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an7x10ogbomyebxfiswshml8s\">如 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 所示，你可以使用非纯管道 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 接受一个可观察对象作为输入，并自动订阅输入。你也可以创建一个非纯管道来建立和缓存 HTTP 请求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dcn7b3pmkucdjx8yia24g7nqv\">每当组件运行变更检测时就会调用非纯管道，这可能每隔几毫秒就运行一次。为避免出现性能问题，只有当请求的 URL 发生变化时才会调用该服务器（如下例所示），并使用该管道缓存服务器的响应。显示如下：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csvhg3e8dbicz9c42a14jxw8l\"><code>fetch</code> 管道（<code>fetch-json.pipe.ts</code>）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tkk6egf1n4va1nsc6rf0cjt\">一个用于演示该请求的挽具组件（<code>hero-list.component.ts</code>），它使用一个模板，该模板定义了两个到该管道的绑定，该管道会向 <code>heroes.json</code> 文件请求英雄数组。第二个绑定把 <code>fetch</code> 管道与内置的 <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a></code> 串联起来，以 JSON 格式显示同一份英雄数据。</li>\n</ul>\n<code-tabs>\n    <code-pane header=\"src/app/fetch-json.pipe.ts\" path=\"pipes/src/app/fetch-json.pipe.ts\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'fetch',\n  pure: false,\n})\nexport class FetchJsonPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  private cachedData: any = null;\n  private cachedUrl = '';\n\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n\n  transform(url: string): any {\n    if (url !== this.cachedUrl) {\n      this.cachedData = null;\n      this.cachedUrl = url;\n      this.http.get(url).subscribe(result =&gt; this.cachedData = result);\n    }\n\n    return this.cachedData;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/hero-list.component.ts\" path=\"pipes/src/app/hero-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, <a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a> } from '@angular/common';\n\nimport { FetchJsonPipe } from './fetch-json.pipe';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-hero-list',\n  template: `\n    &lt;h2&gt;Heroes from JSON File&lt;/h2&gt;\n\n    &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of ('assets/heroes.json' | fetch) \"&gt;\n      {{hero.name}}\n    &lt;/div&gt;\n\n    &lt;p&gt;Heroes as JSON:\n      {{'assets/heroes.json' | fetch | json}}\n    &lt;/p&gt;`,\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, FetchJsonPipe, <a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a>]\n})\nexport class HeroListComponent { }\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9cq3383np2373up92swueg3ql\">在上面的例子中，管道请求数据时的剖面展示了如下几点：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4h3u1kumhbpolp6b5hlkubvjs\">每个绑定都有自己的管道实例。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9g53ei9n1t3k9qb0jd32n4ml\">每个管道实例都会缓存自己的 URL 和数据，并且只调用一次服务器。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kl5i8d0r489r81lg9qibdc1c\"><code>fetch</code> 和 <code>fetch-json</code> 管道会像这样在浏览器中显示英雄：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"none\">\n\nHeroes from JSON File\n\nWindstorm\nBombasto\nMagneto\nTornado\n\nHeroes as JSON: [ { \"name\": \"Windstorm\", \"canFly\": true }, { \"name\": \"Bombasto\", \"canFly\": false }, { \"name\": \"Magneto\", \"canFly\": false }, { \"name\": \"Tornado\", \"canFly\": true } ]\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13ms352dhy165rh902mndlqp5\">内置的 <a href=\"api/common/JsonPipe\" title=\"JsonPipe 的 API 描述\">JsonPipe</a> 提供了一种方法来诊断一个离奇失败的数据绑定，或用来检查一个对象是否能用于将来的绑定。</p>\n</div>\n<h2 id=\"pipes-and-precedence\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"587c761afmyc4ahsnazycr0lf\">管道的优先级<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#pipes-and-precedence\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8y9hohb4xh8lrahvmvdou7hkh\">有时你想在将选择传递给管道之前根据某些条件在两个值之间进行选择。你可以在模板中使用 JavaScript 三元运算符（\n<code>?:</code>）来做出选择。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8lw2yog80e0cm5t17dmnmkv7w\">注意！管道运算符的优先级比 JavaScript 三元运算符（\n<code>?:</code>）高。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bvjx8rm1ylf77hrihyvrc67l\">如果你简单地按照从左到右的方式评估表达式，你可能会对结果感到惊讶。例如，</p>\n<code-example>\ncondition ? a : b | pipe \n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vx6blrrbxm6oqc3q6dufjgzj\">被解析为</p>\n<code-example>\ncondition ? a : (b | pipe)\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30cep0iivl50ftndd582kf5ef\"><code>b</code> 的值通过 \n<code>pipe</code>；\n<code>a</code> 的值\n<em>不会</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ja6rq281i9z2zdgt7hg0a61k\">如果你希望管道应用于三元表达式的结果，请将整个表达式用括号括起来。例如，</p>\n<code-example>\n(condition ? a : b) | pipe\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kjobrd86i3u2nc07kd5n2tcv\">一般来说，你应该始终使用括号来确保 Angular 按照你的意图评估表达式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6v5pc426ufvmvgd45f1jlb84s\">在 \n<live-example nodownload=\"\">\n 管道示例\n</live-example> 的 \"管道和优先级\" 部分更详细地探讨了这个问题。</p>\n<!-- links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Aug 14 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n-->\n<!-- links from this doc:\n - /api/common/SlicePipe\n - api/common#pipes\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/DatePipe#pre-defined-format-options\n - api/common/DecimalPipe\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgFor\n - api/common/PercentPipe\n - api/common/SlicePipe\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/core/Component\n - api/core/NgModule\n - api/core/Pipe\n - api/core/PipeTransform\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/animations/async\n - cli\n - cli/generate#pipe\n - guide/glossary#case-types\n - guide/glossary#change-detection\n - guide/glossary#component\n - guide/glossary#data-binding\n - guide/glossary#decorator--decoration\n - guide/glossary#observable\n - guide/glossary#pipe\n - guide/glossary#template\n - guide/glossary#template-expression\n - guide/glossary#typescript\n - guide/i18n-common-format-data-locale\n - guide/ngmodules\n - guide/observables#using-observables-to-pass-values\n - guide/pipes#caching-http-requests\n - guide/pipes#creating-pipes-for-custom-data-transformations\n - guide/pipes#detecting-changes-with-data-binding-in-pipes\n - guide/pipes#detecting-impure-changes-within-composite-objects\n - guide/pipes#detecting-pure-changes-to-primitives-and-object-references\n - guide/pipes#example-chaining-two-pipes-together\n - guide/pipes#example-formatting-a-date\n - guide/pipes#example-transforming-a-value-exponentially\n - guide/pipes#how-change-detection-works\n - guide/pipes#marking-a-class-as-a-pipe\n - guide/pipes#pipes-and-precedence\n - guide/pipes#prerequisites\n - guide/pipes#transforming-data-using-pipes\n - guide/pipes#transforming-data-with-parameters-and-chained-pipes\n - guide/pipes#unwrapping-data-from-an-observable\n - guide/pipes#using-a-pipe-in-a-template\n - guide/pipes#using-the-pipetransform-interface\n - guide/standalone-components\n - guide/styleguide#pipe-names\n - guide/understanding-communicating-with-http\n-->"}
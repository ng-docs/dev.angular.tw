{"id":"guide/user-input","title":"使用者輸入","contents":"<div class=\"content\">\n  <h1 id=\"user-input\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74vcszrjqu3um1yu0gg6h5ymk\">使用者輸入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#user-input\"><i class=\"material-icons\">link</i></a></h1>\n<div class=\"callout is-critical\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4r7c5x5y77wbuducanio6c3fk\">已標記為歸檔</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bzz73czstz9mjpiac5lfw1eo\">為確保你擁有最佳的體驗，本主題已標記為存檔，直到我們確定其清楚地傳達了最準確的訊息為止。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epi67vb4xhugb3yvrtyoio9zr\">同時，本主題可能會有所幫助：<a href=\"guide/event-binding\">事件繫結</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck2tsrjevyy0r4iofzx0sxxow\">如果你認為不應將此內容歸檔，請送出 <a href=\"https://github.com/angular/angular/issues/new?template=3-docs-bug.md\">GitHub 問題</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tst8iainuqjqbd6viak1u22u\">當用戶點選連結、按下按鈕或者輸入文字時，這些使用者動作都會產生 DOM 事件。本章解釋如何使用 Angular 事件繫結語法把這些事件繫結到事件處理器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eudb37b4r7dx2vkzc9wx59gbf\">執行<live-example></live-example></p>\n<h2 id=\"binding-to-user-input-events\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51dtzyo05uzwbsnimhitz2r56\">繫結到使用者輸入事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#binding-to-user-input-events\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xym225woxru0dtgiz3xjfw1m\">你可以使用 <a href=\"guide/event-binding\">Angular 事件繫結</a>機制來回應任何 <a href=\"https://developer.mozilla.org/docs/Web/Events\">DOM 事件</a>。\n許多 DOM 事件是由使用者輸入觸發的。繫結這些事件可以獲取使用者輸入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8j1q4jqmv9ix6eflhmugp8a9\">要繫結 DOM 事件，只要把 DOM 事件的名字包裹在圓括號中，然後用放在引號中的<a href=\"guide/template-statements\">樣板語句</a>對它賦值就可以了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tn1qjtmeyls2y5aq01ntv9i0\">下例展示了一個事件繫結，它實現了一個點選事件處理器：</p>\n<!-- vale Angular.Google_WordListWarnings = NO -->\n<code-example header=\"src/app/click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-button\">\n&lt;button type=\"button\" (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n\n</code-example>\n<!-- vale Angular.Google_WordListWarnings = YES -->\n<p><a id=\"click\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21zwys0apca23ubmj0r4rqe6b\">等號左邊的 <code>(click)</code> 表示把按鈕的點選事件作為<strong>繫結目標</strong>。等號右邊引號中的文字是<strong>樣板語句</strong>，透過呼叫元件的 <code>onClickMe</code> 方法來回應這個點選事件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aa696qhc8spbhzd153jrofcrd\">寫繫結時，需要知道樣板語句的<strong>執行上下文</strong>。出現在樣板語句中的每個識別符號都屬於特定的上下文物件。這個物件通常都是控制此樣板的 Angular 元件。上例中只顯示了一行 HTML，那段 HTML 片段屬於下面這個元件：</p>\n<code-example header=\"src/app/click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-click-me',\n  template: ` &lt;button type=\"button\" (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n    {{ clickMessage }}`,\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gk24v5lormpfqukxc2izrp0t\">當用戶點選按鈕時，Angular 呼叫 <code>ClickMeComponent</code> 的 <code>onClickMe</code> 方法。</p>\n<h2 id=\"get-user-input-from-the-event-object\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9rcaf8uuf6tv6y6zmo5pb3fn\">透過 $event 物件取得使用者輸入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#get-user-input-from-the-event-object\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38y92bsv4pzk8mqdfjsy4g7p3\">DOM 事件可以攜帶可能對元件有用的訊息。本節將展示如何繫結輸入框的 <code>keyup</code> 事件，在每個敲按鍵盤時獲取使用者輸入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvk36dikov689xc2h72bkyoa9\">下面的程式碼監聽 <code>keyup</code> 事件，並將整個事件載荷 （<code>$event</code>） 傳給元件的事件處理器。</p>\n<code-example header=\"src/app/keyup.components.ts (template v.1)\" path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-template\">\ntemplate: `\n  &lt;input (keyup)=\"onKey($event)\" /&gt;\n  &lt;p&gt;{{ values }}&lt;/p&gt;\n`,\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65egy8p1vgdepd7psrqp4wegc\">當用戶按下並釋放一個按鍵時，觸發 <code>keyup</code> 事件，Angular 在 <code>$event</code> 變數提供一個相應的 DOM 事件物件，上面的程式碼將它作為引數傳給 <code>onKey()</code> 方法。</p>\n<code-example header=\"src/app/keyup.components.ts (class v.1)\" path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-class-no-type\">\nexport class KeyUpComponent_v1 {\n  values = '';\n\n  onKey(event: any) { // without type info\n    this.values += event.target.value + ' | ';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nriyaqng3mchp9uno00jxo3n\"><code>$event</code> 物件的屬性取決於 DOM 事件的型別。比如，滑鼠事件與輸入框編輯事件包含了不同的訊息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"id45f027o7d9dzf3fzjj1vab\">所有<a href=\"https://developer.mozilla.org/docs/Web/API/Event\">標準 DOM 事件物件</a>都有一個 <code>target</code> 屬性，\n引用觸發該事件的元素。\n在本例中，<code>target</code> 是<a href=\"https://developer.mozilla.org/docs/Web/API/HTMLInputElement\"><code>&lt;input&gt;</code> 元素</a>，\n<code>event.target.value</code> 回傳該元素的當前內容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"46c4eq5u98jzz9yk789ko514d\">在元件的 <code>onKey()</code> 方法中，把輸入框的值和分隔符 （<code>|</code>） 追加元件的 <code>values</code> 屬性。\n使用<a href=\"guide/interpolation\">內嵌</a>來把存放累加結果的 <code>values</code> 屬性回顯到螢幕上。</p>\n<!-- vale Angular.Angular_Spelling = NO -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92k1lru38bcu2a4xfm16yfbdm\">假設使用者輸入字母『abc』，然後用退格鍵一個一個刪除它們。使用者介面將顯示：</p>\n<!-- vale Angular.Angular_Spelling = YES -->\n<code-example>\n\na | ab | abc | ab | a | |\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"key up 1\" src=\"generated/images/guide/user-input/keyup1-anim.gif\" width=\"176\" height=\"100\">\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4q2b2l3txaq7qdqgnjzkblolu\">或者，你可以用 <code>event.key</code> 替代 <code>event.target.value</code>，積累各個按鍵本身，這樣同樣的使用者輸入可以產生：</p>\n<code-example>\n\na | b | c | backspace | backspace | backspace |\n\n</code-example>\n</div>\n<p><a id=\"keyup1\"></a></p>\n<h3 id=\"type-the-event\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"399u5oaprcpflehwqmghd85xk\"><code>$event</code> 的型別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#type-the-event\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akamysdax4pe3xavy5nl0ct3y\">上例將 <code>$event</code> 轉換為 <code>any</code> 型別。這樣簡化了程式碼，但是有成本。沒有任何型別訊息能夠揭示事件物件的屬性，防止簡單的錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cvkpfnic867b0p1nlv8ki6yw\">下面的例子，使用了帶型別方法：</p>\n<code-example header=\"src/app/keyup.components.ts (class v.1 - typed )\" path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-class\">\nexport class KeyUpComponent_v1 {\n  values = '';\n\n\n  onKey(event: KeyboardEvent) {\n    // with type info\n    this.values += (event.target as HTMLInputElement).value + ' | ';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zo1y3oa3b36j4b2k2lqjatbl\"><code>$event</code> 的型別現在是 <code>KeyboardEvent</code>。不是所有的元素都有 <code>value</code> 屬性，所以它將 <code>target</code> 轉換為輸入元素。<code>OnKey</code> 方法更加清晰地表達了它期望從樣板得到什麼，以及它是如何解析事件的。</p>\n<h3 id=\"passing-event-is-a-dubious-practice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aogrfc41mq3iigfp0n6zq7pyi\">傳入 <code>$event</code> 是靠不住的做法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#passing-event-is-a-dubious-practice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5f4qepem8ijux0azctmn8o72\">型別化事件物件揭露了重要的一點，即反對把整個 DOM 事件傳到方法中，因為這樣元件會知道太多樣板的訊息。只有當它知道更多它本不應瞭解的 HTML 實現細節時，它才能提取訊息。這就違反了樣板（<em>使用者看到的</em>）和元件（<em>應用如何處理使用者資料</em>）之間的分離關注原則。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97rgjjv4grj73pfu347do6l8r\">下面將介紹如何用樣板引用變數來解決這個問題。</p>\n<h2 id=\"get-user-input-from-a-template-reference-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50alqsdtq4innxsaghefo33n1\">從一個樣板引用變數中獲得使用者輸入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#get-user-input-from-a-template-reference-variable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gzs7t2e4zog1lzqmp9pwk7t8\">還有另一種獲取使用者資料的方式：使用 Angular 的<a href=\"guide/template-reference-variables\"><strong>樣板引用變數</strong></a>。\n這些變數提供了從模組中直接訪問元素的能力。\n在識別符號前加上井號 （<code>#</code>） 就能宣告一個樣板引用變數。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1t24mwjfmxgn78kvyazt53xe2\">下面的例子使用了局部樣板變數，在一個超簡單的樣板中實現按鍵反饋功能。</p>\n<code-example header=\"src/app/loop-back.component.ts\" path=\"user-input/src/app/loop-back.component.ts\" region=\"loop-back-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-loop-back',\n  template: `\n    &lt;input #box (keyup)=\"(0)\" /&gt;\n    &lt;p&gt;{{ box.value }}&lt;/p&gt;\n  `,\n})\nexport class LoopbackComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emsnng7k9wdk60wvbdvqxm2at\">這個樣板引用變數名叫 <code>box</code>，在 <code>&lt;input&gt;</code> 元素宣告，它引用 <code>&lt;input&gt;</code> 元素本身。程式碼使用 <code>box</code> 獲得輸入元素的 <code>value</code> 值，並透過內嵌把它顯示在 <code>&lt;p&gt;</code> 標籤中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mafiaxh5hktxklfc0s39xy8t\">這個樣板完全是完全自包含的。它沒有繫結到元件，元件也沒做任何事情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d28nh2qf03uni4n6oee5jcozz\">在輸入框中輸入，就會看到每次按鍵時，顯示也隨之更新了。</p>\n<div class=\"lightbox\">\n<img alt=\"loop back\" src=\"generated/images/guide/user-input/keyup-loop-back-anim.gif\" width=\"204\" height=\"100\">\n</div>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"10mbik6etlnxt2dycwtyifgba\">除非你繫結一個事件，否則這將完全無法工作。</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r2cyv1scl9d2961k2vpnzja8\">只有在應用做了些非同步事件（如按鍵），Angular 才更新繫結和螢幕顯示。本例程式碼將 <code>keyup</code> 事件繫結到了數字 0，這可能是最短的樣板語句了。雖然這個語句不做什麼，但它滿足 Angular 的要求，所以 Angular 將更新螢幕。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tqz6axni4paiwewwc16qdfqw\">從樣板變數獲得輸入框比透過 <code>$event</code> 物件更加簡單。下面的程式碼重寫了之前 <code>keyup</code> 範例，它使用變數來獲得使用者輸入。</p>\n<code-example header=\"src/app/keyup.components.ts (v2)\" path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-2\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up2',\n  template: `\n    &lt;input #box (keyup)=\"onKey(box.value)\" /&gt;\n    &lt;p&gt;{{ values }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v2 {\n  values = '';\n  onKey(value: string) {\n    this.values += value + ' | ';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8gkfd30yc6f6a433x3ogac499\">這個方法最漂亮的一點是：元件程式碼從檢視中獲得了乾淨的資料值。再也不用瞭解 <code>$event</code> 變數及其結構了。</p>\n<p><a id=\"key-event\"></a></p>\n<h2 id=\"key-event-filtering-with-keyenter\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4e46jtl5wszl7i6igviza91d0\">按鍵事件過濾（透過 <code>key.enter</code>）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#key-event-filtering-with-keyenter\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atae04jcqfbt6ey7jlzdb2v9s\"><code>(keyup)</code> 事件處理器監聽<em>每一次按鍵</em>。有時只在意<em>回車</em>鍵，因為它標誌著使用者結束輸入。解決這個問題的一種方法是檢查每個 <code>$event.keyCode</code>，只有鍵值是<em>回車</em>鍵時才採取行動。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dw6tu7x12jy4vcy33buqjmh3x\">更簡單的方法是：繫結到 Angular 的 <code>keyup.enter</code> 模擬事件。然後，只有當用戶敲<em>回車</em>鍵時，Angular 才會呼叫事件處理器。</p>\n<code-example header=\"src/app/keyup.components.ts (v3)\" path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-3\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up3',\n  template: `\n    &lt;input #box (keyup.enter)=\"onEnter(box.value)\" /&gt;\n    &lt;p&gt;{{ value }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v3 {\n  value = '';\n  onEnter(value: string) {\n    this.value = value;\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"amw92mdguli4j0ilthl5rgfm4\">下面展示了它的工作原理。</p>\n<div class=\"lightbox\">\n<img alt=\"key up 3\" src=\"generated/images/guide/user-input/keyup3-anim.gif\" width=\"280\" height=\"100\">\n</div>\n<h2 id=\"on-blur\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bx0g93m8dq1o84i09dglael7l\">失焦事件 （blur）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#on-blur\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wcs27fv593vmidpojnmdudg1\">前上例中，如果使用者沒有先按回車鍵，而是移開了滑鼠，點選了頁面中其它地方，輸入框的當前值就會丟失。只有當用戶按下了回車鍵候，元件的 <code>value</code> 屬性才能更新。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16grntupzy9ds14zqq11mz92y\">下面透過同時監聽輸入框的回車鍵和 <code>blur</code> 事件來修正這個問題。</p>\n<code-example header=\"src/app/keyup.components.ts (v4)\" path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-4\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up4',\n  template: `\n    &lt;input #box (keyup.enter)=\"update(box.value)\" (blur)=\"update(box.value)\" /&gt;\n\n    &lt;p&gt;{{ value }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v4 {\n  value = '';\n  update(value: string) {\n    this.value = value;\n  }\n}\n\n</code-example>\n<h2 id=\"put-it-all-together\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6daprwlbdjpos0tgj452y7fny\">把它們放在一起<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#put-it-all-together\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8w2k5vlkgrb4c5hwwvhypobgl\">本章展示了一些事件繫結技術。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4il056oa5yf3ohcju0s12vdoe\">現在，在一個微型應用中一起使用它們，應用能顯示一個英雄清單，並把新的英雄加到清單中。使用者可以透過輸入英雄名和點選『新增』按鈕來新增英雄。</p>\n<div class=\"lightbox\">\n<img alt=\"Little Tour of Heroes\" src=\"generated/images/guide/user-input/little-tour-anim.gif\" width=\"472\" height=\"268\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3u4s6hsomu9wtq6jlem3ioieo\">下面就是『簡版英雄之旅』元件。</p>\n<code-example header=\"src/app/little-tour.component.ts\" path=\"user-input/src/app/little-tour.component.ts\" region=\"little-tour\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-little-tour',\n  template: `\n    &lt;input\n      #newHero\n      (keyup.enter)=\"addHero(newHero.value)\"\n      (blur)=\"addHero(newHero.value); newHero.value = ''\"\n    /&gt;\n\n    &lt;button type=\"button\" (click)=\"addHero(newHero.value)\"&gt;Add&lt;/button&gt;\n\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;{{ hero }}&lt;/li&gt;\n    &lt;/ul&gt;\n  `,\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>],\n})\nexport class LittleTourComponent {\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  addHero(newHero: string) {\n    if (newHero) {\n      this.heroes.push(newHero);\n    }\n  }\n}\n\n</code-example>\n<h3 id=\"observations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29i636kw0sxb4n621e4lpls85\">小結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#observations\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29i636kw0sxb4n621e4lpls85\">小結</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mktb08jmio5ec3zyz49hmhor\">使用樣板變數引用元素</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ihoprj2qmyg46x6i93idlaq4\"><code>newHero</code> 樣板變數引用了 \n<code>&lt;input&gt;</code> 元素。你可以從 \n<code>&lt;input&gt;</code> 元素的任何同級或子級引用 \n<code>newHero</code>。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c60ipg4t91oo87avk61y9cp8w\">傳遞值，而不是元素</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lfxjngox0ue8g44an2v5266z\">不要將 \n<code>newHero</code> 傳遞給元件的 \n<code>addHero</code> 方法，而是獲取輸入框的值並將 \n<em>它</em> 傳遞給 \n<code>addHero</code>。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3153hm4zoguxly4p4536vrri1\">保持樣板語句簡單</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8aeq0i6a1njkxha8uknmlbmi1\"><code>(blur)</code> 事件繫結了兩個 JavaScript 語句。第一個語句呼叫了 \n<code>addHero</code>。第二個語句 \n<code>newHero.value=''</code> 在新增新英雄到清單後清除輸入框。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"source-code\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1dasgglbcjy3vffxua3icpka\">原始碼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#source-code\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cakgychsup4rho3959ys7t4m\">下面是本章討論過的所有原始碼。</p>\n<code-tabs>\n    <code-pane header=\"click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-click-me',\n  template: ` &lt;button type=\"button\" (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n    {{ clickMessage }}`,\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"keyup.components.ts\" path=\"user-input/src/app/keyup.components.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up1',\n  template: `\n    &lt;input (keyup)=\"onKey($event)\" /&gt;\n    &lt;p&gt;{{ values }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v1 {\n  values = '';\n\n  /*\n  onKey(event: any) { // without type info\n    this.values += event.target.value + ' | ';\n  }\n  */\n\n  onKey(event: KeyboardEvent) {\n    // with type info\n    this.values += (event.target as HTMLInputElement).value + ' | ';\n  }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up2',\n  template: `\n    &lt;input #box (keyup)=\"onKey(box.value)\" /&gt;\n    &lt;p&gt;{{ values }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v2 {\n  values = '';\n  onKey(value: string) {\n    this.values += value + ' | ';\n  }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up3',\n  template: `\n    &lt;input #box (keyup.enter)=\"onEnter(box.value)\" /&gt;\n    &lt;p&gt;{{ value }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v3 {\n  value = '';\n  onEnter(value: string) {\n    this.value = value;\n  }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up4',\n  template: `\n    &lt;input #box (keyup.enter)=\"update(box.value)\" (blur)=\"update(box.value)\" /&gt;\n\n    &lt;p&gt;{{ value }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v4 {\n  value = '';\n  update(value: string) {\n    this.value = value;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"loop-back.component.ts\" path=\"user-input/src/app/loop-back.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-loop-back',\n  template: `\n    &lt;input #box (keyup)=\"(0)\" /&gt;\n    &lt;p&gt;{{ box.value }}&lt;/p&gt;\n  `,\n})\nexport class LoopbackComponent {}\n\n\n</code-pane>\n    <code-pane header=\"little-tour.component.ts\" path=\"user-input/src/app/little-tour.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-little-tour',\n  template: `\n    &lt;input\n      #newHero\n      (keyup.enter)=\"addHero(newHero.value)\"\n      (blur)=\"addHero(newHero.value); newHero.value = ''\"\n    /&gt;\n\n    &lt;button type=\"button\" (click)=\"addHero(newHero.value)\"&gt;Add&lt;/button&gt;\n\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;{{ hero }}&lt;/li&gt;\n    &lt;/ul&gt;\n  `,\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>],\n})\nexport class LittleTourComponent {\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  addHero(newHero: string) {\n    if (newHero) {\n      this.heroes.push(newHero);\n    }\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57g99bih1stz2c8aes25d42uz\">Angular 還支援被動事件監聽器。比如，你可以使用以下步驟使捲動事件變為被動監聽。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7tmd5i6acbneaajwvtwiwx3v4\">在 <code>src</code> 目錄下建立一個檔案 <code>zone-flags.ts</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8owsse9dtfnl1puiqjwsjikkq\">將以下行新增到此檔案中。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n(window as any)['__zone_symbol__PASSIVE_EVENTS'] = ['scroll'];\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abo31jo7ecgn6c85f2zbt4bjn\">在 <code>src/polyfills.ts</code> 檔案中，在匯入 zone.js 之前，先導入新創建的 <code>zone-flags</code>。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport './zone-flags';\nimport 'zone.js';  // Included with Angular CLI.\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c515g7kv5batniic7e1fulthy\">在這些步驟之後，如果你為 <code>scroll</code> 事件新增事件偵聽器，偵聽器就會是 <code>passive</code> 的。</p>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\">總結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#summary\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1veovwypwzz32smp4nmlctmd0\">你已經掌握了回應使用者輸入和操作的基礎技術。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79jedywpyajba2lvizh9bgc60\">這些技術對小規模示範很實用，但是在處理大量使用者輸入時，很容易變得累贅和笨拙。要在資料錄入欄位和模型屬性之間傳遞資料，雙向資料繫結是更加優雅和簡潔的方式。下一章 <code>表單</code> 解釋瞭如何用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 來進行雙向繫結。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-components\n - guide/example-apps-list\n - guide/forms\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgFor\n - api/core/Component\n - api/forms/NgModel\n - guide/event-binding\n - guide/forms-overview\n - guide/interpolation\n - guide/template-reference-variables\n - guide/template-statements\n - guide/user-input#binding-to-user-input-events\n - guide/user-input#get-user-input-from-a-template-reference-variable\n - guide/user-input#get-user-input-from-the-event-object\n - guide/user-input#key-event-filtering-with-keyenter\n - guide/user-input#observations\n - guide/user-input#on-blur\n - guide/user-input#passing-event-is-a-dubious-practice\n - guide/user-input#put-it-all-together\n - guide/user-input#source-code\n - guide/user-input#summary\n - guide/user-input#type-the-event\n - guide/user-input#user-input\n - https://developer.mozilla.org/docs/Web/API/Event\n - https://developer.mozilla.org/docs/Web/API/HTMLInputElement\n - https://developer.mozilla.org/docs/Web/Events\n - https://github.com/angular/angular/issues/new?template=3-docs-bug.md\n-->"}
{"id":"guide/user-input","title":"用户输入","contents":"<div class=\"content\">\n  <h1 id=\"user-input\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74vcszrjqu3um1yu0gg6h5ymk\">用户输入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#user-input\"><i class=\"material-icons\">link</i></a></h1>\n<div class=\"callout is-critical\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4r7c5x5y77wbuducanio6c3fk\">已标记为归档</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bzz73czstz9mjpiac5lfw1eo\">为确保你拥有最佳的体验，本主题已标记为存档，直到我们确定其清楚地传达了最准确的信息为止。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epi67vb4xhugb3yvrtyoio9zr\">同时，本主题可能会有所帮助：<a href=\"guide/event-binding\">事件绑定</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck2tsrjevyy0r4iofzx0sxxow\">如果你认为不应将此内容归档，请提交 <a href=\"https://github.com/angular/angular/issues/new?template=3-docs-bug.md\">GitHub 问题</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tst8iainuqjqbd6viak1u22u\">当用户点击链接、按下按钮或者输入文字时，这些用户动作都会产生 DOM 事件。本章解释如何使用 Angular 事件绑定语法把这些事件绑定到事件处理器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eudb37b4r7dx2vkzc9wx59gbf\">运行<live-example></live-example></p>\n<h2 id=\"binding-to-user-input-events\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51dtzyo05uzwbsnimhitz2r56\">绑定到用户输入事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#binding-to-user-input-events\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xym225woxru0dtgiz3xjfw1m\">你可以使用 <a href=\"guide/event-binding\">Angular 事件绑定</a>机制来响应任何 <a href=\"https://developer.mozilla.org/docs/Web/Events\">DOM 事件</a>。\n许多 DOM 事件是由用户输入触发的。绑定这些事件可以获取用户输入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8j1q4jqmv9ix6eflhmugp8a9\">要绑定 DOM 事件，只要把 DOM 事件的名字包裹在圆括号中，然后用放在引号中的<a href=\"guide/template-statements\">模板语句</a>对它赋值就可以了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tn1qjtmeyls2y5aq01ntv9i0\">下例展示了一个事件绑定，它实现了一个点击事件处理器：</p>\n<!-- vale Angular.Google_WordListWarnings = NO -->\n<code-example header=\"src/app/click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-button\">\n&lt;button type=\"button\" (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n\n</code-example>\n<!-- vale Angular.Google_WordListWarnings = YES -->\n<p><a id=\"click\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21zwys0apca23ubmj0r4rqe6b\">等号左边的 <code>(click)</code> 表示把按钮的点击事件作为<strong>绑定目标</strong>。等号右边引号中的文本是<strong>模板语句</strong>，通过调用组件的 <code>onClickMe</code> 方法来响应这个点击事件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aa696qhc8spbhzd153jrofcrd\">写绑定时，需要知道模板语句的<strong>执行上下文</strong>。出现在模板语句中的每个标识符都属于特定的上下文对象。这个对象通常都是控制此模板的 Angular 组件。上例中只显示了一行 HTML，那段 HTML 片段属于下面这个组件：</p>\n<code-example header=\"src/app/click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-click-me',\n  template: ` &lt;button type=\"button\" (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n    {{ clickMessage }}`,\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gk24v5lormpfqukxc2izrp0t\">当用户点击按钮时，Angular 调用 <code>ClickMeComponent</code> 的 <code>onClickMe</code> 方法。</p>\n<h2 id=\"get-user-input-from-the-event-object\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9rcaf8uuf6tv6y6zmo5pb3fn\">通过 $event 对象取得用户输入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#get-user-input-from-the-event-object\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38y92bsv4pzk8mqdfjsy4g7p3\">DOM 事件可以携带可能对组件有用的信息。本节将展示如何绑定输入框的 <code>keyup</code> 事件，在每个敲按键盘时获取用户输入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvk36dikov689xc2h72bkyoa9\">下面的代码监听 <code>keyup</code> 事件，并将整个事件载荷 （<code>$event</code>） 传给组件的事件处理器。</p>\n<code-example header=\"src/app/keyup.components.ts (template v.1)\" path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-template\">\ntemplate: `\n  &lt;input (keyup)=\"onKey($event)\" /&gt;\n  &lt;p&gt;{{ values }}&lt;/p&gt;\n`,\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65egy8p1vgdepd7psrqp4wegc\">当用户按下并释放一个按键时，触发 <code>keyup</code> 事件，Angular 在 <code>$event</code> 变量提供一个相应的 DOM 事件对象，上面的代码将它作为参数传给 <code>onKey()</code> 方法。</p>\n<code-example header=\"src/app/keyup.components.ts (class v.1)\" path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-class-no-type\">\nexport class KeyUpComponent_v1 {\n  values = '';\n\n  onKey(event: any) { // without type info\n    this.values += event.target.value + ' | ';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nriyaqng3mchp9uno00jxo3n\"><code>$event</code> 对象的属性取决于 DOM 事件的类型。比如，鼠标事件与输入框编辑事件包含了不同的信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"id45f027o7d9dzf3fzjj1vab\">所有<a href=\"https://developer.mozilla.org/docs/Web/API/Event\">标准 DOM 事件对象</a>都有一个 <code>target</code> 属性，\n引用触发该事件的元素。\n在本例中，<code>target</code> 是<a href=\"https://developer.mozilla.org/docs/Web/API/HTMLInputElement\"><code>&lt;input&gt;</code> 元素</a>，\n<code>event.target.value</code> 返回该元素的当前内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"46c4eq5u98jzz9yk789ko514d\">在组件的 <code>onKey()</code> 方法中，把输入框的值和分隔符 （<code>|</code>） 追加组件的 <code>values</code> 属性。\n使用<a href=\"guide/interpolation\">插值</a>来把存放累加结果的 <code>values</code> 属性回显到屏幕上。</p>\n<!-- vale Angular.Angular_Spelling = NO -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92k1lru38bcu2a4xfm16yfbdm\">假设用户输入字母“abc”，然后用退格键一个一个删除它们。用户界面将显示：</p>\n<!-- vale Angular.Angular_Spelling = YES -->\n<code-example>\n\na | ab | abc | ab | a | |\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"key up 1\" src=\"generated/images/guide/user-input/keyup1-anim.gif\" width=\"176\" height=\"100\">\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4q2b2l3txaq7qdqgnjzkblolu\">或者，你可以用 <code>event.key</code> 替代 <code>event.target.value</code>，积累各个按键本身，这样同样的用户输入可以产生：</p>\n<code-example>\n\na | b | c | backspace | backspace | backspace |\n\n</code-example>\n</div>\n<p><a id=\"keyup1\"></a></p>\n<h3 id=\"type-the-event\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"399u5oaprcpflehwqmghd85xk\"><code>$event</code> 的类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#type-the-event\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akamysdax4pe3xavy5nl0ct3y\">上例将 <code>$event</code> 转换为 <code>any</code> 类型。这样简化了代码，但是有成本。没有任何类型信息能够揭示事件对象的属性，防止简单的错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cvkpfnic867b0p1nlv8ki6yw\">下面的例子，使用了带类型方法：</p>\n<code-example header=\"src/app/keyup.components.ts (class v.1 - typed )\" path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-class\">\nexport class KeyUpComponent_v1 {\n  values = '';\n\n\n  onKey(event: KeyboardEvent) {\n    // with type info\n    this.values += (event.target as HTMLInputElement).value + ' | ';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zo1y3oa3b36j4b2k2lqjatbl\"><code>$event</code> 的类型现在是 <code>KeyboardEvent</code>。不是所有的元素都有 <code>value</code> 属性，所以它将 <code>target</code> 转换为输入元素。<code>OnKey</code> 方法更加清晰地表达了它期望从模板得到什么，以及它是如何解析事件的。</p>\n<h3 id=\"passing-event-is-a-dubious-practice\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aogrfc41mq3iigfp0n6zq7pyi\">传入 <code>$event</code> 是靠不住的做法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#passing-event-is-a-dubious-practice\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5f4qepem8ijux0azctmn8o72\">类型化事件对象揭露了重要的一点，即反对把整个 DOM 事件传到方法中，因为这样组件会知道太多模板的信息。只有当它知道更多它本不应了解的 HTML 实现细节时，它才能提取信息。这就违反了模板（<em>用户看到的</em>）和组件（<em>应用如何处理用户数据</em>）之间的分离关注原则。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97rgjjv4grj73pfu347do6l8r\">下面将介绍如何用模板引用变量来解决这个问题。</p>\n<h2 id=\"get-user-input-from-a-template-reference-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50alqsdtq4innxsaghefo33n1\">从一个模板引用变量中获得用户输入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#get-user-input-from-a-template-reference-variable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gzs7t2e4zog1lzqmp9pwk7t8\">还有另一种获取用户数据的方式：使用 Angular 的<a href=\"guide/template-reference-variables\"><strong>模板引用变量</strong></a>。\n这些变量提供了从模块中直接访问元素的能力。\n在标识符前加上井号 （<code>#</code>） 就能声明一个模板引用变量。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1t24mwjfmxgn78kvyazt53xe2\">下面的例子使用了局部模板变量，在一个超简单的模板中实现按键反馈功能。</p>\n<code-example header=\"src/app/loop-back.component.ts\" path=\"user-input/src/app/loop-back.component.ts\" region=\"loop-back-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-loop-back',\n  template: `\n    &lt;input #box (keyup)=\"(0)\" /&gt;\n    &lt;p&gt;{{ box.value }}&lt;/p&gt;\n  `,\n})\nexport class LoopbackComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emsnng7k9wdk60wvbdvqxm2at\">这个模板引用变量名叫 <code>box</code>，在 <code>&lt;input&gt;</code> 元素声明，它引用 <code>&lt;input&gt;</code> 元素本身。代码使用 <code>box</code> 获得输入元素的 <code>value</code> 值，并通过插值把它显示在 <code>&lt;p&gt;</code> 标签中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mafiaxh5hktxklfc0s39xy8t\">这个模板完全是完全自包含的。它没有绑定到组件，组件也没做任何事情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d28nh2qf03uni4n6oee5jcozz\">在输入框中输入，就会看到每次按键时，显示也随之更新了。</p>\n<div class=\"lightbox\">\n<img alt=\"loop back\" src=\"generated/images/guide/user-input/keyup-loop-back-anim.gif\" width=\"204\" height=\"100\">\n</div>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"10mbik6etlnxt2dycwtyifgba\">除非你绑定一个事件，否则这将完全无法工作。</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r2cyv1scl9d2961k2vpnzja8\">只有在应用做了些异步事件（如按键），Angular 才更新绑定和屏幕显示。本例代码将 <code>keyup</code> 事件绑定到了数字 0，这可能是最短的模板语句了。虽然这个语句不做什么，但它满足 Angular 的要求，所以 Angular 将更新屏幕。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tqz6axni4paiwewwc16qdfqw\">从模板变量获得输入框比通过 <code>$event</code> 对象更加简单。下面的代码重写了之前 <code>keyup</code> 范例，它使用变量来获得用户输入。</p>\n<code-example header=\"src/app/keyup.components.ts (v2)\" path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-2\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up2',\n  template: `\n    &lt;input #box (keyup)=\"onKey(box.value)\" /&gt;\n    &lt;p&gt;{{ values }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v2 {\n  values = '';\n  onKey(value: string) {\n    this.values += value + ' | ';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8gkfd30yc6f6a433x3ogac499\">这个方法最漂亮的一点是：组件代码从视图中获得了干净的数据值。再也不用了解 <code>$event</code> 变量及其结构了。</p>\n<p><a id=\"key-event\"></a></p>\n<h2 id=\"key-event-filtering-with-keyenter\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4e46jtl5wszl7i6igviza91d0\">按键事件过滤（通过 <code>key.enter</code>）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#key-event-filtering-with-keyenter\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atae04jcqfbt6ey7jlzdb2v9s\"><code>(keyup)</code> 事件处理器监听<em>每一次按键</em>。有时只在意<em>回车</em>键，因为它标志着用户结束输入。解决这个问题的一种方法是检查每个 <code>$event.keyCode</code>，只有键值是<em>回车</em>键时才采取行动。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dw6tu7x12jy4vcy33buqjmh3x\">更简单的方法是：绑定到 Angular 的 <code>keyup.enter</code> 模拟事件。然后，只有当用户敲<em>回车</em>键时，Angular 才会调用事件处理器。</p>\n<code-example header=\"src/app/keyup.components.ts (v3)\" path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-3\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up3',\n  template: `\n    &lt;input #box (keyup.enter)=\"onEnter(box.value)\" /&gt;\n    &lt;p&gt;{{ value }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v3 {\n  value = '';\n  onEnter(value: string) {\n    this.value = value;\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"amw92mdguli4j0ilthl5rgfm4\">下面展示了它的工作原理。</p>\n<div class=\"lightbox\">\n<img alt=\"key up 3\" src=\"generated/images/guide/user-input/keyup3-anim.gif\" width=\"280\" height=\"100\">\n</div>\n<h2 id=\"on-blur\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bx0g93m8dq1o84i09dglael7l\">失焦事件 （blur）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#on-blur\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wcs27fv593vmidpojnmdudg1\">前上例中，如果用户没有先按回车键，而是移开了鼠标，点击了页面中其它地方，输入框的当前值就会丢失。只有当用户按下了回车键候，组件的 <code>value</code> 属性才能更新。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16grntupzy9ds14zqq11mz92y\">下面通过同时监听输入框的回车键和 <code>blur</code> 事件来修正这个问题。</p>\n<code-example header=\"src/app/keyup.components.ts (v4)\" path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-4\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up4',\n  template: `\n    &lt;input #box (keyup.enter)=\"update(box.value)\" (blur)=\"update(box.value)\" /&gt;\n\n    &lt;p&gt;{{ value }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v4 {\n  value = '';\n  update(value: string) {\n    this.value = value;\n  }\n}\n\n</code-example>\n<h2 id=\"put-it-all-together\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6daprwlbdjpos0tgj452y7fny\">把它们放在一起<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#put-it-all-together\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8w2k5vlkgrb4c5hwwvhypobgl\">本章展示了一些事件绑定技术。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4il056oa5yf3ohcju0s12vdoe\">现在，在一个微型应用中一起使用它们，应用能显示一个英雄列表，并把新的英雄加到列表中。用户可以通过输入英雄名和点击“添加”按钮来添加英雄。</p>\n<div class=\"lightbox\">\n<img alt=\"Little Tour of Heroes\" src=\"generated/images/guide/user-input/little-tour-anim.gif\" width=\"472\" height=\"268\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3u4s6hsomu9wtq6jlem3ioieo\">下面就是“简版英雄之旅”组件。</p>\n<code-example header=\"src/app/little-tour.component.ts\" path=\"user-input/src/app/little-tour.component.ts\" region=\"little-tour\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-little-tour',\n  template: `\n    &lt;input\n      #newHero\n      (keyup.enter)=\"addHero(newHero.value)\"\n      (blur)=\"addHero(newHero.value); newHero.value = ''\"\n    /&gt;\n\n    &lt;button type=\"button\" (click)=\"addHero(newHero.value)\"&gt;Add&lt;/button&gt;\n\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;{{ hero }}&lt;/li&gt;\n    &lt;/ul&gt;\n  `,\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>],\n})\nexport class LittleTourComponent {\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  addHero(newHero: string) {\n    if (newHero) {\n      this.heroes.push(newHero);\n    }\n  }\n}\n\n</code-example>\n<h3 id=\"observations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29i636kw0sxb4n621e4lpls85\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#observations\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29i636kw0sxb4n621e4lpls85\">小结</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mktb08jmio5ec3zyz49hmhor\">使用模板变量引用元素</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ihoprj2qmyg46x6i93idlaq4\"><code>newHero</code> 模板变量引用了 \n<code>&lt;input&gt;</code> 元素。你可以从 \n<code>&lt;input&gt;</code> 元素的任何同级或子级引用 \n<code>newHero</code>。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c60ipg4t91oo87avk61y9cp8w\">传递值，而不是元素</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lfxjngox0ue8g44an2v5266z\">不要将 \n<code>newHero</code> 传递给组件的 \n<code>addHero</code> 方法，而是获取输入框的值并将 \n<em>它</em> 传递给 \n<code>addHero</code>。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3153hm4zoguxly4p4536vrri1\">保持模板语句简单</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8aeq0i6a1njkxha8uknmlbmi1\"><code>(blur)</code> 事件绑定了两个 JavaScript 语句。第一个语句调用了 \n<code>addHero</code>。第二个语句 \n<code>newHero.value=''</code> 在添加新英雄到列表后清除输入框。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"source-code\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1dasgglbcjy3vffxua3icpka\">源代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#source-code\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cakgychsup4rho3959ys7t4m\">下面是本章讨论过的所有源码。</p>\n<code-tabs>\n    <code-pane header=\"click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-click-me',\n  template: ` &lt;button type=\"button\" (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n    {{ clickMessage }}`,\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"keyup.components.ts\" path=\"user-input/src/app/keyup.components.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up1',\n  template: `\n    &lt;input (keyup)=\"onKey($event)\" /&gt;\n    &lt;p&gt;{{ values }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v1 {\n  values = '';\n\n  /*\n  onKey(event: any) { // without type info\n    this.values += event.target.value + ' | ';\n  }\n  */\n\n  onKey(event: KeyboardEvent) {\n    // with type info\n    this.values += (event.target as HTMLInputElement).value + ' | ';\n  }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up2',\n  template: `\n    &lt;input #box (keyup)=\"onKey(box.value)\" /&gt;\n    &lt;p&gt;{{ values }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v2 {\n  values = '';\n  onKey(value: string) {\n    this.values += value + ' | ';\n  }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up3',\n  template: `\n    &lt;input #box (keyup.enter)=\"onEnter(box.value)\" /&gt;\n    &lt;p&gt;{{ value }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v3 {\n  value = '';\n  onEnter(value: string) {\n    this.value = value;\n  }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-key-up4',\n  template: `\n    &lt;input #box (keyup.enter)=\"update(box.value)\" (blur)=\"update(box.value)\" /&gt;\n\n    &lt;p&gt;{{ value }}&lt;/p&gt;\n  `,\n})\nexport class KeyUpComponent_v4 {\n  value = '';\n  update(value: string) {\n    this.value = value;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"loop-back.component.ts\" path=\"user-input/src/app/loop-back.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-loop-back',\n  template: `\n    &lt;input #box (keyup)=\"(0)\" /&gt;\n    &lt;p&gt;{{ box.value }}&lt;/p&gt;\n  `,\n})\nexport class LoopbackComponent {}\n\n\n</code-pane>\n    <code-pane header=\"little-tour.component.ts\" path=\"user-input/src/app/little-tour.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-little-tour',\n  template: `\n    &lt;input\n      #newHero\n      (keyup.enter)=\"addHero(newHero.value)\"\n      (blur)=\"addHero(newHero.value); newHero.value = ''\"\n    /&gt;\n\n    &lt;button type=\"button\" (click)=\"addHero(newHero.value)\"&gt;Add&lt;/button&gt;\n\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;{{ hero }}&lt;/li&gt;\n    &lt;/ul&gt;\n  `,\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>],\n})\nexport class LittleTourComponent {\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  addHero(newHero: string) {\n    if (newHero) {\n      this.heroes.push(newHero);\n    }\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57g99bih1stz2c8aes25d42uz\">Angular 还支持被动事件监听器。比如，你可以使用以下步骤使滚动事件变为被动监听。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7tmd5i6acbneaajwvtwiwx3v4\">在 <code>src</code> 目录下创建一个文件 <code>zone-flags.ts</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8owsse9dtfnl1puiqjwsjikkq\">将以下行添加到此文件中。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n(window as any)['__zone_symbol__PASSIVE_EVENTS'] = ['scroll'];\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abo31jo7ecgn6c85f2zbt4bjn\">在 <code>src/polyfills.ts</code> 文件中，在导入 zone.js 之前，先导入新创建的 <code>zone-flags</code>。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport './zone-flags';\nimport 'zone.js';  // Included with Angular CLI.\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c515g7kv5batniic7e1fulthy\">在这些步骤之后，如果你为 <code>scroll</code> 事件添加事件侦听器，侦听器就会是 <code>passive</code> 的。</p>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\">总结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#summary\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1veovwypwzz32smp4nmlctmd0\">你已经掌握了响应用户输入和操作的基础技术。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79jedywpyajba2lvizh9bgc60\">这些技术对小规模演示很实用，但是在处理大量用户输入时，很容易变得累赘和笨拙。要在数据录入字段和模型属性之间传递数据，双向数据绑定是更加优雅和简洁的方式。下一章 <code>表单</code> 解释了如何用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 来进行双向绑定。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-components\n - guide/example-apps-list\n - guide/forms\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgFor\n - api/core/Component\n - api/forms/NgModel\n - guide/event-binding\n - guide/forms-overview\n - guide/interpolation\n - guide/template-reference-variables\n - guide/template-statements\n - guide/user-input#binding-to-user-input-events\n - guide/user-input#get-user-input-from-a-template-reference-variable\n - guide/user-input#get-user-input-from-the-event-object\n - guide/user-input#key-event-filtering-with-keyenter\n - guide/user-input#observations\n - guide/user-input#on-blur\n - guide/user-input#passing-event-is-a-dubious-practice\n - guide/user-input#put-it-all-together\n - guide/user-input#source-code\n - guide/user-input#summary\n - guide/user-input#type-the-event\n - guide/user-input#user-input\n - https://developer.mozilla.org/docs/Web/API/Event\n - https://developer.mozilla.org/docs/Web/API/HTMLInputElement\n - https://developer.mozilla.org/docs/Web/Events\n - https://github.com/angular/angular/issues/new?template=3-docs-bug.md\n-->"}
{"id":"guide/lazy-loading-ngmodules","title":"惰性加载特性模块","contents":"<div class=\"content\">\n  <h1 id=\"lazy-loading-feature-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9s0kcs00fdk5zlnqa607ov9z\">惰性加载特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-feature-modules\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d11d3joik5ypqehhfjwkbvxc7\">默认情况下，NgModule 都是急性加载的。意思是它会在应用加载时尽快加载，所有模块都是如此，无论是否立即要用。对于带有很多路由的大型应用，考虑使用惰性加载 —— 一种按需加载 NgModule 的模式。惰性加载可以减小初始包的尺寸，从而减少加载时间。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6tl0hs4wht11kg4a4n7hphus\">如果需要本页描述的具有两个惰性加载模块的范例应用，参阅<live-example></live-example>。</p>\n</div>\n<p><a id=\"lazy-loading\"></a></p>\n<h2 id=\"lazy-loading-basics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zx53gxb57cnbbnapcf001a3t\">惰性加载入门<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-basics\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3v9lju6warwn50i0kgpgkdrll\">本节会介绍配置惰性加载路由的基本过程。\n想要一个分步的范例，参阅本页的<a href=\"guide/lazy-loading-ngmodules#step-by-step\">分步设置</a>部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83w92v4nz4iema8cw27qmy53p\">要惰性加载 Angular 模块，请在 <code>AppRoutingModule</code> <code>routes</code> 中使用 <code>loadChildren</code> 代替 <code>component</code> 进行配置，代码如下。</p>\n<code-example header=\"AppRoutingModule (excerpt)\">\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'items',\n    loadChildren: () =&gt; import('./items/items.module').then(m =&gt; m.ItemsModule)\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b66w8x8ylq02faxtqowo7sdvd\">在惰性加载模块的路由模块中，添加一个指向该组件的路由。</p>\n<code-example header=\"Routing module for lazy loaded module (excerpt)\">\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: ItemsComponent\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9329nt03yuevmxyf8ehq9dsbb\">还要确保从 <code>AppModule</code> 中移除了 <code>ItemsModule</code>。想要一个关于惰性加载模块的分步操作指南，请继续查看本页的后续章节。</p>\n<p><a id=\"step-by-step\"></a></p>\n<h2 id=\"step-by-step-setup\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eb4aukeptwb40zedr0orfluex\">分步设置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#step-by-step-setup\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30lb3wvr5pmvyired5kfe45oo\">建立惰性加载的特性模块需要两个主要步骤：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpkhqyw70n5udlid8659azhz1\">使用 <code>--route</code> 标志，用 Angular CLI 创建特性模块。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5orue9zcrifdsfac6knx146lx\">配置相关路由。</li>\n</ol>\n<h3 id=\"set-up-an-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"971bddnimrptte0jo1mhnn5of\">建立应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-an-application\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rf14q0qglbvooc9d50wzdlu0\">如果你还没有应用，可以遵循下面的步骤使用 Angular CLI 创建一个。如果已经有了，可以直接跳到 <a href=\"guide/lazy-loading-ngmodules#config-routes\">配置路由</a>部分。</p>\n<!-- vale Angular.Google_WordListWarnings = NO -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1idnxu3l5swgn9ebei3h4bey0\">输入下列命令，其中的 <code>customer-app</code> 表示你的应用名称。</p>\n<!-- vale Angular.Google_WordListWarnings = YES -->\n<code-example format=\"shell\" language=\"shell\">\n\nng new customer-app --no-standalone\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61ylya06mqnunm96kmbd6j1sd\">这将创建一个名为 \n<code>customer-app</code> 的应用程序，其中包含一个名为 \n<code>app-routing.module.ts</code> 的文件。 这是设置特性模块延迟加载所需的文件之一。 通过发出命令 \n<code>cd customer-app</code> 进入项目。</p>\n<h3 id=\"create-a-feature-module-with-routing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehvdac0f6uf3osqkewp527vxz\">创建一个带路由的特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qix7hlia501518qpn9cov4x5\">接下来，你将需要一个包含路由的目标组件的特性模块。要创建它，在命令行工具中输入如下命令，其中 <code>customers</code> 是特性模块的名称。加载 <code>customers</code> 特性模块的路径也是 <code>customers</code>，因为它是通过 <code>--route</code> 选项指定的：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module customers --route customers --module app.module\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"244ux5u3k39tvyohe8yjjo750\">这将创建一个 <code>customers</code> 目录，在其 <code>customers.module.ts</code> 文件中定义了新的可惰性加载模块 <code>CustomersModule</code>。该命令会自动在新特性模块中声明 <code>CustomersComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lhcbwzpyrex5az8thw682pao\">因为这个新模块想要惰性加载，所以该命令<strong>不会</strong>在应用的根模块 <code>app.module.ts</code> 中添加对新特性模块的引用。相反，它将声明的路由 <code>customers</code> 添加到以 <code>--module</code> 选项指定的模块中声明的 <code>routes</code> 数组中。</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" region=\"routes-customers\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: () =&gt; import('./customers/customers.module').then(m =&gt; m.CustomersModule)\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qzx7uyyhctfqr1td8p8pijm4\">注意，惰性加载语法使用 <code>loadChildren</code>，其后是一个使用浏览器内置的 <code>import('...')</code> 语法进行动态导入的函数。其导入路径是到当前模块的相对路径。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hkdw2kjmei7poo43bduc9yhb\">基于字符串的惰性加载</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"506sebjycyyhb8z1v24eof9to\">在 Angular 版本 8 中，\n<code>loadChildren</code> 路由规范的字符串语法 \n<a href=\"guide/deprecations#loadChildren\">已废弃</a>，推荐使用 \n<code>import()</code> 语法。 你可以选择使用基于字符串的延迟加载（\n<code>loadChildren: './path/to/module#Module'</code>），方法是在你的 \n<code>tsconfig</code> 文件中包含延迟加载路由，这会将延迟加载的文件包含在编译中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tdn0uidf6b5j73muoyr6qp2n\">默认情况下，会用 Angular CLI 生成项目，这些项目将更严格地包含旨在与 <code>import()</code> 语法一起使用的文件。</p>\n</div>\n<h3 id=\"add-another-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3p0a47xmo4c7t4gfxvxsn2yh\">添加另一个特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#add-another-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15k2dnnwdm4oa33m1tm7hyfjv\">使用同样的命令创建第二个带路由的惰性加载特性模块及其桩组件。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module orders --route orders --module app.module\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24zfl47u17p5ah490y1rsmbrp\">这将创建一个名为 <code>orders</code> 的新目录，其中包含 <code>OrdersModule</code> 和 <code>OrdersRoutingModule</code> 以及新的 <code>OrdersComponent</code> 源文件。使用 <code>--route</code> 选项指定的 <code>orders</code> 路由，用惰性加载语法添加到了 <code>app-routing.module.ts</code> 文件内的 <code>routes</code> 数组中。</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" region=\"routes-customers-orders\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: () =&gt; import('./customers/customers.module').then(m =&gt; m.CustomersModule)\n  },\n  {\n    path: 'orders',\n    loadChildren: () =&gt; import('./orders/orders.module').then(m =&gt; m.OrdersModule)\n  }\n];\n\n</code-example>\n<h3 id=\"set-up-the-ui\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3lnczifhdupgnvrqxix5b2qzr\">建立 UI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-the-ui\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxubm2xqmimv28y9jl2kiipen\">虽然你也可以在地址栏中输入 URL，不过导航 UI 会更好用，也更常见。把 <code>app.component.html</code> 中的占位脚本替换成一个自定义的导航，以便你在浏览器中能在模块之间导航。</p>\n<code-example header=\"src/app/app.component.html\" path=\"lazy-loading-ngmodules/src/app/app.component.html\" region=\"app-component-template\">\n&lt;h1&gt;\n  {{title}}\n&lt;/h1&gt;\n\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/customers\"&gt;Customers&lt;/button&gt;\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/orders\"&gt;Orders&lt;/button&gt;\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"\"&gt;Home&lt;/button&gt;\n\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"baj9mak95escy76h36jqzpo3i\">要想在浏览器中看到你的应用，就在命令行工具窗口中输入下列命令：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng serve\n\n</code-example>\n<!-- vale Angular.Google_WordListWarnings = NO -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5sadbzo9xxyvcjskgiu23xl8\">然后，跳转到 <code>localhost:4200</code>，这时你应该看到 \"customer-app\" 和三个按钮。</p>\n<!-- vale Angular.Google_WordListWarnings = YES -->\n<div class=\"lightbox\">\n<img alt=\"three buttons in the browser\" src=\"generated/images/guide/lazy-loading-ngmodules/three-buttons.png\" width=\"300\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dj43g3lkc4iqq2d7pxp8tlkar\">这些按钮生效了，因为 Angular CLI 会自动将特性模块的路由添加到 <code>app-routing.module.ts</code> 中的 <code>routes</code> 数组中。</p>\n<p><a id=\"config-routes\"></a></p>\n<h3 id=\"imports-and-route-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z2dtsbpps9e5rbc4gimhro0\">导入与路由配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#imports-and-route-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rjxxley6kk9ybgfmg7cjdkkv\">Angular CLI 会将每个特性模块自动添加到应用级的路由映射表中。通过添加默认路由来最终完成这些步骤。在 <code>app-routing.module.ts</code> 文件中，使用如下命令更新 <code>routes</code> 数组：</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" id=\"app-routing.module.ts\" region=\"const-routes\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: () =&gt; import('./customers/customers.module').then(m =&gt; m.CustomersModule)\n  },\n  {\n    path: 'orders',\n    loadChildren: () =&gt; import('./orders/orders.module').then(m =&gt; m.OrdersModule)\n  },\n  {\n    path: '',\n    redirectTo: '',\n    pathMatch: 'full'\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37e125lnn41dnyzo3sg69faza\">前两个路径是到 <code>CustomersModule</code> 和 <code>OrdersModule</code> 的路由。最后一个条目则定义了默认路由。空路径匹配所有不匹配先前路径的内容。</p>\n<h3 id=\"inside-the-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ber0iikaop1gq5iqtb21ntl6f\">特性模块内部<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#inside-the-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ns8qfwyu3ytni0uhlyqw7fv3\">接下来，仔细看看 <code>customers.module.ts</code> 文件。如果你使用的是 Angular CLI，并按照此页面中的步骤进行操作，则无需在此处执行任何操作。</p>\n<code-example header=\"src/app/customers/customers.module.ts\" path=\"lazy-loading-ngmodules/src/app/customers/customers.module.ts\" id=\"customers.module.ts\" region=\"customers-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { CustomersRoutingModule } from './customers-routing.module';\nimport { CustomersComponent } from './customers.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    CustomersRoutingModule\n  ],\n  declarations: [CustomersComponent]\n})\nexport class CustomersModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9cm1ncsxyb0dkkjzzn4vj5a1\"><code>customers.module.ts</code> 文件导入了 <code>customers-routing.module.ts</code> 和 <code>customers.component.ts</code> 文件。<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 数组中列出了 <code>CustomersRoutingModule</code>，让 <code>CustomersModule</code> 可以访问它自己的路由模块。<code>CustomersComponent</code> 位于 <code>declarations</code> 数组中，这意味着 <code>CustomersComponent</code> 属于 <code>CustomersModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6h02jive3r53katbz65e3assv\">然后，<code>app-routing.module.ts</code> 会使用 JavaScript 的动态导入功能来导入特性模块 <code>customers.module.ts</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgfard5vbhsxlsxky0jpaml9o\">专属于特性模块的路由定义文件 <code>customers-routing.module.ts</code> 将导入在 <code>customers.component.ts</code> 文件中定义的自有特性组件，以及其它 JavaScript 导入语句。然后将空路径映射到 <code>CustomersComponent</code>。</p>\n<code-example header=\"src/app/customers/customers-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/customers/customers-routing.module.ts\" id=\"customers-routing.module.ts\" region=\"customers-routing-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { CustomersComponent } from './customers.component';\n\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CustomersComponent\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [RouterModule.forChild(routes)],\n  exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]\n})\nexport class CustomersRoutingModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3t1uzeqpbv380siullimamp0b\">这里的 <code>path</code> 设置为空字符串，因为 <code>AppRoutingModule</code> 中的路径已经设置为 <code>customers</code>，因此，<code>CustomersRoutingModule</code> 中的此路由已经位于 <code>customers</code> 这个上下文中。此路由模块中的每个路由都是其子路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lhzv57pviu9ap5gu8vez00ba\">另一个特性模块中路由模块的配置也类似。</p>\n<code-example header=\"src/app/orders/orders-routing.module.ts (excerpt)\" path=\"lazy-loading-ngmodules/src/app/orders/orders-routing.module.ts\" id=\"orders-routing.module.ts\" region=\"orders-routing-module-detail\">\nimport { OrdersComponent } from './orders.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: OrdersComponent\n  }\n];\n\n</code-example>\n<h3 id=\"verify-lazy-loading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42ioxkbuxsue4tsjucg8cy2y2\">确认它工作正常<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#verify-lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cv3n61nx3ps82cmjqsu8g1qhi\">你可以使用 Chrome 开发者工具来验证一下这些模块真的是惰性加载的。在 Chrome 中，按 <code>Cmd+Option+i</code>（Mac）或 <code>Ctrl+Shift+j</code>（PC），并选中 <code>Network</code> 页标签。</p>\n<div class=\"lightbox\">\n<img alt=\"lazy loaded modules diagram\" src=\"generated/images/guide/lazy-loading-ngmodules/network-tab.png\" width=\"600\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dx6kxr5gja1r3is3akgfj616d\">点击 Orders 或 Customers 按钮。如果你看到某个 chunk 文件出现了，就表示一切就绪，特性模块被惰性加载成功了。Orders 和 Customers 都应该出现一次 chunk，并且它们各自只应该出现一次。</p>\n<div class=\"lightbox\">\n<img alt=\"lazy loaded modules diagram\" src=\"generated/images/guide/lazy-loading-ngmodules/chunk-arrow.png\" width=\"600\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"720x7no2s4f0511umb4w8c6el\">要想再次查看它或测试修改后的行为，只要点击 Network 页左上放的 <code>清除</code> 图标即可。</p>\n<div class=\"lightbox\">\n<img alt=\"lazy loaded modules diagram\" src=\"generated/images/guide/lazy-loading-ngmodules/clear.gif\" width=\"200\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5j4asbgfk029mhsnacxvi975c\">然后，使用 <code>Cmd+r</code>（Mac）或 <code>Ctrl+r</code>（PC）重新加载页面。</p>\n<h2 id=\"forroot-and-forchild\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7g1lw84rxzgxzbl2u8g3cvqb5\"><code>forRoot()</code> 与 <code>forChild()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#forroot-and-forchild\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wqyajl9v7u3zmnl2kupxlmen\">你可能已经注意到了，Angular CLI 会把 <code>RouterModule.forRoot(routes)</code> 添加到 <code>AppRoutingModule</code> 的 <code>imports</code> 数组中。这会让 Angular 知道 <code>AppRoutingModule</code> 是一个路由模块，而 <code>forRoot()</code> 表示这是一个根路由模块。它会配置你传入的所有路由、让你能访问路由器指令并注册 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>。<code>forRoot()</code> 在应用中只应该使用一次，也就是这个 <code>AppRoutingModule</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1figtxmq2alarz8dmqp370yrr\">Angular CLI 还会把 <code>RouterModule.forChild(routes)</code> 添加到各个特性模块中。这种方式下 Angular 就会知道这个路由列表只负责提供额外的路由并且其设计意图是作为特性模块使用。你可以在多个模块中使用 <code>forChild()</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"309zyexfh94le482k7pl48y0s\"><code>forRoot()</code> 方法为路由器管理<em>全局性的</em>注入器配置。<code>forChild()</code> 方法中没有注入器配置，只有像 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 和 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 这样的指令。欲知详情，参阅<a href=\"guide/singleton-services\">单例服务</a>章的 <a href=\"guide/singleton-services#forRoot\"><code>forRoot()</code> 模式</a>小节。</p>\n<p><a id=\"preloading\"></a></p>\n<h2 id=\"preloading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49xqnvehgda1bjiqtnuitjwyb\">预加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6m5gim22wvmed484cpogscad4\">预加载通过在后台加载部分应用来改进用户体验。你可以预加载模块、独立组件或组件数据。</p>\n<h3 id=\"preloading-modules-and-standalone-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bq5csyg382f384lwcjjwpw7j0\">预加载模块和预加载独立组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading-modules-and-standalone-components\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jgqr9lb5u7i4jy0q0899b93b\">预加载模块和预加载独立组件通过在后台加载部分应用来改善用户体验。这样一来，用户在激活路由时就无需等待下载这些元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qfixjaq4mkbpccv4l5pvdjc3\">要启用所有惰性加载模块和独立组件的预加载，请从 Angular <code>router</code> 导入 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 令牌。</p>\n<h3 id=\"module-based-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dfs1h700gy2y2brorwp6bqlo\">基于模块的应用程序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#module-based-application\"><i class=\"material-icons\">link</i></a></h3>\n<code-example header=\"AppRoutingModule (excerpt)\">\n\nimport { <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a> } from '@angular/router';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qkl2en7i37n3t1i2v68l3q62\">还是在 <code>AppRoutingModule</code> 中，通过 <code>forRoot()</code> 指定你的预加载策略。</p>\n<code-example header=\"AppRoutingModule (excerpt)\">\n\nRouterModule.forRoot(\n  appRoutes,\n  {\n    preloadingStrategy: <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>\n  }\n)\n\n</code-example>\n<h3 id=\"standalone-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dntquglskc2umxghz646iidxh\">独立应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#standalone-application\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gyqovyuayn0cx8t3t3fyg5vq\">对于独立应用程序，请通过将 <code><a href=\"api/router/withPreloading\" class=\"code-anchor\">withPreloading</a></code> 添加到 <code>app.config.ts</code> 文件中的 <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> 的<code><a href=\"api/router/RouterFeatures\" class=\"code-anchor\">RouterFeatures</a></code> 参数中来配置预加载策略。</p>\n<code-example header=\"`app.config.ts`\">\n\nimport { <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> } from '@angular/core';\nimport {\n  <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>,\n  <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>\n  <a href=\"api/router/withPreloading\" class=\"code-anchor\">withPreloading</a>,\n} from '@angular/router';\n\nimport { routes } from './app.routes';\n\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [\n    <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(\n      routes,\n      <a href=\"api/router/withPreloading\" class=\"code-anchor\">withPreloading</a>(<a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>)\n    ),\n  ],\n};\n\n</code-example>\n<h3 id=\"preloading-component-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3blkbv0kufkmqd8vfrv3tb2r3\">预加载组件数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading-component-data\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jy2k6e8xd5lm11ptf4y07fkc\">要预加载组件数据，可以用 <code>resolver</code> 守卫。解析器通过阻止页面加载来改进用户体验，直到显示页面时的全部必要数据都可用。</p>\n<h4 id=\"resolvers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hfti5ve73iuleb2yja24s3tt\">解析器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#resolvers\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atefy34xsv42eg5n4llgjm75c\">创建一个解析器服务。通过 Angular CLI，创建服务的命令如下：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service &lt;service-name&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2g241oo8spvxzfxw2her6udtn\">在新创建的服务中，实现由 <code>@angular/router</code> 包提供的 <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 接口：</p>\n<code-example header=\"Resolver service (excerpt)\">\n\nimport { <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a> } from '@angular/router';\n\n…\n\n/* An interface that represents your data <a href=\"api/core/model\" class=\"code-anchor\">model</a> */\nexport interface Crisis {\n  id: number;\n  name: string;\n}\n\nexport class CrisisDetailResolverService implements <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>&lt;Crisis&gt; {\n  resolve(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): Observable&lt;Crisis&gt; {\n    // your logic goes here\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cct99emsq6pux8m6sbywy8eq\">把这个解析器导入此模块的路由模块。</p>\n<code-example header=\"Feature module's routing module (excerpt)\">\n\nimport { CrisisDetailResolverService } from './crisis-detail-resolver.service';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1hvnzaffz5x7qtaq5ptfmozn9\">在组件的 <code>route</code> 配置中添加一个 <code>resolve</code> 对象。</p>\n<code-example header=\"Feature module's routing module (excerpt)\">\n\n{\n  path: '/your-path',\n  component: YourComponent,\n  resolve: {\n    crisis: CrisisDetailResolverService\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qz62fsrubqjpta8lo69ymoq9\">在此组件的构造函数中，注入一个 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 实例，它可以表示当前路由。</p>\n<code-example header=\"Component's constructor (excerpt)\">\n\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nclass YourComponent {\n  constructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4rn1yjdg1ctbekpnb24frtedp\">使用注入进来的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 类实例来访问与指定路由关联的 <code>data</code> 值。</p>\n<code-example header=\"Component's ngOnInit lifecycle hook (excerpt)\">\n\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nclass YourComponent {\n  constructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n\n  ngOnInit() {\n    this.route.data\n      .subscribe(data =&gt; {\n        const crisis: Crisis = data.crisis;\n        // …\n      });\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkefuw9twsm9q789g1pm9j3kv\">关于工作范例的更多信息，请参阅<a href=\"guide/router-tutorial-toh#preloading-background-loading-of-feature-areas\">路由教程的预加载部分</a>。</p>\n<h2 id=\"troubleshooting-lazy-loading-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2j8jek9m4fwmfpbms62uln1em\">对惰性加载模块进行故障排除<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#troubleshooting-lazy-loading-modules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mlljxr2gqiohh8p6z661wvtb\">惰性加载模块时常见的错误之一，就是在应用程序中的多个位置导入通用模块。可以先用 Angular CLI 生成模块并包括 <code>--route route-name</code> 参数，来测试这种情况，其中 <code>route-name</code> 是模块的名称。接下来，创建不带 <code>--route</code> 参数的模块。如果你调用 <code>ng generate module</code> 时带上了 <code>--route</code> 参数，就会返回一个错误，否则它便可以正确运行，这样一来你就可能会在多个位置导入相同的模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e6fple13ritgbdilizaiw57p\">请记住，许多常见的 Angular 模块都应该导入应用的基础模块中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55y9f4wf4n0oq09k0dql80a5i\">有关 Angular 模块的更多信息，请参见 <a href=\"guide/ngmodules\">NgModules</a>。</p>\n<h2 id=\"more-on-ngmodules-and-routing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er6oquwap1jwfax9ckc5fo67u\">更多关于 NgModule 和路由的知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oolgylns9kaynftarwog49tq\">你可能还对下列内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pta30xdcuckc5c48lnuv3xhl\"><a href=\"guide/router\">路由与导航</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0n6et5hry7sni1qgcd1web7k\"><a href=\"guide/providers\">服务提供者</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bot5kxk6jyhqjbnbem8f1gew\"><a href=\"guide/module-types\">特性模块的分类</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chjgeftw3reio8n02jm4ak1fu\"><a href=\"https://web.dev/route-level-code-splitting-in-angular/\">Angular 中的路由级代码拆分</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bebrrmoaeufu90wdrjxqsz3oq\"><a href=\"https://web.dev/route-preloading-in-angular/\">Angular 中的路由预加载策略</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Tue Oct 24 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/feature-modules\n - guide/module-types\n - guide/providers\n - guide/router\n - guide/singleton-services\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/core/ApplicationConfig\n - api/core/Component\n - api/core/NgModule\n - api/core/model\n - api/router/ActivatedRoute\n - api/router/ActivatedRouteSnapshot\n - api/router/PreloadAllModules\n - api/router/Resolve\n - api/router/Router\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterStateSnapshot\n - api/router/Routes\n - api/router/provideRouter\n - api/router/withPreloading\n - guide/deprecations#loadChildren\n - guide/lazy-loading-ngmodules#add-another-feature-module\n - guide/lazy-loading-ngmodules#config-routes\n - guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\n - guide/lazy-loading-ngmodules#forroot-and-forchild\n - guide/lazy-loading-ngmodules#imports-and-route-configuration\n - guide/lazy-loading-ngmodules#inside-the-feature-module\n - guide/lazy-loading-ngmodules#lazy-loading-basics\n - guide/lazy-loading-ngmodules#lazy-loading-feature-modules\n - guide/lazy-loading-ngmodules#module-based-application\n - guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\n - guide/lazy-loading-ngmodules#preloading\n - guide/lazy-loading-ngmodules#preloading-component-data\n - guide/lazy-loading-ngmodules#preloading-modules-and-standalone-components\n - guide/lazy-loading-ngmodules#resolvers\n - guide/lazy-loading-ngmodules#set-up-an-application\n - guide/lazy-loading-ngmodules#set-up-the-ui\n - guide/lazy-loading-ngmodules#standalone-application\n - guide/lazy-loading-ngmodules#step-by-step\n - guide/lazy-loading-ngmodules#step-by-step-setup\n - guide/lazy-loading-ngmodules#troubleshooting-lazy-loading-modules\n - guide/lazy-loading-ngmodules#verify-lazy-loading\n - guide/module-types\n - guide/ngmodules\n - guide/providers\n - guide/router\n - guide/router-tutorial-toh#preloading-background-loading-of-feature-areas\n - guide/singleton-services\n - guide/singleton-services#forRoot\n - https://web.dev/route-level-code-splitting-in-angular\n - https://web.dev/route-preloading-in-angular\n-->"}
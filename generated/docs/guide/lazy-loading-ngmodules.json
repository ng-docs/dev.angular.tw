{"id":"guide/lazy-loading-ngmodules","title":"延遲載入屬性模組","contents":"<div class=\"content\">\n  <h1 id=\"lazy-loading-feature-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9s0kcs00fdk5zlnqa607ov9z\">延遲載入屬性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-feature-modules\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d11d3joik5ypqehhfjwkbvxc7\">預設情況下，NgModule 都是急性載入的。意思是它會在應用載入時儘快載入，所有模組都是如此，無論是否立即要用。對於帶有很多路由的大型應用，考慮使用延遲載入 —— 一種按需載入 NgModule 的模式。延遲載入可以減小初始套件的尺寸，從而減少載入時間。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6tl0hs4wht11kg4a4n7hphus\">如果需要本頁描述的具有兩個延遲載入模組的範例應用，參閱<live-example></live-example>。</p>\n</div>\n<p><a id=\"lazy-loading\"></a></p>\n<h2 id=\"lazy-loading-basics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zx53gxb57cnbbnapcf001a3t\">延遲載入入門<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-basics\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3v9lju6warwn50i0kgpgkdrll\">本節會介紹設定延遲載入路由的基本過程。\n想要一個分步的範例，參閱本頁的<a href=\"guide/lazy-loading-ngmodules#step-by-step\">分步設定</a>部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83w92v4nz4iema8cw27qmy53p\">要延遲載入 Angular 模組，請在 <code>AppRoutingModule</code> <code>routes</code> 中使用 <code>loadChildren</code> 代替 <code>component</code> 進行設定，程式碼如下。</p>\n<code-example header=\"AppRoutingModule (excerpt)\">\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'items',\n    loadChildren: () =&gt; import('./items/items.module').then(m =&gt; m.ItemsModule)\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b66w8x8ylq02faxtqowo7sdvd\">在延遲載入模組的路由模組中，新增一個指向該組件的路由。</p>\n<code-example header=\"Routing module for lazy loaded module (excerpt)\">\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: ItemsComponent\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9329nt03yuevmxyf8ehq9dsbb\">還要確保從 <code>AppModule</code> 中移除了 <code>ItemsModule</code>。想要一個關於延遲載入模組的分步操作指南，請繼續檢視本頁的後續章節。</p>\n<p><a id=\"step-by-step\"></a></p>\n<h2 id=\"step-by-step-setup\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eb4aukeptwb40zedr0orfluex\">分步設定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#step-by-step-setup\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30lb3wvr5pmvyired5kfe45oo\">建立延遲載入的屬性模組需要兩個主要步驟：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpkhqyw70n5udlid8659azhz1\">使用 <code>--route</code> 標誌，用 Angular CLI 建立屬性模組。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5orue9zcrifdsfac6knx146lx\">設定相關路由。</li>\n</ol>\n<h3 id=\"set-up-an-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"971bddnimrptte0jo1mhnn5of\">建立應用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-an-application\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rf14q0qglbvooc9d50wzdlu0\">如果你還沒有應用，可以遵循下面的步驟使用 Angular CLI 建立一個。如果已經有了，可以直接跳到 <a href=\"guide/lazy-loading-ngmodules#config-routes\">設定路由</a>部分。</p>\n<!-- vale Angular.Google_WordListWarnings = NO -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1idnxu3l5swgn9ebei3h4bey0\">輸入下列指令，其中的 <code>customer-app</code> 表示你的應用名稱。</p>\n<!-- vale Angular.Google_WordListWarnings = YES -->\n<code-example format=\"shell\" language=\"shell\">\n\nng new customer-app --no-standalone\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61ylya06mqnunm96kmbd6j1sd\">這將建立一個名為 \n<code>customer-app</code> 的應用程式，其中包含一個名為 \n<code>app-routing.module.ts</code> 的檔案。 這是設定屬性模組延遲載入所需的檔案之一。 透過發出指令 \n<code>cd customer-app</code> 進入專案。</p>\n<h3 id=\"create-a-feature-module-with-routing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehvdac0f6uf3osqkewp527vxz\">建立一個帶路由的屬性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qix7hlia501518qpn9cov4x5\">接下來，你將需要一個包含路由的目標元件的屬性模組。要建立它，在指令行工具中輸入如下指令，其中 <code>customers</code> 是屬性模組的名稱。載入 <code>customers</code> 屬性模組的路徑也是 <code>customers</code>，因為它是透過 <code>--route</code> 選項指定的：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module customers --route customers --module app.module\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"244ux5u3k39tvyohe8yjjo750\">這將建立一個 <code>customers</code> 目錄，在其 <code>customers.module.ts</code> 檔案中定義了新的可延遲載入模組 <code>CustomersModule</code>。該指令會自動在新屬性模組中宣告 <code>CustomersComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lhcbwzpyrex5az8thw682pao\">因為這個新模組想要延遲載入，所以該指令<strong>不會</strong>在應用的根模組 <code>app.module.ts</code> 中新增對新屬性模組的引用。相反，它將宣告的路由 <code>customers</code> 新增到以 <code>--module</code> 選項指定的模組中宣告的 <code>routes</code> 陣列中。</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" region=\"routes-customers\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: () =&gt; import('./customers/customers.module').then(m =&gt; m.CustomersModule)\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qzx7uyyhctfqr1td8p8pijm4\">注意，延遲載入語法使用 <code>loadChildren</code>，其後是一個使用瀏覽器內建的 <code>import('...')</code> 語法進行動態匯入的函式。其匯入路徑是到當前模組的相對路徑。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hkdw2kjmei7poo43bduc9yhb\">基於字串的延遲載入</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"506sebjycyyhb8z1v24eof9to\">在 Angular 版本 8 中，\n<code>loadChildren</code> 路由規範的字串語法 \n<a href=\"guide/deprecations#loadChildren\">已廢棄</a>，推薦使用 \n<code>import()</code> 語法。 你可以選擇使用基於字串的延遲載入（\n<code>loadChildren: './path/to/module#Module'</code>），方法是在你的 \n<code>tsconfig</code> 檔案中包含延遲載入路由，這會將延遲載入的檔案包含在編譯中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tdn0uidf6b5j73muoyr6qp2n\">預設情況下，會用 Angular CLI 生成專案，這些專案將更嚴格地包含旨在與 <code>import()</code> 語法一起使用的檔案。</p>\n</div>\n<h3 id=\"add-another-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3p0a47xmo4c7t4gfxvxsn2yh\">新增另一個屬性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#add-another-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15k2dnnwdm4oa33m1tm7hyfjv\">使用同樣的指令建立第二個帶路由的延遲載入屬性模組及其樁元件。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module orders --route orders --module app.module\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24zfl47u17p5ah490y1rsmbrp\">這將建立一個名為 <code>orders</code> 的新目錄，其中包含 <code>OrdersModule</code> 和 <code>OrdersRoutingModule</code> 以及新的 <code>OrdersComponent</code> 源檔案。使用 <code>--route</code> 選項指定的 <code>orders</code> 路由，用延遲載入語法新增到了 <code>app-routing.module.ts</code> 檔案內的 <code>routes</code> 陣列中。</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" region=\"routes-customers-orders\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: () =&gt; import('./customers/customers.module').then(m =&gt; m.CustomersModule)\n  },\n  {\n    path: 'orders',\n    loadChildren: () =&gt; import('./orders/orders.module').then(m =&gt; m.OrdersModule)\n  }\n];\n\n</code-example>\n<h3 id=\"set-up-the-ui\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3lnczifhdupgnvrqxix5b2qzr\">建立 UI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-the-ui\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxubm2xqmimv28y9jl2kiipen\">雖然你也可以在地址欄中輸入 URL，不過導向 UI 會更好用，也更常見。把 <code>app.component.html</code> 中的佔位指令碼替換成一個自定義的導向，以便你在瀏覽器中能在模組之間導向。</p>\n<code-example header=\"src/app/app.component.html\" path=\"lazy-loading-ngmodules/src/app/app.component.html\" region=\"app-component-template\">\n&lt;h1&gt;\n  {{title}}\n&lt;/h1&gt;\n\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/customers\"&gt;Customers&lt;/button&gt;\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/orders\"&gt;Orders&lt;/button&gt;\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"\"&gt;Home&lt;/button&gt;\n\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"baj9mak95escy76h36jqzpo3i\">要想在瀏覽器中看到你的應用，就在指令行工具視窗中輸入下列指令：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng serve\n\n</code-example>\n<!-- vale Angular.Google_WordListWarnings = NO -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5sadbzo9xxyvcjskgiu23xl8\">然後，跳轉到 <code>localhost:4200</code>，這時你應該看到 \"customer-app\" 和三個按鈕。</p>\n<!-- vale Angular.Google_WordListWarnings = YES -->\n<div class=\"lightbox\">\n<img alt=\"three buttons in the browser\" src=\"generated/images/guide/lazy-loading-ngmodules/three-buttons.png\" width=\"300\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dj43g3lkc4iqq2d7pxp8tlkar\">這些按鈕生效了，因為 Angular CLI 會自動將屬性模組的路由新增到 <code>app-routing.module.ts</code> 中的 <code>routes</code> 陣列中。</p>\n<p><a id=\"config-routes\"></a></p>\n<h3 id=\"imports-and-route-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2z2dtsbpps9e5rbc4gimhro0\">匯入與路由設定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#imports-and-route-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rjxxley6kk9ybgfmg7cjdkkv\">Angular CLI 會將每個屬性模組自動新增到應用級的路由對映表中。透過新增預設路由來最終完成這些步驟。在 <code>app-routing.module.ts</code> 檔案中，使用如下指令更新 <code>routes</code> 陣列：</p>\n<code-example header=\"src/app/app-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" id=\"app-routing.module.ts\" region=\"const-routes\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: () =&gt; import('./customers/customers.module').then(m =&gt; m.CustomersModule)\n  },\n  {\n    path: 'orders',\n    loadChildren: () =&gt; import('./orders/orders.module').then(m =&gt; m.OrdersModule)\n  },\n  {\n    path: '',\n    redirectTo: '',\n    pathMatch: 'full'\n  }\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37e125lnn41dnyzo3sg69faza\">前兩個路徑是到 <code>CustomersModule</code> 和 <code>OrdersModule</code> 的路由。最後一個條目則定義了預設路由。空路徑對應所有不對應先前路徑的內容。</p>\n<h3 id=\"inside-the-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ber0iikaop1gq5iqtb21ntl6f\">屬性模組內部<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#inside-the-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ns8qfwyu3ytni0uhlyqw7fv3\">接下來，仔細看看 <code>customers.module.ts</code> 檔案。如果你使用的是 Angular CLI，並按照此頁面中的步驟進行操作，則無需在此處執行任何操作。</p>\n<code-example header=\"src/app/customers/customers.module.ts\" path=\"lazy-loading-ngmodules/src/app/customers/customers.module.ts\" id=\"customers.module.ts\" region=\"customers-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { CustomersRoutingModule } from './customers-routing.module';\nimport { CustomersComponent } from './customers.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    CustomersRoutingModule\n  ],\n  declarations: [CustomersComponent]\n})\nexport class CustomersModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9cm1ncsxyb0dkkjzzn4vj5a1\"><code>customers.module.ts</code> 檔案匯入了 <code>customers-routing.module.ts</code> 和 <code>customers.component.ts</code> 檔案。<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 陣列中列出了 <code>CustomersRoutingModule</code>，讓 <code>CustomersModule</code> 可以訪問它自己的路由模組。<code>CustomersComponent</code> 位於 <code>declarations</code> 陣列中，這意味著 <code>CustomersComponent</code> 屬於 <code>CustomersModule</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6h02jive3r53katbz65e3assv\">然後，<code>app-routing.module.ts</code> 會使用 JavaScript 的動態匯入功能來匯入屬性模組 <code>customers.module.ts</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgfard5vbhsxlsxky0jpaml9o\">專屬於屬性模組的路由定義檔案 <code>customers-routing.module.ts</code> 將匯入在 <code>customers.component.ts</code> 檔案中定義的自有屬性元件，以及其它 JavaScript 匯入語句。然後將空路徑對映到 <code>CustomersComponent</code>。</p>\n<code-example header=\"src/app/customers/customers-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/customers/customers-routing.module.ts\" id=\"customers-routing.module.ts\" region=\"customers-routing-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { CustomersComponent } from './customers.component';\n\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CustomersComponent\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [RouterModule.forChild(routes)],\n  exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]\n})\nexport class CustomersRoutingModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3t1uzeqpbv380siullimamp0b\">這裡的 <code>path</code> 設定為空字串，因為 <code>AppRoutingModule</code> 中的路徑已經設定為 <code>customers</code>，因此，<code>CustomersRoutingModule</code> 中的此路由已經位於 <code>customers</code> 這個上下文中。此路由模組中的每個路由都是其子路由。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lhzv57pviu9ap5gu8vez00ba\">另一個屬性模組中路由模組的設定也類似。</p>\n<code-example header=\"src/app/orders/orders-routing.module.ts (excerpt)\" path=\"lazy-loading-ngmodules/src/app/orders/orders-routing.module.ts\" id=\"orders-routing.module.ts\" region=\"orders-routing-module-detail\">\nimport { OrdersComponent } from './orders.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: OrdersComponent\n  }\n];\n\n</code-example>\n<h3 id=\"verify-lazy-loading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42ioxkbuxsue4tsjucg8cy2y2\">確認它工作正常<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#verify-lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cv3n61nx3ps82cmjqsu8g1qhi\">你可以使用 Chrome 開發者工具來驗證一下這些模組真的是延遲載入的。在 Chrome 中，按 <code>Cmd+Option+i</code>（Mac）或 <code>Ctrl+Shift+j</code>（PC），並選中 <code>Network</code> 頁標籤。</p>\n<div class=\"lightbox\">\n<img alt=\"lazy loaded modules diagram\" src=\"generated/images/guide/lazy-loading-ngmodules/network-tab.png\" width=\"600\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dx6kxr5gja1r3is3akgfj616d\">點選 Orders 或 Customers 按鈕。如果你看到某個 chunk 檔案出現了，就表示一切就緒，屬性模組被延遲載入成功了。Orders 和 Customers 都應該出現一次 chunk，並且它們各自只應該出現一次。</p>\n<div class=\"lightbox\">\n<img alt=\"lazy loaded modules diagram\" src=\"generated/images/guide/lazy-loading-ngmodules/chunk-arrow.png\" width=\"600\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"720x7no2s4f0511umb4w8c6el\">要想再次檢視它或測試修改後的行為，只要點選 Network 頁左上放的 <code>清除</code> 圖示即可。</p>\n<div class=\"lightbox\">\n<img alt=\"lazy loaded modules diagram\" src=\"generated/images/guide/lazy-loading-ngmodules/clear.gif\" width=\"200\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5j4asbgfk029mhsnacxvi975c\">然後，使用 <code>Cmd+r</code>（Mac）或 <code>Ctrl+r</code>（PC）重新載入頁面。</p>\n<h2 id=\"forroot-and-forchild\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7g1lw84rxzgxzbl2u8g3cvqb5\"><code>forRoot()</code> 與 <code>forChild()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#forroot-and-forchild\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wqyajl9v7u3zmnl2kupxlmen\">你可能已經注意到了，Angular CLI 會把 <code>RouterModule.forRoot(routes)</code> 新增到 <code>AppRoutingModule</code> 的 <code>imports</code> 陣列中。這會讓 Angular 知道 <code>AppRoutingModule</code> 是一個路由模組，而 <code>forRoot()</code> 表示這是一個根路由模組。它會設定你傳入的所有路由、讓你能訪問路由器指令並註冊 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>。<code>forRoot()</code> 在應用中只應該使用一次，也就是這個 <code>AppRoutingModule</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1figtxmq2alarz8dmqp370yrr\">Angular CLI 還會把 <code>RouterModule.forChild(routes)</code> 新增到各個屬性模組中。這種方式下 Angular 就會知道這個路由清單只負責提供額外的路由並且其設計意圖是作為屬性模組使用。你可以在多個模組中使用 <code>forChild()</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"309zyexfh94le482k7pl48y0s\"><code>forRoot()</code> 方法為路由器管理<em>全域性的</em>注入器設定。<code>forChild()</code> 方法中沒有注入器設定，只有像 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 和 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 這樣的指令。欲知詳情，參閱<a href=\"guide/singleton-services\">單例服務</a>章的 <a href=\"guide/singleton-services#forRoot\"><code>forRoot()</code> 模式</a>小節。</p>\n<p><a id=\"preloading\"></a></p>\n<h2 id=\"preloading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49xqnvehgda1bjiqtnuitjwyb\">預載入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6m5gim22wvmed484cpogscad4\">預載入透過在後台載入部分應用來改進使用者體驗。你可以預載入模組、獨立元件或元件資料。</p>\n<h3 id=\"preloading-modules-and-standalone-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bq5csyg382f384lwcjjwpw7j0\">預載入模組和預載入獨立元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading-modules-and-standalone-components\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jgqr9lb5u7i4jy0q0899b93b\">預載入模組和預載入獨立元件透過在後台載入部分應用來改善使用者體驗。這樣一來，使用者在啟用路由時就無需等待下載這些元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qfixjaq4mkbpccv4l5pvdjc3\">要啟用所有延遲載入模組和獨立元件的預載入，請從 Angular <code>router</code> 匯入 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 令牌。</p>\n<h3 id=\"module-based-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dfs1h700gy2y2brorwp6bqlo\">基於模組的應用程式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#module-based-application\"><i class=\"material-icons\">link</i></a></h3>\n<code-example header=\"AppRoutingModule (excerpt)\">\n\nimport { <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a> } from '@angular/router';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qkl2en7i37n3t1i2v68l3q62\">還是在 <code>AppRoutingModule</code> 中，透過 <code>forRoot()</code> 指定你的預載入策略。</p>\n<code-example header=\"AppRoutingModule (excerpt)\">\n\nRouterModule.forRoot(\n  appRoutes,\n  {\n    preloadingStrategy: <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>\n  }\n)\n\n</code-example>\n<h3 id=\"standalone-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dntquglskc2umxghz646iidxh\">獨立應用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#standalone-application\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gyqovyuayn0cx8t3t3fyg5vq\">對於獨立應用程式，請透過將 <code><a href=\"api/router/withPreloading\" class=\"code-anchor\">withPreloading</a></code> 新增到 <code>app.config.ts</code> 檔案中的 <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> 的<code><a href=\"api/router/RouterFeatures\" class=\"code-anchor\">RouterFeatures</a></code> 引數中來設定預載入策略。</p>\n<code-example header=\"`app.config.ts`\">\n\nimport { <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> } from '@angular/core';\nimport {\n  <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>,\n  <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>\n  <a href=\"api/router/withPreloading\" class=\"code-anchor\">withPreloading</a>,\n} from '@angular/router';\n\nimport { routes } from './app.routes';\n\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [\n    <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(\n      routes,\n      <a href=\"api/router/withPreloading\" class=\"code-anchor\">withPreloading</a>(<a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>)\n    ),\n  ],\n};\n\n</code-example>\n<h3 id=\"preloading-component-data\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3blkbv0kufkmqd8vfrv3tb2r3\">預載入元件資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading-component-data\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jy2k6e8xd5lm11ptf4y07fkc\">要預載入元件資料，可以用 <code>resolver</code> 守衛。解析器透過阻止頁面載入來改進使用者體驗，直到顯示頁面時的全部必要資料都可用。</p>\n<h4 id=\"resolvers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hfti5ve73iuleb2yja24s3tt\">解析器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#resolvers\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atefy34xsv42eg5n4llgjm75c\">建立一個解析器服務。透過 Angular CLI，建立服務的指令如下：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service &lt;service-name&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2g241oo8spvxzfxw2her6udtn\">在新創建的服務中，實現由 <code>@angular/router</code> 套件提供的 <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 介面：</p>\n<code-example header=\"Resolver service (excerpt)\">\n\nimport { <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a> } from '@angular/router';\n\n…\n\n/* An interface that represents your data <a href=\"api/core/model\" class=\"code-anchor\">model</a> */\nexport interface Crisis {\n  id: number;\n  name: string;\n}\n\nexport class CrisisDetailResolverService implements <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>&lt;Crisis&gt; {\n  resolve(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): Observable&lt;Crisis&gt; {\n    // your logic goes here\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cct99emsq6pux8m6sbywy8eq\">把這個解析器匯入此模組的路由模組。</p>\n<code-example header=\"Feature module's routing module (excerpt)\">\n\nimport { CrisisDetailResolverService } from './crisis-detail-resolver.service';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1hvnzaffz5x7qtaq5ptfmozn9\">在元件的 <code>route</code> 設定中新增一個 <code>resolve</code> 物件。</p>\n<code-example header=\"Feature module's routing module (excerpt)\">\n\n{\n  path: '/your-path',\n  component: YourComponent,\n  resolve: {\n    crisis: CrisisDetailResolverService\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qz62fsrubqjpta8lo69ymoq9\">在此元件的建構式函式中，注入一個 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 實例，它可以表示當前路由。</p>\n<code-example header=\"Component's constructor (excerpt)\">\n\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nclass YourComponent {\n  constructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4rn1yjdg1ctbekpnb24frtedp\">使用注入進來的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 類別實例來訪問與指定路由關聯的 <code>data</code> 值。</p>\n<code-example header=\"Component's ngOnInit lifecycle hook (excerpt)\">\n\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nclass YourComponent {\n  constructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n\n  ngOnInit() {\n    this.route.data\n      .subscribe(data =&gt; {\n        const crisis: Crisis = data.crisis;\n        // …\n      });\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkefuw9twsm9q789g1pm9j3kv\">關於工作範例的更多訊息，請參閱<a href=\"guide/router-tutorial-toh#preloading-background-loading-of-feature-areas\">路由教學課程的預載入部分</a>。</p>\n<h2 id=\"troubleshooting-lazy-loading-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2j8jek9m4fwmfpbms62uln1em\">對延遲載入模組進行故障排除<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#troubleshooting-lazy-loading-modules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mlljxr2gqiohh8p6z661wvtb\">延遲載入模組時常見的錯誤之一，就是在應用程式中的多個位置匯入通用模組。可以先用 Angular CLI 生成模組幷包括 <code>--route route-name</code> 引數，來測試這種情況，其中 <code>route-name</code> 是模組的名稱。接下來，建立不帶 <code>--route</code> 引數的模組。如果你呼叫 <code>ng generate module</code> 時帶上了 <code>--route</code> 引數，就會回傳一個錯誤，否則它便可以正確執行，這樣一來你就可能會在多個位置匯入相同的模組。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e6fple13ritgbdilizaiw57p\">請記住，許多常見的 Angular 模組都應該匯入應用的基礎模組中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55y9f4wf4n0oq09k0dql80a5i\">有關 Angular 模組的更多訊息，請參見 <a href=\"guide/ngmodules\">NgModules</a>。</p>\n<h2 id=\"more-on-ngmodules-and-routing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er6oquwap1jwfax9ckc5fo67u\">更多關於 NgModule 和路由的知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oolgylns9kaynftarwog49tq\">你可能還對下列內容感興趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pta30xdcuckc5c48lnuv3xhl\"><a href=\"guide/router\">路由與導向</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0n6et5hry7sni1qgcd1web7k\"><a href=\"guide/providers\">服務提供者</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bot5kxk6jyhqjbnbem8f1gew\"><a href=\"guide/module-types\">屬性模組的分類</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chjgeftw3reio8n02jm4ak1fu\"><a href=\"https://web.dev/route-level-code-splitting-in-angular/\">Angular 中的路由級程式碼拆分</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bebrrmoaeufu90wdrjxqsz3oq\"><a href=\"https://web.dev/route-preloading-in-angular/\">Angular 中的路由預載入策略</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Tue Oct 24 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/feature-modules\n - guide/module-types\n - guide/providers\n - guide/router\n - guide/singleton-services\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/core/ApplicationConfig\n - api/core/Component\n - api/core/NgModule\n - api/core/model\n - api/router/ActivatedRoute\n - api/router/ActivatedRouteSnapshot\n - api/router/PreloadAllModules\n - api/router/Resolve\n - api/router/Router\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterStateSnapshot\n - api/router/Routes\n - api/router/provideRouter\n - api/router/withPreloading\n - guide/deprecations#loadChildren\n - guide/lazy-loading-ngmodules#add-another-feature-module\n - guide/lazy-loading-ngmodules#config-routes\n - guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\n - guide/lazy-loading-ngmodules#forroot-and-forchild\n - guide/lazy-loading-ngmodules#imports-and-route-configuration\n - guide/lazy-loading-ngmodules#inside-the-feature-module\n - guide/lazy-loading-ngmodules#lazy-loading-basics\n - guide/lazy-loading-ngmodules#lazy-loading-feature-modules\n - guide/lazy-loading-ngmodules#module-based-application\n - guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\n - guide/lazy-loading-ngmodules#preloading\n - guide/lazy-loading-ngmodules#preloading-component-data\n - guide/lazy-loading-ngmodules#preloading-modules-and-standalone-components\n - guide/lazy-loading-ngmodules#resolvers\n - guide/lazy-loading-ngmodules#set-up-an-application\n - guide/lazy-loading-ngmodules#set-up-the-ui\n - guide/lazy-loading-ngmodules#standalone-application\n - guide/lazy-loading-ngmodules#step-by-step\n - guide/lazy-loading-ngmodules#step-by-step-setup\n - guide/lazy-loading-ngmodules#troubleshooting-lazy-loading-modules\n - guide/lazy-loading-ngmodules#verify-lazy-loading\n - guide/module-types\n - guide/ngmodules\n - guide/providers\n - guide/router\n - guide/router-tutorial-toh#preloading-background-loading-of-feature-areas\n - guide/singleton-services\n - guide/singleton-services#forRoot\n - https://web.dev/route-level-code-splitting-in-angular\n - https://web.dev/route-preloading-in-angular\n-->"}
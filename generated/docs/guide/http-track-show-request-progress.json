{"id":"guide/http-track-show-request-progress","title":"HTTP - 跟蹤和顯示請求進度","contents":"<div class=\"content\">\n  <h1 id=\"http---track-and-show-request-progress\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwrg2b186f6nzog75ei9b45vv\">HTTP - 跟蹤和顯示請求進度<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-track-show-request-progress#http---track-and-show-request-progress\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qrreuk4txplpmwd59r5k2gvy\">應用程式有時會傳輸大量資料，而這些傳輸可能要花很長時間。檔案上傳就是典型的例子。你可以透過提供關於此類別傳輸的進度反饋，為使用者提供更好的體驗。</p>\n<h2 id=\"make-a-request\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nqfyy2pb9q6urf53fcq9i5hv\">發出請求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-track-show-request-progress#make-a-request\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b27r378tvonptos5o0rrebnqr\">要想發出一個帶有進度事件的請求，你可以建立一個 <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> 實例，並把 <code>reportProgress</code> 選項設定為 true 來啟用對進度事件的跟蹤。</p>\n<code-example header=\"app/uploader/uploader.service.ts (upload request)\" path=\"http/src/app/uploader/uploader.service.ts\" region=\"upload-request\">\nconst req = new <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>('POST', '/upload/file', file, {\n  reportProgress: true\n});\n\n</code-example>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u6rk1b1fj0v8a4cs8w6z8q2b\"><strong>提示</strong>：<br>\n每個進度事件都會觸發變更檢測，所以只有當需要在 UI 上報告進度時，你才應該開啟它們。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pkixx62bb4h5oac4mqqae7h4\">當 <code><a href=\"api/common/http/HttpClient#request\" class=\"code-anchor\">HttpClient.request()</a></code> 和 HTTP 方法一起使用時，可以用 <code>observe: 'events'</code> 來檢視所有事件，包括傳輸的進度。</p>\n</div>\n<h2 id=\"track-request-progress\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4r6h8ekc2mmj49aqg8p6af9w\">跟蹤請求進度<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-track-show-request-progress#track-request-progress\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"add54kjlwyc780uf2ys35bep8\">接下來，將此請求物件傳給 <code><a href=\"api/common/http/HttpClient#request\" class=\"code-anchor\">HttpClient.request()</a></code> 方法，該方法回傳 <code>HttpEvents</code>（與<a href=\"guide/http-intercept-requests-and-responses#interceptor-events\">攔截器</a>處理的事件相同）的 <code>Observable</code>。</p>\n<code-example header=\"app/uploader/uploader.service.ts (upload body)\" path=\"http/src/app/uploader/uploader.service.ts\" region=\"upload-body\">\n// The `HttpClient.request` API produces a raw event stream\n// which includes start (sent), progress, and response events.\nreturn this.http.request(req).pipe(\n  map(event =&gt; this.getEventMessage(event, file)),\n  tap(message =&gt; this.showProgress(message)),\n  last(), // return last (completed) message to caller\n  catchError(this.handleError(file))\n);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8c7qxifhhekrghi8iiw9xyiks\"><code>getEventMessage</code> 方法解釋了事件流中每種型別的 <code><a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a></code>。</p>\n<code-example header=\"app/uploader/uploader.service.ts (getEventMessage)\" path=\"http/src/app/uploader/uploader.service.ts\" region=\"getEventMessage\">\n/** Return distinct message for sent, upload progress, &amp; response events */\nprivate getEventMessage(event: <a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&lt;any&gt;, file: File) {\n  switch (event.type) {\n    case <a href=\"api/common/http/HttpEventType#Sent\" class=\"code-anchor\">HttpEventType.Sent</a>:\n      return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n    case <a href=\"api/common/http/HttpEventType#UploadProgress\" class=\"code-anchor\">HttpEventType.UploadProgress</a>:\n      // Compute and show the % done:\n      const percentDone = event.total ? Math.round(100 * event.loaded / event.total) : 0;\n      return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n    case <a href=\"api/common/http/HttpEventType#Response\" class=\"code-anchor\">HttpEventType.Response</a>:\n      return `File \"${file.name}\" was completely uploaded!`;\n\n    default:\n      return `File \"${file.name}\" surprising upload event: ${event.type}.`;\n  }\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7zu6g5v0y547qhdyevw8t7wyg\">本指南中的範例應用中沒有用來接受上傳檔案的伺服器。<code>app/http-interceptors/upload-interceptor.ts</code> 的 <code>UploadInterceptor</code> 透過回傳一個模擬這些事件的可觀察物件來攔截和短路上傳請求。</p>\n</div>\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 27 2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient#request\n - api/common/http/HttpEvent\n - api/common/http/HttpEventType#Response\n - api/common/http/HttpEventType#Sent\n - api/common/http/HttpEventType#UploadProgress\n - api/common/http/HttpRequest\n - guide/http-intercept-requests-and-responses#interceptor-events\n - guide/http-track-show-request-progress#http---track-and-show-request-progress\n - guide/http-track-show-request-progress#make-a-request\n - guide/http-track-show-request-progress#track-request-progress\n-->"}
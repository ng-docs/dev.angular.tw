{"id":"guide/route-animations","title":"路由过渡动画","contents":"<div class=\"content\">\n  <h1 id=\"route-transition-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2h4w8cevwqcn0j6g4njkmexd\">路由过渡动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#route-transition-animations\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dvq5rxv5290kbb7nk2a4bxxu5\">路由使用户能够在应用程序中不同路由之间导航。</p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wtw65w7vo9ysndhyuq3y2kie\">对下列概念有基本的理解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejrwy9jlbr7n31leje9s0nwps\"><a href=\"guide/animations\">Angular 动画简介</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d2gzislo0xv4rrldotf2u8yh\"><a href=\"guide/transition-and-triggers\">过渡与触发器</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82pieugpn2i38mksdalgha2g3\"><a href=\"guide/reusable-animations\">可复用动画</a></li>\n</ul>\n<h2 id=\"enable-routing-transition-animation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlb5b7gt6y4ldpm1fdupelpfb\">启用路由过渡动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#enable-routing-transition-animation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49ihe3vnuae5iatfs2xbtielh\">路由能让用户在应用中的不同路由之间导航。当用户从一个路由导航到另一个路由时，Angular 路由器会把这个 URL 映射到一个相关的组件，并显示其视图。为这种路由转换添加动画，将极大地提升用户体验。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qm2ld5nz9t27o0ye0dtrs219\">Angular 路由器天生带有高级动画功能，它可以让你为在路由变化时为视图之间设置过渡动画。要想在路由切换时生成动画序列，你需要首先定义出嵌套的动画序列。从宿主视图的顶层组件开始，在这些内嵌视图的宿主组件中嵌套动画。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zax9tmvvy71bpx1iszdznwya\">要启用路由过渡动画，需要做如下步骤：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9cx1ou3qrey85ka3ph57k5fgq\">创建一个定义可能路由的路由配置。对于基于 NgModule 的应用程序，这将包括创建一个\n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>并将其添加到主\n<code>AppModule</code>中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ljo8q61b1fakmc13twfkvdgl\">添加路由器出口，来告诉 Angular 路由器要把激活的组件放在 DOM 中的什么位置。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9a2ldd3c3muuvi34cb6zt71vh\">定义动画。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53ptvrg7q7tv4s2acf1qbzbnz\">让我们以两个路由之间的导航过程来解释一下路由过渡动画，<em>Home</em> 和 <em>About</em> 分别与 <code>HomeComponent</code> 和 <code>AboutComponent</code> 的视图相关联。所有这些组件视图都是顶层视图的子节点，其宿主是 <code>AppComponent</code>。接下来将实现路由器过渡动画，该动画会在出现新视图时向右滑动，并当在两个路由之间导航时把旧视图滑出。</p>\n<div class=\"lightbox\">\n<img alt=\"Animations in action\" width=\"440\" src=\"generated/images/guide/animations/route-animation.gif\">\n</div>\n<h2 id=\"route-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjoiilyxck80vg1h8mq3rg4w1\">路由配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#route-configuration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cc4wefa9qxw7gbhs7o0u8cqr\">首先，配置一组路由。这个路由配置告诉路由器如何导航。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qvtcwlm3w2rx1nwi5ke59zrj\">在\n<code>app.routes.ts</code>中创建一个名为\n<code>routes</code>的数组来定义一组路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p0at195k9nk3i6piti79a37o\">将这些路由添加到\n<code>app.config.ts</code>中提供者数组中的\n<code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>函数中。</li>\n</ul>\n<code-example language=\"ts\">\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [\n    <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(routes)\n  ]\n};\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20l8sfb1i3039knlso1pyink6\"><strong>注意</strong>：\n<br> 对于基于\n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>的应用程序：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhy09o54vxq1y95pothyzek3k\">使用 <code>RouterModule.forRoot</code> 方法来定义一组路由。同时，把其返回值添加到主模块 <code>AppModule</code> 的 <code>imports</code> 数组中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4jpq75x812l46oa3yeew31pn\">在根模块\n<code>AppModule</code>中使用\n<code>RouterModule.forRoot</code>方法注册顶级应用程序路由和提供者。 对于特性模块，改用\n<code>RouterModule.forChild</code>方法。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3x0r7ox4w5bixzftd8cfegiag\">下列配置定义了应用程序中可能的路由。</p>\n<code-example header=\"src/app/app.routes.ts\" path=\"animations/src/app/app.routes.ts\" region=\"route-animation-data\">\nexport const routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n    { path: '', pathMatch: 'full', redirectTo: '/enter-leave' },\n    {\n        path: 'open-close',\n        component: OpenClosePageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'openClosePage' }\n    },\n    {\n        path: 'status',\n        component: StatusSliderPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'statusPage' }\n    },\n    {\n        path: 'toggle',\n        component: ToggleAnimationsPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'togglePage' }\n    },\n    {\n        path: 'heroes',\n        component: HeroListPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'filterPage' }\n    },\n    {\n        path: 'hero-groups',\n        component: HeroListGroupPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'heroGroupPage' }\n    },\n    {\n        path: 'enter-leave',\n        component: HeroListEnterLeavePageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'enterLeavePage' }\n    },\n    {\n        path: 'auto',\n        component: HeroListAutoCalcPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'autoPage' }\n    },\n    {\n        path: 'insert-remove',\n        component: InsertRemoveComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'insertRemovePage' }\n    },\n    {\n        path: 'querying',\n        component: QueryingComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'queryingPage' }\n    },\n    {\n        path: 'home',\n        component: HomeComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'HomePage' }\n    },\n    {\n        path: 'about',\n        component: AboutComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'AboutPage' }\n    },\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41ntvnd74zptotg86mqyxzns4\"><code>home</code> 和 <code>about</code> 路径分别关联着 <code>HomeComponent</code> 和 <code>AboutComponent</code> 视图。该路由配置告诉 Angular 路由器当导航匹配了相应的路径时，就实例化 <code>HomeComponent</code> 和 <code>AboutComponent</code> 视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"p0v22f4iws3oaeantwsj56du\">每个路由定义中的 <code>data</code> 属性也定义了与此路由有关的动画配置。当路由变化时，<code>data</code> 属性的值就会传给 <code>AppComponent</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15ntd9i5omv7qnwe0by9gelbx\"><strong>注意</strong>：<br>\n这个 <code>data</code> 中的属性名可以是任意的。比如，上面例子中使用的名字 <em>animation</em> 就是随便起的。</p>\n</div>\n<h2 id=\"router-outlet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"p01zmizatizt251ebpyqzn4d\">路由出口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#router-outlet\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b19hlrt9djepyuf6ua0wikobx\">配置好路由之后，还要告诉 Angular 路由器当路由匹配时，要把视图渲染到那里。你可以通过在根组件 <code>AppComponent</code> 的模板中插入一个 <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 容器来指定路由出口的位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5s1zalcfyemqob3mxwwksxe9\"><code><a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a></code> 包含有关插座和激活路由的信息。我们可以用每个 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 的 <code>data</code> 属性来为我们的路由转换设置动画。</p>\n<code-example header=\"src/app/app.component.html\" path=\"animations/src/app/app.component.html\" region=\"route-animations-outlet\">\n&lt;div [@routeAnimations]=\"getRouteAnimationData()\"&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8u51h8z4t3brl6zki07ohfdpg\"><code>AppComponent</code> 中定义了一个可以检测视图何时发生变化的方法，该方法会基于路由配置的 <code>data</code> 属性值，将动画状态值赋值给动画触发器（<code>@routeAnimation</code>）。下面就是一个 <code>AppComponent</code> 中的范例方法，用于检测路由在何时发生了变化。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"get-route-animations-data\">\nconstructor(private contexts: <a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a>) {}\n\ngetRouteAnimationData() {\n  return this.contexts.getContext('primary')?.route?.snapshot?.data?.['<a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>'];\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bbat1nrbhcldbndwoiy9gexf\">这里的 <code>getRouteAnimationData()</code> 方法会获取这个 outlet 指令的值（通过 <code>#outlet=\"outlet\"</code>）。它会根据当前活动路由的自定义数据返回一个表示动画状态的字符串值。可以用这个数据来控制各个路由之间该执行哪个过渡。</p>\n<h2 id=\"animation-definition\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2obk3gyfy8m8tzsu7kwky5rur\">动画定义<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#animation-definition\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cqvftiw0linke07fiqpnv0ie\">动画可以直接在组件中定义。对于此范例，我们会在独立的文件中定义动画，这让我们可以复用这些动画。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xl3xt4va22dkdfh545dho1in\">下面的代码片段定义了一个名叫 <code>slideInAnimation</code> 的可复用动画。</p>\n<code-example header=\"src/app/animations.ts\" path=\"animations/src/app/animations.ts\" region=\"route-animations\">\nexport const slideInAnimation =\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimations', [\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('HomePage &lt;=&gt; AboutPage', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%' })\n      ], { optional: true }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>(), { optional: true }),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%' }))\n        ], { optional: true }),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%' }))\n        ], { optional: true }),\n      ]),\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* &lt;=&gt; *', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ], { optional: true }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%' })\n      ], { optional: true }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>(), { optional: true }),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('200ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%', opacity: 0 }))\n        ], { optional: true }),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%' }))\n        ], { optional: true }),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>('@*', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>(), { optional: true })\n      ]),\n    ])\n  ]);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3m9a695u8k6l10ng48fksqucz\">该动画定义做了如下事情：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9yd2eeo8l0frl3nfi5v7msjzq\">定义两个过渡。每个触发器都可以定义多个状态和多个过渡</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9u5xeaq5nmz80a7cis0neiph6\">调整宿主视图和子视图的样式，以便在过渡期间，控制它们的相对位置</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3ift20blam7nyzblwrjfprv\">使用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 来确定哪个子视图正在进入或离开宿主视图</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6993q37s5ok5i0ne5p7u3s90v\">路由的变化会激活这个动画触发器，并应用一个与该状态变更相匹配的过渡</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bg4xxshh30cg46jrp0wgu2g0i\"><strong>注意</strong>：<br>\n这些过渡状态必须和路由配置中定义的 <code>data</code> 属性的值相一致。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61ilyghnfous0lcpvnihv54vx\">通过将可复用动画 <code>slideInAnimation</code> 添加到 <code>AppComponent</code> 的 <code>animations</code> 元数据中，可以让此动画定义能用在你的应用中。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"define\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  imports: [<a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a>, <a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a>],\n  animations: [\n    slideInAnimation\n  ]\n})\n\n</code-example>\n<h3 id=\"style-the-host-and-child-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ojbmy0rkh51f1kg5c8goaxap\">为宿主组件和子组件添加样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#style-the-host-and-child-components\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epxbi6p0w58nz1cbum41bnyhp\">在过渡期间，新视图将直接插入在旧视图后面，并且这两个元素会同时出现在屏幕上。要防止这种行为，就要修改宿主视图，改用相对定位。然后，把已移除或已插入的子视图改用绝对定位。在这些视图中添加样式，就可以让容器就地播放动画，并防止某个视图影响页面中其它视图的位置。</p>\n<code-example header=\"src/app/animations.ts (excerpt)\" path=\"animations/src/app/animations.ts\" region=\"style-view\">\n<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimations', [\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('HomePage &lt;=&gt; AboutPage', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%'\n      })\n    ]),\n\n</code-example>\n<h3 id=\"query-the-view-containers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyeycyw6sqrmnejmr6w2auf7u\">查询视图的容器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#query-the-view-containers\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anwy4n1xz7iox0gjnu0dayt38\">使用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 方法可以找出当前宿主组件中的动画元素。<code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(\":enter\")</code> 语句会返回已插入的视图，<code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(\":leave\")</code> 语句会返回已移除的视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25zucd7iexp5i0wm6bkzt0qh7\">假设你正在从 <em>Home</em> 过渡到 <em>About</em>，<code>Home =&gt; About</code>。</p>\n<code-example header=\"src/app/animations.ts (excerpt)\" path=\"animations/src/app/animations.ts\" region=\"query\">\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%' })\n  ], { optional: true }),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>(), { optional: true }),\n  group([\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%' }))\n    ], { optional: true }),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%' }))\n    ], { optional: true }),\n  ]),\n]),\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* &lt;=&gt; *', [\n  <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%'\n    })\n  ], { optional: true }),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%' })\n  ], { optional: true }),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>(), { optional: true }),\n  group([\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('200ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%', opacity: 0 }))\n    ], { optional: true }),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%' }))\n    ], { optional: true }),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>('@*', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>(), { optional: true })\n  ]),\n])\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"q3uo85d1tc138jgpjhlbdew6\">在设置了视图的样式之后，动画代码会执行如下操作：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eozt3alk5gpq3hilr1g7glnu\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})</code> 会匹配添加的视图，并通过将其定位在最左侧来隐藏这个新视图。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3a376ed325pfrf2rmbg4hwel\">在正在离开的视图上调用 <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code>，来运行其子动画。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8c068tk3etjk0b80e5ny8jjlv\">使用<a href=\"api/animations/group\"><code>group()</code></a>函数使内部动画并行运行。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6k5pchdte1hmwpcku9p9g9myf\">在 <a href=\"api/animations/group\"><code>group()</code></a> 函数中：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ynayr8j4xnx2yinp3umdhtlf\">查询已移除的视图，并让它从右侧滑出。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2u63o9s2yqftski8brxj4h5yt\">使用缓动函数和持续时间定义的动画，让这个新视图滑入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12glacrccaodg3y5ygn6w6fo7\">此动画将导致 <code>about</code> 视图从左侧划入。</p>\n</li>\n</ol>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95og10ljksgpluztg0tzi0yze\">当主动画完成之后，在这个新视图上调用 <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code> 方法，以运行其子动画。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61fjai4o59zdyrot8gni4iift\">你现在有了一个基本的路由动画，可以在从一个视图路由到另一个视图时播放动画。</p>\n<h2 id=\"more-on-angular-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a26kagk7mrtsdtdkoro0iswgp\">关于 Angular 动画的更多知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oolgylns9kaynftarwog49tq\">你可能还对下列内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejrwy9jlbr7n31leje9s0nwps\"><a href=\"guide/animations\">Angular 动画简介</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d2gzislo0xv4rrldotf2u8yh\"><a href=\"guide/transition-and-triggers\">过渡与触发器</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3gdfoyldquxye4upb4liwohvp\"><a href=\"guide/complex-animation-sequences\">复杂动画序列</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82pieugpn2i38mksdalgha2g3\"><a href=\"guide/reusable-animations\">可复用动画</a></li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间：Tue Oct 11 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/animations\n - guide/complex-animation-sequences\n - guide/reusable-animations\n - guide/transition-and-triggers\n-->\n<!-- links from this doc:\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/animation\n - api/animations/group\n - api/animations/query\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/core/ApplicationConfig\n - api/core/Component\n - api/core/NgModule\n - api/router/ChildrenOutletContexts\n - api/router/Route\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/Routes\n - api/router/provideRouter\n - guide/animations\n - guide/complex-animation-sequences\n - guide/reusable-animations\n - guide/route-animations#animation-definition\n - guide/route-animations#enable-routing-transition-animation\n - guide/route-animations#more-on-angular-animations\n - guide/route-animations#prerequisites\n - guide/route-animations#query-the-view-containers\n - guide/route-animations#route-configuration\n - guide/route-animations#route-transition-animations\n - guide/route-animations#router-outlet\n - guide/route-animations#style-the-host-and-child-components\n - guide/transition-and-triggers\n-->"}
{"id":"guide/route-animations","title":"路由轉場動畫","contents":"<div class=\"content\">\n  <h1 id=\"route-transition-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2h4w8cevwqcn0j6g4njkmexd\">路由轉場動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#route-transition-animations\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dvq5rxv5290kbb7nk2a4bxxu5\">路由使用戶能夠在應用程式中不同路由之間導向。</p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wtw65w7vo9ysndhyuq3y2kie\">對下列概念有基本的理解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejrwy9jlbr7n31leje9s0nwps\"><a href=\"guide/animations\">Angular 動畫簡介</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d2gzislo0xv4rrldotf2u8yh\"><a href=\"guide/transition-and-triggers\">轉場與觸發器</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82pieugpn2i38mksdalgha2g3\"><a href=\"guide/reusable-animations\">可複用動畫</a></li>\n</ul>\n<h2 id=\"enable-routing-transition-animation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlb5b7gt6y4ldpm1fdupelpfb\">啟用路由轉場動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#enable-routing-transition-animation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49ihe3vnuae5iatfs2xbtielh\">路由能讓使用者在應用中的不同路由之間導向。當用戶從一個路由導向到另一個路由時，Angular 路由器會把這個 URL 對映到一個相關的元件，並顯示其檢視。為這種路由轉換新增動畫，將極大地提升使用者體驗。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qm2ld5nz9t27o0ye0dtrs219\">Angular 路由器天生帶有高階動畫功能，它可以讓你為在路由變化時為檢視之間設定轉場動畫。要想在路由切換時生成動畫序列，你需要首先定義出巢狀的動畫序列。從宿主檢視的頂層元件開始，在這些內嵌檢視的宿主元件中巢狀動畫。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zax9tmvvy71bpx1iszdznwya\">要啟用路由轉場動畫，需要做如下步驟：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9cx1ou3qrey85ka3ph57k5fgq\">建立一個定義可能路由的路由設定。對於基於 NgModule 的應用程式，這將包括建立一個\n<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>並將其新增到主\n<code>AppModule</code>中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ljo8q61b1fakmc13twfkvdgl\">新增路由器出口，來告訴 Angular 路由器要把啟用的元件放在 DOM 中的什麼位置。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9a2ldd3c3muuvi34cb6zt71vh\">定義動畫。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53ptvrg7q7tv4s2acf1qbzbnz\">讓我們以兩個路由之間的導向過程來解釋一下路由轉場動畫，<em>Home</em> 和 <em>About</em> 分別與 <code>HomeComponent</code> 和 <code>AboutComponent</code> 的檢視相關聯。所有這些元件檢視都是頂層檢視的子節點，其宿主是 <code>AppComponent</code>。接下來將實現路由器轉場動畫，該動畫會在出現新檢視時向右滑動，並當在兩個路由之間導向時把舊檢視滑出。</p>\n<div class=\"lightbox\">\n<img alt=\"Animations in action\" width=\"440\" src=\"generated/images/guide/animations/route-animation.gif\">\n</div>\n<h2 id=\"route-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjoiilyxck80vg1h8mq3rg4w1\">路由設定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#route-configuration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cc4wefa9qxw7gbhs7o0u8cqr\">首先，設定一組路由。這個路由設定告訴路由器如何導向。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qvtcwlm3w2rx1nwi5ke59zrj\">在\n<code>app.routes.ts</code>中建立一個名為\n<code>routes</code>的陣列來定義一組路由。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p0at195k9nk3i6piti79a37o\">將這些路由新增到\n<code>app.config.ts</code>中提供者陣列中的\n<code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>函式中。</li>\n</ul>\n<code-example language=\"ts\">\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [\n    <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(routes)\n  ]\n};\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20l8sfb1i3039knlso1pyink6\"><strong>注意</strong>：\n<br> 對於基於\n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>的應用程式：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dhy09o54vxq1y95pothyzek3k\">使用 <code>RouterModule.forRoot</code> 方法來定義一組路由。同時，把其回傳值新增到主模組 <code>AppModule</code> 的 <code>imports</code> 陣列中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4jpq75x812l46oa3yeew31pn\">在根模組\n<code>AppModule</code>中使用\n<code>RouterModule.forRoot</code>方法註冊頂級應用程式路由和提供者。 對於屬性模組，改用\n<code>RouterModule.forChild</code>方法。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3x0r7ox4w5bixzftd8cfegiag\">下列設定定義了應用程式中可能的路由。</p>\n<code-example header=\"src/app/app.routes.ts\" path=\"animations/src/app/app.routes.ts\" region=\"route-animation-data\">\nexport const routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n    { path: '', pathMatch: 'full', redirectTo: '/enter-leave' },\n    {\n        path: 'open-close',\n        component: OpenClosePageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'openClosePage' }\n    },\n    {\n        path: 'status',\n        component: StatusSliderPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'statusPage' }\n    },\n    {\n        path: 'toggle',\n        component: ToggleAnimationsPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'togglePage' }\n    },\n    {\n        path: 'heroes',\n        component: HeroListPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'filterPage' }\n    },\n    {\n        path: 'hero-groups',\n        component: HeroListGroupPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'heroGroupPage' }\n    },\n    {\n        path: 'enter-leave',\n        component: HeroListEnterLeavePageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'enterLeavePage' }\n    },\n    {\n        path: 'auto',\n        component: HeroListAutoCalcPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'autoPage' }\n    },\n    {\n        path: 'insert-remove',\n        component: InsertRemoveComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'insertRemovePage' }\n    },\n    {\n        path: 'querying',\n        component: QueryingComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'queryingPage' }\n    },\n    {\n        path: 'home',\n        component: HomeComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'HomePage' }\n    },\n    {\n        path: 'about',\n        component: AboutComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'AboutPage' }\n    },\n];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41ntvnd74zptotg86mqyxzns4\"><code>home</code> 和 <code>about</code> 路徑分別關聯著 <code>HomeComponent</code> 和 <code>AboutComponent</code> 檢視。該路由設定告訴 Angular 路由器當導向對應了相應的路徑時，就實例化 <code>HomeComponent</code> 和 <code>AboutComponent</code> 檢視。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"p0v22f4iws3oaeantwsj56du\">每個路由定義中的 <code>data</code> 屬性也定義了與此路由有關的動畫設定。當路由變化時，<code>data</code> 屬性的值就會傳給 <code>AppComponent</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15ntd9i5omv7qnwe0by9gelbx\"><strong>注意</strong>：<br>\n這個 <code>data</code> 中的屬性名可以是任意的。比如，上面例子中使用的名字 <em>animation</em> 就是隨便起的。</p>\n</div>\n<h2 id=\"router-outlet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"p01zmizatizt251ebpyqzn4d\">路由出口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#router-outlet\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b19hlrt9djepyuf6ua0wikobx\">設定好路由之後，還要告訴 Angular 路由器當路由對應時，要把檢視渲染到那裡。你可以透過在根元件 <code>AppComponent</code> 的樣板中插入一個 <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 容器來指定路由出口的位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5s1zalcfyemqob3mxwwksxe9\"><code><a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a></code> 包含有關插座和啟用路由的訊息。我們可以用每個 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 的 <code>data</code> 屬性來為我們的路由轉換設定動畫。</p>\n<code-example header=\"src/app/app.component.html\" path=\"animations/src/app/app.component.html\" region=\"route-animations-outlet\">\n&lt;div [@routeAnimations]=\"getRouteAnimationData()\"&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8u51h8z4t3brl6zki07ohfdpg\"><code>AppComponent</code> 中定義了一個可以檢測檢視何時發生變化的方法，該方法會基於路由設定的 <code>data</code> 屬性值，將動畫狀態值賦值給動畫觸發器（<code>@routeAnimation</code>）。下面就是一個 <code>AppComponent</code> 中的範例方法，用於檢測路由在何時發生了變化。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"get-route-animations-data\">\nconstructor(private contexts: <a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a>) {}\n\ngetRouteAnimationData() {\n  return this.contexts.getContext('primary')?.route?.snapshot?.data?.['<a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>'];\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bbat1nrbhcldbndwoiy9gexf\">這裡的 <code>getRouteAnimationData()</code> 方法會獲取這個 outlet 指令的值（透過 <code>#outlet=\"outlet\"</code>）。它會根據當前活動路由的自定義資料回傳一個表示動畫狀態的字串值。可以用這個資料來控制各個路由之間該執行哪個轉場。</p>\n<h2 id=\"animation-definition\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2obk3gyfy8m8tzsu7kwky5rur\">動畫定義<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#animation-definition\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cqvftiw0linke07fiqpnv0ie\">動畫可以直接在元件中定義。對於此範例，我們會在獨立的檔案中定義動畫，這讓我們可以複用這些動畫。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xl3xt4va22dkdfh545dho1in\">下面的程式碼片段定義了一個名叫 <code>slideInAnimation</code> 的可複用動畫。</p>\n<code-example header=\"src/app/animations.ts\" path=\"animations/src/app/animations.ts\" region=\"route-animations\">\nexport const slideInAnimation =\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimations', [\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('HomePage &lt;=&gt; AboutPage', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%' })\n      ], { optional: true }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>(), { optional: true }),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%' }))\n        ], { optional: true }),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%' }))\n        ], { optional: true }),\n      ]),\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* &lt;=&gt; *', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ], { optional: true }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%' })\n      ], { optional: true }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>(), { optional: true }),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('200ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%', opacity: 0 }))\n        ], { optional: true }),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%' }))\n        ], { optional: true }),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>('@*', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>(), { optional: true })\n      ]),\n    ])\n  ]);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3m9a695u8k6l10ng48fksqucz\">該動畫定義做了如下事情：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9yd2eeo8l0frl3nfi5v7msjzq\">定義兩個轉場。每個觸發器都可以定義多個狀態和多個轉場</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9u5xeaq5nmz80a7cis0neiph6\">調整宿主檢視和子檢視的樣式，以便在轉場期間，控制它們的相對位置</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3ift20blam7nyzblwrjfprv\">使用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 來確定哪個子檢視正在進入或離開宿主檢視</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6993q37s5ok5i0ne5p7u3s90v\">路由的變化會啟用這個動畫觸發器，並應用一個與該狀態變更相對應的轉場</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bg4xxshh30cg46jrp0wgu2g0i\"><strong>注意</strong>：<br>\n這些轉場狀態必須和路由設定中定義的 <code>data</code> 屬性的值相一致。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61ilyghnfous0lcpvnihv54vx\">透過將可複用動畫 <code>slideInAnimation</code> 新增到 <code>AppComponent</code> 的 <code>animations</code> 元資料中，可以讓此動畫定義能用在你的應用中。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"define\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  imports: [<a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a>, <a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a>],\n  animations: [\n    slideInAnimation\n  ]\n})\n\n</code-example>\n<h3 id=\"style-the-host-and-child-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ojbmy0rkh51f1kg5c8goaxap\">為宿主元件和子元件新增樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#style-the-host-and-child-components\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epxbi6p0w58nz1cbum41bnyhp\">在轉場期間，新檢視將直接插入在舊檢視後面，並且這兩個元素會同時出現在螢幕上。要防止這種行為，就要修改宿主檢視，改用相對定位。然後，把已移除或已插入的子檢視改用絕對定位。在這些檢視中新增樣式，就可以讓容器就地播放動畫，並防止某個檢視影響頁面中其它檢視的位置。</p>\n<code-example header=\"src/app/animations.ts (excerpt)\" path=\"animations/src/app/animations.ts\" region=\"style-view\">\n<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimations', [\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('HomePage &lt;=&gt; AboutPage', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%'\n      })\n    ]),\n\n</code-example>\n<h3 id=\"query-the-view-containers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyeycyw6sqrmnejmr6w2auf7u\">查詢檢視的容器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#query-the-view-containers\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anwy4n1xz7iox0gjnu0dayt38\">使用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 方法可以找出當前宿主元件中的動畫元素。<code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(\":enter\")</code> 語句會回傳已插入的檢視，<code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(\":leave\")</code> 語句會回傳已移除的檢視。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25zucd7iexp5i0wm6bkzt0qh7\">假設你正在從 <em>Home</em> 轉場到 <em>About</em>，<code>Home =&gt; About</code>。</p>\n<code-example header=\"src/app/animations.ts (excerpt)\" path=\"animations/src/app/animations.ts\" region=\"query\">\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%' })\n  ], { optional: true }),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>(), { optional: true }),\n  group([\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%' }))\n    ], { optional: true }),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%' }))\n    ], { optional: true }),\n  ]),\n]),\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* &lt;=&gt; *', [\n  <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%'\n    })\n  ], { optional: true }),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%' })\n  ], { optional: true }),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>(), { optional: true }),\n  group([\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('200ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%', opacity: 0 }))\n    ], { optional: true }),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%' }))\n    ], { optional: true }),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>('@*', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>(), { optional: true })\n  ]),\n])\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"q3uo85d1tc138jgpjhlbdew6\">在設定了檢視的樣式之後，動畫程式碼會執行如下操作：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eozt3alk5gpq3hilr1g7glnu\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})</code> 會對應新增的檢視，並透過將其定位在最左側來隱藏這個新檢視。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3a376ed325pfrf2rmbg4hwel\">在正在離開的檢視上呼叫 <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code>，來執行其子動畫。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8c068tk3etjk0b80e5ny8jjlv\">使用<a href=\"api/animations/group\"><code>group()</code></a>函式使內部動畫並行執行。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6k5pchdte1hmwpcku9p9g9myf\">在 <a href=\"api/animations/group\"><code>group()</code></a> 函式中：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ynayr8j4xnx2yinp3umdhtlf\">查詢已移除的檢視，並讓它從右側滑出。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2u63o9s2yqftski8brxj4h5yt\">使用緩動函式和持續時間定義的動畫，讓這個新檢視滑入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12glacrccaodg3y5ygn6w6fo7\">此動畫將導致 <code>about</code> 檢視從左側劃入。</p>\n</li>\n</ol>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95og10ljksgpluztg0tzi0yze\">當主動畫完成之後，在這個新檢視上呼叫 <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code> 方法，以執行其子動畫。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61fjai4o59zdyrot8gni4iift\">你現在有了一個基本的路由動畫，可以在從一個檢視路由到另一個檢視時播放動畫。</p>\n<h2 id=\"more-on-angular-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a26kagk7mrtsdtdkoro0iswgp\">關於 Angular 動畫的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oolgylns9kaynftarwog49tq\">你可能還對下列內容感興趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejrwy9jlbr7n31leje9s0nwps\"><a href=\"guide/animations\">Angular 動畫簡介</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d2gzislo0xv4rrldotf2u8yh\"><a href=\"guide/transition-and-triggers\">轉場與觸發器</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3gdfoyldquxye4upb4liwohvp\"><a href=\"guide/complex-animation-sequences\">複雜動畫序列</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82pieugpn2i38mksdalgha2g3\"><a href=\"guide/reusable-animations\">可複用動畫</a></li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：Tue Oct 11 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/animations\n - guide/complex-animation-sequences\n - guide/reusable-animations\n - guide/transition-and-triggers\n-->\n<!-- links from this doc:\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/animation\n - api/animations/group\n - api/animations/query\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/core/ApplicationConfig\n - api/core/Component\n - api/core/NgModule\n - api/router/ChildrenOutletContexts\n - api/router/Route\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/Routes\n - api/router/provideRouter\n - guide/animations\n - guide/complex-animation-sequences\n - guide/reusable-animations\n - guide/route-animations#animation-definition\n - guide/route-animations#enable-routing-transition-animation\n - guide/route-animations#more-on-angular-animations\n - guide/route-animations#prerequisites\n - guide/route-animations#query-the-view-containers\n - guide/route-animations#route-configuration\n - guide/route-animations#route-transition-animations\n - guide/route-animations#router-outlet\n - guide/route-animations#style-the-host-and-child-components\n - guide/transition-and-triggers\n-->"}
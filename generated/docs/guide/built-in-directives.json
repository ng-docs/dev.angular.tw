{"id":"guide/built-in-directives","title":"內建指令","contents":"<div class=\"content\">\n  <h1 id=\"built-in-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caiz9ki6ffyzkmf5op1f69ql7\">內建指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-directives\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"astgzddze7lkak7s49qe29cj5\">指令是為 Angular 應用程式中的元素新增額外行為的類。使用 Angular 的內建指令，你可以管理表單、清單、樣式以及要讓使用者看到的任何內容。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81el5yk7yllx1tewd03bnp7o0\">本章包含程式碼片段的工作實例參閱<live-example></live-example>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmb442h6gd450g20zg5nlwa2m\">Angular 指令的不同型別如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xl53l4zxtt9zqeaz239db9u8\">指令類型</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xi50d45ikwqiugyjoe0pp5h5\"><a href=\"guide/component-overview\">元件</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tep78e6av1bpnso1lz6d9xhm\">與樣板一起使用。這種型別的指令是最常見的指令類型。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1da4zo64btu8kmed417oj2g4u\"><a href=\"guide/built-in-directives#built-in-attribute-directives\">屬性型指令</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e096prald79saoo1myxrbhe5z\">改變元素、元件或其他指令的外觀或行為。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4s35bmktu8pcbjk0damwuay1v\"><a href=\"guide/built-in-directives#built-in-structural-directives\">結構型指令</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d71djec5v8iyznwo5yc0ua851\">透過新增和移除DOM元素來改變DOM佈局。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"du2bqpncka56p0gzmvu0jj33u\">本指南涵蓋了內建的<a href=\"guide/built-in-directives#built-in-attribute-directives\">屬性型指令</a>和<a href=\"guide/built-in-directives#built-in-structural-directives\">結構型指令</a>。</p>\n<p><a id=\"attribute-directives\"></a></p>\n<h2 id=\"built-in-attribute-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1eipjuhmfjhmqgdy43nl9mbtv\">內建屬性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-attribute-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atxp7lwv7bpza9insnlzdyyxb\">屬性型指令會監聽並修改其它 HTML 元素和元件的行為、Attribute 和 Property。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpz9wy9hug10yscz17ujzgyim\">許多屬性型指令是透過模組定義的，如\n<a href=\"api/common/CommonModule\"><code>CommonModule</code></a>、\n<a href=\"guide/router\" title=\"Routing and Navigation\"><code>RouterModule</code></a>和\n<a href=\"guide/forms\" title=\"Forms\"><code>FormsModule</code></a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uclkyyhffvpdwu2ghfqycl1d\">最常見的屬性型指令包括以下內容：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28ewnx724ln4716bk3zhs7n32\">常見指令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngClass\"><code>NgClass</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8mui2fegfuur1qw7ln4l5blf\">新增和移除一組CSS類。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngstyle\"><code>NgStyle</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bd2adnc9m5u7g9nxbryv8psi3\">新增並移除一組 HTML 樣式。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngModel\"><code>NgModel</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27bj432463lyy1ll85a2f31ff\">為 HTML 表單元素新增雙向資料繫結。</td>\n</tr>\n</tbody>\n</table>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5d8m2w6ja6gcyp364mc5kmjeh\">內建指令只會使用公開 API。它們不會訪問任何無法被其它指令訪問的私有 API。</p>\n</div>\n<p><a id=\"ngClass\"></a></p>\n<h2 id=\"adding-and-removing-classes-with-ngclass\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qv42rpec4o5bvpbf53btzcqg\">用 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 新增和刪除類<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#adding-and-removing-classes-with-ngclass\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p9gdt92niuy6767n3jpe57j0\">用 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 同時新增或刪除多個 CSS 類。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2y30xuyikoybfrfkczrbtrdar\">要新增或刪除<em>單個</em>類，請使用<a href=\"guide/class-binding\">類別繫結</a>而不是 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>。</p>\n</div>\n<h3 id=\"import-commonmodule-in-the-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zp2lyud2mylbu65b0kuf798b\">在元件中匯入\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#import-commonmodule-in-the-component\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egisjw1atxoa6gj46hi0g5i8y\">要使用\n<code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>，請匯入\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>並將其新增到元件的\n<code>imports</code>清單中。</p>\n<code-example header=\"src/app/app.component.ts (CommonModule import)\" path=\"built-in-directives/src/app/app.component.ts\" region=\"import-common-module\">\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n/* . . . */\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  /* . . . */\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, // &lt;-- import into the component\n    /* . . . */\n  ],\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  /* . . . */\n}\n\n</code-example>\n<h3 id=\"using-ngclass-with-an-expression\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyqoxorvh99cjkkm8katvhxu2\">將 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 與表示式一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#using-ngclass-with-an-expression\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lvmn8jyv0k5nfztk21nohavo\">在要設定樣式的元素上，新增 <code>[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]</code> 並將其設定為等於某個表示式。在這裡，是在 <code>app.component.ts</code> 中將 <code>isSpecial</code> 設定為布林值 <code>true</code>。因為 <code>isSpecial</code> 為 true，所以 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 就會把 <code>special</code> 類應用於此 <code>&lt;div&gt;</code> 上。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"special-div\">\n&lt;!-- toggle the \"special\" class on/off with a property --&gt;\n&lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"isSpecial ? 'special' : ''\"&gt;This div is special&lt;/div&gt;\n\n</code-example>\n<h3 id=\"using-ngclass-with-a-method\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7674s73wsdetr6do17dz92z0q\">將 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 與方法一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#using-ngclass-with-a-method\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ki8d0cndc97vftptelxrabn2\">要將 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 與方法一起使用，請將方法新增到元件類別中。在下面的範例中，<code>setCurrentClasses()</code> 使用一個物件來設定屬性 <code>currentClasses</code>，該物件根據另外三個元件屬性為 <code>true</code> 或 <code>false</code> 來新增或刪除三個 CSS 類。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czi25973pdd9ono44uqtw1ihe\">該物件的每個鍵（key）都是一個 CSS 類別名稱。如果鍵為 <code>true</code>，則 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 新增該類別。如果鍵為 <code>false</code>，則 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 刪除該類別。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"setClasses\">\ncurrentClasses: Record&lt;string, boolean&gt; = {};\n/* . . . */\nsetCurrentClasses() {\n  // CSS classes: added/removed per current state of component properties\n  this.currentClasses = {\n    saveable: this.canSave,\n    modified: !this.isUnchanged,\n    special: this.isSpecial,\n  };\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awsqtknbqwd0fxs1wqblsrvtj\">在樣板中，把 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 屬性繫結到 <code>currentClasses</code>，根據它來設定此元素的 CSS 類：</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgClass-1\">\n&lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"currentClasses\"&gt;This div is initially saveable, unchanged, and special.&lt;/div&gt;\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yeotq6q91c62veb95oojaawb\">在這個例子中，Angular 會在初始化以及發生更改的情況下應用這些類。完整的範例會在 <code>ngOnInit()</code> 中進行初始化以及透過單擊按鈕更改相關屬性時調用 <code>setCurrentClasses()</code>。這些步驟對於實現 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 不是必需的。有關更多訊息，請參見<live-example></live-example>中的 <code>app.component.ts</code> 和 <code>app.component.html</code>。</p>\n<p><a id=\"ngstyle\"></a></p>\n<h2 id=\"setting-inline-styles-with-ngstyle\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91cx9nabwbcwnhkx9ri1kug5i\">用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> 設定行內樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#setting-inline-styles-with-ngstyle\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"import-commonmodule-in-the-component-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zp2lyud2mylbu65b0kuf798b\">在元件中匯入\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#import-commonmodule-in-the-component-1\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vnw1crv52ebgb1z89yugwq49\">要使用\n<code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>，請匯入\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>並將其新增到元件的\n<code>imports</code>清單中。</p>\n<code-example header=\"src/app/app.component.ts (CommonModule import)\" path=\"built-in-directives/src/app/app.component.ts\" region=\"import-common-module\">\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n/* . . . */\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  /* . . . */\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, // &lt;-- import into the component\n    /* . . . */\n  ],\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  /* . . . */\n}\n\n</code-example>\n<h3 id=\"using-ngstyle-in-your-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2brvqzxmi24gdft7arqk6rj7y\">在你的元件中使用\n<code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#using-ngstyle-in-your-component\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crksxcwmvyu9fth03s0vt1t3d\">可以用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> 根據元件的狀態同時設定多個行內樣式。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnisfh4in1sb4hr010w8cteq5\">要使用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>，請向元件類別新增一個方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bifclm5u386j5wktajw7hvpxv\">在下面的例子中，<code>setCurrentStyles()</code> 方法基於該組件另外三個屬性的狀態，用一個定義了三個樣式的物件設定了 <code>currentStyles</code> 屬性。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"setStyles\">\ncurrentStyles: Record&lt;string, string&gt; = {};\n/* . . . */\nsetCurrentStyles() {\n  // CSS styles: set per current state of component properties\n  this.currentStyles = {\n    'font-style': this.canSave ? 'italic' : 'normal',\n    'font-weight': !this.isUnchanged ? 'bold' : 'normal',\n    'font-size': this.isSpecial ? '24px' : '12px',\n  };\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vgcuxn5sukpczsv2dmdrw7o1\">要設定元素的樣式，請將 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 屬性繫結到 <code>currentStyles</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgStyle-2\">\n&lt;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"currentStyles\"&gt;\n  This div is initially italic, normal weight, and extra large (24px).\n&lt;/div&gt;\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6s1yxp1iihhph07xn4ou7uigw\">在這個例子中，Angular 會在初始化以及發生更改的情況下應用這些類。完整的範例會在 <code>ngOnInit()</code> 中進行初始化以及透過單擊按鈕更改相關屬性時調用 <code>setCurrentStyles()</code>。不過，這些步驟對於實現 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 不是必需的。有關更多訊息，請參見<live-example></live-example>中的 <code>app.component.ts</code> 和 <code>app.component.html</code>。</p>\n<p><a id=\"ngModel\"></a></p>\n<h2 id=\"displaying-and-updating-properties-with-ngmodel\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9flyi61cxu7izw4gut0zc2jwu\">用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 顯示和更新屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9efxvvh0cuhajau12rcmkdbma\">可以用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令顯示資料屬性，並在使用者進行更改時更新該屬性。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33nrlrs0www4fzcpawa0z0nil\">匯入\n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>並將其新增到 AppComponent 的\n<code>imports</code>清單中。</p>\n<code-example header=\"src/app/app.component.ts (FormsModule import)\" path=\"built-in-directives/src/app/app.component.ts\" region=\"import-forms-module\">\nimport {<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>} from '@angular/forms'; // &lt;--- JavaScript import from Angular\n/* . . . */\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  /* . . . */\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, // &lt;-- import into the component\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>, // &lt;--- import into the component\n    /* . . . */\n  ],\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  /* . . . */\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6k6c7lhj2i57fosevlsa2cqar\">在 HTML 的 <code>&lt;form&gt;</code> 元素上新增 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 繫結，並將其設定為等於此屬性，這裡是 <code>name</code>。</p>\n<code-example header=\"src/app/app.component.html (NgModel example)\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgModel-1\">\n&lt;label for=\"example-ngModel\"&gt;[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&lt;/label&gt;\n&lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zv49uluy1ram7pyuoo2dukj\">此 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 語法只能設定資料繫結屬性。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"df8yreygeub4nshu8sj486hq5\">要自定義設定，你可以編寫可展開的表單，該表單將屬性繫結和事件繫結分開。使用<a href=\"guide/property-binding\">屬性繫結</a>來設定屬性，並使用<a href=\"guide/event-binding\">事件繫結</a>來回應更改。以下範例將 <code>&lt;input&gt;</code> 值更改為大寫：</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"uppercase\">\n&lt;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"setUppercaseName($event)\" id=\"example-uppercase\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24amq336ygoafo63d0qw0a87f\">這裡是所有這些變體的動畫，包括這個大寫轉換的版本：</p>\n<div class=\"lightbox\">\n<img alt=\"NgModel variations\" src=\"generated/images/guide/built-in-directives/ng-model-anim.gif\" width=\"540\" height=\"264\">\n</div>\n<h3 id=\"ngmodel-and-value-accessors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afm67ruo33i84qkftogx83uue\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 和值訪問器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngmodel-and-value-accessors\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1foi1g88nv28v0y0hnarwk0z4\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令適用於<a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a>支援的元素。Angular 為所有基本 HTML 表單元素提供了<em>值訪問器。</em>有關更多訊息，請參見<a href=\"guide/forms\">Forms</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2zi4hifsdficwu7frli9gjin\">要將 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 應用於非表單型內建元素或第三方自定義元件，必須編寫一個值訪問器。有關更多訊息，請參見 <a href=\"api/forms/DefaultValueAccessor\">DefaultValueAccessor</a> 上的 API 文件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6g5taec6f19axwsdifr59oev4\">當你編寫 Angular 元件時，如果你根據 Angular 的雙向綁定語法命名值和事件屬性，則不需要值訪問器或\n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code>。</p>\n</div>\n<p><a id=\"structural-directives\"></a></p>\n<h2 id=\"built-in-structural-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8vjsw7z25nbjq77brti34qpl\">內建結構型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-structural-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wdpmwphhd0fldt103pwg1xez\">結構型指令的職責是 HTML 佈局。它們塑造或重塑 DOM 的<em>結構</em>，這通常是透過新增、移除和操縱它們所附加到的宿主元素來實現的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41psh9h6nhxtdyzbwvhvcd3wj\">本節會介紹最常見的內建結構型指令：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0mv9h9i8uaj6tybmgb9amqnd\">常見的內建結構型指令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngIf\"><code>NgIf</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edux643n7ps7m9ljm6ygvb8ug\">根據條件從樣板中建立或銷燬子檢視。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngFor\"><code>NgFor</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"905yb851pxq2anb4liop6a3ep\">為清單中的每個條目重複一個節點。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngSwitch\"><code>NgSwitch</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kb35tv7y46xamaiia636xqtt\">一組在不同檢視之間切換的指令。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21haabbwk9c5mjl3vw6c16ve7\">欲知詳情，參閱<a href=\"guide/structural-directives\">結構型指令</a>。</p>\n<h3 id=\"import-commonmodule-in-the-component-2\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zp2lyud2mylbu65b0kuf798b\">在元件中匯入\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#import-commonmodule-in-the-component-2\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"498awknmfvlvslbcmuw0qhy5v\">要使用內建結構型指令，請匯入\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>並將其新增到元件的\n<code>imports</code>清單中。</p>\n<code-example header=\"src/app/app.component.ts (CommonModule import)\" path=\"built-in-directives/src/app/app.component.ts\" region=\"import-common-module\">\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n/* . . . */\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  /* . . . */\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, // &lt;-- import into the component\n    /* . . . */\n  ],\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  /* . . . */\n}\n\n</code-example>\n<p><a id=\"ngIf\"></a></p>\n<h2 id=\"adding-or-removing-an-element-with-ngif\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er9bi8q2en0k1jtkml6j3bp41\">用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 新增或刪除元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#adding-or-removing-an-element-with-ngif\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11ravccex3f50nvc8ominjsce\">可以將 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 指令應用於宿主元素來新增或刪除元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19ljcmtadk7pzoblo69b8dzsw\">如果 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 為 <code>false</code>，則 Angular 將從 DOM 中移除一個元素及其後代。然後，Angular 會銷燬其元件，從而釋放記憶體和資源。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5y9rielz71gfne5xbpkyx4vq6\">要新增或刪除元素，請在以下範例 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 繫結到條件表示式，比如 <code>isActive</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-1\">\n&lt;app-item-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isActive\" [item]=\"item\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jp6w1809o986rljogzqvr7bi\">當 <code>isActive</code> 表示式回傳真值時，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 會把 <code>ItemDetailComponent</code> 新增到 DOM 中。當表示式為假值時，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 會從 DOM 中刪除 <code>ItemDetailComponent</code> 並銷燬該組件及其所有子元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yzict1o2i5mv12oxbe68ibuc\">關於 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 <code>NgIfElse</code> 的更多訊息，請參見<a href=\"api/common/NgIf\">NgIf API 文件</a>。</p>\n<h3 id=\"guarding-against-null\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ubwf6l97ewixb2gkyzoeserh\">防止 <code>null</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#guarding-against-null\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"v0d78bbhli61kgd4cw8fvo0v\">預設情況下，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 會阻止顯示已繫結到空值的元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gxeet56p82cb6ixutm7bf3ae\">要使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 保護 <code>&lt;div&gt;</code>，請將 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"yourProperty\"</code> 新增到此 <code>&lt;div&gt;</code>。在下面的例子中，<code>currentCustomer</code> 名字出現了，是因為確實存在一個 <code>currentCustomer</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"currentCustomer\"&gt;Hello, {{currentCustomer.name}}&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ua004zcztpfeki2zknojk7o5\">但是，如果該屬性為 <code>null</code>，則 Angular 就不會顯示 <code>&lt;div&gt;</code>。在這個例子中，Angular 就不會顯示 <code>nullCustomer</code>，因為它為 <code>null</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2b\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"nullCustomer\"&gt;Hello, &lt;span&gt;{{nullCustomer}}&lt;/span&gt;&lt;/div&gt;\n\n</code-example>\n<p><a id=\"ngFor\"></a></p>\n<h2 id=\"listing-items-with-ngfor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7h02rbrr278mt6uwwppvot58i\"><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 條目清單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#listing-items-with-ngfor\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14d9fsijrgoymt2j7yj6a7flp\">可以用 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 來指令顯示條目清單。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eblekjztgb1h51zqfekucb7ig\">定義一個 HTML 區塊，該區塊會決定 Angular 如何渲染單個條目。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yc421yu35wpulurdsvj41xai\">要列出你的條目，請把一個簡寫形式 <code>let item of items</code> 賦值給 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>。</li>\n</ol>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;{{item.name}}&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7h7ot34a3sjlouh3oj6no3st\">字串 <code>\"let item of items\"</code> 會指示 Angular 執行以下操作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58pvkvv730yvtj2da86o4c4xd\">將 <code>items</code> 中的每個條目儲存在區域性迴圈變數 <code>item</code> 中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59i8vhe6kvqblcwawf7xhc642\">讓每個條目都可用於每次迭代時的樣板 HTML 中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlac2y3pjp3xgy05d3cgrk0p3\">將 <code>\"let item of items\"</code> 轉換為環繞宿主元素的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6e1o3tqzte17oxob3g38i92ul\">對清單中的每個 <code>item</code> 複寫這個 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dr32qg0cz23irq6u0vzdwmahn\">欲知詳情，參閱<a href=\"guide/structural-directives\">結構型指令</a>中的<a href=\"guide/structural-directives#shorthand\">結構型指令的簡寫形式</a>部分。</p>\n<h3 id=\"repeating-a-component-view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vl3nq6w0uqh4zf73ib40ngxl\">複寫元件檢視<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#repeating-a-component-view\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dss4u2430o95qzmablsjmdhc\">要複寫某個元件元素，請將 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 應用於其選擇器。在以下範例中，選擇器為 <code>&lt;app-item-detail&gt;</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-2\">\n&lt;app-item-detail *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ep36gf1fvvyo09lgm5vmmjaf\">你可以在以下位置引用樣板輸入變數，比如 <code>item</code>：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9j5iv7hq4bctnafhtts7fepv0\">在 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的宿主元素中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erlq266rjjnhkzj2z7601y2v6\">在宿主元素的後代中，用以訪問條目的屬性</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96tka2vn3ysqq3lvovt0casg4\">以下範例首先在內嵌中引用 <code>item</code>，然後將它透過繫結傳遞給 <code>&lt;app-item-detail&gt;</code> 元件的 <code>item</code> 屬性。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1-2\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;{{item.name}}&lt;/div&gt;\n&lt;!-- . . . --&gt;\n&lt;app-item-detail *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43bf8fjzbbwggejt7s1il7xth\">有關樣板輸入變數的更多訊息，請參見<a href=\"guide/structural-directives#shorthand\">結構型指令簡寫形式</a>。</p>\n<h3 id=\"getting-the-index-of-ngfor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eplim2my3nteju7acribmwjkw\">獲取 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>index</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#getting-the-index-of-ngfor\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyw2hurnpk412w75a68xw16ak\">可以獲取 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>index</code>，並在樣板中使用它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60mu23uze6dherfqgnamu3idq\">在 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中，新增一個分號和 <code>let i=index</code> 簡寫形式。下面的例子中把 <code>index</code> 取到一個名為 <code>i</code> 的變數中，並將其與條目名稱一起顯示。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-3\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items; let i=index\"&gt;{{i + 1}} - {{item.name}}&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0qhyg44vga6gst0nfm0wk844\"><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 指令上下文的 <code>index</code> 屬性在每次迭代中都會回傳該條目的從零開始的索引號。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92bob7hzk1xk0ut2h6aepmwwc\">Angular 會將此指令轉換為 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>，然後反覆使用此樣板為清單中的每個 <code>item</code> 建立一組新的元素和繫結。有關簡寫形式的更多訊息，請參見<a href=\"guide/structural-directives#shorthand\">《結構型指令》</a>指南。</p>\n<h2 id=\"repeating-elements-when-a-condition-is-true\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1x5xetyj51qeurt5rkocu9ly9\">當條件為真時複寫元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#repeating-elements-when-a-condition-is-true\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3d5804ffy7nh8i1wcy0q4ren\">要在特定條件為真時重複某個 HTML 區塊，請將 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 放在包裹此 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 元素的容器元素上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ge1igq5fjdmox9co1nj9xynb\">有關更多訊息，參閱<a href=\"guide/structural-directives#one-per-element\">每個元素只能有一個結構型指令</a>。</p>\n<p><a id=\"ngfor-with-trackby\"></a></p>\n<h3 id=\"tracking-items-with-ngfor-trackby\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79sgbkq1x3t7xqdy2ye9x0syq\">用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>trackBy</code> 跟蹤條目<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#tracking-items-with-ngfor-trackby\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xggo3lb9gv9zrp7f7ja94pyv\">透過跟蹤對條目清單的更改，可以減少應用程式對伺服器的呼叫次數。使用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>trackBy</code> 屬性，Angular 只能更改和重新渲染已更改的條目，而不必重新載入整個條目清單。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vrieztcbjfwvbcbt3gl21y3r\">向該組件新增一個方法，該方法回傳 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 應該跟蹤的值。這個例子中，該值是英雄的 <code>id</code>。如果瀏覽器已經渲染過此 <code>id</code>，Angular 就會跟蹤它，而不會重新向伺服器查詢相同的 <code>id</code>。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"trackByItems\">\ntrackByItems(index: number, item: Item): number {\n  return item.id;\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mw8kl9y8ziysbx08h99gno6n\">在簡寫表示式中，將 <code>trackBy</code> 設定為 <code>trackByItems()</code> 方法。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"trackBy\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items; trackBy: trackByItems\"&gt;\n  ({{item.id}}) {{item.name}}\n&lt;/div&gt;\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dndd3fia80vhfl4y0xnn5n5ae\"><strong>更改這些 ID</strong> 會使用新的 <code>item.id</code> 建立新的條目。在下面的 <code>trackBy</code> 效果示範中，<strong>Reset items</strong> 會建立一些具有和以前相同的 <code>item.id</code> 的新條目。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"950whuq4v2w1b9927j1p2ivsn\">如果沒有 <code>trackBy</code>，這些按鈕都會觸發完全的 DOM 元素替換。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2le3ooll2wr7ch81v2i8mtc5t\">有了 <code>trackBy</code>，則只有修改了 <code>id</code> 的按鈕才會觸發元素替換。</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"Animation of trackBy\" src=\"generated/images/guide/built-in-directives/ngfor-trackby.gif\" width=\"492\" height=\"442\">\n</div>\n<p><a id=\"ngcontainer\"></a></p>\n<h2 id=\"hosting-a-directive-without-a-dom-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qba9hc86fepm51eojzw440i9\">為沒有 DOM 元素的指令安排宿主<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#hosting-a-directive-without-a-dom-element\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhmdtghtdveit6f9qubu13ofk\">Angular 的 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 是一個分組元素，它不會干擾樣式或佈局，因為 Angular 不會將其放置在 DOM 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpg2tfxp9hz3jen1d72nvnyqt\">當沒有單個元素承載指令時，可以使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ulidbvx02nach35wqqawnchq\">這是使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 的條件化段落。</p>\n<code-example header=\"src/app/app.component.html (ngif-ngcontainer)\" path=\"structural-directives/src/app/app.component.html\" region=\"ngif-ngcontainer\">\n&lt;p&gt;\n  I turned the corner\n  &lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n    and saw {{hero.name}}. I waved\n  &lt;/ng-container&gt;\n  and continued on my way.\n&lt;/p&gt;\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"ngcontainer paragraph with proper style\" src=\"generated/images/guide/structural-directives/good-paragraph.png\" width=\"509\" height=\"15\">\n</div>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ubrhnzcqkt6mp4vvvy9g89s7\">從 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 中匯入 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24ds7db1acx7f5dl9og0fmf6f\">將 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 新增到相關 Angular 模組的 imports 部分。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33wb9apn39rgpcd4diq3ryaee\">要有條件地排除 <code>&lt;option&gt;</code>，請將 <code>&lt;option&gt;</code> 包裹在 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 中。</p>\n<code-example header=\"src/app/app.component.html (select-ngcontainer)\" path=\"structural-directives/src/app/app.component.html\" region=\"select-ngcontainer\">\n&lt;div&gt;\n  Pick your favorite hero\n  (&lt;label for=\"showSad\"&gt;&lt;input id=\"showSad\" type=\"checkbox\" checked (change)=\"showSad = !showSad\"&gt;show sad&lt;/label&gt;)\n&lt;/div&gt;\n&lt;select [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\"&gt;\n  &lt;ng-container *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\"&gt;\n    &lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSad || h.emotion !== 'sad'\"&gt;\n      &lt;option [ngValue]=\"h\"&gt;{{h.name}} ({{h.emotion}})&lt;/option&gt;\n    &lt;/ng-container&gt;\n  &lt;/ng-container&gt;\n&lt;/select&gt;\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"ngcontainer options work properly\" src=\"generated/images/guide/structural-directives/select-ngcontainer-anim.gif\" width=\"312\" height=\"100\">\n</div>\n</li>\n</ol>\n<p><a id=\"ngSwitch\"></a></p>\n<h2 id=\"switching-cases-with-ngswitch\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cj1lel7nzzyl1xvdn1bbvqlg\">用 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#switching-cases-with-ngswitch\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"350o1fh0jueo4wf1oe5z52gn8\">就像 JavaScript 的 <code>switch</code> 語句一樣。<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 會根據切換條件顯示幾個可能的元素中的一個。Angular 只會將選定的元素放入 DOM。</p>\n<!--todo: API Flagged -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mhghio3fy1npvp6n1wzyaw0e\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 是一組指令（共三個）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bphwurpfl95wru7i1dl2oreak\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 指令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cs0m74i8j6a05lypqnoqiqjvd\">一個屬性型指令，可以改變其伴隨指令的行為。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"900k0iv9kwdv2ntbsy3cinswp\">當其繫結值等於開關值時，將其元素新增到 DOM 中並在其繫結值不等於開關值時將其移除的結構型指令。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9a6s85dhtakh9dbko9q0vptzv\">當沒有選定的\n<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>時，將其元素新增到 DOM 中的結構型指令。</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yn6v2z26hud14j06xkzu2emw\">在每個元素（比如 <code>&lt;div&gt;</code>）上，把 <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code> 繫結到一個回傳開關值的表示式（比如 <code>feature</code>）。儘管這個例子中 <code>feature</code> 值是字串，但此開關值可以是任何型別。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"g01swpzl2kbkq62i3u05qmbb\">將各個分支元素繫結到 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 和 <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch\">\n&lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"currentItem.feature\"&gt;\n  &lt;app-stout-item    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'stout'\"    [item]=\"currentItem\"&gt;&lt;/app-stout-item&gt;\n  &lt;app-device-item   *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'slim'\"     [item]=\"currentItem\"&gt;&lt;/app-device-item&gt;\n  &lt;app-lost-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'vintage'\"  [item]=\"currentItem\"&gt;&lt;/app-lost-item&gt;\n  &lt;app-best-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"   [item]=\"currentItem\"&gt;&lt;/app-best-item&gt;\n&lt;!-- . . . --&gt;\n  &lt;app-unknown-item  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [item]=\"currentItem\"&gt;&lt;/app-unknown-item&gt;\n&lt;/div&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwr3hotry5e2enf5uze6232yt\">在父元件中，定義 <code>currentItem</code> 以便可以在 <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code> 表示式中使用它。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"item\">\ncurrentItem!: Item;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1j10l5q0z5vhgbnfiwk6zo9w3\">在每個子元件中，新增一個<a href=\"guide/inputs-outputs#input\" title=\"輸入屬性\">輸入屬性</a> <code>item</code>，該屬性會繫結到父元件的 <code>currentItem</code>。以下兩個片段顯示了父元件和其中一個子元件。其他子元件與 <code>StoutItemComponent</code> 中的相同。</p>\n<code-example header=\"In each child component, here StoutItemComponent\" path=\"built-in-directives/src/app/item-switch.component.ts\" region=\"input\">\nexport class StoutItemComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() item!: Item;\n}\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"Animation of NgSwitch\" src=\"generated/images/guide/built-in-directives/ngswitch.gif\" width=\"370\" height=\"256\">\n</div>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ey7hyx1yf2c3gdacp4xc38pru\">Switch 指令也同樣適用於內建 HTML 元素和 Web Component。比如，你可以像下面的例子中一樣把 <code>&lt;app-best-item&gt;</code> 分支替換為 <code>&lt;div&gt;</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch-div\">\n&lt;div *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"&gt; Are you as bright as {{currentItem.name}}?&lt;/div&gt;\n\n</code-example>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f55u1ek3sn2zncq3lm7a6g2a3\">有關如何建立自己的自定義指令的訊息，請參見<a href=\"guide/attribute-directives\">『屬性型指令』</a>和<a href=\"guide/structural-directives\">『結構型指令』</a>。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/architecture-components\n - guide/example-apps-list\n - guide/glossary\n - guide/structural-directives\n - guide/template-overview\n - guide/template-reference-variables\n - guide/template-syntax\n - guide/two-way-binding\n - guide/understanding-angular-overview\n - guide/understanding-template-expr-overview\n - guide/upgrade\n - tutorial/first-app/first-app-lesson-08\n - tutorial/tour-of-heroes/toh-pt2\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgClass\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/core/Component\n - api/core/Input\n - api/core/OnInit\n - api/core/ng-container\n - api/core/ng-template\n - api/forms/ControlValueAccessor\n - api/forms/DefaultValueAccessor\n - api/forms/FormsModule\n - api/forms/NgModel\n - guide/attribute-directives\n - guide/built-in-directives#adding-and-removing-classes-with-ngclass\n - guide/built-in-directives#adding-or-removing-an-element-with-ngif\n - guide/built-in-directives#built-in-attribute-directives\n - guide/built-in-directives#built-in-directives\n - guide/built-in-directives#built-in-structural-directives\n - guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\n - guide/built-in-directives#getting-the-index-of-ngfor\n - guide/built-in-directives#guarding-against-null\n - guide/built-in-directives#hosting-a-directive-without-a-dom-element\n - guide/built-in-directives#import-commonmodule-in-the-component\n - guide/built-in-directives#import-commonmodule-in-the-component-1\n - guide/built-in-directives#import-commonmodule-in-the-component-2\n - guide/built-in-directives#listing-items-with-ngfor\n - guide/built-in-directives#ngClass\n - guide/built-in-directives#ngFor\n - guide/built-in-directives#ngIf\n - guide/built-in-directives#ngModel\n - guide/built-in-directives#ngSwitch\n - guide/built-in-directives#ngmodel-and-value-accessors\n - guide/built-in-directives#ngstyle\n - guide/built-in-directives#repeating-a-component-view\n - guide/built-in-directives#repeating-elements-when-a-condition-is-true\n - guide/built-in-directives#setting-inline-styles-with-ngstyle\n - guide/built-in-directives#switching-cases-with-ngswitch\n - guide/built-in-directives#tracking-items-with-ngfor-trackby\n - guide/built-in-directives#using-ngclass-with-a-method\n - guide/built-in-directives#using-ngclass-with-an-expression\n - guide/built-in-directives#using-ngstyle-in-your-component\n - guide/built-in-directives#whats-next\n - guide/class-binding\n - guide/component-overview\n - guide/event-binding\n - guide/forms\n - guide/inputs-outputs#input\n - guide/property-binding\n - guide/router\n - guide/structural-directives\n - guide/structural-directives#one-per-element\n - guide/structural-directives#shorthand\n - guide/two-way-binding#how-two-way-binding-works\n-->"}
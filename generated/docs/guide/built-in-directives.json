{"id":"guide/built-in-directives","title":"内置指令","contents":"<div class=\"content\">\n  <h1 id=\"built-in-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caiz9ki6ffyzkmf5op1f69ql7\">内置指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-directives\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"astgzddze7lkak7s49qe29cj5\">指令是为 Angular 应用程序中的元素添加额外行为的类。使用 Angular 的内置指令，你可以管理表单、列表、样式以及要让用户看到的任何内容。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81el5yk7yllx1tewd03bnp7o0\">本章包含代码片段的工作实例参阅<live-example></live-example>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmb442h6gd450g20zg5nlwa2m\">Angular 指令的不同类型如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xl53l4zxtt9zqeaz239db9u8\">指令类型</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xi50d45ikwqiugyjoe0pp5h5\"><a href=\"guide/component-overview\">组件</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tep78e6av1bpnso1lz6d9xhm\">与模板一起使用。这种类型的指令是最常见的指令类型。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1da4zo64btu8kmed417oj2g4u\"><a href=\"guide/built-in-directives#built-in-attribute-directives\">属性型指令</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e096prald79saoo1myxrbhe5z\">改变元素、组件或其他指令的外观或行为。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4s35bmktu8pcbjk0damwuay1v\"><a href=\"guide/built-in-directives#built-in-structural-directives\">结构型指令</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d71djec5v8iyznwo5yc0ua851\">通过添加和移除DOM元素来改变DOM布局。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"du2bqpncka56p0gzmvu0jj33u\">本指南涵盖了内置的<a href=\"guide/built-in-directives#built-in-attribute-directives\">属性型指令</a>和<a href=\"guide/built-in-directives#built-in-structural-directives\">结构型指令</a>。</p>\n<p><a id=\"attribute-directives\"></a></p>\n<h2 id=\"built-in-attribute-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1eipjuhmfjhmqgdy43nl9mbtv\">内置属性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-attribute-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atxp7lwv7bpza9insnlzdyyxb\">属性型指令会监听并修改其它 HTML 元素和组件的行为、Attribute 和 Property。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpz9wy9hug10yscz17ujzgyim\">许多属性型指令是通过模块定义的，如\n<a href=\"api/common/CommonModule\"><code>CommonModule</code></a>、\n<a href=\"guide/router\" title=\"Routing and Navigation\"><code>RouterModule</code></a>和\n<a href=\"guide/forms\" title=\"Forms\"><code>FormsModule</code></a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uclkyyhffvpdwu2ghfqycl1d\">最常见的属性型指令包括以下内容：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28ewnx724ln4716bk3zhs7n32\">常见指令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngClass\"><code>NgClass</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8mui2fegfuur1qw7ln4l5blf\">添加和移除一组CSS类。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngstyle\"><code>NgStyle</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bd2adnc9m5u7g9nxbryv8psi3\">添加并移除一组 HTML 样式。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngModel\"><code>NgModel</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27bj432463lyy1ll85a2f31ff\">为 HTML 表单元素添加双向数据绑定。</td>\n</tr>\n</tbody>\n</table>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5d8m2w6ja6gcyp364mc5kmjeh\">内置指令只会使用公开 API。它们不会访问任何无法被其它指令访问的私有 API。</p>\n</div>\n<p><a id=\"ngClass\"></a></p>\n<h2 id=\"adding-and-removing-classes-with-ngclass\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qv42rpec4o5bvpbf53btzcqg\">用 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 添加和删除类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#adding-and-removing-classes-with-ngclass\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p9gdt92niuy6767n3jpe57j0\">用 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 同时添加或删除多个 CSS 类。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2y30xuyikoybfrfkczrbtrdar\">要添加或删除<em>单个</em>类，请使用<a href=\"guide/class-binding\">类绑定</a>而不是 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>。</p>\n</div>\n<h3 id=\"import-commonmodule-in-the-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zp2lyud2mylbu65b0kuf798b\">在组件中导入\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#import-commonmodule-in-the-component\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egisjw1atxoa6gj46hi0g5i8y\">要使用\n<code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>，请导入\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>并将其添加到组件的\n<code>imports</code>列表中。</p>\n<code-example header=\"src/app/app.component.ts (CommonModule import)\" path=\"built-in-directives/src/app/app.component.ts\" region=\"import-common-module\">\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n/* . . . */\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  /* . . . */\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, // &lt;-- import into the component\n    /* . . . */\n  ],\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  /* . . . */\n}\n\n</code-example>\n<h3 id=\"using-ngclass-with-an-expression\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyqoxorvh99cjkkm8katvhxu2\">将 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 与表达式一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#using-ngclass-with-an-expression\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lvmn8jyv0k5nfztk21nohavo\">在要设置样式的元素上，添加 <code>[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]</code> 并将其设置为等于某个表达式。在这里，是在 <code>app.component.ts</code> 中将 <code>isSpecial</code> 设置为布尔值 <code>true</code>。因为 <code>isSpecial</code> 为 true，所以 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 就会把 <code>special</code> 类应用于此 <code>&lt;div&gt;</code> 上。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"special-div\">\n&lt;!-- toggle the \"special\" class on/off with a property --&gt;\n&lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"isSpecial ? 'special' : ''\"&gt;This div is special&lt;/div&gt;\n\n</code-example>\n<h3 id=\"using-ngclass-with-a-method\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7674s73wsdetr6do17dz92z0q\">将 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 与方法一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#using-ngclass-with-a-method\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ki8d0cndc97vftptelxrabn2\">要将 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 与方法一起使用，请将方法添加到组件类中。在下面的示例中，<code>setCurrentClasses()</code> 使用一个对象来设置属性 <code>currentClasses</code>，该对象根据另外三个组件属性为 <code>true</code> 或 <code>false</code> 来添加或删除三个 CSS 类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czi25973pdd9ono44uqtw1ihe\">该对象的每个键（key）都是一个 CSS 类名。如果键为 <code>true</code>，则 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 添加该类。如果键为 <code>false</code>，则 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 删除该类。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"setClasses\">\ncurrentClasses: Record&lt;string, boolean&gt; = {};\n/* . . . */\nsetCurrentClasses() {\n  // CSS classes: added/removed per current state of component properties\n  this.currentClasses = {\n    saveable: this.canSave,\n    modified: !this.isUnchanged,\n    special: this.isSpecial,\n  };\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awsqtknbqwd0fxs1wqblsrvtj\">在模板中，把 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 属性绑定到 <code>currentClasses</code>，根据它来设置此元素的 CSS 类：</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgClass-1\">\n&lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"currentClasses\"&gt;This div is initially saveable, unchanged, and special.&lt;/div&gt;\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yeotq6q91c62veb95oojaawb\">在这个例子中，Angular 会在初始化以及发生更改的情况下应用这些类。完整的示例会在 <code>ngOnInit()</code> 中进行初始化以及通过单击按钮更改相关属性时调用 <code>setCurrentClasses()</code>。这些步骤对于实现 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 不是必需的。有关更多信息，请参见<live-example></live-example>中的 <code>app.component.ts</code> 和 <code>app.component.html</code>。</p>\n<p><a id=\"ngstyle\"></a></p>\n<h2 id=\"setting-inline-styles-with-ngstyle\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91cx9nabwbcwnhkx9ri1kug5i\">用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> 设置内联样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#setting-inline-styles-with-ngstyle\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"import-commonmodule-in-the-component-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zp2lyud2mylbu65b0kuf798b\">在组件中导入\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#import-commonmodule-in-the-component-1\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vnw1crv52ebgb1z89yugwq49\">要使用\n<code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>，请导入\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>并将其添加到组件的\n<code>imports</code>列表中。</p>\n<code-example header=\"src/app/app.component.ts (CommonModule import)\" path=\"built-in-directives/src/app/app.component.ts\" region=\"import-common-module\">\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n/* . . . */\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  /* . . . */\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, // &lt;-- import into the component\n    /* . . . */\n  ],\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  /* . . . */\n}\n\n</code-example>\n<h3 id=\"using-ngstyle-in-your-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2brvqzxmi24gdft7arqk6rj7y\">在你的组件中使用\n<code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#using-ngstyle-in-your-component\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crksxcwmvyu9fth03s0vt1t3d\">可以用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> 根据组件的状态同时设置多个内联样式。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnisfh4in1sb4hr010w8cteq5\">要使用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>，请向组件类添加一个方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bifclm5u386j5wktajw7hvpxv\">在下面的例子中，<code>setCurrentStyles()</code> 方法基于该组件另外三个属性的状态，用一个定义了三个样式的对象设置了 <code>currentStyles</code> 属性。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"setStyles\">\ncurrentStyles: Record&lt;string, string&gt; = {};\n/* . . . */\nsetCurrentStyles() {\n  // CSS styles: set per current state of component properties\n  this.currentStyles = {\n    'font-style': this.canSave ? 'italic' : 'normal',\n    'font-weight': !this.isUnchanged ? 'bold' : 'normal',\n    'font-size': this.isSpecial ? '24px' : '12px',\n  };\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vgcuxn5sukpczsv2dmdrw7o1\">要设置元素的样式，请将 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 属性绑定到 <code>currentStyles</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgStyle-2\">\n&lt;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"currentStyles\"&gt;\n  This div is initially italic, normal weight, and extra large (24px).\n&lt;/div&gt;\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6s1yxp1iihhph07xn4ou7uigw\">在这个例子中，Angular 会在初始化以及发生更改的情况下应用这些类。完整的示例会在 <code>ngOnInit()</code> 中进行初始化以及通过单击按钮更改相关属性时调用 <code>setCurrentStyles()</code>。不过，这些步骤对于实现 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 不是必需的。有关更多信息，请参见<live-example></live-example>中的 <code>app.component.ts</code> 和 <code>app.component.html</code>。</p>\n<p><a id=\"ngModel\"></a></p>\n<h2 id=\"displaying-and-updating-properties-with-ngmodel\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9flyi61cxu7izw4gut0zc2jwu\">用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 显示和更新属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9efxvvh0cuhajau12rcmkdbma\">可以用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令显示数据属性，并在用户进行更改时更新该属性。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33nrlrs0www4fzcpawa0z0nil\">导入\n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>并将其添加到 AppComponent 的\n<code>imports</code>列表中。</p>\n<code-example header=\"src/app/app.component.ts (FormsModule import)\" path=\"built-in-directives/src/app/app.component.ts\" region=\"import-forms-module\">\nimport {<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>} from '@angular/forms'; // &lt;--- JavaScript import from Angular\n/* . . . */\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  /* . . . */\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, // &lt;-- import into the component\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>, // &lt;--- import into the component\n    /* . . . */\n  ],\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  /* . . . */\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6k6c7lhj2i57fosevlsa2cqar\">在 HTML 的 <code>&lt;form&gt;</code> 元素上添加 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 绑定，并将其设置为等于此属性，这里是 <code>name</code>。</p>\n<code-example header=\"src/app/app.component.html (NgModel example)\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgModel-1\">\n&lt;label for=\"example-ngModel\"&gt;[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&lt;/label&gt;\n&lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zv49uluy1ram7pyuoo2dukj\">此 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 语法只能设置数据绑定属性。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"df8yreygeub4nshu8sj486hq5\">要自定义配置，你可以编写可展开的表单，该表单将属性绑定和事件绑定分开。使用<a href=\"guide/property-binding\">属性绑定</a>来设置属性，并使用<a href=\"guide/event-binding\">事件绑定</a>来响应更改。以下示例将 <code>&lt;input&gt;</code> 值更改为大写：</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"uppercase\">\n&lt;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"setUppercaseName($event)\" id=\"example-uppercase\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24amq336ygoafo63d0qw0a87f\">这里是所有这些变体的动画，包括这个大写转换的版本：</p>\n<div class=\"lightbox\">\n<img alt=\"NgModel variations\" src=\"generated/images/guide/built-in-directives/ng-model-anim.gif\" width=\"540\" height=\"264\">\n</div>\n<h3 id=\"ngmodel-and-value-accessors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afm67ruo33i84qkftogx83uue\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 和值访问器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngmodel-and-value-accessors\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1foi1g88nv28v0y0hnarwk0z4\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令适用于<a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a>支持的元素。Angular 为所有基本 HTML 表单元素提供了<em>值访问器。</em>有关更多信息，请参见<a href=\"guide/forms\">Forms</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2zi4hifsdficwu7frli9gjin\">要将 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 应用于非表单型内置元素或第三方自定义组件，必须编写一个值访问器。有关更多信息，请参见 <a href=\"api/forms/DefaultValueAccessor\">DefaultValueAccessor</a> 上的 API 文档。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6g5taec6f19axwsdifr59oev4\">当你编写 Angular 组件时，如果你根据 Angular 的双向绑定语法命名值和事件属性，则不需要值访问器或\n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code>。</p>\n</div>\n<p><a id=\"structural-directives\"></a></p>\n<h2 id=\"built-in-structural-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8vjsw7z25nbjq77brti34qpl\">内置结构型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-structural-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wdpmwphhd0fldt103pwg1xez\">结构型指令的职责是 HTML 布局。它们塑造或重塑 DOM 的<em>结构</em>，这通常是通过添加、移除和操纵它们所附加到的宿主元素来实现的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41psh9h6nhxtdyzbwvhvcd3wj\">本节会介绍最常见的内置结构型指令：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0mv9h9i8uaj6tybmgb9amqnd\">常见的内置结构型指令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngIf\"><code>NgIf</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edux643n7ps7m9ljm6ygvb8ug\">根据条件从模板中创建或销毁子视图。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngFor\"><code>NgFor</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"905yb851pxq2anb4liop6a3ep\">为列表中的每个条目重复一个节点。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngSwitch\"><code>NgSwitch</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kb35tv7y46xamaiia636xqtt\">一组在不同视图之间切换的指令。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21haabbwk9c5mjl3vw6c16ve7\">欲知详情，参阅<a href=\"guide/structural-directives\">结构型指令</a>。</p>\n<h3 id=\"import-commonmodule-in-the-component-2\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zp2lyud2mylbu65b0kuf798b\">在组件中导入\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#import-commonmodule-in-the-component-2\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"498awknmfvlvslbcmuw0qhy5v\">要使用内置结构型指令，请导入\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>并将其添加到组件的\n<code>imports</code>列表中。</p>\n<code-example header=\"src/app/app.component.ts (CommonModule import)\" path=\"built-in-directives/src/app/app.component.ts\" region=\"import-common-module\">\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n/* . . . */\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  /* . . . */\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, // &lt;-- import into the component\n    /* . . . */\n  ],\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  /* . . . */\n}\n\n</code-example>\n<p><a id=\"ngIf\"></a></p>\n<h2 id=\"adding-or-removing-an-element-with-ngif\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er9bi8q2en0k1jtkml6j3bp41\">用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 添加或删除元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#adding-or-removing-an-element-with-ngif\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"11ravccex3f50nvc8ominjsce\">可以将 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 指令应用于宿主元素来添加或删除元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19ljcmtadk7pzoblo69b8dzsw\">如果 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 为 <code>false</code>，则 Angular 将从 DOM 中移除一个元素及其后代。然后，Angular 会销毁其组件，从而释放内存和资源。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5y9rielz71gfne5xbpkyx4vq6\">要添加或删除元素，请在以下示例 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 绑定到条件表达式，比如 <code>isActive</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-1\">\n&lt;app-item-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isActive\" [item]=\"item\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jp6w1809o986rljogzqvr7bi\">当 <code>isActive</code> 表达式返回真值时，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 会把 <code>ItemDetailComponent</code> 添加到 DOM 中。当表达式为假值时，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 会从 DOM 中删除 <code>ItemDetailComponent</code> 并销毁该组件及其所有子组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yzict1o2i5mv12oxbe68ibuc\">关于 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 <code>NgIfElse</code> 的更多信息，请参见<a href=\"api/common/NgIf\">NgIf API 文档</a>。</p>\n<h3 id=\"guarding-against-null\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ubwf6l97ewixb2gkyzoeserh\">防止 <code>null</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#guarding-against-null\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"v0d78bbhli61kgd4cw8fvo0v\">默认情况下，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 会阻止显示已绑定到空值的元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gxeet56p82cb6ixutm7bf3ae\">要使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 保护 <code>&lt;div&gt;</code>，请将 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"yourProperty\"</code> 添加到此 <code>&lt;div&gt;</code>。在下面的例子中，<code>currentCustomer</code> 名字出现了，是因为确实存在一个 <code>currentCustomer</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"currentCustomer\"&gt;Hello, {{currentCustomer.name}}&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ua004zcztpfeki2zknojk7o5\">但是，如果该属性为 <code>null</code>，则 Angular 就不会显示 <code>&lt;div&gt;</code>。在这个例子中，Angular 就不会显示 <code>nullCustomer</code>，因为它为 <code>null</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2b\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"nullCustomer\"&gt;Hello, &lt;span&gt;{{nullCustomer}}&lt;/span&gt;&lt;/div&gt;\n\n</code-example>\n<p><a id=\"ngFor\"></a></p>\n<h2 id=\"listing-items-with-ngfor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7h02rbrr278mt6uwwppvot58i\"><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 条目列表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#listing-items-with-ngfor\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14d9fsijrgoymt2j7yj6a7flp\">可以用 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 来指令显示条目列表。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eblekjztgb1h51zqfekucb7ig\">定义一个 HTML 块，该块会决定 Angular 如何渲染单个条目。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yc421yu35wpulurdsvj41xai\">要列出你的条目，请把一个简写形式 <code>let item of items</code> 赋值给 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>。</li>\n</ol>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;{{item.name}}&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7h7ot34a3sjlouh3oj6no3st\">字符串 <code>\"let item of items\"</code> 会指示 Angular 执行以下操作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58pvkvv730yvtj2da86o4c4xd\">将 <code>items</code> 中的每个条目存储在局部循环变量 <code>item</code> 中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59i8vhe6kvqblcwawf7xhc642\">让每个条目都可用于每次迭代时的模板 HTML 中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dlac2y3pjp3xgy05d3cgrk0p3\">将 <code>\"let item of items\"</code> 转换为环绕宿主元素的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6e1o3tqzte17oxob3g38i92ul\">对列表中的每个 <code>item</code> 复写这个 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dr32qg0cz23irq6u0vzdwmahn\">欲知详情，参阅<a href=\"guide/structural-directives\">结构型指令</a>中的<a href=\"guide/structural-directives#shorthand\">结构型指令的简写形式</a>部分。</p>\n<h3 id=\"repeating-a-component-view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vl3nq6w0uqh4zf73ib40ngxl\">复写组件视图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#repeating-a-component-view\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dss4u2430o95qzmablsjmdhc\">要复写某个组件元素，请将 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 应用于其选择器。在以下示例中，选择器为 <code>&lt;app-item-detail&gt;</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-2\">\n&lt;app-item-detail *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ep36gf1fvvyo09lgm5vmmjaf\">你可以在以下位置引用模板输入变量，比如 <code>item</code>：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9j5iv7hq4bctnafhtts7fepv0\">在 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的宿主元素中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erlq266rjjnhkzj2z7601y2v6\">在宿主元素的后代中，用以访问条目的属性</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96tka2vn3ysqq3lvovt0casg4\">以下示例首先在插值中引用 <code>item</code>，然后将它通过绑定传递给 <code>&lt;app-item-detail&gt;</code> 组件的 <code>item</code> 属性。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1-2\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;{{item.name}}&lt;/div&gt;\n&lt;!-- . . . --&gt;\n&lt;app-item-detail *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43bf8fjzbbwggejt7s1il7xth\">有关模板输入变量的更多信息，请参见<a href=\"guide/structural-directives#shorthand\">结构型指令简写形式</a>。</p>\n<h3 id=\"getting-the-index-of-ngfor\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eplim2my3nteju7acribmwjkw\">获取 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>index</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#getting-the-index-of-ngfor\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyw2hurnpk412w75a68xw16ak\">可以获取 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>index</code>，并在模板中使用它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60mu23uze6dherfqgnamu3idq\">在 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中，添加一个分号和 <code>let i=index</code> 简写形式。下面的例子中把 <code>index</code> 取到一个名为 <code>i</code> 的变量中，并将其与条目名称一起显示。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-3\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items; let i=index\"&gt;{{i + 1}} - {{item.name}}&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0qhyg44vga6gst0nfm0wk844\"><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 指令上下文的 <code>index</code> 属性在每次迭代中都会返回该条目的从零开始的索引号。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92bob7hzk1xk0ut2h6aepmwwc\">Angular 会将此指令转换为 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>，然后反复使用此模板为列表中的每个 <code>item</code> 创建一组新的元素和绑定。有关简写形式的更多信息，请参见<a href=\"guide/structural-directives#shorthand\">《结构型指令》</a>指南。</p>\n<h2 id=\"repeating-elements-when-a-condition-is-true\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1x5xetyj51qeurt5rkocu9ly9\">当条件为真时复写元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#repeating-elements-when-a-condition-is-true\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3d5804ffy7nh8i1wcy0q4ren\">要在特定条件为真时重复某个 HTML 块，请将 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 放在包裹此 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 元素的容器元素上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ge1igq5fjdmox9co1nj9xynb\">有关更多信息，参阅<a href=\"guide/structural-directives#one-per-element\">每个元素只能有一个结构型指令</a>。</p>\n<p><a id=\"ngfor-with-trackby\"></a></p>\n<h3 id=\"tracking-items-with-ngfor-trackby\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79sgbkq1x3t7xqdy2ye9x0syq\">用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>trackBy</code> 跟踪条目<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#tracking-items-with-ngfor-trackby\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xggo3lb9gv9zrp7f7ja94pyv\">通过跟踪对条目列表的更改，可以减少应用程序对服务器的调用次数。使用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>trackBy</code> 属性，Angular 只能更改和重新渲染已更改的条目，而不必重新加载整个条目列表。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vrieztcbjfwvbcbt3gl21y3r\">向该组件添加一个方法，该方法返回 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 应该跟踪的值。这个例子中，该值是英雄的 <code>id</code>。如果浏览器已经渲染过此 <code>id</code>，Angular 就会跟踪它，而不会重新向服务器查询相同的 <code>id</code>。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"trackByItems\">\ntrackByItems(index: number, item: Item): number {\n  return item.id;\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mw8kl9y8ziysbx08h99gno6n\">在简写表达式中，将 <code>trackBy</code> 设置为 <code>trackByItems()</code> 方法。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"trackBy\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items; trackBy: trackByItems\"&gt;\n  ({{item.id}}) {{item.name}}\n&lt;/div&gt;\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dndd3fia80vhfl4y0xnn5n5ae\"><strong>更改这些 ID</strong> 会使用新的 <code>item.id</code> 创建新的条目。在下面的 <code>trackBy</code> 效果演示中，<strong>Reset items</strong> 会创建一些具有和以前相同的 <code>item.id</code> 的新条目。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"950whuq4v2w1b9927j1p2ivsn\">如果没有 <code>trackBy</code>，这些按钮都会触发完全的 DOM 元素替换。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2le3ooll2wr7ch81v2i8mtc5t\">有了 <code>trackBy</code>，则只有修改了 <code>id</code> 的按钮才会触发元素替换。</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"Animation of trackBy\" src=\"generated/images/guide/built-in-directives/ngfor-trackby.gif\" width=\"492\" height=\"442\">\n</div>\n<p><a id=\"ngcontainer\"></a></p>\n<h2 id=\"hosting-a-directive-without-a-dom-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5qba9hc86fepm51eojzw440i9\">为没有 DOM 元素的指令安排宿主<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#hosting-a-directive-without-a-dom-element\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhmdtghtdveit6f9qubu13ofk\">Angular 的 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 是一个分组元素，它不会干扰样式或布局，因为 Angular 不会将其放置在 DOM 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpg2tfxp9hz3jen1d72nvnyqt\">当没有单个元素承载指令时，可以使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ulidbvx02nach35wqqawnchq\">这是使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 的条件化段落。</p>\n<code-example header=\"src/app/app.component.html (ngif-ngcontainer)\" path=\"structural-directives/src/app/app.component.html\" region=\"ngif-ngcontainer\">\n&lt;p&gt;\n  I turned the corner\n  &lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n    and saw {{hero.name}}. I waved\n  &lt;/ng-container&gt;\n  and continued on my way.\n&lt;/p&gt;\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"ngcontainer paragraph with proper style\" src=\"generated/images/guide/structural-directives/good-paragraph.png\" width=\"509\" height=\"15\">\n</div>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ubrhnzcqkt6mp4vvvy9g89s7\">从 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 中导入 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24ds7db1acx7f5dl9og0fmf6f\">将 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 添加到相关 Angular 模块的 imports 部分。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33wb9apn39rgpcd4diq3ryaee\">要有条件地排除 <code>&lt;option&gt;</code>，请将 <code>&lt;option&gt;</code> 包裹在 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 中。</p>\n<code-example header=\"src/app/app.component.html (select-ngcontainer)\" path=\"structural-directives/src/app/app.component.html\" region=\"select-ngcontainer\">\n&lt;div&gt;\n  Pick your favorite hero\n  (&lt;label for=\"showSad\"&gt;&lt;input id=\"showSad\" type=\"checkbox\" checked (change)=\"showSad = !showSad\"&gt;show sad&lt;/label&gt;)\n&lt;/div&gt;\n&lt;select [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\"&gt;\n  &lt;ng-container *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\"&gt;\n    &lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSad || h.emotion !== 'sad'\"&gt;\n      &lt;option [ngValue]=\"h\"&gt;{{h.name}} ({{h.emotion}})&lt;/option&gt;\n    &lt;/ng-container&gt;\n  &lt;/ng-container&gt;\n&lt;/select&gt;\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"ngcontainer options work properly\" src=\"generated/images/guide/structural-directives/select-ngcontainer-anim.gif\" width=\"312\" height=\"100\">\n</div>\n</li>\n</ol>\n<p><a id=\"ngSwitch\"></a></p>\n<h2 id=\"switching-cases-with-ngswitch\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cj1lel7nzzyl1xvdn1bbvqlg\">用 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#switching-cases-with-ngswitch\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"350o1fh0jueo4wf1oe5z52gn8\">就像 JavaScript 的 <code>switch</code> 语句一样。<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 会根据切换条件显示几个可能的元素中的一个。Angular 只会将选定的元素放入 DOM。</p>\n<!--todo: API Flagged -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mhghio3fy1npvp6n1wzyaw0e\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 是一组指令（共三个）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bphwurpfl95wru7i1dl2oreak\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 指令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cs0m74i8j6a05lypqnoqiqjvd\">一个属性型指令，可以改变其伴随指令的行为。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"900k0iv9kwdv2ntbsy3cinswp\">当其绑定值等于开关值时，将其元素添加到 DOM 中并在其绑定值不等于开关值时将其移除的结构型指令。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9a6s85dhtakh9dbko9q0vptzv\">当没有选定的\n<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>时，将其元素添加到 DOM 中的结构型指令。</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yn6v2z26hud14j06xkzu2emw\">在每个元素（比如 <code>&lt;div&gt;</code>）上，把 <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code> 绑定到一个返回开关值的表达式（比如 <code>feature</code>）。尽管这个例子中 <code>feature</code> 值是字符串，但此开关值可以是任何类型。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"g01swpzl2kbkq62i3u05qmbb\">将各个分支元素绑定到 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 和 <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch\">\n&lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"currentItem.feature\"&gt;\n  &lt;app-stout-item    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'stout'\"    [item]=\"currentItem\"&gt;&lt;/app-stout-item&gt;\n  &lt;app-device-item   *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'slim'\"     [item]=\"currentItem\"&gt;&lt;/app-device-item&gt;\n  &lt;app-lost-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'vintage'\"  [item]=\"currentItem\"&gt;&lt;/app-lost-item&gt;\n  &lt;app-best-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"   [item]=\"currentItem\"&gt;&lt;/app-best-item&gt;\n&lt;!-- . . . --&gt;\n  &lt;app-unknown-item  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [item]=\"currentItem\"&gt;&lt;/app-unknown-item&gt;\n&lt;/div&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwr3hotry5e2enf5uze6232yt\">在父组件中，定义 <code>currentItem</code> 以便可以在 <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code> 表达式中使用它。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"item\">\ncurrentItem!: Item;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1j10l5q0z5vhgbnfiwk6zo9w3\">在每个子组件中，添加一个<a href=\"guide/inputs-outputs#input\" title=\"输入属性\">输入属性</a> <code>item</code>，该属性会绑定到父组件的 <code>currentItem</code>。以下两个片段显示了父组件和其中一个子组件。其他子组件与 <code>StoutItemComponent</code> 中的相同。</p>\n<code-example header=\"In each child component, here StoutItemComponent\" path=\"built-in-directives/src/app/item-switch.component.ts\" region=\"input\">\nexport class StoutItemComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() item!: Item;\n}\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"Animation of NgSwitch\" src=\"generated/images/guide/built-in-directives/ngswitch.gif\" width=\"370\" height=\"256\">\n</div>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ey7hyx1yf2c3gdacp4xc38pru\">Switch 指令也同样适用于内置 HTML 元素和 Web Component。比如，你可以像下面的例子中一样把 <code>&lt;app-best-item&gt;</code> 分支替换为 <code>&lt;div&gt;</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch-div\">\n&lt;div *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"&gt; Are you as bright as {{currentItem.name}}?&lt;/div&gt;\n\n</code-example>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f55u1ek3sn2zncq3lm7a6g2a3\">有关如何构建自己的自定义指令的信息，请参见<a href=\"guide/attribute-directives\">“属性型指令”</a>和<a href=\"guide/structural-directives\">“结构型指令”</a>。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/architecture-components\n - guide/example-apps-list\n - guide/glossary\n - guide/structural-directives\n - guide/template-overview\n - guide/template-reference-variables\n - guide/template-syntax\n - guide/two-way-binding\n - guide/understanding-angular-overview\n - guide/understanding-template-expr-overview\n - guide/upgrade\n - tutorial/first-app/first-app-lesson-08\n - tutorial/tour-of-heroes/toh-pt2\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgClass\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/core/Component\n - api/core/Input\n - api/core/OnInit\n - api/core/ng-container\n - api/core/ng-template\n - api/forms/ControlValueAccessor\n - api/forms/DefaultValueAccessor\n - api/forms/FormsModule\n - api/forms/NgModel\n - guide/attribute-directives\n - guide/built-in-directives#adding-and-removing-classes-with-ngclass\n - guide/built-in-directives#adding-or-removing-an-element-with-ngif\n - guide/built-in-directives#built-in-attribute-directives\n - guide/built-in-directives#built-in-directives\n - guide/built-in-directives#built-in-structural-directives\n - guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\n - guide/built-in-directives#getting-the-index-of-ngfor\n - guide/built-in-directives#guarding-against-null\n - guide/built-in-directives#hosting-a-directive-without-a-dom-element\n - guide/built-in-directives#import-commonmodule-in-the-component\n - guide/built-in-directives#import-commonmodule-in-the-component-1\n - guide/built-in-directives#import-commonmodule-in-the-component-2\n - guide/built-in-directives#listing-items-with-ngfor\n - guide/built-in-directives#ngClass\n - guide/built-in-directives#ngFor\n - guide/built-in-directives#ngIf\n - guide/built-in-directives#ngModel\n - guide/built-in-directives#ngSwitch\n - guide/built-in-directives#ngmodel-and-value-accessors\n - guide/built-in-directives#ngstyle\n - guide/built-in-directives#repeating-a-component-view\n - guide/built-in-directives#repeating-elements-when-a-condition-is-true\n - guide/built-in-directives#setting-inline-styles-with-ngstyle\n - guide/built-in-directives#switching-cases-with-ngswitch\n - guide/built-in-directives#tracking-items-with-ngfor-trackby\n - guide/built-in-directives#using-ngclass-with-a-method\n - guide/built-in-directives#using-ngclass-with-an-expression\n - guide/built-in-directives#using-ngstyle-in-your-component\n - guide/built-in-directives#whats-next\n - guide/class-binding\n - guide/component-overview\n - guide/event-binding\n - guide/forms\n - guide/inputs-outputs#input\n - guide/property-binding\n - guide/router\n - guide/structural-directives\n - guide/structural-directives#one-per-element\n - guide/structural-directives#shorthand\n - guide/two-way-binding#how-two-way-binding-works\n-->"}
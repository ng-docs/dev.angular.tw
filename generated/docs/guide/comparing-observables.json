{"id":"guide/comparing-observables","title":"可观察对象与其它技术的比较","contents":"<div class=\"content\">\n  <h1 id=\"observables-compared-to-other-techniques\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1uvjh233wlltgdgmc1lv7vzw\">可观察对象与其它技术的比较<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/comparing-observables#observables-compared-to-other-techniques\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1b5nywrnuglua848xmxxusn24\">你可以经常使用可观察对象（Observable）而不是承诺（Promise）来异步传递值。类似的，可观察对象也可以取代事件处理器的位置。最后，由于可观察对象传递多个值，所以你可以在任何可能构建和操作数组的地方使用可观察对象。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwmniztpm0vvub1fpyn6mns4x\">在这些情况下，可观察对象的行为与其替代技术有一些差异，不过也提供了一些显著的优势。下面是对这些差异的详细比较。</p>\n<h2 id=\"observables-compared-to-promises\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5eewgta4y1fj0mjdgkxxi1pg0\">可观察对象 vs. 承诺（Promise）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/comparing-observables#observables-compared-to-promises\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93zirhsxkt9m80iq2cly7i97l\">可观察对象经常拿来和 Promise 进行对比。有一些关键的不同点：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18gxh2wm84ane44sz21qr8ar\">Observable的执行被延迟；计算直到订阅时才开始。 Promise在创建时立即执行。 这使得Observable非常适用于定义可以根据需要运行的配方。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmd1q524fkafaxz3vfptxmz64\">可观察对象能提供多个值。Promise 只提供一个。这让可观察对象可用于随着时间的推移获取多个值。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cd1dk1etxn54sllccr0vun2io\">Observable值可以通过操作符和订阅来进行转换。RxJS操作符提供了丰富的变换方式，使得可以在系统的其他部分传递复杂的变换，而不会导致过早执行工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6fppj7t4dsronuyt5cifoo2kj\">Promises具有\n<code>.then()</code>子句，可以在工作完成后转换值。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alsdzr2r0hcc54uxjhzlobs9e\">Observable和Promises以大致相当的效率处理错误。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ca52814cirw6revdfg3zruecq\">以下部分将更详细地探讨这些内容。</p>\n<h3 id=\"creation-and-subscription\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2svsa3dj6a6co8ddigtxhyhhr\">创建与订阅<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/comparing-observables#creation-and-subscription\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72c3ujlolmjiuuuy0zpp8rx3e\">Observable直到有消费者订阅时才会执行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ppk8t2k66hjcg8cxrcoiblwe\"><code>subscribe()</code>启动Observable的行为，可能同步或异步执行，并随时间产生一个、多个或零个值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7x3ilf0dsoix37jyp5cfoo3rf\">对于“单播”Observable，如果再次调用\n<code>subscribe</code>，将得到一个新的Observable执行，其产生自己的值。在“多播”Observable（例如\n<code>Subject</code>或使用\n<code>shareReplay</code>操作符的Observable）上调用\n<code>subscribe</code>只是向已运行的Observable添加另一个\n<em>订阅者</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5e3mgj36zcfzdcmhxpztiuns\"><code>subscribe</code>调用是终点。在\n<code>subscribe(...)</code>之后无法继续操作值。</p>\n<code-example header=\"src/observables.ts (observable)\" path=\"comparing-observables/src/observables.ts\" region=\"observable\">\n\n// declare a publishing operation\nconst observable = new Observable&lt;number&gt;(observer =&gt; {\n  // Subscriber fn...\n});\n\n// initiate execution\nobservable.subscribe(value =&gt; {\n  // observer handles notifications\n});\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32b4mbt9v3iccb6lkku1ip0cj\">Promise在创建时立即执行。没有延迟执行，因此没有\n<code>subscribe()</code>的等效物。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ci92z9r2gmbcpkahtd6z24wjj\">Promise始终是异步的，最多可以产生一个值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axzm5nkwmyj8iw0u5i5ba0mx3\">没有办法重新启动一个 Promise，并且它将在 Promise 的生命周期内保留其结果值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1picjn964r571kkocp6n3ob82\">你可以将额外的 \n<code>then</code> 子句链接到一个 Promise。</p>\n<code-example header=\"src/promises.ts (promise)\" path=\"comparing-observables/src/promises.ts\" region=\"promise\">\n// initiate execution\nlet promise = new Promise&lt;number&gt;(resolve =&gt; {\n  // Executer fn...\n});\npromise.then(value =&gt; {\n  // handle result here\n});\n\n</code-example>\n</li>\n</ul>\n<p><a id=\"chaining\"></a></p>\n<h3 id=\"transformations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djhfnjgyf56rtwd1cyxx250qc\">转换<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/comparing-observables#transformations\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etpe0yppd0k95s5e515lg85kx\">开发者可以在订阅和管道操作符中转换值。RxJS 拥有大量操作符，适用于许多复杂场景，包括多种组合和拆分可观察对象的方式。</p>\n<code-example header=\"src/observables.ts (operators and multiple values)\" path=\"comparing-observables/src/observables.ts\" region=\"operators\">\n/** Emit 0, 2, 4 every 10ms */\nconst observable1$ = interval(10).pipe(\n  map(value  =&gt; 2 * value), // double the interval values: 0, 1, 2, ...\n  take(3) // take only the first 3 emitted values\n);\n\n/** Emit 'Ta Da!' after 10ms */\nconst observable2$ = of('Ta Da!').pipe(delay(10));\n\n/** Observable processes all of observable1 first, then all of observable2.\n * Emits 0, 2, 4, 'Ta Da! after about 40ms' */\nconst combined$ = concat(observable1$, observable2$);\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80h3abtmps4renfy1cpwh1y1j\">Promise 没有等效于 \n<code>subscribe()</code>。你可以通过一个或多个 \n<code>.then</code> 子句转换 Promise 发出的值。Promise 有一小组组合器（例如 \n<code>all</code>、\n<code>any</code>、\n<code>race</code>）。</p>\n<code-example header=\"src/promises.ts (chained .then)\" path=\"comparing-observables/src/promises.ts\" region=\"chain\">\npromise\n  .then(value =&gt; 2 * value)\n  .then(value =&gt; -value);\n\n</code-example>\n</li>\n</ul>\n<h3 id=\"cancellation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hig5i3venj9rjxs56pfm4tia\">可取消<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/comparing-observables#cancellation\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13k0os0xart9ch6bxa5xee38\">可观察对象的订阅是可取消的。取消订阅会移除监听器，使其不再接受将来的值，并通知订阅者函数取消正在进行的工作。</p>\n<code-example header=\"src/observables.ts (unsubscribe)\" path=\"comparing-observables/src/observables.ts\" region=\"unsubscribe\">\n\nconst subscription = observable.subscribe(() =&gt; {\n  // observer handles notifications\n});\n\nsubscription.unsubscribe();\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1i73fuc34jlgxnsztih4h9idw\">Promise 是不可取消的。</p>\n</li>\n</ul>\n<h3 id=\"error-handling\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ad0cx4y7txhii62pgdd0mpma9\">错误处理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/comparing-observables#error-handling\"><i class=\"material-icons\">link</i></a></h3>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9pki0ydvnywfnkbjt98vctvtm\">可观察对象的执行错误可以使用 \n<code>catchError()</code> 操作符或在 \n<code>subscribe</code> 中处理。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40zxe52vwq97sv52an47fxhf9\"><code>catchError</code> 可以将可观察对象放回正常路径，继续产生值，或者重新抛出错误。未捕获的错误会取消所有订阅者。</p>\n<code-example header=\"src/observables.ts (error)\" path=\"comparing-observables/src/observables.ts\" region=\"error\">\nconst observable = new Observable&lt;number&gt;(() =&gt; {\n  throw new Error('my error');\n});\n\nobservable.pipe(\n  catchError(error =&gt; of(42)), // recover within the operator\n  map(() =&gt; { throw new Error('another error'); }), // oops\n  catchError(error =&gt; { throw new Error('revised error'); }) // modify and rethrow\n).subscribe({\n  error: err =&gt; console.error(err) // report error in subscribe\n});\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3t6b1pzsvlvy7y2df1gvzvigt\">Promise 错误可以使用 \n<code>.catch()</code> 或在 \n<code>.then()</code> 的第二个参数中处理。</p>\n<code-example header=\"src/promises.ts (error)\" path=\"comparing-observables/src/promises.ts\" region=\"error\">\nconst promise = Promise.reject('my error') // promise that errors\n  .catch(error =&gt; 42) // recover from error\n  .then(() =&gt; { throw new Error('another error'); }) // oops\n  .then(null, error =&gt; { throw new Error('revised error'); }) // modify and rethrow\n  .catch(error =&gt; {\n    console.error(error.toString()); // report error ...\n    throw error; // and rethrow so promise remains \"rejected\"\n  });\n\n\n</code-example>\n</li>\n</ul>\n<h3 id=\"cheat-sheet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4n96tkco64h1h1y9w8ni6s4gh\">速查表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/comparing-observables#cheat-sheet\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d92908fz00mior3cishfzwfu8\">下列代码片段揭示了同样的操作要如何分别使用可观察对象和 Promise 进行实现。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2iiqzi4ejrbx2pmt311k8lcmp\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekbi3pmy2k9b83xgx9cjqwdyg\">可观察对象</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9t0zb0teik57tknhxv7736w7u\">Promise</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65aoee8m9iko3yov1zjh599wy\">创建</td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> new Observable((observer) =&gt; { \n&nbsp; observer.next(123); \n}); </code-example></td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> new Promise((resolve, reject) =&gt; { \n&nbsp; resolve(123); \n}); </code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2u7ahyiy0btxd090py74ioj0w\">转换</td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> obs.pipe(map((value) =&gt; value * 2));</code-example></td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> promise.then((value) =&gt; value * 2);</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ak8s9elsmfa2mtzkjrtjtrcrr\">订阅</td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> sub = obs.subscribe((value) =&gt; { \n&nbsp; console.log(value) \n});</code-example></td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> promise.then((value) =&gt; { \n&nbsp; console.log(value); \n}); </code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vmer097a4mmhtcjscxqoflnv\">取消订阅</td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> sub.unsubscribe();</code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nqb2lfrbb3h9905eym4h5wfj\">由 Promise 解析隐含的。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"observables-compared-to-events-api\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88bsvgmzw28hlyrn79r81rkuw\">可观察对象 vs. 事件 API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/comparing-observables#observables-compared-to-events-api\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dp58ry1hg0gqupwhxpp8go0t\">可观察对象和事件 API 中的事件处理器很像。这两种技术都会定义通知处理器，并使用它们来处理一段时间内传递的多个值。订阅可观察对象与添加事件处理器是等价的。一个显著的不同是你可以配置可观察对象，使其在把事件传给事件处理器之前先进行转换。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"i51se048po8o9vz2tdkv42ku\">使用可观察对象来处理错误和异步操作在 HTTP 请求这样的场景下更加具有一致性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"936sfb6ynf03sknvdjx0g3y2g\">下列代码片段揭示了同样的操作要如何分别使用可观察对象和事件 API 进行实现。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekbi3pmy2k9b83xgx9cjqwdyg\">可观察对象</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ddowl6iqycgbqmuv9g9rqdzo\">事件 API</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fiqllqa5hsdumesfzvqz6nrx\">创建和取消</td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> // Setup \nconst clicks$ = fromEvent(buttonEl, 'click'); \n// Begin listening \nconst subscription = clicks$ \n&nbsp; .subscribe(e =&gt; console.log('Clicked', e)) \n// Stop listening \nsubscription.unsubscribe(); </code-example></td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\">function handler(e) { \n&nbsp; console.log('Clicked', e); \n} \n// Setup &amp; begin listening \nbutton.addEventListener('click', handler); \n// Stop listening \nbutton.removeEventListener('click', handler); </code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74rywnpt0ooxmnhwzc08xvy6j\">订阅</td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\">observable.subscribe(() =&gt; { \n&nbsp; // notification handlers here \n});</code-example></td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\">element.addEventListener(eventName, (event) =&gt; { \n&nbsp; // notification handler here \n}); </code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27io2zcn0syxgd4dfu8paj1a1\">配置</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abdqge5vo0umfss4y5dj511c5\">监听按键，但提供一个表示输入框值的流。 \n<code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\">\n  fromEvent(inputEl, 'keydown').pipe( &nbsp; map(e =&gt; e.target.value) ); \n</code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fa773trvtdks4plnmu2kzm8k\">不支持配置。 \n<code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\">\n  element.addEventListener(eventName, (event) =&gt; { &nbsp; // 在事件传递给处理程序之前，无法将传递的事件更改为其他值 }); \n</code-example></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"observables-compared-to-arrays\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"rh8zhnj0g4kx6gkj21bp13s1\">可观察对象 vs. 数组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/comparing-observables#observables-compared-to-arrays\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bt12k0o1ltay16luvc7u2xiuw\">可观察对象会随时间生成值。数组是用一组静态的值创建的。某种意义上，可观察对象是异步的，而数组是同步的。\n在下面的例子中，➞ 符号表示异步传递值。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bulyvki1easdsqhng9yr2vtyi\">数值</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekbi3pmy2k9b83xgx9cjqwdyg\">可观察对象</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"412gntjhz0sr7gc41duksraqf\">数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tt94hxd0d5a0h3gexcbnp8uf\">给定</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbqq5nf261hcbetuv4dsv17aq\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> obs: →1→2→3→5→7 </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> obsB: →'a'→'b'→'c' </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwwj2nye9poemifhrsvwvzg2y\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> arr: [1, 2, 3, 5, 7] </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> arrB: ['a', 'b', 'c'] </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code>concat()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vcnu59px6lxnlygbhl30h6pl\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> concat(obs, obsB) </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> →1→2→3→5→7→'a'→'b'→'c' </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2wmgss2vozkb8ia9tubs175a\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> arr.concat(arrB) </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> [1,2,3,5,7,'a','b','c'] </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code>filter()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2aesjjn2l1flb19eh7jg3okvp\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> obs.pipe(filter((v) =&gt; v&gt;3)) </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> →5→7 </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xv9blgnwv8chabgv0s2xciwx\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> arr.filter((v) =&gt; v&gt;3) </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> [5, 7] </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code>find()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56g11u2q3graaxlo1c1sdcn2k\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> obs.pipe(find((v) =&gt; v&gt;3)) </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> →5 </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"o2veek2ugh0d90cqgf7ny50\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> arr.find((v) =&gt; v&gt;3) </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> 5 </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code>findIndex()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cijdumvv9p97pqc5jrer5nc9v\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> obs.pipe(findIndex((v) =&gt; v&gt;3)) </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> →3 </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"105w18xwt1z6eec2vjb76hrl\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> arr.findIndex((v) =&gt; v&gt;3) </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> 3 </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code>forEach()</code></td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> obs.pipe(tap((v) =&gt; { \n &nbsp; console.log(v); \n })) \n 1 \n 2 \n 3 \n 5 \n 7 </code-example></td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> arr.forEach((v) =&gt; { \n &nbsp; console.log(v); \n }) \n 1 \n 2 \n 3 \n 5 \n 7 </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code>map()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l0esh41u3290cl7thevg3gka\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> obs.pipe(map((v) =&gt; -v)) </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> →-1→-2→-3→-5→-7 </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e34no0up1m3y76qjzdwypw0t7\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> arr.map((v) =&gt; -v) </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> [-1, -2, -3, -5, -7] </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code>reduce()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8uk4wbaxf41giaaalnabt6ih\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> obs.pipe(reduce((s,v)=&gt; s+v, 0)) </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> →18 </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56iryjdk9gau94mf2msh3tv2m\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> arr.reduce((s,v) =&gt; s+v, 0) </code-example> <code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> 18 </code-example></td>\n</tr>\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Fri Aug 25 2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/router/Event\n - guide/comparing-observables#cancellation\n - guide/comparing-observables#cheat-sheet\n - guide/comparing-observables#creation-and-subscription\n - guide/comparing-observables#error-handling\n - guide/comparing-observables#observables-compared-to-arrays\n - guide/comparing-observables#observables-compared-to-events-api\n - guide/comparing-observables#observables-compared-to-other-techniques\n - guide/comparing-observables#observables-compared-to-promises\n - guide/comparing-observables#transformations\n-->"}
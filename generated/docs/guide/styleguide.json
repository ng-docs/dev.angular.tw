{"id":"guide/styleguide","title":"风格指南","contents":"<div class=\"content\">\n  <h1 id=\"angular-coding-style-guide\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ylx9oo934z05t076pp7bvnko\">风格指南<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#angular-coding-style-guide\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"baidw9cmxqcb2zneipjfgemhy\">如果你正在寻找关于 Angular 语法、约定和应用组织结构的官方指南，那你就来对了。本风格指南介绍了提倡的约定，更重要的是，解释了为什么。</p>\n<p><a id=\"toc\"></a></p>\n<h2 id=\"style-vocabulary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2b24t88z0fln9makp43wlb0s8\">风格指南的用词<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-vocabulary\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0ejjb8oe2nwsyl3txutokblx\">每个指导原则都会描述好的或者坏的做法，所有指导原则都用同样的风格描述。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agorhzy4fntskczwxhr8fyby\">指导原则中使用的词汇用来表明推荐的程度。</p>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3eh4yajx7niui6j4jgr7u55dq\"><strong>坚持</strong>意味着总是应该遵循的约定。说<em>\"总是\"</em>可能显得有点绝对，应该<em>\"总是\"</em>遵循的指导原则非常少，不过，只有遇到极不寻常的情况才能打破<em>坚持</em>的原则。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b75i8x2ivdwbf2nv9al9ps9b5\"><strong>考虑</strong>表示通常应该遵循的指导原则。如果你能完全理解指导原则背后的含义，并且有很好的理由违反它，那就改吧。但要注意保持一致。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vk2wjanbnmk73os31tlgwrte\"><strong>避免</strong>表示你绝对不应该做的事。需要<em>避免</em>的代码范例会有明显的红色标题。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edggm6zbpwx00gdg1l5brg9ki\"><strong>为何</strong>？<br>\n之所以会给出那些建议的原因。</p>\n</div>\n<h2 id=\"file-structure-conventions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4h49ucjuvweu5iplgwbpbv3c5\">文件结构约定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#file-structure-conventions\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7w2vsvbrhmsezsof1uzpmqk\">在一些代码例子中，有的文件有一个或多个相似名字的配套文件。（比如 hero.component.ts 和 hero.component.html）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gn4y7dv3xwtox2jz1vhb6lff\">本指南将会使用像 <code>hero.component.ts|html|css|spec</code> 的简写来表示上面描述的多个文件，目的是保持本指南的简洁性，增加描述文件结构时的可读性。</p>\n<p><a id=\"single-responsibility\"></a></p>\n<h2 id=\"single-responsibility\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94xyn6xpuo11uve5x3vem22k8\">单一职责<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#single-responsibility\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chchey7fnqqx9qs1f8d5ljoa0\">对所有的组件、服务等等应用<a href=\"https://wikipedia.org/wiki/Single_responsibility_principle\"><em>单一职责原则(SRP)</em></a>。这样可以让应用更干净、更易读、更易维护、更易测试。</p>\n<p><a id=\"01-01\"></a></p>\n<h3 id=\"rule-of-one\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7d9eytxyhsb8eiyz4pzqc5606\">单一规则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#rule-of-one\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-01-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31b9bfte31oh3zr4zi45n827z\">风格 01-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-01-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2syssaf4i2fugtrttybhwzabm\"><strong>坚持</strong>每个文件只定义一样东西（比如服务或组件）。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekv9fkra1ymgiqxre1bv3d8u2\"><strong>考虑</strong>把文件大小限制在 400 行代码以内。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8h7244cmhocwh1p24f0z9cjq\"><strong>为什么</strong>? \n<br> 每个文件一个组件可以更容易阅读、维护，并避免与团队在源代码控制中发生冲突。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb4xc42q4ghfxvwi28bghcpos\"><strong>为何</strong>？<br>\n单组件文件可以防止一些隐蔽的程序缺陷，当把多个组件合写在同一个文件中时，可能造成共享变量、创建意外的闭包，或者与依赖之间产生意外耦合等情况。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94ola9cmdq9txrodfeghlaqzx\"><strong>为何</strong>？<br>\n单独的组件通常是该文件默认的导出，可以用路由器实现按需加载。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e75doh81yn6jnxyi6hzupojey\">最关键的是，可以让代码更加可复用、更容易阅读，减少出错的可能性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tqk75cacqg1budgyo9pzp6ko\">下面的<em>负面</em>例子定义了 <code>AppComponent</code>，它来引导应用程序，定义了 <code>Hero</code> 模型对象，并从服务器加载了英雄 ... 所有都在同一个文件。<em>不要这么做</em>。</p>\n<code-example format=\"typescript\" path=\"styleguide/src/01-01/app/heroes/hero.component.avoid.ts\" language=\"typescript\" header=\"app/heroes/hero.component.ts\">\n/* avoid */\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\ninterface Hero {\n  id: number;\n  name: string;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n      &lt;h1&gt;{{title}}&lt;/h1&gt;\n      &lt;pre&gt;{{heroes | json}}&lt;/pre&gt;\n    `,\n  styleUrls: ['app/app.component.css']\n})\nclass AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  title = 'Tour of Heroes';\n\n  heroes: Hero[] = [];\n\n  ngOnInit() {\n    getHeroes().then(heroes =&gt; (this.heroes = heroes));\n  }\n}\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>],\n  declarations: [AppComponent],\n  exports: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\nconst HEROES: Hero[] = [\n  { id: 1, name: 'Bombasto' },\n  { id: 2, name: 'Tornado' },\n  { id: 3, name: 'Magneta' }\n];\n\nfunction getHeroes(): Promise&lt;Hero[]&gt; {\n  return Promise.resolve(HEROES); // TODO: get hero data from the server;\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ev47lw4xoirufw3396ridjxew\">最好将组件及其支撑部件重新分配到独立的文件。</p>\n<code-tabs>\n    <code-pane header=\"main.ts\" path=\"styleguide/src/01-01/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n    <code-pane header=\"app/app.module.ts\" path=\"styleguide/src/01-01/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  exports: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n    <code-pane header=\"app/app.component.ts\" path=\"styleguide/src/01-01/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { HeroService } from './heroes';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-app',\n  template: `\n      &lt;toh-heroes&gt;&lt;/toh-heroes&gt;\n    `,\n  styleUrls: ['./app.component.css'],\n  providers: [HeroService]\n})\nexport class AppComponent {}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/01-01/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero, HeroService } from './shared';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  template: `\n      &lt;pre&gt;{{heroes | json}}&lt;/pre&gt;\n    `\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) {}\n\n  ngOnInit() {\n    this.heroService.getHeroes()\n      .then(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/shared/hero.service.ts\" path=\"styleguide/src/01-01/app/heroes/shared/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n  getHeroes() {\n    return Promise.resolve(HEROES);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/shared/hero.model.ts\" path=\"styleguide/src/01-01/app/heroes/shared/hero.model.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/shared/mock-heroes.ts\" path=\"styleguide/src/01-01/app/heroes/shared/mock-heroes.ts\">\nimport { Hero } from './hero.model';\n\nexport const HEROES: Hero[] = [\n  { id: 1, name: 'Bombasto' },\n  { id: 2, name: 'Tornado' },\n  { id: 3, name: 'Magneta' }\n];\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3x8ywe2kv6ed5afgk3sa08i0i\">随着应用程序的成长，本法则会变得越来越重要。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"01-02\"></a></p>\n<h3 id=\"small-functions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2k2hrftutwcc5v7l8ewgjpke\">小函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#small-functions\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-01-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3akt4073105sng1q7t1rbw478\">风格 01-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-01-02\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dmwm5ini1173gcineli7cy4v\"><strong>坚持</strong>定义简单函数</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5idqe4evomxfuvme26eyyh0qa\"><strong>考虑</strong>限制在 75 行之内。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l6lmkad5zddd1bibdjcso8fr\"><strong>为何</strong>？<br>\n简单函数更易于测试，特别是当它们只做一件事，只为一个目的服务时。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afdlwhstkv57urlnxwtvwj0od\"><strong>为何</strong>？<br>\n简单函数促进代码复用。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajdqwcmykyl4vbkkzyw2knp3n\"><strong>为何</strong>？<br>\n简单函数更易于阅读。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n2znm70m8tdwa434ghs5zxzd\"><strong>为何</strong>？<br>\n简单函数更易于维护。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1e5ae99ou3npwuzehmoqp02a\"><strong>为何</strong>？<br>\n小函数可避免易在大函数中产生的隐蔽性错误，比如与外界共享变量、创建意外的闭包或与依赖之间产生意外耦合等。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<h2 id=\"naming\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bw9rijmxkc9s0fx8psh0ebgeu\">命名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#naming\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d8kkstfd35u0sbtlfavvgek6q\">命名约定对可维护性和可读性非常重要。本指南为文件名和符号名推荐了一套命名约定。</p>\n<p><a id=\"02-01\"></a></p>\n<h3 id=\"general-naming-guidelines\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3g6tb3wxvv6zlp8j26hna6u1p\">总体命名原则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#general-naming-guidelines\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6w3g64oztprm7d4u3hkg725gf\">风格 02-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ar7u9gn259nku7e4o2p48yp5p\"><strong>坚持</strong>所有符号使用一致的命名规则。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21uulrc6zrdkunh6lk5hppdxm\"><strong>坚持</strong>遵循同一个模式来描述符号的特性和类型。推荐的模式为 <code>feature.type.ts</code>。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"z1q3mbg9aqsm7h12s07pldw9\"><strong>为什么</strong>? \n<br> 命名约定有助于提供一种一致的方式快速查找内容。 项目内的一致性至关重要。 团队内的一致性很重要。 公司内的一致性提供了巨大的效率。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ytcycvuo78qixk047e712sdm\"><strong>为何</strong>？<br>\n命名约定帮助你更快得找到想找的代码，也更容易理解它。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2ud2xjhq1zq2u406je12fqrg\"><strong>为什么</strong>? \n<br> 文件夹和文件的名称应清晰传达它们的意图。 例如，\n<code>app/heroes/hero-list.component.ts</code> 可能包含管理英雄列表的组件。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"02-02\"></a></p>\n<h3 id=\"separate-file-names-with-dots-and-dashes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bre81j13jqs96vxc27jwrmhf1\">使用点和横杠来分隔文件名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#separate-file-names-with-dots-and-dashes\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1syxw9ujh6cd1awlhzvt6uloh\">风格 02-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-02\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7i6lvzw34w54uqx4dnvahlpyg\"><strong>坚持</strong> 在描述性名字中，用横杠来分隔单词。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c96g4jkvohdy6y5z61849d4de\"><strong>坚持</strong>使用点来分隔描述性名字和类型。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32ngla9cn81agt8tdnavrwrmn\"><strong>坚持</strong>遵循先描述组件特性，再描述它的类型的模式，对所有组件使用一致的类型命名规则。推荐的模式为 <code>feature.type.ts</code>。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1my6q8ctb2jf1iidxgbci24lb\"><strong>坚持</strong>使用惯用的后缀来描述类型，包括 <code>*.service</code>、<code>*.component</code>、<code>*.pipe</code>、<code>.module</code>、<code>.directive</code>。必要时可以创建更多类型名，但必须注意，不要创建太多。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exm4nljcc5ivju5fnu15nhk9v\"><strong>为何</strong>？<br>\n类型名字提供一致的方式来快速的识别文件中有什么。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5gpftk7xsc0c70t8ub6g11cs\"><strong>为何</strong>？<br>\n类型名可以让你轻松利用编辑器或者 IDE 的模糊搜索功能找到特定文件类型。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xtcn0ge7jubyaf940eh89l4i\"><strong>为何</strong>？<br>\n像 <code>.service</code> 这样的没有简写过的类型名字，描述清楚，毫不含糊。\n像 <code>.srv</code>, <code>.svc</code>, 和 <code>.serv</code> 这样的简写可能令人困惑。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12cgavfb4ps0di8tvy8hgw8kz\"><strong>为何</strong>？<br>\n为自动化任务提供模式匹配。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"02-03\"></a></p>\n<h3 id=\"symbols-and-file-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7sq373oo9ics75ns296wzxloz\">符号名与文件名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#symbols-and-file-names\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-03\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zv5bu95qtgfoy0fo9pyvjxuc\">风格 02-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-03\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hxd5zilhm56u356eykrhv444\"><strong>坚持</strong>为所有东西使用一致的命名约定，以它们所代表的东西命名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bbfegarpzxq11ow8tog273ab\"><strong>坚持</strong>使用大写驼峰命名法来命名类。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8lz9ifcr6j39z1an5el623eg6\"><strong>坚持</strong>匹配符号名与它所在的文件名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60eeftgkaabhjmxumz6fnr9fx\"><strong>坚持</strong>在符号名后面追加约定的类型后缀（比如 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>、<code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>、<code>Module</code>、<code><a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code>、<code>Service</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"679kc4c1xckc00ehmj7vtxv5u\"><strong>坚持</strong>在文件名后面追加约定的类型后缀（比如 <code>.component.ts</code>、<code>.directive.ts</code>、<code>.module.ts</code>、<code>.pipe.ts</code>、<code>.service.ts</code>）。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jxgyz72rb89yu7u7g4ctyixn\"><strong>为什么</strong>? \n<br> 一致的约定使得能够快速识别和引用不同类型的资产变得容易。</p>\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u3r6vghayayquoaotd7dbcjc\">符号名称</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32w7n8dmecm813yjz3115x40v\">文件名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … }) \nexport class AppComponent { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76xbzn0oi6jg3c0yiy1ujxpgi\">app.component.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … }) \nexport class HeroesComponent { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ceq8y5iyua18izqyweilhrjv8\">heroes.component.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … }) \nexport class HeroListComponent { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"455ys7y5zs01enmzcmdit1d88\">hero-list.component.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … }) \nexport class HeroDetailComponent { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aryhbk8xxdgsat2th9kthyruw\">hero-detail.component.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ … }) \nexport class ValidationDirective { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7thnhoovblts7ye48khma0w6r\">validation.directive.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class AppModule </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c7z5ohn602naqu1r4rvnky6o\">app.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' }) \nexport class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"apwve13b2t9v6xxbmovuve3s3\">init-caps.pipe.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nexport class UserProfileService { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adshstn10symha1ywi4rjnzix\">user-profile.service.ts</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"02-04\"></a></p>\n<h3 id=\"service-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egtllfu0xqypw2j9doqbhvxc2\">服务名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#service-names\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-04\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5v00l93a0ngoquq2dv7kohwc3\">风格 02-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-04\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2n8luh77rfewi6lx4ycu0i84u\"><strong>坚持</strong>使用一致的规则命名服务，以它们的特性来命名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ze5f1sozay07p7vxbmvjy7f3\"><strong>坚持</strong>为服务的类名加上 <code>Service</code> 后缀。比如，获取数据或英雄列表的服务应该命名为 <code>DataService</code> 或 <code>HeroService</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e30ruoxykqi5xzwialob8sy7i\">有些词汇显然就是服务，比如那些以“-er”后缀结尾的。比如把记日志的服务命名为 <code>Logger</code> 就比 <code>LoggerService</code> 更好些。需要在你的项目中决定这种特例是否可以接受。但无论如何，都要尽量保持一致。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8utc6v0ydlqhwxcb0amzw877\"><strong>为何</strong>？<br>\n提供一致的方式来快速识别和引用服务。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"criz7hn9psqv0w6u6vmrp7xkr\"><strong>为何</strong>？<br>\n像 <code>Logger</code> 这样的清楚的服务名不需要后缀。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2s3e9altr3pjx54rgx2sk77sl\"><strong>为何</strong>？<br>\n像 <code>Credit</code> 这样的，服务名是名词，需要一个后缀。当不能明显分辨它是服务还是其它东西时，应该添加后缀。</p>\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u3r6vghayayquoaotd7dbcjc\">符号名称</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32w7n8dmecm813yjz3115x40v\">文件名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nexport class HeroDataService { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfa041rjmyrtjz89u2s723xr2\">hero-data.service.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nexport class CreditService { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ebz67lznp3vo48h0z9h28qmpk\">credit.service.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nexport class Logger { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnwweotozg8pbnv7wlrbxnlek\">logger.service.ts</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"02-05\"></a></p>\n<h3 id=\"bootstrapping\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p29plvvbfir7eo01lmju80ab\">引导<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#bootstrapping\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-05\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e7nh80rakku37masb53jx90c\">风格 02-05<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-05\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hd9543fx3bl3x9yi513ri7eb\"><strong>坚持</strong>把应用的引导程序和平台相关的逻辑放到名为 <code>main.ts</code> 的文件里。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ar8yx9jbhuxl2a2u6i07l6wic\"><strong>坚持</strong>在引导逻辑中包含错误处理代码。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15eqrm61klzk8p3rysy2wa5hp\"><strong>避免</strong>把应用逻辑放在 <code>main.ts</code> 中，而应放在组件或服务里。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1f0hze4q3mlcz4g0lb8s7e48i\"><strong>为何</strong>？<br>\n应用的启动逻辑遵循一致的约定。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kivn9y1u1i6mu5yzayo0ib3m\"><strong>为何</strong>？<br>\n这是从其它技术平台借鉴的常用约定。</p>\n</div>\n<code-example header=\"main.ts\" path=\"styleguide/src/02-05/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .then(success =&gt; console.log(`Bootstrap success`))\n  .catch(err =&gt; console.error(err));\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"05-02\"></a></p>\n<h3 id=\"component-selectors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ah1qcm2o8rsgoaurr2c6ymnmx\">组件选择器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#component-selectors\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e230js3j4tjqk0yfvnq73yygd\">风格 05-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-02\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sxqsutfoebo8t3si321nvfhe\"><strong>坚持</strong>使用<em>中线命名法（dashed-case）</em>或叫<em>烤串命名法（kebab-case）</em>来命名组件的元素选择器。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xy3hyv5oq77ulby8rh97qgo0\"><strong>为何</strong>？<br>\n让元素名和<a href=\"https://www.w3.org/TR/custom-elements\">自定义元素</a>规范保持一致。</p>\n</div>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-02/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'tohHeroButton',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-02/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-pane>\n    <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-02/app/app.component.html\">\n&lt;toh-hero-button&gt;&lt;/toh-hero-button&gt;\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"02-07\"></a></p>\n<h3 id=\"component-custom-prefix\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ce6k8qrf1qar1abids6xfjl86\">为组件添加自定义前缀<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#component-custom-prefix\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-07\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agcwyqgcbyh9j54xs4sckznp\">风格 02-07<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-07\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5g4q6x09d7frnai9zguelgafi\"><strong>坚持</strong>使用带连字符的小写元素选择器值（比如 <code>admin-users</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95qckcs2c10mu09ees9ooywsk\"><strong>坚持</strong>为组件选择器添加自定义前缀。比如，<code>toh</code> 前缀表示 <strong>T</strong>our <strong>o</strong>f <strong>H</strong>eroes（英雄之旅），而前缀 <code>admin</code> 表示管理特性区。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98yocngcaqmo0upp5ie70idke\"><strong>坚持</strong>使用前缀来识别特性区或者应用程序本身。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bm871wgexs6atdavsecwn4h57\"><strong>为何</strong>？<br>\n防止与其它应用中的组件和原生 HTML 元素发生命名冲突。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqu5mui9xrd8tzl5vakfod27g\"><strong>为何</strong>？<br>\n更容易在其它应用中推广和共享组件。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqiwxki58lfpu0be7e8pru1t7\"><strong>为何</strong>？<br>\n组件在 DOM 中更容易被区分出来。</p>\n</div>\n<code-example header=\"app/heroes/hero.component.ts\" path=\"styleguide/src/02-07/app/heroes/hero.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n// HeroComponent is in the Tour of Heroes feature\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero'\n})\nexport class HeroComponent {}\n\n</code-example>\n<code-example header=\"app/users/users.component.ts\" path=\"styleguide/src/02-07/app/users/users.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n// UsersComponent is in an Admin feature\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'users'\n})\nexport class UsersComponent {}\n\n</code-example>\n<code-example header=\"app/heroes/hero.component.ts\" path=\"styleguide/src/02-07/app/heroes/hero.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero'\n})\nexport class HeroComponent {}\n\n</code-example>\n<code-example header=\"app/users/users.component.ts\" path=\"styleguide/src/02-07/app/users/users.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'admin-users'\n})\nexport class UsersComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"02-06\"></a></p>\n<h3 id=\"directive-selectors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dq5s2wjuptqiomfjdsc2ffvtm\">指令选择器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directive-selectors\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-06\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"517z2e7aogobdderyrq6s93c3\">风格 02-06<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-06\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vwoh6lfx57ooq12zcdc9f1ty\"><strong>坚持</strong>使用小驼峰形式命名指令的选择器。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ye57pzi6mpj15qsx17v9sa4t\"><strong>为何</strong>？<br>\n可以让指令中的属性名与视图中绑定的属性名保持一致。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rgharwlao4138hyyjbcm0m4l\"><strong>为何</strong>？<br>\nAngular 的 HTML 解析器是大小写敏感的，可以识别小驼峰形式。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"02-08\"></a></p>\n<h3 id=\"directive-custom-prefix\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o9rtq7l9eigs9chi6kp41oj0\">为指令添加自定义前缀<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directive-custom-prefix\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-08\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79koyo0ew2bgl3rr47b3vdy3x\">风格 02-08<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-08\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"je29cxflu6kolvnv2su1n0ev\"><strong>坚持</strong>为指令的选择器添加自定义前缀（比如前缀 <code>toh</code> 来自 <strong>T</strong>our <strong>o</strong>f <strong>H</strong>eroes）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bay98a4iyb2yffvi8jqbhuvl\"><strong>坚持</strong>用小驼峰形式拼写非元素选择器，除非该选择器用于匹配原生 HTML 属性。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40l6vflrxw23qigdr2mt8dff7\"><strong>不要</strong>以 <code>ng</code> 作为指令名称的前缀，因为该前缀是为 Angular 保留的，使用它可能会导致难以诊断的错误。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d6jxxdyvk75jfouff3x6n4nbb\"><strong>为何</strong>？<br>\n防止名字冲突。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"977mzbrt1zinqv3wwhr2f6eyn\"><strong>为何</strong>？<br>\n指令更加容易被识别。</p>\n</div>\n<code-example header=\"app/shared/validate.directive.ts\" path=\"styleguide/src/02-08/app/shared/validate.directive.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[validate]'\n})\nexport class ValidateDirective {}\n\n</code-example>\n<code-example header=\"app/shared/validate.directive.ts\" path=\"styleguide/src/02-08/app/shared/validate.directive.ts\" region=\"example\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidate]'\n})\nexport class ValidateDirective {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"02-09\"></a></p>\n<h3 id=\"pipe-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2opbzxd8goomybyqok3xpg07\">管道名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#pipe-names\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-09\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dccx8wyl0ao2oh01itc2pk68z\">风格 02-09<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-09\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o5wvaov5dbia8fox8vpzl9q3\"><strong>坚持</strong>为所有管道使用一致的命名约定，用它们的特性来命名。管道类名应该使用 <a href=\"guide/glossary#case-types\">UpperCamelCase</a>（类名的通用约定），而相应的 <code>name</code> 字符串应该使用 <em>lowerCamelCase</em>。<code>name</code> 字符串中不应该使用中线（“中线格式”或“烤串格式”）。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"db20m6w7pkckj7ey4isbjrgpm\"><strong>为何</strong>？<br>\n提供一致的方式快速识别和引用管道。</p>\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u3r6vghayayquoaotd7dbcjc\">符号名称</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32w7n8dmecm813yjz3115x40v\">文件名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'ellipsis' }) \nexport class EllipsisPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"672lh4vbbxibhahb842fps1av\">ellipsis.pipe.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' }) \nexport class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"apwve13b2t9v6xxbmovuve3s3\">init-caps.pipe.ts</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"02-10\"></a></p>\n<h3 id=\"unit-test-file-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69s6h7llsun3hlkbeniah9f9p\">单元测试文件名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#unit-test-file-names\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-10\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22aavcnen3xikj4hukikxv4bi\">风格 02-10<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-10\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3mnxsyuga4ki9exari50m8qb\"><strong>坚持</strong>测试规格文件名与被测试组件文件名相同。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vfiq1ncrywcxyeslaicj8isg\"><strong>坚持</strong>测试规格文件名添加 <code>.spec</code> 后缀。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91f35awvn7ogvy1qku1gkdnd4\"><strong>为何</strong>？<br>\n提供一致的方式来快速识别测试。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5fi8so624g7y5rxvgatg3c3dr\"><strong>为何</strong>？<br>\n提供一个与 <a href=\"http://karma-runner.github.io\">karma</a> 或者其它测试运行器相配的命名模式。</p>\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er9zbwotwu7rb3b5a9cpn0sew\">测试类型</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0ep8iyoh09xj6us06fxivkpz\">文件名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7vzzlnsersqq3lvejga81lr\">组件</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wneqntwdhbqftd9bu9wwbs7u\">heroes.component.spec.ts \n<br> hero-list.component.spec.ts \n<br> hero-detail.component.spec.ts</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92fqgk8698jdwr0o85057qr44\">服务</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btfukrcby4gmzomfih8hbvxdz\">logger.service.spec.ts \n<br> hero.service.spec.ts \n<br> filter-text.service.spec.ts</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4c1vv1rgp7phpgpk7rg59bjk0\">管道</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"syccr7c1irscor75nt3wdusi\">ellipsis.pipe.spec.ts \n<br> init-caps.pipe.spec.ts</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"02-11\"></a></p>\n<h3 id=\"end-to-end-e2e-test-file-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9toioab8b5b2tgoh0aynacwgs\"><em>端到端</em>（E2E）测试的文件名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#end-to-end-e2e-test-file-names\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-11\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j0mzde87vak6tyr2paxo92fm\">风格 02-11<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-11\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hvxlerm474p93pkv8qujlve2\"><strong>坚持</strong>端到端测试规格文件和它们所测试的特性同名，添加 <code>.e2e-spec</code> 后缀。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50m298cjalilu2upyau2zoc4q\"><strong>为何</strong>？<br>\n提供一致的方式快速识别端到端测试文件。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1y12faee2o591t6jwkl3tvnbw\"><strong>为何</strong>？<br>\n提供一个与测试运行器和构建自动化匹配的模式。</p>\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er9zbwotwu7rb3b5a9cpn0sew\">测试类型</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0ep8iyoh09xj6us06fxivkpz\">文件名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3f8bn0bzrcroikr9xly33l38\">端到端测试</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dif5r0sibxuh0laadlqwhpoi1\">app.e2e-spec.ts \n<br> heroes.e2e-spec.ts</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"02-12\"></a></p>\n<h3 id=\"angular-ngmodule-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rdn65cgkgke3axr9sqelpqzo\">Angular <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 命名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#angular-ngmodule-names\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-12\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drqrwtz11qc7n52v48yc268i8\">风格 02-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-12\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dk2pd9ypydqufv2v8umadnb2\"><strong>坚持</strong>为符号名添加 <code>Module</code> 后缀。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dd27felhixkd3oj06yt0cekni\"><strong>坚持</strong>为文件名添加 <code>.module.ts</code> 扩展名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93ump97hzzc0ksxqv4piuljcc\"><strong>坚持</strong>用特性名和所在目录命名模块。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abohonols1z5drpjzyv0ae5fg\"><strong>为何</strong>？<br>\n提供一致的方式来快速标识和引用模块。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq5lat0luwcsz4t6a1c5nfoug\"><strong>为何</strong>？<br>\n大驼峰命名法是一种命名约定，用来标识可用构造函数实例化的对象。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnxrar0piyxwpbgw3mpwpt9gd\"><strong>为何</strong>？<br>\n很容易就能看出这个模块是同名特性的根模块。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drfadwkzlio629pnnm2z5tb05\"><strong>坚持</strong>为 <code>RoutingModule</code> 类名添加 <code>RoutingModule</code> 后缀。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cozk5vg32gmv9a7009w3bgws7\"><strong>坚持</strong>为 <code>RoutingModule</code> 的文件名添加 <code>-routing.module.ts</code> 后缀。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61sj097lxzlkc16xhq165w5bt\"><strong>为何</strong>？<br>\n<code>RoutingModule</code> 是一种专门用来配置 Angular 路由器的模块。\n“类名和文件名保持一致”的约定使这些模块易于发现和验证。</p>\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u3r6vghayayquoaotd7dbcjc\">符号名称</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32w7n8dmecm813yjz3115x40v\">文件名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class AppModule { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c7z5ohn602naqu1r4rvnky6o\">app.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class HeroesModule { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9ymqur0q39ifc9x0r5bstwr9\">heroes.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class VillainsModule { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an53gi9p5zj1mf6ad50vbqli9\">villains.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class AppRoutingModule { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d58v6ocb7y8qkxfvh0v4mylc4\">app-routing.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class HeroesRoutingModule { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dvkyv8ykl35ijgirz060qok01\">heroes-routing.module.ts</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<h2 id=\"application-structure-and-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"di7jmh60xil3z5lrm8gqx1bph\">应用程序结构与 NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#application-structure-and-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dbqxybg15l7k1o8tbgamkthnp\">准备一个近期实施方案和一个长期的愿景。从零开始，但要考虑应用程序接下来的路往哪儿走。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rls832ddeq6swhvkjgpfm1nw\">所有应用程序的源代码都放到名叫 <code>src</code> 的目录里。所有特性区都在自己的文件夹中，带有它们自己的 NgModule。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9trqgeq3emy51dbctsseulw7\">所有内容都遵循每个文件一个特性的原则。每个组件、服务和管道都在自己的文件里。所有第三方程序包保存到其它目录里，而不是 <code>src</code> 目录。你不会修改它们，所以不希望它们弄乱你的应用程序。使用本指南介绍的文件命名约定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"04-01\"></a></p>\n<h3 id=\"lift\"><code>LIFT</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lift\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"608wi946u4izacn11tv9c1eo9\">风格 04-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vtsz6r8h28ujwgijxm1matig\"><strong>坚持</strong>组织应用的结构，力求：快速定位 (<code>L</code>ocate) 代码、一眼识别 (<code>I</code>dentify) 代码、 尽量保持扁平结构 (<code>F</code>lattest) 和尝试 (<code>T</code>ry) 遵循 DRY (Do Not Repeat Yourself, 不重复自己) 原则。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qwk552pnwggzqarj1gvctvdk\"><strong>坚持</strong>四项基本原则定义文件结构，上面的原则是按重要顺序排列的。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6uzpihape9ysd849el0gng8l8\"><strong>为何</strong>？<br>\nLIFT 提供了一致的结构，它具有扩展性强、模块化的特性。因为容易快速锁定代码，提高了开发者的效率。\n另外，检查应用结构是否合理的方法是问问自己：我能快速打开与此特性有关的所有文件并开始工作吗？</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"04-02\"></a></p>\n<h3 id=\"locate\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1y2b4qhtqn1cdm9jtdy4d62qb\">定位<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#locate\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dh24lrrxtprsfgw2go2256op\">风格 04-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-02\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vqo4rmftnnwcs8wi137tmrlw\"><strong>坚持</strong>直观、简单和快速地定位代码。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9c343rxu8aokxfq3zbf0gyz3g\"><strong>为何？</strong>\n要想高效的工作，就必须能迅速找到文件，特别是当不知道（或不记得）文件<em>名</em>时。\n把相关的文件一起放在一个直观的位置可以节省时间。\n富有描述性的目录结构会让你和后面的维护者眼前一亮。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"04-03\"></a></p>\n<h3 id=\"identify\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jv8hgm53bojfdk7mh5g1bzo4\">识别<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#identify\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-03\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87xr8bc0x3y6nwdcfio7rok1o\">风格 04-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-03\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpd6nbfkdym3qaj2lxwtazv4j\"><strong>坚持</strong>命名文件到这个程度：看到名字立刻知道它包含了什么，代表了什么。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvujvimy3shfwwahbd7e5rj9v\"><strong>坚持</strong>文件名要具有说明性，确保文件中只包含一个组件。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6iztmcjhavbgzksp6ldcz6lwy\"><strong>避免</strong>创建包含多个组件、服务或者混合体的文件。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7nmcwt3cdtu4u320rdoeh43l\"><strong>为何</strong>？<br>\n花费更少的时间来查找和琢磨代码，就会变得更有效率。\n较长的文件名远胜于<em>较短却容易混淆的</em>缩写名。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hu083kn43b2zhw32tnef5mhe\">当你有一组小型、紧密相关的特性时，违反<em>一物一文件</em>的规则可能会更好，这种情况下单一文件可能会比多个文件更容易发现和理解。注意这个例外。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"04-04\"></a></p>\n<h3 id=\"flat\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6w0i0bniswsnubfa0lszfq8fh\">扁平<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#flat\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-04\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4a1ncuqsbgi7v8c5fkykhrmy9\">风格 04-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-04\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6e3z6scakrb9ta7vvwbrgv4eq\"><strong>坚持</strong>尽可能保持扁平的目录结构。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9stdg327nuhtd0hj3khs3lj8i\"><strong>考虑</strong>当同一目录下达到 7 个或更多个文件时创建子目录。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8g61j0gslek0h3wyv394k5vva\"><strong>考虑</strong>配置 IDE，以隐藏无关的文件，比如生成出来的 <code>.js</code> 文件和 <code>.js.map</code> 文件等。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9aiwirr76pxmeun41dl56nuhe\"><strong>为何</strong>？<br>\n没人想要在超过七层的目录中查找文件。扁平的结构有利于搜索。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vbcg74piaqtb06d5kno1vqyn\">另一方面，<a href=\"https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\">心理学家们相信</a>，当关注的事物超过 9 个时，人类就会开始感到吃力。所以，当一个文件夹中的文件有 10 个或更多个文件时，可能就是创建子目录的时候了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mvkyzhnfwg1zanzb2jvuxm8q\">还是根据你自己的舒适度而定吧。除非创建新文件夹能有显著的价值，否则尽量使用扁平结构。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"04-05\"></a></p>\n<h3 id=\"t-dry-try-to-be-dry\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ee4vbavan2t5bcatcr3nl480o\"><em>T-DRY</em>（尽量不重复自己）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#t-dry-try-to-be-dry\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-05\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pnzqez0bktocefm8jrb2t94v\">风格 04-05<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-05\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88m3n2vjjmopmno6l7em78n0b\"><strong>坚持</strong> DRY（Don't Repeat Yourself，不重复自己）。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5opmacd9cb1rqell9fae0qix4\"><strong>避免</strong>过度 DRY，以致牺牲了阅读性。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93qkc0liszoyfmlgbcsb2synp\"><strong>为何</strong>？<br>\n虽然 DRY 很重要，但如果要以牺牲 LIFT 的其它原则为代价，那就不值得了。\n这也就是为什么它被称为 <em>T-DRY</em>。\n比如，把组件命名为 <code>hero-view.component.html</code> 是多余的，因为带有 <code>.html</code> 扩展名的文件显然就是一个视图 (view)。\n但如果它不那么显著，或不符合常规，就把它写出来。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"04-06\"></a></p>\n<h3 id=\"overall-structural-guidelines\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4oduef1tzuflmf5uuhh001pcd\">总体结构的指导原则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#overall-structural-guidelines\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-06\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aspx2kt2f1giw7faoo4km5vdz\">风格 04-06<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-06\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nzvewdyk7f39po6d00l4zlu8\"><strong>坚持</strong>从零开始，但要考虑应用程序接下来的路往哪儿走。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yk3nz54fvr73xbuqgg8mchtt\"><strong>坚持</strong>有一个近期实施方案和一个长期的愿景。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atvehhavd03xnfjvis08c1tde\"><strong>坚持</strong>把所有源代码都放到名为 <code>src</code> 的目录里。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7raghl543hzfhhe8aw5b7kxvl\"><strong>坚持</strong>如果组件具有多个伴生文件 (<code>.ts</code>、<code>.html</code>、<code>.css</code> 和 <code>.spec</code>)，就为它创建一个文件夹。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4npgydd128p63l7t1qjx9n4xu\"><strong>为何</strong>？<br>\n在早期阶段能够帮助保持应用的结构小巧且易于维护，这样当应用增长时就容易进化了。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqdd1qijjl9prbpsv8qxjbxhs\"><strong>为何?</strong> 组件通常有四个文件 (<code>*.html</code>、 <code>*.css</code>、 <code>*.ts</code> 和 <code>*.spec.ts</code>)，它们很容易把一个目录弄乱。</p>\n</div>\n<p><a id=\"file-tree\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6dnlmvs0umk26eucgbofgur3g\">下面是符合规范的目录和文件结构</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    &lt;project root&gt;\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          core\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            exception.service.ts|spec.ts\n          </div>\n          <div class=\"file\">\n            user-profile.service.ts|spec.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          heroes\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            hero\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              hero.component.ts|html|css|spec.ts\n            </div>\n          </div>\n          <div class=\"file\">\n            hero-list\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              hero-list.component.ts|html|css|spec.ts\n            </div>\n          </div>\n          <div class=\"file\">\n            shared\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              hero-button.component.ts|html|css|spec.ts\n            </div>\n            <div class=\"file\">\n              hero.model.ts\n            </div>\n            <div class=\"file\">\n              hero.service.ts|spec.ts\n            </div>\n          </div>\n          <div class=\"file\">\n            heroes.component.ts|html|css|spec.ts\n          </div>\n          <div class=\"file\">\n            heroes.module.ts\n          </div>\n          <div class=\"file\">\n            heroes-routing.module.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          shared\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            shared.module.ts\n          </div>\n          <div class=\"file\">\n            init-caps.pipe.ts|spec.ts\n          </div>\n          <div class=\"file\">\n            filter-text.component.ts|spec.ts\n          </div>\n          <div class=\"file\">\n            filter-text.service.ts|spec.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          villains\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            villain\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              …\n            </div>\n          </div>\n          <div class=\"file\">\n            villain-list\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              …\n            </div>\n          </div>\n          <div class=\"file\">\n            shared\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              …\n            </div>\n          </div>\n          <div class=\"file\">\n            villains.component.ts|html|css|spec.ts\n          </div>\n          <div class=\"file\">\n            villains.module.ts\n          </div>\n          <div class=\"file\">\n            villains-routing.module.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          app.component.ts|html|css|spec.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          app-routing.module.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        …\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules/…\n    </div>\n    <div class=\"file\">\n      …\n    </div>\n  </div>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4l4wnxenxljt1oq46fwfsaj9i\">把组件放在专用目录中的方式广受欢迎，对于小型应用，还可以保持组件扁平化（而不是放在专用目录中）。这样会把四个文件放在现有目录中，也会减少目录的嵌套。无论你如何选择，请保持一致。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"04-07\"></a></p>\n<h3 id=\"folders-by-feature-structure\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kpqlvv46pjhzolc3p91cr99w\">按特性组织的目录结构<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#folders-by-feature-structure\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-07\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b51s9f2pyvqr1rv4ydwn5exux\">风格 04-07<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-07\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26ngx6ya72y2q2vwnz98zsjwl\"><strong>坚持</strong>根据特性区命名目录。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jk2x1j84ne0gqz6jc01lk4b1\"><strong>为什么</strong>? \n<br> 开发人员可以一眼定位代码并确定每个文件代表什么。 结构尽可能扁平，没有重复或冗余的命名。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsw80mwsji7zzqrwq97bbskzf\"><strong>为何</strong>？<br>\nLIFT 原则中包含了所有这些。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq6cd4b23ak2cm5nrw5ckhtef\"><strong>为什么</strong>? \n<br> 通过组织内容并使其符合 LIFT 指南，有助于减少应用程序变得混乱。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"diaqqysurk9jmvs48g9dljmrl\"><strong>为什么</strong>? \n<br> 当存在大量文件时，例如 10 个以上，通过一致的文件夹结构更容易定位它们，而在扁平结构中更难。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bi7ji0cxjgandfz0352bdfsx\"><strong>坚持</strong>为每个特性区创建一个 NgModule。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80x9y6cbfeeoh7r7nmuo71vlp\"><strong>为何</strong>？<br>\nNgModule 使惰性加载可路由的特性变得更容易。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25gyjcn7mzo9cofevymb7qukr\"><strong>为何</strong>？<br>\nNgModule 隔离、测试和复用特性更容易。</p>\n</div>\n<div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co6ec4975ejyx85nzw2vb69m2\">欲知详情，参阅<a href=\"guide/styleguide#file-tree\">目录和文件结构的范例</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"04-08\"></a></p>\n<h3 id=\"app-root-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kenniji1uujqveftn9a34bal\">应用的<em>根模块</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#app-root-module\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-08\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tt688gd8nh8m4w3ldkqx1yiz\">风格 04-08<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-08\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3c6nr13mbbs7g9opwprqsgalr\"><strong>坚持</strong>在应用的根目录创建一个 NgModule（比如 <code>/src/app</code>）。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jx3zgvfgcjdgypzdm8vuh79q\"><strong>为何</strong>？<br>\n每个应用都至少需要一个根 NgModule。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dadevf98xn1cdtoj2wlmbu265\"><strong>考虑</strong>把根模块命名为 <code>app.module.ts</code>。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bg1179lwzr2j7akean6erpfd\"><strong>为何</strong>？<br>\n能让定位和识别根模块变得更容易。</p>\n</div>\n<code-example format=\"typescript\" path=\"styleguide/src/04-08/app/app.module.ts\" language=\"typescript\" region=\"example\" header=\"app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  exports: [ AppComponent ]\n})\nexport class AppModule {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"04-09\"></a></p>\n<h3 id=\"feature-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bf4qau51t25zl7c84rwr3a4f\">特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#feature-modules\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-09\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22w93srpp3bmgwudmsy0n9jsf\">风格 04-09<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-09\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"759gci00mi5icc9hje06w3e2w\"><strong>坚持</strong>为应用中每个明显的特性创建一个 NgModule。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eufaoq3rxailqj6klmbvly4uc\"><strong>坚持</strong>把特性模块放在与特性区同名的目录中（比如 <code>app/heroes</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17zngg5p9ctk3ff1b55jstvjm\"><strong>坚持</strong>特性模块的文件名应该能反映出特性区的名字和目录（比如 <code>app/heroes/heroes.module.ts</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1u972kjfmdp0r1dg7k5pukfkg\"><strong>坚持</strong>特性模块的符号名应该能反映出特性区、目录和文件名（比如在 <code>app/heroes/heroes.module.ts</code> 中定义 <code>HeroesModule</code>）。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4kw92ff2noghn3ai7mpagap\"><strong>为何</strong>？<br>\n特性模块可以对其它模块暴露或隐藏自己的实现。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pj4yjvqt8gis5ygf6095j20k\"><strong>为何</strong>？<br>\n特性模块标记出组成该特性分区的相关组件集合。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xaktubyshljwq3s1gjpsuesn\"><strong>为何</strong>？<br>\n方便路由到特性模块 —— 无论是用主动加载还是惰性加载的方式。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xk6iqkjwi059qbo9ihxsj0k3\"><strong>为何</strong>？<br>\n特性模块在特定的功能和其它应用特性之间定义了清晰的边界。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmd4g69tt21f32iuy32khgyhw\"><strong>为何</strong>？<br>\n特性模块帮助澄清开发职责，以便于把这些职责指派给不同的项目组。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ecl3ipxsdd7jaql8vfwx9j\"><strong>为何</strong>？<br>\n特性模块易于隔离，以便测试。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"04-10\"></a></p>\n<h3 id=\"shared-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7onivvwse0wsdg3gni46ktcwe\">共享特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#shared-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-10\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9ln1kvjakd7wxmouvyjo2kf7\">风格 04-10<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-10\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"esxfkk8memblgj1jusneqwa4i\"><strong>坚持</strong>在 <code>shared</code> 目录中创建名叫 <code>SharedModule</code> 的特性模块（比如在 <code>app/shared/shared.module.ts</code> 中定义 <code>SharedModule</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajcyr982xwrvq6m8r9ct5kfmy\"><strong>坚持</strong>在共享模块中声明那些可能被特性模块引用的可复用组件、指令和管道。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eazsew109qg0r0541tmoa0zzr\"><strong>考虑</strong>把可能在整个应用中到处引用的模块命名为 SharedModule。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"852yi6nehg7ipyhmr8a4arrg1\"><strong>考虑</strong> <em>不要</em>在共享模块中提供服务。服务通常是单例的，应该在整个应用或一个特定的特性模块中只有一份。不过也有例外，比如，在下面的范例代码中，注意 <code>SharedModule</code> 提供了 <code>FilterTextService</code>。这里可以这么做，因为该服务是无状态的，也就是说，该服务的消费者不会受到这些新实例的影响。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3he4umnz8j4zj5916ulfcg93y\"><strong>坚持</strong>在 <code>SharedModule</code> 中导入所有模块都需要的资产（比如 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 和 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>）。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5r9w13ix8t938s031w8uthlza\"><strong>为什么</strong>? \n<br> \n<code>SharedModule</code> 将包含可能需要来自另一个共同模块的功能的组件、指令和管道；例如，在 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 中的 \n<code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6z4uasw104sbq66nqhvx03jmx\"><strong>坚持</strong>在 <code>SharedModule</code> 中声明所有组件、指令和管道。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"y6n4cabtyb7lrdqstu9wy4zb\"><strong>坚持</strong>从 <code>SharedModule</code> 中导出其它特性模块所需的全部符号。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4f717dkn54e3dng1gpqubclbj\"><strong>为何</strong>？<br>\n<code>SharedModule</code> 的存在，能让常用的组件、指令和管道在很多其它模块的组件模板中都自动可用。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xa2aqc18svd44qs84win1zez\"><strong>避免</strong>在 <code>SharedModule</code> 中指定应用级的单例服务提供者。如果是刻意要得到多个服务单例也行，不过还是要小心。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"967gkjwzacvd0ii8fr6qlt1pm\"><strong>为何</strong>？<br>\n惰性加载的特性模块如果导入了这个共享模块，会创建一份自己的服务副本，这可能会导致意料之外的后果。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yfgysd7l7kixwh6x8xjavmmg\"><strong>为何</strong>？<br>\n对于单例服务，你不希望每个模块都有自己的实例。\n而如果 <code>SharedModule</code> 提供了一个服务，那就有可能发生这种情况。</p>\n</div>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      app\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        shared\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          shared.module.ts\n        </div>\n        <div class=\"file\">\n          init-caps.pipe.ts|spec.ts\n        </div>\n        <div class=\"file\">\n          filter-text.component.ts|spec.ts\n        </div>\n        <div class=\"file\">\n          filter-text.service.ts|spec.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        app.component.ts|html|css|spec.ts\n      </div>\n      <div class=\"file\">\n        app.module.ts\n      </div>\n      <div class=\"file\">\n        app-routing.module.ts\n      </div>\n    </div>\n    <div class=\"file\">\n      main.ts\n    </div>\n    <div class=\"file\">\n      index.html\n    </div>\n  </div>\n  <div class=\"file\">\n    …\n  </div>\n</div>\n<code-tabs>\n    <code-pane header=\"app/shared/shared.module.ts\" path=\"styleguide/src/04-10/app/shared/shared.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { FilterTextComponent } from './filter-text/filter-text.component';\nimport { FilterTextService } from './filter-text/filter-text.service';\nimport { InitCapsPipe } from './init-caps.pipe';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>],\n  declarations: [\n    FilterTextComponent,\n    InitCapsPipe\n  ],\n  providers: [FilterTextService],\n  exports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    FilterTextComponent,\n    InitCapsPipe\n  ]\n})\nexport class SharedModule { }\n\n\n</code-pane>\n    <code-pane header=\"app/shared/init-caps.pipe.ts\" path=\"styleguide/src/04-10/app/shared/init-caps.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' })\nexport class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform = (value: string) =&gt; value;\n}\n\n\n</code-pane>\n    <code-pane header=\"app/shared/filter-text/filter-text.component.ts\" path=\"styleguide/src/04-10/app/shared/filter-text/filter-text.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-filter-text',\n  template: '&lt;input type=\"text\" id=\"filterText\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"filter\" (keyup)=\"filterChanged($event)\" /&gt;'\n})\nexport class FilterTextComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() changed: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;;\n\n  filter = '';\n\n  constructor() {\n    this.changed = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;();\n  }\n\n  clear() {\n    this.filter = '';\n  }\n\n  filterChanged(event: any) {\n    event.preventDefault();\n    console.log(`Filter Changed: ${this.filter}`);\n    this.changed.emit(this.filter);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/shared/filter-text/filter-text.service.ts\" path=\"styleguide/src/04-10/app/shared/filter-text/filter-text.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class FilterTextService {\n  constructor() {\n    console.log('Created an instance of FilterTextService');\n  }\n\n  filter(data: string, props: Array&lt;string&gt;, originalList: Array&lt;any&gt;) {\n    let filteredList: any[];\n    if (data &amp;&amp; props &amp;&amp; originalList) {\n      data = data.toLowerCase();\n      const filtered = originalList.filter(item =&gt; {\n        let match = false;\n        for (const prop of props) {\n          if (item[prop].toString().toLowerCase().indexOf(data) &gt; -1) {\n            match = true;\n            break;\n          }\n        }\n        return match;\n      });\n      filteredList = filtered;\n    } else {\n      filteredList = originalList;\n    }\n    return filteredList;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/04-10/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { FilterTextService } from '../shared/filter-text/filter-text.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  templateUrl: './heroes.component.html'\n})\nexport class HeroesComponent {\n\n  heroes = [\n    { id: 1, name: 'Windstorm' },\n    { id: 2, name: 'Bombasto' },\n    { id: 3, name: 'Magneta' },\n    { id: 4, name: 'Tornado' }\n  ];\n\n  filteredHeroes = this.heroes;\n\n  constructor(private filterService: FilterTextService) { }\n\n  filterChanged(searchText: string) {\n    this.filteredHeroes = this.filterService.filter(searchText, ['id', 'name'], this.heroes);\n  }\n}\n\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.html\" path=\"styleguide/src/04-10/app/heroes/heroes.component.html\">\n&lt;div&gt;This is heroes component&lt;/div&gt;\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of filteredHeroes\"&gt;\n    {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n&lt;toh-filter-text (changed)=\"filterChanged($event)\"&gt;&lt;/toh-filter-text&gt;\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"04-11\"></a></p>\n<h3 id=\"lazy-loaded-folders\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39kut8fey3hykmu7l2lemr22a\">惰性加载文件夹<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lazy-loaded-folders\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-11\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"473eznidcw6nzle5w4o7krnzf\">风格 04-11<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-11\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bcyc7zb2ljzb2zfxfhakkmti7\">某些边界清晰的应用特性或工作流可以做成<em>惰性加载</em>或<em>按需加载</em>的，而不用总是随着应用启动。</p>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9y4gt0znlgof001ere2obgxpx\"><strong>坚持</strong>把惰性加载特性下的内容放进<em>惰性加载目录</em>中。典型的<em>惰性加载目录</em>包含<em>路由组件</em>及其子组件以及与它们有关的那些资产和模块。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"674parmr64zx2jvcjba8qsvif\"><strong>为何</strong>？<br>\n这种目录让标识和隔离这些特性内容变得更轻松。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"04-12\"></a></p>\n<h3 id=\"never-directly-import-lazy-loaded-folders\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxvrueel5ypzmbvmeol6y3kuh\">永远不要直接导入惰性加载的目录<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#never-directly-import-lazy-loaded-folders\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-12\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ngwbkjlqkk0k1zjznwboze99\">样式 04-14<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-12\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81t84vw2eyut9sdvb6rfgbqx6\"><strong>避免</strong>让兄弟模块和父模块直接导入<em>惰性加载特性</em>中的模块。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kecncv7q0e0przv9we5p5xln\"><strong>为何</strong>？<br>\n直接导入并使用此模块会立即加载它，而原本的设计意图是按需加载它。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<h3 id=\"do-not-add-filtering-and-sorting-logic-to-pipes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pfffi12a2ykywdg0o7en473c\">不要往管道中添加过滤和排序逻辑<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#do-not-add-filtering-and-sorting-logic-to-pipes\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-13\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ei8cjp8ecgzmsl6p8aeanvi8\">风格 04-13<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-13\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b4a9atiuayztpkfa5yewbkr3\"><strong>避免</strong>往自定义管道中添加过滤或排序逻辑。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cs87dq6v71jpt7xcv2phuro0n\"><strong>坚持</strong>在把模型绑定到模板中时，把过滤和排序逻辑在组件或服务中进行预先计算。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1et2yzo4hsl1rj51pa3tdwlcc\"><strong>为什么</strong>? \n<br> 过滤和特别是排序是昂贵的操作。 由于 Angular 可以每秒多次调用管道方法，对于中等大小的列表，排序和过滤操作可能严重降低用户体验。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<h2 id=\"components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7vzzlnsersqq3lvejga81lr\">组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#components\"><i class=\"material-icons\">link</i></a></h2>\n<p><a id=\"05-03\"></a></p>\n<h3 id=\"components-as-elements\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6u048gcd76rb0te698nazwr9\">把组件当做元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#components-as-elements\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-03\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qbnn2qv1dcqw5s6lctwvocu8\">风格 05-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-03\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cev7a0di4uqdhtxx7tmc3el75\"><strong>考虑</strong>给组件一个<em>元素</em>选择器，而不是<em>属性</em>或<em>类</em>选择器。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4l2lyxdpuyeaf0w3qmplls8zr\"><strong>为何</strong>？<br>\n组件有很多包含 HTML 以及可选 Angular 模板语法的模板。\n它们显示内容。开发人员会把组件像原生 HTML 元素和 WebComponents 一样放进页面中。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btgof4k1ixesiilboil1t9del\"><strong>为何</strong>？<br>\n查看组件模板的 HTML 时，更容易识别一个符号是组件还是指令。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ee52nd7tbolb5nvv7auu0hks4\">少数情况下，你要为组件使用属性选择器，比如你要加强某个内置元素时。比如，<a href=\"https://material.angular.cn/components/button/overview\">Material Design 组件库</a>就会对 <code>&lt;button mat-button&gt;</code> 使用这项技术。不过，你不应该在自定义组件上使用这项技术。</p>\n</div>\n<code-example header=\"app/heroes/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-03/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: '[tohHeroButton]',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-example>\n<code-example header=\"app/app.component.html\" path=\"styleguide/src/05-03/app/app.component.avoid.html\">\n&lt;!-- avoid --&gt;\n\n&lt;div tohHeroButton&gt;&lt;/div&gt;\n\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-03/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-pane>\n    <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-03/app/app.component.html\">\n&lt;toh-hero-button&gt;&lt;/toh-hero-button&gt;\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"05-04\"></a></p>\n<h3 id=\"extract-templates-and-styles-to-their-own-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"am9auzm9lghnknvv75o4xyoqd\">把模板和样式提取到它们自己的文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#extract-templates-and-styles-to-their-own-files\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-04\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eusr8yppyvdhtin7il2oi6jg7\">风格 05-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-04\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"q18hrsui80muekaolp3oa55w\"><strong>坚持</strong>当超过 3 行时，把模板和样式提取到一个单独的文件。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7n469j1h7nqaij0dt3hyl7ga\"><strong>坚持</strong>把模板文件命名为 <code>[component-name].component.html</code>，其中，[component-name] 是组件名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpi83ixfwlyqgwt3j3px5cmuk\"><strong>坚持</strong>把样式文件命名为 <code>[component-name].component.css</code>，其中，[component-name] 是组件名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1zs7wuk93pscsr1hxmv0s5co\"><strong>坚持</strong>指定<em>相对于模块的</em> URL，给它加上 <code>./</code> 前缀。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ephmaeymrc97tge1anni71nap\"><strong>为何</strong>？<br>\n巨大的、内联的模板和样式表会遮盖组件的意图和实现方式，削弱可读性和可维护性。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ig9szoj79xp5paym4ptn0p9i\"><strong>为什么</strong>? \n<br> 在大多数编辑器中，在开发内联模板和样式时，语法提示和代码片段是不可用的。 Angular TypeScript 语言服务（即将推出）承诺可以克服这一不足，适用于支持的编辑器中的 HTML 模板；对于 CSS 样式则无法帮助。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8g5m94sr8y0n4ccnm7m8jxm72\"><strong>为何</strong>？<br>\n当你移动组件文件时，相对于组件的 URL 不需要修改，因为这些文件始终会在一起。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xpzz1ghhs3gmxl9pba6dnxs\"><strong>为何</strong>？<br>\n<code>./</code> 前缀是相对 URL 的标准语法，不必依赖 Angular 的特殊处理，如果没有前缀则不行。</p>\n</div>\n<code-example header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/05-04/app/heroes/heroes.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;My Heroes&lt;/h2&gt;\n      &lt;ul class=\"heroes\"&gt;\n        &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\" (click)=\"selectedHero=hero\"&gt;\n          &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n        &lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n        &lt;h2&gt;{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} is my hero&lt;/h2&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `,\n  styles: [`\n    .heroes {\n      margin: 0 0 2em 0;\n      list-style-type: none;\n      padding: 0;\n      width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `]\n})\nexport class HeroesComponent {\n  heroes: Observable&lt;Hero[]&gt;;\n  selectedHero!: Hero;\n\n  constructor(private heroService: HeroService) {\n    this.heroes = this.heroService.getHeroes();\n  }\n}\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/05-04/app/heroes/heroes.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls:  ['./heroes.component.css']\n})\nexport class HeroesComponent {\n  heroes: Observable&lt;Hero[]&gt;;\n  selectedHero!: Hero;\n\n  constructor(private heroService: HeroService) {\n    this.heroes = this.heroService.getHeroes();\n  }\n}\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.html\" path=\"styleguide/src/05-04/app/heroes/heroes.component.html\">\n&lt;div&gt;\n  &lt;h2&gt;My Heroes&lt;/h2&gt;\n  &lt;ul class=\"heroes\"&gt;\n    &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\"&gt;\n      &lt;button type=\"button\" (click)=\"selectedHero=hero\"&gt;\n        &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n        &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n      &lt;/button&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n    &lt;h2&gt;{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} is my hero&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.css\" path=\"styleguide/src/05-04/app/heroes/heroes.component.css\">\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n\n.heroes li {\n  display: flex;\n}\n\n.heroes button {\n  flex: 1;\n  cursor: pointer;\n  position: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: 0;\n  border-radius: 4px;\n  display: flex;\n  align-items: stretch;\n  height: 1.8em;\n}\n\n.heroes button:hover {\n  color: #2c3a41;\n  background-color: #e6e6e6;\n  left: .1em;\n}\n\n.heroes button:active {\n  background-color: #525252;\n  color: #fafafa;\n}\n\n.heroes button.selected {\n  background-color: black;\n  color: white;\n}\n\n.heroes button.selected:hover {\n  background-color: #505050;\n  color: white;\n}\n\n.heroes button.selected:active {\n  background-color: black;\n  color: white;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #405061;\n  line-height: 1em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n.heroes .name {\n  align-self: center;\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"05-12\"></a></p>\n<h3 id=\"decorate-input-and-output-properties\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8l54nzt4d50tw5zihl7bxjx0k\">使用 <code>input</code> 和 <code>output</code> 属性装饰器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#decorate-input-and-output-properties\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-12\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"y0cgyiuofwcn7vwmm5uaalaf\">风格 05-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-12\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5glu0ds3y1vvka0x1cbn6gqyd\"><strong>坚持</strong> 使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，而非 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 和 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的 <code>inputs</code> 和 <code>outputs</code> 属性:</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajf8uhl92meqres2hhku618pz\"><strong>坚持</strong>把 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 或者 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 放到所装饰的属性的同一行。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bluzlju0jtqg4jhbdja2y6w\"><strong>为何</strong>？<br>\n易于在类里面识别哪些属性是输入属性或输出属性。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckolf03wwqhmawt7klmxuamz0\"><strong>为什么</strong>? \n<br> 如果你需要重命名与 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 或 \n<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 关联的属性或事件名称，你可以在一个地方修改它。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bowtpewm4wdufuttsgvgwha87\"><strong>为何</strong>？<br>\n依附到指令的元数据声明会比较简短，更易于阅读。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dk93i6az2zsa5nj4rztwhbf6e\"><strong>为何</strong>？<br>\n把装饰器放到同一行可以精简代码，同时更易于识别输入或输出属性。</p>\n</div>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-12/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;&lt;/button&gt;`,\n  inputs: [\n    'label'\n  ],\n  outputs: [\n    'heroChange'\n  ]\n})\nexport class HeroButtonComponent {\n  heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  label: string;\n}\n\n</code-example>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-12/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;{{label}}&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() label = '';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"05-13\"></a></p>\n<h3 id=\"avoid-aliasing-inputs-and-outputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ggg82o53afdzat3o2cfqbb3t\">避免为 <code>inputs</code> 和 <code>outputs</code> 指定别名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#avoid-aliasing-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-13\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7dia357ojdijecgujb9js9kq\">风格 05-13<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-13\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4gz7gwft0ddn2c0h7eswiaf2\"><strong>避免</strong>除非有重要目的，否则不要为 <code>input</code> 和 <code>output</code> 指定别名。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfeeqbp46uujgtxg1mre9v2nw\"><strong>为何</strong>？<br>\n同一个属性有两个名字（一个对内一个对外）很容易导致混淆。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3syn99xc3k9f7d21wa26wv7ek\"><strong>为何</strong>？<br>\n如果指令名也同时用作<em>输入</em>属性，而且指令名无法准确描述这个属性的用途时，应该使用别名。</p>\n</div>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-13/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid pointless aliasing */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;{{label}}&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  // Pointless aliases\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>('heroChangeEvent') heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('labelAttribute') label: string;\n}\n\n</code-example>\n<code-example header=\"app/app.component.html\" path=\"styleguide/src/05-13/app/app.component.avoid.html\">\n&lt;!-- avoid --&gt;\n\n&lt;toh-hero-button labelAttribute=\"OK\" (changeEvent)=\"doSomething()\"&gt;\n&lt;/toh-hero-button&gt;\n\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-13/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\" &gt;{{label}}&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  // No aliases\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() label = '';\n}\n\n</code-pane>\n    <code-pane header=\"app/heroes/shared/hero-button/hero-highlight.directive.ts\" path=\"styleguide/src/05-13/app/heroes/shared/hero-highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[heroHighlight]' })\nexport class HeroHighlightDirective implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n\n  // Aliased because `color` is a better property name than `heroHighlight`\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('heroHighlight') color = '';\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {}\n\n  ngOnChanges() {\n    this.el.nativeElement.style.backgroundColor = this.color || 'yellow';\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-13/app/app.component.html\">\n&lt;toh-hero-button label=\"OK\" (change)=\"doSomething()\"&gt;\n&lt;/toh-hero-button&gt;\n\n&lt;!-- `heroHighlight` is both the directive name and the data-bound aliased property name --&gt;\n&lt;h3 heroHighlight=\"skyblue\"&gt;The Great Bombasto&lt;/h3&gt;\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"05-14\"></a></p>\n<h3 id=\"member-sequence\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oca2i5mg4lzplab2ve5amei0\">成员顺序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#member-sequence\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-14\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ok5ze1jbjrmdlnhrmx3cj53i\">风格 05-14<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-14\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba7qz7rok0np6dvwa0brzz7y5\"><strong>坚持</strong>把属性成员放在前面，方法成员放在后面。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2o0c2hijyccdac1shh0dcp1r\"><strong>坚持</strong>先放公共成员，再放私有成员，并按照字母顺序排列。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnl7cq7ffwdmvk6sq5fn49wql\"><strong>为何</strong>？<br>\n把类的成员按照统一的顺序排列，易于阅读，能立即识别出组件的哪个成员服务于何种目的。</p>\n</div>\n<code-example header=\"app/shared/toast/toast.component.ts\" path=\"styleguide/src/05-14/app/shared/toast/toast.component.avoid.ts\" region=\"example\">\n/* avoid */\n\nexport class ToastComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  private defaults = {\n    title: '',\n    message: 'May the Force be with you'\n  };\n  message: string;\n  title: string;\n  private toastElement: any;\n\n  ngOnInit() {\n    this.toastElement = document.getElementById('toh-toast');\n  }\n\n  // private methods\n  private hide() {\n    this.toastElement.style.opacity = 0;\n    setTimeout(() =&gt; this.toastElement.style.zIndex = 0, 400);\n  }\n\n  activate(message = this.defaults.message, title = this.defaults.title) {\n    this.title = title;\n    this.message = message;\n    this.show();\n  }\n\n  private show() {\n    console.log(this.message);\n    this.toastElement.style.opacity = 1;\n    this.toastElement.style.zIndex = 9999;\n\n    setTimeout(() =&gt; this.hide(), 2500);\n  }\n}\n\n</code-example>\n<code-example header=\"app/shared/toast/toast.component.ts\" path=\"styleguide/src/05-14/app/shared/toast/toast.component.ts\" region=\"example\">\nexport class ToastComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  // public properties\n  message = '';\n  title = '';\n\n  // private fields\n  private defaults = {\n    title: '',\n    message: 'May the Force be with you'\n  };\n  private toastElement: any;\n\n  // public methods\n  activate(message = this.defaults.message, title = this.defaults.title) {\n    this.title = title;\n    this.message = message;\n    this.show();\n  }\n\n  ngOnInit() {\n    this.toastElement = document.getElementById('toh-toast');\n  }\n\n  // private methods\n  private hide() {\n    this.toastElement.style.opacity = 0;\n    setTimeout(() =&gt; this.toastElement.style.zIndex = 0, 400);\n  }\n\n  private show() {\n    console.log(this.message);\n    this.toastElement.style.opacity = 1;\n    this.toastElement.style.zIndex = 9999;\n    setTimeout(() =&gt; this.hide(), 2500);\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"05-15\"></a></p>\n<h3 id=\"delegate-complex-component-logic-to-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sjhooroq160yo8ibg0w4eper\">把逻辑放到服务里<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#delegate-complex-component-logic-to-services\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-15\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dlthjznwg0h21smaiyyczw6q\">风格 05-15<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-15\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"839uknkke9xewd8yq1cot4xcb\"><strong>坚持</strong>在组件中只包含与视图相关的逻辑。所有其它逻辑都应该放到服务中。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xpvoms52donpnf9k74o0wdec\"><strong>坚持</strong>把可复用的逻辑放到服务中，保持组件简单，聚焦于它们预期目的。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87tf5g4mxxij093y906zev094\"><strong>为何</strong>？<br>\n当逻辑被放置到服务里，并以函数的形式暴露时，可以被多个组件重复使用。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6stz8kq71wz4axzj5pgf3rm1c\"><strong>为何</strong>？<br>\n在单元测试时，服务里的逻辑更容易被隔离。当组件中调用逻辑时，也很容易被模拟。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5psx2u08ohzdlj7tetlvrkge3\"><strong>为何</strong>？<br>\n从组件移除依赖并隐藏实现细节。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqf1nfq5pa4yutvk8ukc467km\"><strong>为何</strong>？<br>\n保持组件苗条、精简和聚焦。</p>\n</div>\n<code-example header=\"app/heroes/hero-list/hero-list.component.ts\" path=\"styleguide/src/05-15/app/heroes/hero-list/hero-list.component.avoid.ts\">\n/* avoid */\n\nimport { <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { Observable } from 'rxjs';\nimport { catchError, finalize } from 'rxjs/operators';\n\nimport { Hero } from '../shared/hero.model';\n\nconst heroesUrl = 'http://angular.io';\n\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n  getHeroes() {\n    this.heroes = [];\n    this.http.get(heroesUrl).pipe(\n      catchError(this.catchBadResponse),\n      finalize(() =&gt; this.hideSpinner())\n    ).subscribe((heroes: Hero[]) =&gt; this.heroes = heroes);\n  }\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  private catchBadResponse(err: any, source: Observable&lt;any&gt;) {\n    // log and handle the exception\n    return new Observable();\n  }\n\n  private hideSpinner() {\n    // hide the spinner\n  }\n}\n\n\n</code-example>\n<code-example header=\"app/heroes/hero-list/hero-list.component.ts\" path=\"styleguide/src/05-15/app/heroes/hero-list/hero-list.component.ts\" region=\"example\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero, HeroService } from '../shared';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `...`\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n  constructor(private heroService: HeroService) {}\n  getHeroes() {\n    this.heroes = [];\n    this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n  ngOnInit() {\n    this.getHeroes();\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"05-16\"></a></p>\n<h3 id=\"dont-prefix-output-properties\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7df65ok22eoatbx52r8onwgd\">不要给 <code>output</code> 属性加前缀<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#dont-prefix-output-properties\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-16\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aur0ss5s4szipnsl2h1sjc76v\">风格 05-16<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-16\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9n7ci6ig8f56yxsylfuw4azr2\"><strong>坚持</strong>命名事件时，不要带前缀 <code>on</code>。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbihi5zfa038vkuf43d0e2c0w\"><strong>坚持</strong>把事件处理器方法命名为 <code>on</code> 前缀之后紧跟着事件名。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n8957unhn4mfvm0qtjxbo84r\"><strong>为何</strong>？<br>\n与内置事件命名一致，比如按钮点击。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1kmag7keg0ffs0hf5cbhob1y\"><strong>为什么</strong>? \n<br> Angular 允许使用 \n<a href=\"guide/binding-syntax\">备用语法</a> \n<code>on-*</code>。 如果事件本身前缀为 \n<code>on</code>，这将导致一个 \n<code>on-onEvent</code> 绑定表达式。</p>\n</div>\n<code-example header=\"app/heroes/hero.component.ts\" path=\"styleguide/src/05-16/app/heroes/hero.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() onSavedTheDay = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;boolean&gt;();\n}\n\n</code-example>\n<code-example header=\"app/app.component.html\" path=\"styleguide/src/05-16/app/app.component.avoid.html\">\n&lt;!-- avoid --&gt;\n\n&lt;toh-hero (onSavedTheDay)=\"onSavedTheDay($event)\"&gt;&lt;/toh-hero&gt;\n\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/hero.component.ts\" path=\"styleguide/src/05-16/app/heroes/hero.component.ts\" region=\"example\">\nexport class HeroComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() savedTheDay = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;boolean&gt;();\n}\n\n</code-pane>\n    <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-16/app/app.component.html\">\n&lt;toh-hero (savedTheDay)=\"onSavedTheDay($event)\"&gt;&lt;/toh-hero&gt;\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"05-17\"></a></p>\n<h3 id=\"put-presentation-logic-in-the-component-class\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8lrwdego8w0hxvuunbepexrf8\">把表现层逻辑放到组件类里<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#put-presentation-logic-in-the-component-class\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-17\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b69ap4yvlbc0yrtom8nlexkl8\">风格 05-17<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-17\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ddm6xgxiu5sii23dsl7pglll\"><strong>坚持</strong>把表现层逻辑放进组件类中，而不要放在模板里。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cot03mg3dk9y3xbu86a77set\"><strong>为何</strong>？<br>\n逻辑应该只出现在一个地方（组件类里）而不应分散在两个地方。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eml7wjefrd5lzdzkq0yc5p7sb\"><strong>为何</strong>？<br>\n将组件的表现层逻辑放到组件类而非模板里，可以增强测试性、维护性和重复使用性。</p>\n</div>\n<code-example header=\"app/heroes/hero-list/hero-list.component.ts\" path=\"styleguide/src/05-17/app/heroes/hero-list/hero-list.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `\n    &lt;section&gt;\n      Our list of heroes:\n      &lt;toh-hero *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" [hero]=\"hero\"&gt;\n      &lt;/toh-hero&gt;\n      Total powers: {{totalPowers}}&lt;br&gt;\n      Average power: {{totalPowers / heroes.length}}\n    &lt;/section&gt;\n  `\n})\nexport class HeroListComponent {\n  heroes: Hero[];\n  totalPowers: number;\n}\n\n</code-example>\n<code-example header=\"app/heroes/hero-list/hero-list.component.ts\" path=\"styleguide/src/05-17/app/heroes/hero-list/hero-list.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `\n    &lt;section&gt;\n      Our list of heroes:\n      &lt;toh-hero *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" [hero]=\"hero\"&gt;\n      &lt;/toh-hero&gt;\n      Total powers: {{totalPowers}}&lt;br&gt;\n      Average power: {{avgPower}}\n    &lt;/section&gt;\n  `\n})\nexport class HeroListComponent {\n  heroes: Hero[];\n  totalPowers = 0;\n\n  get avgPower() {\n    return this.totalPowers / this.heroes.length;\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<h3 id=\"initialize-inputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab4bcku77fznkndflboud3aa9\">初始化输入属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#initialize-inputs\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-18\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdibmq25qf0txgdtvu7i27769\">风格 05-18<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-18\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bo1ona28z42o69qt6c38j2x2v\">TypeScript 的编译器选项 <code>--strictPropertyInitialization</code>，会确保某个类在构造函数中初始化其属性。当启用时，如果该类没有对任何未显式标为可选值的属性提供初始值，TypeScript 编译器就会报错。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14xv4683pe21j1cqqxtms94zm\">按照设计，Angular 把所有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 都视为可选值。只要有可能，你就应该通过提供默认值来满足 <code>--strictPropertyInitialization</code> 的要求。</p>\n<code-example header=\"app/heroes/hero/hero.component.ts\" path=\"styleguide/src/05-18/app/heroes/hero/hero.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() id = 'default_id';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45l75jttnmnm4271dt9yaq6mp\">如果该属性很难构造出默认值，请使用 <code>?</code> 来把该属性显式标记为可选的。</p>\n<code-example header=\"app/heroes/hero/hero.component.ts\" path=\"styleguide/src/05-18/app/heroes/hero/hero.component.optional.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() id?: string;\n\n  process() {\n    if (this.id) {\n      // ...\n    }\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dns8d5y8tnjlofc1bjbys9cq1\">你可能希望某个 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 字段是必填的，也就是说此组件的所有用户都必须传入该属性。这种情况下，请使用默认值。仅仅使用 <code>!</code> 来抑制 TypeScript 报错是不够的，应该避免它，因为这样做会阻止类型检查器来确保必须提供此输入值。</p>\n<code-example header=\"app/heroes/hero/hero.component.ts\" path=\"styleguide/src/05-18/app/heroes/hero/hero.component.avoid.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  // The exclamation mark suppresses errors that a property is\n  // not initialized.\n  // Ignoring this enforcement can prevent the type checker\n  // from finding potential issues.\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() id!: string;\n}\n\n</code-example>\n<h2 id=\"directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\">指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directives\"><i class=\"material-icons\">link</i></a></h2>\n<p><a id=\"06-01\"></a></p>\n<h3 id=\"use-directives-to-enhance-an-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qrhkt6t0lzehgbeunxjc8vfo\">使用指令来增强已有元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#use-directives-to-enhance-an-element\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-06-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mz4nbpy6hlqt8wqmqx7fvp38\">风格 06-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-06-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ar1yht85z1eb5de39agm27i9\"><strong>坚持</strong>当你需要有表现层逻辑，但没有模板时，使用属性型指令。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e54y2e2b0r8wqpbdtnvh6t4to\"><strong>为何</strong>？<br>\n属性型指令没有模板。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alrwqxfl7yho8i33c0jc2pt8p\"><strong>为何</strong>？<br>\n一个元素可以使用多个属性型指令。</p>\n</div>\n<code-example header=\"app/shared/highlight.directive.ts\" path=\"styleguide/src/06-01/app/shared/highlight.directive.ts\" region=\"example\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohHighlight]'\n})\nexport class HighlightDirective {\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseover') onMouseEnter() {\n    // do highlight work\n  }\n}\n\n</code-example>\n<code-example header=\"app/app.component.html\" path=\"styleguide/src/06-01/app/app.component.html\">\n&lt;div tohHighlight&gt;Bombasta&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"06-03\"></a></p>\n<h3 id=\"hostlistenerhostbinding-decorators-versus-host-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3c3y177onudxq1gmd56vg5p9\"><code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 和 <code><a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> 装饰器 vs. 组件元数据 <code>host</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-06-03\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvqu41fe3vjfok501rm9i6ixi\">风格 06-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-06-03\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azei1wcx05jwss00m5dmwr2dh\"><strong>考虑</strong>优先使用 <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 和 <code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code>，而不是 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 和 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的 <code>host</code> 属性。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5306v283iscxtut0y9o29no7d\"><strong>坚持</strong>让你的选择保持一致。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2x9smtx9om0hikp34nw540t57\"><strong>为什么</strong>? \n<br> 与 \n<code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> 关联的属性或与 \n<code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 关联的方法只能在指令类中的一个地方修改。 如果使用 \n<code>host</code> 元数据属性，则必须同时修改指令类中的属性/方法声明和与指令关联的装饰器中的元数据。</p>\n</div>\n<code-example header=\"app/shared/validator.directive.ts\" path=\"styleguide/src/06-03/app/shared/validator.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidator]'\n})\nexport class ValidatorDirective {\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('attr.role') role = 'button';\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    // do work\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vro5546ykfowdbn93601mp84\">与不推荐的方式（<code>host</code> 元数据）比较一下。</p>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyrdelc8jrh2n890eji9cl4sk\"><strong>为何</strong>？<br>\n<code>host</code> 元数据只是一个便于记忆的名字而已，并不需要额外的 ES 导入。</p>\n</div>\n<code-example header=\"app/shared/validator2.directive.ts\" path=\"styleguide/src/06-03/app/shared/validator2.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidator2]',\n  host: {\n    '[attr.role]': 'role',\n    '(mouseenter)': 'onMouseEnter()'\n  }\n})\nexport class Validator2Directive {\n  role = 'button';\n  onMouseEnter() {\n    // do work\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<h2 id=\"services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92fqgk8698jdwr0o85057qr44\">服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#services\"><i class=\"material-icons\">link</i></a></h2>\n<p><a id=\"07-01\"></a></p>\n<h3 id=\"services-are-singletons\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mmb1oae651luu3dpn0xbe19v\">服务总是单例的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#services-are-singletons\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-07-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adi2dnp3qoo3b2sc8pzhibsp\">风格 07-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gtfhiwc454mm0ep6xx9gazfw\"><strong>坚持</strong>在同一个注入器内，把服务当做单例使用。用它们来共享数据和功能。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1f8u69u27w8a9zuexa422juyd\"><strong>为何</strong>？<br>\n服务是在特性范围或应用内共享方法的理想载体。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rnxm0bxrzbj8gyathnwfbqii\"><strong>为何</strong>？<br>\n服务是共享状态性内存数据的理想载体。</p>\n</div>\n<code-example header=\"app/heroes/shared/hero.service.ts\" path=\"styleguide/src/07-01/app/heroes/shared/hero.service.ts\" region=\"example\">\nexport class HeroService {\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n\n  getHeroes() {\n    return this.http.get&lt;Hero[]&gt;('api/heroes');\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"07-02\"></a></p>\n<h3 id=\"single-responsibility-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94xyn6xpuo11uve5x3vem22k8\">单一职责<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#single-responsibility-1\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-07-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ajcb0pexcji0xjg7p6d5gz23\">风格 07-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-02\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"978is1sp6vrfnbe793pmmljp7\"><strong>坚持</strong>创建封装在上下文中的单一职责的服务。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xl5dpr0fschzgib0wfqck27n\"><strong>坚持</strong>当服务成长到超出单一用途时，创建一个新服务。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckkrw61sc6grsgi5o4z22dn0l\"><strong>为何</strong>？<br>\n当服务有多个职责时，它很难被测试。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0yx8h55bera2jfkd1u77vv7n\"><strong>为何</strong>？<br>\n当某个服务有多个职责时，每个注入它的组件或服务都会承担这些职责的全部开销。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"07-03\"></a></p>\n<h3 id=\"providing-a-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqbndmh59jdanzp44olf38bqa\">提供服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#providing-a-service\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-07-03\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dokeyg41dc8gbpluswdiz52us\">风格 07-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-03\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2f71cfom2dytd4iikakrxiz9w\"><strong>坚持</strong>在服务的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 装饰器上指定通过应用的根注入器提供服务。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14dcp9vpgkvhz0q9op5bzpqi4\"><strong>为何</strong>？<br>\nAngular 注入器是层次化的。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxlxstoi87xo0afllzjoys4ju\"><strong>为什么</strong>? \n<br> 将服务提供给根注入器时，该服务的实例是共享的，并且在每个需要该服务的类中都可用。 这在一个服务共享方法或状态时是理想的。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wwqw46luozp580jx1fcrv4ud\"><strong>为何</strong>？<br>\n当你在服务的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 中注册服务时，<a href=\"cli\">Angular CLI</a> 生产环境构建时使用的优化工具可以进行摇树优化，从而移除那些你的应用中从未用过的服务。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpg6iyo2uo6m1xos66n8fd2op\"><strong>为什么</strong>? \n<br> 当两个不同的组件需要不同的服务实例时，这就不理想了。 在这种情况下，最好在需要新的和单独实例的组件级别提供服务。</p>\n</div>\n<code-example header=\"src/app/treeshaking/service.ts\" path=\"dependency-injection/src/app/tree-shaking/service.ts\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class Service {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"07-04\"></a></p>\n<h3 id=\"use-the-injectable-class-decorator\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6opptpkxon4my9dbfa3p4erd\">使用 @Injectable() 类装饰器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#use-the-injectable-class-decorator\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-07-04\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3kt2mf77bwyp0i6b0g8r3yhj\">风格 07-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-04\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dofiu17yief6o4fbrctfagw1u\"><strong>坚持</strong>当使用类型作为令牌来注入服务的依赖时，使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 类装饰器，而非 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>()</code> 参数装饰器。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9h08rqry8t9xxyubuzcoh8wbh\"><strong>为何</strong>？<br>\nAngular 的 DI 机制会根据服务的构造函数参数的声明类型来解析服务的所有依赖。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p2xyoettiuyqu0y2ky09a8z4\"><strong>为何</strong>？<br>\n当服务只接受类型令牌相关的依赖时，比起在每个构造函数参数上使用 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>()</code>，<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的语法简洁多了。</p>\n</div>\n<code-example header=\"app/heroes/shared/hero-arena.service.ts\" path=\"styleguide/src/07-04/app/heroes/shared/hero-arena.service.avoid.ts\" region=\"example\">\n/* avoid */\n\nexport class HeroArena {\n  constructor(\n      @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(HeroService) private heroService: HeroService,\n      @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n}\n\n</code-example>\n<code-example header=\"app/heroes/shared/hero-arena.service.ts\" path=\"styleguide/src/07-04/app/heroes/shared/hero-arena.service.ts\" region=\"example\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroArena {\n  constructor(\n    private heroService: HeroService,\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<h2 id=\"data-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o08xf4203bnyfj3owsjqmb88\">数据服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#data-services\"><i class=\"material-icons\">link</i></a></h2>\n<p><a id=\"08-01\"></a></p>\n<h3 id=\"talk-to-the-server-through-a-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3plankokhhxsi5ia5w01435ir\">通过服务与 Web 服务器通讯<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#talk-to-the-server-through-a-service\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-08-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqd2mtbf8icft9fvcl6nsf6td\">风格 08-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-08-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8imhd004jzj7zh6hk9gmdlra\"><strong>坚持</strong>把数据操作和与数据交互的逻辑重构到服务里。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68dddujl9iy6ynh0y0w460vmj\"><strong>坚持</strong>让数据服务来负责 XHR 调用、本地储存、内存储存或者其它数据操作。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81262wzogpeft9gj2pghupb5x\"><strong>为什么</strong>? \n<br> 组件的责任是呈现并收集视图信息。 它不应关心如何获取数据，只需知道向谁请求。 将数据服务分离出来，将获取数据的逻辑移到数据服务中，让组件更简单并专注于视图。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akejfyf6e7qkwkv5rh0ppiqrh\"><strong>为何</strong>？<br>\n在测试使用数据服务的组件时，可以让数据调用更容易被测试（模拟或者真实）。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fbeftyy8oxrr6n80jzooim4n\"><strong>为什么</strong>? \n<br> 数据管理的细节，如标头、HTTP 方法、缓存、错误处理和重试逻辑，与组件和其他数据消费者无关。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elp869scsnlvkq65e5g7h8efb\">数据服务应该封装这些细节。这样，在服务内部修改细节，就不会影响到它的消费者。并且更容易通过实现一个模拟服务来对消费者进行测试。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<h2 id=\"lifecycle-hooks\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bhlcyenmobknyvoaatlpnddj\">生命周期钩子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3jox0z9q4o8fd1baomtlbrvk\">使用生命周期钩子来介入到 Angular 暴露的重要事件里。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"09-01\"></a></p>\n<h3 id=\"implement-lifecycle-hook-interfaces\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2g3bh3q2wpuinespekvoufb37\">实现生命周期钩子接口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#implement-lifecycle-hook-interfaces\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-09-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdob4wqvtpaa0h7aj7eulgpn\">风格 09-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-09-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b35gggesqie2y2ppzrymg1nw0\"><strong>坚持</strong>实现生命周期钩子接口。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3plup68twbvol4mfrnv01ehx2\"><strong>为什么</strong>? \n<br> 生命周期接口规定了带类型的方法签名。 使用这些签名来标记拼写和语法错误。</p>\n</div>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/09-01/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;OK&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  onInit() { // misspelled\n    console.log('The component is initialized');\n  }\n}\n\n</code-example>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/09-01/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;OK&lt;/button&gt;`\n})\nexport class HeroButtonComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  ngOnInit() {\n    console.log('The component is initialized');\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<h2 id=\"appendix\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cb6szqqkvvp9lxctzd6kfs3fm\">附录<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#appendix\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94dgcpaytmuepwjqakaygcfg9\">有用的 Angular 工具和小提示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<p><a id=\"A-02\"></a></p>\n<h3 id=\"file-templates-and-snippets\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31m9m1xhkj9r19gg0cb6654d7\">文档模板和代码片段<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#file-templates-and-snippets\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-a-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26k6r32q2ibyz3w46s8bbkq9i\">风格 A-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-a-02\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b17rf2ewhot9mstnlxucyf4pq\"><strong>坚持</strong>使用文件模板或代码片段来帮助实现一致的风格和模式。下面是为一些网络开发编辑器和 IDE 准备的模板和/或代码片段。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ktbtm137ux7v5evoxh2nkhdz\"><strong>考虑</strong>使用 <a href=\"https://code.visualstudio.com\">Visual Studio Code</a>的<a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\">代码片段</a> 来实施本风格指南。</p>\n<a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\">\n<img alt=\"Use Extension\" src=\"generated/images/guide/styleguide/use-extension.gif\" width=\"700\" height=\"429\">\n</a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5j8hg3p1tfd0sizv17ygf3c9m\"><strong>考虑</strong>使用 <a href=\"https://atom.io\">Atom</a> 的<a href=\"https://atom.io/packages/angular-2-typescript-snippets\">代码片断</a>来实施本风格指南。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32q7nhlpg6chm1co5u4c3ks1l\"><strong>考虑</strong>使用 <a href=\"http://www.sublimetext.com\">Sublime Text</a>的<a href=\"https://github.com/orizens/sublime-angular2-snippets\">代码片断</a> 来实施本风格指南。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6egje1inkqo49opevq6kfpp4z\"><strong>考虑</strong>使用 <a href=\"http://www.vim.org\">Vim</a> 的<a href=\"https://github.com/mhartington/vim-angular2-snippets\">代码片断</a>来实施本风格指南。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到顶部</a></p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/Pipe\n - errors/NG0300\n - guide/doc-editing\n - guide/docs-style-guide\n - guide/glossary\n - guide/pipes\n - guide/pipes-custom-data-trans\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/EventEmitter\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/Inject\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnChanges\n - api/core/OnInit\n - api/core/Output\n - api/core/Pipe\n - api/core/PipeTransform\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterModule\n - cli\n - guide/binding-syntax\n - guide/glossary#case-types\n - guide/styleguide#angular-coding-style-guide\n - guide/styleguide#angular-ngmodule-names\n - guide/styleguide#app-root-module\n - guide/styleguide#appendix\n - guide/styleguide#application-structure-and-ngmodules\n - guide/styleguide#avoid-aliasing-inputs-and-outputs\n - guide/styleguide#bootstrapping\n - guide/styleguide#component-custom-prefix\n - guide/styleguide#component-selectors\n - guide/styleguide#components\n - guide/styleguide#components-as-elements\n - guide/styleguide#data-services\n - guide/styleguide#decorate-input-and-output-properties\n - guide/styleguide#delegate-complex-component-logic-to-services\n - guide/styleguide#directive-custom-prefix\n - guide/styleguide#directive-selectors\n - guide/styleguide#directives\n - guide/styleguide#do-not-add-filtering-and-sorting-logic-to-pipes\n - guide/styleguide#dont-prefix-output-properties\n - guide/styleguide#end-to-end-e2e-test-file-names\n - guide/styleguide#extract-templates-and-styles-to-their-own-files\n - guide/styleguide#feature-modules\n - guide/styleguide#file-structure-conventions\n - guide/styleguide#file-templates-and-snippets\n - guide/styleguide#file-tree\n - guide/styleguide#flat\n - guide/styleguide#folders-by-feature-structure\n - guide/styleguide#general-naming-guidelines\n - guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata\n - guide/styleguide#identify\n - guide/styleguide#implement-lifecycle-hook-interfaces\n - guide/styleguide#initialize-inputs\n - guide/styleguide#lazy-loaded-folders\n - guide/styleguide#lifecycle-hooks\n - guide/styleguide#lift\n - guide/styleguide#locate\n - guide/styleguide#member-sequence\n - guide/styleguide#naming\n - guide/styleguide#never-directly-import-lazy-loaded-folders\n - guide/styleguide#overall-structural-guidelines\n - guide/styleguide#pipe-names\n - guide/styleguide#providing-a-service\n - guide/styleguide#put-presentation-logic-in-the-component-class\n - guide/styleguide#rule-of-one\n - guide/styleguide#separate-file-names-with-dots-and-dashes\n - guide/styleguide#service-names\n - guide/styleguide#services\n - guide/styleguide#services-are-singletons\n - guide/styleguide#shared-feature-module\n - guide/styleguide#single-responsibility\n - guide/styleguide#single-responsibility-1\n - guide/styleguide#small-functions\n - guide/styleguide#style-01-01\n - guide/styleguide#style-01-02\n - guide/styleguide#style-02-01\n - guide/styleguide#style-02-02\n - guide/styleguide#style-02-03\n - guide/styleguide#style-02-04\n - guide/styleguide#style-02-05\n - guide/styleguide#style-02-06\n - guide/styleguide#style-02-07\n - guide/styleguide#style-02-08\n - guide/styleguide#style-02-09\n - guide/styleguide#style-02-10\n - guide/styleguide#style-02-11\n - guide/styleguide#style-02-12\n - guide/styleguide#style-04-01\n - guide/styleguide#style-04-02\n - guide/styleguide#style-04-03\n - guide/styleguide#style-04-04\n - guide/styleguide#style-04-05\n - guide/styleguide#style-04-06\n - guide/styleguide#style-04-07\n - guide/styleguide#style-04-08\n - guide/styleguide#style-04-09\n - guide/styleguide#style-04-10\n - guide/styleguide#style-04-11\n - guide/styleguide#style-04-12\n - guide/styleguide#style-04-13\n - guide/styleguide#style-05-02\n - guide/styleguide#style-05-03\n - guide/styleguide#style-05-04\n - guide/styleguide#style-05-12\n - guide/styleguide#style-05-13\n - guide/styleguide#style-05-14\n - guide/styleguide#style-05-15\n - guide/styleguide#style-05-16\n - guide/styleguide#style-05-17\n - guide/styleguide#style-05-18\n - guide/styleguide#style-06-01\n - guide/styleguide#style-06-03\n - guide/styleguide#style-07-01\n - guide/styleguide#style-07-02\n - guide/styleguide#style-07-03\n - guide/styleguide#style-07-04\n - guide/styleguide#style-08-01\n - guide/styleguide#style-09-01\n - guide/styleguide#style-a-02\n - guide/styleguide#style-vocabulary\n - guide/styleguide#symbols-and-file-names\n - guide/styleguide#t-dry-try-to-be-dry\n - guide/styleguide#talk-to-the-server-through-a-service\n - guide/styleguide#toc\n - guide/styleguide#unit-test-file-names\n - guide/styleguide#use-directives-to-enhance-an-element\n - guide/styleguide#use-the-injectable-class-decorator\n - https://atom.io\n - https://atom.io/packages/angular-2-typescript-snippets\n - https://code.visualstudio.com\n - https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\n - https://github.com/mhartington/vim-angular2-snippets\n - https://github.com/orizens/sublime-angular2-snippets\n - https://karma-runner.github.io\n - https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\n - https://material.angular.io/components/button/overview\n - https://wikipedia.org/wiki/Single_responsibility_principle\n - https://www.sublimetext.com\n - https://www.vim.org\n - https://www.w3.org/TR/custom-elements\n-->"}
{"id":"guide/styleguide","title":"風格指南","contents":"<div class=\"content\">\n  <h1 id=\"angular-coding-style-guide\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ylx9oo934z05t076pp7bvnko\">風格指南<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#angular-coding-style-guide\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"baidw9cmxqcb2zneipjfgemhy\">如果你正在尋找關於 Angular 語法、約定和應用組織結構的官方指南，那你就來對了。本風格指南介紹了提倡的約定，更重要的是，解釋了為什麼。</p>\n<p><a id=\"toc\"></a></p>\n<h2 id=\"style-vocabulary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2b24t88z0fln9makp43wlb0s8\">風格指南的用詞<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-vocabulary\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0ejjb8oe2nwsyl3txutokblx\">每個指導原則都會描述好的或者壞的做法，所有指導原則都用同樣的風格描述。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agorhzy4fntskczwxhr8fyby\">指導原則中使用的詞彙用來表明推薦的程度。</p>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3eh4yajx7niui6j4jgr7u55dq\"><strong>堅持</strong>意味著總是應該遵循的約定。說<em>\"總是\"</em>可能顯得有點絕對，應該<em>\"總是\"</em>遵循的指導原則非常少，不過，只有遇到極不尋常的情況才能打破<em>堅持</em>的原則。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b75i8x2ivdwbf2nv9al9ps9b5\"><strong>考慮</strong>表示通常應該遵循的指導原則。如果你能完全理解指導原則背後的含義，並且有很好的理由違反它，那就改吧。但要注意保持一致。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vk2wjanbnmk73os31tlgwrte\"><strong>避免</strong>表示你絕對不應該做的事。需要<em>避免</em>的程式碼範例會有明顯的紅色標題。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edggm6zbpwx00gdg1l5brg9ki\"><strong>為何</strong>？<br>\n之所以會給出那些建議的原因。</p>\n</div>\n<h2 id=\"file-structure-conventions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4h49ucjuvweu5iplgwbpbv3c5\">檔案結構約定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#file-structure-conventions\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7w2vsvbrhmsezsof1uzpmqk\">在一些程式碼例子中，有的檔案有一個或多個相似名字的配套檔案。（比如 hero.component.ts 和 hero.component.html）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gn4y7dv3xwtox2jz1vhb6lff\">本指南將會使用像 <code>hero.component.ts|html|css|spec</code> 的簡寫來表示上面描述的多個檔案，目的是保持本指南的簡潔性，增加描述檔案結構時的可讀性。</p>\n<p><a id=\"single-responsibility\"></a></p>\n<h2 id=\"single-responsibility\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94xyn6xpuo11uve5x3vem22k8\">單一職責<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#single-responsibility\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chchey7fnqqx9qs1f8d5ljoa0\">對所有的元件、服務等等應用<a href=\"https://wikipedia.org/wiki/Single_responsibility_principle\"><em>單一職責原則(SRP)</em></a>。這樣可以讓應用更乾淨、更易讀、更易維護、更易測試。</p>\n<p><a id=\"01-01\"></a></p>\n<h3 id=\"rule-of-one\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7d9eytxyhsb8eiyz4pzqc5606\">單一規則<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#rule-of-one\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-01-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31b9bfte31oh3zr4zi45n827z\">風格 01-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-01-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2syssaf4i2fugtrttybhwzabm\"><strong>堅持</strong>每個檔案只定義一樣東西（比如服務或元件）。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekv9fkra1ymgiqxre1bv3d8u2\"><strong>考慮</strong>把檔案大小限制在 400 行程式碼以內。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8h7244cmhocwh1p24f0z9cjq\"><strong>為什麼</strong>? \n<br> 每個檔案一個元件可以更容易閱讀、維護，並避免與團隊在原始碼控制中發生衝突。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb4xc42q4ghfxvwi28bghcpos\"><strong>為何</strong>？<br>\n單元件檔案可以防止一些隱蔽的程式缺陷，當把多個元件合寫在同一個檔案中時，可能造成共享變數、建立意外的閉包，或者與依賴之間產生意外耦合等情況。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94ola9cmdq9txrodfeghlaqzx\"><strong>為何</strong>？<br>\n單獨的元件通常是該檔案預設的匯出，可以用路由器實現按需載入。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e75doh81yn6jnxyi6hzupojey\">最關鍵的是，可以讓程式碼更加可複用、更容易閱讀，減少出錯的可能性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tqk75cacqg1budgyo9pzp6ko\">下面的<em>負面</em>例子定義了 <code>AppComponent</code>，它來引導應用程式，定義了 <code>Hero</code> 模型物件，並從伺服器載入了英雄 ... 所有都在同一個檔案。<em>不要這麼做</em>。</p>\n<code-example format=\"typescript\" path=\"styleguide/src/01-01/app/heroes/hero.component.avoid.ts\" language=\"typescript\" header=\"app/heroes/hero.component.ts\">\n/* avoid */\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\ninterface Hero {\n  id: number;\n  name: string;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n      &lt;h1&gt;{{title}}&lt;/h1&gt;\n      &lt;pre&gt;{{heroes | json}}&lt;/pre&gt;\n    `,\n  styleUrls: ['app/app.component.css']\n})\nclass AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  title = 'Tour of Heroes';\n\n  heroes: Hero[] = [];\n\n  ngOnInit() {\n    getHeroes().then(heroes =&gt; (this.heroes = heroes));\n  }\n}\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>],\n  declarations: [AppComponent],\n  exports: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\nconst HEROES: Hero[] = [\n  { id: 1, name: 'Bombasto' },\n  { id: 2, name: 'Tornado' },\n  { id: 3, name: 'Magneta' }\n];\n\nfunction getHeroes(): Promise&lt;Hero[]&gt; {\n  return Promise.resolve(HEROES); // TODO: get hero data from the server;\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ev47lw4xoirufw3396ridjxew\">最好將元件及其支撐部件重新分配到獨立的檔案。</p>\n<code-tabs>\n    <code-pane header=\"main.ts\" path=\"styleguide/src/01-01/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n    <code-pane header=\"app/app.module.ts\" path=\"styleguide/src/01-01/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  exports: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n    <code-pane header=\"app/app.component.ts\" path=\"styleguide/src/01-01/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { HeroService } from './heroes';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-app',\n  template: `\n      &lt;toh-heroes&gt;&lt;/toh-heroes&gt;\n    `,\n  styleUrls: ['./app.component.css'],\n  providers: [HeroService]\n})\nexport class AppComponent {}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/01-01/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero, HeroService } from './shared';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  template: `\n      &lt;pre&gt;{{heroes | json}}&lt;/pre&gt;\n    `\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) {}\n\n  ngOnInit() {\n    this.heroService.getHeroes()\n      .then(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/shared/hero.service.ts\" path=\"styleguide/src/01-01/app/heroes/shared/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n  getHeroes() {\n    return Promise.resolve(HEROES);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/shared/hero.model.ts\" path=\"styleguide/src/01-01/app/heroes/shared/hero.model.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/shared/mock-heroes.ts\" path=\"styleguide/src/01-01/app/heroes/shared/mock-heroes.ts\">\nimport { Hero } from './hero.model';\n\nexport const HEROES: Hero[] = [\n  { id: 1, name: 'Bombasto' },\n  { id: 2, name: 'Tornado' },\n  { id: 3, name: 'Magneta' }\n];\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3x8ywe2kv6ed5afgk3sa08i0i\">隨著應用程式的成長，本法則會變得越來越重要。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"01-02\"></a></p>\n<h3 id=\"small-functions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2k2hrftutwcc5v7l8ewgjpke\">小函式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#small-functions\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-01-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3akt4073105sng1q7t1rbw478\">風格 01-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-01-02\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dmwm5ini1173gcineli7cy4v\"><strong>堅持</strong>定義簡單函式</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5idqe4evomxfuvme26eyyh0qa\"><strong>考慮</strong>限制在 75 行之內。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l6lmkad5zddd1bibdjcso8fr\"><strong>為何</strong>？<br>\n簡單函式更易於測試，特別是當它們只做一件事，只為一個目的服務時。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afdlwhstkv57urlnxwtvwj0od\"><strong>為何</strong>？<br>\n簡單函式促進程式碼複用。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajdqwcmykyl4vbkkzyw2knp3n\"><strong>為何</strong>？<br>\n簡單函式更易於閱讀。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n2znm70m8tdwa434ghs5zxzd\"><strong>為何</strong>？<br>\n簡單函式更易於維護。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1e5ae99ou3npwuzehmoqp02a\"><strong>為何</strong>？<br>\n小函式可避免易在大函式中產生的隱蔽性錯誤，比如與外界共享變數、建立意外的閉包或與依賴之間產生意外耦合等。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<h2 id=\"naming\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bw9rijmxkc9s0fx8psh0ebgeu\">命名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#naming\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d8kkstfd35u0sbtlfavvgek6q\">命名約定對可維護性和可讀性非常重要。本指南為檔案名和符號名推薦了一套命名約定。</p>\n<p><a id=\"02-01\"></a></p>\n<h3 id=\"general-naming-guidelines\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3g6tb3wxvv6zlp8j26hna6u1p\">總體命名原則<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#general-naming-guidelines\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6w3g64oztprm7d4u3hkg725gf\">風格 02-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ar7u9gn259nku7e4o2p48yp5p\"><strong>堅持</strong>所有符號使用一致的命名規則。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21uulrc6zrdkunh6lk5hppdxm\"><strong>堅持</strong>遵循同一個模式來描述符號的屬性和型別。推薦的模式為 <code>feature.type.ts</code>。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"z1q3mbg9aqsm7h12s07pldw9\"><strong>為什麼</strong>? \n<br> 命名約定有助於提供一種一致的方式快速查詢內容。 專案內的一致性至關重要。 團隊內的一致性很重要。 公司內的一致性提供了巨大的效率。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ytcycvuo78qixk047e712sdm\"><strong>為何</strong>？<br>\n命名約定幫助你更快得找到想找的程式碼，也更容易理解它。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2ud2xjhq1zq2u406je12fqrg\"><strong>為什麼</strong>? \n<br> 資料夾和檔案的名稱應清晰傳達它們的意圖。 例如，\n<code>app/heroes/hero-list.component.ts</code> 可能包含管理英雄清單的元件。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"02-02\"></a></p>\n<h3 id=\"separate-file-names-with-dots-and-dashes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bre81j13jqs96vxc27jwrmhf1\">使用點和橫槓來分隔檔案名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#separate-file-names-with-dots-and-dashes\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1syxw9ujh6cd1awlhzvt6uloh\">風格 02-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-02\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7i6lvzw34w54uqx4dnvahlpyg\"><strong>堅持</strong> 在描述性名字中，用橫槓來分隔單詞。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c96g4jkvohdy6y5z61849d4de\"><strong>堅持</strong>使用點來分隔描述性名字和型別。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32ngla9cn81agt8tdnavrwrmn\"><strong>堅持</strong>遵循先描述元件屬性，再描述它的型別的模式，對所有元件使用一致的型別命名規則。推薦的模式為 <code>feature.type.ts</code>。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1my6q8ctb2jf1iidxgbci24lb\"><strong>堅持</strong>使用慣用的字尾來描述型別，包括 <code>*.service</code>、<code>*.component</code>、<code>*.pipe</code>、<code>.module</code>、<code>.directive</code>。必要時可以建立更多型別名，但必須注意，不要建立太多。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exm4nljcc5ivju5fnu15nhk9v\"><strong>為何</strong>？<br>\n型別名字提供一致的方式來快速的識別檔案中有什麼。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5gpftk7xsc0c70t8ub6g11cs\"><strong>為何</strong>？<br>\n型別名可以讓你輕鬆利用編輯器或者 IDE 的模糊搜尋功能找到特定檔案型別。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xtcn0ge7jubyaf940eh89l4i\"><strong>為何</strong>？<br>\n像 <code>.service</code> 這樣的沒有簡寫過的型別名字，描述清楚，毫不含糊。\n像 <code>.srv</code>, <code>.svc</code>, 和 <code>.serv</code> 這樣的簡寫可能令人困惑。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12cgavfb4ps0di8tvy8hgw8kz\"><strong>為何</strong>？<br>\n為自動化任務提供模式對應。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"02-03\"></a></p>\n<h3 id=\"symbols-and-file-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7sq373oo9ics75ns296wzxloz\">符號名與檔案名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#symbols-and-file-names\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-03\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zv5bu95qtgfoy0fo9pyvjxuc\">風格 02-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-03\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hxd5zilhm56u356eykrhv444\"><strong>堅持</strong>為所有東西使用一致的命名約定，以它們所代表的東西命名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bbfegarpzxq11ow8tog273ab\"><strong>堅持</strong>使用大寫駝峰命名法來命名類別。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8lz9ifcr6j39z1an5el623eg6\"><strong>堅持</strong>對應符號名與它所在的檔案名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60eeftgkaabhjmxumz6fnr9fx\"><strong>堅持</strong>在符號名後面追加約定的型別字尾（比如 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>、<code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>、<code>Module</code>、<code><a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code>、<code>Service</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"679kc4c1xckc00ehmj7vtxv5u\"><strong>堅持</strong>在檔案名後面追加約定的型別字尾（比如 <code>.component.ts</code>、<code>.directive.ts</code>、<code>.module.ts</code>、<code>.pipe.ts</code>、<code>.service.ts</code>）。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jxgyz72rb89yu7u7g4ctyixn\"><strong>為什麼</strong>? \n<br> 一致的約定使得能夠快速識別和引用不同型別的資產變得容易。</p>\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u3r6vghayayquoaotd7dbcjc\">符號名稱</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32w7n8dmecm813yjz3115x40v\">檔案名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … }) \nexport class AppComponent { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76xbzn0oi6jg3c0yiy1ujxpgi\">app.component.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … }) \nexport class HeroesComponent { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ceq8y5iyua18izqyweilhrjv8\">heroes.component.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … }) \nexport class HeroListComponent { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"455ys7y5zs01enmzcmdit1d88\">hero-list.component.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … }) \nexport class HeroDetailComponent { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aryhbk8xxdgsat2th9kthyruw\">hero-detail.component.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ … }) \nexport class ValidationDirective { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7thnhoovblts7ye48khma0w6r\">validation.directive.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class AppModule </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c7z5ohn602naqu1r4rvnky6o\">app.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' }) \nexport class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"apwve13b2t9v6xxbmovuve3s3\">init-caps.pipe.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nexport class UserProfileService { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adshstn10symha1ywi4rjnzix\">user-profile.service.ts</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"02-04\"></a></p>\n<h3 id=\"service-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egtllfu0xqypw2j9doqbhvxc2\">服務名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#service-names\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-04\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5v00l93a0ngoquq2dv7kohwc3\">風格 02-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-04\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2n8luh77rfewi6lx4ycu0i84u\"><strong>堅持</strong>使用一致的規則命名服務，以它們的屬性來命名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ze5f1sozay07p7vxbmvjy7f3\"><strong>堅持</strong>為服務的類別名稱加上 <code>Service</code> 字尾。比如，獲取資料或英雄清單的服務應該命名為 <code>DataService</code> 或 <code>HeroService</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e30ruoxykqi5xzwialob8sy7i\">有些詞彙顯然就是服務，比如那些以『-er』字尾結尾的。比如把記日誌的服務命名為 <code>Logger</code> 就比 <code>LoggerService</code> 更好些。需要在你的專案中決定這種特例是否可以接受。但無論如何，都要儘量保持一致。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8utc6v0ydlqhwxcb0amzw877\"><strong>為何</strong>？<br>\n提供一致的方式來快速識別和引用服務。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"criz7hn9psqv0w6u6vmrp7xkr\"><strong>為何</strong>？<br>\n像 <code>Logger</code> 這樣的清楚的服務名不需要字尾。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2s3e9altr3pjx54rgx2sk77sl\"><strong>為何</strong>？<br>\n像 <code>Credit</code> 這樣的，服務名是名詞，需要一個字尾。當不能明顯分辨它是服務還是其它東西時，應該新增字尾。</p>\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u3r6vghayayquoaotd7dbcjc\">符號名稱</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32w7n8dmecm813yjz3115x40v\">檔案名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nexport class HeroDataService { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfa041rjmyrtjz89u2s723xr2\">hero-data.service.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nexport class CreditService { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ebz67lznp3vo48h0z9h28qmpk\">credit.service.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nexport class Logger { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnwweotozg8pbnv7wlrbxnlek\">logger.service.ts</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"02-05\"></a></p>\n<h3 id=\"bootstrapping\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p29plvvbfir7eo01lmju80ab\">引導<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#bootstrapping\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-05\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e7nh80rakku37masb53jx90c\">風格 02-05<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-05\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hd9543fx3bl3x9yi513ri7eb\"><strong>堅持</strong>把應用的引導程式和平台相關的邏輯放到名為 <code>main.ts</code> 的檔案裡。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ar8yx9jbhuxl2a2u6i07l6wic\"><strong>堅持</strong>在引導邏輯中包含錯誤處理程式碼。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15eqrm61klzk8p3rysy2wa5hp\"><strong>避免</strong>把應用邏輯放在 <code>main.ts</code> 中，而應放在元件或服務裡。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1f0hze4q3mlcz4g0lb8s7e48i\"><strong>為何</strong>？<br>\n應用的啟動邏輯遵循一致的約定。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kivn9y1u1i6mu5yzayo0ib3m\"><strong>為何</strong>？<br>\n這是從其它技術平台借鑑的常用約定。</p>\n</div>\n<code-example header=\"main.ts\" path=\"styleguide/src/02-05/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .then(success =&gt; console.log(`Bootstrap success`))\n  .catch(err =&gt; console.error(err));\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"05-02\"></a></p>\n<h3 id=\"component-selectors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ah1qcm2o8rsgoaurr2c6ymnmx\">元件選擇器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#component-selectors\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e230js3j4tjqk0yfvnq73yygd\">風格 05-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-02\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sxqsutfoebo8t3si321nvfhe\"><strong>堅持</strong>使用<em>中線命名法（dashed-case）</em>或叫<em>烤串命名法（kebab-case）</em>來命名元件的元素選擇器。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xy3hyv5oq77ulby8rh97qgo0\"><strong>為何</strong>？<br>\n讓元素名和<a href=\"https://www.w3.org/TR/custom-elements\">自定義元素</a>規範保持一致。</p>\n</div>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-02/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'tohHeroButton',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-02/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-pane>\n    <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-02/app/app.component.html\">\n&lt;toh-hero-button&gt;&lt;/toh-hero-button&gt;\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"02-07\"></a></p>\n<h3 id=\"component-custom-prefix\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ce6k8qrf1qar1abids6xfjl86\">為元件新增自定義字首<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#component-custom-prefix\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-07\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agcwyqgcbyh9j54xs4sckznp\">風格 02-07<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-07\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5g4q6x09d7frnai9zguelgafi\"><strong>堅持</strong>使用帶連字元的小寫元素選擇器值（比如 <code>admin-users</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95qckcs2c10mu09ees9ooywsk\"><strong>堅持</strong>為元件選擇器新增自定義字首。比如，<code>toh</code> 字首表示 <strong>T</strong>our <strong>o</strong>f <strong>H</strong>eroes（英雄之旅），而字首 <code>admin</code> 表示管理屬性區。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98yocngcaqmo0upp5ie70idke\"><strong>堅持</strong>使用字首來識別屬性區或者應用程式本身。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bm871wgexs6atdavsecwn4h57\"><strong>為何</strong>？<br>\n防止與其它應用中的元件和原生 HTML 元素發生命名衝突。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqu5mui9xrd8tzl5vakfod27g\"><strong>為何</strong>？<br>\n更容易在其它應用中推廣和共享元件。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqiwxki58lfpu0be7e8pru1t7\"><strong>為何</strong>？<br>\n元件在 DOM 中更容易被區分出來。</p>\n</div>\n<code-example header=\"app/heroes/hero.component.ts\" path=\"styleguide/src/02-07/app/heroes/hero.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n// HeroComponent is in the Tour of Heroes feature\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero'\n})\nexport class HeroComponent {}\n\n</code-example>\n<code-example header=\"app/users/users.component.ts\" path=\"styleguide/src/02-07/app/users/users.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n// UsersComponent is in an Admin feature\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'users'\n})\nexport class UsersComponent {}\n\n</code-example>\n<code-example header=\"app/heroes/hero.component.ts\" path=\"styleguide/src/02-07/app/heroes/hero.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero'\n})\nexport class HeroComponent {}\n\n</code-example>\n<code-example header=\"app/users/users.component.ts\" path=\"styleguide/src/02-07/app/users/users.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'admin-users'\n})\nexport class UsersComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"02-06\"></a></p>\n<h3 id=\"directive-selectors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dq5s2wjuptqiomfjdsc2ffvtm\">指令選擇器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directive-selectors\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-06\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"517z2e7aogobdderyrq6s93c3\">風格 02-06<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-06\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vwoh6lfx57ooq12zcdc9f1ty\"><strong>堅持</strong>使用小駝峰形式命名指令的選擇器。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ye57pzi6mpj15qsx17v9sa4t\"><strong>為何</strong>？<br>\n可以讓指令中的屬性名與檢視中繫結的屬性名保持一致。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rgharwlao4138hyyjbcm0m4l\"><strong>為何</strong>？<br>\nAngular 的 HTML 解析器是大小寫敏感的，可以識別小駝峰形式。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"02-08\"></a></p>\n<h3 id=\"directive-custom-prefix\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o9rtq7l9eigs9chi6kp41oj0\">為指令新增自定義字首<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directive-custom-prefix\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-08\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79koyo0ew2bgl3rr47b3vdy3x\">風格 02-08<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-08\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"je29cxflu6kolvnv2su1n0ev\"><strong>堅持</strong>為指令的選擇器新增自定義字首（比如字首 <code>toh</code> 來自 <strong>T</strong>our <strong>o</strong>f <strong>H</strong>eroes）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bay98a4iyb2yffvi8jqbhuvl\"><strong>堅持</strong>用小駝峰形式拼寫非元素選擇器，除非該選擇器用於對應原生 HTML 屬性。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40l6vflrxw23qigdr2mt8dff7\"><strong>不要</strong>以 <code>ng</code> 作為指令名稱的字首，因為該字首是為 Angular 保留的，使用它可能會導致難以診斷的錯誤。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d6jxxdyvk75jfouff3x6n4nbb\"><strong>為何</strong>？<br>\n防止名字衝突。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"977mzbrt1zinqv3wwhr2f6eyn\"><strong>為何</strong>？<br>\n指令更加容易被識別。</p>\n</div>\n<code-example header=\"app/shared/validate.directive.ts\" path=\"styleguide/src/02-08/app/shared/validate.directive.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[validate]'\n})\nexport class ValidateDirective {}\n\n</code-example>\n<code-example header=\"app/shared/validate.directive.ts\" path=\"styleguide/src/02-08/app/shared/validate.directive.ts\" region=\"example\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidate]'\n})\nexport class ValidateDirective {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"02-09\"></a></p>\n<h3 id=\"pipe-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2opbzxd8goomybyqok3xpg07\">通道名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#pipe-names\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-09\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dccx8wyl0ao2oh01itc2pk68z\">風格 02-09<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-09\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o5wvaov5dbia8fox8vpzl9q3\"><strong>堅持</strong>為所有通道使用一致的命名約定，用它們的屬性來命名。通道類別名應該使用 <a href=\"guide/glossary#case-types\">UpperCamelCase</a>（類別名稱的通用約定），而相應的 <code>name</code> 字串應該使用 <em>lowerCamelCase</em>。<code>name</code> 字串中不應該使用中線（『中線格式』或『烤串格式』）。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"db20m6w7pkckj7ey4isbjrgpm\"><strong>為何</strong>？<br>\n提供一致的方式快速識別和引用通道。</p>\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u3r6vghayayquoaotd7dbcjc\">符號名稱</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32w7n8dmecm813yjz3115x40v\">檔案名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'ellipsis' }) \nexport class EllipsisPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"672lh4vbbxibhahb842fps1av\">ellipsis.pipe.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' }) \nexport class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"apwve13b2t9v6xxbmovuve3s3\">init-caps.pipe.ts</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"02-10\"></a></p>\n<h3 id=\"unit-test-file-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69s6h7llsun3hlkbeniah9f9p\">單元測試檔案名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#unit-test-file-names\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-10\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22aavcnen3xikj4hukikxv4bi\">風格 02-10<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-10\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3mnxsyuga4ki9exari50m8qb\"><strong>堅持</strong>測試規格檔案名與被測試元件檔案名相同。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vfiq1ncrywcxyeslaicj8isg\"><strong>堅持</strong>測試規格檔案名新增 <code>.spec</code> 字尾。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91f35awvn7ogvy1qku1gkdnd4\"><strong>為何</strong>？<br>\n提供一致的方式來快速識別測試。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5fi8so624g7y5rxvgatg3c3dr\"><strong>為何</strong>？<br>\n提供一個與 <a href=\"http://karma-runner.github.io\">karma</a> 或者其它測試執行器相配的命名模式。</p>\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er9zbwotwu7rb3b5a9cpn0sew\">測試型別</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0ep8iyoh09xj6us06fxivkpz\">檔案名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7vzzlnsersqq3lvejga81lr\">元件</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wneqntwdhbqftd9bu9wwbs7u\">heroes.component.spec.ts \n<br> hero-list.component.spec.ts \n<br> hero-detail.component.spec.ts</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92fqgk8698jdwr0o85057qr44\">服務</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btfukrcby4gmzomfih8hbvxdz\">logger.service.spec.ts \n<br> hero.service.spec.ts \n<br> filter-text.service.spec.ts</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4c1vv1rgp7phpgpk7rg59bjk0\">通道</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"syccr7c1irscor75nt3wdusi\">ellipsis.pipe.spec.ts \n<br> init-caps.pipe.spec.ts</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"02-11\"></a></p>\n<h3 id=\"end-to-end-e2e-test-file-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9toioab8b5b2tgoh0aynacwgs\"><em>端到端</em>（E2E）測試的檔案名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#end-to-end-e2e-test-file-names\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-11\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j0mzde87vak6tyr2paxo92fm\">風格 02-11<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-11\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hvxlerm474p93pkv8qujlve2\"><strong>堅持</strong>端到端測試規格檔案和它們所測試的屬性同名，新增 <code>.e2e-spec</code> 字尾。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50m298cjalilu2upyau2zoc4q\"><strong>為何</strong>？<br>\n提供一致的方式快速識別端到端測試檔案。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1y12faee2o591t6jwkl3tvnbw\"><strong>為何</strong>？<br>\n提供一個與測試執行器和建立自動化對應的模式。</p>\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er9zbwotwu7rb3b5a9cpn0sew\">測試型別</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0ep8iyoh09xj6us06fxivkpz\">檔案名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3f8bn0bzrcroikr9xly33l38\">端到端測試</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dif5r0sibxuh0laadlqwhpoi1\">app.e2e-spec.ts \n<br> heroes.e2e-spec.ts</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"02-12\"></a></p>\n<h3 id=\"angular-ngmodule-names\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rdn65cgkgke3axr9sqelpqzo\">Angular <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 命名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#angular-ngmodule-names\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-02-12\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drqrwtz11qc7n52v48yc268i8\">風格 02-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-12\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dk2pd9ypydqufv2v8umadnb2\"><strong>堅持</strong>為符號名新增 <code>Module</code> 字尾。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dd27felhixkd3oj06yt0cekni\"><strong>堅持</strong>為檔案名新增 <code>.module.ts</code> 副檔名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93ump97hzzc0ksxqv4piuljcc\"><strong>堅持</strong>用屬性名和所在目錄命名模組。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abohonols1z5drpjzyv0ae5fg\"><strong>為何</strong>？<br>\n提供一致的方式來快速標識和引用模組。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq5lat0luwcsz4t6a1c5nfoug\"><strong>為何</strong>？<br>\n大駝峰命名法是一種命名約定，用來標識可用建構式函式實例化的物件。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnxrar0piyxwpbgw3mpwpt9gd\"><strong>為何</strong>？<br>\n很容易就能看出這個模組是同名屬性的根模組。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drfadwkzlio629pnnm2z5tb05\"><strong>堅持</strong>為 <code>RoutingModule</code> 類別名稱新增 <code>RoutingModule</code> 字尾。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cozk5vg32gmv9a7009w3bgws7\"><strong>堅持</strong>為 <code>RoutingModule</code> 的檔案名新增 <code>-routing.module.ts</code> 字尾。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61sj097lxzlkc16xhq165w5bt\"><strong>為何</strong>？<br>\n<code>RoutingModule</code> 是一種專門用來設定 Angular 路由器的模組。\n『類別名稱和檔案名保持一致』的約定使這些模組易於發現和驗證。</p>\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u3r6vghayayquoaotd7dbcjc\">符號名稱</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32w7n8dmecm813yjz3115x40v\">檔案名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class AppModule { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c7z5ohn602naqu1r4rvnky6o\">app.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class HeroesModule { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9ymqur0q39ifc9x0r5bstwr9\">heroes.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class VillainsModule { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an53gi9p5zj1mf6ad50vbqli9\">villains.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class AppRoutingModule { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d58v6ocb7y8qkxfvh0v4mylc4\">app-routing.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class HeroesRoutingModule { } </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dvkyv8ykl35ijgirz060qok01\">heroes-routing.module.ts</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<h2 id=\"application-structure-and-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"di7jmh60xil3z5lrm8gqx1bph\">應用程式結構與 NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#application-structure-and-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dbqxybg15l7k1o8tbgamkthnp\">準備一個近期實施方案和一個長期的願景。從零開始，但要考慮應用程式接下來的路往哪兒走。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rls832ddeq6swhvkjgpfm1nw\">所有應用程式的原始碼都放到名叫 <code>src</code> 的目錄裡。所有屬性區都在自己的資料夾中，帶有它們自己的 NgModule。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9trqgeq3emy51dbctsseulw7\">所有內容都遵循每個檔案一個屬性的原則。每個元件、服務和通道都在自己的檔案裡。所有第三方程式套件儲存到其它目錄裡，而不是 <code>src</code> 目錄。你不會修改它們，所以不希望它們弄亂你的應用程式。使用本指南介紹的檔案命名約定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"04-01\"></a></p>\n<h3 id=\"lift\"><code>LIFT</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lift\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"608wi946u4izacn11tv9c1eo9\">風格 04-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vtsz6r8h28ujwgijxm1matig\"><strong>堅持</strong>組織應用的結構，力求：快速定位 (<code>L</code>ocate) 程式碼、一眼識別 (<code>I</code>dentify) 程式碼、 儘量保持扁平結構 (<code>F</code>lattest) 和嘗試 (<code>T</code>ry) 遵循 DRY (Do Not Repeat Yourself, 不重複自己) 原則。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qwk552pnwggzqarj1gvctvdk\"><strong>堅持</strong>四項基本原則定義檔案結構，上面的原則是按重要順序排列的。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6uzpihape9ysd849el0gng8l8\"><strong>為何</strong>？<br>\nLIFT 提供了一致的結構，它具有擴充套件性強、模組化的屬性。因為容易快速鎖定程式碼，提高了開發者的效率。\n另外，檢查應用結構是否合理的方法是問問自己：我能快速開啟與此屬性有關的所有檔案並開始工作嗎？</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"04-02\"></a></p>\n<h3 id=\"locate\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1y2b4qhtqn1cdm9jtdy4d62qb\">定位<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#locate\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dh24lrrxtprsfgw2go2256op\">風格 04-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-02\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vqo4rmftnnwcs8wi137tmrlw\"><strong>堅持</strong>直觀、簡單和快速地定位程式碼。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9c343rxu8aokxfq3zbf0gyz3g\"><strong>為何？</strong>\n要想高效的工作，就必須能迅速找到檔案，特別是當不知道（或不記得）檔案<em>名</em>時。\n把相關的檔案一起放在一個直觀的位置可以節省時間。\n富有描述性的目錄結構會讓你和後面的維護者眼前一亮。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"04-03\"></a></p>\n<h3 id=\"identify\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jv8hgm53bojfdk7mh5g1bzo4\">識別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#identify\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-03\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87xr8bc0x3y6nwdcfio7rok1o\">風格 04-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-03\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpd6nbfkdym3qaj2lxwtazv4j\"><strong>堅持</strong>命名檔案到這個程度：看到名字立刻知道它包含了什麼，代表了什麼。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvujvimy3shfwwahbd7e5rj9v\"><strong>堅持</strong>檔案名要具有說明性，確保檔案中只包含一個元件。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6iztmcjhavbgzksp6ldcz6lwy\"><strong>避免</strong>建立包含多個元件、服務或者混合體的檔案。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7nmcwt3cdtu4u320rdoeh43l\"><strong>為何</strong>？<br>\n花費更少的時間來查詢和琢磨程式碼，就會變得更有效率。\n較長的檔案名遠勝於<em>較短卻容易混淆的</em>縮寫名。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hu083kn43b2zhw32tnef5mhe\">當你有一組小型、緊密相關的屬性時，違反<em>一物一檔案</em>的規則可能會更好，這種情況下單一檔案可能會比多個檔案更容易發現和理解。注意這個例外。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"04-04\"></a></p>\n<h3 id=\"flat\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6w0i0bniswsnubfa0lszfq8fh\">扁平<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#flat\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-04\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4a1ncuqsbgi7v8c5fkykhrmy9\">風格 04-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-04\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6e3z6scakrb9ta7vvwbrgv4eq\"><strong>堅持</strong>儘可能保持扁平的目錄結構。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9stdg327nuhtd0hj3khs3lj8i\"><strong>考慮</strong>當同一目錄下達到 7 個或更多個檔案時建立子目錄。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8g61j0gslek0h3wyv394k5vva\"><strong>考慮</strong>設定 IDE，以隱藏無關的檔案，比如生成出來的 <code>.js</code> 檔案和 <code>.js.map</code> 檔案等。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9aiwirr76pxmeun41dl56nuhe\"><strong>為何</strong>？<br>\n沒人想要在超過七層的目錄中查詢檔案。扁平的結構有利於搜尋。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vbcg74piaqtb06d5kno1vqyn\">另一方面，<a href=\"https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\">心理學家們相信</a>，當關注的事物超過 9 個時，人類別就會開始感到吃力。所以，當一個資料夾中的檔案有 10 個或更多個檔案時，可能就是建立子目錄的時候了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mvkyzhnfwg1zanzb2jvuxm8q\">還是根據你自己的舒適度而定吧。除非建立新檔案夾能有顯著的價值，否則儘量使用扁平結構。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"04-05\"></a></p>\n<h3 id=\"t-dry-try-to-be-dry\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ee4vbavan2t5bcatcr3nl480o\"><em>T-DRY</em>（儘量不重複自己）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#t-dry-try-to-be-dry\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-05\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pnzqez0bktocefm8jrb2t94v\">風格 04-05<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-05\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88m3n2vjjmopmno6l7em78n0b\"><strong>堅持</strong> DRY（Don't Repeat Yourself，不重複自己）。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5opmacd9cb1rqell9fae0qix4\"><strong>避免</strong>過度 DRY，以致犧牲了閱讀性。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93qkc0liszoyfmlgbcsb2synp\"><strong>為何</strong>？<br>\n雖然 DRY 很重要，但如果要以犧牲 LIFT 的其它原則為代價，那就不值得了。\n這也就是為什麼它被稱為 <em>T-DRY</em>。\n比如，把元件命名為 <code>hero-view.component.html</code> 是多餘的，因為帶有 <code>.html</code> 副檔名的檔案顯然就是一個檢視 (view)。\n但如果它不那麼顯著，或不符合常規，就把它寫出來。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"04-06\"></a></p>\n<h3 id=\"overall-structural-guidelines\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4oduef1tzuflmf5uuhh001pcd\">總體結構的指導原則<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#overall-structural-guidelines\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-06\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aspx2kt2f1giw7faoo4km5vdz\">風格 04-06<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-06\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nzvewdyk7f39po6d00l4zlu8\"><strong>堅持</strong>從零開始，但要考慮應用程式接下來的路往哪兒走。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yk3nz54fvr73xbuqgg8mchtt\"><strong>堅持</strong>有一個近期實施方案和一個長期的願景。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atvehhavd03xnfjvis08c1tde\"><strong>堅持</strong>把所有原始碼都放到名為 <code>src</code> 的目錄裡。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7raghl543hzfhhe8aw5b7kxvl\"><strong>堅持</strong>如果元件具有多個伴生檔案 (<code>.ts</code>、<code>.html</code>、<code>.css</code> 和 <code>.spec</code>)，就為它建立一個資料夾。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4npgydd128p63l7t1qjx9n4xu\"><strong>為何</strong>？<br>\n在早期階段能夠幫助保持應用的結構小巧且易於維護，這樣當應用增長時就容易進化了。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqdd1qijjl9prbpsv8qxjbxhs\"><strong>為何?</strong> 元件通常有四個檔案 (<code>*.html</code>、 <code>*.css</code>、 <code>*.ts</code> 和 <code>*.spec.ts</code>)，它們很容易把一個目錄弄亂。</p>\n</div>\n<p><a id=\"file-tree\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6dnlmvs0umk26eucgbofgur3g\">下面是符合規範的目錄和檔案結構</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    &lt;project root&gt;\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          core\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            exception.service.ts|spec.ts\n          </div>\n          <div class=\"file\">\n            user-profile.service.ts|spec.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          heroes\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            hero\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              hero.component.ts|html|css|spec.ts\n            </div>\n          </div>\n          <div class=\"file\">\n            hero-list\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              hero-list.component.ts|html|css|spec.ts\n            </div>\n          </div>\n          <div class=\"file\">\n            shared\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              hero-button.component.ts|html|css|spec.ts\n            </div>\n            <div class=\"file\">\n              hero.model.ts\n            </div>\n            <div class=\"file\">\n              hero.service.ts|spec.ts\n            </div>\n          </div>\n          <div class=\"file\">\n            heroes.component.ts|html|css|spec.ts\n          </div>\n          <div class=\"file\">\n            heroes.module.ts\n          </div>\n          <div class=\"file\">\n            heroes-routing.module.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          shared\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            shared.module.ts\n          </div>\n          <div class=\"file\">\n            init-caps.pipe.ts|spec.ts\n          </div>\n          <div class=\"file\">\n            filter-text.component.ts|spec.ts\n          </div>\n          <div class=\"file\">\n            filter-text.service.ts|spec.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          villains\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            villain\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              …\n            </div>\n          </div>\n          <div class=\"file\">\n            villain-list\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              …\n            </div>\n          </div>\n          <div class=\"file\">\n            shared\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              …\n            </div>\n          </div>\n          <div class=\"file\">\n            villains.component.ts|html|css|spec.ts\n          </div>\n          <div class=\"file\">\n            villains.module.ts\n          </div>\n          <div class=\"file\">\n            villains-routing.module.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          app.component.ts|html|css|spec.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          app-routing.module.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        …\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules/…\n    </div>\n    <div class=\"file\">\n      …\n    </div>\n  </div>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4l4wnxenxljt1oq46fwfsaj9i\">把元件放在專用目錄中的方式廣受歡迎，對於小型應用，還可以保持元件扁平化（而不是放在專用目錄中）。這樣會把四個檔案放在現有目錄中，也會減少目錄的巢狀。無論你如何選擇，請保持一致。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"04-07\"></a></p>\n<h3 id=\"folders-by-feature-structure\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kpqlvv46pjhzolc3p91cr99w\">按屬性組織的目錄結構<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#folders-by-feature-structure\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-07\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b51s9f2pyvqr1rv4ydwn5exux\">風格 04-07<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-07\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26ngx6ya72y2q2vwnz98zsjwl\"><strong>堅持</strong>根據屬性區命名目錄。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jk2x1j84ne0gqz6jc01lk4b1\"><strong>為什麼</strong>? \n<br> 開發人員可以一眼定位程式碼並確定每個檔案代表什麼。 結構儘可能扁平，沒有重複或冗餘的命名。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsw80mwsji7zzqrwq97bbskzf\"><strong>為何</strong>？<br>\nLIFT 原則中包含了所有這些。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq6cd4b23ak2cm5nrw5ckhtef\"><strong>為什麼</strong>? \n<br> 透過組織內容並使其符合 LIFT 指南，有助於減少應用程式變得混亂。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"diaqqysurk9jmvs48g9dljmrl\"><strong>為什麼</strong>? \n<br> 當存在大量檔案時，例如 10 個以上，透過一致的資料夾結構更容易定位它們，而在扁平結構中更難。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bi7ji0cxjgandfz0352bdfsx\"><strong>堅持</strong>為每個屬性區建立一個 NgModule。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80x9y6cbfeeoh7r7nmuo71vlp\"><strong>為何</strong>？<br>\nNgModule 使延遲載入可路由的屬性變得更容易。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25gyjcn7mzo9cofevymb7qukr\"><strong>為何</strong>？<br>\nNgModule 隔離、測試和複用屬性更容易。</p>\n</div>\n<div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co6ec4975ejyx85nzw2vb69m2\">欲知詳情，參閱<a href=\"guide/styleguide#file-tree\">目錄和檔案結構的範例</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"04-08\"></a></p>\n<h3 id=\"app-root-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kenniji1uujqveftn9a34bal\">應用的<em>根模組</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#app-root-module\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-08\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tt688gd8nh8m4w3ldkqx1yiz\">風格 04-08<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-08\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3c6nr13mbbs7g9opwprqsgalr\"><strong>堅持</strong>在應用的根目錄建立一個 NgModule（比如 <code>/src/app</code>）。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jx3zgvfgcjdgypzdm8vuh79q\"><strong>為何</strong>？<br>\n每個應用都至少需要一個根 NgModule。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dadevf98xn1cdtoj2wlmbu265\"><strong>考慮</strong>把根模組命名為 <code>app.module.ts</code>。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bg1179lwzr2j7akean6erpfd\"><strong>為何</strong>？<br>\n能讓定位和識別根模組變得更容易。</p>\n</div>\n<code-example format=\"typescript\" path=\"styleguide/src/04-08/app/app.module.ts\" language=\"typescript\" region=\"example\" header=\"app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  exports: [ AppComponent ]\n})\nexport class AppModule {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"04-09\"></a></p>\n<h3 id=\"feature-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bf4qau51t25zl7c84rwr3a4f\">屬性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#feature-modules\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-09\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22w93srpp3bmgwudmsy0n9jsf\">風格 04-09<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-09\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"759gci00mi5icc9hje06w3e2w\"><strong>堅持</strong>為應用中每個明顯的屬性建立一個 NgModule。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eufaoq3rxailqj6klmbvly4uc\"><strong>堅持</strong>把屬性模組放在與屬性區同名的目錄中（比如 <code>app/heroes</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17zngg5p9ctk3ff1b55jstvjm\"><strong>堅持</strong>屬性模組的檔案名應該能反映出屬性區的名字和目錄（比如 <code>app/heroes/heroes.module.ts</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1u972kjfmdp0r1dg7k5pukfkg\"><strong>堅持</strong>屬性模組的符號名應該能反映出屬性區、目錄和檔案名（比如在 <code>app/heroes/heroes.module.ts</code> 中定義 <code>HeroesModule</code>）。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4kw92ff2noghn3ai7mpagap\"><strong>為何</strong>？<br>\n屬性模組可以對其它模組暴露或隱藏自己的實現。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pj4yjvqt8gis5ygf6095j20k\"><strong>為何</strong>？<br>\n屬性模組標記出組成該屬性分割槽的相關元件集合。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xaktubyshljwq3s1gjpsuesn\"><strong>為何</strong>？<br>\n方便路由到屬性模組 —— 無論是用主動載入還是延遲載入的方式。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xk6iqkjwi059qbo9ihxsj0k3\"><strong>為何</strong>？<br>\n屬性模組在特定的功能和其它應用屬性之間定義了清晰的邊界。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmd4g69tt21f32iuy32khgyhw\"><strong>為何</strong>？<br>\n屬性模組幫助澄清開發職責，以便於把這些職責指派給不同的專案組。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ecl3ipxsdd7jaql8vfwx9j\"><strong>為何</strong>？<br>\n屬性模組易於隔離，以便測試。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"04-10\"></a></p>\n<h3 id=\"shared-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7onivvwse0wsdg3gni46ktcwe\">共享屬性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#shared-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-10\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9ln1kvjakd7wxmouvyjo2kf7\">風格 04-10<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-10\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"esxfkk8memblgj1jusneqwa4i\"><strong>堅持</strong>在 <code>shared</code> 目錄中建立名叫 <code>SharedModule</code> 的屬性模組（比如在 <code>app/shared/shared.module.ts</code> 中定義 <code>SharedModule</code>）。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajcyr982xwrvq6m8r9ct5kfmy\"><strong>堅持</strong>在共享模組中宣告那些可能被屬性模組引用的可複用元件、指令和通道。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eazsew109qg0r0541tmoa0zzr\"><strong>考慮</strong>把可能在整個應用中到處引用的模組命名為 SharedModule。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"852yi6nehg7ipyhmr8a4arrg1\"><strong>考慮</strong> <em>不要</em>在共享模組中提供服務。服務通常是單例的，應該在整個應用或一個特定的屬性模組中只有一份。不過也有例外，比如，在下面的範例程式碼中，注意 <code>SharedModule</code> 提供了 <code>FilterTextService</code>。這裡可以這麼做，因為該服務是無狀態的，也就是說，該服務的消費者不會受到這些新實例的影響。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3he4umnz8j4zj5916ulfcg93y\"><strong>堅持</strong>在 <code>SharedModule</code> 中匯入所有模組都需要的資產（比如 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 和 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>）。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5r9w13ix8t938s031w8uthlza\"><strong>為什麼</strong>? \n<br> \n<code>SharedModule</code> 將包含可能需要來自另一個共同模組的功能的元件、指令和通道；例如，在 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 中的 \n<code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6z4uasw104sbq66nqhvx03jmx\"><strong>堅持</strong>在 <code>SharedModule</code> 中宣告所有元件、指令和通道。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"y6n4cabtyb7lrdqstu9wy4zb\"><strong>堅持</strong>從 <code>SharedModule</code> 中匯出其它屬性模組所需的全部符號。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4f717dkn54e3dng1gpqubclbj\"><strong>為何</strong>？<br>\n<code>SharedModule</code> 的存在，能讓常用的元件、指令和通道在很多其它模組的元件範本中都自動可用。</p>\n</div>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xa2aqc18svd44qs84win1zez\"><strong>避免</strong>在 <code>SharedModule</code> 中指定應用級的單例服務提供者。如果是刻意要得到多個服務單例也行，不過還是要小心。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"967gkjwzacvd0ii8fr6qlt1pm\"><strong>為何</strong>？<br>\n延遲載入的屬性模組如果匯入了這個共享模組，會建立一份自己的服務副本，這可能會導致意料之外的後果。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yfgysd7l7kixwh6x8xjavmmg\"><strong>為何</strong>？<br>\n對於單例服務，你不希望每個模組都有自己的實例。\n而如果 <code>SharedModule</code> 提供了一個服務，那就有可能發生這種情況。</p>\n</div>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      app\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        shared\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          shared.module.ts\n        </div>\n        <div class=\"file\">\n          init-caps.pipe.ts|spec.ts\n        </div>\n        <div class=\"file\">\n          filter-text.component.ts|spec.ts\n        </div>\n        <div class=\"file\">\n          filter-text.service.ts|spec.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        app.component.ts|html|css|spec.ts\n      </div>\n      <div class=\"file\">\n        app.module.ts\n      </div>\n      <div class=\"file\">\n        app-routing.module.ts\n      </div>\n    </div>\n    <div class=\"file\">\n      main.ts\n    </div>\n    <div class=\"file\">\n      index.html\n    </div>\n  </div>\n  <div class=\"file\">\n    …\n  </div>\n</div>\n<code-tabs>\n    <code-pane header=\"app/shared/shared.module.ts\" path=\"styleguide/src/04-10/app/shared/shared.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { FilterTextComponent } from './filter-text/filter-text.component';\nimport { FilterTextService } from './filter-text/filter-text.service';\nimport { InitCapsPipe } from './init-caps.pipe';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>],\n  declarations: [\n    FilterTextComponent,\n    InitCapsPipe\n  ],\n  providers: [FilterTextService],\n  exports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    FilterTextComponent,\n    InitCapsPipe\n  ]\n})\nexport class SharedModule { }\n\n\n</code-pane>\n    <code-pane header=\"app/shared/init-caps.pipe.ts\" path=\"styleguide/src/04-10/app/shared/init-caps.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' })\nexport class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform = (value: string) =&gt; value;\n}\n\n\n</code-pane>\n    <code-pane header=\"app/shared/filter-text/filter-text.component.ts\" path=\"styleguide/src/04-10/app/shared/filter-text/filter-text.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-filter-text',\n  template: '&lt;input type=\"text\" id=\"filterText\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"filter\" (keyup)=\"filterChanged($event)\" /&gt;'\n})\nexport class FilterTextComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() changed: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;;\n\n  filter = '';\n\n  constructor() {\n    this.changed = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;();\n  }\n\n  clear() {\n    this.filter = '';\n  }\n\n  filterChanged(event: any) {\n    event.preventDefault();\n    console.log(`Filter Changed: ${this.filter}`);\n    this.changed.emit(this.filter);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/shared/filter-text/filter-text.service.ts\" path=\"styleguide/src/04-10/app/shared/filter-text/filter-text.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class FilterTextService {\n  constructor() {\n    console.log('Created an instance of FilterTextService');\n  }\n\n  filter(data: string, props: Array&lt;string&gt;, originalList: Array&lt;any&gt;) {\n    let filteredList: any[];\n    if (data &amp;&amp; props &amp;&amp; originalList) {\n      data = data.toLowerCase();\n      const filtered = originalList.filter(item =&gt; {\n        let match = false;\n        for (const prop of props) {\n          if (item[prop].toString().toLowerCase().indexOf(data) &gt; -1) {\n            match = true;\n            break;\n          }\n        }\n        return match;\n      });\n      filteredList = filtered;\n    } else {\n      filteredList = originalList;\n    }\n    return filteredList;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/04-10/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { FilterTextService } from '../shared/filter-text/filter-text.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  templateUrl: './heroes.component.html'\n})\nexport class HeroesComponent {\n\n  heroes = [\n    { id: 1, name: 'Windstorm' },\n    { id: 2, name: 'Bombasto' },\n    { id: 3, name: 'Magneta' },\n    { id: 4, name: 'Tornado' }\n  ];\n\n  filteredHeroes = this.heroes;\n\n  constructor(private filterService: FilterTextService) { }\n\n  filterChanged(searchText: string) {\n    this.filteredHeroes = this.filterService.filter(searchText, ['id', 'name'], this.heroes);\n  }\n}\n\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.html\" path=\"styleguide/src/04-10/app/heroes/heroes.component.html\">\n&lt;div&gt;This is heroes component&lt;/div&gt;\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of filteredHeroes\"&gt;\n    {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n&lt;toh-filter-text (changed)=\"filterChanged($event)\"&gt;&lt;/toh-filter-text&gt;\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"04-11\"></a></p>\n<h3 id=\"lazy-loaded-folders\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39kut8fey3hykmu7l2lemr22a\">延遲載入資料夾<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lazy-loaded-folders\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-11\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"473eznidcw6nzle5w4o7krnzf\">風格 04-11<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-11\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bcyc7zb2ljzb2zfxfhakkmti7\">某些邊界清晰的應用屬性或工作流可以做成<em>延遲載入</em>或<em>按需載入</em>的，而不用總是隨著應用啟動。</p>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9y4gt0znlgof001ere2obgxpx\"><strong>堅持</strong>把延遲載入屬性下的內容放進<em>延遲載入目錄</em>中。典型的<em>延遲載入目錄</em>包含<em>路由元件</em>及其子元件以及與它們有關的那些資產和模組。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"674parmr64zx2jvcjba8qsvif\"><strong>為何</strong>？<br>\n這種目錄讓標識和隔離這些屬性內容變得更輕鬆。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"04-12\"></a></p>\n<h3 id=\"never-directly-import-lazy-loaded-folders\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxvrueel5ypzmbvmeol6y3kuh\">永遠不要直接匯入延遲載入的目錄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#never-directly-import-lazy-loaded-folders\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-12\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ngwbkjlqkk0k1zjznwboze99\">樣式 04-14<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-12\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81t84vw2eyut9sdvb6rfgbqx6\"><strong>避免</strong>讓兄弟模組和父模組直接匯入<em>延遲載入屬性</em>中的模組。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kecncv7q0e0przv9we5p5xln\"><strong>為何</strong>？<br>\n直接匯入並使用此模組會立即載入它，而原本的設計意圖是按需載入它。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<h3 id=\"do-not-add-filtering-and-sorting-logic-to-pipes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pfffi12a2ykywdg0o7en473c\">不要往通道中新增過濾和排序邏輯<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#do-not-add-filtering-and-sorting-logic-to-pipes\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-13\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ei8cjp8ecgzmsl6p8aeanvi8\">風格 04-13<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-13\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b4a9atiuayztpkfa5yewbkr3\"><strong>避免</strong>往自定義通道中新增過濾或排序邏輯。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cs87dq6v71jpt7xcv2phuro0n\"><strong>堅持</strong>在把模型繫結到範本中時，把過濾和排序邏輯在元件或服務中進行預先計算。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1et2yzo4hsl1rj51pa3tdwlcc\"><strong>為什麼</strong>? \n<br> 過濾和特別是排序是昂貴的操作。 由於 Angular 可以每秒多次呼叫通道方法，對於中等大小的清單，排序和過濾操作可能嚴重降低使用者體驗。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<h2 id=\"components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7vzzlnsersqq3lvejga81lr\">元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#components\"><i class=\"material-icons\">link</i></a></h2>\n<p><a id=\"05-03\"></a></p>\n<h3 id=\"components-as-elements\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6u048gcd76rb0te698nazwr9\">把元件當做元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#components-as-elements\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-03\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qbnn2qv1dcqw5s6lctwvocu8\">風格 05-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-03\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cev7a0di4uqdhtxx7tmc3el75\"><strong>考慮</strong>給元件一個<em>元素</em>選擇器，而不是<em>屬性</em>或<em>類別</em>選擇器。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4l2lyxdpuyeaf0w3qmplls8zr\"><strong>為何</strong>？<br>\n元件有很多包含 HTML 以及可選 Angular 範本語法的範本。\n它們顯示內容。開發人員會把元件像原生 HTML 元素和 WebComponents 一樣放進頁面中。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btgof4k1ixesiilboil1t9del\"><strong>為何</strong>？<br>\n檢視元件範本的 HTML 時，更容易識別一個符號是元件還是指令。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ee52nd7tbolb5nvv7auu0hks4\">少數情況下，你要為元件使用屬性選擇器，比如你要加強某個內建元素時。比如，<a href=\"https://material.angular.cn/components/button/overview\">Material Design 元件庫</a>就會對 <code>&lt;button mat-button&gt;</code> 使用這項技術。不過，你不應該在自定義元件上使用這項技術。</p>\n</div>\n<code-example header=\"app/heroes/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-03/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: '[tohHeroButton]',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-example>\n<code-example header=\"app/app.component.html\" path=\"styleguide/src/05-03/app/app.component.avoid.html\">\n&lt;!-- avoid --&gt;\n\n&lt;div tohHeroButton&gt;&lt;/div&gt;\n\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-03/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-pane>\n    <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-03/app/app.component.html\">\n&lt;toh-hero-button&gt;&lt;/toh-hero-button&gt;\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"05-04\"></a></p>\n<h3 id=\"extract-templates-and-styles-to-their-own-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"am9auzm9lghnknvv75o4xyoqd\">把範本和樣式提取到它們自己的檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#extract-templates-and-styles-to-their-own-files\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-04\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eusr8yppyvdhtin7il2oi6jg7\">風格 05-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-04\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"q18hrsui80muekaolp3oa55w\"><strong>堅持</strong>當超過 3 行時，把範本和樣式提取到一個單獨的檔案。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7n469j1h7nqaij0dt3hyl7ga\"><strong>堅持</strong>把範本檔案命名為 <code>[component-name].component.html</code>，其中，[component-name] 是元件名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpi83ixfwlyqgwt3j3px5cmuk\"><strong>堅持</strong>把樣式檔案命名為 <code>[component-name].component.css</code>，其中，[component-name] 是元件名。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1zs7wuk93pscsr1hxmv0s5co\"><strong>堅持</strong>指定<em>相對於模組的</em> URL，給它加上 <code>./</code> 字首。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ephmaeymrc97tge1anni71nap\"><strong>為何</strong>？<br>\n巨大的、行內的範本和樣式表會遮蓋元件的意圖和實現方式，削弱可讀性和可維護性。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ig9szoj79xp5paym4ptn0p9i\"><strong>為什麼</strong>? \n<br> 在大多數編輯器中，在開發行內範本和樣式時，語法提示和程式碼片段是不可用的。 Angular TypeScript 語言服務（即將推出）承諾可以克服這一不足，適用於支援的編輯器中的 HTML 範本；對於 CSS 樣式則無法幫助。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8g5m94sr8y0n4ccnm7m8jxm72\"><strong>為何</strong>？<br>\n當你移動元件檔案時，相對於元件的 URL 不需要修改，因為這些檔案始終會在一起。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xpzz1ghhs3gmxl9pba6dnxs\"><strong>為何</strong>？<br>\n<code>./</code> 字首是相對 URL 的標準語法，不必依賴 Angular 的特殊處理，如果沒有字首則不行。</p>\n</div>\n<code-example header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/05-04/app/heroes/heroes.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;My Heroes&lt;/h2&gt;\n      &lt;ul class=\"heroes\"&gt;\n        &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\" (click)=\"selectedHero=hero\"&gt;\n          &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n        &lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n        &lt;h2&gt;{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} is my hero&lt;/h2&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `,\n  styles: [`\n    .heroes {\n      margin: 0 0 2em 0;\n      list-style-type: none;\n      padding: 0;\n      width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `]\n})\nexport class HeroesComponent {\n  heroes: Observable&lt;Hero[]&gt;;\n  selectedHero!: Hero;\n\n  constructor(private heroService: HeroService) {\n    this.heroes = this.heroService.getHeroes();\n  }\n}\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/05-04/app/heroes/heroes.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls:  ['./heroes.component.css']\n})\nexport class HeroesComponent {\n  heroes: Observable&lt;Hero[]&gt;;\n  selectedHero!: Hero;\n\n  constructor(private heroService: HeroService) {\n    this.heroes = this.heroService.getHeroes();\n  }\n}\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.html\" path=\"styleguide/src/05-04/app/heroes/heroes.component.html\">\n&lt;div&gt;\n  &lt;h2&gt;My Heroes&lt;/h2&gt;\n  &lt;ul class=\"heroes\"&gt;\n    &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | async\"&gt;\n      &lt;button type=\"button\" (click)=\"selectedHero=hero\"&gt;\n        &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n        &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n      &lt;/button&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n    &lt;h2&gt;{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} is my hero&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.css\" path=\"styleguide/src/05-04/app/heroes/heroes.component.css\">\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n\n.heroes li {\n  display: flex;\n}\n\n.heroes button {\n  flex: 1;\n  cursor: pointer;\n  position: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: 0;\n  border-radius: 4px;\n  display: flex;\n  align-items: stretch;\n  height: 1.8em;\n}\n\n.heroes button:hover {\n  color: #2c3a41;\n  background-color: #e6e6e6;\n  left: .1em;\n}\n\n.heroes button:active {\n  background-color: #525252;\n  color: #fafafa;\n}\n\n.heroes button.selected {\n  background-color: black;\n  color: white;\n}\n\n.heroes button.selected:hover {\n  background-color: #505050;\n  color: white;\n}\n\n.heroes button.selected:active {\n  background-color: black;\n  color: white;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #405061;\n  line-height: 1em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n.heroes .name {\n  align-self: center;\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"05-12\"></a></p>\n<h3 id=\"decorate-input-and-output-properties\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8l54nzt4d50tw5zihl7bxjx0k\">使用 <code>input</code> 和 <code>output</code> 屬性裝飾器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#decorate-input-and-output-properties\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-12\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"y0cgyiuofwcn7vwmm5uaalaf\">風格 05-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-12\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5glu0ds3y1vvka0x1cbn6gqyd\"><strong>堅持</strong> 使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，而非 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 和 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器的 <code>inputs</code> 和 <code>outputs</code> 屬性:</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajf8uhl92meqres2hhku618pz\"><strong>堅持</strong>把 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 或者 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 放到所裝飾的屬性的同一行。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bluzlju0jtqg4jhbdja2y6w\"><strong>為何</strong>？<br>\n易於在類別裡面識別哪些屬性是輸入屬性或輸出屬性。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckolf03wwqhmawt7klmxuamz0\"><strong>為什麼</strong>? \n<br> 如果你需要重新命名與 \n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 或 \n<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 關聯的屬性或事件名稱，你可以在一個地方修改它。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bowtpewm4wdufuttsgvgwha87\"><strong>為何</strong>？<br>\n依附到指令的元資料宣告會比較簡短，更易於閱讀。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dk93i6az2zsa5nj4rztwhbf6e\"><strong>為何</strong>？<br>\n把裝飾器放到同一行可以精簡程式碼，同時更易於識別輸入或輸出屬性。</p>\n</div>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-12/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;&lt;/button&gt;`,\n  inputs: [\n    'label'\n  ],\n  outputs: [\n    'heroChange'\n  ]\n})\nexport class HeroButtonComponent {\n  heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  label: string;\n}\n\n</code-example>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-12/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;{{label}}&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() label = '';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"05-13\"></a></p>\n<h3 id=\"avoid-aliasing-inputs-and-outputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ggg82o53afdzat3o2cfqbb3t\">避免為 <code>inputs</code> 和 <code>outputs</code> 指定別名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#avoid-aliasing-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-13\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7dia357ojdijecgujb9js9kq\">風格 05-13<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-13\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule avoid\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4gz7gwft0ddn2c0h7eswiaf2\"><strong>避免</strong>除非有重要目的，否則不要為 <code>input</code> 和 <code>output</code> 指定別名。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfeeqbp46uujgtxg1mre9v2nw\"><strong>為何</strong>？<br>\n同一個屬性有兩個名字（一個對內一個對外）很容易導致混淆。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3syn99xc3k9f7d21wa26wv7ek\"><strong>為何</strong>？<br>\n如果指令名也同時用作<em>輸入</em>屬性，而且指令名無法準確描述這個屬性的用途時，應該使用別名。</p>\n</div>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-13/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid pointless aliasing */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;{{label}}&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  // Pointless aliases\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>('heroChangeEvent') heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('labelAttribute') label: string;\n}\n\n</code-example>\n<code-example header=\"app/app.component.html\" path=\"styleguide/src/05-13/app/app.component.avoid.html\">\n&lt;!-- avoid --&gt;\n\n&lt;toh-hero-button labelAttribute=\"OK\" (changeEvent)=\"doSomething()\"&gt;\n&lt;/toh-hero-button&gt;\n\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-13/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\" &gt;{{label}}&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  // No aliases\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() label = '';\n}\n\n</code-pane>\n    <code-pane header=\"app/heroes/shared/hero-button/hero-highlight.directive.ts\" path=\"styleguide/src/05-13/app/heroes/shared/hero-highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[heroHighlight]' })\nexport class HeroHighlightDirective implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n\n  // Aliased because `color` is a better property name than `heroHighlight`\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('heroHighlight') color = '';\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {}\n\n  ngOnChanges() {\n    this.el.nativeElement.style.backgroundColor = this.color || 'yellow';\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-13/app/app.component.html\">\n&lt;toh-hero-button label=\"OK\" (change)=\"doSomething()\"&gt;\n&lt;/toh-hero-button&gt;\n\n&lt;!-- `heroHighlight` is both the directive name and the data-bound aliased property name --&gt;\n&lt;h3 heroHighlight=\"skyblue\"&gt;The Great Bombasto&lt;/h3&gt;\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"05-14\"></a></p>\n<h3 id=\"member-sequence\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oca2i5mg4lzplab2ve5amei0\">成員順序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#member-sequence\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-14\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ok5ze1jbjrmdlnhrmx3cj53i\">風格 05-14<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-14\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba7qz7rok0np6dvwa0brzz7y5\"><strong>堅持</strong>把屬性成員放在前面，方法成員放在後面。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2o0c2hijyccdac1shh0dcp1r\"><strong>堅持</strong>先放公共成員，再放私有成員，並按照字母順序排列。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnl7cq7ffwdmvk6sq5fn49wql\"><strong>為何</strong>？<br>\n把類別的成員按照統一的順序排列，易於閱讀，能立即識別出元件的哪個成員服務於何種目的。</p>\n</div>\n<code-example header=\"app/shared/toast/toast.component.ts\" path=\"styleguide/src/05-14/app/shared/toast/toast.component.avoid.ts\" region=\"example\">\n/* avoid */\n\nexport class ToastComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  private defaults = {\n    title: '',\n    message: 'May the Force be with you'\n  };\n  message: string;\n  title: string;\n  private toastElement: any;\n\n  ngOnInit() {\n    this.toastElement = document.getElementById('toh-toast');\n  }\n\n  // private methods\n  private hide() {\n    this.toastElement.style.opacity = 0;\n    setTimeout(() =&gt; this.toastElement.style.zIndex = 0, 400);\n  }\n\n  activate(message = this.defaults.message, title = this.defaults.title) {\n    this.title = title;\n    this.message = message;\n    this.show();\n  }\n\n  private show() {\n    console.log(this.message);\n    this.toastElement.style.opacity = 1;\n    this.toastElement.style.zIndex = 9999;\n\n    setTimeout(() =&gt; this.hide(), 2500);\n  }\n}\n\n</code-example>\n<code-example header=\"app/shared/toast/toast.component.ts\" path=\"styleguide/src/05-14/app/shared/toast/toast.component.ts\" region=\"example\">\nexport class ToastComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  // public properties\n  message = '';\n  title = '';\n\n  // private fields\n  private defaults = {\n    title: '',\n    message: 'May the Force be with you'\n  };\n  private toastElement: any;\n\n  // public methods\n  activate(message = this.defaults.message, title = this.defaults.title) {\n    this.title = title;\n    this.message = message;\n    this.show();\n  }\n\n  ngOnInit() {\n    this.toastElement = document.getElementById('toh-toast');\n  }\n\n  // private methods\n  private hide() {\n    this.toastElement.style.opacity = 0;\n    setTimeout(() =&gt; this.toastElement.style.zIndex = 0, 400);\n  }\n\n  private show() {\n    console.log(this.message);\n    this.toastElement.style.opacity = 1;\n    this.toastElement.style.zIndex = 9999;\n    setTimeout(() =&gt; this.hide(), 2500);\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"05-15\"></a></p>\n<h3 id=\"delegate-complex-component-logic-to-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sjhooroq160yo8ibg0w4eper\">把邏輯放到服務裡<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#delegate-complex-component-logic-to-services\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-15\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dlthjznwg0h21smaiyyczw6q\">風格 05-15<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-15\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"839uknkke9xewd8yq1cot4xcb\"><strong>堅持</strong>在元件中只包含與檢視相關的邏輯。所有其它邏輯都應該放到服務中。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xpvoms52donpnf9k74o0wdec\"><strong>堅持</strong>把可複用的邏輯放到服務中，保持元件簡單，聚焦於它們預期目的。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87tf5g4mxxij093y906zev094\"><strong>為何</strong>？<br>\n當邏輯被放置到服務裡，並以函式的形式暴露時，可以被多個元件重複使用。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6stz8kq71wz4axzj5pgf3rm1c\"><strong>為何</strong>？<br>\n在單元測試時，服務裡的邏輯更容易被隔離。當元件中呼叫邏輯時，也很容易被模擬。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5psx2u08ohzdlj7tetlvrkge3\"><strong>為何</strong>？<br>\n從元件移除依賴並隱藏實現細節。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqf1nfq5pa4yutvk8ukc467km\"><strong>為何</strong>？<br>\n保持元件苗條、精簡和聚焦。</p>\n</div>\n<code-example header=\"app/heroes/hero-list/hero-list.component.ts\" path=\"styleguide/src/05-15/app/heroes/hero-list/hero-list.component.avoid.ts\">\n/* avoid */\n\nimport { <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { Observable } from 'rxjs';\nimport { catchError, finalize } from 'rxjs/operators';\n\nimport { Hero } from '../shared/hero.model';\n\nconst heroesUrl = 'http://angular.io';\n\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n  getHeroes() {\n    this.heroes = [];\n    this.http.get(heroesUrl).pipe(\n      catchError(this.catchBadResponse),\n      finalize(() =&gt; this.hideSpinner())\n    ).subscribe((heroes: Hero[]) =&gt; this.heroes = heroes);\n  }\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  private catchBadResponse(err: any, source: Observable&lt;any&gt;) {\n    // log and handle the exception\n    return new Observable();\n  }\n\n  private hideSpinner() {\n    // hide the spinner\n  }\n}\n\n\n</code-example>\n<code-example header=\"app/heroes/hero-list/hero-list.component.ts\" path=\"styleguide/src/05-15/app/heroes/hero-list/hero-list.component.ts\" region=\"example\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero, HeroService } from '../shared';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `...`\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n  constructor(private heroService: HeroService) {}\n  getHeroes() {\n    this.heroes = [];\n    this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n  ngOnInit() {\n    this.getHeroes();\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"05-16\"></a></p>\n<h3 id=\"dont-prefix-output-properties\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7df65ok22eoatbx52r8onwgd\">不要給 <code>output</code> 屬性加字首<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#dont-prefix-output-properties\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-16\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aur0ss5s4szipnsl2h1sjc76v\">風格 05-16<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-16\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9n7ci6ig8f56yxsylfuw4azr2\"><strong>堅持</strong>命名事件時，不要帶字首 <code>on</code>。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbihi5zfa038vkuf43d0e2c0w\"><strong>堅持</strong>把事件處理器方法命名為 <code>on</code> 字首之後緊跟著事件名。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n8957unhn4mfvm0qtjxbo84r\"><strong>為何</strong>？<br>\n與內建事件命名一致，比如按鈕點選。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1kmag7keg0ffs0hf5cbhob1y\"><strong>為什麼</strong>? \n<br> Angular 允許使用 \n<a href=\"guide/binding-syntax\">備用語法</a> \n<code>on-*</code>。 如果事件本身字首為 \n<code>on</code>，這將導致一個 \n<code>on-onEvent</code> 繫結表示式。</p>\n</div>\n<code-example header=\"app/heroes/hero.component.ts\" path=\"styleguide/src/05-16/app/heroes/hero.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() onSavedTheDay = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;boolean&gt;();\n}\n\n</code-example>\n<code-example header=\"app/app.component.html\" path=\"styleguide/src/05-16/app/app.component.avoid.html\">\n&lt;!-- avoid --&gt;\n\n&lt;toh-hero (onSavedTheDay)=\"onSavedTheDay($event)\"&gt;&lt;/toh-hero&gt;\n\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/hero.component.ts\" path=\"styleguide/src/05-16/app/heroes/hero.component.ts\" region=\"example\">\nexport class HeroComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() savedTheDay = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;boolean&gt;();\n}\n\n</code-pane>\n    <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-16/app/app.component.html\">\n&lt;toh-hero (savedTheDay)=\"onSavedTheDay($event)\"&gt;&lt;/toh-hero&gt;\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"05-17\"></a></p>\n<h3 id=\"put-presentation-logic-in-the-component-class\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8lrwdego8w0hxvuunbepexrf8\">把表現層邏輯放到元件類別裡<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#put-presentation-logic-in-the-component-class\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-17\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b69ap4yvlbc0yrtom8nlexkl8\">風格 05-17<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-17\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ddm6xgxiu5sii23dsl7pglll\"><strong>堅持</strong>把表現層邏輯放進元件類別中，而不要放在範本裡。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cot03mg3dk9y3xbu86a77set\"><strong>為何</strong>？<br>\n邏輯應該只出現在一個地方（元件類別裡）而不應分散在兩個地方。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eml7wjefrd5lzdzkq0yc5p7sb\"><strong>為何</strong>？<br>\n將元件的表現層邏輯放到元件類別而非範本裡，可以增強測試性、維護性和重複使用性。</p>\n</div>\n<code-example header=\"app/heroes/hero-list/hero-list.component.ts\" path=\"styleguide/src/05-17/app/heroes/hero-list/hero-list.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `\n    &lt;section&gt;\n      Our list of heroes:\n      &lt;toh-hero *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" [hero]=\"hero\"&gt;\n      &lt;/toh-hero&gt;\n      Total powers: {{totalPowers}}&lt;br&gt;\n      Average power: {{totalPowers / heroes.length}}\n    &lt;/section&gt;\n  `\n})\nexport class HeroListComponent {\n  heroes: Hero[];\n  totalPowers: number;\n}\n\n</code-example>\n<code-example header=\"app/heroes/hero-list/hero-list.component.ts\" path=\"styleguide/src/05-17/app/heroes/hero-list/hero-list.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `\n    &lt;section&gt;\n      Our list of heroes:\n      &lt;toh-hero *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" [hero]=\"hero\"&gt;\n      &lt;/toh-hero&gt;\n      Total powers: {{totalPowers}}&lt;br&gt;\n      Average power: {{avgPower}}\n    &lt;/section&gt;\n  `\n})\nexport class HeroListComponent {\n  heroes: Hero[];\n  totalPowers = 0;\n\n  get avgPower() {\n    return this.totalPowers / this.heroes.length;\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<h3 id=\"initialize-inputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab4bcku77fznkndflboud3aa9\">初始化輸入屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#initialize-inputs\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-05-18\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdibmq25qf0txgdtvu7i27769\">風格 05-18<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-18\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bo1ona28z42o69qt6c38j2x2v\">TypeScript 的編譯器選項 <code>--strictPropertyInitialization</code>，會確保某個類別在建構式函式中初始化其屬性。當啟用時，如果該類別沒有對任何未顯式標為可選值的屬性提供初始值，TypeScript 編譯器就會報錯。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14xv4683pe21j1cqqxtms94zm\">按照設計，Angular 把所有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 都視為可選值。只要有可能，你就應該透過提供預設值來滿足 <code>--strictPropertyInitialization</code> 的要求。</p>\n<code-example header=\"app/heroes/hero/hero.component.ts\" path=\"styleguide/src/05-18/app/heroes/hero/hero.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() id = 'default_id';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45l75jttnmnm4271dt9yaq6mp\">如果該屬性很難構造出預設值，請使用 <code>?</code> 來把該屬性顯式標記為可選的。</p>\n<code-example header=\"app/heroes/hero/hero.component.ts\" path=\"styleguide/src/05-18/app/heroes/hero/hero.component.optional.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() id?: string;\n\n  process() {\n    if (this.id) {\n      // ...\n    }\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dns8d5y8tnjlofc1bjbys9cq1\">你可能希望某個 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 欄位是必填的，也就是說此元件的所有使用者都必須傳入該屬性。這種情況下，請使用預設值。僅僅使用 <code>!</code> 來抑制 TypeScript 報錯是不夠的，應該避免它，因為這樣做會阻止型別檢查器來確保必須提供此輸入值。</p>\n<code-example header=\"app/heroes/hero/hero.component.ts\" path=\"styleguide/src/05-18/app/heroes/hero/hero.component.avoid.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  // The exclamation mark suppresses errors that a property is\n  // not initialized.\n  // Ignoring this enforcement can prevent the type checker\n  // from finding potential issues.\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() id!: string;\n}\n\n</code-example>\n<h2 id=\"directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\">指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directives\"><i class=\"material-icons\">link</i></a></h2>\n<p><a id=\"06-01\"></a></p>\n<h3 id=\"use-directives-to-enhance-an-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qrhkt6t0lzehgbeunxjc8vfo\">使用指令來增強已有元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#use-directives-to-enhance-an-element\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-06-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mz4nbpy6hlqt8wqmqx7fvp38\">風格 06-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-06-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ar1yht85z1eb5de39agm27i9\"><strong>堅持</strong>當你需要有表現層邏輯，但沒有範本時，使用屬性型指令。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e54y2e2b0r8wqpbdtnvh6t4to\"><strong>為何</strong>？<br>\n屬性型指令沒有範本。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alrwqxfl7yho8i33c0jc2pt8p\"><strong>為何</strong>？<br>\n一個元素可以使用多個屬性型指令。</p>\n</div>\n<code-example header=\"app/shared/highlight.directive.ts\" path=\"styleguide/src/06-01/app/shared/highlight.directive.ts\" region=\"example\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohHighlight]'\n})\nexport class HighlightDirective {\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseover') onMouseEnter() {\n    // do highlight work\n  }\n}\n\n</code-example>\n<code-example header=\"app/app.component.html\" path=\"styleguide/src/06-01/app/app.component.html\">\n&lt;div tohHighlight&gt;Bombasta&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"06-03\"></a></p>\n<h3 id=\"hostlistenerhostbinding-decorators-versus-host-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3c3y177onudxq1gmd56vg5p9\"><code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 和 <code><a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> 裝飾器 vs. 元件元資料 <code>host</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-06-03\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvqu41fe3vjfok501rm9i6ixi\">風格 06-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-06-03\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azei1wcx05jwss00m5dmwr2dh\"><strong>考慮</strong>優先使用 <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 和 <code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code>，而不是 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 和 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器的 <code>host</code> 屬性。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5306v283iscxtut0y9o29no7d\"><strong>堅持</strong>讓你的選擇保持一致。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2x9smtx9om0hikp34nw540t57\"><strong>為什麼</strong>? \n<br> 與 \n<code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> 關聯的屬性或與 \n<code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 關聯的方法只能在指令類別中的一個地方修改。 如果使用 \n<code>host</code> 元資料屬性，則必須同時修改指令類別中的屬性/方法宣告和與指令關聯的裝飾器中的元資料。</p>\n</div>\n<code-example header=\"app/shared/validator.directive.ts\" path=\"styleguide/src/06-03/app/shared/validator.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidator]'\n})\nexport class ValidatorDirective {\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('attr.role') role = 'button';\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    // do work\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vro5546ykfowdbn93601mp84\">與不推薦的方式（<code>host</code> 元資料）比較一下。</p>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyrdelc8jrh2n890eji9cl4sk\"><strong>為何</strong>？<br>\n<code>host</code> 元資料只是一個便於記憶的名字而已，並不需要額外的 ES 匯入。</p>\n</div>\n<code-example header=\"app/shared/validator2.directive.ts\" path=\"styleguide/src/06-03/app/shared/validator2.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidator2]',\n  host: {\n    '[attr.role]': 'role',\n    '(mouseenter)': 'onMouseEnter()'\n  }\n})\nexport class Validator2Directive {\n  role = 'button';\n  onMouseEnter() {\n    // do work\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<h2 id=\"services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92fqgk8698jdwr0o85057qr44\">服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#services\"><i class=\"material-icons\">link</i></a></h2>\n<p><a id=\"07-01\"></a></p>\n<h3 id=\"services-are-singletons\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mmb1oae651luu3dpn0xbe19v\">服務總是單例的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#services-are-singletons\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-07-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adi2dnp3qoo3b2sc8pzhibsp\">風格 07-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gtfhiwc454mm0ep6xx9gazfw\"><strong>堅持</strong>在同一個注入器內，把服務當做單例使用。用它們來共享資料和功能。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1f8u69u27w8a9zuexa422juyd\"><strong>為何</strong>？<br>\n服務是在屬性範圍或應用內共享方法的理想載體。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rnxm0bxrzbj8gyathnwfbqii\"><strong>為何</strong>？<br>\n服務是共享狀態性記憶體資料的理想載體。</p>\n</div>\n<code-example header=\"app/heroes/shared/hero.service.ts\" path=\"styleguide/src/07-01/app/heroes/shared/hero.service.ts\" region=\"example\">\nexport class HeroService {\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n\n  getHeroes() {\n    return this.http.get&lt;Hero[]&gt;('api/heroes');\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"07-02\"></a></p>\n<h3 id=\"single-responsibility-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94xyn6xpuo11uve5x3vem22k8\">單一職責<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#single-responsibility-1\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-07-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ajcb0pexcji0xjg7p6d5gz23\">風格 07-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-02\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"978is1sp6vrfnbe793pmmljp7\"><strong>堅持</strong>建立封裝在上下文中的單一職責的服務。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xl5dpr0fschzgib0wfqck27n\"><strong>堅持</strong>當服務成長到超出單一用途時，建立一個新服務。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckkrw61sc6grsgi5o4z22dn0l\"><strong>為何</strong>？<br>\n當服務有多個職責時，它很難被測試。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0yx8h55bera2jfkd1u77vv7n\"><strong>為何</strong>？<br>\n當某個服務有多個職責時，每個注入它的元件或服務都會承擔這些職責的全部開銷。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"07-03\"></a></p>\n<h3 id=\"providing-a-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqbndmh59jdanzp44olf38bqa\">提供服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#providing-a-service\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-07-03\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dokeyg41dc8gbpluswdiz52us\">風格 07-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-03\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2f71cfom2dytd4iikakrxiz9w\"><strong>堅持</strong>在服務的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 裝飾器上指定透過應用的根注入器提供服務。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14dcp9vpgkvhz0q9op5bzpqi4\"><strong>為何</strong>？<br>\nAngular 注入器是層次化的。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxlxstoi87xo0afllzjoys4ju\"><strong>為什麼</strong>? \n<br> 將服務提供給根注入器時，該服務的實例是共享的，並且在每個需要該服務的類別中都可用。 這在一個服務共享方法或狀態時是理想的。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wwqw46luozp580jx1fcrv4ud\"><strong>為何</strong>？<br>\n當你在服務的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 中註冊服務時，<a href=\"cli\">Angular CLI</a> 生產環境建立時使用的最佳化工具可以進行搖樹最佳化，從而移除那些你的應用中從未用過的服務。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpg6iyo2uo6m1xos66n8fd2op\"><strong>為什麼</strong>? \n<br> 當兩個不同的元件需要不同的服務實例時，這就不理想了。 在這種情況下，最好在需要新的和單獨實例的元件級別提供服務。</p>\n</div>\n<code-example header=\"src/app/treeshaking/service.ts\" path=\"dependency-injection/src/app/tree-shaking/service.ts\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class Service {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"07-04\"></a></p>\n<h3 id=\"use-the-injectable-class-decorator\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6opptpkxon4my9dbfa3p4erd\">使用 @Injectable() 類別裝飾器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#use-the-injectable-class-decorator\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-07-04\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3kt2mf77bwyp0i6b0g8r3yhj\">風格 07-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-04\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dofiu17yief6o4fbrctfagw1u\"><strong>堅持</strong>當使用型別作為令牌來注入服務的依賴時，使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 類別裝飾器，而非 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>()</code> 引數裝飾器。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9h08rqry8t9xxyubuzcoh8wbh\"><strong>為何</strong>？<br>\nAngular 的 DI 機制會根據服務的建構式函式引數的宣告型別來解析服務的所有依賴。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p2xyoettiuyqu0y2ky09a8z4\"><strong>為何</strong>？<br>\n當服務只接受型別令牌相關的依賴時，比起在每個建構式函式引數上使用 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>()</code>，<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的語法簡潔多了。</p>\n</div>\n<code-example header=\"app/heroes/shared/hero-arena.service.ts\" path=\"styleguide/src/07-04/app/heroes/shared/hero-arena.service.avoid.ts\" region=\"example\">\n/* avoid */\n\nexport class HeroArena {\n  constructor(\n      @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(HeroService) private heroService: HeroService,\n      @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n}\n\n</code-example>\n<code-example header=\"app/heroes/shared/hero-arena.service.ts\" path=\"styleguide/src/07-04/app/heroes/shared/hero-arena.service.ts\" region=\"example\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroArena {\n  constructor(\n    private heroService: HeroService,\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<h2 id=\"data-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o08xf4203bnyfj3owsjqmb88\">資料服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#data-services\"><i class=\"material-icons\">link</i></a></h2>\n<p><a id=\"08-01\"></a></p>\n<h3 id=\"talk-to-the-server-through-a-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3plankokhhxsi5ia5w01435ir\">透過服務與 Web 伺服器通訊<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#talk-to-the-server-through-a-service\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-08-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqd2mtbf8icft9fvcl6nsf6td\">風格 08-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-08-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8imhd004jzj7zh6hk9gmdlra\"><strong>堅持</strong>把資料操作和與資料互動的邏輯重構到服務裡。</p>\n</div>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68dddujl9iy6ynh0y0w460vmj\"><strong>堅持</strong>讓資料服務來負責 XHR 呼叫、本地儲存、記憶體儲存或者其它資料操作。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81262wzogpeft9gj2pghupb5x\"><strong>為什麼</strong>? \n<br> 元件的責任是呈現並收集檢視訊息。 它不應關心如何獲取資料，只需知道向誰請求。 將資料服務分離出來，將獲取資料的邏輯移到資料服務中，讓元件更簡單並專注於檢視。</p>\n</div>\n<div class=\"s-why\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akejfyf6e7qkwkv5rh0ppiqrh\"><strong>為何</strong>？<br>\n在測試使用資料服務的元件時，可以讓資料呼叫更容易被測試（模擬或者真實）。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fbeftyy8oxrr6n80jzooim4n\"><strong>為什麼</strong>? \n<br> 資料管理的細節，如標頭、HTTP 方法、快取、錯誤處理和重試邏輯，與元件和其他資料消費者無關。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elp869scsnlvkq65e5g7h8efb\">資料服務應該封裝這些細節。這樣，在服務內部修改細節，就不會影響到它的消費者。並且更容易透過實現一個模擬服務來對消費者進行測試。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<h2 id=\"lifecycle-hooks\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bhlcyenmobknyvoaatlpnddj\">生命週期鉤子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3jox0z9q4o8fd1baomtlbrvk\">使用生命週期鉤子來介入到 Angular 暴露的重要事件裡。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"09-01\"></a></p>\n<h3 id=\"implement-lifecycle-hook-interfaces\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2g3bh3q2wpuinespekvoufb37\">實現生命週期鉤子介面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#implement-lifecycle-hook-interfaces\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-09-01\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdob4wqvtpaa0h7aj7eulgpn\">風格 09-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-09-01\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b35gggesqie2y2ppzrymg1nw0\"><strong>堅持</strong>實現生命週期鉤子介面。</p>\n</div>\n<div class=\"s-why-last\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3plup68twbvol4mfrnv01ehx2\"><strong>為什麼</strong>? \n<br> 生命週期介面規定了帶型別的方法簽名。 使用這些簽名來標記拼寫和語法錯誤。</p>\n</div>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/09-01/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;OK&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  onInit() { // misspelled\n    console.log('The component is initialized');\n  }\n}\n\n</code-example>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/09-01/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;OK&lt;/button&gt;`\n})\nexport class HeroButtonComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  ngOnInit() {\n    console.log('The component is initialized');\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<h2 id=\"appendix\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cb6szqqkvvp9lxctzd6kfs3fm\">附錄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#appendix\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94dgcpaytmuepwjqakaygcfg9\">有用的 Angular 工具和小提示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<p><a id=\"A-02\"></a></p>\n<h3 id=\"file-templates-and-snippets\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31m9m1xhkj9r19gg0cb6654d7\">文件範本和程式碼片段<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#file-templates-and-snippets\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-a-02\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26k6r32q2ibyz3w46s8bbkq9i\">風格 A-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-a-02\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"s-rule do\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b17rf2ewhot9mstnlxucyf4pq\"><strong>堅持</strong>使用檔案範本或程式碼片段來幫助實現一致的風格和模式。下面是為一些網路開發編輯器和 IDE 準備的範本和/或程式碼片段。</p>\n</div>\n<div class=\"s-rule consider\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ktbtm137ux7v5evoxh2nkhdz\"><strong>考慮</strong>使用 <a href=\"https://code.visualstudio.com\">Visual Studio Code</a>的<a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\">程式碼片段</a> 來實施本風格指南。</p>\n<a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\">\n<img alt=\"Use Extension\" src=\"generated/images/guide/styleguide/use-extension.gif\" width=\"700\" height=\"429\">\n</a>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5j8hg3p1tfd0sizv17ygf3c9m\"><strong>考慮</strong>使用 <a href=\"https://atom.io\">Atom</a> 的<a href=\"https://atom.io/packages/angular-2-typescript-snippets\">程式碼片斷</a>來實施本風格指南。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32q7nhlpg6chm1co5u4c3ks1l\"><strong>考慮</strong>使用 <a href=\"http://www.sublimetext.com\">Sublime Text</a>的<a href=\"https://github.com/orizens/sublime-angular2-snippets\">程式碼片斷</a> 來實施本風格指南。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6egje1inkqo49opevq6kfpp4z\"><strong>考慮</strong>使用 <a href=\"http://www.vim.org\">Vim</a> 的<a href=\"https://github.com/mhartington/vim-angular2-snippets\">程式碼片斷</a>來實施本風格指南。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72rk1u41qqeqgzrarubl6w8qt\"><a href=\"guide/styleguide#toc\">回到頂部</a></p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/Pipe\n - errors/NG0300\n - guide/doc-editing\n - guide/docs-style-guide\n - guide/glossary\n - guide/pipes\n - guide/pipes-custom-data-trans\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/EventEmitter\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/Inject\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnChanges\n - api/core/OnInit\n - api/core/Output\n - api/core/Pipe\n - api/core/PipeTransform\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterModule\n - cli\n - guide/binding-syntax\n - guide/glossary#case-types\n - guide/styleguide#angular-coding-style-guide\n - guide/styleguide#angular-ngmodule-names\n - guide/styleguide#app-root-module\n - guide/styleguide#appendix\n - guide/styleguide#application-structure-and-ngmodules\n - guide/styleguide#avoid-aliasing-inputs-and-outputs\n - guide/styleguide#bootstrapping\n - guide/styleguide#component-custom-prefix\n - guide/styleguide#component-selectors\n - guide/styleguide#components\n - guide/styleguide#components-as-elements\n - guide/styleguide#data-services\n - guide/styleguide#decorate-input-and-output-properties\n - guide/styleguide#delegate-complex-component-logic-to-services\n - guide/styleguide#directive-custom-prefix\n - guide/styleguide#directive-selectors\n - guide/styleguide#directives\n - guide/styleguide#do-not-add-filtering-and-sorting-logic-to-pipes\n - guide/styleguide#dont-prefix-output-properties\n - guide/styleguide#end-to-end-e2e-test-file-names\n - guide/styleguide#extract-templates-and-styles-to-their-own-files\n - guide/styleguide#feature-modules\n - guide/styleguide#file-structure-conventions\n - guide/styleguide#file-templates-and-snippets\n - guide/styleguide#file-tree\n - guide/styleguide#flat\n - guide/styleguide#folders-by-feature-structure\n - guide/styleguide#general-naming-guidelines\n - guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata\n - guide/styleguide#identify\n - guide/styleguide#implement-lifecycle-hook-interfaces\n - guide/styleguide#initialize-inputs\n - guide/styleguide#lazy-loaded-folders\n - guide/styleguide#lifecycle-hooks\n - guide/styleguide#lift\n - guide/styleguide#locate\n - guide/styleguide#member-sequence\n - guide/styleguide#naming\n - guide/styleguide#never-directly-import-lazy-loaded-folders\n - guide/styleguide#overall-structural-guidelines\n - guide/styleguide#pipe-names\n - guide/styleguide#providing-a-service\n - guide/styleguide#put-presentation-logic-in-the-component-class\n - guide/styleguide#rule-of-one\n - guide/styleguide#separate-file-names-with-dots-and-dashes\n - guide/styleguide#service-names\n - guide/styleguide#services\n - guide/styleguide#services-are-singletons\n - guide/styleguide#shared-feature-module\n - guide/styleguide#single-responsibility\n - guide/styleguide#single-responsibility-1\n - guide/styleguide#small-functions\n - guide/styleguide#style-01-01\n - guide/styleguide#style-01-02\n - guide/styleguide#style-02-01\n - guide/styleguide#style-02-02\n - guide/styleguide#style-02-03\n - guide/styleguide#style-02-04\n - guide/styleguide#style-02-05\n - guide/styleguide#style-02-06\n - guide/styleguide#style-02-07\n - guide/styleguide#style-02-08\n - guide/styleguide#style-02-09\n - guide/styleguide#style-02-10\n - guide/styleguide#style-02-11\n - guide/styleguide#style-02-12\n - guide/styleguide#style-04-01\n - guide/styleguide#style-04-02\n - guide/styleguide#style-04-03\n - guide/styleguide#style-04-04\n - guide/styleguide#style-04-05\n - guide/styleguide#style-04-06\n - guide/styleguide#style-04-07\n - guide/styleguide#style-04-08\n - guide/styleguide#style-04-09\n - guide/styleguide#style-04-10\n - guide/styleguide#style-04-11\n - guide/styleguide#style-04-12\n - guide/styleguide#style-04-13\n - guide/styleguide#style-05-02\n - guide/styleguide#style-05-03\n - guide/styleguide#style-05-04\n - guide/styleguide#style-05-12\n - guide/styleguide#style-05-13\n - guide/styleguide#style-05-14\n - guide/styleguide#style-05-15\n - guide/styleguide#style-05-16\n - guide/styleguide#style-05-17\n - guide/styleguide#style-05-18\n - guide/styleguide#style-06-01\n - guide/styleguide#style-06-03\n - guide/styleguide#style-07-01\n - guide/styleguide#style-07-02\n - guide/styleguide#style-07-03\n - guide/styleguide#style-07-04\n - guide/styleguide#style-08-01\n - guide/styleguide#style-09-01\n - guide/styleguide#style-a-02\n - guide/styleguide#style-vocabulary\n - guide/styleguide#symbols-and-file-names\n - guide/styleguide#t-dry-try-to-be-dry\n - guide/styleguide#talk-to-the-server-through-a-service\n - guide/styleguide#toc\n - guide/styleguide#unit-test-file-names\n - guide/styleguide#use-directives-to-enhance-an-element\n - guide/styleguide#use-the-injectable-class-decorator\n - https://atom.io\n - https://atom.io/packages/angular-2-typescript-snippets\n - https://code.visualstudio.com\n - https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\n - https://github.com/mhartington/vim-angular2-snippets\n - https://github.com/orizens/sublime-angular2-snippets\n - https://karma-runner.github.io\n - https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\n - https://material.angular.io/components/button/overview\n - https://wikipedia.org/wiki/Single_responsibility_principle\n - https://www.sublimetext.com\n - https://www.vim.org\n - https://www.w3.org/TR/custom-elements\n-->"}
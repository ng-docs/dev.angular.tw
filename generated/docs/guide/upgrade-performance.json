{"id":"guide/upgrade-performance","title":"更關注效能的升級方式","contents":"<div class=\"content\">\n  <h1 id=\"upgrading-for-performance\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d8ubq0eivkklkj7lo97yxv15y\">更關注效能的升級方式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-performance#upgrading-for-performance\"><i class=\"material-icons\">link</i></a></h1>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3m6ulnpzcn2y5u3f8vwoehnkh\"><em>Angular</em>是現在和未來的 Angular 名稱。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"uqkk63xsc5jgyb3fj0eka9ee\"><em>AngularJS</em>是所有 1.x 版本的 Angular 的名稱。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zza3plof96x22x2i9z4zcbuu\">這個指南描述了一些內建工具，用於逐步將 AngularJS 專案高效遷移到 Angular 平台。 它與從 AngularJS 遷移相關的文件非常相似，唯一的區別在於這個文件使用了 \n<a href=\"api/upgrade/static/downgradeModule\">downgradeModule()</a> 輔助函式，而不是 \n<a href=\"api/upgrade/static/UpgradeModule\">UpgradeModule</a> 類別。 這會影響應用程式的引導方式以及兩個框架之間變化檢測的傳播方式。 這允許你逐步升級，同時提高混合應用程式的速度，並在升級過程的早期階段利用 Angular 最新的功能。</p>\n<h2 id=\"preparation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"950c8mg85fl94yevwp15mppan\">準備工作<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-performance#preparation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cnegfd07ogi8ni2tyjqzzqq0l\">在討論你應該如何用 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 來建立混合式應用之前，你可以先採取一些措施來簡化升級過程，甚至在開始升級之前就可以做。無論你用哪種方式升級，這些步驟都是一樣的，請參考<a href=\"guide/upgrade\">從 AngularJS 升級</a>的<a href=\"guide/upgrade#preparation\">準備工作</a>部分。</p>\n<h2 id=\"upgrading-with-ngupgrade\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"t86b1lwh4xrhvmtwo5otuzpz\">使用 <code>ngUpgrade</code> 升級<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-performance#upgrading-with-ngupgrade\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj7xkz1d1mol50n9tx930i6mk\">使用 Angular 中的 <code>ngUpgrade</code> 函式庫，你可以透過建立混合式應用來逐步升級現有的 AngularJS 應用。在這些混合式應用中，你可以混用 AngularJS 和 Angular 的元件與服務，並讓它們天衣無縫地進行互操作。這意味著你不用一次性完成遷移工作，因為在轉場階段兩個框架可以自然共存。</p>\n<h3 id=\"how-ngupgrade-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30mbf3mud9r5ihbz5u5uldei2\"><code>ngUpgrade</code> 的工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-performance#how-ngupgrade-works\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3usppzcegdgzlu55dn2zqcck\">無論選擇 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 還是 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>，升級的基本原則都是一樣的：無論是混合式應用背後的心智模型，還是 <a href=\"api/upgrade/static\">upgrade/static</a> 的用法。要了解更多，參閱<a href=\"guide/upgrade\">從 AngularJS 升級</a>的 <a href=\"guide/upgrade#how-ngupgrade-works\"><code>ngUpgrade</code> 工作原理</a>部分。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52ambp1yzw3nr9sdf14p91oa4\"><a href=\"guide/upgrade\">從 AngularJS 升級</a>中的<a href=\"guide/upgrade#change-detection\">變更檢測</a>部分僅僅適用於使用 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 的應用。雖然你處理變更檢測的方式和 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code>（本章的重點）不同，不過讀一下<a href=\"guide/upgrade#change-detection\">變更檢測</a>部分還是能為後續內容提供一些有用的上下文知識。</p>\n</div>\n<h4 id=\"change-detection-with-downgrademodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9zkg5hdv3w5zut42k7cgws0c\">使用 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 進行變更檢測<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-performance#change-detection-with-downgrademodule\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6dhza4zzerfifdmmx0c7vw6ai\">如前所述，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 和 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 之間的一個關鍵區別，就是如何進行變更檢測，以及檢測結果如何在兩個框架之間傳播。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ndl0ed6lxeupuw7e7letnxz4\">使用 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>，兩套變更檢測系統綁得更緊密一些。一旦應用中的 AngularJS 部分發生了某些變化，變更檢測就會自動在 Angular 部分觸發它，反之亦然。這很方便，因為它保證了任何一個框架都不會丟失重要的變更。不過，其實大多數情況下並不需要執行這些額外的變更檢測。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ahs0wy40l57hzod8rkbl6mbo\">而 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 會避免顯式觸發變更檢測，除非它確信應用的其它部分對此感興趣。比如，如果被降級的元件定義了 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>，當那個值發生變化時，應用就可能需要知道。因此，<code><a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>()</code> 就會自動在該組件上觸發變更檢測。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nmhh25mq3hq8dwzveim95rfv\">但是，大多數情況下，應用的其它地方並不會關心某個元件中進行的區域性更改。比如，如果使用者點選了某個表單的送出按鈕，通常會由元件自行處理這個操作的結果。話雖如此，但在某些情況下，你可能希望把這些變化傳播到應用中由另一個框架控制的部分。這時候，你就有責任透過手動觸發變更檢測來通知相關方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exs7vyqkyfmrvuzp6rhdwhzxd\">如果你想讓應用程式的 AngularJS 部分觸發變化檢測，你需要將特定程式碼包裝在 \n<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply\">scope.$apply()</a> 中。 類似地，要在 Angular 中觸發變化檢測，你可以使用 \n<a href=\"api/core/NgZone#run\">ngZone.run()</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f2z7rffxdti70s084qdxc88za\">很多情況下，是否執行額外的變更檢測可能並不重要。不過，在較大或變更檢測較多的應用中，它們可能會產生顯著地影響。透過讓你更精細的控制變更檢測的傳播方式，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 可以讓你的混合式應用達到更好地效能。</p>\n<h2 id=\"using-downgrademodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qziln42e8fmzwemi5mwr2x9k\">使用 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-performance#using-downgrademodule\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xu705qs3u18cfaa34gm2ivxj\">AngularJS 和 Angular 都有自己的模組概念，來幫你把應用按功能組織成內聚的程式碼區塊。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbbpd6mwvc63o82agxw46xh6m\">它們的架構和實現方式有很大的不同。 在 AngularJS 中，你透過使用 \n<a href=\"https://docs.angularjs.org/api/ng/function/angular.module\">angular.module()</a> 指定模組的名稱和依賴關係來建立一個模組。 然後你可以使用其各種方法新增資產。 在 Angular 中，你建立一個帶有 \n<a href=\"api/core/NgModule\">NgModule</a> 裝飾器的類別，描述元資料中的資產。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jpswo77rzv65qu7yyp0ijfpk\">在混合式應用中，你同時執行著兩個框架。這意味著你至少需要一個來自 AngularJS 的模組和一個來自 Angular 的模組。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6g4siosnsje50px4u9q4oktwg\">大多數情況下，你可以使用與常規應用程式相同的方式來指定模組。然後，使用 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code> 輔助函式來讓兩個框架瞭解對方使用的資產。這叫做\"升級（upgrading）\"和\"降級（downgrading）\"。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kncoqehartiho1abqwo0mcu4\">定義：</header>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yniky6cc5rmj9e2ldt82nbmq\"><em>升級</em>：讓 AngularJS 中的資產，比如元件或服務，可用於應用中的 Angular 部分。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nkcx881c46wpgwqc27seng54\"><em>降級</em>：讓 Angular 中的資產，比如元件或服務，可用於應用中的 AngularJS 部分。</p>\n</li>\n</ul>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b73v4y2xekn2t54of20exg06b\">依賴互聯中最重要的部分之一是把兩個主模組聯結在一起。這就是 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 的用武之地。使用它來建立 AngularJS 模組（你可以在 AngularJS 主模組中把這個模組用作依賴項），該模組將引導你的 Angular 主模組，並啟動混合式應用中的 Angular 部分。從某種意義上說，它把 NgModule \"降級\"成了 AngularJS 模組。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dn85efczkbsetpnikuxoxdy5\">要記住如下幾點：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wcje0navt071hd2duuh719nm\">你不必把 Angular 模組直接傳給 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code>。<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 所需要的只是一個用來建立模組實例 \"配方\"（比如工廠函式）。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sqwu3xmdol1pb7jl3fsdxkhm\">除非應用實際用到了，否則不會初始化這個 Angular 模組。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8v13mog2cgmloxwzpvr6aaq4x\">下面是如何使用 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 來聯結兩個模組的例子。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// Import `<a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()`.\nimport { <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a> } from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\n// Use it to downgrade the Angular module to an AngularJS module.\nconst downgradedModule = <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(MainAngularModuleFactory);\n\n// Use the downgraded module as a dependency to the main AngularJS module.\nangular.module('mainAngularJsModule', [\n  downgradedModule\n]);\n\n</code-example>\n<h4 id=\"specifying-a-factory-for-the-angular-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3d2ddzjbd5a5fu8t31s1sw27n\">為 Angular 模組指定一個工廠<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-performance#specifying-a-factory-for-the-angular-module\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eghxo5grl1dvobtmox6oil9bx\">如前所述，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 需要知道如何實例化 Angular 模組。你可以透過提供可以建立 Angular 模組實例的工廠函式來定義該配方。<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 接受兩種型別的工廠函式：</p>\n<ul>\n<li><code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code></li>\n<li><code>(extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; Promise&lt;<a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a>&gt;</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3b1h8n3jd1k4p84d4h640fj3\">當你傳遞一個 \n<code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>，\n<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 使用它來使用 \n<a href=\"api/platform-browser/platformBrowser\">platformBrowser</a> 的 \n<a href=\"api/core/PlatformRef#bootstrapModuleFactory\">bootstrapModuleFactory()</a> 實例化模組，這與預先編譯（AOT）相容。 AOT 編譯有助於使你的應用程式載入更快。 有關 AOT 以及如何建立 \n<code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code> 的更多訊息，請參閱 \n<a href=\"guide/aot-compiler\">預先編譯</a> 指南。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7l2gyrbr7kwokc665egjm8m0b\">另外，你還可以傳入一個普通函式，它要回傳一個解析為 <a href=\"api/core/NgModuleRef\">NgModuleRef</a>（比如你的 Angular 模組）的 Promise。該函式接收一個額外 <a href=\"api/core/StaticProvider\">Providers</a> 的陣列，這個陣列可以在所回傳 <code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code> 的 <a href=\"api/core/Injector\">Injector</a> 中可用。比如，如果你在使用 <a href=\"api/platform-browser/platformBrowser\">platformBrowser</a> 或 <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\">platformBrowserDynamic</a>，就可以把 <code>extraProviders</code> 陣列傳給它們：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nconst bootstrapFn = (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; {\n  const platformRef = <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>(extraProviders);\n  return platformRef.bootstrapModule(MainAngularModule);\n};\n// or\nconst bootstrapFn = (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; {\n  const platformRef = <a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a>(extraProviders);\n  return platformRef.bootstrapModuleFactory(MainAngularModuleFactory);\n};\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xrmrq28ci7w5hpuzw4xxhdto\">使用 <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code> 需要更少的範本程式碼，並且是一個很好的預設選項，因為它支援 AOT 開箱即用。使用自定義函式需要稍多的程式碼，但是給你提供了更大的靈活性。</p>\n<h4 id=\"instantiating-the-angular-module-on-demand\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eteghxsghyhx2dpyjbqqbwz0y\">按需實例化 Angular 模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-performance#instantiating-the-angular-module-on-demand\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fjok37o0mm3sgfpaipzq3f6x\"><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 和 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 之間的另一個關鍵區別，就是後者要求你預先實例化 AngularJS 和 Angular 的模組。這意味著你必須為實例化應用中的 Angular 而付出代價 —— 即使你以後不會用到任何 Angular 資產。<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 則不那麼激進。它只會在第一次用到時才實例化 Angular 部分，也就是說，當它需要實例化一個降級後的元件時。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vugdt11dovy98rp5s0dvu9wq\">你還可以更進一步，甚至不必將應用程式中 Angular 部分的程式碼下載到使用者的瀏覽器中 —— 直到需要它的那一刻。當不需要初始渲染或使用者尚未訪問到混合式應用中的 Angular 部分時，這特別有用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mxcerut8di8zjtzdldb1r2tk\">舉一些例子：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ody30mxj5r1aujib4twjygtr\">你只想在特定的路由上使用 Angular，除非使用者訪問此路由，否則你不需要它。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52hi2ho9axb5n526fdusachqj\">你可以將 Angular 用於僅對特定型別的使用者可見的屬性，比如：登入使用者、管理員或 VIP 成員。這樣在使用者透過了身份驗證之前，你都無需載入 Angular。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o3tfohy2iw6gqubq8i1gplx8\">你可以把 Angular 用於應用中那些在初始渲染時不太重要的屬性，並且願意為了更好地初始載入效能，而忍受載入該屬性時的一點延遲。</p>\n</li>\n</ul>\n<h3 id=\"bootstrapping-with-downgrademodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ed0exih5z23ognfz0zo0rtfe9\">透過 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 啟動<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-performance#bootstrapping-with-downgrademodule\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eb2rt201j7pgmtj6bd0q3ynz8\">你可能已經猜到了，你不需要修改引導現有 AngularJS 應用的方式。<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 需要一些額外的步驟，但 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 能自行引導 Angular 模組，你只要為它提供配方即可。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55zn3zr950uyrbmoj83yebimj\">要開始使用任何 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code> API，你仍然要像在普通 Angular 應用中一樣載入 Angular 框架。要想用 SystemJS 做到這一點，你可以遵循<a href=\"guide/upgrade-setup\" title=\"Setup for Upgrading from AngularJS\">升級的準備工作</a>中的指導，有選擇的從<a href=\"https://github.com/angular/quickstart\">快速上手專案的 GitHub 儲存庫</a>中複製程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f27dab9h28gk6ygd66amrlddy\">你還需要用 <code>npm install @angular/upgrade --save</code> 安裝 <code>@angular/upgrade</code> 套件，並新增一個指向 <code>@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a></code> 套件的對映：</p>\n<code-example header=\"systemjs.config.js (map)\" path=\"upgrade-module/src/systemjs.config.1.js\" region=\"upgrade-static-package\">\n'@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>': 'npm:@angular/upgrade/fesm2022/static.mjs',\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4gfxp1ko4gjmtrt731xo4jbr\">接下來，建立一個 <code>app.module.ts</code> 檔案，並新增下列 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 類別：</p>\n<code-example header=\"app.module.ts\">\n\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>\n  ]\n})\nexport class MainAngularModule {\n  // Empty placeholder method to satisfy the `<a href=\"api/core/Compiler\" class=\"code-anchor\">Compiler</a>`.\n  ngDoBootstrap() {}\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xhmqi9xlp14gc8el1dkp0ra6\">這個最小的 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 匯入了 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>，Angular 每個基於瀏覽器的應用都會匯入該模組。它還定義了一個空的 <code>ngDoBootstrap()</code> 方法，來防止 <a href=\"api/core/Compiler\">Compiler</a> 回傳錯誤。在這裡它是必要的，因為 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器上還沒有宣告 <code>bootstrap</code>。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e90w0ct096qb1wbzrv0ppcbhw\">你不用把 <code>bootstrap</code> 宣告加到 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器上，因為 AngularJS 擁有應用的根元件，並且 <code>ngUpgrade</code> 會負責啟動必要的元件。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5u9l86y9pl3fnjgp2eqk42uly\">現在你可以用 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 把 AngularJS 和 Angular 的模組聯結在一起。</p>\n<code-example header=\"app.module.ts\">\n\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\nimport { <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a> } from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\nconst bootstrapFn = (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; {\n  const platformRef = <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>(extraProviders);\n  return platformRef.bootstrapModule(MainAngularModule);\n};\nconst downgradedModule = <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(bootstrapFn);\n\nangular.module('mainAngularJsModule', [\n  downgradedModule\n]);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dehp2iufxggi45bz3bmj8eyou\">現有的 AngularJS 程式碼仍然在和以前一樣正常工作，但你已經可以開始新增新的 Angular 程式碼了。</p>\n<h3 id=\"using-components-and-injectables\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39p47gvgz5umazqxw3kphswcw\">使用元件與可注入物件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-performance#using-components-and-injectables\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yoya0rujnhv69rkdjdcqs53d\"><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 和 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 之間的區別就是這些。其餘的 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code> API 和概念的工作方式在不同的混合式應用中都完全一樣了。欲知詳情，參閱<a href=\"guide/upgrade\">從 AngularJS 升級</a>。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87c87p2w99wspe5s2akp7gxnl\"><a href=\"guide/upgrade#using-angular-components-from-angularjs-code\">從 AngularJS 程式碼中使用 Angular 元件</a>.</p>\n<div class=\"callout is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ym1l7galoa4pqtpfwkbsq6h7\"><strong>注意</strong>：<br>\n如果你要降級多個模組，就要在呼叫 <code><a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>()</code> 時為每個元件所屬的降級後模組指定一個模組名。</p>\n</div>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dy4lqlvkzfqf915lvi0nrwej2\"><a href=\"guide/upgrade#using-angularjs-component-directives-from-angular-code\">如何從 Angular 程式碼中使用 AngularJS 元件和指令</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eidh3zgyc6c4qy5q0e9ek3wu1\"><a href=\"guide/upgrade#projecting-angularjs-content-into-angular-components\">把 AngularJS 的內容投影進 Angular 元件中</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efjrzeiv38pctgw3rcukfvhix\"><a href=\"guide/upgrade#transcluding-angular-content-into-angularjs-component-directives\">把 Angular 的內容透傳進 AngularJS 元件和指令中</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erwm22m12tv9tymhrnflco6sr\"><a href=\"guide/upgrade#making-angularjs-dependencies-injectable-to-angular\">讓 AngularJS 的依賴可注入到 Angular 中</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dn00gizp95116w5dae19x19l7\"><a href=\"guide/upgrade#making-angular-dependencies-injectable-to-angularjs\">讓 Angular 的依賴可注入到 AngularJS 中</a>.</p>\n<div class=\"callout is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6w84v9uurcff2r115piq2m5nx\"><strong>注意</strong>：<br>\n如果你正在降級多個模組，就要在呼叫 <code><a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a>()</code> 時為每個包含可注入物件的模組指定降級後的模組名。</p>\n</div>\n</li>\n</ul>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xueha5t91fib6qtyzf23f2p3\">雖然可以降級可注入物件，但在實例化 Angular 模組之前，無法使用降級後的可注入物件。安全起見，你需要確保降級後的可注入物件不會用於應用中<em>不受</em> Angular 控制的任何地方。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coyaitoteoxvf6ddnkmzn5egj\">比如，在只使用 Angular 元件的已升級元件中<em>可以</em>使用降級後的服務，但是，<em>不能</em>在那些不依賴 Angular 的 AngularJS 元件中使用它，也不能從其它模組中使用降級過的 Angular 元件。</p>\n</div>\n<h2 id=\"using-ahead-of-time-compilation-with-hybrid-apps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zpqjfk80fwigjgcuz0t8sdiy\">使用混合式應用進行預先編譯<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-performance#using-ahead-of-time-compilation-with-hybrid-apps\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjogp4k43o3qwf1ckw5bwic7b\">你可以像在任何其它 Angular 應用中一樣，利用混合式應用的預先（AOT）編譯功能。混合式應用的設定與<a href=\"guide/aot-compiler\">預先（AOT）編譯</a>一章所講的大致相同，但 <code>index.html</code> 和 <code>main-aot.ts</code> 略有差異。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99q0x03zvccqr9dqbjilhzaxa\">AOT 需要在 AngularJS 的 <code>index.html</code> 中的 <code>&lt;script&gt;</code> 標籤中載入所有 AngularJS 檔案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"521ouqg0m22yqf4s1ytc5kxng\">你還要將所生成的 <code>MainAngularModuleFactory</code> 傳給 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 函式，而不是自定義引導函式。</p>\n<code-example header=\"app/main-aot.ts\">\n\nimport { <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a> } from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\nimport { MainAngularModuleNgFactory } from '../aot/app/app.module.ngfactory';\n\nconst downgradedModule = <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(MainAngularModuleNgFactory);\n\nangular.module('mainAngularJsModule', [\n  downgradedModule\n]);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0tqb0d9wrnib72um80h70pog\">這就是當你想讓混合式應用受益於 AOT 時所要做的一切。</p>\n<h2 id=\"conclusion\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lqfbaztqpzx6egw25gt59ob7\">總結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-performance#conclusion\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yjxay8f87r1lkf7utyk690f2\">該頁面介紹瞭如何藉助 <a href=\"api/upgrade/static\">upgrade/static</a> 套件，來按照你自己的節奏逐步升級現有的 AngularJS 應用。並且升級過程中不會方案此應用的進一步開發。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ofderhstjqwx4cto2ntyyev5\">具體地，這個指南展示了如何透過使用 \n<a href=\"api/upgrade/static/downgradeModule\">downgradeModule()</a> 而不是 \n<a href=\"api/upgrade/static/UpgradeModule\">UpgradeModule</a> 在混合應用程式中實現更好的效能和更大的靈活性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9imefpjs4n8zn0oeduj7kk6d1\">總結，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 中的關鍵差異性因素是：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ojhax4vc79q4x2k83it67m8u\">它允許實例化甚至延遲載入 Angular 部分，這能改善初始載入時間。某些情況下，這可能會完全免除啟動第二個框架的成本。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49wpk2xkv9kpmuw31cl9rue7r\">透過避免執行不必要的變更檢測，它提高了效能，給開發人員提供了更大的自定義能力。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eciv9je1k4w8f79rvuiizg5q1\">它不需要你更改引導 AngularJS 應用的方式。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kia44uv6ovibw0yrnumbi1xc\">當你希望混合式應用的 AngularJS 部分和 Angular 部分保持松耦合時，使用 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 是個很好的選擇。你仍然可以混用並對應兩個框架中的元件和服務。作為回報，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 為你提供了更大的控制權和更好的效能。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/upgrade/static/downgradeModule\n - guide/upgrade-setup\n-->\n<!-- links from this doc:\n - api/core/Compiler\n - api/core/Injector\n - api/core/Input\n - api/core/NgModule\n - api/core/NgModuleFactory\n - api/core/NgModuleRef\n - api/core/NgZone#run\n - api/core/PlatformRef#bootstrapModuleFactory\n - api/core/StaticProvider\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/platform-browser/platformBrowser\n - api/upgrade/static\n - api/upgrade/static/UpgradeModule\n - api/upgrade/static/downgradeComponent\n - api/upgrade/static/downgradeInjectable\n - api/upgrade/static/downgradeModule\n - guide/aot-compiler\n - guide/upgrade\n - guide/upgrade#change-detection\n - guide/upgrade#how-ngupgrade-works\n - guide/upgrade#making-angular-dependencies-injectable-to-angularjs\n - guide/upgrade#making-angularjs-dependencies-injectable-to-angular\n - guide/upgrade#preparation\n - guide/upgrade#projecting-angularjs-content-into-angular-components\n - guide/upgrade#transcluding-angular-content-into-angularjs-component-directives\n - guide/upgrade#using-angular-components-from-angularjs-code\n - guide/upgrade#using-angularjs-component-directives-from-angular-code\n - guide/upgrade-performance#bootstrapping-with-downgrademodule\n - guide/upgrade-performance#change-detection-with-downgrademodule\n - guide/upgrade-performance#conclusion\n - guide/upgrade-performance#how-ngupgrade-works\n - guide/upgrade-performance#instantiating-the-angular-module-on-demand\n - guide/upgrade-performance#preparation\n - guide/upgrade-performance#specifying-a-factory-for-the-angular-module\n - guide/upgrade-performance#upgrading-for-performance\n - guide/upgrade-performance#upgrading-with-ngupgrade\n - guide/upgrade-performance#using-ahead-of-time-compilation-with-hybrid-apps\n - guide/upgrade-performance#using-components-and-injectables\n - guide/upgrade-performance#using-downgrademodule\n - guide/upgrade-setup\n - https://docs.angularjs.org/api/ng/function/angular.module\n - https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply\n - https://github.com/angular/quickstart\n-->"}
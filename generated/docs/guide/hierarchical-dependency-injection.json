{"id":"guide/hierarchical-dependency-injection","title":"多級注入器","contents":"<div class=\"content\">\n  <h1 id=\"hierarchical-injectors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6yphfmrifb6ds59qqo0a9znw\">多級注入器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#hierarchical-injectors\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mvhqli3hcj0msfoybs8cpjmh\">Angular中的注入器具有規則，您可以利用這些規則來實現應用程式中可注入物件的所需可見性。 透過理解這些規則，您可以確定是在應用程式級別、元件中還是指令中宣告提供者。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tnnmhq8ozs2oc02odydnh1xm\">本主題使用以下象形文字。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63aeavu64oinmw1nj9vgv0dat\">html 實體</th>\n<th align=\"left\">pictographs</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>🌺</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8uo5ebfmxxn2jt3m18u3dyd1i\">紅色木槿（\n<code>🌺</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🌻</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cdd3oxo3n3y5xp77ch3ayz4u\">向日葵（\n<code>🌻</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🌷</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b57em8qlnsr8p17vzj8jcxltz\">鬱金香（\n<code>🌷</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🌿</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pffpt6wsvx5cdmbtqbsm3r0b\">蕨類別植物（\n<code>🌿</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🍁</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5x470qwz54b97y41etd46mg9m\">楓葉 (\n<code>🍁</code>)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🐳</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3v8krgmipcm9y2f3qkmwxrk09\">鯨魚 (\n<code>🐳</code>)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🐶</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhl698o3tuyuhebo0wuwwvc54\">狗 (\n<code>🐶</code>)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🦔</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yxdvsvqftria20rqrin6j26p\">刺蝟 (\n<code>🦔</code>)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhdnjf6jsuuk7wu96mx8i6e6z\">使用 Angular 建立的應用程式可能會變得非常龐大，管理這種複雜性的一種方法是將應用程式拆分成一個明確定義的元件樹。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkkd9b2nm08ex36qhwpawoxp4\">你的頁面中可能會有某些部分會與應用程式的其餘部分完全獨立地工作，它具有自己的服務本地副本和所需的其它依賴項。在應用程式中，這些部分使用的某些服務可能會與其它部分共享，或者與元件樹中更深層的父元件共享，而其它依賴項則應該是私有的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjnms1omfip2i3zih7y7y8rvg\">使用多級依賴注入，你可以隔離應用程式的各個部分，並允許它們保有自己的私有依賴項，不與應用程式的其餘部分共享，或者讓父元件僅與其子元件共享某些依賴項，而不與元件樹的其餘部分共享等。多級依賴注入能讓你僅在需要時才在應用程式的不同部分之間共享依賴項。</p>\n<h2 id=\"types-of-injector-hierarchies\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abke1sabu5s1osm2c3ltpb08a\">注入器層次結構的型別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#types-of-injector-hierarchies\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sauqa2b0mw1upzd6zdi1il05\">Angular 中的注入器具有規則，你可以利用這些規則來實現注入物件在應用程式中所需的可見性。透過瞭解這些規則，你可以確定是在應用程式級別、元件中還是指令中宣告提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3cu6l3znx4o88dedsdfsfdh0t\">Angular 中有兩個注入器層次結構：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"147s1t1d0pdjqv8azitzj5b7p\">注入器層次結構</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6165ro06qth3wpm77r0per7ag\"><code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 層次結構</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mf5aq93iw8mfpi37kwoh6o9t\">使用 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 或 \n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> 中的 \n<code>providers</code> 陣列來設定此層次結構中的 \n<code>ElementInjector</code>。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95m6e9joifb3a1tjcoebp7o92\"><code>ElementInjector</code> 層次結構</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqs8mvquxd7ftw19qz7yc38qh\">在每個 DOM 元素上隱式建立。預設情況下，除非在 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 或 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 中的 \n<code>providers</code> 屬性中設定，否則 \n<code>ElementInjector</code> 為空。</td>\n</tr>\n</tbody>\n</table>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ayw1p46ddubfv9yb4na44vxb\">基於 NgModule 的應用程式</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbtpjcgc74ymqofo0kysqi5t8\">對於基於 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的應用程式，可以使用 \n<code>ModuleInjector</code> 層次結構，並使用 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 或 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 註解來提供依賴關係。</p>\n</div>\n<p><a id=\"register-providers-injectable\"></a></p>\n<h3 id=\"environmentinjector\"><code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#environmentinjector\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9o3xwvkxslt2ak14e3egpacr\"><code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 可以透過以下兩種方式進行設定：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0b3ns1um27kxwrmy96h54e5w\">使用 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的 \n<code>providedIn</code> 屬性來引用 \n<code>root</code> 或 \n<code>platform</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5q150nb8nyiqc33iprgwtdq21\"><code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> 的 \n<code>providers</code> 陣列</li>\n</ul>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lvx26izqcfou6urvubwlgen7\">搖樹最佳化和 @Injectable()</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9d7rj499idw1w799l9a4aa8x1\">使用 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的 \n<code>providedIn</code> 屬性優於使用 \n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> 的 \n<code>providers</code> 陣列。透過 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的 \n<code>providedIn</code>，最佳化工具可以執行搖樹最佳化，從而刪除應用程式未使用的服務，使捆綁包大小變小。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54a1jrlznoibwzd1rty4taj5a\">搖樹最佳化對於函式庫特別有用，因為使用該函式庫的應用程式不需要注入它。在 <a href=\"guide/architecture-services\">服務與依賴注入簡介</a>瞭解關於<a href=\"guide/architecture-services#providing-services\">可搖樹最佳化的提供者</a>的更多訊息。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bp6prbu0mryuvqxoav56bmbx3\"><code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 由 \n<code><a href=\"api/core/ApplicationConfig#providers\" class=\"code-anchor\">ApplicationConfig.providers</a></code> 設定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cso6p2dccanqjpo3wzq6bry6j\">使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的 <code>providedIn</code> 屬性提供服務的方式如下：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'  // &lt;--provides this service in the root ElementInjector\n})\nexport class ItemService {\n  name = 'telephone';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"299z6cues6j4fyvulaxaxrvzi\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器標識一個服務類別。\n<code>providedIn</code> 屬性設定特定的 \n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>，在此處為 \n<code>root</code>，使服務在 \n<code>root</code> 的 \n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 中可用。</p>\n<h3 id=\"moduleinjector\">ModuleInjector<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#moduleinjector\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coyf0sa553lzq5eps35sjb490\">在基於\n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>的應用程式中，可以透過以下兩種方式之一設定 ModuleInjector：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0b3ns1um27kxwrmy96h54e5w\">使用 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的 \n<code>providedIn</code> 屬性來引用 \n<code>root</code> 或 \n<code>platform</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7voqw0x6ejh0c0r15yxzfwqqc\">使用 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 的 <code>providers</code> 陣列</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42rihhjlmluya4kk9y2hs7ud8\"><code>ModuleInjector</code>由\n<code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code>和\n<code><a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code>屬性設定。 \n<code>ModuleInjector</code>是透過遞迴遍歷\n<code><a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code>中的所有提供者陣列來展開的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"321q4ih7v41sghhcteop9j2qb\">子 <code>ModuleInjector</code> 是在延遲載入其它 <code>@NgModules</code> 時建立的。</p>\n<h3 id=\"platform-injector\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lwh9pmy89yjbcfaleq60cn9l\">平台注入器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#platform-injector\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3p5uou82weuhkktoe9jfrgr6v\">在\n<code>root</code>以上還有兩個注入器，一個額外的\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>和\n<code>NullInjector()</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jh7pyzmyolyhbp3sncv709s0\">思考下 Angular 要如何透過 <code>main.ts</code> 中的如下程式碼引導應用程式：</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\n<a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>(AppComponent, appConfig);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vfi9zishcttkns1f885nc753\"><code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>()</code>方法會建立平台注入器的子注入器，該子注入器由\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>實例設定。這是\n<code>root</code>的\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"guwuies0jh9bn57da52u0j3\"><code><a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>()</code> 方法建立一個由 <code>PlatformModule</code> 設定的注入器，該注入器包含特定平台的依賴項。這允許多個應用共享同一套平台設定。比如，無論你執行多少個應用程式，瀏覽器都只有一個 URL 欄。你可以使用 <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a>()</code> 函式提供 <code>extraProviders</code>，從而在平台級別設定特定平台的額外提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64z7v1etb3uwru7joc3juhnca\">層次結構中的下一個父注入器是 <code>NullInjector()</code>，它是樹的頂部。如果你在樹中向上走了很遠，以至於要在 <code>NullInjector()</code> 中尋找服務，那麼除非使用 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>，否則將收到錯誤訊息，因為最終所有東西都將以 <code>NullInjector()</code> 結束並回傳錯誤，或者對於 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>，回傳 <code>null</code>。關於 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> 的更多訊息，請參閱本指南的 <a href=\"guide/hierarchical-dependency-injection#optional\"><code>@Optional()</code> 部分</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9d730tax9wit37t8tpmp9l8ss\">下圖展示了前面各段落描述的 <code>root</code> <code>ModuleInjector</code> 及其父注入器之間的關係。</p>\n<div class=\"lightbox\">\n<img alt=\"NullInjector, ModuleInjector, root injector\" src=\"generated/images/guide/dependency-injection/injectors.svg\" width=\"483\" height=\"377\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1o52juw3j55vp7nnoz8oykrhi\">雖然名稱\n<code>root</code>是一個特殊別名，但其他\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>層次結構沒有別名。你可以選擇在動態載入元件時建立\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>層次結構，例如使用路由器時，它將建立子\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>層次結構。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e07j0v33vm0dpma49u6bkbrkw\">所有請求都會向上轉發到根注入器，無論你是透過\n<code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>()</code>方法傳遞\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>實例來設定，還是在自己的服務中使用\n<code>root</code>註冊所有提供者。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cujcazu1qwiemnv56rwuwf1u3\">@Injectable() vs. ApplicationConfig</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1vdvx9w499oqa59d0i6opmce\">如果在\n<code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code>的\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>中設定了一個全域提供者，則會覆蓋\n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code>元資料中為\n<code>root</code>設定的提供者。你可以這樣做來設定與多個應用程式共享的服務的非預設提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"124q4r1j7lcklhb97yxib776s\">下面是一個範例，其中元件路由設定包括在\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>的\n<code>providers</code>清單中列出其提供者的非預設\n<a href=\"guide/router#location-strategy\">位置策略</a>。</p>\n<code-example>\n providers: [\n  { provide: <a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a>, useClass: <a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a> }\n]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mkn2l2ahr267idizdwde79ei\">對於基於\n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>的應用程式，在\n<code>AppModule</code>中設定全域提供者。</p>\n</div>\n<h3 id=\"elementinjector\"><code>ElementInjector</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#elementinjector\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22vhtza02ni75us0mojxcajg2\">Angular 會為每個 DOM 元素隱式建立 <code>ElementInjector</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3lruytznzwamgo83qvcjza5fn\">可以用 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器中的 <code>providers</code> 或 <code>viewProviders</code> 屬性來設定 <code>ElementInjector</code> 以提供服務。比如，下面的 <code>TestComponent</code> 透過提供此服務來設定 <code>ElementInjector</code>：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  …\n  providers: [{ provide: ItemService, useValue: { name: 'lamp' } }]\n})\nexport class TestComponent\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uw554xhtj9lli7jivq7sw2cv\">請檢視\n<a href=\"guide/hierarchical-dependency-injection#resolution-rules\">解析規則</a>部分，以瞭解\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>樹、\n<code>ModuleInjector</code>樹和\n<code>ElementInjector</code>樹之間的關係。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ibooij33jhiclfnhjudqhupy\">在元件中提供服務時，可以透過 <code>ElementInjector</code> 在該組件實例處使用該服務。根據<a href=\"guide/hierarchical-dependency-injection#resolution-rules\">解析規則</a>部分描述的可見性規則，它也同樣在子元件/指令處可見。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tysuedslm2l4w68j5swxun4g\">當元件實例被銷燬時，該服務實例也將被銷燬。</p>\n<h4 id=\"directive-and-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vrd035p1i8r4xqe6ytyut6e1\"><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 和 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#directive-and-component\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65f49jqq2b5f1nbcrotq8pfyz\">元件是一種特殊型別的指令，這意味著 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 具有 <code>providers</code> 屬性，<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 也同樣如此。這意味著指令和元件都可以使用 <code>providers</code> 屬性來設定提供者。當使用 <code>providers</code> 屬性為元件或指令設定提供者時，該提供程商就屬於該組件或指令的 <code>ElementInjector</code>。同一元素上的元件和指令共享同一個注入器。</p>\n<p><a id=\"resolution-rules\"></a></p>\n<h2 id=\"resolution-rules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfqi97toy3b7sthtizne81hmg\">解析規則<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#resolution-rules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"365hmeplasc3zt4k2k8s7zo2n\">當為元件/指令解析令牌時，Angular 分為兩個階段來解析它：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44b7elj19k46pi6f0qow2mq2c\">針對 <code>ElementInjector</code> 層次結構中它的父級。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5s0bjkvainceqzvckk95czhnh\">與其父級在\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>層次結構中。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dlytnr99pknem077cwt4i4tt\">當元件宣告依賴項時，Angular 會嘗試使用它自己的 <code>ElementInjector</code> 來滿足該依賴。如果元件的注入器缺少提供者，它將把請求傳給其父元件的 <code>ElementInjector</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2a7lm5xtwo0vcfhylzkextn10\">這些請求將繼續轉發，直到 Angular 找到可以處理該請求的注入器或用完祖先 <code>ElementInjector</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ndqrkagh927t2sb1jtspptx9\">如果 Angular 在任何\n<code>ElementInjector</code>層次結構中找不到提供者，它會回傳到請求源所在的元素，並在\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>層次結構中查詢。如果 Angular 仍然找不到提供者，它會丟擲錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u8ue1zvljbvrw8ctkuuiz5rq\">如果你已在不同級別註冊了相同 DI 令牌的提供者，則 Angular 會用遇到的第一個來解析該依賴。比如，如果提供者已經在需要此服務的元件中本地註冊了，則 Angular 不會再尋找同一服務的其它提供者。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9j3brwirob71ls3bo02kjqxc9\">對於基於\n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>的應用程式，如果在\n<code>ElementInjector</code>層次結構中找不到提供者，Angular會搜尋\n<code>ModuleInjector</code>層次結構。</p>\n</div>\n<h2 id=\"resolution-modifiers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2egzmhelxn2j75or0a9ugv7zb\">解析修飾符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#resolution-modifiers\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nponj72thiwktvezm714xyp4\">可以使用\n<code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>、\n<code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code>、\n<code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>和\n<code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>來修改 Angular 的解析行為。從\n<code>@angular/core</code>匯入每個，並在元件類別建構式函式或\n<code>inject</code>設定中使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hf1cv7ei07idgzhqmxqou3od\">關於展示本節介紹的解析修飾符的可執行應用，請參閱<live-example name=\"resolution-modifiers\">解析修飾符範例</live-example>。</p>\n<h3 id=\"types-of-modifiers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gbas207ptpw5a39uac5bfzux\">修飾符的型別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#types-of-modifiers\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7b516yfeyfj8b0k0f367u1syt\">解析修飾符分為三類別：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lus4oo5z9ndrdm0gw0fifkgc\">如果 Angular 找不到你要的東西該怎麼辦，用 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9afelsq9wdjqfmj9iuwwmfmly\">從哪裡開始尋找，用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69cgvrcqhhq0nd5ek4txk8fxj\">到哪裡停止尋找，用 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 和 <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79jsgg7a15jve4zwj1ldm9rvh\">預設情況下，Angular 始終從當前的 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 開始，並一直向上搜尋。修飾符使你可以更改開始（預設是自己）或結束位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tnfazf26dpqz2d9v8a8c71ag\">此外，你可以組合所有修飾符，除了：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44pss5zhiyyjjmlxrvf508tf0\"><code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>和\n<code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"525gbs8ye5x0yvdjbaxjshk34\"><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>和\n<code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code></li>\n</ul>\n<p><a id=\"optional\"></a></p>\n<h3 id=\"optional\"><code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#optional\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"u8udo69fxwitzbp10l3rpbqb\"><code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>允許 Angular 將你注入的服務視為可選的。這樣，如果在執行時無法解析服務，Angular會將服務解析為\n<code>null</code>，而不是丟擲錯誤。在以下範例中，服務\n<code>OptionalService</code>沒有在服務、\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>、\n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code>或元件類別中提供，因此在應用程式中無法使用。</p>\n<code-example header=\"src/app/optional/optional.component.ts\" path=\"resolution-modifiers/src/app/optional/optional.component.ts\" region=\"optional-component\">\nexport class OptionalComponent {\n  constructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() public optional?: OptionalService) {}\n}\n\n</code-example>\n<h3 id=\"self\"><code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#self\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cru489o4p23hrbcaiet9u70eh\">使用 <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> 讓 Angular 僅檢視當前元件或指令的 <code>ElementInjector</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sqrhhy4f79v2qubn5xfau4nk\"><code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> 的一個好例子是要注入某個服務，但只有當該服務在當前宿主元素上可用時才行。為了避免這種情況下出錯，請將 <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> 與 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> 結合使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5v22t5f0gxhczx1bhe9svo9ih\">比如，在下面的 <code>SelfComponent</code> 中。請注意在建構式函式中注入的 <code>LeafService</code>。</p>\n<code-example header=\"src/app/self-no-data/self-no-data.component.ts\" path=\"resolution-modifiers/src/app/self-no-data/self-no-data.component.ts\" region=\"self-no-data-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-self-no-data',\n  templateUrl: './self-no-data.component.html',\n  styleUrls: ['./self-no-data.component.css']\n})\nexport class SelfNoDataComponent {\n  constructor(@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>() @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() public leaf?: LeafService) { }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ei70emsuimcsigsvhn0itvjg2\">在這個範例中，有一個父級提供者，注入該服務將回傳該值，但使用\n<code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code>和\n<code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>注入服務將回傳\n<code>null</code>，因為\n<code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code>告訴注入器只在當前主機元素中搜索。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mfm4879806ybhd1bn0qunngy\">另一個範例顯示了具有 <code>FlowerService</code> 提供者的元件類別。在這個例子中，注入器沒有超出當前 <code>ElementInjector</code> 就停止了，因為它已經找到了 <code>FlowerService</code> 並回傳了鬱金香<code>🌷</code>。</p>\n<code-example header=\"src/app/self/self.component.ts\" path=\"resolution-modifiers/src/app/self/self.component.ts\" region=\"self-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-self',\n  templateUrl: './self.component.html',\n  styleUrls: ['./self.component.css'],\n  providers: [{ provide: FlowerService, useValue: { emoji: '🌷' } }]\n})\nexport class SelfComponent {\n  constructor(@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>() public flower: FlowerService) {}\n}\n\n</code-example>\n<h3 id=\"skipself\"><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#skipself\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kq602pzafjakosfqu8fbh0ue\"><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 與 <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> 相反。使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>，Angular 在父 <code>ElementInjector</code> 中而不是當前 <code>ElementInjector</code> 中開始搜尋服務。因此，如果父 <code>ElementInjector</code> 對 <code>emoji</code> 使用了值 <code>🌿</code>（蕨類別），但元件的 <code>providers</code> 陣列中有 <code>🍁</code>（楓葉），則 Angular 將忽略 <code>🍁</code>（楓葉），而使用 <code>🌿</code>（蕨類別）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ogx2jk8qq2cgv329aqesf47s\">要在程式碼中看到這一點，請先假定 <code>emoji</code> 的以下值就是父元件正在使用的值，如本服務所示：</p>\n<code-example header=\"src/app/leaf.service.ts\" path=\"resolution-modifiers/src/app/leaf.service.ts\" region=\"leafservice\">\nexport class LeafService {\n  emoji = '🌿';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5g6yj03j21h9m0ihwwhnjv06\">想象一下，在子元件中，你有一個不同的值 <code>🍁</code>（楓葉），但你想使用父項的值。你就要使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>：</p>\n<code-example header=\"src/app/skipself/skipself.component.ts\" path=\"resolution-modifiers/src/app/skipself/skipself.component.ts\" region=\"skipself-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-skipself',\n  templateUrl: './skipself.component.html',\n  styleUrls: ['./skipself.component.css'],\n  // Angular would ignore this LeafService instance\n  providers: [{ provide: LeafService, useValue: { emoji: '🍁' } }]\n})\nexport class SkipselfComponent {\n  // Use @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() in the constructor\n  constructor(@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() public leaf: LeafService) { }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"em6pitweh66vvqac1hifmupkj\">在這個例子中，你獲得的 <code>emoji</code> 值將為 <code>🌿</code>（蕨類別），而不是 <code>🍁</code>（楓葉）。</p>\n<h4 id=\"skipself-with-optional\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64zue5csavtbxre082m6d9f1i\">合用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 和 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#skipself-with-optional\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck1ebwre5wvm5g99adgq5l6tc\">如果值為 <code>null</code> 請同時使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 和 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> 來防止錯誤。在下面的範例中，將 <code>Person</code> 服務注入到建構式函式中。<code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 告訴 Angular 跳過當前的注入器，如果 <code>Person</code> 服務為 <code>null</code>，則 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> 將防止報錯。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nclass Person {\n  constructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() parent?: Person) {}\n}\n\n</code-example>\n<h3 id=\"host\"><code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#host\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b2ybhvdjbde0fwelq42cu7dl\"><code>@<a href=\"api/core/Host\" class=\"code-anchor\">宿主</a>()</code> 允許你將一個元件指定為在搜尋提供者時注入器樹中的最後一站。 即使在樹中有一個更高階別的服務實例，Angular 也不會繼續查詢。 使用 \n<code>@<a href=\"api/core/Host\" class=\"code-anchor\">宿主</a>()</code> 如下：</p>\n<code-example header=\"src/app/host/host.component.ts\" path=\"resolution-modifiers/src/app/host/host.component.ts\" region=\"host-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-host',\n  templateUrl: './host.component.html',\n  styleUrls: ['./host.component.css'],\n  //  provide the service\n  providers: [{ provide: FlowerService, useValue: { emoji: '🌷' } }],\n  imports: [HostChildComponent]\n})\nexport class HostComponent {\n  // use @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() in the constructor when injecting the service\n  constructor(@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() public flower?: FlowerService) { }\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbyne4fz6g5mhg1wm0ptplpwv\">由於 <code>HostComponent</code> 在其建構式函式中具有 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>，因此，無論 <code>HostComponent</code> 的父級是否可能有 <code>flower.emoji</code> 值，該 <code>HostComponent</code> 都將使用 <code>🌷</code>（鬱金香）。</p>\n<h2 id=\"logical-structure-of-the-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59jb04926ftj097fcn21102gb\">範本的邏輯結構<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#logical-structure-of-the-template\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egl038v92wl5n9erjp6q55bcg\">在元件類別中提供服務時，服務在 <code>ElementInjector</code> 樹中的可見性是取決於你在何處以及如何提供這些服務。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ao0qeldylpzesvtx55qeb1i7d\">瞭解 Angular 範本的基礎邏輯結構將為你設定服務並進而控制其可見性奠定基礎。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gtada0qe7otax7diplqq7grg\">元件在範本中使用，如以下範例所示：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root&gt;\n  &lt;app-child&gt;&lt;/app-child&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejmlhdl3wnztbpt926ave65jh\">通常，你會在不同的檔案中宣告元件及其範本。 為了理解注入系統的工作原理，從組合邏輯樹的角度看它們是很有用的。 術語 \n<em>邏輯</em> 與渲染樹區分開來，渲染樹是你應用的 DOM 樹。 為了標記元件範本所在的位置，本指南使用了不存在於渲染樹中的偽元素 \n<code>&lt;#VIEW&gt;</code>，僅用於心智模型目的。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kb99dke0crhah203e5cenn63\">下面是如何將 <code>&lt;app-root&gt;</code> 和 <code>&lt;app-child&gt;</code> 檢視樹組合為單個邏輯樹的範例：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root&gt;\n  &lt;#VIEW&gt;\n    &lt;app-child&gt;\n     &lt;#VIEW&gt;\n       …content goes here…\n     &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6s70mba7nvrspr2jog1pykqf9\">當你在元件類別中設定服務時，瞭解這種 <code>&lt;#VIEW&gt;</code> 劃界的思想尤其重要。</p>\n<h2 id=\"providing-services-in-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vqvq4dk33m7tguz8ffxyak15\">在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 中提供服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#providing-services-in-component\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bywjkpm5c06bd4zw2eyweonl5\">你如何透過 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code>（或 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code>）裝飾器提供服務決定了它們的可見性。以下各節示範了 <code>providers</code> 和 <code>viewProviders</code> 以及使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 和 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 修改服務可見性的方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ae30ufymtxpbzttemvnq7fg1n\">元件類別可以透過兩種方式提供服務：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f41igu4yqvhd69slfy59wpgem\">陣列</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab9knis0b0ql98g4fw7g9a8ds\">使用 \n<code>providers</code> 陣列</td>\n<td align=\"left\"><code-example format=\"typescript\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ \n&nbsp; … \n&nbsp; providers: [ \n&nbsp;&nbsp;&nbsp; {provide: FlowerService, useValue: {emoji: '🌺'}} \n&nbsp; ] \n}) </code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ccu3xwpusklj1em7xe65gl9of\">使用 \n<code>viewProviders</code> 陣列</td>\n<td align=\"left\"><code-example format=\"typescript\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ \n&nbsp; … \n&nbsp;viewProviders: [ \n&nbsp;&nbsp;&nbsp; {provide: AnimalService, useValue: {emoji: '🐶'}} \n&nbsp; ] \n}) </code-example></td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jiyrgi5kfjemhejkvuitkj1q\">為了解 <code>providers</code> 和 <code>viewProviders</code> 對服務可見性的影響有何差異，以下各節將逐步建立一個 <live-example name=\"providers-viewproviders\"></live-example> 並在程式碼和邏輯樹中比較 <code>providers</code> 和 <code>viewProviders</code> 的作用。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"813ozyiwqeonkxrbsrbkxsx5f\">在邏輯樹中，你會發現 \n<code>@Provide</code>、\n<code>@<a href=\"api/core/Inject\" class=\"code-anchor\">注入</a></code> 和 \n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>，它們不是真正的 HTML 屬性，而是用來展示底層原理的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14g9m4gnywr411lz3b95ozfy1\">Angular 服務屬性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(Token)=&gt;Value </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2c83evg1c6suxawcr83qk3ods\">示範了如果在邏輯樹中的這個位置注入 \n<code>Token</code>，其值將是 \n<code>Value</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @Provide(Token=Value) </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ceaepek1qcr6v21gkvxk5azm\">示範了在邏輯樹中的這個位置宣告了一個帶有值 \n<code>Value</code> 的 \n<code>Token</code> 提供者。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>(Token) </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgiy4dpgghqs7su14fw2c20he\">示範了應在這個位置使用一個備用 \n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"example-app-structure\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axj3kp7kglb9ewex3242edste\">應用程式結構範例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#example-app-structure\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uuw6tcj4vda6bv5u65lh046u\">範例應用程式的 <code>root</code> 提供了 <code>FlowerService</code>，其 <code>emoji</code> 值為 <code>🌺</code>（紅色芙蓉）。</p>\n<code-example header=\"src/app/flower.service.ts\" path=\"providers-viewproviders/src/app/flower.service.ts\" region=\"flowerservice\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class FlowerService {\n  emoji = '🌺';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95nz0yhmomd9rl39fadk1j1an\">考慮一個只有 <code>AppComponent</code> 和 <code>ChildComponent</code> 的簡單應用程式。最基本的渲染檢視看起來就像巢狀的 HTML 元素，比如：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root&gt; &lt;!-- AppComponent selector --&gt;\n    &lt;app-child&gt; &lt;!-- ChildComponent selector --&gt;\n    &lt;/app-child&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3l40g3o9pzua8wk1j8m6k9sb\">但是，在幕後，Angular 在解析注入請求時使用如下邏輯檢視表示形式：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root&gt; &lt;!-- AppComponent selector --&gt;\n    &lt;#VIEW&gt;\n        &lt;app-child&gt; &lt;!-- ChildComponent selector --&gt;\n            &lt;#VIEW&gt;\n            &lt;/#VIEW&gt;\n        &lt;/app-child&gt;\n    &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efh86lmqxrx3csf06nx2qrhek\">此處的 <code>&lt;#VIEW&gt;</code> 表示範本的實例。請注意，每個元件都有自己的 <code>&lt;#VIEW&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beqmqzrflgw2dx82ui9fh3bzt\">瞭解此結構可以告知你如何提供和注入服務，並完全控制服務的可見性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gcmfz84wsmia7x3vl2s7m9dm\">現在，考慮 <code>&lt;app-root&gt;</code> 只注入了 <code>FlowerService</code>：</p>\n<code-example header=\"src/app/app.component.ts\" path=\"providers-viewproviders/src/app/app.component.1.ts\" region=\"injection\">\nexport class AppComponent  {\n  constructor(public flower: FlowerService) {}\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxcfosl5qixut93xvefzt1uuk\">將繫結新增到 <code>&lt;app-root&gt;</code> 範本來將結果視覺化：</p>\n<code-example header=\"src/app/app.component.html\" path=\"providers-viewproviders/src/app/app.component.html\" region=\"binding-flower\">\n&lt;p&gt;Emoji from FlowerService: {{flower.emoji}}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ujblhupw1ch9kvbiy3xu92p\">該檢視中的輸出為：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nEmoji from FlowerService: 🌺\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8h064awkt70nktzbn249fj9qa\">在邏輯樹中，可以把它表示成這樣：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService) flower=&gt;\"🌺\"&gt;\n  &lt;#VIEW&gt;\n    &lt;p&gt;Emoji from FlowerService: {{flower.emoji}} (🌺)&lt;/p&gt;\n    &lt;app-child&gt;\n      &lt;#VIEW&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d167fmz2nalsyon68lcxkvrj5\">當 <code>&lt;app-root&gt;</code> 請求 <code>FlowerService</code> 時，注入器的工作就是解析 <code>FlowerService</code> 令牌。令牌的解析分為兩個階段：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2p58d8rsiog1cp1zn1bfs9la1\">注入器確定邏輯樹中搜索的開始位置和結束位置。注入程式從起始位置開始，並在邏輯樹的每個級別上查詢令牌。如果找到令牌，則將其回傳。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40zh8qap6c0nhyh9f8vnz1ea7\">如果找不到令牌，注入器會查詢最近的父級 \n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 來委派請求。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hzn7jm4g6nquqetgpinc867s\">在這個例子中，約束為：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"709jw0ps3c2n0htgj7z01m83p\">從屬於 <code>&lt;app-root&gt;</code> 的 <code>&lt;#VIEW&gt;</code> 開始，並結束於 <code>&lt;app-root&gt;</code>。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmg4dwi3d3z8illtf17u07vwv\">通常，搜尋的起點就是注入點。但是，在這個例子中，<code>&lt;app-root&gt;</code> <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 的特殊之處在於它們還包括自己的 <code>viewProviders</code>，這就是為什麼搜尋從 <code>&lt;app-root&gt;</code> 的 <code>&lt;#VIEW&gt;</code> 開始的原因。對於對應同一位置的指令，情況卻並非如此。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"379sq2qa92gc7s1vpo5r7jopr\">結束位置恰好與元件本身相同，因為它就是此應用程式中最頂層的元件。</p>\n</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rj3mnegypvm0trle71aoqoe2\">由 \n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> 提供的 \n<code>ElementInjector</code> 在注入令牌無法在 \n<code>ElementInjector</code> 層次結構中找到時作為備用注入器。</p>\n</li>\n</ol>\n<h3 id=\"using-the-providers-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tjga6cybgglm6ep9b4d5o8p5\">使用 <code>providers</code> 陣列<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#using-the-providers-array\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2ostbk69ynjnpd3fejxqo206\">現在，在 <code>ChildComponent</code> 類別中，為 <code>FlowerService</code> 新增一個提供者，以便在接下來的小節中示範更復雜的解析規則：</p>\n<code-example header=\"src/app/child.component.ts\" path=\"providers-viewproviders/src/app/child/child.component.1.ts\" region=\"flowerservice\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  templateUrl: './child.component.html',\n  styleUrls: ['./child.component.css'],\n  // use the providers array to provide a service\n  providers: [{ provide: FlowerService, useValue: { emoji: '🌻' } }]\n})\n\nexport class ChildComponent {\n  // inject the service\n  constructor( public flower: FlowerService) { }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tg8gnfb6f9zfus3ny9vt1mix\">現在，在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器中提供了 <code>FlowerService</code>，當 <code>&lt;app-child&gt;</code> 請求該服務時，注入器僅需要查詢 <code>&lt;app-child&gt;</code> 中的 <code>ElementInjector</code>。不必再透過注入器樹繼續搜尋。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8wy87z139ugroav4ghnh6594m\">下一步是將繫結新增到 <code>ChildComponent</code> 範本。</p>\n<code-example header=\"src/app/child.component.html\" path=\"providers-viewproviders/src/app/child/child.component.html\" region=\"flower-binding\">\n&lt;p&gt;Emoji from FlowerService: {{flower.emoji}}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77odpuxoaj8rk1u2nljuj2rn3\">要渲染新的值，請在 <code>AppComponent</code> 範本的底部新增 <code>&lt;app-child&gt;</code>，以便其檢視也顯示向日葵：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nChild Component\nEmoji from FlowerService: 🌻\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d8j8apvu9jv5e8hqx01fod7a2\">在邏輯樹中，可以把它表示成這樣：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService) flower=&gt;\"🌺\"&gt;\n  &lt;#VIEW&gt;\n    &lt;p&gt;Emoji from FlowerService: {{flower.emoji}} (🌺)&lt;/p&gt;\n    &lt;app-child @Provide(FlowerService=\"🌻\")\n               @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService)=&gt;\"🌻\"&gt; &lt;!-- search ends here --&gt;\n      &lt;#VIEW&gt; &lt;!-- search starts here --&gt;\n        &lt;h2&gt;Child <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>&lt;/h2&gt;\n        &lt;p&gt;Emoji from FlowerService: {{flower.emoji}} (🌻)&lt;/p&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzlw8n8sp9x6z7uzmvw9crxkh\">當 <code>&lt;app-child&gt;</code> 請求 <code>FlowerService</code> 時，注入器從 <code>&lt;app-child&gt;</code> 的 <code>&lt;#VIEW&gt;</code> 開始搜尋（包括 <code>&lt;#VIEW&gt;</code>，因為它是從 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 注入的），併到 <code>&lt;app-child&gt;</code> 結束。在這個例子中，<code>FlowerService</code> 在 <code>&lt;app-child&gt;</code> 的 <code>providers</code> 陣列中解析為向日葵🌻。注入器不必在注入器樹中進一步查詢。一旦找到 <code>FlowerService</code>，它便停止執行，再也看不到🌺（紅芙蓉）。</p>\n<p><a id=\"use-view-providers\"></a></p>\n<h3 id=\"using-the-viewproviders-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dg3ozvt1tncll2jzb76aag02h\">使用 <code>viewProviders</code> 陣列<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#using-the-viewproviders-array\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31fqbdrgciuh3y1pqnvqzdzy1\">使用 <code>viewProviders</code> 陣列是在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器中提供服務的另一種方法。使用 <code>viewProviders</code> 使服務在 <code>&lt;#VIEW&gt;</code> 中可見。</p>\n<div class=\"is-helpful alert\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aq0tdecrbsvk1xhyf2t1ydomd\">除了使用 <code>viewProviders</code> 陣列外，其它步驟與使用 <code>providers</code> 陣列相同。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5j32y041rfoutrfwjcveppyrm\">關於這些步驟的說明，請繼續本節。如果你可以自行設定，請跳至<a href=\"guide/hierarchical-dependency-injection#modify-visibility\">修改服務可用性</a> 一節。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yrd7sk5vkyajo42vaob016dg\">該範例應用程式具有第二個服務 <code>AnimalService</code> 來示範 <code>viewProviders</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5x5u4mrt0jcrjtsd7smvjpale\">首先，建立一個 <code>AnimalService</code> 與 <code>emoji</code> 的🐳（鯨魚）屬性：</p>\n<code-example header=\"src/app/animal.service.ts\" path=\"providers-viewproviders/src/app/animal.service.ts\" region=\"animal-service\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class AnimalService {\n  emoji = '🐳';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6azw4saubnmwone3xhnrk1a2k\">遵循與 <code>FlowerService</code> 相同的模式，將 <code>AnimalService</code> 注入 <code>AppComponent</code> 類別：</p>\n<code-example header=\"src/app/app.component.ts\" path=\"providers-viewproviders/src/app/app.component.ts\" region=\"inject-animal-service\">\nexport class AppComponent  {\n  constructor(public flower: FlowerService, public animal: AnimalService) {}\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6icwmjql4imbc2jtar6cwlh4\">你可以保留所有與 \n<code>FlowerService</code> 相關的程式碼，這樣可以與 \n<code>AnimalService</code> 進行比較。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crfsblrhbwislq135pyjq87mn\">新增一個 <code>viewProviders</code> 陣列，並將 <code>AnimalService</code> 也注入到 <code>&lt;app-child&gt;</code> 類別中，但是給 <code>emoji</code> 一個不同的值。在這裡，它的值為🐶（小狗）。</p>\n<code-example header=\"src/app/child.component.ts\" path=\"providers-viewproviders/src/app/child/child.component.ts\" region=\"provide-animal-service\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  templateUrl: './child.component.html',\n  styleUrls: ['./child.component.css'],\n  // provide services\n  providers: [{ provide: FlowerService, useValue: { emoji: '🌻' } }],\n  viewProviders: [{ provide: AnimalService, useValue: { emoji: '🐶' } }],\n  imports: [InspectorComponent]\n})\n\nexport class ChildComponent {\n  // inject service\n  constructor( public flower: FlowerService, public animal: AnimalService) { }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61w7c0vinswzp37hff2f2ybqc\">將繫結新增到 <code>ChildComponent</code> 和 <code>AppComponent</code> 範本。在 <code>ChildComponent</code> 範本中，新增以下繫結：</p>\n<code-example header=\"src/app/child.component.html\" path=\"providers-viewproviders/src/app/child/child.component.html\" region=\"animal-binding\">\n&lt;p&gt;Emoji from AnimalService: {{animal.emoji}}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ns17ixqm3pu2n0en131nqwkn\">此外，將其新增到 <code>AppComponent</code> 範本：</p>\n<code-example header=\"src/app/app.component.html\" path=\"providers-viewproviders/src/app/app.component.html\" region=\"binding-animal\">\n&lt;p&gt;Emoji from AnimalService: {{animal.emoji}}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chidgxebxzzvcjir6nnfpi6e1\">現在，你應該在瀏覽器中看到兩個值：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nAppComponent\nEmoji from AnimalService: 🐳\n\nChild Component\nEmoji from AnimalService: 🐶\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a01qvqeypeglznyuxz1f35x93\">此 <code>viewProviders</code> 範例的邏輯樹如下：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n         @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService) animal=&gt;\"🐳\"&gt;\n  &lt;#VIEW&gt;\n    &lt;app-child&gt;\n      &lt;#VIEW @Provide(AnimalService=\"🐶\")\n            @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=&gt;\"🐶\")&gt;\n       &lt;!-- ^^using viewProviders means AnimalService is available in &lt;#VIEW&gt;--&gt;\n       &lt;p&gt;Emoji from AnimalService: {{animal.emoji}} (🐶)&lt;/p&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w3nbanvzlkjc0f212efq309v\">與 <code>FlowerService</code> 範例一樣，<code>&lt;app-child&gt;</code> <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器中提供了 <code>AnimalService</code>。這意味著，由於注入器首先在元件的 <code>ElementInjector</code> 中查詢，因此它將找到 <code>AnimalService</code> 的值 🐶（小狗）。它不需要繼續搜尋 <code>ElementInjector</code> 樹，也不需要搜尋 <code>ModuleInjector</code>。</p>\n<h3 id=\"providers-vs-viewproviders\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qjctl6lnzlrfuyi6i9npkg2v\"><code>providers</code> 與 <code>viewProviders</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#providers-vs-viewproviders\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1ky7c6vaedf4m7z1navsgsdl\">為了看清 <code>providers</code> 和 <code>viewProviders</code> 的差異，請在範例中新增另一個元件，並將其命名為 <code>InspectorComponent</code>。<code>InspectorComponent</code> 將是 <code>ChildComponent</code> 的子 <code>ChildComponent</code>。在 <code>inspector.component.ts</code> 中，將 <code>FlowerService</code> 和 <code>AnimalService</code> 注入建構式函式中：</p>\n<code-example header=\"src/app/inspector/inspector.component.ts\" path=\"providers-viewproviders/src/app/inspector/inspector.component.ts\" region=\"injection\">\nexport class InspectorComponent {\n  constructor(public flower: FlowerService, public animal: AnimalService) { }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22r9e1l5677k596gssrn9bdx4\">你不需要 <code>providers</code> 或 <code>viewProviders</code> 陣列。接下來，在 <code>inspector.component.html</code> 中，從以前的元件中新增相同的 html：</p>\n<code-example header=\"src/app/inspector/inspector.component.html\" path=\"providers-viewproviders/src/app/inspector/inspector.component.html\" region=\"binding\">\n&lt;p&gt;Emoji from FlowerService: {{flower.emoji}}&lt;/p&gt;\n&lt;p&gt;Emoji from AnimalService: {{animal.emoji}}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehbggvrs3db6m0tiw3c6nvxl5\">記得將 \n<code>InspectorComponent</code> 新增到 \n<code>ChildComponent</code> 的 \n<code>imports</code> 陣列中。</p>\n<code-example header=\"src/app/child/child.component.ts\" language=\"typescript\" format=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  ...\n  imports: [InspectorComponent]\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5bfb3ujzfp6muyx4phxdte5\">接下來，確保你的 <code>child.component.html</code> 包含以下內容：</p>\n<code-example header=\"src/app/child/child.component.html\" path=\"providers-viewproviders/src/app/child/child.component.html\" region=\"child-component\">\n&lt;p&gt;Emoji from FlowerService: {{flower.emoji}}&lt;/p&gt;\n&lt;p&gt;Emoji from AnimalService: {{animal.emoji}}&lt;/p&gt;\n\n&lt;div class=\"container\"&gt;\n  &lt;h3&gt;Content projection&lt;/h3&gt;\n\t&lt;ng-content&gt;&lt;/ng-content&gt;\n&lt;/div&gt;\n\n&lt;h3&gt;Inside the view&lt;/h3&gt;\n&lt;app-inspector&gt;&lt;/app-inspector&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96gtelpwdzt36002qh99q4lpc\">前兩行帶有繫結，來自之前的步驟。新的部分是 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 和 <code>&lt;app-inspector&gt;</code>。<code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 允許你投影內容，<code>ChildComponent</code> 範本中的 <code>&lt;app-inspector&gt;</code> 使 <code>InspectorComponent</code> 成為 <code>ChildComponent</code> 的子元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ymrwkr8bl93hja9oykh5ua32\">接下來，將以下內容新增到 <code>app.component.html</code> 中以利用內容投影的優勢。</p>\n<code-example header=\"src/app/app.component.html\" path=\"providers-viewproviders/src/app/app.component.html\" region=\"content-projection\">\n&lt;app-child&gt;&lt;app-inspector&gt;&lt;/app-inspector&gt;&lt;/app-child&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3452aiazomml6yumsa9j6qza\">現在，瀏覽器將渲染以下內容，為簡潔起見，省略了前面的範例：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\n//…Omitting previous examples. The following applies to this section.\n\nContent projection: this is coming from content. Doesn't get to see\npuppy because the puppy is declared inside the view only.\n\nEmoji from FlowerService: 🌻\nEmoji from AnimalService: 🐳\n\nEmoji from FlowerService: 🌻\nEmoji from AnimalService: 🐶\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gtvtusvqwtwr4khsvmbjujzp\">這四個繫結說明了 <code>providers</code> 和 <code>viewProviders</code> 之間的區別。由於🐶（小狗）在 <code>&lt;#VIEW&gt;</code> 中宣告，因此投影內容不可見。投影的內容中會看到🐳（鯨魚）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n1pbosxvygbc3wrdpfat6isv\">但是下一部分，<code>InspectorComponent</code> 是 <code>ChildComponent</code> 的子元件，<code>InspectorComponent</code> 在 <code>&lt;#VIEW&gt;</code> 內部，因此當它請求 <code>AnimalService</code> 時，它會看到🐶（小狗）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1natcajzie2d80jkp3v443c1\">邏輯樹中的 <code>AnimalService</code> 如下所示：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n         @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService) animal=&gt;\"🐳\"&gt;\n  &lt;#VIEW&gt;\n    &lt;app-child&gt;\n      &lt;#VIEW @Provide(AnimalService=\"🐶\")\n            @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=&gt;\"🐶\")&gt;\n        &lt;!-- ^^using viewProviders means AnimalService is available in &lt;#VIEW&gt;--&gt;\n        &lt;p&gt;Emoji from AnimalService: {{animal.emoji}} (🐶)&lt;/p&gt;\n  \n        &lt;div class=\"container\"&gt;\n          &lt;h3&gt;Content projection&lt;/h3&gt;\n          &lt;app-inspector @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService) animal=&gt;\"🐳\"&gt;\n            &lt;p&gt;Emoji from AnimalService: {{animal.emoji}} (🐳)&lt;/p&gt;\n          &lt;/app-inspector&gt;\n        &lt;/div&gt;\n\n        &lt;app-inspector&gt;\n          &lt;#VIEW @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService) animal=&gt;\"🐶\"&gt;\n            &lt;p&gt;Emoji from AnimalService: {{animal.emoji}} (🐶)&lt;/p&gt;\n          &lt;/#VIEW&gt;\n        &lt;/app-inspector&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72ipbzqwepxbvt68mjtre519j\"><code>&lt;app-inspector&gt;</code> 的投影內容中看到了🐳（鯨魚），而不是🐶（小狗），因為🐶（小狗）在 <code>&lt;app-child&gt;</code> 的 <code>&lt;#VIEW&gt;</code> 中。如果 <code>&lt;app-inspector&gt;</code> 也位於 <code>&lt;#VIEW&gt;</code> 則只能看到🐶（小狗）。</p>\n<p><a id=\"modify-visibility\"></a></p>\n<h2 id=\"modifying-service-visibility\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7v774xif8024fs7b9cviqrg0h\">修改服務可見性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#modifying-service-visibility\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3foiltfkr9g9e5erkxwgdj0pt\">本節講的是如何使用可見性修飾符 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>，<code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> 和 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 來限制 <code>ElementInjector</code> 的開始和結束範圍。</p>\n<h3 id=\"visibility-of-provided-tokens\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ex6tc2q4qxk7vmjzdkfljlbtn\">提供者令牌的可見性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#visibility-of-provided-tokens\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asr3qhgc3dt76emc8k3asyr1o\">可見性裝飾器影響搜尋注入令牌時在邏輯樹中開始和結束的位置。為此，要將可見性裝飾器放置在注入點，即 <code>constructor()</code>，而不是在宣告點。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eage03hjbqspzrsxsk538nmjs\">為了修改該注入器從哪裡開始尋找 <code>FlowerService</code>，把 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 加到 <code>&lt;app-child&gt;</code> 的 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code> 宣告 <code>FlowerService</code> 中。該宣告在 <code>&lt;app-child&gt;</code> 建構式函式中，如 <code>child.component.ts</code> 所示：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nconstructor(@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() public flower : FlowerService) { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44wtxa3qiod0ddu5l6azvu9j1\">使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>，<code>&lt;app-child&gt;</code> 注入器不會尋找自身來獲取 <code>FlowerService</code>。相反，注入器開始在 <code>&lt;app-root&gt;</code> 的 <code>ElementInjector</code> 中尋找 <code>FlowerService</code>，在那裡它什麼也沒找到。\n然後，它回傳到 <code>&lt;app-child&gt;</code> 的 <code>ModuleInjector</code> 並找到🌺（紅芙蓉）值，這是可用的，因為 <code>&lt;app-child&gt;</code> <code>ModuleInjector</code> 和 <code>&lt;app-root&gt;</code> <code>ModuleInjector</code> 被展開成了一個 <code>ModuleInjector</code>。因此，UI 將渲染以下內容：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nEmoji from FlowerService: 🌺\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aul9cnhxvks7ck1a0klacyr4g\">在邏輯樹中，這種情況可能如下所示：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService) flower=&gt;\"🌺\"&gt;\n  &lt;#VIEW&gt;\n    &lt;app-child @Provide(FlowerService=\"🌻\")&gt;\n      &lt;#VIEW @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService, <a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>)=&gt;\"🌺\"&gt;\n        &lt;!-- With <a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>, the injector looks to the next injector up the tree --&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cycd7ia2k01cf9998laki0n4v\">儘管 <code>&lt;app-child&gt;</code> 提供了🌻（向日葵），但該應用程式渲染了🌺（紅色芙蓉），因為 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 導致當前的注入器跳過了自身並尋找其父級。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hnr4q3z8qozxpoz85mct9v3\">如果現在將 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>（以及 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>）新增到了 <code>FlowerService</code> 的 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code>，其結果將為 <code>null</code>。這是因為 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 將搜尋的上限限制為 <code>&lt;#VIEW&gt;</code>。這是在邏輯樹中的情況：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService) flower=&gt;\"🌺\"&gt;\n  &lt;#VIEW&gt; &lt;!-- end search here with null--&gt;\n    &lt;app-child @Provide(FlowerService=\"🌻\")&gt; &lt;!-- start search here --&gt;\n      &lt;#VIEW @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService, @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>, @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>, @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>)=&gt;null&gt;\n      &lt;/#VIEW&gt;\n      &lt;/app-parent&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1v979zq7b7cppqribly33tk3\">在這裡，服務及其值是相同的，但是 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 阻止了注入器對 <code>FlowerService</code> 進行任何高於 <code>&lt;#VIEW&gt;</code> 的查詢，因此找不到它並回傳 <code>null</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88nv3zfisoi51ddxljr08n0i3\">範例應用程式使用了 \n<code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>，這樣應用程式就不會丟擲錯誤，但原則是一樣的。</p>\n</div>\n<h3 id=\"skipself-and-viewproviders\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwxqo9jigrvnyxxe9f5itrgmm\"><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 和 <code>viewProviders</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#skipself-and-viewproviders\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zooknx1byvx6nfql4x27a6da\">該 <code>&lt;app-child&gt;</code> 目前提供在 <code>viewProviders</code> 陣列中提供了值為 🐶（小狗）的 <code>AnimalService</code>。由於注入器只需要檢視 <code>&lt;app-child&gt;</code> 的 <code>ElementInjector</code> 中的 <code>AnimalService</code>，它就不會看到🐳（鯨魚）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0zyst2mimps1mses5dyk8y68\">在 <code>FlowerService</code> 這個例子中，如果將 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 新增到 <code>AnimalService</code> 的建構式函式中，則注入器將不在 <code>AnimalService</code> 的當前 <code>&lt;app-child&gt;</code> 的 <code>ElementInjector</code> 中查詢 <code>AnimalService</code>。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class ChildComponent {\n\n  // add @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()\n  constructor(@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() public animal : AnimalService) { }\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kbbfd94cpn70crusw7e93y0a\">相反，注入器將從 <code>&lt;app-root&gt;</code> <code>ElementInjector</code> 開始找。請記住，<code>&lt;app-child&gt;</code> 類別在 <code>viewProviders</code> 陣列中 <code>AnimalService</code> 中提供了🐶（小狗）的值：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  …\n  viewProviders:\n  [{ provide: AnimalService, useValue: { emoji: '🐶' } }]\n  ...\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdhglpwrnlklfs4o8928t53lv\">在 <code>&lt;app-child&gt;</code> 中使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 的邏輯樹是這樣的：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n          @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=&gt;\"🐳\")&gt;\n  &lt;#VIEW&gt;&lt;!-- search begins here --&gt;\n    &lt;app-child&gt;\n      &lt;#VIEW @Provide(AnimalService=\"🐶\")\n             @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService, <a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>=&gt;\"🐳\")&gt;\n        &lt;!--Add @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a> --&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4orbwp16vvfpgmvr6hsnoc7ff\">在 <code>&lt;app-child&gt;</code> 中使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>，注入器就會在 <code>&lt;app-root&gt;</code> 的 <code>ElementInjector</code> 中找到 🐳（鯨）。</p>\n<h3 id=\"host-and-viewproviders\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6me9bvznibd7l29dtyu0bjusz\"><code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 和 <code>viewProviders</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#host-and-viewproviders\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5545uee1ed87huooeupov5xb0\">如果把 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 新增到 <code>AnimalService</code> 的建構式函式上，結果就是🐶（小狗），因為注入器會在 <code>&lt;app-child&gt;</code> 的 <code>&lt;#VIEW&gt;</code> 中查詢 <code>AnimalService</code> 服務。這裡是 <code>&lt;app-child&gt;</code> 類別中的 <code>viewProviders</code> 陣列和建構式函式中的 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  …\n  viewProviders:\n  [{ provide: AnimalService, useValue: { emoji: '🐶' } }]\n  ...\n\n})\nexport class ChildComponent {\n  constructor(@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() public animal : AnimalService) { }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fsxrx1fk28h9dhwyiqej2v86\"><code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 導致注入器開始查詢，直到遇到 <code>&lt;#VIEW&gt;</code> 的邊緣。</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n          @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=&gt;\"🐳\")&gt;\n  &lt;#VIEW&gt;\n    &lt;app-child&gt;\n      &lt;#VIEW @Provide(AnimalService=\"🐶\")\n             @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService, @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>=&gt;\"🐶\")&gt; &lt;!-- @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a> stops search here --&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bg6j2ulnb30l6h9wnp1knkev8\">將帶有第三個動物🦔（刺蝟）的 <code>viewProviders</code> 陣列新增到 <code>app.component.ts</code> 的 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 元資料中：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: [ './app.component.css' ],\n  viewProviders: [{ provide: AnimalService, useValue: { emoji: '🦔' } }]\n  ...\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yxtak79s5ylb3ru7eg2ty8ki\">接下來，同時把 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 和 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 加在 <code>child.component.ts</code> 中 <code>AnimalService</code> 的建構式函式中。這是 <code>&lt;app-child&gt;</code> 建構式函式中的 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 和 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class ChildComponent {\n\n  constructor(\n  @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() public animal : AnimalService) { }\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lg90v0ox40fkng7uliao4eso\">當將 \n<code>FlowerService</code>（位於 \n<code>providers</code> 陣列中）應用了 \n<code>@<a href=\"api/core/Host\" class=\"code-anchor\">宿主</a>()</code> 和 \n<code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">跳過自身</a>()</code>時，結果是 \n<code>null</code>，因為 \n<code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">跳過自身</a>()</code> 從 \n<code>&lt;app-child&gt;</code> 注入器開始查詢，而 \n<code>@<a href=\"api/core/Host\" class=\"code-anchor\">宿主</a>()</code> 在 \n<code>&lt;#VIEW&gt;</code> 處停止查詢 —— 在那裡沒有 \n<code>FlowerService</code>。 在邏輯樹中，你可以看到 \n<code>FlowerService</code> 在 \n<code>&lt;app-child&gt;</code> 中可見，而不在其 \n<code>&lt;#VIEW&gt;</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16ks27n97zbbhjlft8st8g4vg\">不過，提供在 <code>AppComponent</code> 的 <code>viewProviders</code> 陣列中的 <code>AnimalService</code>，是可見的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"89c01wc1vq67185ooyeuh6mb2\">邏輯樹表示法說明了為何如此：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=&gt;\"🐳\")&gt;\n  &lt;#VIEW @Provide(AnimalService=\"🦔\")\n         @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService, @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>)=&gt;\"🦔\"&gt;\n    &lt;!-- ^^@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() starts here,  @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() stops here^^ --&gt;\n    &lt;app-child&gt;\n      &lt;#VIEW @Provide(AnimalService=\"🐶\")\n             @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService, @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>, @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>, @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>)=&gt;\"🦔\"&gt;\n               &lt;!-- Add @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a> ^^--&gt;\n      &lt;/#VIEW&gt;\n      &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rzeajeor6m39ua90vrfkhgix\"><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 導致注入器從 <code>&lt;app-root&gt;</code> 而不是 <code>&lt;app-child&gt;</code> 處開始對 <code>AnimalService</code> 進行搜尋，而 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 會在 <code>&lt;app-root&gt;</code> 的 <code>&lt;#VIEW&gt;</code> 處停止搜尋。\n由於 <code>AnimalService</code> 是透過 <code>viewProviders</code> 陣列提供的，因此注入程式會在 <code>&lt;#VIEW&gt;</code> 找到🦔（刺蝟）。</p>\n<p><a id=\"component-injectors\"></a></p>\n<h2 id=\"elementinjector-use-case-examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2v4lo1obqkyr6w8652rhtkl6i\"><code>ElementInjector</code> 用例範例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#elementinjector-use-case-examples\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sovehe66pzgtxyz8433jkvx3\">在不同級別設定一個或多個提供者的能力開闢了很有用的可能性。要檢視正在執行的應用中的以下情況，請參閱<live-example>英雄範例</live-example>。</p>\n<h3 id=\"scenario-service-isolation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aobumz97mlirkdbbqpjdtzt4j\">場景：服務隔離<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#scenario-service-isolation\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12lqayaz16qagk74r7ntty70s\">出於架構方面的考慮，可能會讓你決定把一個服務限制到只能在它所屬的那個應用域中訪問。比如，這個例子中包括一個用於顯示反派清單的 <code>VillainsListComponent</code>，它會從 <code>VillainsService</code> 中獲得反派清單資料。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tgs39ow6s2v472msqtzq6hxy\">如果你在根模組 <code>AppModule</code> 中（也就是你註冊 <code>HeroesService</code> 的地方）提供 <code>VillainsService</code>，就會讓應用中的任何地方都能訪問到 <code>VillainsService</code>，包括針對英雄的工作流。如果你稍後修改了 <code>VillainsService</code>，就可能破壞了英雄元件中的某些地方。在根模組 <code>AppModule</code> 中提供該服務將會引入此風險。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5at65z2ua5p1yqimtqpzrrm8f\">該怎麼做呢？你可以在 <code>VillainsListComponent</code> 的 <code>providers</code> 元資料中提供 <code>VillainsService</code>，就像這樣：</p>\n<code-example header=\"src/app/villains-list.component.ts (metadata)\" path=\"hierarchical-dependency-injection/src/app/villains-list.component.ts\" region=\"metadata\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-villains-list',\n  templateUrl: './villains-list.component.html',\n  providers: [ VillainsService ],\n  imports: [ <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>, <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a> ]\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2a35ndxs17hkqjz5du7zsv02\">在 <code>VillainsListComponent</code> 的元資料中而不是其它地方提供 <code>VillainsService</code> 服務，該服務就會只在 <code>VillainsListComponent</code> 及其子元件樹中可用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9q7dzv7qwd9xouq48sgg0yogx\"><code>VillainService</code> 對於 <code>VillainsListComponent</code> 來說是單例的，因為它就是在這裡宣告的。只要 <code>VillainsListComponent</code> 沒有銷燬，它就始終是 <code>VillainService</code> 的同一個實例。但是對於 <code>VillainsListComponent</code> 的多個實例，每個 <code>VillainsListComponent</code> 的實例都會有自己的 <code>VillainService</code> 實例。</p>\n<h3 id=\"scenario-multiple-edit-sessions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2w92sf2uzrfd7wgusr5x22bfo\">場景：多重編輯會話<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#scenario-multiple-edit-sessions\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"820kruu1nf6ae68tg6qgoc13u\">很多應用允許使用者同時進行多個任務。比如，在納稅申報應用中，申報人可以開啟多個報稅單，隨時可能從一個切換到另一個。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8juqilzux46ipnakf65gkv2bw\">為了示範這種場景，假設有一個顯示超級英雄清單的外部 <code>HeroListComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2i9h71u2uocfeu4xzpx4khswy\">要開啟一個英雄的報稅單，申報者點選英雄名，它就會開啟一個元件來編輯那個申報單。每個選中的申報單都會在自己的元件中開啟，並且可以同時開啟多個申報單。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7mhq0qmq3dndr8qhu8rnkjj3\">每個報稅單元件都有下列特徵：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nj47t1poyo0mbdehfkpdyzs3\">屬於它自己的報稅單會話</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dgqm8tnjpbn0cy508zcfenlw2\">可以修改一個報稅單，而不會影響另一個元件中的申報單</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ttabqgzlwasvqzmnqiyuoqll\">能把所做的修改儲存到它的報稅單中，或者放棄它們</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"Heroes in action\" src=\"generated/images/guide/dependency-injection/hid-heroes-anim.gif\" width=\"500\" height=\"384\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"697lr9cgkwtk703e66lvksg4t\">假設 <code>HeroTaxReturnComponent</code> 還有一些管理並還原這些更改的邏輯。這對於簡單的報稅單來說是很容易的。不過，在現實世界中，報稅單的資料模型非常複雜，對這些修改的管理可能不得不投機取巧。你可以把這種管理任務委託給一個輔助服務，就像這個例子中所做的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2x4sodg66dyahxaeerxpcs4wj\">報稅單服務 HeroTaxReturnService 快取了單條 HeroTaxReturn，用於跟蹤那個申報單的變更，並且可以儲存或還原它。它把後兩項職責委託給了全應用級的單例服務 HeroService，HeroService 是透過依賴注入機制取得的。</p>\n<code-example header=\"src/app/hero-tax-return.service.ts\" path=\"hierarchical-dependency-injection/src/app/hero-tax-return.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HeroTaxReturn } from './hero';\nimport { HeroesService } from './heroes.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroTaxReturnService {\n  private currentTaxReturn!: HeroTaxReturn;\n  private originalTaxReturn!: HeroTaxReturn;\n\n  constructor(private heroService: HeroesService) { }\n\n  set taxReturn(htr: HeroTaxReturn) {\n    this.originalTaxReturn = htr;\n    this.currentTaxReturn  = htr.clone();\n  }\n\n  get taxReturn(): HeroTaxReturn {\n    return this.currentTaxReturn;\n  }\n\n  restoreTaxReturn() {\n    this.taxReturn = this.originalTaxReturn;\n  }\n\n  saveTaxReturn() {\n    this.taxReturn = this.currentTaxReturn;\n    this.heroService.saveTaxReturn(this.currentTaxReturn).subscribe();\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2h1war6f33s9aepvoko7kwy7\">下面是正在使用 <code>HeroTaxReturnService</code> 的 <code>HeroTaxReturnComponent</code> 元件。</p>\n<code-example header=\"src/app/hero-tax-return.component.ts\" path=\"hierarchical-dependency-injection/src/app/hero-tax-return.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a> } from '@angular/core';\nimport { HeroTaxReturn } from './hero';\nimport { HeroTaxReturnService } from './hero-tax-return.service';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-hero-tax-return',\n  templateUrl: './hero-tax-return.component.html',\n  styleUrls: [ './hero-tax-return.component.css' ],\n  providers: [ HeroTaxReturnService ],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3se4vzea4zspzhvt8ywo8rhc\">透過 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 屬性可以得到<em>要編輯的報稅單</em>，這個屬性被實現成了讀取器（getter）和設定器（setter）。設定器根據傳進來的報稅單初始化了元件自己的 <code>HeroTaxReturnService</code> 實例。讀取器總是回傳該服務所存英雄的當前狀態。元件也會請求該服務來儲存或還原這個報稅單。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2kkssg3617r4icsro99enq2y\">但如果該服務是一個全應用範圍的單例就不行了。每個元件就都會共享同一個服務實例，每個元件也都會覆蓋屬於其它英雄的報稅單。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oj4yiisksbo7ygllj9fud22z\">要防止這一點，就要在 <code>HeroTaxReturnComponent</code> 元資料的 <code>providers</code> 屬性中設定元件級的注入器，來提供該服務。</p>\n<code-example header=\"src/app/hero-tax-return.component.ts (providers)\" path=\"hierarchical-dependency-injection/src/app/hero-tax-return.component.ts\" region=\"providers\">\nproviders: [ HeroTaxReturnService ],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ddsnvowdgdnyjfxyhp91ji0es\"><code>HeroTaxReturnComponent</code> 有它自己的 <code>HeroTaxReturnService</code> 提供者。\n回憶一下，每個元件的<em>實例</em>都有它自己的注入器。\n在元件級提供服務可以確保元件的<em>每個</em>實例都得到一個自己的、私有的服務實例。這可以確保報稅單不會被意外覆蓋。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bimqfltovmme25pvnjqda52jq\">該場景程式碼中的其它部分依賴另一些 Angular 的屬性和技術，你將會在本文件的其它章節學到。\n你可以到<live-example></live-example>檢視程式碼和下載它。</p>\n</div>\n<h3 id=\"scenario-specialized-providers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bu80yjgzs1u1i4uljokemu1j1\">場景：專門的提供者<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#scenario-specialized-providers\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arr0fm3ajeat8lz75cjdzynn2\">在其它層級重新提供服務的另一個理由，是在元件樹的深層中把該服務替換為一個<em>更專門化的</em>實現。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zuytvfcjc56r2ppjp943a2h6\">例如，考慮一個包含輪胎服務訊息並依賴其它服務來提供有關汽車的更多詳細訊息的 <code>Car</code> 元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tpvxgjgyyvzawpq2ydp8wl7v\">標記為 （A） 的根注入器使用<em>通用</em>提供者來獲取有關 <code>CarService</code> 和 <code>EngineService</code> 的詳細訊息。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"auowlkicmf2u5ycgaz1d6me5j\"><code>Car</code> 元件（A）。元件 （A） 顯示有關汽車的輪胎服務資料，並指定通用服務以提供有關汽車的更多訊息。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4az5ykiohmgidwj4tzuq3v9y\">子元件（B）。元件（B）為 <code>CarService</code> 和 <code>EngineService</code> 定義了自己的<em>特化的</em>提供者，它們具有適合元件 （B） 中發生的事情的特殊能力。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kbvdey8i2i8oo27tl426l3wh\">子元件（C）作為元件（B）的子元件。元件 （C） 為 <code>CarService</code> 定義了自己的、<em>更加特化</em>的提供者。</p>\n</li>\n</ol>\n<div class=\"lightbox\">\n<img alt=\"car components\" src=\"generated/images/guide/dependency-injection/car-components.png\" width=\"338\" height=\"201\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3e7wcdupc8jgdgeojkhgbedf\">在幕後，每個元件都有自己的注入器，這個注入器帶有為元件本身準備的 0 個、1 個或多個提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awzfvl1qpetnhuu2l3or63yr6\">當你在最深的元件 （C） 處解析 <code>Car</code> 實例時，其注入器會生成：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7uir5v27f1uvu9jy5wtgkupe\">由注入器 （C） 解析的 <code>Car</code> 實例</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er92vwvtvfe726tg4sb9mbn9y\">由注入器 （B） 解析的 <code>Engine</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9h7bk7bbjsm9nbyq9vjjf50wt\">它的 <code>Tires</code> 由根注入器 （A） 解析。</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"car injector tree\" src=\"generated/images/guide/dependency-injection/injector-tree.png\" width=\"600\" height=\"248\">\n</div>\n<h2 id=\"more-on-dependency-injection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4r394oxtaippr99nlg58bkq34\">關於依賴注入的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#more-on-dependency-injection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rzo4py4kmjkngx6sns7tzjgi\">要了解關於 Angular 依賴注入的更多訊息，參閱 <a href=\"guide/dependency-injection-providers\">DI 提供者</a>和 <a href=\"guide/dependency-injection-in-action\">DI 實戰</a> 兩章。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Wed Sep 06 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - errors/NG0200\n - guide/dependency-injection\n - guide/dependency-injection-navtree\n - guide/dependency-injection-overview\n - guide/devtools\n - guide/example-apps-list\n - guide/glossary\n - guide/ngmodule-faq\n - guide/providers\n - guide/template-expression-operators\n - guide/upgrade\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/HashLocationStrategy\n - api/common/LocationStrategy\n - api/common/NgFor\n - api/core/ApplicationConfig\n - api/core/ApplicationConfig#providers\n - api/core/Component\n - api/core/Directive\n - api/core/EnvironmentInjector\n - api/core/EventEmitter\n - api/core/Host\n - api/core/Inject\n - api/core/Injectable\n - api/core/Injector\n - api/core/Input\n - api/core/NgModule\n - api/core/NgModule#imports\n - api/core/NgModule#providers\n - api/core/Optional\n - api/core/Output\n - api/core/Self\n - api/core/SkipSelf\n - api/core/ng-content\n - api/forms/FormsModule\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/bootstrapApplication\n - api/platform-browser/platformBrowser\n - guide/architecture-services\n - guide/architecture-services#providing-services\n - guide/dependency-injection-in-action\n - guide/dependency-injection-providers\n - guide/hierarchical-dependency-injection#directive-and-component\n - guide/hierarchical-dependency-injection#elementinjector\n - guide/hierarchical-dependency-injection#elementinjector-use-case-examples\n - guide/hierarchical-dependency-injection#environmentinjector\n - guide/hierarchical-dependency-injection#example-app-structure\n - guide/hierarchical-dependency-injection#hierarchical-injectors\n - guide/hierarchical-dependency-injection#host\n - guide/hierarchical-dependency-injection#host-and-viewproviders\n - guide/hierarchical-dependency-injection#logical-structure-of-the-template\n - guide/hierarchical-dependency-injection#modify-visibility\n - guide/hierarchical-dependency-injection#modifying-service-visibility\n - guide/hierarchical-dependency-injection#moduleinjector\n - guide/hierarchical-dependency-injection#more-on-dependency-injection\n - guide/hierarchical-dependency-injection#optional\n - guide/hierarchical-dependency-injection#platform-injector\n - guide/hierarchical-dependency-injection#providers-vs-viewproviders\n - guide/hierarchical-dependency-injection#providing-services-in-component\n - guide/hierarchical-dependency-injection#resolution-modifiers\n - guide/hierarchical-dependency-injection#resolution-rules\n - guide/hierarchical-dependency-injection#scenario-multiple-edit-sessions\n - guide/hierarchical-dependency-injection#scenario-service-isolation\n - guide/hierarchical-dependency-injection#scenario-specialized-providers\n - guide/hierarchical-dependency-injection#self\n - guide/hierarchical-dependency-injection#skipself\n - guide/hierarchical-dependency-injection#skipself-and-viewproviders\n - guide/hierarchical-dependency-injection#skipself-with-optional\n - guide/hierarchical-dependency-injection#types-of-injector-hierarchies\n - guide/hierarchical-dependency-injection#types-of-modifiers\n - guide/hierarchical-dependency-injection#using-the-providers-array\n - guide/hierarchical-dependency-injection#using-the-viewproviders-array\n - guide/hierarchical-dependency-injection#visibility-of-provided-tokens\n - guide/router#location-strategy\n-->"}
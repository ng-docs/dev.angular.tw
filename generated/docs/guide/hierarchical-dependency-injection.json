{"id":"guide/hierarchical-dependency-injection","title":"多级注入器","contents":"<div class=\"content\">\n  <h1 id=\"hierarchical-injectors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6yphfmrifb6ds59qqo0a9znw\">多级注入器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#hierarchical-injectors\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mvhqli3hcj0msfoybs8cpjmh\">Angular中的注入器具有规则，您可以利用这些规则来实现应用程序中可注入对象的所需可见性。 通过理解这些规则，您可以确定是在应用程序级别、组件中还是指令中声明提供者。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tnnmhq8ozs2oc02odydnh1xm\">本主题使用以下象形文字。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63aeavu64oinmw1nj9vgv0dat\">html 实体</th>\n<th align=\"left\">pictographs</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>🌺</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8uo5ebfmxxn2jt3m18u3dyd1i\">红色木槿（\n<code>🌺</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🌻</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cdd3oxo3n3y5xp77ch3ayz4u\">向日葵（\n<code>🌻</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🌷</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b57em8qlnsr8p17vzj8jcxltz\">郁金香（\n<code>🌷</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🌿</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pffpt6wsvx5cdmbtqbsm3r0b\">蕨类植物（\n<code>🌿</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🍁</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5x470qwz54b97y41etd46mg9m\">枫叶 (\n<code>🍁</code>)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🐳</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3v8krgmipcm9y2f3qkmwxrk09\">鲸鱼 (\n<code>🐳</code>)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🐶</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhl698o3tuyuhebo0wuwwvc54\">狗 (\n<code>🐶</code>)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>🦔</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yxdvsvqftria20rqrin6j26p\">刺猬 (\n<code>🦔</code>)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhdnjf6jsuuk7wu96mx8i6e6z\">使用 Angular 构建的应用程序可能会变得非常庞大，管理这种复杂性的一种方法是将应用程序拆分成一个明确定义的组件树。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkkd9b2nm08ex36qhwpawoxp4\">你的页面中可能会有某些部分会与应用程序的其余部分完全独立地工作，它具有自己的服务本地副本和所需的其它依赖项。在应用程序中，这些部分使用的某些服务可能会与其它部分共享，或者与组件树中更深层的父组件共享，而其它依赖项则应该是私有的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjnms1omfip2i3zih7y7y8rvg\">使用多级依赖注入，你可以隔离应用程序的各个部分，并允许它们保有自己的私有依赖项，不与应用程序的其余部分共享，或者让父组件仅与其子组件共享某些依赖项，而不与组件树的其余部分共享等。多级依赖注入能让你仅在需要时才在应用程序的不同部分之间共享依赖项。</p>\n<h2 id=\"types-of-injector-hierarchies\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abke1sabu5s1osm2c3ltpb08a\">注入器层次结构的类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#types-of-injector-hierarchies\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sauqa2b0mw1upzd6zdi1il05\">Angular 中的注入器具有规则，你可以利用这些规则来实现注入对象在应用程序中所需的可见性。通过了解这些规则，你可以确定是在应用程序级别、组件中还是指令中声明提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3cu6l3znx4o88dedsdfsfdh0t\">Angular 中有两个注入器层次结构：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"147s1t1d0pdjqv8azitzj5b7p\">注入器层次结构</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6165ro06qth3wpm77r0per7ag\"><code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 层次结构</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mf5aq93iw8mfpi37kwoh6o9t\">使用 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 或 \n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> 中的 \n<code>providers</code> 数组来配置此层次结构中的 \n<code>ElementInjector</code>。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95m6e9joifb3a1tjcoebp7o92\"><code>ElementInjector</code> 层次结构</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqs8mvquxd7ftw19qz7yc38qh\">在每个 DOM 元素上隐式创建。默认情况下，除非在 \n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 或 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 中的 \n<code>providers</code> 属性中配置，否则 \n<code>ElementInjector</code> 为空。</td>\n</tr>\n</tbody>\n</table>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ayw1p46ddubfv9yb4na44vxb\">基于 NgModule 的应用程序</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbtpjcgc74ymqofo0kysqi5t8\">对于基于 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的应用程序，可以使用 \n<code>ModuleInjector</code> 层次结构，并使用 \n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 或 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 注释来提供依赖关系。</p>\n</div>\n<p><a id=\"register-providers-injectable\"></a></p>\n<h3 id=\"environmentinjector\"><code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#environmentinjector\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9o3xwvkxslt2ak14e3egpacr\"><code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 可以通过以下两种方式进行配置：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0b3ns1um27kxwrmy96h54e5w\">使用 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的 \n<code>providedIn</code> 属性来引用 \n<code>root</code> 或 \n<code>platform</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5q150nb8nyiqc33iprgwtdq21\"><code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> 的 \n<code>providers</code> 数组</li>\n</ul>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lvx26izqcfou6urvubwlgen7\">摇树优化和 @Injectable()</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9d7rj499idw1w799l9a4aa8x1\">使用 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的 \n<code>providedIn</code> 属性优于使用 \n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> 的 \n<code>providers</code> 数组。通过 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的 \n<code>providedIn</code>，优化工具可以执行摇树优化，从而删除应用程序未使用的服务，使捆绑包大小变小。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54a1jrlznoibwzd1rty4taj5a\">摇树优化对于库特别有用，因为使用该库的应用程序不需要注入它。在 <a href=\"guide/architecture-services\">服务与依赖注入简介</a>了解关于<a href=\"guide/architecture-services#providing-services\">可摇树优化的提供者</a>的更多信息。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bp6prbu0mryuvqxoav56bmbx3\"><code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 由 \n<code><a href=\"api/core/ApplicationConfig#providers\" class=\"code-anchor\">ApplicationConfig.providers</a></code> 配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cso6p2dccanqjpo3wzq6bry6j\">使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的 <code>providedIn</code> 属性提供服务的方式如下：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'  // &lt;--provides this service in the root ElementInjector\n})\nexport class ItemService {\n  name = 'telephone';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"299z6cues6j4fyvulaxaxrvzi\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器标识一个服务类。\n<code>providedIn</code> 属性配置特定的 \n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>，在此处为 \n<code>root</code>，使服务在 \n<code>root</code> 的 \n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 中可用。</p>\n<h3 id=\"moduleinjector\">ModuleInjector<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#moduleinjector\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coyf0sa553lzq5eps35sjb490\">在基于\n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>的应用程序中，可以通过以下两种方式之一配置 ModuleInjector：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0b3ns1um27kxwrmy96h54e5w\">使用 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的 \n<code>providedIn</code> 属性来引用 \n<code>root</code> 或 \n<code>platform</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7voqw0x6ejh0c0r15yxzfwqqc\">使用 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 的 <code>providers</code> 数组</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42rihhjlmluya4kk9y2hs7ud8\"><code>ModuleInjector</code>由\n<code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code>和\n<code><a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code>属性配置。 \n<code>ModuleInjector</code>是通过递归遍历\n<code><a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code>中的所有提供者数组来展开的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"321q4ih7v41sghhcteop9j2qb\">子 <code>ModuleInjector</code> 是在惰性加载其它 <code>@NgModules</code> 时创建的。</p>\n<h3 id=\"platform-injector\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lwh9pmy89yjbcfaleq60cn9l\">平台注入器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#platform-injector\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3p5uou82weuhkktoe9jfrgr6v\">在\n<code>root</code>以上还有两个注入器，一个额外的\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>和\n<code>NullInjector()</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jh7pyzmyolyhbp3sncv709s0\">思考下 Angular 要如何通过 <code>main.ts</code> 中的如下代码引导应用程序：</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\n<a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>(AppComponent, appConfig);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vfi9zishcttkns1f885nc753\"><code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>()</code>方法会创建平台注入器的子注入器，该子注入器由\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>实例配置。这是\n<code>root</code>的\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"guwuies0jh9bn57da52u0j3\"><code><a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>()</code> 方法创建一个由 <code>PlatformModule</code> 配置的注入器，该注入器包含特定平台的依赖项。这允许多个应用共享同一套平台配置。比如，无论你运行多少个应用程序，浏览器都只有一个 URL 栏。你可以使用 <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a>()</code> 函数提供 <code>extraProviders</code>，从而在平台级别配置特定平台的额外提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64z7v1etb3uwru7joc3juhnca\">层次结构中的下一个父注入器是 <code>NullInjector()</code>，它是树的顶部。如果你在树中向上走了很远，以至于要在 <code>NullInjector()</code> 中寻找服务，那么除非使用 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>，否则将收到错误消息，因为最终所有东西都将以 <code>NullInjector()</code> 结束并返回错误，或者对于 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>，返回 <code>null</code>。关于 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> 的更多信息，请参阅本指南的 <a href=\"guide/hierarchical-dependency-injection#optional\"><code>@Optional()</code> 部分</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9d730tax9wit37t8tpmp9l8ss\">下图展示了前面各段落描述的 <code>root</code> <code>ModuleInjector</code> 及其父注入器之间的关系。</p>\n<div class=\"lightbox\">\n<img alt=\"NullInjector, ModuleInjector, root injector\" src=\"generated/images/guide/dependency-injection/injectors.svg\" width=\"483\" height=\"377\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1o52juw3j55vp7nnoz8oykrhi\">虽然名称\n<code>root</code>是一个特殊别名，但其他\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>层次结构没有别名。你可以选择在动态加载组件时创建\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>层次结构，例如使用路由器时，它将创建子\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>层次结构。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e07j0v33vm0dpma49u6bkbrkw\">所有请求都会向上转发到根注入器，无论你是通过\n<code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>()</code>方法传递\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>实例来配置，还是在自己的服务中使用\n<code>root</code>注册所有提供者。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cujcazu1qwiemnv56rwuwf1u3\">@Injectable() vs. ApplicationConfig</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1vdvx9w499oqa59d0i6opmce\">如果在\n<code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code>的\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>中配置了一个全局提供者，则会覆盖\n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code>元数据中为\n<code>root</code>配置的提供者。你可以这样做来配置与多个应用程序共享的服务的非默认提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"124q4r1j7lcklhb97yxib776s\">下面是一个示例，其中组件路由配置包括在\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>的\n<code>providers</code>列表中列出其提供者的非默认\n<a href=\"guide/router#location-strategy\">位置策略</a>。</p>\n<code-example>\n providers: [\n  { provide: <a href=\"api/common/LocationStrategy\" class=\"code-anchor\">LocationStrategy</a>, useClass: <a href=\"api/common/HashLocationStrategy\" class=\"code-anchor\">HashLocationStrategy</a> }\n]\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mkn2l2ahr267idizdwde79ei\">对于基于\n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>的应用程序，在\n<code>AppModule</code>中配置全局提供者。</p>\n</div>\n<h3 id=\"elementinjector\"><code>ElementInjector</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#elementinjector\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22vhtza02ni75us0mojxcajg2\">Angular 会为每个 DOM 元素隐式创建 <code>ElementInjector</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3lruytznzwamgo83qvcjza5fn\">可以用 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 装饰器中的 <code>providers</code> 或 <code>viewProviders</code> 属性来配置 <code>ElementInjector</code> 以提供服务。比如，下面的 <code>TestComponent</code> 通过提供此服务来配置 <code>ElementInjector</code>：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  …\n  providers: [{ provide: ItemService, useValue: { name: 'lamp' } }]\n})\nexport class TestComponent\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uw554xhtj9lli7jivq7sw2cv\">请查看\n<a href=\"guide/hierarchical-dependency-injection#resolution-rules\">解析规则</a>部分，以了解\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>树、\n<code>ModuleInjector</code>树和\n<code>ElementInjector</code>树之间的关系。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ibooij33jhiclfnhjudqhupy\">在组件中提供服务时，可以通过 <code>ElementInjector</code> 在该组件实例处使用该服务。根据<a href=\"guide/hierarchical-dependency-injection#resolution-rules\">解析规则</a>部分描述的可见性规则，它也同样在子组件/指令处可见。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tysuedslm2l4w68j5swxun4g\">当组件实例被销毁时，该服务实例也将被销毁。</p>\n<h4 id=\"directive-and-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vrd035p1i8r4xqe6ytyut6e1\"><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 和 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#directive-and-component\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65f49jqq2b5f1nbcrotq8pfyz\">组件是一种特殊类型的指令，这意味着 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 具有 <code>providers</code> 属性，<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 也同样如此。这意味着指令和组件都可以使用 <code>providers</code> 属性来配置提供者。当使用 <code>providers</code> 属性为组件或指令配置提供者时，该提供程商就属于该组件或指令的 <code>ElementInjector</code>。同一元素上的组件和指令共享同一个注入器。</p>\n<p><a id=\"resolution-rules\"></a></p>\n<h2 id=\"resolution-rules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfqi97toy3b7sthtizne81hmg\">解析规则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#resolution-rules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"365hmeplasc3zt4k2k8s7zo2n\">当为组件/指令解析令牌时，Angular 分为两个阶段来解析它：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44b7elj19k46pi6f0qow2mq2c\">针对 <code>ElementInjector</code> 层次结构中它的父级。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5s0bjkvainceqzvckk95czhnh\">与其父级在\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>层次结构中。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dlytnr99pknem077cwt4i4tt\">当组件声明依赖项时，Angular 会尝试使用它自己的 <code>ElementInjector</code> 来满足该依赖。如果组件的注入器缺少提供者，它将把请求传给其父组件的 <code>ElementInjector</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2a7lm5xtwo0vcfhylzkextn10\">这些请求将继续转发，直到 Angular 找到可以处理该请求的注入器或用完祖先 <code>ElementInjector</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ndqrkagh927t2sb1jtspptx9\">如果 Angular 在任何\n<code>ElementInjector</code>层次结构中找不到提供者，它会返回到请求源所在的元素，并在\n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>层次结构中查找。如果 Angular 仍然找不到提供者，它会抛出错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u8ue1zvljbvrw8ctkuuiz5rq\">如果你已在不同级别注册了相同 DI 令牌的提供者，则 Angular 会用遇到的第一个来解析该依赖。比如，如果提供者已经在需要此服务的组件中本地注册了，则 Angular 不会再寻找同一服务的其它提供者。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9j3brwirob71ls3bo02kjqxc9\">对于基于\n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>的应用程序，如果在\n<code>ElementInjector</code>层次结构中找不到提供者，Angular会搜索\n<code>ModuleInjector</code>层次结构。</p>\n</div>\n<h2 id=\"resolution-modifiers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2egzmhelxn2j75or0a9ugv7zb\">解析修饰符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#resolution-modifiers\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nponj72thiwktvezm714xyp4\">可以使用\n<code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>、\n<code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code>、\n<code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>和\n<code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>来修改 Angular 的解析行为。从\n<code>@angular/core</code>导入每个，并在组件类构造函数或\n<code>inject</code>配置中使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hf1cv7ei07idgzhqmxqou3od\">关于展示本节介绍的解析修饰符的可运行应用，请参阅<live-example name=\"resolution-modifiers\">解析修饰符范例</live-example>。</p>\n<h3 id=\"types-of-modifiers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gbas207ptpw5a39uac5bfzux\">修饰符的类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#types-of-modifiers\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7b516yfeyfj8b0k0f367u1syt\">解析修饰符分为三类：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lus4oo5z9ndrdm0gw0fifkgc\">如果 Angular 找不到你要的东西该怎么办，用 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9afelsq9wdjqfmj9iuwwmfmly\">从哪里开始寻找，用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69cgvrcqhhq0nd5ek4txk8fxj\">到哪里停止寻找，用 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 和 <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79jsgg7a15jve4zwj1ldm9rvh\">默认情况下，Angular 始终从当前的 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 开始，并一直向上搜索。修饰符使你可以更改开始（默认是自己）或结束位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tnfazf26dpqz2d9v8a8c71ag\">此外，你可以组合所有修饰符，除了：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44pss5zhiyyjjmlxrvf508tf0\"><code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>和\n<code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"525gbs8ye5x0yvdjbaxjshk34\"><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>和\n<code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code></li>\n</ul>\n<p><a id=\"optional\"></a></p>\n<h3 id=\"optional\"><code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#optional\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"u8udo69fxwitzbp10l3rpbqb\"><code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>允许 Angular 将你注入的服务视为可选的。这样，如果在运行时无法解析服务，Angular会将服务解析为\n<code>null</code>，而不是抛出错误。在以下示例中，服务\n<code>OptionalService</code>没有在服务、\n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>、\n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code>或组件类中提供，因此在应用程序中无法使用。</p>\n<code-example header=\"src/app/optional/optional.component.ts\" path=\"resolution-modifiers/src/app/optional/optional.component.ts\" region=\"optional-component\">\nexport class OptionalComponent {\n  constructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() public optional?: OptionalService) {}\n}\n\n</code-example>\n<h3 id=\"self\"><code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#self\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cru489o4p23hrbcaiet9u70eh\">使用 <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> 让 Angular 仅查看当前组件或指令的 <code>ElementInjector</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sqrhhy4f79v2qubn5xfau4nk\"><code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> 的一个好例子是要注入某个服务，但只有当该服务在当前宿主元素上可用时才行。为了避免这种情况下出错，请将 <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> 与 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> 结合使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5v22t5f0gxhczx1bhe9svo9ih\">比如，在下面的 <code>SelfComponent</code> 中。请注意在构造函数中注入的 <code>LeafService</code>。</p>\n<code-example header=\"src/app/self-no-data/self-no-data.component.ts\" path=\"resolution-modifiers/src/app/self-no-data/self-no-data.component.ts\" region=\"self-no-data-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-self-no-data',\n  templateUrl: './self-no-data.component.html',\n  styleUrls: ['./self-no-data.component.css']\n})\nexport class SelfNoDataComponent {\n  constructor(@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>() @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() public leaf?: LeafService) { }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ei70emsuimcsigsvhn0itvjg2\">在这个示例中，有一个父级提供者，注入该服务将返回该值，但使用\n<code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code>和\n<code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>注入服务将返回\n<code>null</code>，因为\n<code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code>告诉注入器只在当前主机元素中搜索。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mfm4879806ybhd1bn0qunngy\">另一个范例显示了具有 <code>FlowerService</code> 提供者的组件类。在这个例子中，注入器没有超出当前 <code>ElementInjector</code> 就停止了，因为它已经找到了 <code>FlowerService</code> 并返回了郁金香<code>🌷</code>。</p>\n<code-example header=\"src/app/self/self.component.ts\" path=\"resolution-modifiers/src/app/self/self.component.ts\" region=\"self-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-self',\n  templateUrl: './self.component.html',\n  styleUrls: ['./self.component.css'],\n  providers: [{ provide: FlowerService, useValue: { emoji: '🌷' } }]\n})\nexport class SelfComponent {\n  constructor(@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>() public flower: FlowerService) {}\n}\n\n</code-example>\n<h3 id=\"skipself\"><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#skipself\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kq602pzafjakosfqu8fbh0ue\"><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 与 <code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> 相反。使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>，Angular 在父 <code>ElementInjector</code> 中而不是当前 <code>ElementInjector</code> 中开始搜索服务。因此，如果父 <code>ElementInjector</code> 对 <code>emoji</code> 使用了值 <code>🌿</code>（蕨类），但组件的 <code>providers</code> 数组中有 <code>🍁</code>（枫叶），则 Angular 将忽略 <code>🍁</code>（枫叶），而使用 <code>🌿</code>（蕨类）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ogx2jk8qq2cgv329aqesf47s\">要在代码中看到这一点，请先假定 <code>emoji</code> 的以下值就是父组件正在使用的值，如本服务所示：</p>\n<code-example header=\"src/app/leaf.service.ts\" path=\"resolution-modifiers/src/app/leaf.service.ts\" region=\"leafservice\">\nexport class LeafService {\n  emoji = '🌿';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5g6yj03j21h9m0ihwwhnjv06\">想象一下，在子组件中，你有一个不同的值 <code>🍁</code>（枫叶），但你想使用父项的值。你就要使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>：</p>\n<code-example header=\"src/app/skipself/skipself.component.ts\" path=\"resolution-modifiers/src/app/skipself/skipself.component.ts\" region=\"skipself-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-skipself',\n  templateUrl: './skipself.component.html',\n  styleUrls: ['./skipself.component.css'],\n  // Angular would ignore this LeafService instance\n  providers: [{ provide: LeafService, useValue: { emoji: '🍁' } }]\n})\nexport class SkipselfComponent {\n  // Use @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() in the constructor\n  constructor(@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() public leaf: LeafService) { }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"em6pitweh66vvqac1hifmupkj\">在这个例子中，你获得的 <code>emoji</code> 值将为 <code>🌿</code>（蕨类），而不是 <code>🍁</code>（枫叶）。</p>\n<h4 id=\"skipself-with-optional\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64zue5csavtbxre082m6d9f1i\">合用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 和 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#skipself-with-optional\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck1ebwre5wvm5g99adgq5l6tc\">如果值为 <code>null</code> 请同时使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 和 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> 来防止错误。在下面的范例中，将 <code>Person</code> 服务注入到构造函数中。<code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 告诉 Angular 跳过当前的注入器，如果 <code>Person</code> 服务为 <code>null</code>，则 <code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code> 将防止报错。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nclass Person {\n  constructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() parent?: Person) {}\n}\n\n</code-example>\n<h3 id=\"host\"><code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#host\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b2ybhvdjbde0fwelq42cu7dl\"><code>@<a href=\"api/core/Host\" class=\"code-anchor\">宿主</a>()</code> 允许你将一个组件指定为在搜索提供者时注入器树中的最后一站。 即使在树中有一个更高级别的服务实例，Angular 也不会继续查找。 使用 \n<code>@<a href=\"api/core/Host\" class=\"code-anchor\">宿主</a>()</code> 如下：</p>\n<code-example header=\"src/app/host/host.component.ts\" path=\"resolution-modifiers/src/app/host/host.component.ts\" region=\"host-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-host',\n  templateUrl: './host.component.html',\n  styleUrls: ['./host.component.css'],\n  //  provide the service\n  providers: [{ provide: FlowerService, useValue: { emoji: '🌷' } }],\n  imports: [HostChildComponent]\n})\nexport class HostComponent {\n  // use @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() in the constructor when injecting the service\n  constructor(@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() public flower?: FlowerService) { }\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbyne4fz6g5mhg1wm0ptplpwv\">由于 <code>HostComponent</code> 在其构造函数中具有 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>，因此，无论 <code>HostComponent</code> 的父级是否可能有 <code>flower.emoji</code> 值，该 <code>HostComponent</code> 都将使用 <code>🌷</code>（郁金香）。</p>\n<h2 id=\"logical-structure-of-the-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59jb04926ftj097fcn21102gb\">模板的逻辑结构<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#logical-structure-of-the-template\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egl038v92wl5n9erjp6q55bcg\">在组件类中提供服务时，服务在 <code>ElementInjector</code> 树中的可见性是取决于你在何处以及如何提供这些服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ao0qeldylpzesvtx55qeb1i7d\">了解 Angular 模板的基础逻辑结构将为你配置服务并进而控制其可见性奠定基础。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gtada0qe7otax7diplqq7grg\">组件在模板中使用，如以下范例所示：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root&gt;\n  &lt;app-child&gt;&lt;/app-child&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejmlhdl3wnztbpt926ave65jh\">通常，你会在不同的文件中声明组件及其模板。 为了理解注入系统的工作原理，从组合逻辑树的角度看它们是很有用的。 术语 \n<em>逻辑</em> 与渲染树区分开来，渲染树是你应用的 DOM 树。 为了标记组件模板所在的位置，本指南使用了不存在于渲染树中的伪元素 \n<code>&lt;#VIEW&gt;</code>，仅用于心智模型目的。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kb99dke0crhah203e5cenn63\">下面是如何将 <code>&lt;app-root&gt;</code> 和 <code>&lt;app-child&gt;</code> 视图树组合为单个逻辑树的范例：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root&gt;\n  &lt;#VIEW&gt;\n    &lt;app-child&gt;\n     &lt;#VIEW&gt;\n       …content goes here…\n     &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6s70mba7nvrspr2jog1pykqf9\">当你在组件类中配置服务时，了解这种 <code>&lt;#VIEW&gt;</code> 划界的思想尤其重要。</p>\n<h2 id=\"providing-services-in-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vqvq4dk33m7tguz8ffxyak15\">在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 中提供服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#providing-services-in-component\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bywjkpm5c06bd4zw2eyweonl5\">你如何通过 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code>（或 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code>）装饰器提供服务决定了它们的可见性。以下各节演示了 <code>providers</code> 和 <code>viewProviders</code> 以及使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 和 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 修改服务可见性的方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ae30ufymtxpbzttemvnq7fg1n\">组件类可以通过两种方式提供服务：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f41igu4yqvhd69slfy59wpgem\">数组</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab9knis0b0ql98g4fw7g9a8ds\">使用 \n<code>providers</code> 数组</td>\n<td align=\"left\"><code-example format=\"typescript\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ \n&nbsp; … \n&nbsp; providers: [ \n&nbsp;&nbsp;&nbsp; {provide: FlowerService, useValue: {emoji: '🌺'}} \n&nbsp; ] \n}) </code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ccu3xwpusklj1em7xe65gl9of\">使用 \n<code>viewProviders</code> 数组</td>\n<td align=\"left\"><code-example format=\"typescript\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ \n&nbsp; … \n&nbsp;viewProviders: [ \n&nbsp;&nbsp;&nbsp; {provide: AnimalService, useValue: {emoji: '🐶'}} \n&nbsp; ] \n}) </code-example></td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jiyrgi5kfjemhejkvuitkj1q\">为了解 <code>providers</code> 和 <code>viewProviders</code> 对服务可见性的影响有何差异，以下各节将逐步构建一个 <live-example name=\"providers-viewproviders\"></live-example> 并在代码和逻辑树中比较 <code>providers</code> 和 <code>viewProviders</code> 的作用。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"813ozyiwqeonkxrbsrbkxsx5f\">在逻辑树中，你会发现 \n<code>@Provide</code>、\n<code>@<a href=\"api/core/Inject\" class=\"code-anchor\">注入</a></code> 和 \n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code>，它们不是真正的 HTML 属性，而是用来展示底层原理的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14g9m4gnywr411lz3b95ozfy1\">Angular 服务属性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(Token)=&gt;Value </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2c83evg1c6suxawcr83qk3ods\">演示了如果在逻辑树中的这个位置注入 \n<code>Token</code>，其值将是 \n<code>Value</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @Provide(Token=Value) </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ceaepek1qcr6v21gkvxk5azm\">演示了在逻辑树中的这个位置声明了一个带有值 \n<code>Value</code> 的 \n<code>Token</code> 提供者。</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>(Token) </code-example></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgiy4dpgghqs7su14fw2c20he\">演示了应在这个位置使用一个后备 \n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"example-app-structure\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axj3kp7kglb9ewex3242edste\">应用程序结构范例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#example-app-structure\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uuw6tcj4vda6bv5u65lh046u\">范例应用程序的 <code>root</code> 提供了 <code>FlowerService</code>，其 <code>emoji</code> 值为 <code>🌺</code>（红色芙蓉）。</p>\n<code-example header=\"src/app/flower.service.ts\" path=\"providers-viewproviders/src/app/flower.service.ts\" region=\"flowerservice\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class FlowerService {\n  emoji = '🌺';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95nz0yhmomd9rl39fadk1j1an\">考虑一个只有 <code>AppComponent</code> 和 <code>ChildComponent</code> 的简单应用程序。最基本的渲染视图看起来就像嵌套的 HTML 元素，比如：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root&gt; &lt;!-- AppComponent selector --&gt;\n    &lt;app-child&gt; &lt;!-- ChildComponent selector --&gt;\n    &lt;/app-child&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3l40g3o9pzua8wk1j8m6k9sb\">但是，在幕后，Angular 在解析注入请求时使用如下逻辑视图表示形式：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root&gt; &lt;!-- AppComponent selector --&gt;\n    &lt;#VIEW&gt;\n        &lt;app-child&gt; &lt;!-- ChildComponent selector --&gt;\n            &lt;#VIEW&gt;\n            &lt;/#VIEW&gt;\n        &lt;/app-child&gt;\n    &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efh86lmqxrx3csf06nx2qrhek\">此处的 <code>&lt;#VIEW&gt;</code> 表示模板的实例。请注意，每个组件都有自己的 <code>&lt;#VIEW&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beqmqzrflgw2dx82ui9fh3bzt\">了解此结构可以告知你如何提供和注入服务，并完全控制服务的可见性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gcmfz84wsmia7x3vl2s7m9dm\">现在，考虑 <code>&lt;app-root&gt;</code> 只注入了 <code>FlowerService</code>：</p>\n<code-example header=\"src/app/app.component.ts\" path=\"providers-viewproviders/src/app/app.component.1.ts\" region=\"injection\">\nexport class AppComponent  {\n  constructor(public flower: FlowerService) {}\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxcfosl5qixut93xvefzt1uuk\">将绑定添加到 <code>&lt;app-root&gt;</code> 模板来将结果可视化：</p>\n<code-example header=\"src/app/app.component.html\" path=\"providers-viewproviders/src/app/app.component.html\" region=\"binding-flower\">\n&lt;p&gt;Emoji from FlowerService: {{flower.emoji}}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ujblhupw1ch9kvbiy3xu92p\">该视图中的输出为：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nEmoji from FlowerService: 🌺\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8h064awkt70nktzbn249fj9qa\">在逻辑树中，可以把它表示成这样：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService) flower=&gt;\"🌺\"&gt;\n  &lt;#VIEW&gt;\n    &lt;p&gt;Emoji from FlowerService: {{flower.emoji}} (🌺)&lt;/p&gt;\n    &lt;app-child&gt;\n      &lt;#VIEW&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d167fmz2nalsyon68lcxkvrj5\">当 <code>&lt;app-root&gt;</code> 请求 <code>FlowerService</code> 时，注入器的工作就是解析 <code>FlowerService</code> 令牌。令牌的解析分为两个阶段：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2p58d8rsiog1cp1zn1bfs9la1\">注入器确定逻辑树中搜索的开始位置和结束位置。注入程序从起始位置开始，并在逻辑树的每个级别上查找令牌。如果找到令牌，则将其返回。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40zh8qap6c0nhyh9f8vnz1ea7\">如果找不到令牌，注入器会查找最近的父级 \n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 来委派请求。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hzn7jm4g6nquqetgpinc867s\">在这个例子中，约束为：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"709jw0ps3c2n0htgj7z01m83p\">从属于 <code>&lt;app-root&gt;</code> 的 <code>&lt;#VIEW&gt;</code> 开始，并结束于 <code>&lt;app-root&gt;</code>。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmg4dwi3d3z8illtf17u07vwv\">通常，搜索的起点就是注入点。但是，在这个例子中，<code>&lt;app-root&gt;</code> <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 的特殊之处在于它们还包括自己的 <code>viewProviders</code>，这就是为什么搜索从 <code>&lt;app-root&gt;</code> 的 <code>&lt;#VIEW&gt;</code> 开始的原因。对于匹配同一位置的指令，情况却并非如此。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"379sq2qa92gc7s1vpo5r7jopr\">结束位置恰好与组件本身相同，因为它就是此应用程序中最顶层的组件。</p>\n</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rj3mnegypvm0trle71aoqoe2\">由 \n<code><a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a></code> 提供的 \n<code>ElementInjector</code> 在注入令牌无法在 \n<code>ElementInjector</code> 层次结构中找到时作为后备注入器。</p>\n</li>\n</ol>\n<h3 id=\"using-the-providers-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tjga6cybgglm6ep9b4d5o8p5\">使用 <code>providers</code> 数组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#using-the-providers-array\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2ostbk69ynjnpd3fejxqo206\">现在，在 <code>ChildComponent</code> 类中，为 <code>FlowerService</code> 添加一个提供者，以便在接下来的小节中演示更复杂的解析规则：</p>\n<code-example header=\"src/app/child.component.ts\" path=\"providers-viewproviders/src/app/child/child.component.1.ts\" region=\"flowerservice\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  templateUrl: './child.component.html',\n  styleUrls: ['./child.component.css'],\n  // use the providers array to provide a service\n  providers: [{ provide: FlowerService, useValue: { emoji: '🌻' } }]\n})\n\nexport class ChildComponent {\n  // inject the service\n  constructor( public flower: FlowerService) { }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tg8gnfb6f9zfus3ny9vt1mix\">现在，在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 装饰器中提供了 <code>FlowerService</code>，当 <code>&lt;app-child&gt;</code> 请求该服务时，注入器仅需要查找 <code>&lt;app-child&gt;</code> 中的 <code>ElementInjector</code>。不必再通过注入器树继续搜索。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8wy87z139ugroav4ghnh6594m\">下一步是将绑定添加到 <code>ChildComponent</code> 模板。</p>\n<code-example header=\"src/app/child.component.html\" path=\"providers-viewproviders/src/app/child/child.component.html\" region=\"flower-binding\">\n&lt;p&gt;Emoji from FlowerService: {{flower.emoji}}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77odpuxoaj8rk1u2nljuj2rn3\">要渲染新的值，请在 <code>AppComponent</code> 模板的底部添加 <code>&lt;app-child&gt;</code>，以便其视图也显示向日葵：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nChild Component\nEmoji from FlowerService: 🌻\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d8j8apvu9jv5e8hqx01fod7a2\">在逻辑树中，可以把它表示成这样：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService) flower=&gt;\"🌺\"&gt;\n  &lt;#VIEW&gt;\n    &lt;p&gt;Emoji from FlowerService: {{flower.emoji}} (🌺)&lt;/p&gt;\n    &lt;app-child @Provide(FlowerService=\"🌻\")\n               @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService)=&gt;\"🌻\"&gt; &lt;!-- search ends here --&gt;\n      &lt;#VIEW&gt; &lt;!-- search starts here --&gt;\n        &lt;h2&gt;Child <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>&lt;/h2&gt;\n        &lt;p&gt;Emoji from FlowerService: {{flower.emoji}} (🌻)&lt;/p&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzlw8n8sp9x6z7uzmvw9crxkh\">当 <code>&lt;app-child&gt;</code> 请求 <code>FlowerService</code> 时，注入器从 <code>&lt;app-child&gt;</code> 的 <code>&lt;#VIEW&gt;</code> 开始搜索（包括 <code>&lt;#VIEW&gt;</code>，因为它是从 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 注入的），并到 <code>&lt;app-child&gt;</code> 结束。在这个例子中，<code>FlowerService</code> 在 <code>&lt;app-child&gt;</code> 的 <code>providers</code> 数组中解析为向日葵🌻。注入器不必在注入器树中进一步查找。一旦找到 <code>FlowerService</code>，它便停止运行，再也看不到🌺（红芙蓉）。</p>\n<p><a id=\"use-view-providers\"></a></p>\n<h3 id=\"using-the-viewproviders-array\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dg3ozvt1tncll2jzb76aag02h\">使用 <code>viewProviders</code> 数组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#using-the-viewproviders-array\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31fqbdrgciuh3y1pqnvqzdzy1\">使用 <code>viewProviders</code> 数组是在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 装饰器中提供服务的另一种方法。使用 <code>viewProviders</code> 使服务在 <code>&lt;#VIEW&gt;</code> 中可见。</p>\n<div class=\"is-helpful alert\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aq0tdecrbsvk1xhyf2t1ydomd\">除了使用 <code>viewProviders</code> 数组外，其它步骤与使用 <code>providers</code> 数组相同。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5j32y041rfoutrfwjcveppyrm\">关于这些步骤的说明，请继续本节。如果你可以自行设置，请跳至<a href=\"guide/hierarchical-dependency-injection#modify-visibility\">修改服务可用性</a> 一节。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yrd7sk5vkyajo42vaob016dg\">该范例应用程序具有第二个服务 <code>AnimalService</code> 来演示 <code>viewProviders</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5x5u4mrt0jcrjtsd7smvjpale\">首先，创建一个 <code>AnimalService</code> 与 <code>emoji</code> 的🐳（鲸鱼）属性：</p>\n<code-example header=\"src/app/animal.service.ts\" path=\"providers-viewproviders/src/app/animal.service.ts\" region=\"animal-service\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class AnimalService {\n  emoji = '🐳';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6azw4saubnmwone3xhnrk1a2k\">遵循与 <code>FlowerService</code> 相同的模式，将 <code>AnimalService</code> 注入 <code>AppComponent</code> 类：</p>\n<code-example header=\"src/app/app.component.ts\" path=\"providers-viewproviders/src/app/app.component.ts\" region=\"inject-animal-service\">\nexport class AppComponent  {\n  constructor(public flower: FlowerService, public animal: AnimalService) {}\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6icwmjql4imbc2jtar6cwlh4\">你可以保留所有与 \n<code>FlowerService</code> 相关的代码，这样可以与 \n<code>AnimalService</code> 进行比较。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crfsblrhbwislq135pyjq87mn\">添加一个 <code>viewProviders</code> 数组，并将 <code>AnimalService</code> 也注入到 <code>&lt;app-child&gt;</code> 类中，但是给 <code>emoji</code> 一个不同的值。在这里，它的值为🐶（小狗）。</p>\n<code-example header=\"src/app/child.component.ts\" path=\"providers-viewproviders/src/app/child/child.component.ts\" region=\"provide-animal-service\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  templateUrl: './child.component.html',\n  styleUrls: ['./child.component.css'],\n  // provide services\n  providers: [{ provide: FlowerService, useValue: { emoji: '🌻' } }],\n  viewProviders: [{ provide: AnimalService, useValue: { emoji: '🐶' } }],\n  imports: [InspectorComponent]\n})\n\nexport class ChildComponent {\n  // inject service\n  constructor( public flower: FlowerService, public animal: AnimalService) { }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61w7c0vinswzp37hff2f2ybqc\">将绑定添加到 <code>ChildComponent</code> 和 <code>AppComponent</code> 模板。在 <code>ChildComponent</code> 模板中，添加以下绑定：</p>\n<code-example header=\"src/app/child.component.html\" path=\"providers-viewproviders/src/app/child/child.component.html\" region=\"animal-binding\">\n&lt;p&gt;Emoji from AnimalService: {{animal.emoji}}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ns17ixqm3pu2n0en131nqwkn\">此外，将其添加到 <code>AppComponent</code> 模板：</p>\n<code-example header=\"src/app/app.component.html\" path=\"providers-viewproviders/src/app/app.component.html\" region=\"binding-animal\">\n&lt;p&gt;Emoji from AnimalService: {{animal.emoji}}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chidgxebxzzvcjir6nnfpi6e1\">现在，你应该在浏览器中看到两个值：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nAppComponent\nEmoji from AnimalService: 🐳\n\nChild Component\nEmoji from AnimalService: 🐶\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a01qvqeypeglznyuxz1f35x93\">此 <code>viewProviders</code> 范例的逻辑树如下：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n         @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService) animal=&gt;\"🐳\"&gt;\n  &lt;#VIEW&gt;\n    &lt;app-child&gt;\n      &lt;#VIEW @Provide(AnimalService=\"🐶\")\n            @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=&gt;\"🐶\")&gt;\n       &lt;!-- ^^using viewProviders means AnimalService is available in &lt;#VIEW&gt;--&gt;\n       &lt;p&gt;Emoji from AnimalService: {{animal.emoji}} (🐶)&lt;/p&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w3nbanvzlkjc0f212efq309v\">与 <code>FlowerService</code> 范例一样，<code>&lt;app-child&gt;</code> <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 装饰器中提供了 <code>AnimalService</code>。这意味着，由于注入器首先在组件的 <code>ElementInjector</code> 中查找，因此它将找到 <code>AnimalService</code> 的值 🐶（小狗）。它不需要继续搜索 <code>ElementInjector</code> 树，也不需要搜索 <code>ModuleInjector</code>。</p>\n<h3 id=\"providers-vs-viewproviders\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qjctl6lnzlrfuyi6i9npkg2v\"><code>providers</code> 与 <code>viewProviders</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#providers-vs-viewproviders\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1ky7c6vaedf4m7z1navsgsdl\">为了看清 <code>providers</code> 和 <code>viewProviders</code> 的差异，请在范例中添加另一个组件，并将其命名为 <code>InspectorComponent</code>。<code>InspectorComponent</code> 将是 <code>ChildComponent</code> 的子 <code>ChildComponent</code>。在 <code>inspector.component.ts</code> 中，将 <code>FlowerService</code> 和 <code>AnimalService</code> 注入构造函数中：</p>\n<code-example header=\"src/app/inspector/inspector.component.ts\" path=\"providers-viewproviders/src/app/inspector/inspector.component.ts\" region=\"injection\">\nexport class InspectorComponent {\n  constructor(public flower: FlowerService, public animal: AnimalService) { }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"22r9e1l5677k596gssrn9bdx4\">你不需要 <code>providers</code> 或 <code>viewProviders</code> 数组。接下来，在 <code>inspector.component.html</code> 中，从以前的组件中添加相同的 html：</p>\n<code-example header=\"src/app/inspector/inspector.component.html\" path=\"providers-viewproviders/src/app/inspector/inspector.component.html\" region=\"binding\">\n&lt;p&gt;Emoji from FlowerService: {{flower.emoji}}&lt;/p&gt;\n&lt;p&gt;Emoji from AnimalService: {{animal.emoji}}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehbggvrs3db6m0tiw3c6nvxl5\">记得将 \n<code>InspectorComponent</code> 添加到 \n<code>ChildComponent</code> 的 \n<code>imports</code> 数组中。</p>\n<code-example header=\"src/app/child/child.component.ts\" language=\"typescript\" format=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  ...\n  imports: [InspectorComponent]\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5bfb3ujzfp6muyx4phxdte5\">接下来，确保你的 <code>child.component.html</code> 包含以下内容：</p>\n<code-example header=\"src/app/child/child.component.html\" path=\"providers-viewproviders/src/app/child/child.component.html\" region=\"child-component\">\n&lt;p&gt;Emoji from FlowerService: {{flower.emoji}}&lt;/p&gt;\n&lt;p&gt;Emoji from AnimalService: {{animal.emoji}}&lt;/p&gt;\n\n&lt;div class=\"container\"&gt;\n  &lt;h3&gt;Content projection&lt;/h3&gt;\n\t&lt;ng-content&gt;&lt;/ng-content&gt;\n&lt;/div&gt;\n\n&lt;h3&gt;Inside the view&lt;/h3&gt;\n&lt;app-inspector&gt;&lt;/app-inspector&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96gtelpwdzt36002qh99q4lpc\">前两行带有绑定，来自之前的步骤。新的部分是 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 和 <code>&lt;app-inspector&gt;</code>。<code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 允许你投影内容，<code>ChildComponent</code> 模板中的 <code>&lt;app-inspector&gt;</code> 使 <code>InspectorComponent</code> 成为 <code>ChildComponent</code> 的子组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ymrwkr8bl93hja9oykh5ua32\">接下来，将以下内容添加到 <code>app.component.html</code> 中以利用内容投影的优势。</p>\n<code-example header=\"src/app/app.component.html\" path=\"providers-viewproviders/src/app/app.component.html\" region=\"content-projection\">\n&lt;app-child&gt;&lt;app-inspector&gt;&lt;/app-inspector&gt;&lt;/app-child&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3452aiazomml6yumsa9j6qza\">现在，浏览器将渲染以下内容，为简洁起见，省略了前面的范例：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\n//…Omitting previous examples. The following applies to this section.\n\nContent projection: this is coming from content. Doesn't get to see\npuppy because the puppy is declared inside the view only.\n\nEmoji from FlowerService: 🌻\nEmoji from AnimalService: 🐳\n\nEmoji from FlowerService: 🌻\nEmoji from AnimalService: 🐶\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gtvtusvqwtwr4khsvmbjujzp\">这四个绑定说明了 <code>providers</code> 和 <code>viewProviders</code> 之间的区别。由于🐶（小狗）在 <code>&lt;#VIEW&gt;</code> 中声明，因此投影内容不可见。投影的内容中会看到🐳（鲸鱼）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n1pbosxvygbc3wrdpfat6isv\">但是下一部分，<code>InspectorComponent</code> 是 <code>ChildComponent</code> 的子组件，<code>InspectorComponent</code> 在 <code>&lt;#VIEW&gt;</code> 内部，因此当它请求 <code>AnimalService</code> 时，它会看到🐶（小狗）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1natcajzie2d80jkp3v443c1\">逻辑树中的 <code>AnimalService</code> 如下所示：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n         @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService) animal=&gt;\"🐳\"&gt;\n  &lt;#VIEW&gt;\n    &lt;app-child&gt;\n      &lt;#VIEW @Provide(AnimalService=\"🐶\")\n            @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=&gt;\"🐶\")&gt;\n        &lt;!-- ^^using viewProviders means AnimalService is available in &lt;#VIEW&gt;--&gt;\n        &lt;p&gt;Emoji from AnimalService: {{animal.emoji}} (🐶)&lt;/p&gt;\n  \n        &lt;div class=\"container\"&gt;\n          &lt;h3&gt;Content projection&lt;/h3&gt;\n          &lt;app-inspector @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService) animal=&gt;\"🐳\"&gt;\n            &lt;p&gt;Emoji from AnimalService: {{animal.emoji}} (🐳)&lt;/p&gt;\n          &lt;/app-inspector&gt;\n        &lt;/div&gt;\n\n        &lt;app-inspector&gt;\n          &lt;#VIEW @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService) animal=&gt;\"🐶\"&gt;\n            &lt;p&gt;Emoji from AnimalService: {{animal.emoji}} (🐶)&lt;/p&gt;\n          &lt;/#VIEW&gt;\n        &lt;/app-inspector&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72ipbzqwepxbvt68mjtre519j\"><code>&lt;app-inspector&gt;</code> 的投影内容中看到了🐳（鲸鱼），而不是🐶（小狗），因为🐶（小狗）在 <code>&lt;app-child&gt;</code> 的 <code>&lt;#VIEW&gt;</code> 中。如果 <code>&lt;app-inspector&gt;</code> 也位于 <code>&lt;#VIEW&gt;</code> 则只能看到🐶（小狗）。</p>\n<p><a id=\"modify-visibility\"></a></p>\n<h2 id=\"modifying-service-visibility\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7v774xif8024fs7b9cviqrg0h\">修改服务可见性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#modifying-service-visibility\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3foiltfkr9g9e5erkxwgdj0pt\">本节讲的是如何使用可见性修饰符 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>，<code>@<a href=\"api/core/Self\" class=\"code-anchor\">Self</a>()</code> 和 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 来限制 <code>ElementInjector</code> 的开始和结束范围。</p>\n<h3 id=\"visibility-of-provided-tokens\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ex6tc2q4qxk7vmjzdkfljlbtn\">提供者令牌的可见性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#visibility-of-provided-tokens\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asr3qhgc3dt76emc8k3asyr1o\">可见性装饰器影响搜索注入令牌时在逻辑树中开始和结束的位置。为此，要将可见性装饰器放置在注入点，即 <code>constructor()</code>，而不是在声明点。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eage03hjbqspzrsxsk538nmjs\">为了修改该注入器从哪里开始寻找 <code>FlowerService</code>，把 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 加到 <code>&lt;app-child&gt;</code> 的 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code> 声明 <code>FlowerService</code> 中。该声明在 <code>&lt;app-child&gt;</code> 构造函数中，如 <code>child.component.ts</code> 所示：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nconstructor(@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() public flower : FlowerService) { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44wtxa3qiod0ddu5l6azvu9j1\">使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>，<code>&lt;app-child&gt;</code> 注入器不会寻找自身来获取 <code>FlowerService</code>。相反，注入器开始在 <code>&lt;app-root&gt;</code> 的 <code>ElementInjector</code> 中寻找 <code>FlowerService</code>，在那里它什么也没找到。\n然后，它返回到 <code>&lt;app-child&gt;</code> 的 <code>ModuleInjector</code> 并找到🌺（红芙蓉）值，这是可用的，因为 <code>&lt;app-child&gt;</code> <code>ModuleInjector</code> 和 <code>&lt;app-root&gt;</code> <code>ModuleInjector</code> 被展开成了一个 <code>ModuleInjector</code>。因此，UI 将渲染以下内容：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nEmoji from FlowerService: 🌺\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aul9cnhxvks7ck1a0klacyr4g\">在逻辑树中，这种情况可能如下所示：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService) flower=&gt;\"🌺\"&gt;\n  &lt;#VIEW&gt;\n    &lt;app-child @Provide(FlowerService=\"🌻\")&gt;\n      &lt;#VIEW @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService, <a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>)=&gt;\"🌺\"&gt;\n        &lt;!-- With <a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>, the injector looks to the next injector up the tree --&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cycd7ia2k01cf9998laki0n4v\">尽管 <code>&lt;app-child&gt;</code> 提供了🌻（向日葵），但该应用程序渲染了🌺（红色芙蓉），因为 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 导致当前的注入器跳过了自身并寻找其父级。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hnr4q3z8qozxpoz85mct9v3\">如果现在将 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>（以及 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>）添加到了 <code>FlowerService</code> 的 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code>，其结果将为 <code>null</code>。这是因为 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 将搜索的上限限制为 <code>&lt;#VIEW&gt;</code>。这是在逻辑树中的情况：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService) flower=&gt;\"🌺\"&gt;\n  &lt;#VIEW&gt; &lt;!-- end search here with null--&gt;\n    &lt;app-child @Provide(FlowerService=\"🌻\")&gt; &lt;!-- start search here --&gt;\n      &lt;#VIEW @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(FlowerService, @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>, @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>, @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>)=&gt;null&gt;\n      &lt;/#VIEW&gt;\n      &lt;/app-parent&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1v979zq7b7cppqribly33tk3\">在这里，服务及其值是相同的，但是 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 阻止了注入器对 <code>FlowerService</code> 进行任何高于 <code>&lt;#VIEW&gt;</code> 的查找，因此找不到它并返回 <code>null</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88nv3zfisoi51ddxljr08n0i3\">示例应用程序使用了 \n<code>@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>()</code>，这样应用程序就不会抛出错误，但原则是一样的。</p>\n</div>\n<h3 id=\"skipself-and-viewproviders\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwxqo9jigrvnyxxe9f5itrgmm\"><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 和 <code>viewProviders</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#skipself-and-viewproviders\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zooknx1byvx6nfql4x27a6da\">该 <code>&lt;app-child&gt;</code> 目前提供在 <code>viewProviders</code> 数组中提供了值为 🐶（小狗）的 <code>AnimalService</code>。由于注入器只需要查看 <code>&lt;app-child&gt;</code> 的 <code>ElementInjector</code> 中的 <code>AnimalService</code>，它就不会看到🐳（鲸鱼）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0zyst2mimps1mses5dyk8y68\">在 <code>FlowerService</code> 这个例子中，如果将 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 添加到 <code>AnimalService</code> 的构造函数中，则注入器将不在 <code>AnimalService</code> 的当前 <code>&lt;app-child&gt;</code> 的 <code>ElementInjector</code> 中查找 <code>AnimalService</code>。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class ChildComponent {\n\n  // add @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()\n  constructor(@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() public animal : AnimalService) { }\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kbbfd94cpn70crusw7e93y0a\">相反，注入器将从 <code>&lt;app-root&gt;</code> <code>ElementInjector</code> 开始找。请记住，<code>&lt;app-child&gt;</code> 类在 <code>viewProviders</code> 数组中 <code>AnimalService</code> 中提供了🐶（小狗）的值：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  …\n  viewProviders:\n  [{ provide: AnimalService, useValue: { emoji: '🐶' } }]\n  ...\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdhglpwrnlklfs4o8928t53lv\">在 <code>&lt;app-child&gt;</code> 中使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 的逻辑树是这样的：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n          @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=&gt;\"🐳\")&gt;\n  &lt;#VIEW&gt;&lt;!-- search begins here --&gt;\n    &lt;app-child&gt;\n      &lt;#VIEW @Provide(AnimalService=\"🐶\")\n             @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService, <a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>=&gt;\"🐳\")&gt;\n        &lt;!--Add @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a> --&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4orbwp16vvfpgmvr6hsnoc7ff\">在 <code>&lt;app-child&gt;</code> 中使用 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>，注入器就会在 <code>&lt;app-root&gt;</code> 的 <code>ElementInjector</code> 中找到 🐳（鲸）。</p>\n<h3 id=\"host-and-viewproviders\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6me9bvznibd7l29dtyu0bjusz\"><code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 和 <code>viewProviders</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#host-and-viewproviders\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5545uee1ed87huooeupov5xb0\">如果把 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 添加到 <code>AnimalService</code> 的构造函数上，结果就是🐶（小狗），因为注入器会在 <code>&lt;app-child&gt;</code> 的 <code>&lt;#VIEW&gt;</code> 中查找 <code>AnimalService</code> 服务。这里是 <code>&lt;app-child&gt;</code> 类中的 <code>viewProviders</code> 数组和构造函数中的 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code>：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-child',\n  …\n  viewProviders:\n  [{ provide: AnimalService, useValue: { emoji: '🐶' } }]\n  ...\n\n})\nexport class ChildComponent {\n  constructor(@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() public animal : AnimalService) { }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fsxrx1fk28h9dhwyiqej2v86\"><code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 导致注入器开始查找，直到遇到 <code>&lt;#VIEW&gt;</code> 的边缘。</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n          @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=&gt;\"🐳\")&gt;\n  &lt;#VIEW&gt;\n    &lt;app-child&gt;\n      &lt;#VIEW @Provide(AnimalService=\"🐶\")\n             @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService, @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>=&gt;\"🐶\")&gt; &lt;!-- @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a> stops search here --&gt;\n      &lt;/#VIEW&gt;\n    &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bg6j2ulnb30l6h9wnp1knkev8\">将带有第三个动物🦔（刺猬）的 <code>viewProviders</code> 数组添加到 <code>app.component.ts</code> 的 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 元数据中：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: [ './app.component.css' ],\n  viewProviders: [{ provide: AnimalService, useValue: { emoji: '🦔' } }]\n  ...\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yxtak79s5ylb3ru7eg2ty8ki\">接下来，同时把 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 和 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 加在 <code>child.component.ts</code> 中 <code>AnimalService</code> 的构造函数中。这是 <code>&lt;app-child&gt;</code> 构造函数中的 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 和 <code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code>：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class ChildComponent {\n\n  constructor(\n  @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() public animal : AnimalService) { }\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lg90v0ox40fkng7uliao4eso\">当将 \n<code>FlowerService</code>（位于 \n<code>providers</code> 数组中）应用了 \n<code>@<a href=\"api/core/Host\" class=\"code-anchor\">宿主</a>()</code> 和 \n<code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">跳过自身</a>()</code>时，结果是 \n<code>null</code>，因为 \n<code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">跳过自身</a>()</code> 从 \n<code>&lt;app-child&gt;</code> 注入器开始查找，而 \n<code>@<a href=\"api/core/Host\" class=\"code-anchor\">宿主</a>()</code> 在 \n<code>&lt;#VIEW&gt;</code> 处停止查找 —— 在那里没有 \n<code>FlowerService</code>。 在逻辑树中，你可以看到 \n<code>FlowerService</code> 在 \n<code>&lt;app-child&gt;</code> 中可见，而不在其 \n<code>&lt;#VIEW&gt;</code> 中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16ks27n97zbbhjlft8st8g4vg\">不过，提供在 <code>AppComponent</code> 的 <code>viewProviders</code> 数组中的 <code>AnimalService</code>，是可见的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"89c01wc1vq67185ooyeuh6mb2\">逻辑树表示法说明了为何如此：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;app-root <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a>\n        @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService=&gt;\"🐳\")&gt;\n  &lt;#VIEW @Provide(AnimalService=\"🦔\")\n         @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService, @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>)=&gt;\"🦔\"&gt;\n    &lt;!-- ^^@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>() starts here,  @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>() stops here^^ --&gt;\n    &lt;app-child&gt;\n      &lt;#VIEW @Provide(AnimalService=\"🐶\")\n             @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(AnimalService, @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>, @<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>, @<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>)=&gt;\"🦔\"&gt;\n               &lt;!-- Add @<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a> ^^--&gt;\n      &lt;/#VIEW&gt;\n      &lt;/app-child&gt;\n  &lt;/#VIEW&gt;\n&lt;/app-root&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rzeajeor6m39ua90vrfkhgix\"><code>@<a href=\"api/core/SkipSelf\" class=\"code-anchor\">SkipSelf</a>()</code> 导致注入器从 <code>&lt;app-root&gt;</code> 而不是 <code>&lt;app-child&gt;</code> 处开始对 <code>AnimalService</code> 进行搜索，而 <code>@<a href=\"api/core/Host\" class=\"code-anchor\">Host</a>()</code> 会在 <code>&lt;app-root&gt;</code> 的 <code>&lt;#VIEW&gt;</code> 处停止搜索。\n由于 <code>AnimalService</code> 是通过 <code>viewProviders</code> 数组提供的，因此注入程序会在 <code>&lt;#VIEW&gt;</code> 找到🦔（刺猬）。</p>\n<p><a id=\"component-injectors\"></a></p>\n<h2 id=\"elementinjector-use-case-examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2v4lo1obqkyr6w8652rhtkl6i\"><code>ElementInjector</code> 用例范例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#elementinjector-use-case-examples\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sovehe66pzgtxyz8433jkvx3\">在不同级别配置一个或多个提供者的能力开辟了很有用的可能性。要查看正在运行的应用中的以下情况，请参阅<live-example>英雄范例</live-example>。</p>\n<h3 id=\"scenario-service-isolation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aobumz97mlirkdbbqpjdtzt4j\">场景：服务隔离<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#scenario-service-isolation\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12lqayaz16qagk74r7ntty70s\">出于架构方面的考虑，可能会让你决定把一个服务限制到只能在它所属的那个应用域中访问。比如，这个例子中包括一个用于显示反派列表的 <code>VillainsListComponent</code>，它会从 <code>VillainsService</code> 中获得反派列表数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tgs39ow6s2v472msqtzq6hxy\">如果你在根模块 <code>AppModule</code> 中（也就是你注册 <code>HeroesService</code> 的地方）提供 <code>VillainsService</code>，就会让应用中的任何地方都能访问到 <code>VillainsService</code>，包括针对英雄的工作流。如果你稍后修改了 <code>VillainsService</code>，就可能破坏了英雄组件中的某些地方。在根模块 <code>AppModule</code> 中提供该服务将会引入此风险。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5at65z2ua5p1yqimtqpzrrm8f\">该怎么做呢？你可以在 <code>VillainsListComponent</code> 的 <code>providers</code> 元数据中提供 <code>VillainsService</code>，就像这样：</p>\n<code-example header=\"src/app/villains-list.component.ts (metadata)\" path=\"hierarchical-dependency-injection/src/app/villains-list.component.ts\" region=\"metadata\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-villains-list',\n  templateUrl: './villains-list.component.html',\n  providers: [ VillainsService ],\n  imports: [ <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>, <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a> ]\n})\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2a35ndxs17hkqjz5du7zsv02\">在 <code>VillainsListComponent</code> 的元数据中而不是其它地方提供 <code>VillainsService</code> 服务，该服务就会只在 <code>VillainsListComponent</code> 及其子组件树中可用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9q7dzv7qwd9xouq48sgg0yogx\"><code>VillainService</code> 对于 <code>VillainsListComponent</code> 来说是单例的，因为它就是在这里声明的。只要 <code>VillainsListComponent</code> 没有销毁，它就始终是 <code>VillainService</code> 的同一个实例。但是对于 <code>VillainsListComponent</code> 的多个实例，每个 <code>VillainsListComponent</code> 的实例都会有自己的 <code>VillainService</code> 实例。</p>\n<h3 id=\"scenario-multiple-edit-sessions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2w92sf2uzrfd7wgusr5x22bfo\">场景：多重编辑会话<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#scenario-multiple-edit-sessions\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"820kruu1nf6ae68tg6qgoc13u\">很多应用允许用户同时进行多个任务。比如，在纳税申报应用中，申报人可以打开多个报税单，随时可能从一个切换到另一个。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8juqilzux46ipnakf65gkv2bw\">为了演示这种场景，假设有一个显示超级英雄列表的外部 <code>HeroListComponent</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2i9h71u2uocfeu4xzpx4khswy\">要打开一个英雄的报税单，申报者点击英雄名，它就会打开一个组件来编辑那个申报单。每个选中的申报单都会在自己的组件中打开，并且可以同时打开多个申报单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7mhq0qmq3dndr8qhu8rnkjj3\">每个报税单组件都有下列特征：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nj47t1poyo0mbdehfkpdyzs3\">属于它自己的报税单会话</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dgqm8tnjpbn0cy508zcfenlw2\">可以修改一个报税单，而不会影响另一个组件中的申报单</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ttabqgzlwasvqzmnqiyuoqll\">能把所做的修改保存到它的报税单中，或者放弃它们</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"Heroes in action\" src=\"generated/images/guide/dependency-injection/hid-heroes-anim.gif\" width=\"500\" height=\"384\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"697lr9cgkwtk703e66lvksg4t\">假设 <code>HeroTaxReturnComponent</code> 还有一些管理并还原这些更改的逻辑。这对于简单的报税单来说是很容易的。不过，在现实世界中，报税单的数据模型非常复杂，对这些修改的管理可能不得不投机取巧。你可以把这种管理任务委托给一个辅助服务，就像这个例子中所做的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2x4sodg66dyahxaeerxpcs4wj\">报税单服务 HeroTaxReturnService 缓存了单条 HeroTaxReturn，用于跟踪那个申报单的变更，并且可以保存或还原它。它把后两项职责委托给了全应用级的单例服务 HeroService，HeroService 是通过依赖注入机制取得的。</p>\n<code-example header=\"src/app/hero-tax-return.service.ts\" path=\"hierarchical-dependency-injection/src/app/hero-tax-return.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HeroTaxReturn } from './hero';\nimport { HeroesService } from './heroes.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroTaxReturnService {\n  private currentTaxReturn!: HeroTaxReturn;\n  private originalTaxReturn!: HeroTaxReturn;\n\n  constructor(private heroService: HeroesService) { }\n\n  set taxReturn(htr: HeroTaxReturn) {\n    this.originalTaxReturn = htr;\n    this.currentTaxReturn  = htr.clone();\n  }\n\n  get taxReturn(): HeroTaxReturn {\n    return this.currentTaxReturn;\n  }\n\n  restoreTaxReturn() {\n    this.taxReturn = this.originalTaxReturn;\n  }\n\n  saveTaxReturn() {\n    this.taxReturn = this.currentTaxReturn;\n    this.heroService.saveTaxReturn(this.currentTaxReturn).subscribe();\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2h1war6f33s9aepvoko7kwy7\">下面是正在使用 <code>HeroTaxReturnService</code> 的 <code>HeroTaxReturnComponent</code> 组件。</p>\n<code-example header=\"src/app/hero-tax-return.component.ts\" path=\"hierarchical-dependency-injection/src/app/hero-tax-return.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a> } from '@angular/core';\nimport { HeroTaxReturn } from './hero';\nimport { HeroTaxReturnService } from './hero-tax-return.service';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-hero-tax-return',\n  templateUrl: './hero-tax-return.component.html',\n  styleUrls: [ './hero-tax-return.component.css' ],\n  providers: [ HeroTaxReturnService ],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3se4vzea4zspzhvt8ywo8rhc\">通过 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性可以得到<em>要编辑的报税单</em>，这个属性被实现成了读取器（getter）和设置器（setter）。设置器根据传进来的报税单初始化了组件自己的 <code>HeroTaxReturnService</code> 实例。读取器总是返回该服务所存英雄的当前状态。组件也会请求该服务来保存或还原这个报税单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2kkssg3617r4icsro99enq2y\">但如果该服务是一个全应用范围的单例就不行了。每个组件就都会共享同一个服务实例，每个组件也都会覆盖属于其它英雄的报税单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oj4yiisksbo7ygllj9fud22z\">要防止这一点，就要在 <code>HeroTaxReturnComponent</code> 元数据的 <code>providers</code> 属性中配置组件级的注入器，来提供该服务。</p>\n<code-example header=\"src/app/hero-tax-return.component.ts (providers)\" path=\"hierarchical-dependency-injection/src/app/hero-tax-return.component.ts\" region=\"providers\">\nproviders: [ HeroTaxReturnService ],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ddsnvowdgdnyjfxyhp91ji0es\"><code>HeroTaxReturnComponent</code> 有它自己的 <code>HeroTaxReturnService</code> 提供者。\n回忆一下，每个组件的<em>实例</em>都有它自己的注入器。\n在组件级提供服务可以确保组件的<em>每个</em>实例都得到一个自己的、私有的服务实例。这可以确保报税单不会被意外覆盖。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bimqfltovmme25pvnjqda52jq\">该场景代码中的其它部分依赖另一些 Angular 的特性和技术，你将会在本文档的其它章节学到。\n你可以到<live-example></live-example>查看代码和下载它。</p>\n</div>\n<h3 id=\"scenario-specialized-providers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bu80yjgzs1u1i4uljokemu1j1\">场景：专门的提供者<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#scenario-specialized-providers\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arr0fm3ajeat8lz75cjdzynn2\">在其它层级重新提供服务的另一个理由，是在组件树的深层中把该服务替换为一个<em>更专门化的</em>实现。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zuytvfcjc56r2ppjp943a2h6\">例如，考虑一个包含轮胎服务信息并依赖其它服务来提供有关汽车的更多详细信息的 <code>Car</code> 组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tpvxgjgyyvzawpq2ydp8wl7v\">标记为 （A） 的根注入器使用<em>通用</em>提供者来获取有关 <code>CarService</code> 和 <code>EngineService</code> 的详细信息。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"auowlkicmf2u5ycgaz1d6me5j\"><code>Car</code> 组件（A）。组件 （A） 显示有关汽车的轮胎服务数据，并指定通用服务以提供有关汽车的更多信息。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4az5ykiohmgidwj4tzuq3v9y\">子组件（B）。组件（B）为 <code>CarService</code> 和 <code>EngineService</code> 定义了自己的<em>特化的</em>提供者，它们具有适合组件 （B） 中发生的事情的特殊能力。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kbvdey8i2i8oo27tl426l3wh\">子组件（C）作为组件（B）的子组件。组件 （C） 为 <code>CarService</code> 定义了自己的、<em>更加特化</em>的提供者。</p>\n</li>\n</ol>\n<div class=\"lightbox\">\n<img alt=\"car components\" src=\"generated/images/guide/dependency-injection/car-components.png\" width=\"338\" height=\"201\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3e7wcdupc8jgdgeojkhgbedf\">在幕后，每个组件都有自己的注入器，这个注入器带有为组件本身准备的 0 个、1 个或多个提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awzfvl1qpetnhuu2l3or63yr6\">当你在最深的组件 （C） 处解析 <code>Car</code> 实例时，其注入器会生成：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7uir5v27f1uvu9jy5wtgkupe\">由注入器 （C） 解析的 <code>Car</code> 实例</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"er92vwvtvfe726tg4sb9mbn9y\">由注入器 （B） 解析的 <code>Engine</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9h7bk7bbjsm9nbyq9vjjf50wt\">它的 <code>Tires</code> 由根注入器 （A） 解析。</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"car injector tree\" src=\"generated/images/guide/dependency-injection/injector-tree.png\" width=\"600\" height=\"248\">\n</div>\n<h2 id=\"more-on-dependency-injection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4r394oxtaippr99nlg58bkq34\">关于依赖注入的更多知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#more-on-dependency-injection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rzo4py4kmjkngx6sns7tzjgi\">要了解关于 Angular 依赖注入的更多信息，参阅 <a href=\"guide/dependency-injection-providers\">DI 提供者</a>和 <a href=\"guide/dependency-injection-in-action\">DI 实战</a> 两章。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Wed Sep 06 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - errors/NG0200\n - guide/dependency-injection\n - guide/dependency-injection-navtree\n - guide/dependency-injection-overview\n - guide/devtools\n - guide/example-apps-list\n - guide/glossary\n - guide/ngmodule-faq\n - guide/providers\n - guide/template-expression-operators\n - guide/upgrade\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/HashLocationStrategy\n - api/common/LocationStrategy\n - api/common/NgFor\n - api/core/ApplicationConfig\n - api/core/ApplicationConfig#providers\n - api/core/Component\n - api/core/Directive\n - api/core/EnvironmentInjector\n - api/core/EventEmitter\n - api/core/Host\n - api/core/Inject\n - api/core/Injectable\n - api/core/Injector\n - api/core/Input\n - api/core/NgModule\n - api/core/NgModule#imports\n - api/core/NgModule#providers\n - api/core/Optional\n - api/core/Output\n - api/core/Self\n - api/core/SkipSelf\n - api/core/ng-content\n - api/forms/FormsModule\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/bootstrapApplication\n - api/platform-browser/platformBrowser\n - guide/architecture-services\n - guide/architecture-services#providing-services\n - guide/dependency-injection-in-action\n - guide/dependency-injection-providers\n - guide/hierarchical-dependency-injection#directive-and-component\n - guide/hierarchical-dependency-injection#elementinjector\n - guide/hierarchical-dependency-injection#elementinjector-use-case-examples\n - guide/hierarchical-dependency-injection#environmentinjector\n - guide/hierarchical-dependency-injection#example-app-structure\n - guide/hierarchical-dependency-injection#hierarchical-injectors\n - guide/hierarchical-dependency-injection#host\n - guide/hierarchical-dependency-injection#host-and-viewproviders\n - guide/hierarchical-dependency-injection#logical-structure-of-the-template\n - guide/hierarchical-dependency-injection#modify-visibility\n - guide/hierarchical-dependency-injection#modifying-service-visibility\n - guide/hierarchical-dependency-injection#moduleinjector\n - guide/hierarchical-dependency-injection#more-on-dependency-injection\n - guide/hierarchical-dependency-injection#optional\n - guide/hierarchical-dependency-injection#platform-injector\n - guide/hierarchical-dependency-injection#providers-vs-viewproviders\n - guide/hierarchical-dependency-injection#providing-services-in-component\n - guide/hierarchical-dependency-injection#resolution-modifiers\n - guide/hierarchical-dependency-injection#resolution-rules\n - guide/hierarchical-dependency-injection#scenario-multiple-edit-sessions\n - guide/hierarchical-dependency-injection#scenario-service-isolation\n - guide/hierarchical-dependency-injection#scenario-specialized-providers\n - guide/hierarchical-dependency-injection#self\n - guide/hierarchical-dependency-injection#skipself\n - guide/hierarchical-dependency-injection#skipself-and-viewproviders\n - guide/hierarchical-dependency-injection#skipself-with-optional\n - guide/hierarchical-dependency-injection#types-of-injector-hierarchies\n - guide/hierarchical-dependency-injection#types-of-modifiers\n - guide/hierarchical-dependency-injection#using-the-providers-array\n - guide/hierarchical-dependency-injection#using-the-viewproviders-array\n - guide/hierarchical-dependency-injection#visibility-of-provided-tokens\n - guide/router#location-strategy\n-->"}
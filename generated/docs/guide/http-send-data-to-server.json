{"id":"guide/http-send-data-to-server","title":"HTTP：向服务器发送数据","contents":"<div class=\"content\">\n  <h1 id=\"http-send-data-to-a-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tc9mpflr2o3h33x5fcyhjixh\">HTTP：向服务器发送数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#http-send-data-to-a-server\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abozbekcn92u9nqz49lyri515\">除了从服务器获取数据外，<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 还支持其它一些 HTTP 方法，比如 PUT，POST 和 DELETE，你可以用它们来修改远程数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71rs0p3ojiloiy1zl1jymq047\">本指南中的这个范例应用包括一个简略版本的《英雄之旅》，它会获取英雄数据，并允许用户添加、删除和修改它们。下面几节在 <code>HeroesService</code> 范例中展示了数据更新方法的一些例子。</p>\n<h2 id=\"make-a-post-request\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gk13eym7d23zziawv6ty5yqo\">发出 POST 请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-post-request\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oajb0b56jjxa8p29n49fr4dl\">应用经常在提交表单时通过 POST 请求向服务器发送数据。下面这个例子中，<code>HeroesService</code> 在向数据库添加英雄时发起了一个 HTTP POST 请求。</p>\n<code-example header=\"app/heroes/heroes.service.ts (addHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"addHero\">\n/** POST: add a new hero to the database */\naddHero(hero: Hero): Observable&lt;Hero&gt; {\n  return this.http.post&lt;Hero&gt;(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('addHero', hero))\n    );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3h4fba2oqh91j07dk69w88mo8\"><code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> 方法像 <code>get()</code> 一样也有类型参数，可以用它来指出你期望服务器返回特定类型的数据。该方法需要一个资源 URL 和两个额外的参数：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7t8gjuuu05sa5zyndftf6lyfq\">参数</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">body</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ev4lomhjzk95lz0y662epzqok\">请求主体中要POST的数据。</td>\n</tr>\n<tr>\n<td align=\"left\">options</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xbcfa3hmd7rojuvx6k2w6inr\">一个包含方法选项的对象，在这种情况下，指定所需头信息。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zjdgalrf5rb9f2l9or7zp9s4\">该示例<a href=\"guide/http-handle-request-errors#error-details\">如上所述</a>会捕获错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dm9fo6zpud9rc95hs997pe3cb\"><code>HeroesComponent</code> 通过订阅该服务方法返回的 <code>Observable</code> 发起了一次实际的 <code>POST</code> 操作。</p>\n<code-example header=\"app/heroes/heroes.component.ts (addHero)\" path=\"http/src/app/heroes/heroes.component.ts\" region=\"add-hero-subscribe\">\nthis.heroesService\n  .addHero(newHero)\n  .subscribe(hero =&gt; this.heroes.push(hero));\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvd2e34f095b3p5cwltjjppex\">当服务器成功做出响应时，会带有这个新创建的英雄，然后该组件就会把这个英雄添加到正在显示的 <code>heroes</code> 列表中。</p>\n<h2 id=\"make-a-delete-request\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f15m99nxy1tw24gb10smjln0b\">发出删除请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-delete-request\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ca5m6wh49301ayqnko2fwlkx\">该应用可以把英雄的 ID 传给 <code>HttpClient.delete</code> 方法的请求 URL 来删除一个英雄。</p>\n<code-example header=\"app/heroes/heroes.service.ts (deleteHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"deleteHero\">\n/** DELETE: delete the hero from the server */\ndeleteHero(id: number): Observable&lt;unknown&gt; {\n  const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n  return this.http.delete(url, httpOptions)\n    .pipe(\n      catchError(this.handleError('deleteHero'))\n    );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26626ec19d9g3vyvr1mfgmj6u\">当 <code>HeroesComponent</code> 订阅了该服务方法返回的 <code>Observable</code> 时，就会发起一次实际的 <code>DELETE</code> 操作。</p>\n<code-example header=\"app/heroes/heroes.component.ts (deleteHero)\" path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-subscribe\">\nthis.heroesService\n  .deleteHero(hero.id)\n  .subscribe();\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqeepcxxaqtnv8n4wwitt4cez\">该组件不会等待删除操作的结果，所以它的 subscribe（订阅）中没有回调函数。不过就算你不关心结果，也仍然要订阅它。调用 <code>subscribe()</code> 方法会<strong>执行</strong>这个可观察对象，这时才会真的发起 DELETE 请求。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ektl95de5mkigykkt1td7sl79\">你必须调用 <code>subscribe()</code>，否则什么也不会发生。只调用 <code>HeroesService.deleteHero()</code> 是不会发起 DELETE 请求的。</p>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-no-subscribe\">\n// oops ... subscribe() is missing so nothing happens\nthis.heroesService.deleteHero(hero.id);\n\n</code-example>\n</div>\n<h2 id=\"make-a-put-request\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ra6eb18fccqa7y5xl8ykp00j\">发出 PUT 请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-put-request\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bgg1e4qmxy0km4dnuczg95uw\">应用可以使用 HttpClient 服务发送 PUT 请求。下面的 <code>HeroesService</code> 范例（就像 POST 范例一样）用一个修改过的数据替换了该资源。</p>\n<code-example header=\"app/heroes/heroes.service.ts (updateHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"updateHero\">\n/** PUT: update the hero on the server. Returns the updated hero upon success. */\nupdateHero(hero: Hero): Observable&lt;Hero&gt; {\n  return this.http.put&lt;Hero&gt;(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('updateHero', hero))\n    );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jbtuko38rnjshgvnef6lpx93\">对于任何返回可观察对象的 HTTP 方法，调用者 <code>HeroesComponent.update()</code> <a href=\"guide/http-request-data-from-server#always-subscribe\" title=\"为什么你必须始终订阅。\">必须 <code>subscribe()</code></a> 从 <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> 返回的可观察对象才会发起请求。</p>\n<h2 id=\"add-and-updating-headers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8899lmfgitwqlodaa9meyhmon\">添加和更新表头<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-and-updating-headers\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu5d6r5k2fg0896676tvsa05j\">很多服务器都需要额外的头来执行保存操作。比如，服务器可能需要一个授权令牌，或者需要 <code>Content-Type</code> 头来显式声明请求体的 MIME 类型。</p>\n<h3 id=\"add-headers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdwt2u7y4u44mifr8sgoyrk3u\">添加标头<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-headers\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aywkozz0kyesv18x757e1l2cd\"><code>HeroesService</code> 在一个 <code>httpOptions</code> 对象中定义了这样的头，它们被传给每个 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的保存型方法。</p>\n<code-example header=\"app/heroes/heroes.service.ts (httpOptions)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"http-options\">\nimport { <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({\n    'Content-Type':  'application/json',\n    Authorization: 'my-auth-token'\n  })\n};\n\n</code-example>\n<h3 id=\"update-headers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abw9q21wk4xi7hqk8aohoq8b0\">更新标头<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#update-headers\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51f7aq0xdek3f4dw590uwh8bp\">你不能直接修改前面的选项对象中的 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> 请求头，因为 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> 类的实例是不可变对象。请改用 <code>set()</code> 方法，以返回当前实例应用了新更改之后的副本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3j6h5vj1dudx0bgkbahpt73c7\">下面的例子演示了当旧令牌过期时，可以在发起下一个请求之前更新授权头。</p>\n<code-example linenums=\"false\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"update-headers\">\nhttpOptions.headers =\n  httpOptions.headers.set('Authorization', 'my-new-auth-token');\n\n</code-example>\n<p><a id=\"url-params\"></a></p>\n\n  <div class=\"reviewed\">最后复查时间：Thu Mar 16 2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#post\n - api/common/http/HttpClient#put\n - api/common/http/HttpHeaders\n - guide/http-handle-request-errors#error-details\n - guide/http-request-data-from-server#always-subscribe\n - guide/http-send-data-to-server#add-and-updating-headers\n - guide/http-send-data-to-server#add-headers\n - guide/http-send-data-to-server#http-send-data-to-a-server\n - guide/http-send-data-to-server#make-a-delete-request\n - guide/http-send-data-to-server#make-a-post-request\n - guide/http-send-data-to-server#make-a-put-request\n - guide/http-send-data-to-server#update-headers\n-->"}
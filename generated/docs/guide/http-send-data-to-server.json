{"id":"guide/http-send-data-to-server","title":"HTTP：向伺服器傳送資料","contents":"<div class=\"content\">\n  <h1 id=\"http-send-data-to-a-server\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tc9mpflr2o3h33x5fcyhjixh\">HTTP：向伺服器傳送資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#http-send-data-to-a-server\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abozbekcn92u9nqz49lyri515\">除了從伺服器獲取資料外，<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 還支援其它一些 HTTP 方法，比如 PUT，POST 和 DELETE，你可以用它們來修改遠端資料。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71rs0p3ojiloiy1zl1jymq047\">本指南中的這個範例應用包括一個簡略版本的《英雄之旅》，它會獲取英雄資料，並允許使用者新增、刪除和修改它們。下面幾節在 <code>HeroesService</code> 範例中展示了資料更新方法的一些例子。</p>\n<h2 id=\"make-a-post-request\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gk13eym7d23zziawv6ty5yqo\">發出 POST 請求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-post-request\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oajb0b56jjxa8p29n49fr4dl\">應用經常在送出表單時透過 POST 請求向伺服器傳送資料。下面這個例子中，<code>HeroesService</code> 在向資料庫新增英雄時發起了一個 HTTP POST 請求。</p>\n<code-example header=\"app/heroes/heroes.service.ts (addHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"addHero\">\n/** POST: add a new hero to the database */\naddHero(hero: Hero): Observable&lt;Hero&gt; {\n  return this.http.post&lt;Hero&gt;(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('addHero', hero))\n    );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3h4fba2oqh91j07dk69w88mo8\"><code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> 方法像 <code>get()</code> 一樣也有型別引數，可以用它來指出你期望伺服器回傳特定型別的資料。該方法需要一個資源 URL 和兩個額外的引數：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7t8gjuuu05sa5zyndftf6lyfq\">引數</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">body</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ev4lomhjzk95lz0y662epzqok\">請求主體中要POST的資料。</td>\n</tr>\n<tr>\n<td align=\"left\">options</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xbcfa3hmd7rojuvx6k2w6inr\">一個包含方法選項的物件，在這種情況下，指定所需頭訊息。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zjdgalrf5rb9f2l9or7zp9s4\">該範例<a href=\"guide/http-handle-request-errors#error-details\">如上所述</a>會捕獲錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dm9fo6zpud9rc95hs997pe3cb\"><code>HeroesComponent</code> 透過訂閱該服務方法回傳的 <code>Observable</code> 發起了一次實際的 <code>POST</code> 操作。</p>\n<code-example header=\"app/heroes/heroes.component.ts (addHero)\" path=\"http/src/app/heroes/heroes.component.ts\" region=\"add-hero-subscribe\">\nthis.heroesService\n  .addHero(newHero)\n  .subscribe(hero =&gt; this.heroes.push(hero));\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvd2e34f095b3p5cwltjjppex\">當服務器成功做出回應時，會帶有這個新創建的英雄，然後該組件就會把這個英雄新增到正在顯示的 <code>heroes</code> 清單中。</p>\n<h2 id=\"make-a-delete-request\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f15m99nxy1tw24gb10smjln0b\">發出刪除請求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-delete-request\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ca5m6wh49301ayqnko2fwlkx\">該應用可以把英雄的 ID 傳給 <code>HttpClient.delete</code> 方法的請求 URL 來刪除一個英雄。</p>\n<code-example header=\"app/heroes/heroes.service.ts (deleteHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"deleteHero\">\n/** DELETE: delete the hero from the server */\ndeleteHero(id: number): Observable&lt;unknown&gt; {\n  const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n  return this.http.delete(url, httpOptions)\n    .pipe(\n      catchError(this.handleError('deleteHero'))\n    );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26626ec19d9g3vyvr1mfgmj6u\">當 <code>HeroesComponent</code> 訂閱了該服務方法回傳的 <code>Observable</code> 時，就會發起一次實際的 <code>DELETE</code> 操作。</p>\n<code-example header=\"app/heroes/heroes.component.ts (deleteHero)\" path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-subscribe\">\nthis.heroesService\n  .deleteHero(hero.id)\n  .subscribe();\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqeepcxxaqtnv8n4wwitt4cez\">該組件不會等待刪除操作的結果，所以它的 subscribe（訂閱）中沒有回呼函式。不過就算你不關心結果，也仍然要訂閱它。呼叫 <code>subscribe()</code> 方法會<strong>執行</strong>這個可觀察物件，這時才會真的發起 DELETE 請求。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ektl95de5mkigykkt1td7sl79\">你必須呼叫 <code>subscribe()</code>，否則什麼也不會發生。只調用 <code>HeroesService.deleteHero()</code> 是不會發起 DELETE 請求的。</p>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-no-subscribe\">\n// oops ... subscribe() is missing so nothing happens\nthis.heroesService.deleteHero(hero.id);\n\n</code-example>\n</div>\n<h2 id=\"make-a-put-request\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ra6eb18fccqa7y5xl8ykp00j\">發出 PUT 請求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-put-request\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bgg1e4qmxy0km4dnuczg95uw\">應用可以使用 HttpClient 服務傳送 PUT 請求。下面的 <code>HeroesService</code> 範例（就像 POST 範例一樣）用一個修改過的資料替換了該資源。</p>\n<code-example header=\"app/heroes/heroes.service.ts (updateHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"updateHero\">\n/** PUT: update the hero on the server. Returns the updated hero upon success. */\nupdateHero(hero: Hero): Observable&lt;Hero&gt; {\n  return this.http.put&lt;Hero&gt;(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('updateHero', hero))\n    );\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jbtuko38rnjshgvnef6lpx93\">對於任何回傳可觀察物件的 HTTP 方法，呼叫者 <code>HeroesComponent.update()</code> <a href=\"guide/http-request-data-from-server#always-subscribe\" title=\"為什麼你必須始終訂閱。\">必須 <code>subscribe()</code></a> 從 <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> 回傳的可觀察物件才會發起請求。</p>\n<h2 id=\"add-and-updating-headers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8899lmfgitwqlodaa9meyhmon\">新增和更新表頭<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-and-updating-headers\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu5d6r5k2fg0896676tvsa05j\">很多伺服器都需要額外的頭來執行儲存操作。比如，伺服器可能需要一個授權令牌，或者需要 <code>Content-Type</code> 頭來顯式宣告請求體的 MIME 型別。</p>\n<h3 id=\"add-headers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdwt2u7y4u44mifr8sgoyrk3u\">新增標頭<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-headers\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aywkozz0kyesv18x757e1l2cd\"><code>HeroesService</code> 在一個 <code>httpOptions</code> 物件中定義了這樣的頭，它們被傳給每個 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的儲存型方法。</p>\n<code-example header=\"app/heroes/heroes.service.ts (httpOptions)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"http-options\">\nimport { <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({\n    'Content-Type':  'application/json',\n    Authorization: 'my-auth-token'\n  })\n};\n\n</code-example>\n<h3 id=\"update-headers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abw9q21wk4xi7hqk8aohoq8b0\">更新標頭<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#update-headers\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51f7aq0xdek3f4dw590uwh8bp\">你不能直接修改前面的選項物件中的 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> 請求頭，因為 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> 類別的實例是不可變物件。請改用 <code>set()</code> 方法，以回傳當前實例應用了新更改之後的副本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3j6h5vj1dudx0bgkbahpt73c7\">下面的例子示範了當舊令牌過期時，可以在發起下一個請求之前更新授權頭。</p>\n<code-example linenums=\"false\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"update-headers\">\nhttpOptions.headers =\n  httpOptions.headers.set('Authorization', 'my-new-auth-token');\n\n</code-example>\n<p><a id=\"url-params\"></a></p>\n\n  <div class=\"reviewed\">最後複查時間：Thu Mar 16 2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#post\n - api/common/http/HttpClient#put\n - api/common/http/HttpHeaders\n - guide/http-handle-request-errors#error-details\n - guide/http-request-data-from-server#always-subscribe\n - guide/http-send-data-to-server#add-and-updating-headers\n - guide/http-send-data-to-server#add-headers\n - guide/http-send-data-to-server#http-send-data-to-a-server\n - guide/http-send-data-to-server#make-a-delete-request\n - guide/http-send-data-to-server#make-a-post-request\n - guide/http-send-data-to-server#make-a-put-request\n - guide/http-send-data-to-server#update-headers\n-->"}
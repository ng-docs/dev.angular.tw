{"id":"guide/architecture-services","title":"服务与依赖注入简介","contents":"<div class=\"content\">\n  <h1 id=\"introduction-to-services-and-dependency-injection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bf32h5za0czlpfvt5swminq5q\">服务与依赖注入简介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#introduction-to-services-and-dependency-injection\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5b52s9jfzzucp4c31eql9s56u\"><em>服务</em>是一个广义的概念，它包括应用所需的任何值、函数或特性。狭义的服务是一个明确定义了用途的类。它应该做一些具体的事，并做好。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ccbdhczt8wjhksn9gj3j0czji\">Angular 把组件和服务区分开，以提高模块性和复用性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6e52kx8cs2y12ba41s7xbh6ik\">理想情况下，组件的工作只管用户体验，而不用顾及其它。它应该提供用于数据绑定的属性和方法，以便作为视图和应用逻辑的中介者。视图就是模板所渲染的东西，而程序逻辑就是用于承载模型概念的东西。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5snrg61mws8bcjfha9azmjnfv\">组件应该使用服务来完成那些不涉及视图或应用逻辑的任务。服务很擅长诸如从服务器获取数据、验证用户输入或直接把日志写入控制台之类的任务。通过把各种处理任务定义到可注入的服务类中，你可以让它被任何组件使用。通过在不同的环境中注入同一种服务的不同提供者，你还可以让你的应用更具适应性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cmm7of1n0xtajudwwculcptn\">Angular 不会<em>强迫</em>你遵循这些原则。Angular 只会通过<em>依赖注入</em>来帮你更容易地将应用逻辑分解为服务。在 Angular 中，<em>依赖注入</em>会令这些服务可用于各个组件中。</p>\n<h2 id=\"service-examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8bl73lz949i79hn8v0p6tzjx\">服务范例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#service-examples\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8c0lrvqbl8sq0jaemmxbv5vlj\">下面是一个服务类的范例，用于把日志记录到浏览器的控制台：。</p>\n<code-example header=\"src/app/logger.service.ts (class)\" path=\"architecture/src/app/logger.service.ts\" region=\"class\">\nexport class Logger {\n  log(msg: any)   { console.log(msg); }\n  error(msg: any) { console.error(msg); }\n  warn(msg: any)  { console.warn(msg); }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8e2l3t27rr7fjy0jsbuwjmy9m\">服务也可以依赖其它服务。比如，这里的 <code>HeroService</code> 就依赖于 <code>Logger</code> 服务，它还用 <code>BackendService</code> 来获取英雄数据。<code>BackendService</code> 还可能再转而依赖 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服务来从服务器异步获取英雄列表。</p>\n<code-example header=\"src/app/hero.service.ts (class)\" path=\"architecture/src/app/hero.service.ts\" region=\"class\">\nexport class HeroService {\n  private heroes: Hero[] = [];\n\n  constructor(\n    private backend: BackendService,\n    private logger: Logger) { }\n\n  getHeroes() {\n    this.backend.getAll(Hero).then( (heroes: Hero[]) =&gt; {\n      this.logger.log(`Fetched ${heroes.length} heroes.`);\n      this.heroes.push(...heroes); // fill cache\n    });\n    return this.heroes;\n  }\n}\n\n\n</code-example>\n<h2 id=\"dependency-injection-di\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wi0mekfdn97hcomfxqnq3jut\">依赖注入（dependency injection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#dependency-injection-di\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"lightbox\">\n<img alt=\"Service\" class=\"left\" src=\"generated/images/guide/architecture/dependency-injection.png\" width=\"200\" height=\"90\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5m4oiiagvmjxuu4muabqxkbak\">DI 是 Angular 框架的一部分，用于在任何地方给新建的组件提供服务和其它资源。Angular 提供了把某个服务<em>注入</em>到组件中的能力，以便那个组件得以访问该服务类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7p0e6c02tvya7yt2vet8x38hw\">将\n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code>装饰器添加到服务类，这样 Angular 可以将其作为\n<em>依赖项</em>注入到组件中；可选参数告诉 Angular 在哪里默认注册此类。</p>\n   <code-example path=\"architecture/src/app/hero.service.ts\" region=\"provide\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({providedIn: 'root'})\nexport class HeroService {\n\n</code-example>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7r8l65br4cv7pxqh5w9z6e6t2\">要创建和使用某个\n<em>可注入</em>对象，必须先使用\n<em>注入器</em>进行注册。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nudnhq0oboepqvm3d456ypkt\">使用一个\n<em>提供者</em>注册一个可注入对象，提供者是一个对象，告诉注入器如何获取或创建依赖项。对于服务类，提供者通常是类本身。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tjtkjinfv5vfwttijmsppkd9\">你无需创建注入器。在幕后，Angular 在启动过程中为你创建一个应用程序范围的\n<em>根注入器</em>。根据需要，它会创建额外的子注入器。</p>\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cttlirf5zmso3wnb90tp7v36t\">可注入的依赖项不一定是一个类——例如，它可以是一个函数或值。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9byow7l5rvn6ezf0mzbnah7k8\">当 Angular 创建组件类的新实例时，它会通过查看该组件类的构造函数，来决定该组件依赖哪些服务或其它依赖项。比如 <code>HeroListComponent</code> 的构造函数中需要 <code>HeroService</code>：</p>\n<code-example header=\"src/app/hero-list.component.ts (constructor)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"ctor\">\nconstructor(private service: HeroService) { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jfm7v87kn42v5i6185bcv57i\">当 Angular 发现某个组件依赖某个服务时，它会首先检查是否该注入器中已经有了那个服务的任何现有实例。如果所请求的服务尚不存在，注入器就会使用以前注册的服务提供者来制作一个，并把它加入注入器中，然后把该服务返回给 Angular。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azi8pf0rs679xrhdnc8oegqwv\">当所有请求的服务都已解析并返回时，Angular 就可以用这些服务实例为参数，调用该组件的构造函数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0ar5mteeez61ipqp6u1iswqt\"><code>HeroService</code> 的注入过程如下所示：</p>\n<div class=\"lightbox\">\n<img alt=\"Service\" class=\"left\" src=\"generated/images/guide/architecture/injector-injects.png\" width=\"479\" height=\"218\">\n</div>\n<h3 id=\"providing-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dvipb1zc3mws7yo28dgl1og1z\">提供服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#providing-services\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sb2100unjrm8pwzlho78vapn\">你必须至少注册一个你将要使用的服务的\n<em>提供者</em>。提供者可以作为服务自身的元数据的一部分注册，使得该服务在任何地方都可用，或者你可以在特定组件中注册提供者。你可以在服务的元数据（在\n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code>装饰器中）或\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code>元数据中注册提供者。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gki4ex9rmboikr8dr4id7jv7\">默认情况下，Angular CLI 命令\n<a href=\"cli/generate\"><code>ng generate service</code></a>通过在\n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code>装饰器中包含提供者元数据，为你的服务在根注入器中注册提供者。本教程使用这种方法来注册\n<code>HeroService</code>类的提供者定义。</p>\n<code-example header=\"hero.service.ts (provide in root)\" path=\"architecture/src/app/hero.service.ts\" region=\"provide\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({providedIn: 'root'})\nexport class HeroService {\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dukb3ai863ks6jhp8i9vds1y\">当你在根一级提供服务时，Angular 会为 HeroService 创建一个单一的共享实例，并且把它注入到任何想要它的类中。这种在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元数据中注册提供者的方式还让 Angular 能够通过移除那些从未被用过的服务来优化大小。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18fub8wvjtk8jrj2ej2z9omhu\">当你在组件级注册提供者时，你会为该组件的每一个新实例提供该服务的一个新实例。要在组件级注册，就要在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 元数据的 <code>providers</code> 属性中注册服务提供者。</p>\n<code-example header=\"src/app/hero-list.component.ts (component providers)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"providers\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector:    'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  imports:     [ <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>, <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>, HeroDetailComponent ],\n  providers:  [ HeroService ]\n})\n\n</code-example>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24xdhyugj1yzi1z7olez8vtx1\">要了解更多细节，参阅<a href=\"guide/dependency-injection\">依赖注入</a>一节。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Sep 25 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/Injectable\n - errors/NG0201\n - guide/architecture\n - guide/architecture-modules\n - guide/creating-libraries\n - guide/glossary\n - guide/hierarchical-dependency-injection\n - guide/lightweight-injection-tokens\n - start/start-data\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Injectable\n - cli/generate\n - guide/architecture-services#dependency-injection-di\n - guide/architecture-services#introduction-to-services-and-dependency-injection\n - guide/architecture-services#providing-services\n - guide/architecture-services#service-examples\n - guide/dependency-injection\n-->"}
{"id":"guide/architecture-services","title":"服務與依賴注入簡介","contents":"<div class=\"content\">\n  <h1 id=\"introduction-to-services-and-dependency-injection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bf32h5za0czlpfvt5swminq5q\">服務與依賴注入簡介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#introduction-to-services-and-dependency-injection\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5b52s9jfzzucp4c31eql9s56u\"><em>服務</em>是一個廣義的概念，它包括應用所需的任何值、函式或屬性。狹義的服務是一個明確定義了用途的類。它應該做一些具體的事，並做好。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ccbdhczt8wjhksn9gj3j0czji\">Angular 把元件和服務區分開，以提高模組性和複用性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6e52kx8cs2y12ba41s7xbh6ik\">理想情況下，元件的工作只管使用者體驗，而不用顧及其它。它應該提供用於資料繫結的屬性和方法，以便作為檢視和應用邏輯的中介者。檢視就是樣板所渲染的東西，而程式邏輯就是用於承載模型概念的東西。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5snrg61mws8bcjfha9azmjnfv\">元件應該使用服務來完成那些不涉及檢視或應用邏輯的任務。服務很擅長諸如從伺服器獲取資料、驗證使用者輸入或直接把日誌寫入控制台之類的任務。透過把各種處理任務定義到可注入的服務類別中，你可以讓它被任何元件使用。透過在不同的環境中注入同一種服務的不同提供者，你還可以讓你的應用更具適應性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cmm7of1n0xtajudwwculcptn\">Angular 不會<em>強迫</em>你遵循這些原則。Angular 只會透過<em>依賴注入</em>來幫你更容易地將應用邏輯分解為服務。在 Angular 中，<em>依賴注入</em>會令這些服務可用於各個元件中。</p>\n<h2 id=\"service-examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8bl73lz949i79hn8v0p6tzjx\">服務範例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#service-examples\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8c0lrvqbl8sq0jaemmxbv5vlj\">下面是一個服務類別的範例，用於把日誌記錄到瀏覽器的控制台：。</p>\n<code-example header=\"src/app/logger.service.ts (class)\" path=\"architecture/src/app/logger.service.ts\" region=\"class\">\nexport class Logger {\n  log(msg: any)   { console.log(msg); }\n  error(msg: any) { console.error(msg); }\n  warn(msg: any)  { console.warn(msg); }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8e2l3t27rr7fjy0jsbuwjmy9m\">服務也可以依賴其它服務。比如，這裡的 <code>HeroService</code> 就依賴於 <code>Logger</code> 服務，它還用 <code>BackendService</code> 來獲取英雄資料。<code>BackendService</code> 還可能再轉而依賴 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服務來從伺服器非同步獲取英雄清單。</p>\n<code-example header=\"src/app/hero.service.ts (class)\" path=\"architecture/src/app/hero.service.ts\" region=\"class\">\nexport class HeroService {\n  private heroes: Hero[] = [];\n\n  constructor(\n    private backend: BackendService,\n    private logger: Logger) { }\n\n  getHeroes() {\n    this.backend.getAll(Hero).then( (heroes: Hero[]) =&gt; {\n      this.logger.log(`Fetched ${heroes.length} heroes.`);\n      this.heroes.push(...heroes); // fill cache\n    });\n    return this.heroes;\n  }\n}\n\n\n</code-example>\n<h2 id=\"dependency-injection-di\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wi0mekfdn97hcomfxqnq3jut\">依賴注入（dependency injection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#dependency-injection-di\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"lightbox\">\n<img alt=\"Service\" class=\"left\" src=\"generated/images/guide/architecture/dependency-injection.png\" width=\"200\" height=\"90\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5m4oiiagvmjxuu4muabqxkbak\">DI 是 Angular 框架的一部分，用於在任何地方給新建的元件提供服務和其它資源。Angular 提供了把某個服務<em>注入</em>到元件中的能力，以便那個元件得以訪問該服務類。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7p0e6c02tvya7yt2vet8x38hw\">將\n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code>裝飾器新增到服務類別，這樣 Angular 可以將其作為\n<em>依賴項</em>注入到元件中；可選引數告訴 Angular 在哪裡預設註冊此類。</p>\n   <code-example path=\"architecture/src/app/hero.service.ts\" region=\"provide\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({providedIn: 'root'})\nexport class HeroService {\n\n</code-example>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7r8l65br4cv7pxqh5w9z6e6t2\">要建立和使用某個\n<em>可注入</em>物件，必須先使用\n<em>注入器</em>進行註冊。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nudnhq0oboepqvm3d456ypkt\">使用一個\n<em>提供者</em>註冊一個可注入物件，提供者是一個物件，告訴注入器如何獲取或建立依賴項。對於服務類別，提供者通常是類本身。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tjtkjinfv5vfwttijmsppkd9\">你無需建立注入器。在幕後，Angular 在啟動過程中為你建立一個應用程式範圍的\n<em>根注入器</em>。根據需要，它會建立額外的子注入器。</p>\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cttlirf5zmso3wnb90tp7v36t\">可注入的依賴項不一定是一個類——例如，它可以是一個函式或值。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9byow7l5rvn6ezf0mzbnah7k8\">當 Angular 建立元件類別的新實例時，它會通過檢視該組件類別的建構式函式，來決定該組件依賴哪些服務或其它依賴項。比如 <code>HeroListComponent</code> 的建構式函式中需要 <code>HeroService</code>：</p>\n<code-example header=\"src/app/hero-list.component.ts (constructor)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"ctor\">\nconstructor(private service: HeroService) { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jfm7v87kn42v5i6185bcv57i\">當 Angular 發現某個元件依賴某個服務時，它會首先檢查是否該注入器中已經有了那個服務的任何現有實例。如果所請求的服務尚不存在，注入器就會使用以前註冊的服務提供者來製作一個，並把它加入注入器中，然後把該服務回傳給 Angular。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azi8pf0rs679xrhdnc8oegqwv\">當所有請求的服務都已解析並回傳時，Angular 就可以用這些服務實例為引數，呼叫該組件的建構式函式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0ar5mteeez61ipqp6u1iswqt\"><code>HeroService</code> 的注入過程如下所示：</p>\n<div class=\"lightbox\">\n<img alt=\"Service\" class=\"left\" src=\"generated/images/guide/architecture/injector-injects.png\" width=\"479\" height=\"218\">\n</div>\n<h3 id=\"providing-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dvipb1zc3mws7yo28dgl1og1z\">提供服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#providing-services\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sb2100unjrm8pwzlho78vapn\">你必須至少註冊一個你將要使用的服務的\n<em>提供者</em>。提供者可以作為服務自身的元資料的一部分註冊，使得該服務在任何地方都可用，或者你可以在特定元件中註冊提供者。你可以在服務的元資料（在\n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code>裝飾器中）或\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code>元資料中註冊提供者。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gki4ex9rmboikr8dr4id7jv7\">預設情況下，Angular CLI 指令\n<a href=\"cli/generate\"><code>ng generate service</code></a>透過在\n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code>裝飾器中包含提供者元資料，為你的服務在根注入器中註冊提供者。本教程使用這種方法來註冊\n<code>HeroService</code>類別的提供者定義。</p>\n<code-example header=\"hero.service.ts (provide in root)\" path=\"architecture/src/app/hero.service.ts\" region=\"provide\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({providedIn: 'root'})\nexport class HeroService {\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dukb3ai863ks6jhp8i9vds1y\">當你在根一級提供服務時，Angular 會為 HeroService 建立一個單一的共享實例，並且把它注入到任何想要它的類別中。這種在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元資料中註冊提供者的方式還讓 Angular 能夠透過移除那些從未被用過的服務來最佳化大小。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18fub8wvjtk8jrj2ej2z9omhu\">當你在元件級註冊提供者時，你會為該組件的每一個新實例提供該服務的一個新實例。要在元件級註冊，就要在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 元資料的 <code>providers</code> 屬性中註冊服務提供者。</p>\n<code-example header=\"src/app/hero-list.component.ts (component providers)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"providers\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector:    'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  imports:     [ <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>, <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>, HeroDetailComponent ],\n  providers:  [ HeroService ]\n})\n\n</code-example>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24xdhyugj1yzi1z7olez8vtx1\">要了解更多細節，參閱<a href=\"guide/dependency-injection\">依賴注入</a>一節。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Sep 25 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/Injectable\n - errors/NG0201\n - guide/architecture\n - guide/architecture-modules\n - guide/creating-libraries\n - guide/glossary\n - guide/hierarchical-dependency-injection\n - guide/lightweight-injection-tokens\n - start/start-data\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Injectable\n - cli/generate\n - guide/architecture-services#dependency-injection-di\n - guide/architecture-services#introduction-to-services-and-dependency-injection\n - guide/architecture-services#providing-services\n - guide/architecture-services#service-examples\n - guide/dependency-injection\n-->"}
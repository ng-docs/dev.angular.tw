{"id":"guide/inputs-outputs","title":"在父子指令及组件之间共享数据","contents":"<div class=\"content\">\n  <h1 id=\"sharing-data-between-child-and-parent-directives-and-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4r6wdo1zuh86pr677vtb8r2u4\">在父子指令及组件之间共享数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#sharing-data-between-child-and-parent-directives-and-components\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bxfpxpgdnoekgyfw5tytt3drp\">Angular 中的一个常见模式就是在父组件和一个或多个子组件之间共享数据。可以用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 来实现这个模式。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81el5yk7yllx1tewd03bnp7o0\">本章包含代码片段的工作实例参阅<live-example></live-example>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9f3l4er5au1m0vklk4igzrrub\">考虑以下层次结构：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;parent-component&gt;\n  &lt;child-component&gt;&lt;/child-component&gt;\n&lt;/parent-component&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"i5oxcscvjrl6e6jmwq63vno\"><code>&lt;parent-component&gt;</code> 充当了 <code>&lt;child-component&gt;</code> 的上下文。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ai8grl1kbn05zcbwilimyyl0o\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 为子组件提供了一种与其父组件通信的方法。<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 允许父组件更新子组件中的数据。相反，<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 允许子组件向父组件发送数据。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nvu1a83ystki1vmjl0w6z71s\">基于信号的输入目前在开发者预览中可用，作为对 \n<code>@Input</code> 的另一种选择，对某些用例可能更合适。 在 \n<a href=\"/guide/signal-inputs\">信号输入指南</a> 中了解更多。</p>\n</div>\n<p><a id=\"input\"></a></p>\n<h2 id=\"sending-data-to-a-child-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65174tjikz30x5ivvt4c1tw0q\">把数据发送到子组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#sending-data-to-a-child-component\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9m5xhvq64uk6ov2blhubncqvs\">子组件或指令中的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器表示该属性可以从其父组件中获取值。</p>\n<div class=\"lightbox\">\n<img alt=\"Input data flow diagram of data flowing from parent to child\" src=\"generated/images/guide/inputs-outputs/input.svg\" width=\"671\" height=\"346\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zaciy6xhj2f4g1n6a6umd42e\">要使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>，就必须对父组件和子组件进行配置。</p>\n<h3 id=\"configuring-the-child-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23tc0kwoy0can1q1gkugcx7o9\">配置子组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-child-component\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqttbgd44661twh23cn2zc1fs\">要使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器，首先要导入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>，然后用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰该属性，如下例所示。</p>\n<code-example header=\"src/app/item-detail.component.ts\" path=\"inputs-outputs/src/app/item-detail.component.ts\" region=\"use-input\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core'; // First, import <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>\nexport class ItemDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() item = ''; // decorate the property with @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"divzhk0rn9j5ggv9q8pxhb2nj\">在这个例子中，<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 会修饰属性 <code class=\"no-auto-link\">item</code>，它的类型为 <code>string</code>，但 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性可以是任意类型，比如 <code>number</code>、<code>string</code>、<code>boolean</code> 或 <code>object</code>。<code>item</code> 的值来自父组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64rgyqipwroekcrrbwv1q45tp\">接下来，在子组件模板中添加以下内容：</p>\n<code-example header=\"src/app/item-detail.component.html\" path=\"inputs-outputs/src/app/item-detail.component.html\" region=\"property-in-template\">\n&lt;p&gt;\n  Today's item: {{item}}\n&lt;/p&gt;\n\n</code-example>\n<h3 id=\"configuring-the-parent-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"275a47j8nh8nzq0dwviz24f8p\">配置父组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-parent-component\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8acvrcy2549haivdan8ij8wr6\">下一步是在父组件的模板中绑定该属性。在这个例子中，父组件模板是 <code>app.component.html</code>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ilvyyjhkz84sa8xw4il1expk\">使用子组件的 selector（<code>&lt;app-item-detail&gt;</code>）作为父组件模板中的指令。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2k5k94ksdbn3qjncpoi43graz\">使用<a href=\"guide/property-binding\">属性绑定</a>把子组件的 <code>item</code> 属性绑定到父组件的 <code>currentItem</code> 属性上。</p>\n<code-example header=\"src/app/app.component.html\" path=\"inputs-outputs/src/app/app.component.html\" region=\"input-parent\">\n&lt;app-item-detail [item]=\"currentItem\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cz6ab6mvlp12ekl2c0pta8r8\">在父组件类中，为 <code>currentItem</code> 指定一个值：</p>\n<code-example header=\"src/app/app.component.ts\" path=\"inputs-outputs/src/app/app.component.ts\" region=\"parent-property\">\nexport class AppComponent {\n  currentItem = 'Television';\n}\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45vemmz79p5oiewl8d0ddq74a\">通过 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>，Angular 把 <code>currentItem</code> 的值传给子组件，以便 <code>item</code> 渲染为 <code>Television</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwp2azoxu334g9ifujayskam0\">下图展示了这种结构：</p>\n<div class=\"lightbox\">\n<img alt=\"Property binding diagram of the target, item, in square brackets set to the source, currentItem, on the right of an equal sign\" src=\"generated/images/guide/inputs-outputs/input-diagram-target-source.svg\" width=\"502\" height=\"304\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mu3zwcw574863xupfcg23pcb\">方括号 <code>[]</code> 中的目标就是子组件中用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰的那个属性。绑定源（等号的右边部分）则是父组件传给内嵌组件的数据。</p>\n<h3 id=\"watching-for-input-changes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8g8a0ovt6xbdvn2tqqj4iyyxh\">监视 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 的变更<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#watching-for-input-changes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9kcjpx3hcfuovyhsgcugm8isp\">要想监视 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性的变化，可以用 Angular 的<a href=\"guide/lifecycle-hooks\">生命周期钩子</a><code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>。更多详情和范例，请参阅<a href=\"guide/lifecycle-hooks\">生命周期钩子</a> 一章的 <a href=\"guide/lifecycle-hooks#onchanges\"><code>OnChanges</code></a>部分。</p>\n<p><a id=\"output\"></a></p>\n<h2 id=\"sending-data-to-a-parent-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyyp6rr4up66naj3r0e7sd3j0\">把数据发送到父组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#sending-data-to-a-parent-component\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bbmt9tlql4j1d05qpnyzl3q9f\">子组件或指令中的 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 装饰器允许数据从子组件传给父组件。</p>\n<div class=\"lightbox\">\n<img alt=\"Output diagram of the data flow going from child to parent\" src=\"generated/images/guide/inputs-outputs/output.svg\" width=\"666\" height=\"340\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9afelhr8pb7gzx3wie09df6da\"><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 在子组件中标记了一个属性，作为数据从子组件传递到父组件的途径。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8kp61ib57a63p0xd7l6y5i1l\">子组件使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 属性来引发事件，以通知父组件这一变化。为了引发事件，<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 必须是 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 类型，它是 <code>@angular/core</code> 中用来发出自定义事件的类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cj2hxijbc2scg8k97ickwyn90\">下面的例子给出了如何在组件中设置 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，来把数据从 HTML 的 <code>&lt;input&gt;</code> 推送到父组件的数组中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9y1vx7ia4f31zptl8j9s39uq9\">要使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，就必须配置父组件和子组件。</p>\n<h3 id=\"configuring-the-child-component-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23tc0kwoy0can1q1gkugcx7o9\">配置子组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-child-component-1\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4d4rod9un5ajruiidy6v6i2rn\">下面的例子中有一个 <code>&lt;input&gt;</code>，用户可以输入一个值，然后点击一个引发事件 <code>&lt;button&gt;</code> 然后，<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 数据中继到父组件。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ippv7vez05nhboe8lvenhdhq\">在子组件类中导入 <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> 和 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code></p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nimport { <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yiy9lb7882aotzej27x1trn5\">在组件类中，用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 装饰一个属性。下面的例子中 <code>newItemEvent</code> 这个 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的类型为 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>，这意味着它是一个事件。</p>\n<code-example header=\"src/app/item-output.component.ts\" path=\"inputs-outputs/src/app/item-output.component.ts\" region=\"item-output\">\n\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;();\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qrss10nuyhdzr98ehgjl7tpe\">上述声明中的差异点如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2761p1srabckxtet3sq0sn42h\">声明部分</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hrtbghgwizhayc4e6mn43i30\">将属性标记为从子组件传递数据到父组件的一种方式的装饰器函数。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>newItemEvent</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3whwij0qvk5donp4rmewa4mca\"><code>@Output()</code> 的名称。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tzo3yjx8e7rp5381ufkbh713\"><code>@Output()</code> 的类型。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nfluoxa5dwo7ecizoed8m22q\">告诉 Angular 创建一个新的事件发射器，其发射的数据类型为字符串。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4616jv4yfaf848bsz1b0b10hz\">关于 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 的详细信息，请参阅 <a href=\"api/core/EventEmitter\">EventEmitter API 文档</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jqh9nege8txdj0a416gox6pr\">在同一个组件类中创建一个 <code>addNewItem()</code> 方法：</p>\n<code-example header=\"src/app/item-output.component.ts\" path=\"inputs-outputs/src/app/item-output.component.ts\" region=\"item-output-class\">\nexport class ItemOutputComponent {\n\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;();\n\n  addNewItem(value: string) {\n    this.newItemEvent.emit(value);\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewdo0ge55w6bs8da04n4tpl13\"><code>addNewItem()</code> 函数使用 <code>newItemEvent</code> 这个 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 来引发一个事件，该事件带有用户输入到 <code>&lt;input&gt;</code> 中的值。</p>\n</li>\n</ol>\n<h3 id=\"configuring-the-childs-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18mch7splis2kyr4b8zeo659v\">配置子组件的模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-childs-template\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"786f8io4sby9xgqf7gi2zmk6e\">子组件的模板有两个控件。第一个是带有<a href=\"guide/template-reference-variables\">模板引用变量</a> <code>#newItem</code> 的 <code>&lt;input&gt;</code>，用户可在其中输入条目名称。<code>#newItem</code> 变量的 <code>value</code> 属性存储了用户输入到 <code>&lt;input&gt;</code> 中的值。</p>\n<code-example header=\"src/app/item-output.component.html\" path=\"inputs-outputs/src/app/item-output.component.html\" region=\"child-output\">\n&lt;label for=\"item-input\"&gt;Add an item:&lt;/label&gt;\n&lt;input type=\"text\" id=\"item-input\" #newItem&gt;\n&lt;button type=\"button\" (click)=\"addNewItem(newItem.value)\"&gt;Add to parent's list&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17g3bq2ljxbndsom5g9ppadjx\">第二个元素是带有 <code>click</code> <a href=\"guide/event-binding\">事件绑定</a> 的 <code>&lt;button&gt;</code> 元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bhy64o8g4e2f3zzlb45a7xnf\"><code>(click)</code> 事件绑定到了子组件类中 <code>addNewItem()</code> 方法。<code>addNewItem()</code> 方法接受一个 <code>#newItem.value</code> 属性的值作为参数。</p>\n<h3 id=\"configuring-the-parent-component-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"275a47j8nh8nzq0dwviz24f8p\">配置父组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-parent-component-1\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8c212hl2k2ljiu36p4kui6mx\">此范例中的 <code>AppComponent</code> 有一个 <code>items</code> 列表，以及一个向数组中添加更多条目的方法。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"inputs-outputs/src/app/app.component.ts\" region=\"add-new-item\">\nexport class AppComponent {\n  items = ['item1', 'item2', 'item3', 'item4'];\n\n  addItem(newItem: string) {\n    this.items.push(newItem);\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bxf8e5606tkc4sllg6g5px16d\"><code>addItem()</code> 方法接受一个字符串形式的参数，然后把该字符串添加到 <code>items</code> 数组中。</p>\n<h3 id=\"configuring-the-parents-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ozpzhxqjsqiaqbly2vfjcs7e\">配置父组件的模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-parents-template\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69h9dssorz4cccqe6rx2rucu4\">在父模板中，把父组件的方法绑定到子组件的事件上。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5gmwvdcttwb3vimya7y6hcu0\">把子组件选择器（<code>&lt;app-item-output&gt;</code>）放在父组件的模板 <code>app.component.html</code> 中。</p>\n<code-example header=\"src/app/app.component.html\" path=\"inputs-outputs/src/app/app.component.html\" region=\"output-parent\">\n&lt;app-item-output (newItemEvent)=\"addItem($event)\"&gt;&lt;/app-item-output&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1z7akeifvbgx2nup39y6xlg5v\">事件绑定 <code>(newItemEvent)='addItem($event)'</code> 会把子组件中的 <code>newItemEvent</code> 事件连接到父组件的 <code>addItem()</code> 方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ay8p5lc2mey45t2hyl3ipx0r\"><code>$event</code> 中包含用户在子组件模板上的 <code>&lt;input&gt;</code> 中键入的数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98om1xbx2oye0vikk9hr56p7m\">要了解 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的工作方式，你可以把以下内容添加到父组件的模板中：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;{{item}}&lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8h9wmdovl105ddz7lnhdgdps5\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 会迭代 <code>items</code> 数组中的条目。当你在子组件的 <code>&lt;input&gt;</code> 中输入一个值并单击该按钮时，子组件就会发出该事件，而父组件的 <code>addItem()</code> 方法会把这个值追加到其 <code>items</code> 数组中，并且列表中会渲染出这个新条目。</p>\n</li>\n</ol>\n<h2 id=\"using-input-and-output-together\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kpq41rg8hqdgjx8qw8ng3fo2\">同时使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#using-input-and-output-together\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7eryvo6l23q5kvryvt5hdpmxm\">可以在同一个子组件上使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，范例如下：</p>\n<code-example header=\"src/app/app.component.html\" path=\"inputs-outputs/src/app/app.component.html\" region=\"together\">\n&lt;app-input-output\n  [item]=\"currentItem\"\n  (deleteRequest)=\"crossOffItem($event)\"&gt;\n&lt;/app-input-output&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0wwkabffvo3wyzg2hy4f2lvt\">目标 <code>item</code> 是子组件类中的一个 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性，它会从父组件的 <code>currentItem</code> 属性中获取它的值。当你单击“删除”时，子组件就会引发一个事件 <code>deleteRequest</code>，它会作为父组件中 <code>crossOffItem()</code> 方法的参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qtpaq9vasegv5323guvv9by9\">下图展示了子组件 <code>&lt;app-input-output&gt;</code> 中 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的各个部分。</p>\n<div class=\"lightbox\">\n<img alt=\"Diagram of an input target and an output target each bound to a source.\" src=\"generated/images/guide/inputs-outputs/input-output-diagram.svg\" width=\"800\" height=\"333\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmp6r7stom0pfhd1g65ep6frr\">这里的子选择器是 <code>&lt;app-input-output&gt;</code>，它所带的 <code>item</code> 和 <code>deleteRequest</code> 是子组件类中的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 属性。而 <code>currentItem</code> 属性和 <code>crossOffItem()</code> 方法都位于父组件类中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xznvjfeycgtr2jsj5101bavk\">要想用“盒子里的香蕉” <code>[()]</code> 语法来组合属性和事件绑定，参阅<a href=\"guide/two-way-binding\">双向绑定</a>。</p>\n<h2 id=\"additional-configurations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"k2gpchcce2x2ayzwkk4yp58h\">额外配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#additional-configurations\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"configuring-the-child-component-input-as-required-field\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1sluh114u3bvjrpnbaxhsnz0v\">将子组件输入配置为必填字段<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-child-component-input-as-required-field\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9w1euc3aytp3iy9ry0bjtoa9g\">要使子组件的 \n<code>@Input</code> 属性在从父组件传递值时为必填字段，首先导入 \n<code>@Input</code>，然后用 \n<code>@Input({ required: true })</code> 装饰属性，如以下示例：</p>\n<code-example header=\"src/app/item-details-metadata.component.ts\" path=\"inputs-outputs/src/app/item-details-metadata.component.ts\" region=\"use-input-metadata-required\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core'; // First, import <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>({required: true}) item!: string; // Second, decorate the property with required metadata\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dimcr6u7zbxyai5d4hmky8wbk\">接下来，在父模板中添加以下内容：</p>\n<code-example header=\"src/app/app.component.html\" path=\"inputs-outputs/src/app/app.component.html\" region=\"input-parent-metadata\">\n&lt;app-item-detail-metadata [item]=\"currentItem\" [itemAvailability]=\"true\"&gt;&lt;/app-item-detail-metadata&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pz3gzo8vovv0wzjregc82mmk\">如果在父组件模板中未指定子组件中所需的输入，将导致编译时错误：</p>\n<div class=\"alert is-helpful\">\nNG8008: Required input item from component ItemDetailMetadataComponent must be specified.\n</div>\n<h3 id=\"configuring-the-child-component-input-with-transform-functions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cklcf7auj32w43buj4yrlg26h\">使用转换函数配置子组件输入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-child-component-input-with-transform-functions\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1syfebhlwxeoeid6r3cuos0r\">要将从父组件传递值到子组件的字符串属性转换为布尔值，首先导入 \n<code>@booleanAttribute</code>，然后用 \n<code>@Input({ transform: @booleanAttribute })</code> 装饰属性，如以下示例：</p>\n<code-example header=\"src/app/item-details-metadata.component.ts\" path=\"inputs-outputs/src/app/item-details-metadata.component.ts\" region=\"use-input-metadata-boolean-transform\">\nimport { <a href=\"api/core/booleanAttribute\" class=\"code-anchor\">booleanAttribute</a> } from '@angular/core'; // First, import <a href=\"api/core/booleanAttribute\" class=\"code-anchor\">booleanAttribute</a>\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>({transform: <a href=\"api/core/booleanAttribute\" class=\"code-anchor\">booleanAttribute</a>}) itemAvailability!: boolean; // Second, decorate the property with transform\n\n</code-example>\n<code-example header=\"src/app/app.component.html\" path=\"inputs-outputs/src/app/app.component.html\" region=\"input-parent-metadata\">\n&lt;app-item-detail-metadata [item]=\"currentItem\" [itemAvailability]=\"true\"&gt;&lt;/app-item-detail-metadata&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drvwa5n3h2h3l5kzeqfhwwhj6\">类似地，你也可以使用 \n<code>angular/core</code> 库中的预定义函数将字符串转换为数字，参见 \n<code>@numberAttribute</code>。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Fri Sep 01 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/Input\n - api/core/Output\n - guide/built-in-directives\n - guide/component-interaction\n - guide/example-apps-list\n - guide/glossary\n - guide/observables-in-angular\n - guide/template-overview\n - guide/template-syntax\n - guide/two-way-binding\n - tutorial/first-app/first-app-lesson-05\n - tutorial/tour-of-heroes/toh-pt3\n-->\n<!-- links from this doc:\n - /guide/signal-inputs\n - api/common/NgFor\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Input\n - api/core/OnChanges\n - api/core/Output\n - api/core/booleanAttribute\n - api/core/numberAttribute\n - guide/event-binding\n - guide/inputs-outputs#additional-configurations\n - guide/inputs-outputs#configuring-the-child-component\n - guide/inputs-outputs#configuring-the-child-component-1\n - guide/inputs-outputs#configuring-the-child-component-input-as-required-field\n - guide/inputs-outputs#configuring-the-child-component-input-with-transform-functions\n - guide/inputs-outputs#configuring-the-childs-template\n - guide/inputs-outputs#configuring-the-parent-component\n - guide/inputs-outputs#configuring-the-parent-component-1\n - guide/inputs-outputs#configuring-the-parents-template\n - guide/inputs-outputs#sending-data-to-a-child-component\n - guide/inputs-outputs#sending-data-to-a-parent-component\n - guide/inputs-outputs#sharing-data-between-child-and-parent-directives-and-components\n - guide/inputs-outputs#using-input-and-output-together\n - guide/inputs-outputs#watching-for-input-changes\n - guide/lifecycle-hooks\n - guide/lifecycle-hooks#onchanges\n - guide/property-binding\n - guide/template-reference-variables\n - guide/two-way-binding\n-->"}
{"id":"guide/zone","title":"NgZone","contents":"<div class=\"content\">\n  <!-- vale Angular.Google_Headings = NO -->\n<h1 id=\"ngzone\">NgZone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#ngzone\"><i class=\"material-icons\">link</i></a></h1>\n<!-- vale Angular.Google_Headings = YES -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4055wn8ovgybtly1pj3ch2rav\">Zone 是跨异步任务而持久存在的执行上下文。你可以将其视为 JavaScript VM 中的<a href=\"https://en.wikipedia.org/wiki/Thread-local_storage\">线程本地存储</a>。本指南介绍了如何使用 Angular 的 的 NgZone 自动检测组件中的更改以更新 HTML。</p>\n<h2 id=\"fundamentals-of-change-detection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2aklvwvq5kcglal9kn4yfmte9\">变更检测的基础<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#fundamentals-of-change-detection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1skixkab643y7t9e178jd6z3e\">要理解 <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 的好处，重要的是要清楚地了解什么是变更检测以及它的工作原理。</p>\n<h3 id=\"displaying-and-updating-data-in-angular\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nqtummm4fq3lbehfmnvt91z7\">在 Angular 中显示和更新数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#displaying-and-updating-data-in-angular\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"pgzr2snv2m35v2xwx0mr38vz\">在 Angular 中，你可以通过将 Angular 组件属性的值投影到 HTML 模板中来显示数据。</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;label&gt;My favorite hero is {{hero.name}}&lt;/label&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y0azy46ino82wquirfxp2xer\">另外，你也可以将 DOM 事件绑定到 Angular 组件中的方法。在此类方法中，你还可以更新 Angular 组件的属性，该属性将更新模板中显示的相应数据。</p>\n<code-example header=\"src/app/click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-click-me',\n  template: ` &lt;button type=\"button\" (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n    {{ clickMessage }}`,\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mmiu75mdgksvwnuwct0qdio9\">在以上两个示例中，组件的代码仅更新组件的属性。但是，HTML 也会自动更新。本指南介绍了 Angular 如何以及何时根据 Angular 组件中的数据渲染 HTML。</p>\n<h3 id=\"detecting-changes-with-plain-javascript\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4huli7p81ii882hax5druicg6\">使用普通（Plain）JavaScript 检测更改<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#detecting-changes-with-plain-javascript\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3i9v9n5zad8ig9rtzp6n3f0y\">为了阐明如何检测到更改和更新值，请考虑以下用普通 JavaScript 编写的代码。</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\n&lt;html&gt;\n  &lt;div id=\"dataDiv\"&gt;&lt;/div&gt;\n  &lt;button id=\"btn\"&gt;updateData&lt;/button&gt;\n  &lt;canvas id=\"canvas\"&gt;&lt;/canvas&gt;\n  &lt;script&gt;\n    let value = 'initialValue';\n    // initial rendering\n    detectChange();\n\n    function renderHTML() {\n      document.getElementById('dataDiv').innerText = value;\n    }\n\n    function detectChange() {\n      const currentValue = document.getElementById('dataDiv').innerText;\n      if (currentValue !== value) {\n        renderHTML();\n      }\n    }\n\n    // Example 1: update data inside button click event handler\n    document.getElementById('btn').addEventListener('click', () =&gt; {\n      // update value\n      value = 'button update value';\n      // call detectChange manually\n      detectChange();\n    });\n\n    // Example 2: HTTP Request\n    const xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', function() {\n      // get response from server\n      value = this.responseText;\n      // call detectChange manually\n      detectChange();\n    });\n    xhr.open('GET', serverUrl);\n    xhr.send();\n\n    // Example 3: setTimeout\n    setTimeout(() =&gt; {\n      // update value inside setTimeout callback\n      value = 'timeout update value';\n      // call detectChange manually\n      detectChange();\n    }, 100);\n\n    // Example 4: Promise.then\n    Promise.resolve('promise resolved a value').then(v =&gt; {\n      // update value inside Promise thenCallback\n      value = v;\n      // call detectChange manually\n      detectChange();\n    });\n\n    // Example 5: some other asynchronous APIs\n    document.getElementById('canvas').toBlob(blob =&gt; {\n      // update value when blob data is created from the canvas\n      value = `value updated by canvas, size is ${blob.size}`;\n      // call detectChange manually\n      detectChange();\n    });\n  &lt;/script&gt;\n&lt;/html&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e22vy4unbqbiuc09xo4utuh7d\">更新数据后，需要调用 <code>detectChange()</code> 来检查数据是否已更改。如果数据已更改，则渲染 HTML 以反映更新的数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4ewv14banr6asfnabx2c4rdo\">在 Angular 中，此步骤是不必要的。每当你更新数据时，你的 HTML 都会自动更新。</p>\n<h3 id=\"when-apps-update-html\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rwe9el0zt80gpidvfwjptftp\">应用何时更新 HTML<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#when-apps-update-html\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dje7co6adim2b156rs3kiabom\">要了解变更检测的工作原理，请首先考虑应用程序何时需要更新 HTML。通常，会由于以下原因之一而发生更新：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8rdq06fj3hg15kx7sypy82mr\">组件初始化。例如，当引导 Angular 应用程序时，Angular 加载引导组件并触发 \n<a href=\"api/core/ApplicationRef#tick\">ApplicationRef.tick()</a> 来调用变更检测和视图渲染。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5518qb3lay2fcnjt3d98q6fe9\">事件监听器。DOM 事件侦听器可以更新 Angular 组件中的数据，还可以触发变更检测，如下例所示。</p>\n<code-example header=\"src/app/click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-click-me',\n  template: ` &lt;button type=\"button\" (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n    {{ clickMessage }}`,\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19gh7tge1pkxhqlwfj4uqqc5r\">HTTP 数据请求。你还可以通过 HTTP 请求从服务器获取数据。比如：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: '&lt;div&gt;{{data}}&lt;/div&gt;';\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  data = 'initial value';\n  serverUrl = 'SERVER_URL';\n  constructor(private httpClient: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n\n  ngOnInit() {\n    this.httpClient.get(this.serverUrl).subscribe(response =&gt; {\n      // user does not need to <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection manually\n      this.data = response.data;\n    });\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53bvnb207eum4eklh1bi1wag8\">宏任务，比如 <code>setTimeout()</code> 或 <code>setInterval()</code>。你还可以在诸如 <code>setTimeout()</code> <code>macroTask</code> 的回调函数中更新数据。比如：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: '&lt;div&gt;{{data}}&lt;/div&gt;';\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  data = 'initial value';\n\n  ngOnInit() {\n    setTimeout(() =&gt; {\n      // user does not need to <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection manually\n      this.data = 'value updated';\n    });\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"p9l367l11wth1420rrlnr3kk\">微任务，比如 <code>Promise.then()</code>。其他异步 API（比如 <code>fetch</code>）会返回 Promise 对象，因此 <code>then()</code> 回调函数也可以更新数据。比如：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: '&lt;div&gt;{{data}}&lt;/div&gt;';\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  data = 'initial value';\n\n  ngOnInit() {\n    Promise.resolve(1).then(v =&gt; {\n      // user does not need to <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection manually\n      this.data = v;\n    });\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9w5gp5fv5iygqf0v69qc0ephv\">其他异步操作。除了 <code>addEventListener()</code>，<code>setTimeout()</code> 和 <code>Promise.then()</code>，还有其他一些操作可以异步更新数据。比如 <code>WebSocket.onmessage()</code> 和 <code>Canvas.toBlob()</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63rzhu7c4ym2ute4wg6or8044\">前面的列表包含应用程序可能会在其中更改数据的最常见场景。只要 Angular 检测到数据可能已更改，就会运行变更检测。变更检测的结果是 DOM 被这些新数据更新。Angular 会以不同的方式检测变化。对于组件初始化，Angular 调用显式变更检测。对于<a href=\"https://developer.mozilla.org/docs/Learn/JavaScript/Asynchronous\">异步操作</a>，Angular 会使用 Zone 在数据可能被修改的地方检测变化，并自动运行变更检测。</p>\n</li>\n</ol>\n<h2 id=\"zones-and-execution-contexts\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kws1qcj8emkpbft1he4c1sta\">Zone 和执行上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#zones-and-execution-contexts\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87h05spvptguj733ofktqs6bs\">Zone 提供了在异步任务之间持久存在的执行上下文。<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/this\">执行上下文</a>是一个抽象概念，用于在当前执行的代码中保存有关环境的信息。考虑以下示例：</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nconst callback = function() {\n  console.log('setTimeout callback context is', this);\n}\n\nconst ctx1 = { name: 'ctx1' };\nconst ctx2 = { name: 'ctx2' };\n\nconst func = function() {\n  console.log('caller context is', this);\n  setTimeout(callback);\n}\n\nfunc.apply(ctx1);\nfunc.apply(ctx2);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"628nob9njlirl2r4gxmkal49z\"><code>setTimeout()</code> 回调中的 <code>this</code> 值可能会有所不同，具体取决于 <code>setTimeout()</code> 的调用时机。因此，你可能会在异步操作中丢失上下文。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y3rc4539nkvu53fd6o4jazm0\">Zone 提供了不同于 <code>this</code> 的新的 Zone 上下文，该 Zone 上下文在异步操作中保持不变。在下例中，新的 Zone 上下文称为 <code>zoneThis</code>。</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nzone.run(() =&gt; {\n  // now you are in a zone\n  expect(zoneThis).toBe(zone);\n  setTimeout(function() {\n    // the zoneThis context will be the same zone\n    // when the setTimeout is scheduled\n    expect(zoneThis).toBe(zone);\n  });\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8z5tg54qyqnc579zxrhu7uz01\">新的上下文 <code>zoneThis</code> 可以从 <code>setTimeout()</code> 的回调函数中检索出来，这个上下文和调用 <code>setTimeout()</code> 时的上下文是一样的。要获取此上下文，可以调用 <a href=\"https://github.com/angular/angular/blob/main/packages/zone.js/lib/zone.ts\"><code>Zone.current</code></a>。</p>\n<h2 id=\"zones-and-async-lifecycle-hooks\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"463pfqp77rgytk6hg29t1l9ls\">Zone 和异步生命周期钩子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#zones-and-async-lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ytbgbieq7rbpuycvsy4qzwry\">Zone.js 可以创建在异步操作中持久存在的上下文，并为异步操作提供生命周期钩子。</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nconst zone = Zone.current.fork({\n  name: 'zone',\n  onScheduleTask: function(delegate, curr, target, task) {\n    console.log('new task is scheduled:', task.type, task.source);\n    return delegate.scheduleTask(target, task);\n  },\n  onInvokeTask: function(delegate, curr, target, task, applyThis, applyArgs) {\n    console.log('task will be invoked:', task.type, task.source);\n    return delegate.invokeTask(target, task, applyThis, applyArgs);\n  },\n  onHasTask: function(delegate, curr, target, hasTaskState) {\n    console.log('task state changed in the zone:', hasTaskState);\n    return delegate.hasTask(target, hasTaskState);\n  },\n  onInvoke: function(delegate, curr, target, callback, applyThis, applyArgs) {\n    console.log('the callback will be invoked:', callback);\n    return delegate.invoke(target, callback, applyThis, applyArgs);\n  }\n});\nzone.run(() =&gt; {\n  setTimeout(() =&gt; {\n    console.log('timeout callback is invoked.');\n  });\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8atnuyyh55ka9v6heyvyhtylm\">上面的示例创建了一个具有多个钩子的 Zone。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hdzcq56uo5re29uitpb25vu5\">当任务状态更改时，就会触发 <code>onXXXTask</code> 钩子。<em>Zone 任务</em>的概念与 JavaScript VM 中任务的概念非常相似：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dq8u5ahdfk5g8m4afy3p370b5\"><code>macroTask</code>：比如 <code>setTimeout()</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zu1eocjrfovli7b76kview6e\"><code>microTask</code>：比如 <code>Promise.then()</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"x9hql8732xlk2jabzoebcok2\"><code>eventTask</code>：比如 <code>element.addEventListener()</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6scv96pot4motu0ukmbbo3v1t\">这些钩子在以下情况下触发：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36efigismza93fw7c8hxduf65\">钩子</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>onScheduleTask</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edncxov8x78xa3tscfm7er09z\">当新的异步任务被调度时触发，例如当你调用 \n<code>setTimeout()</code> 时。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>onInvokeTask</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mkrvfc1nnqeghkwbo0rql0qs\">当即将运行异步任务时触发，例如当 \n<code>setTimeout()</code> 的回调即将运行时。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>onHasTask</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1ypc81fkc7glwa6ufvrppu6o\">当区域内某种类型任务的状态从稳定变为不稳定，或者从不稳定变为稳定时触发。\"稳定\"状态表示区域内没有任务，而\"不稳定\"表示区域内有新任务被调度。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>onInvoke</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dj7bp9pi6c3gr8su6itvot435\">当同步函数将要在区域内运行时触发。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qrcu7nblhhi5dcyfwc4rxwo\">使用这些钩子，<code>Zone</code> 可以监视 Zone 内所有同步和异步操作的状态。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsb0n0roznd56mr4p0kcyujyo\">上面的示例返回以下输出：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nthe callback will be invoked: () =&gt; {\n  setTimeout(() =&gt; {\n    console.log('timeout callback is invoked.');\n  });\n}\nnew task is scheduled: macroTask setTimeout\ntask state changed in the zone: { microTask: false,\n  macroTask: true,\n  eventTask: false,\n  change: 'macroTask' }\ntask will be invoked macroTask: setTimeout\ntimeout callback is invoked.\ntask state changed in the zone: { microTask: false,\n  macroTask: false,\n  eventTask: false,\n  change: 'macroTask' }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1idd1qe35o6bmrm9bbttg3sct\"><code>Zone</code> 的所有函数都由一个名为 <a href=\"https://github.com/angular/angular/tree/main/packages/zone.js/README.md\">Zone.js</a> 的库提供。该库通过猴子补丁拦截异步 API 来实现这些特性。猴子补丁是一种在运行时添加或更改函数的默认行为而不更改源代码的技术。</p>\n<!-- vale Angular.Google_Headings = NO -->\n<h2 id=\"ngzone-1\">NgZone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#ngzone-1\"><i class=\"material-icons\">link</i></a></h2>\n<!-- vale Angular.Google_Headings = YES -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qib3je13d2l6r4mhpyt4jekp\">虽然 Zone.js 可以监视同步和异步操作的所有状态，但 Angular 还提供了一项名为 NgZone 的服务。满足以下条件时，此服务会创建一个名为 <code>angular</code> 的 Zone 来自动触发变更检测。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7cmrlc7s62r84mimskelc3tk\">当执行同步或异步功能时</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b88x8zhb5za8ledyswsj7455t\">已经没有已计划的 <code>microTask</code></li>\n</ol>\n<!-- vale Angular.Google_Headings = NO -->\n<h3 id=\"ngzone-run-and-runoutsideofangular\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"364kjrzpkhutxn0k34uyxo4ru\">NgZone <code>run()</code> 和 <code>runOutsideOfAngular()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#ngzone-run-and-runoutsideofangular\"><i class=\"material-icons\">link</i></a></h3>\n<!-- vale Angular.Google_Headings = YES -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ahsvdnu7zd5hm9cdt5e0ttoa\"><code>Zone</code> 处理大多数异步 API，比如 <code>setTimeout()</code>、<code>Promise.then()</code> 和 <code>addEventListener()</code>。有关完整列表，请参见 <a href=\"https://github.com/angular/angular/blob/main/packages/zone.js/MODULE.md\">Zone 模块的文档</a>。在这些异步 API 中，你无需手动触发变更检测。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6m7wi0lw43z6gqlzav6ibt1d6\">有些第三方 API 没有被 Zone 处理。在这种情况下，<code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 服务提供了 <a href=\"api/core/NgZone#run\"><code>run()</code></a> 方法，该方法允许你在 <code>angular</code> Zone 中执行函数。此函数以及该函数中的所有异步操作会在正确的时间自动触发变更检测。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>) {}\n  ngOnInit() {\n    // New <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> API is not handled by Zone, so you need to use ngZone.run()\n    // to make the asynchronous operation callback in the Angular zone and\n    // <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection automatically.\n    someNewAsyncAPI(() =&gt; {\n      this.ngZone.run(() =&gt; {\n        // update the data of the component\n      });\n    });\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dpxbk24chztb9wxznpoqrprs\">默认情况下，所有异步操作都在 Angular Zone 内，这会自动触发变更检测。另一个常见的情况是你不想触发变更检测。在这种情况下，你可以使用另一个 <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 方法：<a href=\"api/core/NgZone#runoutsideangular\"><code>runOutsideAngular()</code></a>。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>) {}\n  ngOnInit() {\n    // You know no data will be updated,\n    // so you don't want to <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection in this\n    // specified operation. Instead, call ngZone.runOutsideAngular()\n    this.ngZone.runOutsideAngular(() =&gt; {\n      setTimeout(() =&gt; {\n        // update component data\n        // but don't <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection.\n      });\n    });\n  }\n}\n\n</code-example>\n<!-- vale Angular.Google_Headings = NO -->\n<h3 id=\"setting-up-zonejs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ceem7dp09cga9ae6fb5rgpuq1\">设置 Zone.js<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#setting-up-zonejs\"><i class=\"material-icons\">link</i></a></h3>\n<!-- vale Angular.Google_Headings = YES -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kjzzmrutxuup82bibq3vcqxk\">要在 Angular 中使用 Zone.js，你需要导入 \n<code>zone.js</code> 包。 如果你使用 Angular CLI，则此步骤会自动完成，并且你可以在 \n<code>angular.json</code> 中看到以下行：</p>\n<code-example format=\"json\" language=\"json\">\n\n\"polyfills\": [\n  \"zone.js\"\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86b0yy02p7ug39gf577kz73by\">可以更改多个 \n<code>zone.js</code> 设置，如：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2afvczxr5u92dawouaz4ogm7z\">禁用一些异步 API 的猴子补丁，以获得更好的性能。比如，你可以禁用 <code>requestAnimationFrame()</code> 的猴子补丁，这样 <code>requestAnimationFrame()</code> 的回调就不会触发变更检测。如果你的应用程序不会在 <code>requestAnimationFrame()</code> 回调中更新任何数据，则这种方式很有用。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y4vsfv0kse311vge3k1ca2z5\">指定某些 DOM 事件不在 Angular Zone 内运行；比如，为了防止 <code>mousemove</code> 或 <code>scroll</code> 事件来触发变更检测。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewtvca5ox8nde3gb1b9rfsl9\">要进行这些更改，你需要创建一个\n<code>zone-flags.ts</code>文件，内容如下。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// disable patching requestAnimationFrame\n(window as any).__Zone_disable_requestAnimationFrame = true;\n\n// disable patching specified eventNames\n(window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove'];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmg7kf86d0dn6nkah5k9mltad\">接下来，在\n<code>angular.json</code>文件中\n<code>zone.js</code>前添加\n<code>zone-flags</code>：</p>\n<code-example format=\"json\" language=\"json\">\n\n\"polyfills\": [\n  \"src/zone-flags.ts\",\n  \"zone.js\"\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74jw5cv8f0tx2c5z7ypumpvhq\">最后，在\n<code>tsconfig.app.json</code>文件的\n<code>include</code>数组中添加\n<code>zone-flags</code>：</p>\n<code-example format=\"json\" language=\"json\">\n\n\"include\": [\n  \"src/**/*.d.ts\",\n  \"src/zone-flags.ts\"\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aeecqyirth6gbdm9g5ivvxif1\">有关可以配置的内容的更多信息，请参阅<a href=\"https://github.com/angular/angular/tree/main/packages/zone.js\">Zone.js</a>文档。</p>\n<!-- vale Angular.Google_Headings = NO -->\n<h3 id=\"noopzone\">NoopZone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#noopzone\"><i class=\"material-icons\">link</i></a></h3>\n<!-- vale Angular.Google_Headings = YES -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pd6pfrrrw3t9elv1s69p3p77\"><code>Zone</code> 能帮助 Angular 知道何时要触发变更检测，并使开发人员专注于应用开发。默认情况下，<code>Zone</code> 已加载且无需其他配置即可工作。也不是一定要用 <code>Zone</code> 才能使 Angular 工作。相反，你也可以选择自己触发变更检测。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5fxorlflor5abxubo0c8h20l\">禁用 <code>Zone</code></header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxkzqsci0vjkdbk9v3iccparr\"><strong>如果禁用了 <code>Zone</code>，你就要自己在正确的时间触发所有变更检测，这需要你对变更检测机制有全面的了解</strong>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e16oj8ly14xopkh5so219qw6m\">要删除 Zone.js，请进行以下更改。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jbnno4ia3fa1nszgzs6qjuef\">从 <code>polyfills.ts</code> 中移除对 <code>zone.js</code> 的导入：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\n// import 'zone.js';  // Included with Angular CLI.\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5c0ljw2ykupwhn8qmgumwpkfj\">在 <code>src/main.ts</code> 中使用 <code>noop</code> Zone 引导 Angular：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule, { ngZone: 'noop' })\n.catch(err =&gt; console.error(err));\n\n</code-example>\n</li>\n</ol>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Tue Sep 26 2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/animations/trigger\n - api/common/http/HttpClient\n - api/core/ApplicationRef#tick\n - api/core/Component\n - api/core/NgZone\n - api/core/NgZone#run\n - api/core/NgZone#runoutsideangular\n - api/core/OnInit\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/animations/async\n - guide/zone#detecting-changes-with-plain-javascript\n - guide/zone#displaying-and-updating-data-in-angular\n - guide/zone#fundamentals-of-change-detection\n - guide/zone#ngzone\n - guide/zone#ngzone-1\n - guide/zone#ngzone-run-and-runoutsideofangular\n - guide/zone#noopzone\n - guide/zone#setting-up-zonejs\n - guide/zone#when-apps-update-html\n - guide/zone#zones-and-async-lifecycle-hooks\n - guide/zone#zones-and-execution-contexts\n - https://developer.mozilla.org/docs/Learn/JavaScript/Asynchronous\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/this\n - https://en.wikipedia.org/wiki/Thread-local_storage\n - https://github.com/angular/angular/blob/main/packages/zone.js/MODULE.md\n - https://github.com/angular/angular/blob/main/packages/zone.js/lib/zone.ts\n - https://github.com/angular/angular/tree/main/packages/zone.js\n - https://github.com/angular/angular/tree/main/packages/zone.js/README.md\n-->"}
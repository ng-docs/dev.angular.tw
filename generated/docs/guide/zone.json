{"id":"guide/zone","title":"NgZone","contents":"<div class=\"content\">\n  <!-- vale Angular.Google_Headings = NO -->\n<h1 id=\"ngzone\">NgZone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#ngzone\"><i class=\"material-icons\">link</i></a></h1>\n<!-- vale Angular.Google_Headings = YES -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4055wn8ovgybtly1pj3ch2rav\">Zone 是跨非同步任務而持久存在的執行上下文。你可以將其視為 JavaScript VM 中的<a href=\"https://en.wikipedia.org/wiki/Thread-local_storage\">執行緒本地儲存</a>。本指南介紹瞭如何使用 Angular 的 的 NgZone 自動檢測元件中的更改以更新 HTML。</p>\n<h2 id=\"fundamentals-of-change-detection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2aklvwvq5kcglal9kn4yfmte9\">變更檢測的基礎<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#fundamentals-of-change-detection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1skixkab643y7t9e178jd6z3e\">要理解 <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 的好處，重要的是要清楚地瞭解什麼是變更檢測以及它的工作原理。</p>\n<h3 id=\"displaying-and-updating-data-in-angular\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nqtummm4fq3lbehfmnvt91z7\">在 Angular 中顯示和更新資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#displaying-and-updating-data-in-angular\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"pgzr2snv2m35v2xwx0mr38vz\">在 Angular 中，你可以透過將 Angular 元件屬性的值投影到 HTML 範本中來顯示資料。</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;label&gt;My favorite hero is {{hero.name}}&lt;/label&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y0azy46ino82wquirfxp2xer\">另外，你也可以將 DOM 事件繫結到 Angular 元件中的方法。在此類別方法中，你還可以更新 Angular 元件的屬性，該屬性將更新範本中顯示的相應資料。</p>\n<code-example header=\"src/app/click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-click-me',\n  template: ` &lt;button type=\"button\" (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n    {{ clickMessage }}`,\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mmiu75mdgksvwnuwct0qdio9\">在以上兩個範例中，元件的程式碼僅更新元件的屬性。但是，HTML 也會自動更新。本指南介紹了 Angular 如何以及何時根據 Angular 元件中的資料渲染 HTML。</p>\n<h3 id=\"detecting-changes-with-plain-javascript\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4huli7p81ii882hax5druicg6\">使用普通（Plain）JavaScript 檢測更改<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#detecting-changes-with-plain-javascript\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3i9v9n5zad8ig9rtzp6n3f0y\">為了闡明如何檢測到更改和更新值，請考慮以下用普通 JavaScript 編寫的程式碼。</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\n&lt;html&gt;\n  &lt;div id=\"dataDiv\"&gt;&lt;/div&gt;\n  &lt;button id=\"btn\"&gt;updateData&lt;/button&gt;\n  &lt;canvas id=\"canvas\"&gt;&lt;/canvas&gt;\n  &lt;script&gt;\n    let value = 'initialValue';\n    // initial rendering\n    detectChange();\n\n    function renderHTML() {\n      document.getElementById('dataDiv').innerText = value;\n    }\n\n    function detectChange() {\n      const currentValue = document.getElementById('dataDiv').innerText;\n      if (currentValue !== value) {\n        renderHTML();\n      }\n    }\n\n    // Example 1: update data inside button click event handler\n    document.getElementById('btn').addEventListener('click', () =&gt; {\n      // update value\n      value = 'button update value';\n      // call detectChange manually\n      detectChange();\n    });\n\n    // Example 2: HTTP Request\n    const xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', function() {\n      // get response from server\n      value = this.responseText;\n      // call detectChange manually\n      detectChange();\n    });\n    xhr.open('GET', serverUrl);\n    xhr.send();\n\n    // Example 3: setTimeout\n    setTimeout(() =&gt; {\n      // update value inside setTimeout callback\n      value = 'timeout update value';\n      // call detectChange manually\n      detectChange();\n    }, 100);\n\n    // Example 4: Promise.then\n    Promise.resolve('promise resolved a value').then(v =&gt; {\n      // update value inside Promise thenCallback\n      value = v;\n      // call detectChange manually\n      detectChange();\n    });\n\n    // Example 5: some other asynchronous APIs\n    document.getElementById('canvas').toBlob(blob =&gt; {\n      // update value when blob data is created from the canvas\n      value = `value updated by canvas, size is ${blob.size}`;\n      // call detectChange manually\n      detectChange();\n    });\n  &lt;/script&gt;\n&lt;/html&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e22vy4unbqbiuc09xo4utuh7d\">更新資料後，需要呼叫 <code>detectChange()</code> 來檢查資料是否已更改。如果資料已更改，則渲染 HTML 以反映更新的資料。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4ewv14banr6asfnabx2c4rdo\">在 Angular 中，此步驟是不必要的。每當你更新資料時，你的 HTML 都會自動更新。</p>\n<h3 id=\"when-apps-update-html\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rwe9el0zt80gpidvfwjptftp\">應用何時更新 HTML<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#when-apps-update-html\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dje7co6adim2b156rs3kiabom\">要了解變更檢測的工作原理，請首先考慮應用程式何時需要更新 HTML。通常，會由於以下原因之一而發生更新：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8rdq06fj3hg15kx7sypy82mr\">元件初始化。例如，當引導 Angular 應用程式時，Angular 載入引導元件並觸發 \n<a href=\"api/core/ApplicationRef#tick\">ApplicationRef.tick()</a> 來呼叫變更檢測和檢視渲染。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5518qb3lay2fcnjt3d98q6fe9\">事件監聽器。DOM 事件偵聽器可以更新 Angular 元件中的資料，還可以觸發變更檢測，如下例所示。</p>\n<code-example header=\"src/app/click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-click-me',\n  template: ` &lt;button type=\"button\" (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n    {{ clickMessage }}`,\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19gh7tge1pkxhqlwfj4uqqc5r\">HTTP 資料請求。你還可以透過 HTTP 請求從伺服器獲取資料。比如：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: '&lt;div&gt;{{data}}&lt;/div&gt;';\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  data = 'initial value';\n  serverUrl = 'SERVER_URL';\n  constructor(private httpClient: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n\n  ngOnInit() {\n    this.httpClient.get(this.serverUrl).subscribe(response =&gt; {\n      // user does not need to <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection manually\n      this.data = response.data;\n    });\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53bvnb207eum4eklh1bi1wag8\">巨集任務，比如 <code>setTimeout()</code> 或 <code>setInterval()</code>。你還可以在諸如 <code>setTimeout()</code> <code>macroTask</code> 的回呼函式中更新資料。比如：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: '&lt;div&gt;{{data}}&lt;/div&gt;';\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  data = 'initial value';\n\n  ngOnInit() {\n    setTimeout(() =&gt; {\n      // user does not need to <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection manually\n      this.data = 'value updated';\n    });\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"p9l367l11wth1420rrlnr3kk\">微任務，比如 <code>Promise.then()</code>。其他非同步 API（比如 <code>fetch</code>）會回傳 Promise 物件，因此 <code>then()</code> 回呼函式也可以更新資料。比如：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: '&lt;div&gt;{{data}}&lt;/div&gt;';\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  data = 'initial value';\n\n  ngOnInit() {\n    Promise.resolve(1).then(v =&gt; {\n      // user does not need to <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection manually\n      this.data = v;\n    });\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9w5gp5fv5iygqf0v69qc0ephv\">其他非同步操作。除了 <code>addEventListener()</code>，<code>setTimeout()</code> 和 <code>Promise.then()</code>，還有其他一些操作可以非同步更新資料。比如 <code>WebSocket.onmessage()</code> 和 <code>Canvas.toBlob()</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63rzhu7c4ym2ute4wg6or8044\">前面的清單包含應用程式可能會在其中更改資料的最常見場景。只要 Angular 檢測到資料可能已更改，就會執行變更檢測。變更檢測的結果是 DOM 被這些新資料更新。Angular 會以不同的方式檢測變化。對於元件初始化，Angular 呼叫顯式變更檢測。對於<a href=\"https://developer.mozilla.org/docs/Learn/JavaScript/Asynchronous\">非同步操作</a>，Angular 會使用 Zone 在資料可能被修改的地方檢測變化，並自動執行變更檢測。</p>\n</li>\n</ol>\n<h2 id=\"zones-and-execution-contexts\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kws1qcj8emkpbft1he4c1sta\">Zone 和執行上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#zones-and-execution-contexts\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87h05spvptguj733ofktqs6bs\">Zone 提供了在非同步任務之間持久存在的執行上下文。<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/this\">執行上下文</a>是一個抽象概念，用於在當前執行的程式碼中保存有關環境的訊息。考慮以下範例：</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nconst callback = function() {\n  console.log('setTimeout callback context is', this);\n}\n\nconst ctx1 = { name: 'ctx1' };\nconst ctx2 = { name: 'ctx2' };\n\nconst func = function() {\n  console.log('caller context is', this);\n  setTimeout(callback);\n}\n\nfunc.apply(ctx1);\nfunc.apply(ctx2);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"628nob9njlirl2r4gxmkal49z\"><code>setTimeout()</code> 回呼中的 <code>this</code> 值可能會有所不同，具體取決於 <code>setTimeout()</code> 的呼叫時機。因此，你可能會在非同步操作中丟失上下文。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y3rc4539nkvu53fd6o4jazm0\">Zone 提供了不同於 <code>this</code> 的新的 Zone 上下文，該 Zone 上下文在非同步操作中保持不變。在下例中，新的 Zone 上下文稱為 <code>zoneThis</code>。</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nzone.run(() =&gt; {\n  // now you are in a zone\n  expect(zoneThis).toBe(zone);\n  setTimeout(function() {\n    // the zoneThis context will be the same zone\n    // when the setTimeout is scheduled\n    expect(zoneThis).toBe(zone);\n  });\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8z5tg54qyqnc579zxrhu7uz01\">新的上下文 <code>zoneThis</code> 可以從 <code>setTimeout()</code> 的回呼函式中檢索出來，這個上下文和呼叫 <code>setTimeout()</code> 時的上下文是一樣的。要獲取此上下文，可以呼叫 <a href=\"https://github.com/angular/angular/blob/main/packages/zone.js/lib/zone.ts\"><code>Zone.current</code></a>。</p>\n<h2 id=\"zones-and-async-lifecycle-hooks\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"463pfqp77rgytk6hg29t1l9ls\">Zone 和非同步生命週期鉤子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#zones-and-async-lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ytbgbieq7rbpuycvsy4qzwry\">Zone.js 可以建立在非同步操作中持久存在的上下文，併為非同步操作提供生命週期鉤子。</p>\n<code-example format=\"javascript\" language=\"javascript\">\n\nconst zone = Zone.current.fork({\n  name: 'zone',\n  onScheduleTask: function(delegate, curr, target, task) {\n    console.log('new task is scheduled:', task.type, task.source);\n    return delegate.scheduleTask(target, task);\n  },\n  onInvokeTask: function(delegate, curr, target, task, applyThis, applyArgs) {\n    console.log('task will be invoked:', task.type, task.source);\n    return delegate.invokeTask(target, task, applyThis, applyArgs);\n  },\n  onHasTask: function(delegate, curr, target, hasTaskState) {\n    console.log('task state changed in the zone:', hasTaskState);\n    return delegate.hasTask(target, hasTaskState);\n  },\n  onInvoke: function(delegate, curr, target, callback, applyThis, applyArgs) {\n    console.log('the callback will be invoked:', callback);\n    return delegate.invoke(target, callback, applyThis, applyArgs);\n  }\n});\nzone.run(() =&gt; {\n  setTimeout(() =&gt; {\n    console.log('timeout callback is invoked.');\n  });\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8atnuyyh55ka9v6heyvyhtylm\">上面的範例建立了一個具有多個鉤子的 Zone。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hdzcq56uo5re29uitpb25vu5\">當任務狀態更改時，就會觸發 <code>onXXXTask</code> 鉤子。<em>Zone 任務</em>的概念與 JavaScript VM 中任務的概念非常相似：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dq8u5ahdfk5g8m4afy3p370b5\"><code>macroTask</code>：比如 <code>setTimeout()</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zu1eocjrfovli7b76kview6e\"><code>microTask</code>：比如 <code>Promise.then()</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"x9hql8732xlk2jabzoebcok2\"><code>eventTask</code>：比如 <code>element.addEventListener()</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6scv96pot4motu0ukmbbo3v1t\">這些鉤子在以下情況下觸發：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36efigismza93fw7c8hxduf65\">鉤子</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>onScheduleTask</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edncxov8x78xa3tscfm7er09z\">當新的非同步任務被排程時觸發，例如當你呼叫 \n<code>setTimeout()</code> 時。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>onInvokeTask</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mkrvfc1nnqeghkwbo0rql0qs\">當即將執行非同步任務時觸發，例如當 \n<code>setTimeout()</code> 的回呼即將執行時。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>onHasTask</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1ypc81fkc7glwa6ufvrppu6o\">當區域內某種型別任務的狀態從穩定變為不穩定，或者從不穩定變為穩定時觸發。\"穩定\"狀態表示區域內沒有任務，而\"不穩定\"表示區域內有新任務被排程。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>onInvoke</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dj7bp9pi6c3gr8su6itvot435\">當同步函式將要在區域內執行時觸發。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qrcu7nblhhi5dcyfwc4rxwo\">使用這些鉤子，<code>Zone</code> 可以監視 Zone 內所有同步和非同步操作的狀態。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsb0n0roznd56mr4p0kcyujyo\">上面的範例回傳以下輸出：</p>\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nthe callback will be invoked: () =&gt; {\n  setTimeout(() =&gt; {\n    console.log('timeout callback is invoked.');\n  });\n}\nnew task is scheduled: macroTask setTimeout\ntask state changed in the zone: { microTask: false,\n  macroTask: true,\n  eventTask: false,\n  change: 'macroTask' }\ntask will be invoked macroTask: setTimeout\ntimeout callback is invoked.\ntask state changed in the zone: { microTask: false,\n  macroTask: false,\n  eventTask: false,\n  change: 'macroTask' }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1idd1qe35o6bmrm9bbttg3sct\"><code>Zone</code> 的所有函式都由一個名為 <a href=\"https://github.com/angular/angular/tree/main/packages/zone.js/README.md\">Zone.js</a> 的函式庫提供。該函式庫透過猴子補丁攔截非同步 API 來實現這些屬性。猴子補丁是一種在執行時新增或更改函式的預設行為而不更改原始碼的技術。</p>\n<!-- vale Angular.Google_Headings = NO -->\n<h2 id=\"ngzone-1\">NgZone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#ngzone-1\"><i class=\"material-icons\">link</i></a></h2>\n<!-- vale Angular.Google_Headings = YES -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4qib3je13d2l6r4mhpyt4jekp\">雖然 Zone.js 可以監視同步和非同步操作的所有狀態，但 Angular 還提供了一項名為 NgZone 的服務。滿足以下條件時，此服務會建立一個名為 <code>angular</code> 的 Zone 來自動觸發變更檢測。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7cmrlc7s62r84mimskelc3tk\">當執行同步或非同步功能時</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b88x8zhb5za8ledyswsj7455t\">已經沒有已計劃的 <code>microTask</code></li>\n</ol>\n<!-- vale Angular.Google_Headings = NO -->\n<h3 id=\"ngzone-run-and-runoutsideofangular\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"364kjrzpkhutxn0k34uyxo4ru\">NgZone <code>run()</code> 和 <code>runOutsideOfAngular()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#ngzone-run-and-runoutsideofangular\"><i class=\"material-icons\">link</i></a></h3>\n<!-- vale Angular.Google_Headings = YES -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ahsvdnu7zd5hm9cdt5e0ttoa\"><code>Zone</code> 處理大多數非同步 API，比如 <code>setTimeout()</code>、<code>Promise.then()</code> 和 <code>addEventListener()</code>。有關完整清單，請參見 <a href=\"https://github.com/angular/angular/blob/main/packages/zone.js/MODULE.md\">Zone 模組的文件</a>。在這些非同步 API 中，你無需手動觸發變更檢測。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6m7wi0lw43z6gqlzav6ibt1d6\">有些第三方 API 沒有被 Zone 處理。在這種情況下，<code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 服務提供了 <a href=\"api/core/NgZone#run\"><code>run()</code></a> 方法，該方法允許你在 <code>angular</code> Zone 中執行函式。此函式以及該函式中的所有非同步操作會在正確的時間自動觸發變更檢測。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>) {}\n  ngOnInit() {\n    // New <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> API is not handled by Zone, so you need to use ngZone.run()\n    // to make the asynchronous operation callback in the Angular zone and\n    // <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection automatically.\n    someNewAsyncAPI(() =&gt; {\n      this.ngZone.run(() =&gt; {\n        // update the data of the component\n      });\n    });\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dpxbk24chztb9wxznpoqrprs\">預設情況下，所有非同步操作都在 Angular Zone 內，這會自動觸發變更檢測。另一個常見的情況是你不想觸發變更檢測。在這種情況下，你可以使用另一個 <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 方法：<a href=\"api/core/NgZone#runoutsideangular\"><code>runOutsideAngular()</code></a>。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>) {}\n  ngOnInit() {\n    // You know no data will be updated,\n    // so you don't want to <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection in this\n    // specified operation. Instead, call ngZone.runOutsideAngular()\n    this.ngZone.runOutsideAngular(() =&gt; {\n      setTimeout(() =&gt; {\n        // update component data\n        // but don't <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> change detection.\n      });\n    });\n  }\n}\n\n</code-example>\n<!-- vale Angular.Google_Headings = NO -->\n<h3 id=\"setting-up-zonejs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ceem7dp09cga9ae6fb5rgpuq1\">設定 Zone.js<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#setting-up-zonejs\"><i class=\"material-icons\">link</i></a></h3>\n<!-- vale Angular.Google_Headings = YES -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kjzzmrutxuup82bibq3vcqxk\">要在 Angular 中使用 Zone.js，你需要匯入 \n<code>zone.js</code> 套件。 如果你使用 Angular CLI，則此步驟會自動完成，並且你可以在 \n<code>angular.json</code> 中看到以下行：</p>\n<code-example format=\"json\" language=\"json\">\n\n\"polyfills\": [\n  \"zone.js\"\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86b0yy02p7ug39gf577kz73by\">可以更改多個 \n<code>zone.js</code> 設定，如：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2afvczxr5u92dawouaz4ogm7z\">停用一些非同步 API 的猴子補丁，以獲得更好的效能。比如，你可以停用 <code>requestAnimationFrame()</code> 的猴子補丁，這樣 <code>requestAnimationFrame()</code> 的回呼就不會觸發變更檢測。如果你的應用程式不會在 <code>requestAnimationFrame()</code> 回呼中更新任何資料，則這種方式很有用。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y4vsfv0kse311vge3k1ca2z5\">指定某些 DOM 事件不在 Angular Zone 內執行；比如，為了防止 <code>mousemove</code> 或 <code>scroll</code> 事件來觸發變更檢測。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewtvca5ox8nde3gb1b9rfsl9\">要進行這些更改，你需要建立一個\n<code>zone-flags.ts</code>檔案，內容如下。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// disable patching requestAnimationFrame\n(window as any).__Zone_disable_requestAnimationFrame = true;\n\n// disable patching specified eventNames\n(window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove'];\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmg7kf86d0dn6nkah5k9mltad\">接下來，在\n<code>angular.json</code>檔案中\n<code>zone.js</code>前新增\n<code>zone-flags</code>：</p>\n<code-example format=\"json\" language=\"json\">\n\n\"polyfills\": [\n  \"src/zone-flags.ts\",\n  \"zone.js\"\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74jw5cv8f0tx2c5z7ypumpvhq\">最後，在\n<code>tsconfig.app.json</code>檔案的\n<code>include</code>陣列中新增\n<code>zone-flags</code>：</p>\n<code-example format=\"json\" language=\"json\">\n\n\"include\": [\n  \"src/**/*.d.ts\",\n  \"src/zone-flags.ts\"\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aeecqyirth6gbdm9g5ivvxif1\">有關可以設定的內容的更多訊息，請參閱<a href=\"https://github.com/angular/angular/tree/main/packages/zone.js\">Zone.js</a>文件。</p>\n<!-- vale Angular.Google_Headings = NO -->\n<h3 id=\"noopzone\">NoopZone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/zone#noopzone\"><i class=\"material-icons\">link</i></a></h3>\n<!-- vale Angular.Google_Headings = YES -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pd6pfrrrw3t9elv1s69p3p77\"><code>Zone</code> 能幫助 Angular 知道何時要觸發變更檢測，並使開發人員專注於應用開發。預設情況下，<code>Zone</code> 已載入且無需其他設定即可工作。也不是一定要用 <code>Zone</code> 才能使 Angular 工作。相反，你也可以選擇自己觸發變更檢測。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5fxorlflor5abxubo0c8h20l\">停用 <code>Zone</code></header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxkzqsci0vjkdbk9v3iccparr\"><strong>如果停用了 <code>Zone</code>，你就要自己在正確的時間觸發所有變更檢測，這需要你對變更檢測機制有全面的瞭解</strong>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e16oj8ly14xopkh5so219qw6m\">要刪除 Zone.js，請進行以下更改。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jbnno4ia3fa1nszgzs6qjuef\">從 <code>polyfills.ts</code> 中移除對 <code>zone.js</code> 的匯入：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\n// import 'zone.js';  // Included with Angular CLI.\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5c0ljw2ykupwhn8qmgumwpkfj\">在 <code>src/main.ts</code> 中使用 <code>noop</code> Zone 引導 Angular：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule, { ngZone: 'noop' })\n.catch(err =&gt; console.error(err));\n\n</code-example>\n</li>\n</ol>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Tue Sep 26 2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/animations/trigger\n - api/common/http/HttpClient\n - api/core/ApplicationRef#tick\n - api/core/Component\n - api/core/NgZone\n - api/core/NgZone#run\n - api/core/NgZone#runoutsideangular\n - api/core/OnInit\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/animations/async\n - guide/zone#detecting-changes-with-plain-javascript\n - guide/zone#displaying-and-updating-data-in-angular\n - guide/zone#fundamentals-of-change-detection\n - guide/zone#ngzone\n - guide/zone#ngzone-1\n - guide/zone#ngzone-run-and-runoutsideofangular\n - guide/zone#noopzone\n - guide/zone#setting-up-zonejs\n - guide/zone#when-apps-update-html\n - guide/zone#zones-and-async-lifecycle-hooks\n - guide/zone#zones-and-execution-contexts\n - https://developer.mozilla.org/docs/Learn/JavaScript/Asynchronous\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/this\n - https://en.wikipedia.org/wiki/Thread-local_storage\n - https://github.com/angular/angular/blob/main/packages/zone.js/MODULE.md\n - https://github.com/angular/angular/blob/main/packages/zone.js/lib/zone.ts\n - https://github.com/angular/angular/tree/main/packages/zone.js\n - https://github.com/angular/angular/tree/main/packages/zone.js/README.md\n-->"}
{"id":"guide/signal-queries","title":"信号查询","contents":"<div class=\"content\">\n  <h1 id=\"signal-queries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"al58ovkri23bhkzbju7vytf9k\">信号查询<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#signal-queries\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7tq4tuiafsdh5fjg6upd5x47v\">组件或指令可以定义查询，查找子元素并从它们的注入器中读取数值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ax87wkt9uvslck2z9n4qjhtd\">开发者最常用查询来检索对组件、指令、DOM元素等的引用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eutcarm9m9xyzdxvrqnf0apc0\">查询分为两类：视图查询和内容查询。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jgygctx70sw2ycvs5ma67fxt\">信号查询将查询结果提供为响应式信号原语。您可以在\n<code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code>和\n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>中使用查询结果，将这些结果与其他信号组合。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8azagb48szk03py1nekkau9ke\">信号查询处于\n<a href=\"/guide/releases#developer-preview\">开发者预览</a>阶段。根据反馈，API可能会更改，而无需经历 Angular 的弃用周期。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bk67b0h1ltezn0pc4xv0tx18\">如果您已经熟悉 Angular 查询，可以直接跳转到\n<a href=\"guide/signal-queries#comparing-signal-based-queries-to-decorator-based-queries\">比较基于信号的查询和基于装饰器的查询</a></p>\n<h2 id=\"view-queries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2a5tlqpspdydex6hp9edul2jb\">视图查询<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#view-queries\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9f7o8o5f3ird3jfscvyrhbrhe\">视图查询从组件自己的模板（视图）中的元素中检索结果。</p>\n<h3 id=\"viewchild\"><code><a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#viewchild\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axeo86qd9cbqud5k2ylwtwj1f\">您可以使用\n<code><a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a></code>函数声明针对单个结果的查询。</p>\n<code-example language=\"ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n    template: `\n        &lt;div #el&gt;&lt;/div&gt;\n        &lt;my-component /&gt;\n    `\n})\nexport class TestComponent {\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> for a single result by a string predicate  \n    divEl = <a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a>&lt;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>&gt;('el');       // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>|undefined&gt;\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> for a single result by a type predicate\n    cmp = <a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a>(MyComponent);              // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;MyComponent|undefined&gt;\n}\n</code-example>\n<h3 id=\"viewchildren\"><code><a href=\"api/core/viewChildren\" class=\"code-anchor\">viewChildren</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#viewchildren\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65l3xfzv4t2bb6f5bjo61m5iz\">您还可以使用\n<code><a href=\"api/core/viewChildren\" class=\"code-anchor\">viewChildren</a></code>函数查询多个结果。</p>\n<code-example language=\"ts\">\n @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n    template: `\n        &lt;div #el&gt;&lt;/div&gt;\n        @if (show) {\n            &lt;div #el&gt;&lt;/div&gt;\n        }\n    `\n})\nexport class TestComponent {\n    show = true;\n\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> for <a href=\"api/forms/SelectMultipleControlValueAccessor\" class=\"code-anchor\">multiple</a> results\n    divEls = <a href=\"api/core/viewChildren\" class=\"code-anchor\">viewChildren</a>&lt;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>&gt;('el');        // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;ReadonlyArray&lt;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>&gt;&gt;\n}\n</code-example>\n<h3 id=\"view-query-options\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21hecleojc2h4569hm9tax35e\">视图查询选项<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#view-query-options\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59ltt1zyjoatrowbm93ear91l\"><code><a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a></code>和\n<code><a href=\"api/core/viewChildren\" class=\"code-anchor\">viewChildren</a></code>查询声明函数具有类似的签名，接受两个参数：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuqijjy0g5gpk6mzrq2uy2fhz\">一个\n<strong>定位器</strong>来指定查询目标-可以是一个\n<code>string</code>或任何可注入的标记</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arwih0elwk87ha8e4e3pfc6zw\">一组\n<strong>选项</strong>以调整给定查询的行为。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfmwi8fzq0ms9ec7377hmjzfx\">基于信号的视图查询仅接受一个选项：\n<code>read</code>。 \n<code>read</code>选项指示要从匹配节点中注入并在最终结果中返回的结果类型。</p>\n<code-example language=\"ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n    template: `&lt;my-component/&gt;`\n})\nexport class TestComponent {\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> for a single result with options\n    cmp = <a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a>(MyComponent, {read: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>});   // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>|undefined&gt;\n}\n</code-example>\n<h2 id=\"content-queries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ay96wu6bnipmgxe6mr7tio2qp\">内容查询<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#content-queries\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bk1grqdhevgk6iqazqy3myoxf\">内容查询从组件内容中的元素中检索结果 - 这些元素嵌套在模板中使用组件标记内部。</p>\n<h3 id=\"contentchild\"><code><a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#contentchild\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8zprc2pyo8ot4ajeyl1wz47f\">你可以使用 \n<code><a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a></code> 函数查询单个结果。</p>\n<code-example language=\"ts\">\n @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({...})\n export class TestComponent {\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> by a string predicate  \n    headerEl = <a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a>&lt;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>&gt;('h');                    // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>|undefined&gt;\n\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> by a type predicate\n    header = <a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a>(MyHeader);                             // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;MyHeader|undefined&gt;\n }\n</code-example>\n<h3 id=\"contentchildren\"><code><a href=\"api/core/contentChildren\" class=\"code-anchor\">contentChildren</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#contentchildren\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"602h0rhv3kkw46pwvkhxjlfmy\">你也可以使用 \n<code><a href=\"api/core/contentChildren\" class=\"code-anchor\">contentChildren</a></code> 函数查询多个结果。</p>\n<code-example language=\"ts\">\n @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({...})\n export class TestComponent {\n    // <a href=\"api/animations/query\" class=\"code-anchor\">query</a> for <a href=\"api/forms/SelectMultipleControlValueAccessor\" class=\"code-anchor\">multiple</a> results\n    divEls = <a href=\"api/core/contentChildren\" class=\"code-anchor\">contentChildren</a>&lt;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>&gt;('h');                  // <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;ReadonlyArray&lt;<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>&gt;&gt;\n }\n</code-example>\n<h3 id=\"content-query-options\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a43dlp424jdrycvcwgt0d0jb8\">内容查询选项<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#content-query-options\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53skkezhv7f4zngm8ryj1ez65\"><code><a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a></code> 和 \n<code><a href=\"api/core/contentChildren\" class=\"code-anchor\">contentChildren</a></code> 查询声明函数具有类似的签名，接受两个参数：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuqijjy0g5gpk6mzrq2uy2fhz\">一个\n<strong>定位器</strong>来指定查询目标-可以是一个\n<code>string</code>或任何可注入的标记</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arwih0elwk87ha8e4e3pfc6zw\">一组\n<strong>选项</strong>以调整给定查询的行为。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cugs45okyduw16rpjyybmwav\">内容查询接受以下选项：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"khjovquzc4sll3ij0vg2ue3g\"><code>descendants</code> 默认情况下，内容查询仅查找组件的直接子元素，并不遍历到子代。如果将此选项更改为 \n<code>true</code>，查询结果将包括元素的所有子代。然而，即使为 \n<code>true</code>，查询\n<b>永远</b>不会遍历到组件中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51idji9gnsvqa9zycu52rzfgu\"><code>read</code> 表示从匹配节点中检索并在最终结果中返回的结果类型。</li>\n</ul>\n<h3 id=\"required-child-queries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4flhso3g3c7m6lk1svxtvhnrt\">必需的子查询<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#required-child-queries\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nureowc2qk8w70tsb66yjqkc\">如果子查询 (\n<code><a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a></code> 或 \n<code><a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a></code>) 没有找到结果，其值为 \n<code>undefined</code>。如果目标元素被 \n<code><a href=\"api/core/if\" class=\"code-anchor\">@if</a></code> 或 \n<code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> 等控制流语句隐藏，可能会发生这种情况。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnodueu7pjac3i3suqelbvb0j\">因此，子查询返回一个潜在具有 \n<code>undefined</code> 值的信号。大多数情况下，特别是对于视图子查询，开发者编写代码以确保：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7civr90h3s2pjdyscrk2uzt6\">至少有一个匹配结果；</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ocvwb6uu22fnuuh13hbxbohg\">在模板处理后访问结果并查询结果可用。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3tsfbd9k8as1hm4bccvpsekt\">对于这种情况，你可以将子查询标记为 \n<code>required</code>，以强制至少存在一个匹配结果。这将从结果类型签名中清除 \n<code>undefined</code>。如果 \n<code>required</code> 查询没有找到任何结果，Angular 将抛出错误。</p>\n<code-example language=\"ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  standalone: true,\n  template: `\n    &lt;div #requiredEl&gt;&lt;/div&gt;\n  `,\n})\nexport class App {\n  existingEl = viewChild.required('requiredEl');     // required and existing result\n  missingEl = viewChild.required('notInATemplate'); // required but NOT existing result\n  \n  ngAfterViewInit() {\n    console.log(this.existingEl()); // OK :-)\n    console.log(this.missingEl());  // Runtime error: result marked as required but not available!\n  }\n}\n</code-example>\n<h2 id=\"results-availability-timing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3mcjezgkyclrifsk25n59ijt5\">结果可用性时间<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#results-availability-timing\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"62tbj3dmbcotmpnvicqs6d2ug\">作为指令实例构造的一部分，信号查询作者函数将被执行。这发生在我们能够创建查询实例并执行模板的创建模式以收集任何匹配项之前。因此，存在一个时间段，在这段时间内信号实例已创建（并可读取），但尚未收集到任何查询结果。在结果可用之前，默认情况下 Angular 将返回 \n<code>undefined</code>（对于子查询）或空数组（对于子查询）。在此时访问必需查询将抛出错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mez3bscy3nwzpx5w7fo6pzl7\">Angular 惰性计算基于信号的查询结果，按需计算。这意味着除非有一个读取信号的代码路径，否则不会收集查询结果。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3lstabuvwnzqy165hqr4z09n\">由于视图操作 - 无论是通过 Angular 的控制流（\n<code><a href=\"api/core/if\" class=\"code-anchor\">@if</a></code>、\n<code><a href=\"api/core/for\" class=\"code-anchor\">@for</a></code> 等）还是通过直接调用 \n<code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> API - 查询结果可能随时间变化。当从查询结果信号中读取值时，你可能会随时间收到不同的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6yabdhwr9c8vj1w5otgb1mbpc\">注意：为避免在渲染模板时返回不完整的查询结果，Angular 延迟查询解析，直到完成渲染给定模板。</p>\n<h2 id=\"query-declarations-functions-and-the-associated-rules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xgxs49bbr3cvd5lcg9ptsv59\">查询声明函数和相关规则<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#query-declarations-functions-and-the-associated-rules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8u2n4z1b77k2d71eelkcelnmg\">Angular 编译器识别的特殊函数包括 \n<code><a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a></code>、\n<code><a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a></code>、\n<code><a href=\"api/core/viewChildren\" class=\"code-anchor\">viewChildren</a></code> 和 \n<code><a href=\"api/core/contentChildren\" class=\"code-anchor\">contentChildren</a></code>。你可以通过初始化组件或指令属性来使用这些函数声明查询。在组件和指令属性初始化器之外，你无法调用这些函数。</p>\n<code-example language=\"ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  standalone: true,\n  template: `\n    &lt;div #el&gt;&lt;/div&gt;\n  `,\n})\nexport class App {\n  el = <a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a>('el'); // all good!\n\n  constructor() {\n    const myConst = <a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a>('el'); // NOT SUPPORTED\n  }\n}\n</code-example>\n<h2 id=\"comparing-signal-based-queries-to-decorator-based-queries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5f7yu16l5aqrist9m73g7j3\">将基于信号的查询与基于装饰器的查询进行比较<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-queries#comparing-signal-based-queries-to-decorator-based-queries\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vfmf6ep3vr3ac578tqcz5li1\">信号查询是一种替代方法，用于替代使用 \n<code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code>、\n<code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code>、\n<code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a></code> 或 \n<code>@<a href=\"api/core/ViewChildren\" class=\"code-anchor\">ViewChildren</a></code> 装饰器声明的查询。这种新方法将查询结果暴露为信号，这意味着查询结果可以与其他信号（使用 \n<code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code> 或 \n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>）进行组合并驱动变更检测。此外，基于信号的查询系统还提供其他优点：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b98tw29j0vtm3fgi5lfsfdhb\"><strong>更可预测的时间。</strong> 你可以在查询结果可用时立即访问它们。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yb4dkt3q6nauqcybc1pay9m\"><strong>更简单的 API 表面。</strong> 所有查询都返回一个信号，并且具有多个结果的查询允许你使用标准数组处理。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51qku5aanh1cfm7nh6q5kmtq3\"><strong>改进的类型安全性。</strong> 较少的查询用例包括 \n<code>undefined</code> 在可能的结果中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3c20wxlb8ox680voicd89rapp\"><strong>更准确的类型推断。</strong> 当使用类型断言或指定显式 \n<code>read</code> 选项时，TypeScript 可以推断出更准确的类型。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ptmkvdlpmwev2zlcxtg12sw3\"><strong>更懒惰的更新。</strong> - Angular 懒惰地更新基于信号的查询结果；框架只有在你的代码明确读取查询结果时才会执行工作。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tik8y3stjvmf0ax4d6czoj5q\">底层查询机制并没有太大变化 - 从概念上讲，Angular 仍然创建针对模板（视图）或内容中的元素的单数“child”或复数“children”查询。区别在于结果类型和结果可用性的确切时机。声明基于信号的查询的作者格式也发生了变化：作为类成员的初始化器的 \n<code><a href=\"api/core/viewChild\" class=\"code-anchor\">viewChild</a></code>、\n<code><a href=\"api/core/viewChildren\" class=\"code-anchor\">viewChildren</a></code>、\n<code><a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a></code> 和 \n<code><a href=\"api/core/contentChildren\" class=\"code-anchor\">contentChildren</a></code> 函数会被 Angular 自动识别。</p>\n\n  \n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /guide/releases#developer-preview\n - api/animations/query\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/ElementRef\n - api/core/Signal\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/core/ViewContainerRef\n - api/core/computed\n - api/core/contentChild\n - api/core/contentChildren\n - api/core/effect\n - api/core/for\n - api/core/if\n - api/core/viewChild\n - api/core/viewChildren\n - api/forms/SelectMultipleControlValueAccessor\n - guide/signal-queries#comparing-signal-based-queries-to-decorator-based-queries\n - guide/signal-queries#content-queries\n - guide/signal-queries#content-query-options\n - guide/signal-queries#contentchild\n - guide/signal-queries#contentchildren\n - guide/signal-queries#query-declarations-functions-and-the-associated-rules\n - guide/signal-queries#required-child-queries\n - guide/signal-queries#results-availability-timing\n - guide/signal-queries#signal-queries\n - guide/signal-queries#view-queries\n - guide/signal-queries#view-query-options\n - guide/signal-queries#viewchild\n - guide/signal-queries#viewchildren\n-->"}
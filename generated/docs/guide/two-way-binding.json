{"id":"guide/two-way-binding","title":"雙向繫結","contents":"<div class=\"content\">\n  <h1 id=\"two-way-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4xy6wmoza9k1s7w2doa894ml4\">雙向繫結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#two-way-binding\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9g06dg2gj9wereejs8mkw87ym\">雙向繫結為應用中的元件提供了一種共享資料的方式。使用雙向繫結繫結來偵聽事件並在父元件和子元件之間同步更新值。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81el5yk7yllx1tewd03bnp7o0\">本章包含程式碼片段的工作實例參閱<live-example></live-example>。</p>\n</div>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33l66qy4h4zsq35xy7yksmoq9\">為了充分利用雙向繫結，你應該對以下概念有基本的瞭解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mfyxx87fibqbnu58gbuv5vkk\"><a href=\"guide/property-binding\">屬性繫結</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tdxpqx0gzw605pst3e974rgi\"><a href=\"guide/event-binding\">事件繫結</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xwvk9gjs0500yzvzsybwxoav\"><a href=\"guide/inputs-outputs\">輸入和輸出</a></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j6p3p8tyvteh0w3b63ygpf9d\">雙向繫結將屬性繫結與事件繫結結合在一起：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jkz5u13vo6be1cpi42eb3su9\">繫結</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mfyxx87fibqbnu58gbuv5vkk\"><a href=\"guide/property-binding\">屬性繫結</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8v7kwbdbhvsxuwi1wdw7xu1cg\">設定特定元素屬性。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tdxpqx0gzw605pst3e974rgi\"><a href=\"guide/event-binding\">事件繫結</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7loxtc8s90a5nlo3efuj09ug\">監聽元素更改事件。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"adding-two-way-data-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u9e81pwlktkxfsku6v1pacfw\">新增雙向資料繫結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#adding-two-way-data-binding\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9d8f54219x0hduqj8tzi7vidz\">Angular 的雙向綁定語法是方括號和圓括號的組合 <code>[()]</code>。<code>[]</code> 進行屬性繫結，<code>()</code> 進行事件繫結，如下所示。</p>\n<code-example header=\"src/app/app.component.html\" path=\"two-way-binding/src/app/app.component.html\" region=\"two-way-syntax\">\n&lt;app-sizer [(size)]=\"fontSizePx\"&gt;&lt;/app-sizer&gt;\n\n</code-example>\n<h2 id=\"how-two-way-binding-works\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezl2stpm63u8kwjvz6yewrlmg\">雙向繫結工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#how-two-way-binding-works\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"t3xe7l4b8konr7lsk4z7y1yn\">為了使雙向資料繫結有效，<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 屬性的名字必須遵循 <code>inputChange</code> 模式，其中 <code>input</code> 是相應 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 屬性的名字。比如，如果 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 屬性為 <code>size</code>，則 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 屬性必須為 <code>sizeChange</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pu9pak4fvlrx56oefafkbt41\">後面的 <code>sizerComponent</code> 具有值屬性 <code>size</code> 和事件屬性 <code>sizeChange</code>。<code>size</code> 屬性是 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>，因此資料可以流入 <code>sizerComponent</code>。<code>sizeChange</code> 事件是一個 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，它允許資料從 <code>sizerComponent</code> 流出到父元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1a4w6hzvsxi6l3oc27s0n1y4v\">接下來，有兩個方法，<code>dec()</code> 用於減小字型大小，<code>inc()</code> 用於增大字型大小。這兩種方法使用 <code>resize()</code> 在最小/最大值的約束內更改 <code>size</code> 屬性的值，併發出帶有新 <code>size</code> 值的事件。</p>\n<code-example header=\"src/app/sizer.component.ts\" path=\"two-way-binding/src/app/sizer/sizer.component.ts\" region=\"sizer-component\">\nexport class SizerComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() size!: number | string;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() sizeChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;number&gt;();\n\n  dec() {\n    this.resize(-1);\n  }\n  inc() {\n    this.resize(+1);\n  }\n\n  resize(delta: number) {\n    this.size = Math.min(40, Math.max(8, +this.size + delta));\n    this.sizeChange.emit(this.size);\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezo8fd4lrd89v5967wkb011pc\"><code>sizerComponent</code> 範本有兩個按鈕，分別將 click 事件繫結到 <code>inc()</code> 和 <code>dec()</code> 方法。當用戶單擊按鈕之一時，<code>sizerComponent</code> 呼叫相應的方法。<code>inc()</code> 和 <code>dec()</code> 這兩個方法分別使用 <code>+1</code> 或 <code>-1</code> 呼叫 <code>resize()</code> 方法，它使用新的 size 值引發 <code>sizeChange</code> 事件。</p>\n<code-example header=\"src/app/sizer.component.html\" path=\"two-way-binding/src/app/sizer/sizer.component.html\">\n&lt;div&gt;\n  &lt;button type=\"button\" (click)=\"dec()\" title=\"smaller\"&gt;-&lt;/button&gt;\n  &lt;button type=\"button\" (click)=\"inc()\" title=\"bigger\"&gt;+&lt;/button&gt;\n  &lt;span [style.font-size.px]=\"size\"&gt;FontSize: {{size}}px&lt;/span&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ibjqugfpc79jory48zekk3dj\">在 <code>AppComponent</code> 範本中，<code>fontSizePx</code> 被雙向繫結到 <code>SizerComponent</code>。</p>\n<code-example header=\"src/app/app.component.html\" path=\"two-way-binding/src/app/app.component.html\" region=\"two-way-1\">\n&lt;app-sizer [(size)]=\"fontSizePx\"&gt;&lt;/app-sizer&gt;\n&lt;div [style.font-size.px]=\"fontSizePx\"&gt;Resizable Text&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ooxgu3xpkopt8cqnln1a81ck\">在 <code>AppComponent</code> 中，透過將 <code>fontSizePx</code> 的值設定為 <code>16</code> 來設定初始 <code>SizerComponent.size</code> 值。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"two-way-binding/src/app/app.component.ts\" region=\"font-size\">\nfontSizePx = 16;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87oh3ji9uma5b35mukyhfegjb\">單擊這些按鈕將更新 <code>AppComponent.fontSizePx</code>。修改後的 <code>AppComponent.fontSizePx</code> 值將更新樣式繫結，從而使顯示的文字變大或變小。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"digpqq5f7u3nu774pyinfvvu9\">雙向綁定語法是屬性繫結和事件繫結的組合的簡寫形式。拆成單獨的屬性繫結和事件繫結形式的 <code>SizerComponent</code> 程式碼如下。</p>\n<code-example header=\"src/app/app.component.html (expanded)\" path=\"two-way-binding/src/app/app.component.html\" region=\"two-way-2\">\n&lt;app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\"&gt;&lt;/app-sizer&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clbhh230zfc35pd3e772s7ffg\"><code>$event</code> 變數包含 <code>SizerComponent.sizeChange</code> 事件的資料。當用戶單擊按鈕時，Angular 將 <code>$event</code> 賦值給 <code>AppComponent.fontSizePx</code>。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ez9l4pt3my0r7tbygo231zdax\">表單中的雙向繫結</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68x7f3v4ajtp0iq254t2t5m53\">因為沒有任何原生 HTML 元素遵循了 <code>x</code> 值和 <code>xChange</code> 事件的命名模式，所以與表單元素進行雙向繫結需要使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code>。關於如何在表單中使用雙向繫結的更多訊息，請參見 Angular <a href=\"guide/built-in-directives#ngModel\">NgModel</a>。</p>\n</div>\n<h2 id=\"two-way-binding-to-signals\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8hkch4u4ha37ki36uqg9incce\">雙向繫結到訊號<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#two-way-binding-to-signals\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1h3r67elxbzsp3yy2csxe7wg\">Angular支援將普通值和訊號繫結到雙向繫結中。如果將可寫訊號傳遞給雙向繫結，Angular將自動保持其與底層輸入和輸出同步。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: '&lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"name\"&gt;',\n  imports: [<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>]\n})\nexport class MyComp {\n  name = <a href=\"api/core/signal\" class=\"code-anchor\">signal</a>('Bob');\n}\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - extended-diagnostics/NG8101\n - guide/built-in-directives\n - guide/event-binding\n - guide/example-apps-list\n - guide/inputs-outputs\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Input\n - api/core/Output\n - api/core/signal\n - api/forms/FormsModule\n - api/forms/NgModel\n - guide/built-in-directives#ngModel\n - guide/event-binding\n - guide/inputs-outputs\n - guide/property-binding\n - guide/two-way-binding#adding-two-way-data-binding\n - guide/two-way-binding#how-two-way-binding-works\n - guide/two-way-binding#prerequisites\n - guide/two-way-binding#two-way-binding\n - guide/two-way-binding#two-way-binding-to-signals\n-->"}
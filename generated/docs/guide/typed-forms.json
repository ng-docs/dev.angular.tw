{"id":"guide/typed-forms","title":"型別化表單","contents":"<div class=\"content\">\n  <h1 id=\"typed-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"175jtor9ctchmei8ajglnlv07\">型別化表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#typed-forms\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hurgupejyhzz46qvyddgx6ws\">從 Angular 14 開始，回應式表單預設是嚴格型別的。</p>\n<p><a id=\"prerequisites\"></a></p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uakl97kk0qcgcj9dby8bmhe0\">作為本指南的背景，你應該已經熟悉<a href=\"guide/reactive-forms\" title=\"回應式表單\">Angular 回應式表單</a>。</p>\n<p><a id=\"intro\"></a></p>\n<h2 id=\"overview-of-typed-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egd6w8t4042jhomymsq925emk\">型別化表單概覽<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#overview-of-typed-forms\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"video-container\">\n<video controls>\n      <source src=\"https://videos.angular.cn/L-odCf4MfJc.webm\" type=\"video/webm\">\n      <source src=\"https://videos.angular.cn/L-odCf4MfJc.mp4\" type=\"video/mp4\">\n      <track src=\"https://videos.angular.cn/L-odCf4MfJc.en.vtt\" label=\"English\" kind=\"subtitles\" srclang=\"en\">\n      <track src=\"https://videos.angular.cn/L-odCf4MfJc.cn.vtt\" label=\"簡體中文\" kind=\"subtitles\" srclang=\"zh-CN\" default>\n      <track src=\"https://videos.angular.cn/L-odCf4MfJc.tw.vtt\" label=\"正體中文\" kind=\"subtitles\" srclang=\"zh-TW\">\n    </video>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24orea3n2d4rbjpod82jdhr2o\">使用 Angular 回應式表單，你可以顯式指定<em>表單模型</em>。作為一個簡單的例子，考慮這個基本的使用者登入表單：</p>\n<code-example language=\"ts\">\nconst login = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n});\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86w8gl5wbhtd4vd4tolqltcla\">Angular 提供了許多 API 來與此 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 互動。例如，你可以呼叫 <code>login.value</code> 、 <code>login.controls</code> 、 <code>login.patchValue</code> 等。（有關完整的 API 參考，請參閱<a href=\"api/forms/FormGroup\">API 文件</a>。）</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ws75x6np47xa9xau00oabh4w\">在以前的 Angular 版本中，這些 API 中的大多數都在其型別中的某處包含 <code>any</code>，並且與控制元件結構或值本身的互動不是型別安全的。例如：你可以編寫以下無效程式碼：</p>\n<code-example language=\"ts\">\nconst emailDomain = login.value.email.domain;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ipo0eorvgnsj1dlx03pnmpfw\">使用嚴格型別的回應式表單時，上面的程式碼不會編譯，因為 <code><a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a></code> 上並沒有 <code>domain</code> 屬性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alecsnckuqbm49g8okmssvfe0\">除了增加安全性之外，這些型別還支援各種其他改進，例如 IDE 中更好的自動完成，以及顯式指定表單結構的方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mhbbw4ewy5ehbsu9a2hjbo82\">這些改進當前僅適用於<em>回應</em>式表單（不適用於<a href=\"guide/forms\" title=\"表單指南\"><em>樣板驅動的</em>表單</a>）。</p>\n<p><a id=\"automated-migration\"></a></p>\n<h2 id=\"automated-untyped-forms-migration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"l8wid60gzsixhmk18c9vf8tp\">自動無類型表單遷移<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#automated-untyped-forms-migration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21wuc7wqq3uhnw352x48ih6m6\">升級到 Angular 14 時，包含的遷移將自動使用相應的無類型版本替換程式碼中的所有表單類。例如，上面的程式碼段落將變為：</p>\n<code-example language=\"ts\">\nconst login = new <a href=\"api/forms/UntypedFormGroup\" class=\"code-anchor\">UntypedFormGroup</a>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/UntypedFormControl\" class=\"code-anchor\">UntypedFormControl</a>(''),\n    password: new <a href=\"api/forms/UntypedFormControl\" class=\"code-anchor\">UntypedFormControl</a>(''),\n});\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwpukcmne5ptnw88m9klu7euo\">每個 <code>Untyped</code> 符號都與以前的 Angular 版本具有完全相同的語義，因此你的應用程式應該像以前一樣繼續編譯。透過刪除 <code>Untyped</code> 字首，你可以增量啟用這些型別。</p>\n<p><a id=\"form-control-inference\"></a></p>\n<h2 id=\"formcontrol-getting-started\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"odtu9v1yi5tw7nibkqoci8xq\"><code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>：入門<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formcontrol-getting-started\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkz3b24otzsfp6qqc6iuo6gox\">最簡單的表單由單個控制元件群組成：</p>\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('angularrox@gmail.com');\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwb2p0j9sprc98c0rgjkrmry2\">此控制元件將被自動推斷為 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string|null&gt;</code> 型別。TypeScript 會在整個<a href=\"api/forms/FormControl\"><code>FormControl</code> API</a>中自動強制執行此類型，例如 <code>email.value</code> 、 <code>email.valueChanges</code> 、 <code>email.setValue(...)</code> 等。</p>\n<h3 id=\"nullability\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"kgd2h0rvg7onaehvqwmq765e\">可空性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#nullability\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b1au1jeo6zyq1oicup9gafo3\">你可能想知道：為什麼此控制元件的型別包含 <code>null</code> ？這是因為控制元件可以隨時透過呼叫 reset 變為 <code>null</code>：</p>\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('angularrox@gmail.com');\nemail.reset();\nconsole.log(email.value); // null\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"am8asgd58iggyemxg21p4f0mp\">TypeScript 將強制你始終處理控制元件已變為 <code>null</code> 的可能性。如果要使此控制元件不可為空，可以用 <code>nonNullable</code> 選項。這將導致控制元件重置為其初始值，而不是 <code>null</code>：</p>\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('angularrox@gmail.com', {nonNullable: true});\nemail.reset();\nconsole.log(email.value); // angularrox@gmail.com\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dek6ampjj0jd5hi0ge9nm18g\">重申一下，此選項會在呼叫 <code>.reset()</code> 時影響表單的執行時行為，應小心翻轉。</p>\n<h3 id=\"specifying-an-explicit-type\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arg7huqkaaqwn04mks3v9gi93\">指定顯式型別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#specifying-an-explicit-type\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8ce61jskq1qk0x0q0wa2v479\">可以指定型別，而不是依賴推理。考慮一個初始化為 <code>null</code> 的控制元件。因為初始值為 <code>null</code>，所以 TypeScript 將推斷 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;null&gt;</code>，這比我們想要的要窄。</p>\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(null);\nemail.setValue('angularrox@gmail.com'); // Error!\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"46ne9y7d11p72svkeyq5lhig8\">為防止這種情況，我們將型別顯式指定為 <code>string|null</code>：</p>\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string|null&gt;(null);\nemail.setValue('angularrox@gmail.com');\n</code-example>\n<p><a id=\"form-array\"></a></p>\n<h2 id=\"formarray-dynamic-homogenous-collections\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96lgzjoy3u0zef4jpe60wfa2k\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>：動態的、同質的集合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formarray-dynamic-homogenous-collections\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"boxyvsim4cmqprft00kc2b6xx\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 包含一個開放式控制元件清單。type 引數對應於每個內部控制元件的型別：</p>\n<code-example language=\"ts\">\nconst names = new <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>([new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Alex')]);\nnames.push(new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Jess'));\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6phad1fw4u75bwxanrg8dmgwa\">此 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 將具有內部控制元件型別 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string|null&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xvm6iihmonxq1ut0gwdht94f\">如果你想在陣列中有多個不同的元素型別，則必須使用 <code><a href=\"api/forms/UntypedFormArray\" class=\"code-anchor\">UntypedFormArray</a></code>，因為 TypeScript 無法推斷哪種元素型別將出現在哪個位置。</p>\n<p><a id=\"form-group-record\"></a></p>\n<h2 id=\"formgroup-and-formrecord\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59kyo69d9yb4aolsld0g341p6\"><code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formgroup-and-formrecord\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"798jhvmypyyzsk0gzigrqxfob\">Angular 為具有列舉鍵集的表單提供了 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 型別，併為開放式或動態組提供了一種名為 <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code> 的型別。</p>\n<h3 id=\"partial-values\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eo94hfug64lgcdlxirspew51e\">部分值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#partial-values\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wb9lhqxsaqprpj7k22w60yup\">再次考慮一個登入表單：</p>\n<code-example language=\"ts\">\nconst login = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n    password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n});\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ga3cqo4eqtk54g1rtbvlgre5\">在任何 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 上，都<a href=\"api/forms/FormGroup\">可以停用控制元件</a>。任何停用的控制元件都不會出現在組的值中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xcktxfvj7kd2pctgzii0o2ls\">因此，<code>login.value</code> 的型別是 <code>Partial&lt;{<a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: string, password: string}&gt;</code>。這種型別的 <code>Partial</code> 意味著每個成員可能是未定義的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bntzykgi9khu0gafgp04fsv43\">更具體地說，<code>login.value.email</code> 的型別是 <code>string|undefined</code>，TypeScript 將強制你處理可能 <code>undefined</code> 的值（如果你啟用了 <code>strictNullChecks</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bhwsth85m6s8lwqzgl4p5zku\">如果你想訪問<em>包括</em>停用控制元件的值，從而繞過可能的 <code>undefined</code> 欄位，可以用 <code>login.getRawValue()</code>。</p>\n<h3 id=\"optional-controls-and-dynamic-groups\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8m7j56pql33ve8v3d3pkcycv\">可選控制元件和動態組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#optional-controls-and-dynamic-groups\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d40wzg1mqx54rrg56zm7wlsmg\">某些表單的控制元件可能存在也可能不存在，可以在執行時新增和刪除。你可以用<em>可選欄位</em>來表示這些控制元件：</p>\n<code-example language=\"ts\">\ninterface LoginForm {\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string&gt;;\n    password?: <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string&gt;;\n}\n\nconst login = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>&lt;LoginForm&gt;({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n    password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n});\n\nlogin.removeControl('password');\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14tbqevg6im62b7apyos0g1dg\">在這個表單中，我們明確地指定了型別，這使我們可以將 <code>password</code> 控制元件設為可選的。TypeScript 會強制只有可選控制元件才能被新增或刪除。</p>\n<h3 id=\"formrecord\"><code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formrecord\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vyq6hgx1cav37kjuwv6kzu6r\">某些 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的用法不符合上述模式，因為鍵是無法提前知道的。<code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code> 類就是為這種情況設計的：</p>\n<code-example language=\"ts\">\nconst addresses = new <a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a>&lt;<a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string|null&gt;&gt;({});\naddresses.addControl('Andrew', new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('2340 Folsom St'));\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agw806c6lshija806ejmdyad6\">任何 <code>string|null</code> 型別的控制元件都可以新增到此 <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90a9rpcbuse3p0ymfhurxh0b0\">如果你需要一個動態（開放式）和異構（控制元件是不同型別）的 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>，則無法提升為型別安全的，這時你應該使用 <code><a href=\"api/forms/UntypedFormGroup\" class=\"code-anchor\">UntypedFormGroup</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wguth93oo1pufnavnr9vtqos\"><code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code> 也可以用 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 建立：</p>\n<code-example language=\"ts\">\nconst addresses = fb.record({'Andrew': '2340 Folsom St'});\n</code-example>\n<h2 id=\"formbuilder-and-nonnullableformbuilder\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bw5mbv4ynrzcvwx5z2obgcul\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 和 <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formbuilder-and-nonnullableformbuilder\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpy52010cdfjwwykjuejn4sbs\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 類已升級為支援新增的型別的版本，方式與上面的範例相同。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tzoraqh6z6fvi2gr3zcbz87c\">此外，還有一個額外的建構式：<code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code>。它是在所有控制元件都上指定 <code>{nonNullable: true}</code> 的簡寫，用來在大型非空表單中消除主要的樣板程式碼。你可以用 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 上的 <code>nonNullable</code> 屬性訪問它：</p>\n<code-example language=\"ts\">\nconst fb = new <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>();\nconst login = fb.nonNullable.group({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: '',\n    password: '',\n});\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2qaqdmxvxdznbj529lslrq4a\">在上面的範例中，兩個內部控制元件都將不可為空（即將設定 <code>nonNullable</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmseqkl5e2htctkwfklhi7095\">你還可以用名稱 <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code> 注入它。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Tue May 10 2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/forms/EmailValidator\n - api/forms/FormArray\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormGroup\n - api/forms/FormRecord\n - api/forms/NonNullableFormBuilder\n - api/forms/UntypedFormArray\n - api/forms/UntypedFormControl\n - api/forms/UntypedFormGroup\n - guide/forms\n - guide/reactive-forms\n - guide/typed-forms#automated-untyped-forms-migration\n - guide/typed-forms#formarray-dynamic-homogenous-collections\n - guide/typed-forms#formbuilder-and-nonnullableformbuilder\n - guide/typed-forms#formcontrol-getting-started\n - guide/typed-forms#formgroup-and-formrecord\n - guide/typed-forms#formrecord\n - guide/typed-forms#nullability\n - guide/typed-forms#optional-controls-and-dynamic-groups\n - guide/typed-forms#overview-of-typed-forms\n - guide/typed-forms#partial-values\n - guide/typed-forms#prerequisites\n - guide/typed-forms#specifying-an-explicit-type\n - guide/typed-forms#typed-forms\n-->"}

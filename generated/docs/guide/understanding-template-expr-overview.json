{"id":"guide/understanding-template-expr-overview","title":"瞭解範本表示式","contents":"<div class=\"content\">\n  <!-- Archived and no longer in the left nav. Still accessible to 3rd parties who linked to it. -->\n<h1 id=\"understanding-template-expressions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8brk7igdhiveyzm1yn5hroae\">瞭解範本表示式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#understanding-template-expressions\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cka5rg6kwwtntnsln4fat5qu4\">本主題探討了 Angular 文字內嵌的某些方面。</p>\n<h2 id=\"syntax\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p44mx807exjp3s0k9dwbuxla\">語法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#syntax\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnhrxo75t2ek6s7lqyunpkshx\">範本表示式和 JavaScript 很相似。許多 JavaScript 表示式都是合法的範本表示式，但以下情況除外。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"812ufwsqp34mv5k3nnuor7hh7\">你不能使用那些具有或可能引發副作用的 JavaScript 表示式，包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gbnqy2ufx2p68a6a75yzwiio\">賦值（<code>=</code>, <code>+=</code>, <code>-=</code>, <code>...</code>）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2u08tgl6zuhsgdibjbw60gjrc\">運算符，比如 <code>new</code>、<code>typeof</code> 或 <code>instanceof</code> 等。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2omhmj2gt8fhz1ar54ejmgaca\">連結表示式<code>;</code>或<code>，</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9olwnih7g7qzwgrmmgsarmuso\">自增和自減運算符：<code>++</code> 和 <code>--</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egjzm4gsetscngt7a0apxbkrz\">一些 ES2015+ 版本的運算符</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qccswl3y9mnxon20ey6ojp2y\">和 JavaScript 語法的其它顯著差異包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r6vfm22rvtc2ggommuufykhl\">不支援位運算，比如 <code>|</code> 和 <code>&amp;</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfb89k79wqie5tfx35yhzv7rl\">新的<a href=\"guide/template-expression-operators\">範本表示式運算符</a>，比如 <code>|</code>，<code>?.</code> 和 <code>!</code></li>\n</ul>\n<h2 id=\"expression-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hlg7poy4z2utivz797sb1eid\">表示式上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#expression-context\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ylw0h4vdr4kkz2ru950cedq0\">內嵌表示式具有上下文 —— 表示式所屬應用中的特定部分。通常，此上下文就是元件實例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66q7irjnxs3bbe1zlsc9tjjxw\">在下面的程式碼片段中，表示式 <code>recommended</code> 和 <code>itemImageUrl2</code> 表示式所引用的都是 <code>AppComponent</code> 中的屬性。</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-context\" header=\"src/app/app.component.html\">\n&lt;h4&gt;{{recommended}}&lt;/h4&gt;\n&lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> alt=\"item 2\" [src]=\"itemImageUrl2\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ars2xiw9mjk0v7x84501dviy1\">表示式還可以引用<em>範本</em>上下文中的屬性，比如<a href=\"guide/structural-directives#shorthand\">範本輸入變數</a>或<a href=\"guide/template-reference-variables\">範本引用變數</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"466388rs0hdjz7w1w2lxjcteq\">下面的例子就使用了範本輸入變數 <code>customer</code>。</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-input-variable\" header=\"src/app/app.component.html (template input variable)\">\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\"&gt;{{customer.name}}&lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9catuc89v5f2h3puxmi97x4bp\">接下來的例子使用了範本引用變數 <code>#customerInput</code>。</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-reference-variable\" header=\"src/app/app.component.html (template reference variable)\">\n&lt;label for=\"customer-input\"&gt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a> something:\n  &lt;input id=\"customer-input\" #customerInput&gt;{{customerInput.value}}\n&lt;/label&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5iy23k8no4ab9b0omz09zl1dp\">範本表示式不能引用全域命名空間中的任何東西，比如 <code>window</code> 或 <code>document</code>。它們也不能呼叫 <code>console.log</code> 或 <code>Math.max</code>。它們只能引用表示式上下文中的成員。</p>\n</div>\n<h3 id=\"preventing-name-collisions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aotu0qo49kque79pf3u5m361b\">防止命名衝突<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#preventing-name-collisions\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2qeolobjo0evxmyexe5uos4\">表示式求值的上下文是範本變數、指令的上下文物件（如果有的話）以及元件成員的並集。如果所引用的名稱在多個命名空間都有，則 Angular 將應用以下邏輯來確定上下文：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cc4zi4savzsus9tvymlj5zvsc\">範本變數的名稱。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hhk2bnv305q24tt2m2he4o51\">指令上下文中的名稱。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rdvy56btc1mu6lu2izodxc57\">元件成員的名稱。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej3aiup78un3s2kxpzc38fm8n\">為避免變數遮蓋另一個上下文中的變數，請保持變數名稱唯一。在以下範例中，<code>AppComponent</code> 範本在問候 <code>customer</code> Padma。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3u0a6he7byq0iwm4sn71sb5x\">然後，一個 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 列出了 <code>customers</code> 陣列中的每個 <code>customer</code>。</p>\n<code-example path=\"interpolation/src/app/app.component.1.ts\" region=\"var-collision\" header=\"src/app/app.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  template: `\n    &lt;div&gt;\n      &lt;!-- Hello, Padma --&gt;\n      &lt;h1&gt;Hello, {{customer}}&lt;/h1&gt;\n      &lt;ul&gt;\n        &lt;!-- Ebony and Chiho in a list--&gt;\n        &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\"&gt;{{ customer.value }}&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  `,\n  imports: [<a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>]\n})\nexport class AppComponent {\n  customers = [{value: 'Ebony'}, {value: 'Chiho'}];\n  customer = 'Padma';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3z2t018ulckkle5dk3jdle5eb\"><code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中的 <code>customer</code> 處於一個 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 的上下文中，所以它指向的是 <code>customers</code> 陣列中的 <code>customer</code>，在這裡是 Ebony 和 Chiho。此清單中不包含 Padma，因為那個 <code>customer</code> 位於 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 以外的另一個上下文中。反之，<code>&lt;h1&gt;</code> 中的 <code>customer</code> 不包括 Ebony 或 Chiho，因為該 <code>customer</code> 的上下文是元件類別，而這個類別中 <code>customer</code> 的值是 Padma。</p>\n<h2 id=\"expression-best-practices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5k8nds3ui2tl872vsn0lx5fxj\">表示式最佳實踐<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#expression-best-practices\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9efdlno4arvsthhkce094eykm\">使用範本表示式時，請遵循以下最佳實踐：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2b3w10d602nwjrd3cosw7kauj\"><strong>使用短表示式</strong></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6dzlmbq3rf15kxcpe2s7ogp9\">儘可能使用屬性名稱或方法呼叫。將應用和業務邏輯保留在元件中，這裡更便於開發和測試。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f3rfmi9i1zjdmm8apilkb95v\"><strong>快速執行</strong></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enq34h1wl89ivxfjpc0c2osjf\">Angular 會在每個<a href=\"guide/glossary#change-detection\">變更檢測</a>週期之後執行範本表示式。許多非同步活動都會觸發變更檢測週期，比如解析 Promise、HTTP 結果、計時器事件、按鍵和滑鼠移動。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyjiih3fqckuurffmdsk5l4fw\">表示式應儘快完成，以保持使用者體驗的效能，尤其是在速度較慢的裝置上。當計算值需要更多資源時，請考慮快取值。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axqc7d6ed82ixd4jz4sn3qn78\"><strong>沒有可見的副作用</strong></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71iwozoafwuk5l5e4u4sz6219\">根據 Angular 的<a href=\"guide/glossary#unidirectional-data-flow\">單向資料流模型</a>，除了目標屬性的值之外，範本表示式不應更改任何應用狀態。讀取元件值不應更改其他顯示值。該檢視應在整個渲染過程中保持穩定。</p>\n<div class=\"callout is-important\">\n  <header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dd0bca2hywj6fgsf8gv5af2fm\">用冪等表示式減少副作用</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ftpomr867a7tbc1317xp65fi\"><a href=\"https://en.wikipedia.org/wiki/Idempotence\">冪等</a>的表示式是最理想的，因為它沒有副作用，並且可以提高 Angular 的變更檢測效能。用 Angular 術語來說，冪等表示式總會回傳<em>完全相同的東西</em>，除非其依賴值之一發生了變化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anagi1kel6enlck4ltppf0pz9\">在單獨的一次事件迴圈中，被依賴的值不應該改變。如果冪等的表示式回傳一個字串或數字，如果連續呼叫它兩次，會回傳相同的字串或數字。如果冪等的表示式回傳一個物件（包括 <code>Date</code> 或 <code>Array</code>），如果連續呼叫它兩次，會回傳同一個物件的<em>引用</em>。</p>\n</div>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0bn993rifkcxd4oxltdf7v7t\">對於 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>，這種行為有一個例外。<code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 具有 <code>trackBy</code> 功能，在迭代物件時它可以正確處理物件值的變化。詳情參見 <a href=\"guide/built-in-directives#ngfor-with-trackby\">帶 <code>trackBy</code> 的 *ngFor</a>。</p>\n</div>\n</li>\n</ul>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"q1njfgz56bdxrsfcbczuf83z\">屬性繫結</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：Fri Sep 01 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/what-is-angular\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgOptimizedImage\n - api/core/Component\n - api/core/Type\n - api/core/ng-template\n - guide/built-in-directives#ngfor-with-trackby\n - guide/glossary#change-detection\n - guide/glossary#unidirectional-data-flow\n - guide/structural-directives#shorthand\n - guide/template-expression-operators\n - guide/template-reference-variables\n - guide/understanding-template-expr-overview#expression-best-practices\n - guide/understanding-template-expr-overview#expression-context\n - guide/understanding-template-expr-overview#preventing-name-collisions\n - guide/understanding-template-expr-overview#syntax\n - guide/understanding-template-expr-overview#understanding-template-expressions\n - guide/understanding-template-expr-overview#whats-next\n - https://en.wikipedia.org/wiki/Idempotence\n-->"}
{"id":"guide/upgrade-setup","title":"準備從 AngularJS 升級","contents":"<div class=\"content\">\n  <h1 id=\"setup-for-upgrading-from-angularjs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pnyakv9q63x7zkosvafdt90d\">準備從 AngularJS 升級<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#setup-for-upgrading-from-angularjs\"><i class=\"material-icons\">link</i></a></h1>\n<!--todo: Question: Can we remove this file and instead direct readers to https://github.com/angular/quickstart/blob/master/README.md -->\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2b8hj28jaclp25r10b6bq14nm\"><strong>注意</strong>：<br>\n本指南<strong>僅僅</strong>適用於<a href=\"guide/upgrade\" title=\"Upgrading from AngularJS to Angular\">從 AngularJS 升級</a>和<a href=\"guide/upgrade-performance\" title=\"Upgrading for Performance\">注重效能的升級</a>。\n本指南中提到的升級指南使用的是<a href=\"https://github.com/angular/quickstart\" title=\"Deprecated Angular QuickStart GitHub repository\">已棄用的快速上手 Github 儲存庫</a>，它是在 Angular <a href=\"cli\" title=\"CLI Overview\">CLI</a> 推出之前建立的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xvyuna0231vosdif5lzfmdq0\"><strong>對於所有其它場景</strong>，請參閱<a href=\"guide/setup-local\" title=\"Setting up for Local Development\">建立本地開發環境</a>中的步驟。</p>\n</div>\n<!--\nThe <live-example name=quickstart>QuickStart live-coding</live-example> example is an Angular *playground*.\nThere are also some differences from a local app, to simplify that live-coding experience.\nIn particular, the QuickStart live-coding example shows just the AppComponent file; it creates the equivalent of app.module.ts and main.ts internally for the playground only.\n-->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7zu2cv5iblghkl5jmpyehj0z6\">本指南講的是如何在你自己的機器上進行本地化開發。利用 <a href=\"https://github.com/angular/quickstart\" title=\"安裝 github 《快速上手》函式庫\">github 上的<strong>《快速上手》種子</strong></a>在你的電腦上搭建一個新專案是很快很容易的。</p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"171m81eev0kzpawil2pjvga53\">確保你已經安裝好了 <a href=\"guide/setup-local#prerequisites\" title=\"Angular prerequisites\">Node.js® 和 npm</a>。</p>\n<p><a id=\"clone\"></a></p>\n<h2 id=\"clone\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3s3y5vljtxu0dlsdst4fx3m1\">克隆<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#clone\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y0qndmvhu34hi1l83rv25d92\">執行下列指令來執行<em>克隆並啟動</em>步驟。</p>\n<code-example format=\"shell\" language=\"shell\">\n\ngit clone https://github.com/angular/quickstart.git quickstart\ncd quickstart\nnpm install\n\n</code-example>\n<p><a id=\"download\"></a></p>\n<h2 id=\"download\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7l0z04lu5x3us4q5dxab1lfa5\">下載<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#download\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s2g0mp0xqvw2y7ca7bd3sgqs\"><a href=\"https://github.com/angular/quickstart/archive/master.zip\" title=\"下載《快速上手》種子函式庫\">下載《快速上手》種子</a> 並解壓到你的專案目錄中。然後執行下面的指令完成剩餘步驟。</p>\n<code-example format=\"shell\" language=\"shell\">\n\ncd quickstart\nnpm install\n\n</code-example>\n<p><a id=\"non-essential\"></a></p>\n<h2 id=\"delete-non-essential-files-optional\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bydyn3isyh0sogfx04g7j9ay3\">刪除<em>非必需</em>檔案（可選）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#delete-non-essential-files-optional\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qyqv7ktzr447ra1k5rg6ksbj\">你可以快速刪除一些涉及到測試和維護快速開始版本函式庫的 <em>非必需</em> 檔案（<strong><em>包括所有 git 相關的檔案</em></strong>如 <code>.git</code> 資料夾和 <code>.gitignore</code>！）。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1byeg8xi94yz7kc4imnif85t8\">請只在開始時執行此刪除操作，以防你自己的測試和 git 檔案被意外刪除！。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18ytrrx4b4evk4citlryz5oqj\">在專案目錄下開啟一個終端視窗，並根據你的作業系統執行以下指令：</p>\n<h3 id=\"macos--mac-os-x-bash\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4flgb227u5vams04nnqzioms8\">macOS / Mac OS X（bash）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#macos--mac-os-x-bash\"><i class=\"material-icons\">link</i></a></h3>\n<code-example format=\"shell\" language=\"shell\">\n\nxargs rm -rf &lt; non-essential-files.osx.txt\nrm src/app/*.spec*.ts\nrm non-essential-files.osx.txt\n\n</code-example>\n<h3 id=\"windows\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ac6zwppczp0ghpwimqpjr90z4\">Windows<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#windows\"><i class=\"material-icons\">link</i></a></h3>\n<code-example format=\"shell\" language=\"shell\">\n\nfor /f %i in (non-essential-files.txt) do del %i /F /S /Q\nrd .git /s /q\nrd e2e /s /q\n\n</code-example>\n<h2 id=\"update-dependency-versions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8toc4nqt1vhp68hdjc75tt3wa\">更新依賴版本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#update-dependency-versions\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb5vvh04jogbzng51togdtg4m\">由於不推薦使用快速入門儲存庫（它已不再更新），所以你需要一些額外的步驟來使用最新的 Angular。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5uwgc99h24m74pzvk0evtdhy\">刪除過時的 <code>@angular/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 套件（全都來自 <code>package.json &gt; dependencies</code> 和 <code>src/systemjs.config.js &gt; SystemJS.config() &gt; map</code>）。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ca7bohai9hdcjnu14oa6horb\">透過執行以下指令來安裝最新版本的 Angular 框架套件：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install --save @angular/common@latest @angular/compiler@latest @angular/core@latest @angular/forms@latest @angular/platform-browser@latest @angular/platform-browser-dynamic@latest @angular/router@latest\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8q4fi6xictnygusv3hgi6jn39\">透過執行以下指令安裝 Angular 用到的其它套件的最新版本（RxJS、TypeScript、Zone.js）：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install --save rxjs@latest zone.js@latest\nnpm install --save-dev typescript@latest\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qds6itvp26jnwu2zm0ksvufa\">安裝 <code>systemjs-plugin-babel</code> 套件。稍後它將用於使用 SystemJS 載入 ES2015 格式的 Angular 框架檔案。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install --save systemjs-plugin-babel@latest\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tgv3lr1kjknhot48xee4t5t5\">為了能正確載入最新的 Angular 框架套件（ES2015 格式），請替換 <code>src/systemjs.config.js</code> 中的相關條目：</p>\n<p><code-example s=\"\" format=\"javascript\" language=\"javascript\" path=\"upgrade-phonecat-2-hybrid/systemjs.config.1.js\" region=\"angular-paths\">\nSystem.config({\n  /* . . . */\n  map: {\n    /* . . . */\n    '@angular/core': 'npm:@angular/core/fesm2022/core.mjs',\n    '@angular/common': 'npm:@angular/common/fesm2022/common.mjs',\n    '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>': 'npm:@angular/common/fesm2022/http.mjs',\n    '@angular/compiler': 'npm:@angular/compiler/fesm2022/compiler.mjs',\n    '@angular/platform-browser': 'npm:@angular/platform-browser/fesm2022/platform-browser.mjs',\n    '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/fesm2022/platform-browser-dynamic.mjs',\n    '@angular/router': 'npm:@angular/router/fesm2022/router.mjs',\n    '@angular/router/upgrade': 'npm:@angular/router/fesm2022/upgrade.mjs',\n    '@angular/forms': 'npm:@angular/forms/fesm2022/forms.mjs',\n    /* . . . */\n  },\n  /* . . . */\n});\n\n</code-example></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f22z2pe6hc2ocbqkdjh79jr33\">為了能夠正確載入最新的 RxJS 套件，請替換 <code>src/systemjs.config.js</code> 中的相關條目：</p>\n<p><code-example s=\"\" format=\"javascript\" language=\"javascript\" path=\"upgrade-phonecat-2-hybrid/systemjs.config.1.js\" region=\"rxjs-paths\">\nSystem.config({\n  /* . . . */\n  map: {\n    /* . . . */\n    'rxjs': 'npm:rxjs/dist/cjs',\n    'rxjs/operators': 'npm:rxjs/dist/cjs/operators',\n    /* . . . */\n  },\n  /* . . . */\n  packages: {\n    /* . . . */\n    'rxjs': {\n      defaultExtension: 'js',\n      format: 'cjs',\n      main: 'index.js'\n    },\n    'rxjs/operators': {\n      defaultExtension: 'js',\n      format: 'cjs',\n      main: 'index.js'\n    },\n    /* . . . */\n  }\n});\n\n</code-example></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57fequayonz7k8ml9gxj9wit1\">為了能夠載入 <code>tslib</code> 套件（這是由 TypeScript 轉譯後的檔案所必需的），請將以下條目新增到 <code>src/systemjs.config.js</code>：</p>\n<p><code-example s=\"\" format=\"javascript\" language=\"javascript\" path=\"upgrade-phonecat-2-hybrid/systemjs.config.1.js\" region=\"tslib-paths\">\nSystem.config({\n  /* . . . */\n  map: {\n    /* . . . */\n    'tslib': 'npm:tslib/tslib.js',\n    /* . . . */\n  },\n  /* . . . */\n});\n\n</code-example></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5iyc9z4rm2mscsjehsqejita\">為了使 SystemJS 能夠正確載入 ES2015 Angular 檔案，請將以下條目新增到 <code>src/systemjs.config.js</code>：</p>\n<p><code-example s=\"\" format=\"javascript\" language=\"javascript\" path=\"upgrade-phonecat-2-hybrid/systemjs.config.1.js\" region=\"plugin-babel\">\nSystem.config({\n  /* . . . */\n  map: {\n    /* . . . */\n    'plugin-babel': 'npm:systemjs-plugin-babel/plugin-babel.js',\n    'systemjs-babel-build': 'npm:systemjs-plugin-babel/systemjs-babel-browser.js'\n  },\n\n  transpiler: 'plugin-babel',\n  /* . . . */\n  packages: {\n    /* . . . */\n    'meta': {\n      '*.mjs': {\n        babelOptions: {\n          es2015: false\n        }\n      }\n    }\n  }\n});\n\n</code-example></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3w8pg5bfy1ayzype4i5rl1qhl\">最後，為了防止依賴項的 TypeScript 型別檢查錯誤，請將以下條目新增到 <code>src/tsconfig.json</code>：</p>\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true,\n    // …\n  }\n}\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81bbbgkrcud91al9wkfkcgb45\">有了這些，你現在就可以執行 <code>npm start</code> 並建立和啟動應用程式了。建立後，應用程式將自動在新的瀏覽器頁籤中開啟，並在你更改原始碼時自動重新載入。</p>\n<p><a id=\"seed\"></a></p>\n<h2 id=\"whats-in-the-quickstart-seed\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6z0p4x61b5h763xnpejax9qf3\">《快速上手》種子函式庫裡都有什麼？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#whats-in-the-quickstart-seed\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nin98i2gbskwnoytozlmtlj3\"><strong>《快速上手》種子</strong> 提供了一個基本的《快速上手》遊樂場應用，以及進行本地開發的其它必要檔案。所以，你電腦裡的專案目錄中有<em>更多檔案</em>，其中的大部分你都會<a href=\"guide/file-structure\">在稍後學到</a>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66rs5f4vrb7s9g9w06qckvxu4\"><strong>提醒</strong>：『快速上手』種子專案是在 Angular CLI 之前建立的，因此這裡講的會和 Angular CLI 建立的應用有一些差異。</p>\n</div>\n<p><a id=\"app-files\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zmle2qq0oevj98rg8ezxx5gl\">注意 <code>/src</code> 目錄中以下三個 TypeScript （<code>.ts</code>） 檔案：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      app\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app.component.ts\n      </div>\n      <div class=\"file\">\n        app.module.ts\n      </div>\n    </div>\n    <div class=\"file\">\n      main.ts\n    </div>\n  </div>\n</div>\n<code-tabs>\n    <code-pane header=\"src/app/app.component.ts\" path=\"setup/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: '&lt;h1&gt;Hello {{name}}&lt;/h1&gt;'\n})\nexport class AppComponent { name = 'Angular'; }\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.module.ts\" path=\"setup/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"src/main.ts\" path=\"setup/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .catch(err =&gt; console.error(err));\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o04df21xuqr3bbaxf2bskd7l\">所有指南和烹飪書都至少有<em>這幾個核心檔案</em>。每個檔案都有獨特的用途，並且隨著應用的成長各自獨立演變。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw6v6nv7zwu3b28t7ogtukzwk\"><code>src/</code> 目錄之外的檔案為建立、部署和測試 app 相關的檔案，他們只包括設定檔案和外部依賴。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmaytbmbow2i5ct8kl2pgt8tk\"><code>src/</code> 目錄下的檔案才『屬於』你的 app。除非明確指出，否則教學課程中新增的 TypeScript，HTML 和 CSS 檔案都在 <code>src/</code> 目錄下，大多數在 <code>src/app</code> 目錄中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7h2p48vfap87s3pchaiqnx98\"><code>src/</code> 目錄檔案詳情如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nruk3bhki0czbbympuom526m\">檔案</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"297niinze7mn1fnajtyjcs0tb\">目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"duea4ldd3nh3pi8794bp8yhbm\">app/app.component.ts</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b68qfrf8bvep4jkiqzhxafwxs\">定義了與 QuickStart 示範中相同的 \n<code>AppComponent</code>。它是將成為巢狀元件樹的 \n<strong>根</strong> 元件。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byc6pwm7szkilxfl9fa12fhvc\">app/app.module.ts</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3r3tyuatuclg8ljezmng5oad9\">定義了 \n<code>AppModule</code>，告訴 Angular 如何組裝應用程式的 \n<a href=\"guide/bootstrapping\" title=\"AppModule: the root module\">根模組</a>。初始建立時，它僅宣告 \n<code>AppComponent</code>。隨著時間的推移，你可以新增更多元件進行宣告。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xgkw9du8fstl529jg0n3nlxr\">main.ts</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8d1w5o3fpxoxl8dp46zi7c63b\">使用 \n<a href=\"guide/glossary#jit\">JIT 編譯器</a> 編譯應用程式，並將應用程式的主模組（\n<code>AppModule</code>）引導到瀏覽器中執行。JIT 編譯器是在大多數專案開發期間的一個合理選擇，也是在諸如 Stackblitz 這樣的 \n<em>實時編碼</em> 環境中執行範例的唯一可行選擇。還有其他 \n<a href=\"guide/aot-compiler\">編譯</a>、\n<a href=\"guide/build\">建立</a> 和 \n<a href=\"guide/deployment\">部署</a> 選項可用。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"appendix-test-using-fakeasyncwaitforasync\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8en7wmt4wu79x3cc74xgeqmok\">附錄：使用 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> 進行測試<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#appendix-test-using-fakeasyncwaitforasync\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cam3n9eo33f86tx8cr3agb67p\">如果你使用 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 或 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a>()</code> 輔助函式來執行單元測試（詳情參閱<a href=\"guide/testing-components-scenarios#fake-async\">測試指南</a>），就要在測試的準備檔案中匯入 <code>zone.js/testing</code>。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mh1me7owko4bodmvsqfv9msp\">如果你是用 <code>Angular/CLI</code> 建立的專案，那麼它已經在 <code>src/test.ts</code> 中匯入過了。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4d95rtkmjngqgia1iydmh4ql1\">在以前版本的 <code>Angular</code> 中，下列檔案曾被匯入或新增到 html 檔案中：</p>\n<code-example format=\"html\" language=\"html\">\n\nimport 'zone.js/plugins/long-stack-trace-zone';\nimport 'zone.js/plugins/proxy';\nimport 'zone.js/plugins/sync-test';\nimport 'zone.js/plugins/jasmine-patch';\nimport 'zone.js/plugins/async-test';\nimport 'zone.js/plugins/fake-async-test';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u87omkdqv7i2vgnlc5uesdix\">你仍然可以分別匯入這些檔案，不過匯入順序很重要，你必須在 <code>sync-test</code>、<code>async-test</code>、<code>fake-async-test</code> 和 <code>jasmine-patch</code> 之前匯入 <code>proxy</code>。還要注意在 <code>jasmine-patch</code> 之前匯入 <code>sync-test</code>。所以，建議你只匯入 <code>zone-testing</code> 而不要分別載入那些檔案。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/upgrade\n - guide/upgrade-performance\n-->\n<!-- links from this doc:\n - api/common/http\n - api/core/Component\n - api/core/NgModule\n - api/core/testing/fakeAsync\n - api/core/testing/waitForAsync\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - cli\n - guide/aot-compiler\n - guide/bootstrapping\n - guide/build\n - guide/deployment\n - guide/file-structure\n - guide/glossary#jit\n - guide/setup-local\n - guide/setup-local#prerequisites\n - guide/testing-components-scenarios#fake-async\n - guide/upgrade\n - guide/upgrade-performance\n - guide/upgrade-setup#appendix-test-using-fakeasyncwaitforasync\n - guide/upgrade-setup#clone\n - guide/upgrade-setup#delete-non-essential-files-optional\n - guide/upgrade-setup#download\n - guide/upgrade-setup#macos--mac-os-x-bash\n - guide/upgrade-setup#prerequisites\n - guide/upgrade-setup#setup-for-upgrading-from-angularjs\n - guide/upgrade-setup#update-dependency-versions\n - guide/upgrade-setup#whats-in-the-quickstart-seed\n - guide/upgrade-setup#windows\n - https://github.com/angular/quickstart\n - https://github.com/angular/quickstart/archive/master.zip\n-->"}
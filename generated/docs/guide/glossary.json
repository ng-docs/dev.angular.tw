{"id":"guide/glossary","title":"Angular 词汇表","contents":"<div class=\"content\">\n  <h1 id=\"glossary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2y68pfphr1xg4ip20nwdxpjs7\">Angular 词汇表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#glossary\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vgkte2wvicd4q1s6k5l8si32\">Angular 有自己的词汇表。\n虽然大多数 Angular 短语都是日常用语或计算机术语，但是在 Angular 体系中，它们有特别的含义。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"becu7ci9ikpd01mkl73ikfud7\">本词汇表列出了常用术语和少量具有反常或意外含义的不常用术语。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu66wwomrf96dh98cgu9jx4b2\"><a href=\"guide/glossary#ahead-of-time-aot-compilation\" title=\"A - 术语表 | Angular\">A</a> \n<a href=\"guide/glossary#binding\" title=\"B - 术语表 | Angular\">B</a> \n<a href=\"guide/glossary#case-types\" title=\"C - 术语表 | Angular\">C</a> \n<a href=\"guide/glossary#data-binding\" title=\"D - 术语表 | Angular\">D</a> \n<a href=\"guide/glossary#eager-loading\" title=\"E - 术语表 | Angular\">E</a> \n<a href=\"guide/glossary#form-control\" title=\"F - 术语表 | Angular\">F</a> \n<a href=\"guide/glossary#immutability\" title=\"G - 术语表 | Angular\">G</a> \n<a href=\"guide/glossary#immutability\" title=\"H - 术语表 | Angular\">H</a> \n<a href=\"guide/glossary#immutability\" title=\"I - 术语表 | Angular\">I</a> \n<a href=\"guide/glossary#javascript\" title=\"J - 术语表 | Angular\">J</a> \n<a href=\"guide/glossary#lazy-loading\" title=\"K - 术语表 | Angular\">K</a> \n<a href=\"guide/glossary#lazy-loading\" title=\"L - 术语表 | Angular\">L</a> \n<a href=\"guide/glossary#module\" title=\"M - 术语表 | Angular\">M</a> \n<a href=\"guide/glossary#ngmodule\" title=\"N - 术语表 | Angular\">N</a> \n<a href=\"guide/glossary#observable\" title=\"O - 术语表 | Angular\">O</a> \n<a href=\"guide/glossary#pipe\" title=\"P - 术语表 | Angular\">P</a> \n<a href=\"guide/glossary#reactive-forms\" title=\"Q - 术语表 | Angular\">Q</a> \n<a href=\"guide/glossary#reactive-forms\" title=\"R - 术语表 | Angular\">R</a> \n<a href=\"guide/glossary#schematic\" title=\"S - 术语表 | Angular\">S</a> \n<a href=\"guide/glossary#target\" title=\"T - 术语表 | Angular\">T</a> \n<a href=\"guide/glossary#unidirectional-data-flow\" title=\"U - 术语表 | Angular\">U</a> \n<a href=\"guide/glossary#view\" title=\"V - 术语表 | Angular\">V</a> \n<a href=\"guide/glossary#web-component\" title=\"W - 术语表 | Angular\">W</a> \n<a href=\"guide/glossary#zone\" title=\"X - 术语表 | Angular\">X</a> \n<a href=\"guide/glossary#zone\" title=\"Y - 术语表 | Angular\">Y</a> \n<a href=\"guide/glossary#zone\" title=\"Z - 术语表 | Angular\">Z</a></p>\n<!-- vale Angular.Google_Headings = NO -->\n<p><a id=\"aot\"></a></p>\n<h2 id=\"ahead-of-time-aot-compilation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40uioajlidvsgxt2a1f0188gv\">预先 （ahead-of-time, AOT） 编译<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ahead-of-time-aot-compilation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5eu6l0hmco1ji36jwh99rn3wp\">Angular 的预先（AOT）编译器可以在构建阶段把 Angular 的 HTML 代码和 TypeScript 代码转换成高效的 JavaScript 代码。构建阶段发生在浏览器下载并运行所生成的代码之前。（译者注：故名“预先”）\n对于产品环境，这是最好的编译模式，相对于<a href=\"guide/glossary#just-in-time-jit-compilation\" title=\"just-in-time (JIT) compilation - Glossary | Angular\">即时 （JIT） 编译</a>.而言，它能减小加载时间，并提高性能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djx1872p49afudtb2zi4c14e0\">使用命令行工具 <code>ngc</code> 来编译你的应用之后，就可以直接启动一个模块工厂，这意味着你不必再在 JavaScript 打包文件中包含 Angular 编译器。</p>\n<h2 id=\"angular-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caini2c000tv464dcu256leq1\">Angular 元素（element）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#angular-element\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mxaq4k3956x2nctckqc3muth\">被包装成<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">自定义元素</a>的 Angular <a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">组件</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qpr5vox396y5f346ieykgulg\">在 <a href=\"guide/elements\" title=\"Angular elements overview | Angular\">Angular 元素概览</a>中了解更多信息。</p>\n<h2 id=\"angular-package-format-apf\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1obaoawiz9imfe5v40940hy8l\">Angular 包格式 （APF）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#angular-package-format-apf\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wwk1ug5p50rcktfr5bn48pgh\">所有第一方 Angular 包和大多数第三方 Angular 库都在使用的 npm 包布局的 Angular 专有规范。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25iotocnnvpmii0qpwe6o1ggs\">在 <a href=\"guide/angular-package-format\" title=\"Angular Package Format | Angular\">Angular 包格式规范</a>中了解更多信息。</p>\n<h2 id=\"annotation\">annotation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#annotation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cvvwmh5xwhvjs18bxirr9p5b\">为类提供元数据的结构。欲知详情，参阅<a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">装饰器</a>。</p>\n<h2 id=\"app-shell\">app-shell<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#app-shell\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azjwf6yqhm3vt021xtxpykxtd\">应用外壳是一种在构建期间通过路由为应用渲染出部分内容的方式。\n这样就能为用户快速渲染出一个有意义的首屏页面，因为浏览器可以在初始化脚本之前渲染出静态的 HTML 和 CSS。\n欲知详情，参阅<a href=\"https://developers.google.com/web/fundamentals/architecture/app-shell\" title=\"The App Shell Model | Web Fundamentals | Google Developers\">应用外壳模型</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b9xxnjd9ijwvvh1wn8gfa732k\">你可以使用 Angular CLI 来<a href=\"cli/generate#app-shell\" title=\"app-shell - ng generate | CLI | Angular\">生成</a>一个应用外壳。\n它可以在浏览器下载完整版应用之前，先快速启动一个静态渲染页面（所有页面的公共骨架）来增强用户体验，等代码加载完毕后再自动切换到完整版。\n这个静态渲染的页面是所有页面的公共骨架。\n欲知详情，参见 <a href=\"guide/service-worker-intro\" title=\"Angular service worker introduction | Angular\">Service Worker 与 PWA</a>。</p>\n<h2 id=\"architect\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hcz81en8soyg3cphaa9glgjb\">建筑师（Architect）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#architect\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akcg4heokusvl2fz6opng392j\">CLI 用来根据所提供的配置执行复杂任务（比如编译和执行测试）的工具。\n建筑师是一个外壳，它用来对一个指定的<a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">目标配置</a>来执行一个<a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">构建器（builder）</a> （定义在一个 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 包</a>中）。\n<a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">构建器</a>在 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 包</a>中定义。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4eh2rucujsgrfnvx9eoyn3l3\">在<a href=\"guide/workspace-config#project-tool-configuration-options\" title=\"Project tool configuration options - Angular workspace configuration | Angular\">工作区配置文件</a>中，\"architect\" 区可以为建筑师的各个构建器提供配置项。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5bn4cu4v6qnbavbfxn814k8j\">比如，内置的 linting 构建器定义在 <code>@angular-devkit/build_angular:tslint</code> 包中，它使用 <a href=\"https://palantir.github.io/tslint\" title=\"TSLint | Palantir | GitHub\">TSLint</a> 工具来执行 linting 操作，其配置是在 <code>tslint.json</code> 文件中指定的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f9heathe10rjzr1592ad9dau\">使用 <a href=\"cli/run\" title=\"ng run | CLI | Angular\">CLI 命令 <code>ng run</code></a>可以通过指定与某个构建器相关联的<a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">目标配置</a>来调用此构建器。\n整合器（Integrator）可以添加一些构建器来启用某些工具和工作流，以便通过 Angular CLI 来运行它。比如，自定义构建器可以把 CLI 命令（如 <code>ng build</code> 或 <code>ng test</code>）的内置实现替换为第三方工具。</p>\n<h2 id=\"attribute-directive\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtoud1afwsr2t6nv750lvye3e\">属性型指令（attribute directive）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#attribute-directive\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqmlazgo8tv6nqr2mc99b644m\"><a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令（directive）</a>的一种。可以监听或修改其它 HTML 元素、特性 （attribute）、属性 （property）、组件的行为。通常用作 HTML 属性，就像它的名字所暗示的那样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgcn21roj791urh8t801d892u\">要了解更多，参阅<a href=\"guide/attribute-directives\" title=\"Attribute directives | Angular\"><em>属性型指令</em></a>。</p>\n<h2 id=\"binding\">binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#binding\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5iaz2nbxjlbqp8xyedkvryeas\">广义上是指把变量或属性设置为某个数据值的一种实践。\n在 Angular 中，一般是指<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">数据绑定</a>，它会根据数据对象属性的值来设置 DOM 对象的属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kmcray6ohqsh1n32f79qxkd8\">有时也会指在“<a href=\"guide/glossary#token\" title=\"token - Glossary | Angular\">令牌（Token）</a>”和依赖<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者（Provider）</a>\n之间的<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依赖注入</a> 绑定。</p>\n<h2 id=\"bootstrap\">bootstrap<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#bootstrap\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9u4qyfm1tgo2c2vlpuhvvxe8o\">一种用来初始化和启动应用或系统的途径。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dlmg364km558lx7qi9c8bjrk\">在 Angular 中，应用的根模块（<code>AppModule</code>）有一个 <code>bootstrap</code> 属性，用于指出该应用的的顶层<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">组件</a>。\n在引导期间，Angular 会创建这些组件，并插入到宿主页面 <code>index.html</code> 中。\n你可以在同一个 <code>index.html</code> 中引导多个应用，每个应用都有一些自己的组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23jvcbh0pdo0nq5e4mdedelcp\">要了解更多，参阅<a href=\"guide/bootstrapping\" title=\"Launching your app with a root module | Angular\">引导启动</a>一章。</p>\n<h2 id=\"builder\">builder<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#builder\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59ux9n64lh7n7m8sz5pbqrjgw\">一个函数，它使用 <a href=\"guide/glossary#architect\" title=\"Architect - Glossary | Angular\">Architect</a> API 来执行复杂的过程，比如构建或测试。\n构建器的代码定义在一个 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 包</a>中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jvg21lprihohdi3gapwkoahy\">比如，<a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/browser\" title=\"packages/angular_devkit/build_angular/src/builders/browser | angular/angular-cli | GitHub\">BrowserBuilder</a> 针对某个浏览器目标运行 <a href=\"https://webpack.js.org\" title=\"webpack | JS.ORG\">webpack</a> 构建，而 <a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/karma\" title=\"packages/angular_devkit/build_angular/src/builders/karma | angular/angular-cli | GitHub\">KarmaBuilder</a> 则启动 Karma 服务器，并且针对单元测试运行 webpack 构建。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40t5khlep55ss4ycjo0lu3i17\"><a href=\"cli/run\" title=\"ng run | CLI | Angular\">CLI 命令 <code>ng run</code></a> 使用一个特定的<a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">目标配置</a>来调用构建器。\n<a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">工作区配置</a>文件 <code>angular.json</code> 中包含这些内置构建器的默认配置。</p>\n<p><a id=\"camelcase\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wvjp1ez0vuotxzpibp7c6lpn\"><a id=\"case-conventions\"></a>\n<a id=\"dash-case\"></a></p>\n<h2 id=\"case-types\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a568xsl3dc3qo8n6s8o8je3bc\">大小写类型（case types）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#case-types\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5qdhmgtmv4mzqpqei2nk5lq3\">Angular 使用大小写约定来区分多种名字，详见<a href=\"guide/styleguide#02-01\" title=\"Style 02-01 - Angular coding style guide | Angular\">风格指南中的 \"命名\" 一节</a>。下面是这些大小写类型的汇总表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n<th align=\"left\">example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">camelCase</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"962yk3ayl2krsashxih3xo2x4\">符号、属性、方法、管道名称、非组件指令选择器、常量。\n<br>标准或小驼峰命名法在项目的第一个字母上使用小写。</td>\n<td align=\"left\"><code>selectedHero</code></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evcctj6van7vq78xvso4qv4pm\">UpperCamelCase\n<br>PascalCase</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evo4ha0hwoz1j9qzrr1tvgdgj\">类名，包括定义组件、接口、NgModules、指令和管道的类。\n<br>大驼峰命名法在项目的第一个字母上使用大写。</td>\n<td align=\"left\"><code>HeroComponent</code></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2eyldje9g77h0o9bzhx4vhmpe\">连字符命名法\n<br>连字符命名法</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"behcwvkzwty63zqdjqenj7mhe\">文件名的描述部分，组件选择器。</td>\n<td align=\"left\"><code>app-hero-list</code></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ev1axrd46fjr9tow2c52js1q\">下划线命名法\n<br>蛇形命名法</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zhp7ne9ehaq9523m0z788oxt\">在 Angular 中通常不使用。\n<br>蛇形命名法使用下划线连接的单词。</td>\n<td align=\"left\"><code>convert_link_mode</code></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jbzrobusoom4h5bw23v0qc61\">UPPER_UNDERSCORE_CASE\n<br>UPPER_SNAKE_CASE\n<br>SCREAMING_SNAKE_CASE</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"139v4gcib22z4enggxnyumgyg\">常量的传统命名法。\n<br>这种命名法是可接受的，但小驼峰命名法更受青睐。\n<br>大写蛇形命名法使用所有大写字母连接的单词。</td>\n<td align=\"left\"><code>FIX_ME</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"change-detection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2f3qjciuif88opo7aq2e1ayol\">变更检测（change detection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#change-detection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a85bxlb2p70skaagipwp3zqip\">Angular 框架会通过此机制将应用程序 UI 的状态与数据的状态同步。变更检测器在运行时会检查数据模型的当前状态，并在下一轮迭代时将其和先前保存的状态进行比较。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"598ef5emxhmfhjufxrf5380ao\">当应用逻辑更改组件数据时，绑定到视图中 DOM 属性上的值也要随之更改。变更检测器负责更新视图以反映当前的数据模型。类似地，用户也可以与 UI 进行交互，从而引发要更改数据模型状态的事件。这些事件可以触发变更检测。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2iaagz5l5v1sgk7zrwyaawpot\">使用默认的变更检测策略，变更检测器将遍历每个视图模型上的<a href=\"guide/glossary#view-hierarchy\" title=\"view hierarchy - Glossary | Angular\">视图层次结构</a>，以检查模板中的每个<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">数据绑定属性</a>。在第一阶段，它将所依赖的数据的当前状态与先前状态进行比较，并收集更改。在第二阶段，它将更新页面上的 DOM 以反映出所有新的数据值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bep3d3rj2xflm9inft7xs5x4g\">如果设置了 <code>OnPush</code> 变更检测策略，则变更检测器仅在<a href=\"api/core/ChangeDetectorRef\" title=\"ChangeDetectorRef | @angular/core - API | Angular\">显式调用</a>它或由 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 引用的变化或触发事件处理程序时运行。这通常可以提高性能。欲知详情，参阅<a href=\"https://web.dev/faster-angular-change-detection\" title=\"Optimize Angular's change detection | web.dev\">优化 Angular 的变更检测</a>。</p>\n<p><a id=\"decorator\"></a></p>\n<h2 id=\"class-decorator\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u0csxwcezti2btjmhh7c43mu\">类装饰器（class decorator）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#class-decorator\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39579k1ybiglynsmdvbywnddz\"><a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">装饰器</a>会出现在类定义的紧前方，用来声明该类具有指定的类型，并且提供适合该类型的元数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bnw3hhaf5e2synn29jszm1ng\">可以用下列装饰器来声明 Angular 的类。</p>\n<ul>\n<li><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code></li>\n<li><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code></li>\n<li><code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>()</code></li>\n<li><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code></li>\n<li><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code></li>\n</ul>\n<h2 id=\"class-field-decorator\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c089urg3e2l43gzkoomgrstob\">类字段装饰器（class field decorator）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#class-field-decorator\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"boagv9buvznpmyw7l0jusuds4\">出现在类定义中属性紧前方的<a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">装饰器</a>语句用来声明该字段的类型。比如 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code>。</p>\n<h2 id=\"collection\">collection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#collection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44uvs3e10f47mc1fdz8wvffrf\">在 Angular 中，是指收录在同一个 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 包</a> 中的<a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">一组原理图（schematics）</a>。</p>\n<p><a id=\"cli\"></a></p>\n<h2 id=\"command-line-interface-cli\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bq4mbf8mlf0lniizj4b634d6e\">命令行界面（CLI）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#command-line-interface-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"w620uxyjppel3fl0d5iry356\"><a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">Angular CLI</a> 是一个命令行工具，用于管理 Angular 的开发周期。它用于为<a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作区</a>或<a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">项目</a>创建初始的脚手架，并且运行<a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">生成器（schematics）</a>来为初始生成的版本添加或修改各类代码。\nCLI 支持开发周期中的所有阶段，比如构建、测试、打包和部署。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nprchynd6na35eafmn54pae0\">要开始使用 CLI 来创建新项目，参阅<a href=\"guide/setup-local\" title=\"Setting up the local environment and workspace | Angular\">建立本地开发环境</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1nbhasbtyew5vdhlt6nvd9v\">要了解 CLI 的全部功能，参阅 <a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">CLI 命令参考手册</a>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lf44wy9t3qwpsuo0ejegvqu7\">参阅<a href=\"guide/glossary#schematics-cli\" title=\"Schematics CLI - Glossary | Angular\">Schematics CLI</a>。</p>\n<h2 id=\"component\">component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#component\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fqg1vc771eygbyn6fo9dqwbr\">一个带有 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">装饰器</a>的类，和它的伴生<a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">模板</a>关联在一起。组件类及其模板共同定义了一个<a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">视图</a>。\n组件是<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>的一种特例。<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 装饰器扩展了 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 装饰器，增加了一些与模板有关的特性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21dsh63sonbl1owyn91561r4f\">Angular 的组件类负责暴露数据，并通过<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">数据绑定机制</a>来处理绝大多数视图的显示和用户交互逻辑。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e82hl0lhjq2kswmp9lc60ujhe\">要了解更多关于组件类、模板和视图的知识，参阅 <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">架构概览</a> 一章。</p>\n<h2 id=\"configuration\">configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#configuration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ndu9fh8736yj9bkuz6p8ikwy\">参阅<a href=\"guide/glossary#workspace-configuration\" title=\"workspace configuration - Glossary | Angular\">工作区配置</a></p>\n<h2 id=\"content-projection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yif9xlo4bxwcfk36lgcyaf5q\">内容投影（content projection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7eht792jx9oy503bs1xtqx69c\">一种从组件外把 DOM 内容插入到当前组件视图的特定位置上的方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ap6s5s1q03gp3vtkhd5ts6mzz\">欲知详情，参阅<a href=\"guide/lifecycle-hooks#responding-to-projected-content-changes\" title=\"Responding to projected content changes - Lifecycle Hooks | Angular\">内容变化的应对方式</a>。</p>\n<h2 id=\"custom-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dy8qwgl7qkghmmzf2ybltuvy\">自定义元素（Custom element）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#custom-element\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3q6sqypuswby22frfqimfmxp4\">一种 Web 平台的特性，目前已经被绝大多数浏览器支持，在其它浏览器中也可以通过腻子脚本获得支持（参阅<a href=\"guide/browser-support\" title=\"Browser support | Angular\">浏览器支持</a>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xjzg11nw0vjr9whcjm0i9w5x\">这种自定义元素特性通过允许你定义标签（其内容是由 JavaScript 代码来创建和控制的）来扩展 HTML。当自定义元素被添加到 <a href=\"https://developer.mozilla.org/docs/Web/API/CustomElementRegistry\" title=\"CustomElementRegistry | MDN\">CustomElementRegistry</a> 之后就会被浏览器识别。\n自定义元素也叫 <em>Web Component</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exuzkwzlradeuzty14cd7x2i6\">你可以使用 API 来转换 Angular 组件，以便它能够注册进浏览器中，并且可以用在你往 DOM 中添加的任意 HTML 中。\n自定义元素标签可以把组件的视图（包括变更检测和数据绑定功能）插入到不受 Angular 控制的内容中。\n参见 <a href=\"guide/glossary#angular-element\" title=\"Angular element - Glossary | Angular\">Angular 元素</a>。\n另见<a href=\"guide/glossary#dynamic-component-loading\" title=\"dynamic component loading - Glossary | Angular\">动态组件加载</a>。</p>\n<h2 id=\"data-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2y07x7vu63dseda016l7arn02\">数据绑定（data binding）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#data-binding\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61pulbu20ydgnwhg6wtoqcltw\">这个过程可以让应用程序将数据展示给用户，并对用户的操作（点击、触屏、按键）做出回应。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cc7fprqotkvlv76kofm0agvgi\">在数据绑定机制下，你只要声明一下 HTML 部件和数据源之间的关系，把细节交给框架去处理。而以前的手动操作过程是：将数据推送到 HTML 页面中、添加事件监听器、从屏幕获取变化后的数据，并更新应用中的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mhg0w7ahcva5ffj1lrn9mkxo\">更多的绑定形式，见<a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">模板语法</a>：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vdrg4on5huk4pwznt900sibz\"><a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">插值</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akx4cqgi6ubm4fzf1omimo5gk\"><a href=\"guide/property-binding\" title=\"Property binding | Angular\">property 绑定</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dup856fnp7ar10i0mkrmuc0wa\"><a href=\"guide/event-binding\" title=\"Event binding | Angular\">事件绑定</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7tik5pzvrlurpjx2dx9upytab\"><a href=\"guide/attribute-binding\" title=\"Attribute binding | Angular\">attribute 绑定</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnze0k9z26j74p6jfjghxgtis\"><a href=\"guide/class-binding\" title=\"Class and style binding | Angular\">CSS 类绑定与样式绑定</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2i4d9njszu635kh0oc9zt5cj\"><a href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\" title=\"Displaying and updating properties with ngModel - Built-in directives | Angular\">基于 ngModel 的双向数据绑定</a></li>\n</ul>\n<h2 id=\"declarable\">declarable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#declarable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79ig63eksa174mawjrsqspph4\">可以添加到 <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a> 的 <code>declarations</code> 列表中的类。你可以声明<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">组件</a>、<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>和<a href=\"guide/glossary#pipe\" title=\"pipe - Glossary | Angular\">管道</a>，除非它们的装饰器中的 <code>standalone</code> 标志设置为 <code>true</code>，这会让它们成为独立的。注意：独立组件/指令/管道都<strong>不是</strong>可声明对象。有关独立类的更多信息，请参阅<a href=\"guide/glossary#standalone\" title=\"standalone - Glossary | Angular\">后面的内容</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ck6a1p9ht1x0k3vj7io5fgck\"><em>不要</em>声明：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dk88p9hmk6jzpaqvjel4lwo7\">已经声明为<a href=\"guide/glossary#standalone\" title=\"standalone - Glossary | Angular\">独立（standalone）</a>的类。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58w5pryd80jh0i714ywh11c90\">已经在其它 NgModule 中声明过的类。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"budub8jh5mrd7rd67mzyc8uos\">从其它包中导入的指令数组。比如，不要再次声明来自 <code>@angular/forms</code> 中的 <code>FORMS_DIRECTIVES</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90qo8ofgj9pi1mplrso3z355i\">NgModule 类。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"815a6dnctobiecpg9y3gn94qm\">服务类。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ykf7z9wowex5yyav8ajkb582\">非 Angular 的类和对象，比如：字符串、数字、函数、实体模型、配置、业务逻辑和辅助类。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96z2zojt8ypx1unqkrqhf9m9u\">请注意，可声明对象也可以声明为独立的，并且只需在其他独立组件或现有的 NgModules 中导入即可，要了解更多信息，请参阅<a href=\"guide/standalone-components\" title=\"Getting started with standalone components | Angular\">独立组件指南</a>。</p>\n<h2 id=\"decorator--decoration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nvt11ta9u6xi2ykxdf8kw8y3\">装饰器（decorator | decoration）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#decorator--decoration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coqjsrt1t2ciu877a2nnvrskk\">一个函数，用来修饰紧随其后的类或属性定义。\n装饰器（也叫注解）是一种处于阶段 3（stage 3）的试验性 <a href=\"https://github.com/tc39/proposal-decorators\" title=\"tc39/proposal-decorators | GitHub\">JavaScript 语言特性</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8wie8vvrb7723wx000vs49m2\">Angular 定义了一些装饰器，用来为类或属性附加元数据，来让自己知道那些类或属性的含义，以及该如何处理它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6d11kuz88xkif8nkjnw2vixbf\">欲知详情，参阅 <a href=\"guide/glossary#class-decorator\" title=\"class decorator - Glossary | Angular\">类装饰器</a>、<a href=\"guide/glossary#class-field-decorator\" title=\"class field decorator - Glossary | Angular\">类属性装饰器</a>。</p>\n<h2 id=\"dependency-injection-di\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lwy6r556v7z7zfy3np9h0j3p\">依赖注入（dependency injection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dependency-injection-di\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87welpadyxnunt49pbnrt3nhq\">依赖注入既是设计模式，同时又是一种机制：当应用程序的一些部件（即一些依赖）需要另一些部件时，利用依赖注入来创建被请求的部件，并将它们注入到需要它们的部件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azoz7ngibqmau9lwwxq6nygh1\">在 Angular 中，依赖通常是服务，但是也可以是值，比如字符串或函数。应用的<a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">注入器</a>（它是在启动期间自动创建的）会使用该服务或值的配置好的<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者</a>来按需实例化这些依赖。各个不同的提供者可以为同一个服务提供不同的实现。</p>\n<h2 id=\"di-token\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3p35x0r15h0gkmjrqrr6uq78e\">DI 令牌（token）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#di-token\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dekej074ky6atnr12v3jmrq7u\">一种用来查阅的令牌，它关联到一个依赖<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者</a>，用于<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依赖注入</a>系统中。</p>\n<h2 id=\"directive\">directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#directive\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5k5yyskuk5u18i82z6lu4t7lj\">一个可以修改 DOM 结构或修改 DOM 和组件数据模型中某些属性的类。\n指令类的定义紧跟在 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">装饰器</a>之后，以提供元数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24pac4xru60fgj4n3hm0ef07e\">指令类几乎总与 HTML 元素或属性 （attribute） 相关。\n通常会把这些 HTML 元素或者属性 （attribute） 当做指令本身。\n当 Angular 在 HTML <a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">模板中</a>发现某个指令时，会创建与之相匹配的指令类的实例，并且把这部分 DOM 的控制权交给它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xzmr7ulzu6hj8xtasatx1aih\">Angular 有三类指令：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95rd2us4tb8boxawz2v4r79ub\"><a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">组件</a>使用 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 为某个类关联一个模板。\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 是对 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 的扩展。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8htjb686pw5zdkomngg42mv4y\"><a href=\"guide/glossary#attribute-directive\" title=\"attribute directive - Glossary | Angular\">属性型指令</a>修改页面元素的行为和外观。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41zg1f3f9ylh60r1ir01p697o\"><a href=\"guide/glossary#structural-directive\" title=\"structural directive - Glossary | Angular\">结构型指令</a>修改 DOM 的结构。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90l0gxcum4le9zfo19rqb9qy0\">Angular 提供了一些以 <code>ng</code> 为前缀的内置指令。你也可以创建新的指令来实现自己的功能。\n你可以为自定义指令关联一个<em>选择器</em>，以扩展<a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">模板语法</a>，从而让你能在应用中使用它。\n<em>选择器</em>是一个 HTML 标签，比如 <code>&lt;my-directive&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"r1o9ymtwmtxccnopj7rniigw\"><strong>UpperCamelCase</strong>（比如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>）用于引用指令类。在描述属性和指令行为时，使用 <strong>UpperCamelCase</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8irn3kfsbq598fd5gah5xkhdv\"><strong>lowerCamelCase</strong>（比如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>）用于引用指令的属性名。在描述如何将指令应用于 HTML 模板中的元素时，使用 <strong>lowerCamelCase</strong>。</p>\n<h2 id=\"domain-specific-language-dsl\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"devr103gv7zjcounv27c2kq3f\">领域特定语言（DSL）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#domain-specific-language-dsl\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wgrdoeoziwoj3jf6wzjuf7d\">一种特殊用途的库或 API。欲知详情，参阅<a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\" title=\"Domain-specific language | Wikipedia\">领域特定语言</a>词条。\nAngular 使用领域特定语言扩展了 TypeScript，用于与 Angular 应用相关的许多领域。这些 DSL 都定义在 NgModule 中，比如 <a href=\"guide/animations\" title=\"Introduction to Angular animations | Angular\">动画</a>、<a href=\"guide/forms\" title=\"Building a template-driven form | Angular\">表单</a>和<a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">路由与导航</a></p>\n<h2 id=\"dynamic-component-loading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8ijbf828dc7ft8vv3m5iu8jz\">动态组件加载（dynamic component loading）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dynamic-component-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3a45qs9wpedvd5jcqbip7o4gi\">一种在运行期间把组件添加到 DOM 中的技术，它需要你从编译期间排除该组件，然后，当你把它添加到 DOM 中时，再把它接入 Angular 的变更检测与事件处理框架。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bex3xvaff88lsktus4rvw7yu\">参阅<a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">自定义元素</a>，它提供了一种更简单的方式来达到相同的效果。</p>\n<h2 id=\"eager-loading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1j8y9a8gxzmfhub5kblkaakmd\">急性加载（Eager Loading）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#eager-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lawz111smgndn5l3pql78598\">在启动时加载的 NgModule 和组件称为急性加载，与之相对的是那些在运行期间才加载的方式称为惰性加载。\n参阅<a href=\"guide/glossary#lazy-loading\" title=\"lazy loading - Glossary | Angular\">惰性加载</a>。</p>\n<h2 id=\"ecmascript\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zi36rc6rzoicxpyj9a6zje6f\">ECMAScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ecmascript\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92nbgm91hvuyixqlxsyih1e4z\"><a href=\"https://en.wikipedia.org/wiki/ECMAScript\" title=\"ECMAScript | Wikipedia\">官方 JavaScript 语言规范</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dpsthaizhfqdtleh349kljtuu\">并不是所有浏览器都支持最新的 ECMAScript 标准，不过你可以使用<a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">转译器</a>（比如<a href=\"guide/glossary#typescript\" title=\"TypeScript - Glossary | Angular\">TypeScript</a>）来用最新特性写代码，然后它会被转译成可以在浏览器的其它版本上运行的代码。\n<a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">转译器</a>的例子之一就是 <a href=\"guide/glossary#typescript\" title=\"TypeScript - Glossary | Angular\">TypeScript</a>\n要了解更多，参阅<a href=\"guide/browser-support\" title=\"Browser support | Angular\">浏览器支持</a>页。</p>\n<h2 id=\"element\">element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#element\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3kvluxmkz5hmhxbneg7svp18\">Angular 定义了 <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 类来包装与渲染有关的原生 UI 元素。这让你可以在大多数情况下使用 Angular 的模板和数据绑定机制来访问 DOM 元素，而不必再引用原生元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2es5k8b3afitx2yafyhx02cju\">本文档中一般会使用<em>元素（Element）</em>，以区别于 <em>DOM 元素</em>。这里的<em>元素</em>指的是 <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 类的实例。如果需要，<em>DOM 元素</em>是可以直接访问的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3alo6v2al557zcqa0ejg4nu6u\">欲知详情，参阅<a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">自定义元素</a>。</p>\n<h2 id=\"entry-point\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0jpydektwpa7lfw2q65nlx90\">入口点（entry point）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#entry-point\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dpgrfkhieghjkikugogout8u\"><a href=\"guide/glossary#module\" title=\"module - Glossary | Angular\">JavaScript 模块</a>的目的是供 <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm 包</a>的用户进行导入。入口点模块通常会重新导出来自其它内部模块的一些符号。每个包可以包含多个入口点。比如 <code>@angular/core</code> 就有两个入口点模块，它们可以使用名字 <code>@angular/core</code> 和 <code>@angular/core/testing</code> 进行导入。</p>\n<h2 id=\"form-control\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjxnjk4i61zhi55k88f87ra8d\">表单控件（form control）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-control\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58gcvmfo1iab3lwpls4kykr60\">一个 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 实例，它是 Angular 表单的基本构造块。它会和 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 一起，跟踪表单输入元素的值、有效性和状态。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv133ls5ksgf2oedzof6odsvj\">欲知详情，参阅 <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Angular 表单简介</a>。</p>\n<h2 id=\"form-model\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewykkcc5ty268a655oejbykky\">表单模型（form model）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-model\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzf6zv0gjae3a3h97t0y08glw\">是指在指定的时间点，表单输入元素的值和验证状态的\"事实之源\"。当使用<a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">响应式表单</a>时，表单模型会在组件类中显式创建。当使用<a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">模板驱动表单</a>时，表单模型是由一些指令隐式创建的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck43e3hgqz0mv8o90eapk9oj0\">要深入了解响应式表单和模板驱动表单，参阅 <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Angular 表单简介</a>。</p>\n<h2 id=\"form-validation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7vyccbarjpifilzjoc0nlrrj8\">表单验证（form validation）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-validation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6skmkge113gc6f9xuc2nsuzap\">一种检查，当表单值发生变化时运行，并根据预定义的约束来汇报指定的这些值是否正确并完全。响应式表单使用<a href=\"guide/form-validation#adding-custom-validators-to-reactive-forms\" title=\"Adding custom validators to reactive forms - Validating form input | Angular\">验证器函数</a>，而模板驱动表单则使用<a href=\"guide/form-validation#adding-custom-validators-to-template-driven-forms\" title=\"Adding custom validators to template-driven forms - Validating form input | Angular\">验证器指令</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zaypc5pa8c8iu51jfuqcckgp\">要了解更多，参阅<a href=\"guide/form-validation\" title=\"Validating form input | Angular\">表单验证器</a>。</p>\n<h2 id=\"immutability\">immutability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#immutability\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjp0olqh79k7ivnvec7lw5jx\">是否能够在创建之后修改值的状态。<a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">响应式表单</a>会执行不可变性的更改，每次更改数据模型都会生成一个新的数据模型，而不是修改现有的数据模型。\n<a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">模板驱动表单</a>则会执行可变的更改，它通过 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 和<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">双向数据绑定</a>来就地修改现有的数据模型。</p>\n<h2 id=\"injectable\">injectable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#injectable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70jcj9pruqsmj7wpwyacff4fj\">Angular 中的类或其它概念使用<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依赖注入</a>机制来提供依赖。\n可供注入的<a href=\"guide/glossary#service\" title=\"service - Glossary | Angular\">服务</a>类必须使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">装饰器</a>标出来。其它条目，比如常量值，也可用于注入。</p>\n<h2 id=\"injector\">injector<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#injector\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1947v6ixa3npk3etrmswsbbod\">Angular <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依赖注入系统</a>中可以在缓存中根据名字查找依赖，也可以通过配置过的<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者</a>来创建依赖。\n启动过程中会自动为每个模块创建一个注入器，并被组件树继承。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ukfmhua6o1gfd9l0ucvi3ucp\">注入器会提供依赖的一个单例，并把这个单例对象注入到多个组件中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1z63p2mwu3kh2xv905yfeh349\">模块和组件级别的注入器树可以为它们拥有的组件及其子组件提供同一个依赖的不同实例。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cd1tu550puqhogk02pp04ksr\">你可以为同一个依赖使用不同的提供者来配置这些注入器，这些提供者可以为同一个依赖提供不同的实现。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37iqy9af9zgx85ylc3jyuwiz2\">要了解关于多级注入器的更多知识，参阅<a href=\"guide/hierarchical-dependency-injection\" title=\"Hierarchical injectors | Angular\">多级依赖注入</a>一章。</p>\n<h2 id=\"input\">input<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#input\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dw1xr8g2sl2fh9dvqgofukkyl\">当定义<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>时，指令属性上的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器让该属性可以作为<a href=\"guide/property-binding\" title=\"Property binding | Angular\">属性绑定</a>的<em>目标</em>使用。\n数据值会从等号右侧的<a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">模板表达式</a>所指定的数据源流入组件的输入属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6eidhux3916zjxd6n46qu3u7x\">要了解更多，参阅 <a href=\"guide/inputs-outputs\" title=\"Sharing data between child and parent directives and components | Angular\"><code>@Input()</code> 和 <code>@Output()</code> 装饰器函数</a>。</p>\n<h2 id=\"interpolation\">interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#interpolation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vuvm0uy3sxt5bnnwq9ff7c71\"><a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">属性数据绑定 （property data binding)</a> 的一种形式，位于双花括号中的<a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">模板表达式 （template expression）</a>会被渲染成文本。\n在被赋值给元素属性或者显示在元素标签中之前，这些文本可能会先与周边的文本合并，参阅下面的例子。</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;label&gt;My current hero is {{hero.name}}&lt;/label&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"125008uusaf9r2qxf1ltiqdjw\">在<a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">插值</a>指南中阅读更多内容。</p>\n<h2 id=\"ivy\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eeuxo3wav90yu5if407s0vsyt\">Ivy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ivy\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2z3vjkxhkvjh4l7ey0ntq7xb\">Ivy 是 Angular 当前<a href=\"https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7\" title=\"A plan for version 8.0 and Ivy | Angular Blog\">编译和渲染管道</a>的历史代号。它现在是唯一受支持的引擎，所以，一切都在使用 Ivy。</p>\n<h2 id=\"javascript\">JavaScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#javascript\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3lqvu2hmkf0sfgwumpudzwcdd\">欲知详情，参阅 <a href=\"guide/glossary#ecmascript\" title=\"ECMAScript - Glossary | Angular\">ECMAScript</a>。\n欲知详情，另见 <a href=\"guide/glossary#typescript\" title=\"TypeScript - Glossary | Angular\">TypeScript</a>。</p>\n<p><a id=\"jit\"></a></p>\n<h2 id=\"just-in-time-jit-compilation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"282ndyo4yqa2hdvwtz9njqwvi\">即时 （just-in-time, JIT） 编译<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#just-in-time-jit-compilation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ryh9vfv9nr599e87jcshibh2\">在启动期间，Angular 的即时编译器（JIT）会在运行期间把你的 Angular HTML 和 TypeScript 代码转换成高效的 JavaScript 代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6m5so7tnaqvolg8238e8j5nsm\">JIT是Angular 8之前的默认编译模式（请参阅\n<a href=\"https://angular.io/guide/aot-compiler#choosing-a-compiler\">选择编译器</a>了解更多信息）。 JIT模式强烈不建议用于生产环境，因为它会导致应用程序负载过大，影响启动性能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rj6rnpi44z0xeceb1efdogjo\">与<a href=\"guide/glossary#ahead-of-time-aot-compilation\" title=\"ahead-of-time (AOT) compilation - Glossary | Angular\">预先 （AOT） 编译相比</a>。</p>\n<h2 id=\"lazy-loading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60kwdi1vj3oopg4mkduauzcf\">惰性加载（lazy loading）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#lazy-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14c85ams7kpkn5qhu8dsj1tzb\">惰性加载过程会把应用拆分成多个包并且按需加载它们，从而提高应用加载速度。\n比如，一些依赖可以根据需要进行惰性加载，与之相对的是那些 <a href=\"guide/glossary#eager-loading\" title=\"eager loading - Glossary | Angular\">急性加载</a> 的模块，它们是根模块所要用的，因此会在启动期间加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8b9zuxijonvki346cca8ae5n5\"><a href=\"guide/glossary#router\" title=\"router - Glossary | Angular\">路由器</a>只有当父视图激活时才需要加载子视图。同样，你还可以构建一些自定义元素，它们也可以在需要时才加载进 Angular 应用。</p>\n<h2 id=\"library\">library<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#library\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6z54vzteoz1apvleq8el4dzuu\">一种 Angular <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">项目</a>。用来让其它 Angular 应用包含它，以提供各种功能。库不是一个完整的 Angular 应用，不能独立运行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kw00dma5rajht04052zibs3e\">要想为非 Angular 应用添加可复用的 Angular 功能，你可以使用 Angular 的<a href=\"guide/glossary#angular-element\" title=\"Angular element - Glossary | Angular\">自定义元素</a>。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pzx8a0ngr5pk69hwolv8urqi\">库的开发者可以使用 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 在现有的 <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作区</a> 中 <code>generate</code> 新库的脚手架，还能把库发布为 <code>npm</code> 包。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fs7gx0bkfop2qvadr8kf2osi\">应用开发者可以使用 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 来把一个已发布的库 <code>add</code> 进这个应用所在的<a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作区</a>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3mssedafw6thp9jbwn20nnme\">参阅 <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">原理图（schematic）</a>。</p>\n<h2 id=\"lifecycle-hook\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dj3jsw8k8ar8k6l9dpy7vwl9a\">生命周期钩子（lifecycle hook）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#lifecycle-hook\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etqlm5gp4cci59vus5ja11lhn\">一种接口，它允许你监听<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>和<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">组件</a>的生命周期，比如创建、更新和销毁等。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2itj14z7ka6091lf5ti7o80br\">每个接口只有一个钩子方法，方法名是接口名加前缀 <code>ng</code>。比如，<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> 接口的钩子方法名为 <code>ngOnInit</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f27m3f34bco5nahe9zu6xicwa\">Angular 会按以下顺序调用钩子方法：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eh61rnooo8hvjybxah1h8wqqb\">钩子方法</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><code>ngOnChanges</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ek45s7i5awdnb7vt4nauad2jd\">当\n<input>或\n<output>绑定值发生变化时。</output></td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><code>ngOnInit</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ed74hzhc26tgils6p3c3qrzuq\">在第一个\n<code>ngOnChanges</code>之后。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><code>ngDoCheck</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8e66gzv2ixt4dsftoifsyuyz0\">开发人员自定义的变更检测。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><code>ngAfterContentInit</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gxrmbrj4fwep4ngemfb12jj8\">在组件内容初始化后。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><code>ngAfterContentChecked</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2grtdrsq4b22g1coka5j6axq\">在每次检查组件内容后。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><code>ngAfterViewInit</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1rtg8663vkd6wex38js3hpcc\">在组件视图初始化后。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><code>ngAfterViewChecked</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"730rvnk9bm8jmmiyija1154mw\">在每次检查组件视图后。</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><code>ngOnDestroy</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8gvssgqx6osn145s171704l4r\">在指令销毁之前。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ozr0nkrcqosguwvo5flssxc5\">欲知详情，参阅<a href=\"guide/lifecycle-hooks\" title=\"Lifecycle Hooks | Angular\">生命周期钩子</a>。</p>\n<h2 id=\"module\">module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#module\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9esve23jw4s0aul1wmhimrlnn\">通常，模块会收集一组专注于单一目的的代码块。Angular 既使用 JavaScript 的标准模块，也定义了 Angular 自己的模块，也就是 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ga3e6o7uofo70xiagely84im\">在 JavaScript （ECMAScript） 中，每个文件都是一个模块，该文件中定义的所有对象都属于这个模块。这些对象可以导出为公共对象，而这些公共对象可以被其它模块导入后使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blseyntucobln3u5snj8zs56a\">Angular 就是用一组 JavaScript 模块的形式发布的。这些模块的集合也称为库。每个 Angular 库都带有 <code>@angular</code> 前缀。\n使用 <a href=\"https://docs.npmjs.com/about-npm\" title=\"About npm | npm\">NPM 包管理器</a>安装它们，并且使用 JavaScript 的 <code>import</code> 声明语句从中导入各个部件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwclzdjozd86sfh0vzlbgdswq\">与 <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a> 的对比。</p>\n<h2 id=\"ngmodule\">NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ngmodule\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfv4cxs7fyhkl9zim3qrp47p6\">一种带有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">装饰器</a>的类定义，它会声明并提供一组专注于特定功能的代码块，比如业务领域、工作流或一组紧密相关的能力集等。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qw5mwxzqp8ckrflv5c9embv2\">像 <a href=\"guide/glossary#module\" title=\"module - Glossary | Angular\">JavaScript 模块</a>一样，NgModule 能导出那些可供其它 NgModule 使用的功能，也可以从其它 NgModule 中导入其公开的功能。\nNgModule 类的元数据中包括一些供应用使用的组件、指令和管道，以及导入、导出列表。参阅<a href=\"guide/glossary#declarable\" title=\"declarable - Glossary | Angular\">可声明对象</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ruwdpgy5wrrgc9ungujwl3xy\">NgModule 通常会根据它导出的内容决定其文件名，比如，Angular 的 <a href=\"api/common/DatePipe\" title=\"DatePipe | @angular/common - API | Angular\">DatePipe</a> 类就属于 <code>date_pipe.ts</code> 文件中一个名叫 <code>date_pipe</code> 的特性模块。\n你可以从 Angular 的<a href=\"guide/glossary#scoped-package\" title=\"scoped package - Glossary | Angular\">范围化包</a>中导入它们，比如 <code>@angular/core</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dg8lzcksx38jn08cnzxmw9aw6\">每个 Angular 应用都有一个根模块。通常，这个类会命名为 <code>AppModule</code>，并且位于一个名叫 <code>app.module.ts</code> 的文件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3z5vtqei2ulaqh36jdw5p6qh7\">要了解更多，参阅 <a href=\"guide/ngmodules\" title=\"NgModules | Angular\">NgModules</a>。</p>\n<h2 id=\"npm-package\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ab2q3jstpqh365tugui0kg0y\">npm 包<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#npm-package\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aj797pftcutefav8lhvaanvt\"><a href=\"https://docs.npmjs.com/about-npm\" title=\"About npm | npm\">npm 包管理器</a>用于分发与加载 Angular 的模块和库。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8u6cgo661yl3m3ocjh7x6qjxn\">你还可以了解 Angular 如何使用 <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">Npm 包</a> 的更多知识。</p>\n<h2 id=\"ngc\">ngc<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ngc\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"89qm320bmxso2fls829x4t9cp\"><code>ngc</code> 是一个 TypeScript 到 JavaScript 的转译器，它会处理 Angular 的注解、元数据、模板，并生成 JavaScript 代码。其最新的实现在内部被称为 <code>ngtsc</code>，因为它是一个对 TypeScript 编译器 <code>tsc</code> 的最小化包装，为其加入了 Angular 代码的转换过程。</p>\n<h2 id=\"observable\">observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#observable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hzi7js3xc2dfg77d9e2tykgk\">一个多值生成器，这些值会被推送给<a href=\"guide/glossary#subscriber\" title=\"subscriber - Glossary | Angular\">订阅者</a>。\nAngular 中到处都会用到异步事件处理。你要通过调用可观察对象的 <code>subscribe()</code> 方法来订阅它，从而让这个可观察对象得以执行，你还要给该方法传入一些回调函数来接收 \"有新值\"、\"错误\" 或 \"完成\" 等通知。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5k8iunls437wc52x3iqclv2js\">可观察对象可以通过下列方式把一个或多个值传给订阅者。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7570tchzk2wsnk0k32ey9qz1e\">作为函数同步地将值传递给请求者</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kowb8bjjp533dozsns4m6o2z\">预定后异步传递</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uffxvvdw35tm16i4vi5kgu2\">订阅者会在生成了新值时收到包含这个新值的通知，以及正常结束或错误结束时的通知。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yf895d8de62aweigbpmzyqg\">Angular 使用一个名叫<a href=\"https://rxjs.dev\" title=\"RxJS\">响应式扩展 （RxJS）</a>的第三方包来实现这些功能。\n要了解更多，参阅<a href=\"guide/observables\" title=\"Using observables to pass values | Angular\">可观察对象</a>。</p>\n<h2 id=\"observer\">observer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#observer\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41cs73x8ephstyml2arjc8pbs\">传给<a href=\"guide/glossary#observable\" title=\"observable - Glossary | Angular\">可观察对象</a> 的 <code>subscribe()</code> 方法的一个对象，其中定义了<a href=\"guide/glossary#subscriber\" title=\"subscriber - Glossary | Angular\">订阅者</a>的一组回调函数。</p>\n<h2 id=\"output\">output<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#output\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60l3cdpdymcb5lu9ub4jcp7ye\">当定义<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>时，指令属性上的 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 装饰器会让该属性可用作<a href=\"guide/event-binding\" title=\"Event binding | Angular\">事件绑定</a>的<em>目标</em>。\n事件从该属性流<em>出</em>到等号右侧指定的<a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">模板表达式</a>中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6eidhux3916zjxd6n46qu3u7x\">要了解更多，参阅 <a href=\"guide/inputs-outputs\" title=\"Sharing data between child and parent directives and components | Angular\"><code>@Input()</code> 和 <code>@Output()</code> 装饰器函数</a>。</p>\n<h2 id=\"pipe\">pipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#pipe\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eviartn0j56xtrxzl80cuqt08\">一个带有 <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>{}</code> 装饰器的类，它定义了一个函数，用来把输入值转换成输出值，以显示在<a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">视图</a>中。\nAngular 定义了很多管道，并且你还可可以自定义新的管道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cliytscyb1cge0p1n8znn0j8a\">要了解更多，请参见\n<a href=\"guide/pipes-overview\" title=\"使用管道转换数据 | Angular\">管道</a>。</p>\n<h2 id=\"platform\">platform<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#platform\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blcjzv34k19b6yubvf5gk6yz0\">在 Angular 术语中，平台是供 Angular 应用程序在其中运行的上下文。Angular 应用程序最常见的平台是 Web 浏览器，但它也可以是移动设备的操作系统或 Web 服务器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77zedh2ta5gnuic31cmlcdqq0\"><code>@angular/platform-*</code> 软件包提供了对各种 Angular 运行时平台的支持。这些软件包通过提供用于收集用户输入和渲染指定平台 UI 的实现，以允许使用 <code>@angular/core</code> 和 <code>@angular/common</code> 的应用程序在不同的环境中执行。隔离平台相关的功能使开发人员可以独立于平台使用框架的其余部分。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84lrogcdhwj9eutrd0gpzd4cc\">在 Web 浏览器中运行时，<a href=\"api/platform-browser/BrowserModule\" title=\"BrowserModule | @angular/platform-browser - API | Angular\"><code>BrowserModule</code></a> 是从 <code>platform-browser</code> 软件包中导入的，并支持简化安全性和事件处理的服务，并允许应用程序访问浏览器专有的功能，比如解释键盘输入和控制文档要显示的标题。浏览器中运行的所有应用程序都使用同一个平台服务。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8enbc1ekbymgh2483e4163d5a\">使用<a href=\"guide/glossary#server-side-rendering\" title=\"server-side rendering - Glossary | Angular\">服务端渲染</a>（SSR）时，<a href=\"api/platform-server\" title=\"@angular/platform-server | API | Angular\"><code>platform-server</code></a> 包将提供 <code>DOM</code>、<code>XMLHttpRequest</code> 和其它不依赖浏览器的其它底层功能的 Web 服务端实现。</p>\n</li>\n</ul>\n<h2 id=\"polyfill\">polyfill<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#polyfill\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw6x80tiivojha7zttnorwd8t\">一个 <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">NPM 包</a>，它负责弥补浏览器 JavaScript 实现与最新标准之间的 \"缝隙\"。参阅<a href=\"guide/browser-support\" title=\"Browser support | Angular\">浏览器支持</a>页，以了解要在特定平台支持特定功能时所需的腻子脚本。</p>\n<h2 id=\"project\">project<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#project\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ankyb09zqcws76wo7zaf76f6x\">在 Angular CLI 中，CLI 命令可能会创建或修改独立应用或<a href=\"guide/glossary#library\" title=\"library - Glossary | Angular\">库</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c76cpfxe729b8e48ki29bo4s5\">由 <a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code></a> 创建的项目中包含一组源文件、资源和配置文件，当你用 CLI 开发或测试此应用时就会用到它们。此外，还可以用 <code>ng generate application</code> 或 <code>ng generate library</code> 命令创建项目。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bcgurqpneisphgktnaheh873x\">欲知详情，参阅<a href=\"guide/file-structure\" title=\"Workspace and project file structure | Angular\">项目文件结构</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5fhey1lux652ihccphq1ka0\"><a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\"><code>angular.json</code></a> 文件可以配置某个<a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作区</a> 中的所有项目。</p>\n<h2 id=\"provider\">provider<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#provider\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cig5igrwii2rg89q44k88jai\">一个实现了 <a href=\"api/core/Provider\" title=\"Provider | @angular/core - API | Angular\"><code>Provider</code></a> 接口的对象。一个提供者对象定义了如何获取与 <a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI 令牌（token）</a> 相关联的可注入依赖。\n<a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">注入器</a>会使用这个提供者来创建它所依赖的那些类的实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"apc6bejkyrngq4wakbrmjtdjc\">Angular 会为每个注入器注册一些 Angular 自己的服务。你也可以注册应用自己所需的服务提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4v4w7zdlvyt7k3a1ptmid3zvk\">参阅<a href=\"guide/glossary#service\" title=\"service - Glossary | Angular\">服务</a>。\n参阅<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依赖注入</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"favtl4lxsdzx57inu0kmgkhu\">在<a href=\"guide/dependency-injection\" title=\"Dependency injection in Angular | Angular\">依赖注入</a>中了解更多信息。</p>\n<h2 id=\"reactive-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6pvu4j74mx9jrymo2b753y7q\">响应式表单（reactive forms）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#reactive-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5bzhzibtopzvsfhxhu1y1xum\">通过组件中代码构建 Angular 表单的一个框架。\n另一种技术是<a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">模板驱动表单</a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4g9gqmxd6lhlx8jsu9z330i9x\">构建响应式表单时：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1rrik3gn6aipxhb81qcl61zf\">\"事实之源\"（表单模型）定义在组件类中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xmbiu3hl9zbgbo8crwxo190a\">表单验证在组件代码而不是验证器指令中定义。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dvryfy7kgsepms93dsf7buzt\">在组件类中，通过创建 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 实例或使用 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 显性地创建每个控件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eeqli077iffws3e8nppy00ph2\">模板中的 <code>input</code> 元素<strong>不</strong>使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tbci1loajzyxsqwqx5ogu5al\">相关联的 Angular 指令全部以 <code><a href=\"api/forms/Form\" class=\"code-anchor\">Form</a></code> 开头，比如 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>()</code>、<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()</code> 和 <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">FormControlName</a>()</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nazd2jxpompk3mvf6kfgeqln\">另一种方式是模板驱动表单。模板驱动表单的简介和这两种方式的比较，参阅 <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Angular 表单简介</a>。</p>\n<h2 id=\"resolver\">resolver<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#resolver\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1sifww79hw4zwqgandsaerq3v\">实现\n<a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\">Resolve</a>接口的类，用于在导航到请求的路由之前生成或检索所需的数据。 您可以使用与\n<a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\">resolve()</a>方法具有相同签名的函数代替\n<a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\">Resolve</a>接口。 解析器在路由树的所有\n<a href=\"guide/glossary#route-guard\" title=\"路由守卫 - 术语表 | Angular\">路由守卫</a>执行并成功后运行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xpwjxu5vlq8jlz2pj604d50h\">参见使用<a href=\"guide/router-tutorial-toh#resolve-pre-fetching-component-data\" title=\"Resolve: pre-fetching component data - Router tutorial: tour of heroes | Angular\">解析守卫</a>获取动态数据一章中的例子。</p>\n<h2 id=\"route-guard\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l91l70x5qlpbm4gcirnbeea3\">路由守卫（route guard）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#route-guard\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25x5lpfl8iulm26148qo5lpma\">一种在带路由的应用中对导航到所要求的路由进行控制的方式。这些守卫会决定一个路由是否可以激活或停止激活，以及惰性加载模块是否可以被加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6d7cxhgtnjee4w47b7scm1r5\">欲知详情，参见<a href=\"guide/router#preventing-unauthorized-access\" title=\"Preventing unauthorized access - Common Routing Tasks | Angular\">路由与导航</a>一章。</p>\n<h2 id=\"router\">router<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7zb2b7fluozwf5bk557ywuva8\">一种工具，用来配置和实现 Angular 应用中各个状态和<a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">视图</a>之间的导航。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6v0qsol4dlvz8809k03qaixuv\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 模块是一个 <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a>，它提供在应用视图间导航时需要的服务提供者和指令。<a href=\"guide/glossary#routing-component\" title=\"routing component - Glossary | Angular\">路由组件</a>是一种组件，它导入了 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 模块，并且其模板中包含 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 元素，路由器生成的视图就会被显示在那里。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1x09crqijt5r7yzihxae9bvun\">路由器定义了在单页面中的各个视图之间导航的方式，而不是在页面之间。它会解释类似 URL 的链接，以决定该创建或销毁哪些视图，以及要加载或卸载哪些组件。它让你可以在 Angular 应用中获得<a href=\"guide/glossary#lazy-loading\" title=\"lazy loading - Glossary | Angular\">惰性加载</a>的好处。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kk69luwivec2kfmn1xkc27wj\">要了解更多，参阅<a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">路由与导航</a>。</p>\n<h2 id=\"router-outlet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cx06xujcnioybwpfk0zblerm0\">路由出口（router outlet）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router-outlet\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5kg043u1on5f9ha1ranzaje6\">一种<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>，它在路由组件的模板中扮演占位符的角色，Angular 会根据当前的路由状态动态填充它。</p>\n<h2 id=\"routing-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8813akll9dj5j67htjv6h1z9o\">路由组件（routing component）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#routing-component\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abnru84ldbupx1m748wzxe3ic\">一个模板中带有 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 指令的 Angular <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">组件</a>，用于根据路由器的导航显示相应的视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kk69luwivec2kfmn1xkc27wj\">要了解更多，参阅<a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">路由与导航</a>。</p>\n<h2 id=\"rule\">rule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#rule\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4i9v1sotl24d0gtchimwyyvu3\">在<a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">原理图</a> 中，是指一个在<a href=\"guide/glossary#tree\" title=\"tree - Glossary | Angular\">文件树</a>上运行的函数，用于以指定方式创建、删除或修改文件，并返回一个新的 <code>Tree</code> 对象。</p>\n<h2 id=\"schematic\">schematic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#schematic\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y6c9iwgw974pc50e60pg6cvq\">脚手架库会定义如何借助创建、修改、重构或移动文件和代码等操作来生成或转换某个项目。每个原理图定义了<a href=\"guide/glossary#rule\" title=\"rule - Glossary | Angular\">一些规则</a>，以操作一个被称为<a href=\"guide/glossary#tree\" title=\"tree - Glossary | Angular\">文件树</a>的虚拟文件系统。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30fb26tmodvgo3n7w4qrkjn09\">Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 使用原理图来生成和修改 <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">Angular 项目</a>及其部件。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1q6ji4h2a5r325p5gh6m4ie4z\">Angular 提供了一组用于 CLI 的原理图。参阅 <a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">Angular CLI 命令参考手册</a>。当 <a href=\"cli/add\" title=\"ng add | CLI | Angular\"><code>ng add</code></a> 命令向项目中添加某个库时，就会运行原理图。<a href=\"cli/generate\" title=\"ng generate | CLI | Angular\"><code>ng generate</code></a> 命令则会运行原理图，来创建应用、库和 Angular 代码块。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1561ov0q5d9yoh7qm2v6ywv1p\">公共<a href=\"guide/glossary#library\" title=\"library - Glossary | Angular\">库</a>的开发者可以创建原理图，来让 Angular CLI 添加或升级他们自己的发布的库，还可以生成此库中定义的工件。请把这些原理图添加到要用来发布和共享本库的 npm 包中。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mlsk7x9dnbtqugkwc2rnd6ll\">欲知详情，参阅<a href=\"guide/schematics\" title=\"Generating code using schematics | Angular\">原理图</a>。\n欲知详情，参阅<a href=\"guide/creating-libraries#integrating-with-the-cli-using-code-generation-schematics\" title=\"Integrating with the CLI using code-generation schematics - Creating libraries | Angular\">将库与 CLI 集成</a>。</p>\n<h2 id=\"schematics-cli\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qorl1fzbsnxnx80m6vk83xzm\">原理图 CLI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#schematics-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu72vuq3qejczki79j15o685q\">Schematics 自带了一个命令行工具。使用 Node 6.9 或更高版本，可以全局安装这个 Schematics CLI。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install -g @angular-devkit/schematics-cli\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9a111ctk4a4p4ky0rtzy07ypa\">这会安装可执行文件 <code>schematics</code>，你可以用它来创建新工程、往现有工程中添加新的 schematic，或扩展某个现有的 schematic。</p>\n<h2 id=\"scoped-package\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bg1rsg30ld0c3i6l35kdd9k2o\">范围化包 （scoped package）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#scoped-package\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zfd8ynolvghmugige83ai9rx\">一种分组相关\n<a href=\"guide/npm-packages\" title=\"工作区 npm 依赖项 | Angular\">npm 包</a>的方式。 Angular对象是从以 Angular \n<em>作用域名称</em> \n<code>@angular</code>开头的 npm 包中提供的。 例如，\n<code>@angular/core</code>、\n<code>@angular/common</code>、\n<code>@angular/forms</code>和\n<code>@angular/router</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zilen8xl3772tsya9e9elzec\">和导入普通包相同的方式导入范围化包。</p>\n<code-example path=\"architecture/src/app/app.component.ts\" header=\"architecture/src/app/app.component.ts (import)\" region=\"import\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n</code-example>\n<h2 id=\"server-side-rendering\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1j3sy4qhc2wvofn6milszetji\">服务端渲染<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#server-side-rendering\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"677uo1ya9if30ad8fkeu4s9ze\">一项在服务端生成静态应用页面的技术，它可以在对来自浏览器的请求进行响应时生成这些页面或用它们提供服务。它还可以预先把这些页面生成为 HTML 文件，以便稍后用它们来提供服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zbyoh38fa5ndzm7gxjwbaqi5\">该技术可以增强手机和低功耗设备的性能，而且会在应用加载通过快速展示一个静态首屏来提升用户体验。这个静态版本还能让你的应用对网络蜘蛛更加友好。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjmt00mszf4kstpuidfl922bw\">你可以通过使用\n<code>ng add @angular/ssr</code>命令轻松为服务器端渲染准备应用程序。</p>\n<h2 id=\"service\">service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#service\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axa5u34cgwd7k2n8dkhab5g59\">在Angular中，使用\n<a href=\"guide/glossary#injectable\" title=\"可注入 - 术语表 | Angular\">@Injectable()</a>装饰器的类，封装非UI逻辑和可在应用程序中重复使用的代码。 Angular区分组件和服务，以增加模块化和可重用性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wka0xkp0htezwx93wjj4ucqp\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元数据让服务类能用于<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依赖注入</a>机制中。可注入的类是用<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者</a>进行实例化的。\n<a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">各个注入器</a>会维护一个提供者的列表，并根据组件或其它服务的需要，用它们来提供服务的实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yzxizooklqm4h5drgjpy4zfj\">欲知详情，请参阅<a href=\"guide/architecture-services\" title=\"Introduction to services and dependency injection | Angular\">服务和依赖注入介绍</a>。</p>\n<h2 id=\"standalone\">standalone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#standalone\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ddgz8sc0w5gmbt7do5l204qgq\"><a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">组件</a>、<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>和<a href=\"guide/glossary#pipe\" title=\"pipe - Glossary | Angular\">管道</a>的一种配置，用以表明可以直接导入此类，而无需在任何 <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a> 中声明它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awhnhecmirrt8ko5avgrj5t55\">独立组件、指令和管道与非独立组件、指令和管道的区别在于：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1iwt5csgv5j1qxnvn0up0gg6\">将装饰器的 <code>standalone</code> 字段设置为 <code>true</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"715n5youebynuoo8fhi93eovt\">允许直接导入它们，而无需通过 NgModules。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18dx4vvn0c3uzrquzy5k3rlt3\">直接在它们的装饰器中指定它们的依赖项。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2owkchhfcni4r70exxovl4i9k\">欲知详情，请参阅<a href=\"guide/standalone-components\" title=\"Getting started with standalone components | Angular\">独立组件指南</a>。</p>\n<h2 id=\"structural-directive\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cxcolh45w9qof4dxq99qon09\">结构型指令（structural directive）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#structural-directive\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5eom63x6yf18o3zioqjbuhptv\">一种<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>类型，它能通过修改 DOM 来修整或重塑 HTML 的布局。\n这里所说的修改 DOM 包括添加、删除或操纵元素及其相关子元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wn2w29sewvw3cjjg8hyc98io\">欲知详情，参阅<a href=\"guide/structural-directives\" title=\"Structural directives | Angular\">结构型指令</a>。</p>\n<h2 id=\"subscriber\">subscriber<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#subscriber\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fx609a2et1hhio0to6flsy9g\">一个函数，用于定义如何获取或生成要发布的值或消息。\n当有消费者调用<a href=\"guide/glossary#observable\" title=\"observable - Glossary | Angular\">可观察对象</a>的 <code>subscribe()</code> 方法时，该函数就会执行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7aruri5zmmqyo2rti0bvx1sy8\">订阅一个可观察对象就会触发该对象的执行、为该对象关联一些回调函数，并创建一个 <code>Subscription</code>（订阅记录）对象来让你能取消订阅。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dz33dzlzacl9lrhs0d84hqvjv\"><code>subscribe()</code> 方法接收一个名叫<a href=\"guide/glossary#observer\" title=\"observer - Glossary | Angular\">观察者（observer）</a>的 JavaScript 对象，其中最多可以包含三个回调，分别对应可观察对象可以发出的几种通知类型：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hb5jw118jok4jvqeiwf5go0b\"><code>next</code>（下一个）通知会发送一个值，比如数字、字符串、对象。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4i5t75j7qe7ng63b1vebz41qs\"><code>error</code>（错误）通知会发送 JavaScript 错误或异常。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xkdi8v8z2i253mho6oul7ye0\"><code>complete</code>（完成）通知不会发送值，但是当调用结束时会调用这个处理器。异步的值可能会在调用了完成之后继续发送过来。</li>\n</ul>\n<h2 id=\"target\">target<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#target\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kc0njh50u5g1webp7jsqieuv\"><a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">项目</a>的一个可构建或可运行的子集，它是<a href=\"guide/workspace-config#project-tool-configuration-options\" title=\"Project tool configuration options - Angular workspace configuration | Angular\">工作区配置文件</a>中的一个子对象，它会被<a href=\"guide/glossary#architect\" title=\"Architect - Glossary | Angular\">建筑师（Architect）</a>的<a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">构建器（Builder）</a>执行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3qmdsc1v0rjq83pef3gq68t3\">在 <code>angular.json</code> 文件中，每个项目都有一个 <code>architect</code> 分区，其中包含一些用于配置构建器的目标。其中一些目标对应于 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI 命令</a>，比如 <code>build</code>、<code>serve</code>、<code>test</code> 和 <code>lint</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25lnqsr0ji2q085kfk6q1nvkt\">比如，<code>ng build</code> 命令用来编译项目时所调用的构建器会使用一个特定的构建工具，并且具有一份默认配置，此配置中的值可以通过命令行参数进行覆盖。目标 <code>build</code> 还为 \"开发环境\" 构建定义了另一个配置，可以通过在 <code>build</code> 命令上添加 <code>--configuration development</code> 标志来调用它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmzczdiyyxvtxifccghi78xuw\">建筑师工具提供了一组构建器。<a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code> 命令</a>为初始应用项目提供了一组目标。<a href=\"cli/generate#application\" title=\"application - ng generate | CLI | Angular\"><code>ng generate application</code></a> 和 <a href=\"cli/generate#library\" title=\"library - ng generate | CLI | Angular\"><code>ng generate library</code></a> 命令则为每个新<a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">项目</a>提供了一组目标。这些目标的选项和配置都可以进行自定义，以便适应你项目的需求。比如，你可能会想为项目的 \"build\" 目标添加一个 \"staging\" 或 \"testing\" 配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mqr9tsxx8yobomej311zmn3x\">你还可以定义一个自定义构建器，并且往项目配置中添加一个目标，来使用你的自定义构建器。然后你就可以通过 <a href=\"cli/run\" title=\"ng run | CLI | Angular\"><code>ng run</code></a> 这个 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 命令来运行此目标。</p>\n<h2 id=\"template\">template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lzlu3026sxikcrwzienpr3jf\">用来定义要如何渲染组件<a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">视图</a>的代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7863gtsw86esiym7022ggx5b5\">模板会把纯 HTML 和 Angular 的<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">数据绑定</a>语法、<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>和<a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">模板表达式</a>组合起来。Angular 的元素会插入或计算那些值，以便在页面显示出来之前修改 HTML 元素。\n在<a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">模板语法</a>指南中了解有关 Angular 模板语言的更多信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cqf6yylz8mqsgtugcpz08n5r\">模板通过 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">装饰器</a>与<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">组件类</a>类关联起来。模板代码可以作为 <code>template</code> 属性的值用内联的方式提供，也可以通过 <code>templateUrl</code> 属性链接到一个独立的 HTML 文件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkqtmwscz69dic6mklvj6k1dh\">用 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 对象表示的其它模板用来定义一些备用视图或<em>内嵌</em>视图，它们可以来自多个不同的组件。</p>\n<h2 id=\"template-driven-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b9itqk4074ulecxdt2m0d5gyc\">模板驱动表单（template-driven forms）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-driven-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4ndkyanwf7ao8dvdpnwq123n\">一种在视图中使用 HTML 表单和输入类元素构建 Angular 表单的格式。\n它的替代方案是<a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">响应式表单</a>框架。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29d79fo0aci3pixf0wgjmgqwg\">当构建模板驱动表单时：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zuvskw2yvfar33giywosvy3s\">模板是“事实之源”。使用属性 （attribute） 在单个输入元素上定义验证规则。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awam0ve5vigqagfzaiz028mxc\">使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 进行<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">双向绑定</a>，保持组件模型和用户输入之间的同步。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnfalao25ajqut1ofcdgxmdpy\">在幕后，Angular 为每个带有 <code>name</code> 属性和双向绑定的输入元素创建了一个新的控件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej1k3bakwct8juezd8p6ox0wl\">相关的 Angular 指令都带有 <code>ng</code> 前缀，比如 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code>、<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 和 <code><a href=\"api/forms/NgModelGroup\" class=\"code-anchor\">ngModelGroup</a></code>。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hgxa2vdd30ryykztgfspmyr3\">另一种方式是响应式表单。响应式表单的简介和两种方式的比较参阅 <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Angular 表单简介</a>。</p>\n<h2 id=\"template-expression\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckf3rn7ou9tsbm89yoi7qtg4z\">模板表达式（template expression）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-expression\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkzwoo4tpw6k7pvf2ir3adf9m\">一种类似 TypeScript 的语法，Angular 用它对<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">数据绑定 （data binding）</a>进行求值。</p>\n<!--todo: have Alex review this -->\n<!-- Read about how to write template expressions in the [template expressions][AioGuideInterpolationTemplateExpressions] section of the [Interpolation][AioGuideInterpolation] guide. -->\n<h2 id=\"template-reference-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23l4ijb0fnwykwn35tituxxch\">模板引用变量（template reference variable）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-reference-variable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nedmbizfrvyqh2z78dzn1qwa\">模板中定义的一个变量，它可以引用与某元素相关的实例，比如指令实例、组件实例、模板（<code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>）或 DOM 元素。在模板中的某个元素上声明了模板引用变量之后，你可以从同一个模板中的其它位置访问这些值。下面的例子定义了一个名叫 <code>#phone</code> 的模板引用变量。</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&lt;input #phone placeholder=\"phone number\" /&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgcik7kcly1f82081iird73n5\">欲知详情，参阅<a href=\"guide/template-reference-variables\" title=\"Template variables | Angular\">模板引用变量</a>。</p>\n<h2 id=\"template-input-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tr40qshfzoyf4qxe3pxx4htf\">模板输入变量（template input variable）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-input-variable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3lys7yy3gp4y8r4e2ywqwmn6\">模板输入变量是一种你可以在模板的单个实例中引用的变量。你可以使用 <code>let</code> 关键字来声明模板输入变量，就像 <code>let customer</code> 一样。</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers;\"&gt;\n    &lt;td&gt;{{customer.customerNo}}&lt;/td&gt;\n    &lt;td&gt;{{customer.name}}&lt;/td&gt;\n    &lt;td&gt;{{customer.address}}&lt;/td&gt;\n    &lt;td&gt;{{customer.city}}&lt;/td&gt;\n    &lt;td&gt;{{customer.state}}&lt;/td&gt;\n    &lt;button (click)=\"selectedCustomer=customer\"&gt;Select&lt;/button&gt;\n&lt;/tr&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6y2nsccpuvvujcasyo2rojjt\">欲知详情，参阅<a href=\"guide/template-reference-variables#template-input-variable\" title=\"Template input variable - Template variables | Angular\">模板输入变量</a>。</p>\n<h2 id=\"token\">token<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#token\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtw7synpwl3oh8vu7gfasu79f\">用于高效查表的不透明标识符（译注：不透明是指你不必了解其细节）。在 Angular 中，<a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI 令牌</a>用于在<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依赖注入</a>系统中查找<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">服务提供者</a>。</p>\n<h2 id=\"transpile\">transpile<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#transpile\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77q0inwxsfj80z6bdijaikzjx\">一种翻译过程，它会把一个版本的 JavaScript 转换成另一个版本，比如把下一版的 ES2015 转换成老版本的 ES5。</p>\n<h2 id=\"tree\">tree<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#tree\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwr13gqj11amqwz3r06seem7l\">在 <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematics</a> 中，一个用 <code>Tree</code> 类表示的虚拟文件系统。\nSchematic <a href=\"guide/glossary#rule\" title=\"rule - Glossary | Angular\">规则</a>以一个 <code>tree</code> 对象作为输入，对它们进行操作，并且返回一个新的 <code>tree</code> 对象。</p>\n<h2 id=\"typescript\">TypeScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#typescript\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uc06v4xsd75qstyc6ir7guns\">TypeScript 是一种基于 JavaScript 的程序设计语言，以其可选类型系统著称。TypeScript 提供了编译时类型检查和强大的工具支持。这里所说的类型检查和工具支持包括代码补齐、重构、内联文档和智能搜索等。许多代码编辑器和 IDE 都原生支持 TypeScript 或通过插件提供支持。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej7tbxg6po1aw2du0pc2a9hq5\">TypeScript 是 Angular 的首选语言。要了解更多，参阅 <a href=\"https://www.typescriptlang.org\" title=\"TypeScript\">typescriptlang.org</a>。</p>\n<h2 id=\"typescript-configuration-file\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byxlym6pjk6ovnpllwqk6rkch\">TypeScript 配置文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#typescript-configuration-file\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d59lpwycu2rznerjg8b7zjlcz\">一个文件，用来指定编译 TypeScript 项目时的根文件和编译器选项。欲知详情，参阅 <a href=\"guide/typescript-configuration\" title=\"TypeScript configuration | Angular\">TypeScript 配置</a>。</p>\n<h2 id=\"unidirectional-data-flow\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"q4btnpdxvrgkds4n3knda7pf\">单向数据流<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#unidirectional-data-flow\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"259alztlwwbe9iw4i1ksdgg4n\">一种数据流模型，它总是在一个方向（从父到子）上检查组件树是否有变化，以防止在变更检测图中出现循环。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afinga4a90n9fflnhmezdw3ba\">在实践中，这意味着 Angular 中的数据会在变更检测过程中向下流动。父组件可以很容易地改变子组件中的值，因为父组件是先检查的。但是，如果子组件在变更检测期间（反转预期的数据流）尝试更改其父组件中的值，则可能会导致错误，因为父组件已经渲染过了。在开发模式下，如果你的应用尝试这样做，Angular 会抛出 <code>ExpressionChangedAfterItHasBeenCheckedError</code> 错误，而不是沉默地渲染新值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6s8g396542t0n5lrts1zdpgev\">为了避免这个错误，进行此类更改的<a href=\"guide/lifecycle-hooks\" title=\"Lifecycle Hooks | Angular\">生命周期钩子</a>方法中就要触发一次新的变更检测。这次新的变更检测与之前那次的方向一样，但可以成功获得新值。</p>\n<h2 id=\"server-side-rendering-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63o3famemwo1dv6m2wf1liv55\">服务端渲染<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#server-side-rendering-1\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2sxkmdic8acee2azohni57tlv\">用于实现Angular应用程序的\n<a href=\"guide/glossary#server-side-rendering\" title=\"服务器端渲染 - 术语表 | Angular\">服务器端渲染</a>的工具。 与应用程序集成后，Universal会在服务器上响应浏览器的请求并生成和提供静态页面。 初始静态页面作为快速加载的占位符，同时全面准备应用程序以在浏览器中正常执行。 要了解更多，请参见\n<a href=\"guide/ssr\" title=\"使用 Angular 进行服务器端渲染\">Angular服务器端渲染</a>。</p>\n<h2 id=\"view\">view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egp524f7v9qxkpm63mzmw2ebf\">视图是可显示元素的最小分组单位，它们会被同时创建和销毁。\nAngular 在一个或多个<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令 （directive）</a> 的控制下渲染视图。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9adnlqp24hz46gl23qkjjxsh3\"><a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">组件（component）</a> 类及其关联的<a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">模板 （template）</a>定义了一个视图。\n具体实现上，视图由一个与该组件相关的 <code><a href=\"api/core/ViewRef\" class=\"code-anchor\">ViewRef</a></code> 实例表示。\n直属于某个组件的视图叫做<em>宿主视图</em>。\n通常会把视图组织成一些<a href=\"guide/glossary#view-hierarchy\" title=\"view hierarchy - Glossary | Angular\">视图树（view hierarchies）</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsn0ibfbq1jrhouyzfyb2dg8i\">视图中各个元素的属性可以动态修改以响应用户的操作，而这些元素的结构（数量或顺序）则不能。你可以通过在它们的视图容器中插入、移动或移除内嵌视图来修改这些元素的结构。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bu6rvjssd05o6hyb6yoqtg6m0\">当用户在应用中导航时（比如使用<a href=\"guide/glossary#router\" title=\"router - Glossary | Angular\">路由器</a>），视图树可以动态加载或卸载。</p>\n<p><a id=\"ve\"></a></p>\n<h2 id=\"view-engine\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zdliunjwyc0wk0y1axmsxpyh\">视图引擎（View Engine）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view-engine\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9qem6o8igccstcd10lb8sxup\">Angular 曾经用过的编译和渲染管道。它已被 <a href=\"guide/glossary#ivy\" title=\"Ivy - Glossary | Angular\">Ivy</a> 取代，不再使用了。View Engine 在版本 9 中已弃用，并在版本 13 中删除。</p>\n<p><a id=\"view-tree\"></a></p>\n<h2 id=\"view-hierarchy\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38apn26ff4h66n6qwgu9ydkh3\">视图树（View hierarchy）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view-hierarchy\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"355s72uhz5lo0t65mvyhc0w2z\">一棵相关视图的树，它们可以作为一个整体行动。其根视图就是组件的<em>宿主视图</em>。宿主视图可以是<em>内嵌视图</em>树的根，它被收集到了宿主组件上的一个<em>视图容器（<code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>）</em>中。视图树是 Angular <a href=\"guide/glossary#change-detection\" title=\" change detection - Glossary | Angular\">变更检测</a>的关键部件之一。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19kpxrnk4hdxq7k615flpylyr\">视图树和组件树并不是一一对应的。那些嵌入到指定视图树上下文中的视图也可能是其它组件的宿主视图。那些组件可能和宿主组件位于同一个 NgModule 中，也可能属于其它 NgModule。</p>\n<h2 id=\"web-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6gw5k9c9itrz0tbunyvm5ai7b\">Web 组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#web-component\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1na7o2nc9q8llw428b0y11o5g\">参阅<a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">自定义元素</a></p>\n<h2 id=\"workspace\">workspace<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#workspace\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83awhrlpatps9ssdxi8it2ujl\">一组基于 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a> 的 Angular <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">项目</a>（也就是说应用或库），它们通常共同位于一个单一的源码仓库（比如 <a href=\"https://git-scm.com\" title=\"Git\">git</a>）中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7p9d27i8m4zlmlkgzdurghmvx\"><a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 的 <a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code> 命令</a>会在文件系统中创建一个目录（也就是工作区的根目录）。\n在工作区根目录下，还会创建此工作区的<a href=\"guide/glossary#configuration\" title=\"configuration - Glossary | Angular\">配置文件</a>（<code>angular.json</code>），并且还会默认初始化一个同名的应用项目。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvpsppi4zl5lpc8fmoayz3h2o\">而用来创建或操作应用和库的命令（比如 <code>add</code> 和 <code>generate</code>）必须在工作区目录下才能执行。\n欲知详情，参阅<a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">工作区配置</a>。</p>\n<h2 id=\"workspace-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yimof5sfkh787if1dsmzdyel\">工作区配置（workspace configuration）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#workspace-configuration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4r3jperr4n40ejd9mantxnyv6\">一个名叫 <code>angular.json</code> 的文件，它位于 Angular <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作区</a> 的根目录下，并为 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a> 提供的或集成的各个构建/开发工具提供工作区级和项目专属的默认配置项。\n欲知详情，参阅<a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">工作区配置</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1um6zdahm0ao5qod7x2c29at4\">还有一些项目专属的配置文件是给某些工具使用的。比如 <code>package.json</code> 是给 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 包管理器</a>使用的，<code>tsconfig.json</code> 是给 <a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">TypeScript 转译器</a>使用的，而 <code>tslint.json</code> 是给 <a href=\"https://palantir.github.io/tslint\" title=\"TSLint | Palantir | GitHub\">TSLint</a> 使用的。\n欲知详情，参阅<a href=\"guide/file-structure\" title=\"Workspace and project file structure | Angular\">工作区和项目文件结构</a>。</p>\n<h2 id=\"zone\">zone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#zone\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ev8enksq8ovtu7zlady0bi1ik\">一组异步任务的执行上下文。它对于调试、性能分析和测试那些包含了异步操作（如事件处理、 Promise 、远程服务器调用等）的应用是非常有用的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej0g8f1m8mdziezcmka91b0tj\">Angular 应用会运行在一个 Zone 区域中，在这里，它可以对异步事件做出反应，可以通过检查数据变更、利用<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">数据绑定 （data bindings）</a> 来更新信息显示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nevzhbhzly5lmu1re5o1psc0\">Zone 的使用方可以在异步操作完成之前或之后采取行动。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2l7cwp7ofbqgmq5vu99tx11tb\">在此<a href=\"https://www.youtube.com/watch?v=3IqtmUscE_U\" title=\"Brian Ford - Zones - NG-Conf 2014 | YouTube\">Brian Ford 视频</a>中了解有关区域的更多信息。</p>\n<!-- vale Angular.Google_Headings = YES -->\n<!-- links -->\n<!-- [AioGuideInterpolationTemplateExpressions]: guide/interpolation#template-expressions \"Template expressions - Text interpolation | Angular\" -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Aug 14 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/common\n - api/common/APP_BASE_HREF\n - api/common/http\n - api/common/http/HttpClientJsonpModule\n - api/common/http/HttpClientModule\n - api/core\n - api/core/APP_BOOTSTRAP_LISTENER\n - api/core/APP_ID\n - api/core/APP_INITIALIZER\n - api/core/Component\n - api/core/ComponentRef\n - api/core/Directive\n - api/core/EmbeddedViewRef\n - api/core/Inject\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/core/PACKAGE_ROOT_URL\n - api/core/Pipe\n - api/core/ViewContainerRef\n - api/core/ViewRef\n - api/platform-browser\n - api/platform-browser-dynamic\n - api/platform-browser/REMOVE_STYLES_ON_COMPONENT_DESTROY\n - api/platform-browser/animations\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/platform-browser/animations/async\n - api/platform-browser/animations/async/provideAnimationsAsync\n - api/platform-browser/animations/provideAnimations\n - api/platform-browser/animations/provideNoopAnimations\n - api/platform-server\n - api/router\n - api/router/provideRoutes\n - api/service-worker/SwUpdate\n - cli\n - guide/animate-state-style\n - guide/animations\n - guide/aot-compiler\n - guide/architecture\n - guide/architecture-components\n - guide/architecture-next-steps\n - guide/binding-overview\n - guide/bootstrapping\n - guide/build\n - guide/cli-builder\n - guide/creating-libraries\n - guide/defer\n - guide/dependency-injection\n - guide/dependency-injection-navtree\n - guide/event-binding\n - guide/file-structure\n - guide/forms\n - guide/http-request-data-from-server\n - guide/http-server-communication\n - guide/i18n-common-format-data-locale\n - guide/i18n-common-merge\n - guide/i18n-common-overview\n - guide/i18n-common-prepare\n - guide/i18n-optional-overview\n - guide/interpolation\n - guide/libraries\n - guide/lifecycle-hooks\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n - guide/npm-packages\n - guide/pipes\n - guide/pipes-custom-data-trans\n - guide/pipes-overview\n - guide/property-binding\n - guide/reactive-forms\n - guide/roadmap\n - guide/routing-overview\n - guide/schematics\n - guide/service-worker-communications\n - guide/setup-local\n - guide/styleguide\n - guide/template-statements\n - guide/understanding-template-expr-overview\n - guide/upgrade\n - guide/upgrade-setup\n - guide/workspace-config\n - presskit\n - start/start-data\n - tutorial\n - tutorial/tour-of-heroes\n - tutorial/tour-of-heroes/toh-pt0\n-->\n<!-- links from this doc:\n - api/common/DatePipe\n - api/common/NgFor\n - api/common/NgIf\n - api/core/ChangeDetectorRef\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnInit\n - api/core/Output\n - api/core/Pipe\n - api/core/Provider\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/core/ViewRef\n - api/forms/FormArray\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/NgForm\n - api/forms/NgModel\n - api/forms/NgModelGroup\n - api/platform-browser/BrowserModule\n - api/platform-server\n - api/router/Resolve\n - api/router/Router\n - api/router/RouterOutlet\n - cli\n - cli/add\n - cli/generate\n - cli/generate#app-shell\n - cli/generate#application\n - cli/generate#library\n - cli/new\n - cli/run\n - guide/angular-package-format\n - guide/animations\n - guide/architecture\n - guide/architecture-services\n - guide/attribute-binding\n - guide/attribute-directives\n - guide/bootstrapping\n - guide/browser-support\n - guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\n - guide/class-binding\n - guide/creating-libraries#integrating-with-the-cli-using-code-generation-schematics\n - guide/dependency-injection\n - guide/elements\n - guide/event-binding\n - guide/file-structure\n - guide/form-validation\n - guide/form-validation#adding-custom-validators-to-reactive-forms\n - guide/form-validation#adding-custom-validators-to-template-driven-forms\n - guide/forms\n - guide/forms-overview\n - guide/glossary#ahead-of-time-aot-compilation\n - guide/glossary#angular-element\n - guide/glossary#angular-package-format-apf\n - guide/glossary#annotation\n - guide/glossary#app-shell\n - guide/glossary#architect\n - guide/glossary#attribute-directive\n - guide/glossary#binding\n - guide/glossary#bootstrap\n - guide/glossary#builder\n - guide/glossary#case-types\n - guide/glossary#change-detection\n - guide/glossary#class-decorator\n - guide/glossary#class-field-decorator\n - guide/glossary#collection\n - guide/glossary#command-line-interface-cli\n - guide/glossary#component\n - guide/glossary#configuration\n - guide/glossary#content-projection\n - guide/glossary#custom-element\n - guide/glossary#data-binding\n - guide/glossary#declarable\n - guide/glossary#decorator--decoration\n - guide/glossary#dependency-injection-di\n - guide/glossary#di-token\n - guide/glossary#directive\n - guide/glossary#domain-specific-language-dsl\n - guide/glossary#dynamic-component-loading\n - guide/glossary#eager-loading\n - guide/glossary#ecmascript\n - guide/glossary#element\n - guide/glossary#entry-point\n - guide/glossary#form-control\n - guide/glossary#form-model\n - guide/glossary#form-validation\n - guide/glossary#glossary\n - guide/glossary#immutability\n - guide/glossary#injectable\n - guide/glossary#injector\n - guide/glossary#input\n - guide/glossary#interpolation\n - guide/glossary#ivy\n - guide/glossary#javascript\n - guide/glossary#just-in-time-jit-compilation\n - guide/glossary#lazy-loading\n - guide/glossary#library\n - guide/glossary#lifecycle-hook\n - guide/glossary#module\n - guide/glossary#ngc\n - guide/glossary#ngmodule\n - guide/glossary#npm-package\n - guide/glossary#observable\n - guide/glossary#observer\n - guide/glossary#output\n - guide/glossary#pipe\n - guide/glossary#platform\n - guide/glossary#polyfill\n - guide/glossary#project\n - guide/glossary#provider\n - guide/glossary#reactive-forms\n - guide/glossary#resolver\n - guide/glossary#route-guard\n - guide/glossary#router\n - guide/glossary#router-outlet\n - guide/glossary#routing-component\n - guide/glossary#rule\n - guide/glossary#schematic\n - guide/glossary#schematics-cli\n - guide/glossary#scoped-package\n - guide/glossary#server-side-rendering\n - guide/glossary#server-side-rendering-1\n - guide/glossary#service\n - guide/glossary#standalone\n - guide/glossary#structural-directive\n - guide/glossary#subscriber\n - guide/glossary#target\n - guide/glossary#template\n - guide/glossary#template-driven-forms\n - guide/glossary#template-expression\n - guide/glossary#template-input-variable\n - guide/glossary#template-reference-variable\n - guide/glossary#token\n - guide/glossary#transpile\n - guide/glossary#tree\n - guide/glossary#typescript\n - guide/glossary#typescript-configuration-file\n - guide/glossary#unidirectional-data-flow\n - guide/glossary#view\n - guide/glossary#view-engine\n - guide/glossary#view-hierarchy\n - guide/glossary#web-component\n - guide/glossary#workspace\n - guide/glossary#workspace-configuration\n - guide/glossary#zone\n - guide/hierarchical-dependency-injection\n - guide/inputs-outputs\n - guide/interpolation\n - guide/lifecycle-hooks\n - guide/lifecycle-hooks#responding-to-projected-content-changes\n - guide/ngmodules\n - guide/npm-packages\n - guide/observables\n - guide/pipes-overview\n - guide/property-binding\n - guide/router\n - guide/router#preventing-unauthorized-access\n - guide/router-tutorial-toh#resolve-pre-fetching-component-data\n - guide/schematics\n - guide/service-worker-intro\n - guide/setup-local\n - guide/ssr\n - guide/standalone-components\n - guide/structural-directives\n - guide/styleguide#02-01\n - guide/template-reference-variables\n - guide/template-reference-variables#template-input-variable\n - guide/template-syntax\n - guide/typescript-configuration\n - guide/workspace-config\n - guide/workspace-config#project-tool-configuration-options\n - https://angular.io/guide/aot-compiler#choosing-a-compiler\n - https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7\n - https://developer.mozilla.org/docs/Web/API/CustomElementRegistry\n - https://developers.google.com/web/fundamentals/architecture/app-shell\n - https://docs.npmjs.com/about-npm\n - https://en.wikipedia.org/wiki/Domain-specific_language\n - https://en.wikipedia.org/wiki/ECMAScript\n - https://git-scm.com\n - https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/browser\n - https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/karma\n - https://github.com/tc39/proposal-decorators\n - https://palantir.github.io/tslint\n - https://rxjs.dev\n - https://web.dev/faster-angular-change-detection\n - https://webpack.js.org\n - https://www.typescriptlang.org\n - https://www.youtube.com/watch?v=3IqtmUscE_U\n-->"}
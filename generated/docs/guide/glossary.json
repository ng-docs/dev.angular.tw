{"id":"guide/glossary","title":"Angular 詞彙表","contents":"<div class=\"content\">\n  <h1 id=\"glossary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2y68pfphr1xg4ip20nwdxpjs7\">Angular 詞彙表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#glossary\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vgkte2wvicd4q1s6k5l8si32\">Angular 有自己的詞彙表。\n雖然大多數 Angular 短語都是日常用語或電腦術語，但是在 Angular 體系中，它們有特別的含義。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"becu7ci9ikpd01mkl73ikfud7\">本詞彙表列出了常用術語和少量具有反常或意外含義的不常用術語。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu66wwomrf96dh98cgu9jx4b2\"><a href=\"guide/glossary#ahead-of-time-aot-compilation\" title=\"A - 術語表 | Angular\">A</a> \n<a href=\"guide/glossary#binding\" title=\"B - 術語表 | Angular\">B</a> \n<a href=\"guide/glossary#case-types\" title=\"C - 術語表 | Angular\">C</a> \n<a href=\"guide/glossary#data-binding\" title=\"D - 術語表 | Angular\">D</a> \n<a href=\"guide/glossary#eager-loading\" title=\"E - 術語表 | Angular\">E</a> \n<a href=\"guide/glossary#form-control\" title=\"F - 術語表 | Angular\">F</a> \n<a href=\"guide/glossary#immutability\" title=\"G - 術語表 | Angular\">G</a> \n<a href=\"guide/glossary#immutability\" title=\"H - 術語表 | Angular\">H</a> \n<a href=\"guide/glossary#immutability\" title=\"I - 術語表 | Angular\">I</a> \n<a href=\"guide/glossary#javascript\" title=\"J - 術語表 | Angular\">J</a> \n<a href=\"guide/glossary#lazy-loading\" title=\"K - 術語表 | Angular\">K</a> \n<a href=\"guide/glossary#lazy-loading\" title=\"L - 術語表 | Angular\">L</a> \n<a href=\"guide/glossary#module\" title=\"M - 術語表 | Angular\">M</a> \n<a href=\"guide/glossary#ngmodule\" title=\"N - 術語表 | Angular\">N</a> \n<a href=\"guide/glossary#observable\" title=\"O - 術語表 | Angular\">O</a> \n<a href=\"guide/glossary#pipe\" title=\"P - 術語表 | Angular\">P</a> \n<a href=\"guide/glossary#reactive-forms\" title=\"Q - 術語表 | Angular\">Q</a> \n<a href=\"guide/glossary#reactive-forms\" title=\"R - 術語表 | Angular\">R</a> \n<a href=\"guide/glossary#schematic\" title=\"S - 術語表 | Angular\">S</a> \n<a href=\"guide/glossary#target\" title=\"T - 術語表 | Angular\">T</a> \n<a href=\"guide/glossary#unidirectional-data-flow\" title=\"U - 術語表 | Angular\">U</a> \n<a href=\"guide/glossary#view\" title=\"V - 術語表 | Angular\">V</a> \n<a href=\"guide/glossary#web-component\" title=\"W - 術語表 | Angular\">W</a> \n<a href=\"guide/glossary#zone\" title=\"X - 術語表 | Angular\">X</a> \n<a href=\"guide/glossary#zone\" title=\"Y - 術語表 | Angular\">Y</a> \n<a href=\"guide/glossary#zone\" title=\"Z - 術語表 | Angular\">Z</a></p>\n<!-- vale Angular.Google_Headings = NO -->\n<p><a id=\"aot\"></a></p>\n<h2 id=\"ahead-of-time-aot-compilation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40uioajlidvsgxt2a1f0188gv\">預先 （ahead-of-time, AOT） 編譯<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ahead-of-time-aot-compilation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5eu6l0hmco1ji36jwh99rn3wp\">Angular 的預先（AOT）編譯器可以在建立階段把 Angular 的 HTML 程式碼和 TypeScript 程式碼轉換成高效的 JavaScript 程式碼。建立階段發生在瀏覽器下載並執行所生成的程式碼之前。（譯者注：故名『預先』）\n對於產品環境，這是最好的編譯模式，相對於<a href=\"guide/glossary#just-in-time-jit-compilation\" title=\"just-in-time (JIT) compilation - Glossary | Angular\">即時 （JIT） 編譯</a>.而言，它能減小載入時間，並提高效能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djx1872p49afudtb2zi4c14e0\">使用指令行工具 <code>ngc</code> 來編譯你的應用之後，就可以直接啟動一個模組工廠，這意味著你不必再在 JavaScript 打包檔案中包含 Angular 編譯器。</p>\n<h2 id=\"angular-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caini2c000tv464dcu256leq1\">Angular 元素（element）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#angular-element\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mxaq4k3956x2nctckqc3muth\">被包裝成<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">自定義元素</a>的 Angular <a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">元件</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qpr5vox396y5f346ieykgulg\">在 <a href=\"guide/elements\" title=\"Angular elements overview | Angular\">Angular 元素概覽</a>中瞭解更多訊息。</p>\n<h2 id=\"angular-package-format-apf\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1obaoawiz9imfe5v40940hy8l\">Angular 套件格式 （APF）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#angular-package-format-apf\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wwk1ug5p50rcktfr5bn48pgh\">所有第一方 Angular 套件和大多數第三方 Angular 函式庫都在使用的 npm 套件佈局的 Angular 專有規範。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25iotocnnvpmii0qpwe6o1ggs\">在 <a href=\"guide/angular-package-format\" title=\"Angular Package Format | Angular\">Angular 包格式規範</a>中瞭解更多訊息。</p>\n<h2 id=\"annotation\">annotation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#annotation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cvvwmh5xwhvjs18bxirr9p5b\">為類提供元資料的結構。欲知詳情，參閱<a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>。</p>\n<h2 id=\"app-shell\">app-shell<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#app-shell\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azjwf6yqhm3vt021xtxpykxtd\">應用外殼是一種在建立期間透過路由為應用渲染出部分內容的方式。\n這樣就能為使用者快速渲染出一個有意義的首屏頁面，因為瀏覽器可以在初始化指令碼之前渲染出靜態的 HTML 和 CSS。\n欲知詳情，參閱<a href=\"https://developers.google.com/web/fundamentals/architecture/app-shell\" title=\"The App Shell Model | Web Fundamentals | Google Developers\">應用外殼模型</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b9xxnjd9ijwvvh1wn8gfa732k\">你可以使用 Angular CLI 來<a href=\"cli/generate#app-shell\" title=\"app-shell - ng generate | CLI | Angular\">生成</a>一個應用外殼。\n它可以在瀏覽器下載完整版應用之前，先快速啟動一個靜態渲染頁面（所有頁面的公共骨架）來增強使用者體驗，等程式碼載入完畢後再自動切換到完整版。\n這個靜態渲染的頁面是所有頁面的公共骨架。\n欲知詳情，參見 <a href=\"guide/service-worker-intro\" title=\"Angular service worker introduction | Angular\">Service Worker 與 PWA</a>。</p>\n<h2 id=\"architect\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hcz81en8soyg3cphaa9glgjb\">建築師（Architect）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#architect\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akcg4heokusvl2fz6opng392j\">CLI 用來根據所提供的設定執行複雜任務（比如編譯和執行測試）的工具。\n建築師是一個外殼，它用來對一個指定的<a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">目標設定</a>來執行一個<a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">建構式（builder）</a> （定義在一個 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 套件</a>中）。\n<a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">建構式</a>在 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 套件</a>中定義。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4eh2rucujsgrfnvx9eoyn3l3\">在<a href=\"guide/workspace-config#project-tool-configuration-options\" title=\"Project tool configuration options - Angular workspace configuration | Angular\">工作區設定檔案</a>中，\"architect\" 區可以為建築師的各個建構式提供設定項。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5bn4cu4v6qnbavbfxn814k8j\">比如，內建的 linting 建構式定義在 <code>@angular-devkit/build_angular:tslint</code> 套件中，它使用 <a href=\"https://palantir.github.io/tslint\" title=\"TSLint | Palantir | GitHub\">TSLint</a> 工具來執行 linting 操作，其設定是在 <code>tslint.json</code> 檔案中指定的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f9heathe10rjzr1592ad9dau\">使用 <a href=\"cli/run\" title=\"ng run | CLI | Angular\">CLI 指令 <code>ng run</code></a>可以透過指定與某個建構式相關聯的<a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">目標設定</a>來呼叫此建構式。\n整合器（Integrator）可以新增一些建構式來啟用某些工具和工作流，以便透過 Angular CLI 來執行它。比如，自定義建構式可以把 CLI 指令（如 <code>ng build</code> 或 <code>ng test</code>）的內建實現替換為第三方工具。</p>\n<h2 id=\"attribute-directive\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtoud1afwsr2t6nv750lvye3e\">屬性型指令（attribute directive）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#attribute-directive\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqmlazgo8tv6nqr2mc99b644m\"><a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令（directive）</a>的一種。可以監聽或修改其它 HTML 元素、屬性 （attribute）、屬性 （property）、元件的行為。通常用作 HTML 屬性，就像它的名字所暗示的那樣。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgcn21roj791urh8t801d892u\">要了解更多，參閱<a href=\"guide/attribute-directives\" title=\"Attribute directives | Angular\"><em>屬性型指令</em></a>。</p>\n<h2 id=\"binding\">binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#binding\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5iaz2nbxjlbqp8xyedkvryeas\">廣義上是指把變數或屬性設定為某個資料值的一種實踐。\n在 Angular 中，一般是指<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">資料繫結</a>，它會根據資料物件屬性的值來設定 DOM 物件的屬性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kmcray6ohqsh1n32f79qxkd8\">有時也會指在『<a href=\"guide/glossary#token\" title=\"token - Glossary | Angular\">令牌（Token）</a>』和依賴<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者（Provider）</a>\n之間的<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入</a> 繫結。</p>\n<h2 id=\"bootstrap\">bootstrap<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#bootstrap\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9u4qyfm1tgo2c2vlpuhvvxe8o\">一種用來初始化和啟動應用或系統的途徑。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dlmg364km558lx7qi9c8bjrk\">在 Angular 中，應用的根模組（<code>AppModule</code>）有一個 <code>bootstrap</code> 屬性，用於指出該應用的的頂層<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件</a>。\n在引導期間，Angular 會建立這些元件，並插入到宿主頁面 <code>index.html</code> 中。\n你可以在同一個 <code>index.html</code> 中引導多個應用，每個應用都有一些自己的元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23jvcbh0pdo0nq5e4mdedelcp\">要了解更多，參閱<a href=\"guide/bootstrapping\" title=\"Launching your app with a root module | Angular\">引導啟動</a>一章。</p>\n<h2 id=\"builder\">builder<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#builder\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59ux9n64lh7n7m8sz5pbqrjgw\">一個函式，它使用 <a href=\"guide/glossary#architect\" title=\"Architect - Glossary | Angular\">Architect</a> API 來執行複雜的過程，比如建立或測試。\n建構式的程式碼定義在一個 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 套件</a>中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jvg21lprihohdi3gapwkoahy\">比如，<a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/browser\" title=\"packages/angular_devkit/build_angular/src/builders/browser | angular/angular-cli | GitHub\">BrowserBuilder</a> 針對某個瀏覽器目標執行 <a href=\"https://webpack.js.org\" title=\"webpack | JS.ORG\">webpack</a> 建立，而 <a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/karma\" title=\"packages/angular_devkit/build_angular/src/builders/karma | angular/angular-cli | GitHub\">KarmaBuilder</a> 則啟動 Karma 伺服器，並且針對單元測試執行 webpack 建立。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40t5khlep55ss4ycjo0lu3i17\"><a href=\"cli/run\" title=\"ng run | CLI | Angular\">CLI 指令 <code>ng run</code></a> 使用一個特定的<a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">目標設定</a>來呼叫建構式。\n<a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">工作區設定</a>檔案 <code>angular.json</code> 中包含這些內建建構式的預設設定。</p>\n<p><a id=\"camelcase\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wvjp1ez0vuotxzpibp7c6lpn\"><a id=\"case-conventions\"></a>\n<a id=\"dash-case\"></a></p>\n<h2 id=\"case-types\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a568xsl3dc3qo8n6s8o8je3bc\">大小寫型別（case types）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#case-types\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5qdhmgtmv4mzqpqei2nk5lq3\">Angular 使用大小寫約定來區分多種名字，詳見<a href=\"guide/styleguide#02-01\" title=\"Style 02-01 - Angular coding style guide | Angular\">風格指南中的 \"命名\" 一節</a>。下面是這些大小寫型別的彙總表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n<th align=\"left\">example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">camelCase</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"962yk3ayl2krsashxih3xo2x4\">符號、屬性、方法、通道名稱、非元件指令選擇器、常數。\n<br>標準或小駝峰命名法在專案的第一個字母上使用小寫。</td>\n<td align=\"left\"><code>selectedHero</code></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evcctj6van7vq78xvso4qv4pm\">UpperCamelCase\n<br>PascalCase</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evo4ha0hwoz1j9qzrr1tvgdgj\">類別名稱，包括定義元件、介面、NgModules、指令和通道的類。\n<br>大駝峰命名法在專案的第一個字母上使用大寫。</td>\n<td align=\"left\"><code>HeroComponent</code></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2eyldje9g77h0o9bzhx4vhmpe\">連字元命名法\n<br>連字元命名法</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"behcwvkzwty63zqdjqenj7mhe\">檔案名的描述部分，元件選擇器。</td>\n<td align=\"left\"><code>app-hero-list</code></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ev1axrd46fjr9tow2c52js1q\">下劃線命名法\n<br>蛇形命名法</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zhp7ne9ehaq9523m0z788oxt\">在 Angular 中通常不使用。\n<br>蛇形命名法使用下劃線連線的單詞。</td>\n<td align=\"left\"><code>convert_link_mode</code></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jbzrobusoom4h5bw23v0qc61\">UPPER_UNDERSCORE_CASE\n<br>UPPER_SNAKE_CASE\n<br>SCREAMING_SNAKE_CASE</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"139v4gcib22z4enggxnyumgyg\">常數的傳統命名法。\n<br>這種命名法是可接受的，但小駝峰命名法更受青睞。\n<br>大寫蛇形命名法使用所有大寫字母連線的單詞。</td>\n<td align=\"left\"><code>FIX_ME</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"change-detection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2f3qjciuif88opo7aq2e1ayol\">變更檢測（change detection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#change-detection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a85bxlb2p70skaagipwp3zqip\">Angular 框架會通過此機制將應用程式 UI 的狀態與資料的狀態同步。變更檢測器在執行時會檢查資料模型的當前狀態，並在下一輪迭代時將其和先前儲存的狀態進行比較。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"598ef5emxhmfhjufxrf5380ao\">當應用邏輯更改元件資料時，繫結到檢視中 DOM 屬性上的值也要隨之更改。變更檢測器負責更新檢視以反映當前的資料模型。類似地，使用者也可以與 UI 進行互動，從而引發要更改資料模型狀態的事件。這些事件可以觸發變更檢測。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2iaagz5l5v1sgk7zrwyaawpot\">使用預設的變更檢測策略，變更檢測器將遍歷每個檢視模型上的<a href=\"guide/glossary#view-hierarchy\" title=\"view hierarchy - Glossary | Angular\">檢視層次結構</a>，以檢查樣板中的每個<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">資料繫結屬性</a>。在第一階段，它將所依賴的資料的當前狀態與先前狀態進行比較，並收集更改。在第二階段，它將更新頁面上的 DOM 以反映出所有新的資料值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bep3d3rj2xflm9inft7xs5x4g\">如果設定了 <code>OnPush</code> 變更檢測策略，則變更檢測器僅在<a href=\"api/core/ChangeDetectorRef\" title=\"ChangeDetectorRef | @angular/core - API | Angular\">顯式呼叫</a>它或由 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 引用的變化或觸發事件處理程式時運行。這通常可以提高效能。欲知詳情，參閱<a href=\"https://web.dev/faster-angular-change-detection\" title=\"Optimize Angular's change detection | web.dev\">最佳化 Angular 的變更檢測</a>。</p>\n<p><a id=\"decorator\"></a></p>\n<h2 id=\"class-decorator\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6u0csxwcezti2btjmhh7c43mu\">類別裝飾器（class decorator）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#class-decorator\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39579k1ybiglynsmdvbywnddz\"><a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>會出現在類別定義的緊前方，用來宣告該類別具有指定的型別，並且提供適合該類別型的元資料。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bnw3hhaf5e2synn29jszm1ng\">可以用下列裝飾器來宣告 Angular 的類。</p>\n<ul>\n<li><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code></li>\n<li><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code></li>\n<li><code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>()</code></li>\n<li><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code></li>\n<li><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code></li>\n</ul>\n<h2 id=\"class-field-decorator\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c089urg3e2l43gzkoomgrstob\">類別欄位裝飾器（class field decorator）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#class-field-decorator\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"boagv9buvznpmyw7l0jusuds4\">出現在類別定義中屬性緊前方的<a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>語句用來宣告該欄位的型別。比如 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code>。</p>\n<h2 id=\"collection\">collection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#collection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44uvs3e10f47mc1fdz8wvffrf\">在 Angular 中，是指收錄在同一個 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 套件</a> 中的<a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">一組原理圖（schematics）</a>。</p>\n<p><a id=\"cli\"></a></p>\n<h2 id=\"command-line-interface-cli\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bq4mbf8mlf0lniizj4b634d6e\">指令行介面（CLI）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#command-line-interface-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"w620uxyjppel3fl0d5iry356\"><a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">Angular CLI</a> 是一個指令行工具，用於管理 Angular 的開發週期。它用於為<a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作區</a>或<a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">專案</a>建立初始的腳手架，並且執行<a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">產生器（schematics）</a>來為初始生成的版本新增或修改各類程式碼。\nCLI 支援開發週期中的所有階段，比如建立、測試、打包和部署。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nprchynd6na35eafmn54pae0\">要開始使用 CLI 來建立新專案，參閱<a href=\"guide/setup-local\" title=\"Setting up the local environment and workspace | Angular\">建立本地開發環境</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f1nbhasbtyew5vdhlt6nvd9v\">要了解 CLI 的全部功能，參閱 <a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">CLI 指令參考手冊</a>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lf44wy9t3qwpsuo0ejegvqu7\">參閱<a href=\"guide/glossary#schematics-cli\" title=\"Schematics CLI - Glossary | Angular\">Schematics CLI</a>。</p>\n<h2 id=\"component\">component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#component\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fqg1vc771eygbyn6fo9dqwbr\">一個帶有 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>的類，和它的伴生<a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">樣板</a>關聯在一起。元件類別及其樣板共同定義了一個<a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">檢視</a>。\n元件是<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>的一種特例。<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器擴充套件了 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 裝飾器，增加了一些與樣板有關的屬性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21dsh63sonbl1owyn91561r4f\">Angular 的元件類別負責暴露資料，並透過<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">資料繫結機制</a>來處理絕大多數檢視的顯示和使用者互動邏輯。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e82hl0lhjq2kswmp9lc60ujhe\">要了解更多關於元件類別、樣板和檢視的知識，參閱 <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">架構概覽</a> 一章。</p>\n<h2 id=\"configuration\">configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#configuration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ndu9fh8736yj9bkuz6p8ikwy\">參閱<a href=\"guide/glossary#workspace-configuration\" title=\"workspace configuration - Glossary | Angular\">工作區設定</a></p>\n<h2 id=\"content-projection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yif9xlo4bxwcfk36lgcyaf5q\">內容投影（content projection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#content-projection\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7eht792jx9oy503bs1xtqx69c\">一種從元件外把 DOM 內容插入到當前元件檢視的特定位置上的方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ap6s5s1q03gp3vtkhd5ts6mzz\">欲知詳情，參閱<a href=\"guide/lifecycle-hooks#responding-to-projected-content-changes\" title=\"Responding to projected content changes - Lifecycle Hooks | Angular\">內容變化的應對方式</a>。</p>\n<h2 id=\"custom-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dy8qwgl7qkghmmzf2ybltuvy\">自定義元素（Custom element）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#custom-element\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3q6sqypuswby22frfqimfmxp4\">一種 Web 平台的屬性，目前已經被絕大多數瀏覽器支援，在其它瀏覽器中也可以透過膩子指令碼獲得支援（參閱<a href=\"guide/browser-support\" title=\"Browser support | Angular\">瀏覽器支援</a>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xjzg11nw0vjr9whcjm0i9w5x\">這種自定義元素屬性透過允許你定義標籤（其內容是由 JavaScript 程式碼來建立和控制的）來擴充套件 HTML。當自定義元素被新增到 <a href=\"https://developer.mozilla.org/docs/Web/API/CustomElementRegistry\" title=\"CustomElementRegistry | MDN\">CustomElementRegistry</a> 之後就會被瀏覽器識別。\n自定義元素也叫 <em>Web Component</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exuzkwzlradeuzty14cd7x2i6\">你可以使用 API 來轉換 Angular 元件，以便它能夠註冊進瀏覽器中，並且可以用在你往 DOM 中新增的任意 HTML 中。\n自定義元素標籤可以把元件的檢視（包括變更檢測和數據繫結功能）插入到不受 Angular 控制的內容中。\n參見 <a href=\"guide/glossary#angular-element\" title=\"Angular element - Glossary | Angular\">Angular 元素</a>。\n另見<a href=\"guide/glossary#dynamic-component-loading\" title=\"dynamic component loading - Glossary | Angular\">動態元件載入</a>。</p>\n<h2 id=\"data-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2y07x7vu63dseda016l7arn02\">資料繫結（data binding）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#data-binding\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61pulbu20ydgnwhg6wtoqcltw\">這個過程可以讓應用程式將資料展示給使用者，並對使用者的操作（點選、觸屏、按鍵）做出回應。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cc7fprqotkvlv76kofm0agvgi\">在資料繫結機制下，你只要宣告一下 HTML 部件和數據源之間的關係，把細節交給框架去處理。而以前的手動操作過程是：將資料推送到 HTML 頁面中、新增事件監聽器、從螢幕獲取變化後的資料，並更新應用中的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mhg0w7ahcva5ffj1lrn9mkxo\">更多的繫結形式，見<a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">樣板語法</a>：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vdrg4on5huk4pwznt900sibz\"><a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">內嵌</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akx4cqgi6ubm4fzf1omimo5gk\"><a href=\"guide/property-binding\" title=\"Property binding | Angular\">property 繫結</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dup856fnp7ar10i0mkrmuc0wa\"><a href=\"guide/event-binding\" title=\"Event binding | Angular\">事件繫結</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7tik5pzvrlurpjx2dx9upytab\"><a href=\"guide/attribute-binding\" title=\"Attribute binding | Angular\">attribute 繫結</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnze0k9z26j74p6jfjghxgtis\"><a href=\"guide/class-binding\" title=\"Class and style binding | Angular\">CSS 類別繫結與樣式繫結</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2i4d9njszu635kh0oc9zt5cj\"><a href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\" title=\"Displaying and updating properties with ngModel - Built-in directives | Angular\">基於 ngModel 的雙向資料繫結</a></li>\n</ul>\n<h2 id=\"declarable\">declarable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#declarable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79ig63eksa174mawjrsqspph4\">可以新增到 <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a> 的 <code>declarations</code> 清單中的類。你可以宣告<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件</a>、<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>和<a href=\"guide/glossary#pipe\" title=\"pipe - Glossary | Angular\">通道</a>，除非它們的裝飾器中的 <code>standalone</code> 標誌設定為 <code>true</code>，這會讓它們成為獨立的。注意：獨立元件/指令/通道都<strong>不是</strong>可宣告物件。有關獨立類別的更多訊息，請參閱<a href=\"guide/glossary#standalone\" title=\"standalone - Glossary | Angular\">後面的內容</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ck6a1p9ht1x0k3vj7io5fgck\"><em>不要</em>宣告：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dk88p9hmk6jzpaqvjel4lwo7\">已經宣告為<a href=\"guide/glossary#standalone\" title=\"standalone - Glossary | Angular\">獨立（standalone）</a>的類。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58w5pryd80jh0i714ywh11c90\">已經在其它 NgModule 中宣告過的類。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"budub8jh5mrd7rd67mzyc8uos\">從其它套件中匯入的指令陣列。比如，不要再次宣告來自 <code>@angular/forms</code> 中的 <code>FORMS_DIRECTIVES</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90qo8ofgj9pi1mplrso3z355i\">NgModule 類。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"815a6dnctobiecpg9y3gn94qm\">服務類別。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ykf7z9wowex5yyav8ajkb582\">非 Angular 的類別和物件，比如：字串、數字、函式、實體模型、設定、業務邏輯和輔助類別。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96z2zojt8ypx1unqkrqhf9m9u\">請注意，可宣告物件也可以宣告為獨立的，並且只需在其他獨立元件或現有的 NgModules 中匯入即可，要了解更多訊息，請參閱<a href=\"guide/standalone-components\" title=\"Getting started with standalone components | Angular\">獨立元件指南</a>。</p>\n<h2 id=\"decorator--decoration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nvt11ta9u6xi2ykxdf8kw8y3\">裝飾器（decorator | decoration）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#decorator--decoration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coqjsrt1t2ciu877a2nnvrskk\">一個函式，用來修飾緊隨其後的類或屬性定義。\n裝飾器（也叫註解）是一種處於階段 3（stage 3）的試驗性 <a href=\"https://github.com/tc39/proposal-decorators\" title=\"tc39/proposal-decorators | GitHub\">JavaScript 語言屬性</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8wie8vvrb7723wx000vs49m2\">Angular 定義了一些裝飾器，用來為類或屬性附加元資料，來讓自己知道那些類或屬性的含義，以及該如何處理它們。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6d11kuz88xkif8nkjnw2vixbf\">欲知詳情，參閱 <a href=\"guide/glossary#class-decorator\" title=\"class decorator - Glossary | Angular\">類別裝飾器</a>、<a href=\"guide/glossary#class-field-decorator\" title=\"class field decorator - Glossary | Angular\">類別屬性裝飾器</a>。</p>\n<h2 id=\"dependency-injection-di\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lwy6r556v7z7zfy3np9h0j3p\">依賴注入（dependency injection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dependency-injection-di\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87welpadyxnunt49pbnrt3nhq\">依賴注入既是設計模式，同時又是一種機制：當應用程式的一些部件（即一些依賴）需要另一些部件時，利用依賴注入來建立被請求的部件，並將它們注入到需要它們的部件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azoz7ngibqmau9lwwxq6nygh1\">在 Angular 中，依賴通常是服務，但是也可以是值，比如字串或函式。應用的<a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">注入器</a>（它是在啟動期間自動建立的）會使用該服務或值的設定好的<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者</a>來按需實例化這些依賴。各個不同的提供者可以為同一個服務提供不同的實現。</p>\n<h2 id=\"di-token\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3p35x0r15h0gkmjrqrr6uq78e\">DI 令牌（token）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#di-token\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dekej074ky6atnr12v3jmrq7u\">一種用來查閱的令牌，它關聯到一個依賴<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者</a>，用於<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入</a>系統中。</p>\n<h2 id=\"directive\">directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#directive\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5k5yyskuk5u18i82z6lu4t7lj\">一個可以修改 DOM 結構或修改 DOM 和元件資料模型中某些屬性的類。\n指令類的定義緊跟在 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>之後，以提供元資料。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24pac4xru60fgj4n3hm0ef07e\">指令類幾乎總與 HTML 元素或屬性 （attribute） 相關。\n通常會把這些 HTML 元素或者屬性 （attribute） 當做指令本身。\n當 Angular 在 HTML <a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">樣板中</a>發現某個指令時，會建立與之相對應的指令類的實例，並且把這部分 DOM 的控制權交給它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xzmr7ulzu6hj8xtasatx1aih\">Angular 有三類指令：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95rd2us4tb8boxawz2v4r79ub\"><a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件</a>使用 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 為某個類關聯一個樣板。\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 是對 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 的擴充套件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8htjb686pw5zdkomngg42mv4y\"><a href=\"guide/glossary#attribute-directive\" title=\"attribute directive - Glossary | Angular\">屬性型指令</a>修改頁面元素的行為和外觀。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41zg1f3f9ylh60r1ir01p697o\"><a href=\"guide/glossary#structural-directive\" title=\"structural directive - Glossary | Angular\">結構型指令</a>修改 DOM 的結構。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90l0gxcum4le9zfo19rqb9qy0\">Angular 提供了一些以 <code>ng</code> 為字首的內建指令。你也可以建立新的指令來實現自己的功能。\n你可以為自定義指令關聯一個<em>選擇器</em>，以擴充套件<a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">樣板語法</a>，從而讓你能在應用中使用它。\n<em>選擇器</em>是一個 HTML 標籤，比如 <code>&lt;my-directive&gt;</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"r1o9ymtwmtxccnopj7rniigw\"><strong>UpperCamelCase</strong>（比如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>）用於引用指令類。在描述屬性和指令行為時，使用 <strong>UpperCamelCase</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8irn3kfsbq598fd5gah5xkhdv\"><strong>lowerCamelCase</strong>（比如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>）用於引用指令的屬性名。在描述如何將指令應用於 HTML 樣板中的元素時，使用 <strong>lowerCamelCase</strong>。</p>\n<h2 id=\"domain-specific-language-dsl\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"devr103gv7zjcounv27c2kq3f\">領域特定語言（DSL）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#domain-specific-language-dsl\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wgrdoeoziwoj3jf6wzjuf7d\">一種特殊用途的函式庫或 API。欲知詳情，參閱<a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\" title=\"Domain-specific language | Wikipedia\">領域特定語言</a>詞條。\nAngular 使用領域特定語言擴充套件了 TypeScript，用於與 Angular 應用相關的許多領域。這些 DSL 都定義在 NgModule 中，比如 <a href=\"guide/animations\" title=\"Introduction to Angular animations | Angular\">動畫</a>、<a href=\"guide/forms\" title=\"Building a template-driven form | Angular\">表單</a>和<a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">路由與導向</a></p>\n<h2 id=\"dynamic-component-loading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8ijbf828dc7ft8vv3m5iu8jz\">動態元件載入（dynamic component loading）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dynamic-component-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3a45qs9wpedvd5jcqbip7o4gi\">一種在執行期間把元件新增到 DOM 中的技術，它需要你從編譯期間排除該組件，然後，當你把它新增到 DOM 中時，再把它接入 Angular 的變更檢測與事件處理框架。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bex3xvaff88lsktus4rvw7yu\">參閱<a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">自定義元素</a>，它提供了一種更簡單的方式來達到相同的效果。</p>\n<h2 id=\"eager-loading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1j8y9a8gxzmfhub5kblkaakmd\">急性載入（Eager Loading）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#eager-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lawz111smgndn5l3pql78598\">在啟動時載入的 NgModule 和元件稱為急性載入，與之相對的是那些在執行期間才載入的方式稱為延遲載入。\n參閱<a href=\"guide/glossary#lazy-loading\" title=\"lazy loading - Glossary | Angular\">延遲載入</a>。</p>\n<h2 id=\"ecmascript\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zi36rc6rzoicxpyj9a6zje6f\">ECMAScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ecmascript\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92nbgm91hvuyixqlxsyih1e4z\"><a href=\"https://en.wikipedia.org/wiki/ECMAScript\" title=\"ECMAScript | Wikipedia\">官方 JavaScript 語言規範</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dpsthaizhfqdtleh349kljtuu\">並不是所有瀏覽器都支援最新的 ECMAScript 標準，不過你可以使用<a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">轉譯器</a>（比如<a href=\"guide/glossary#typescript\" title=\"TypeScript - Glossary | Angular\">TypeScript</a>）來用最新屬性寫程式碼，然後它會被轉譯成可以在瀏覽器的其它版本上執行的程式碼。\n<a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">轉譯器</a>的例子之一就是 <a href=\"guide/glossary#typescript\" title=\"TypeScript - Glossary | Angular\">TypeScript</a>\n要了解更多，參閱<a href=\"guide/browser-support\" title=\"Browser support | Angular\">瀏覽器支援</a>頁。</p>\n<h2 id=\"element\">element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#element\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3kvluxmkz5hmhxbneg7svp18\">Angular 定義了 <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 類來包裝與渲染有關的原生 UI 元素。這讓你可以在大多數情況下使用 Angular 的樣板和資料繫結機制來訪問 DOM 元素，而不必再引用原生元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2es5k8b3afitx2yafyhx02cju\">本文件中一般會使用<em>元素（Element）</em>，以區別於 <em>DOM 元素</em>。這裡的<em>元素</em>指的是 <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 類別的實例。如果需要，<em>DOM 元素</em>是可以直接訪問的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3alo6v2al557zcqa0ejg4nu6u\">欲知詳情，參閱<a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">自定義元素</a>。</p>\n<h2 id=\"entry-point\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b0jpydektwpa7lfw2q65nlx90\">入口點（entry point）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#entry-point\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dpgrfkhieghjkikugogout8u\"><a href=\"guide/glossary#module\" title=\"module - Glossary | Angular\">JavaScript 模組</a>的目的是供 <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm 套件</a>的使用者進行匯入。入口點模組通常會重新匯出來自其它內部模組的一些符號。每個套件可以包含多個入口點。比如 <code>@angular/core</code> 就有兩個入口點模組，它們可以使用名字 <code>@angular/core</code> 和 <code>@angular/core/testing</code> 進行匯入。</p>\n<h2 id=\"form-control\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjxnjk4i61zhi55k88f87ra8d\">表單控制元件（form control）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-control\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58gcvmfo1iab3lwpls4kykr60\">一個 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 實例，它是 Angular 表單的基本構造塊。它會和 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 一起，跟蹤表單輸入元素的值、有效性和狀態。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv133ls5ksgf2oedzof6odsvj\">欲知詳情，參閱 <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Angular 表單簡介</a>。</p>\n<h2 id=\"form-model\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewykkcc5ty268a655oejbykky\">表單模型（form model）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-model\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzf6zv0gjae3a3h97t0y08glw\">是指在指定的時間點，表單輸入元素的值和驗證狀態的\"事實之源\"。當使用<a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">回應式表單</a>時，表單模型會在元件類別中顯式建立。當使用<a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">樣板驅動表單</a>時，表單模型是由一些指令隱式建立的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck43e3hgqz0mv8o90eapk9oj0\">要深入瞭解回應式表單和樣板驅動表單，參閱 <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Angular 表單簡介</a>。</p>\n<h2 id=\"form-validation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7vyccbarjpifilzjoc0nlrrj8\">表單驗證（form validation）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-validation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6skmkge113gc6f9xuc2nsuzap\">一種檢查，當表單值發生變化時運行，並根據預定義的約束來彙報指定的這些值是否正確並完全。回應式表單使用<a href=\"guide/form-validation#adding-custom-validators-to-reactive-forms\" title=\"Adding custom validators to reactive forms - Validating form input | Angular\">驗證器函式</a>，而樣板驅動表單則使用<a href=\"guide/form-validation#adding-custom-validators-to-template-driven-forms\" title=\"Adding custom validators to template-driven forms - Validating form input | Angular\">驗證器指令</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zaypc5pa8c8iu51jfuqcckgp\">要了解更多，參閱<a href=\"guide/form-validation\" title=\"Validating form input | Angular\">表單驗證器</a>。</p>\n<h2 id=\"immutability\">immutability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#immutability\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjp0olqh79k7ivnvec7lw5jx\">是否能夠在建立之後修改值的狀態。<a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">回應式表單</a>會執行不可變性的更改，每次更改資料模型都會生成一個新的資料模型，而不是修改現有的資料模型。\n<a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">樣板驅動表單</a>則會執行可變的更改，它透過 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 和<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">雙向資料繫結</a>來就地修改現有的資料模型。</p>\n<h2 id=\"injectable\">injectable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#injectable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70jcj9pruqsmj7wpwyacff4fj\">Angular 中的類或其它概念使用<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入</a>機制來提供依賴。\n可供注入的<a href=\"guide/glossary#service\" title=\"service - Glossary | Angular\">服務</a>類必須使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>標出來。其它條目，比如常數值，也可用於注入。</p>\n<h2 id=\"injector\">injector<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#injector\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1947v6ixa3npk3etrmswsbbod\">Angular <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入系統</a>中可以在快取中根據名字查詢依賴，也可以透過設定過的<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者</a>來建立依賴。\n啟動過程中會自動為每個模組建立一個注入器，並被元件樹繼承。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ukfmhua6o1gfd9l0ucvi3ucp\">注入器會提供依賴的一個單例，並把這個單例物件注入到多個元件中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1z63p2mwu3kh2xv905yfeh349\">模組和元件級別的注入器樹可以為它們擁有的元件及其子元件提供同一個依賴的不同實例。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cd1tu550puqhogk02pp04ksr\">你可以為同一個依賴使用不同的提供者來設定這些注入器，這些提供者可以為同一個依賴提供不同的實現。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37iqy9af9zgx85ylc3jyuwiz2\">要了解關於多級注入器的更多知識，參閱<a href=\"guide/hierarchical-dependency-injection\" title=\"Hierarchical injectors | Angular\">多級依賴注入</a>一章。</p>\n<h2 id=\"input\">input<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#input\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dw1xr8g2sl2fh9dvqgofukkyl\">當定義<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>時，指令屬性上的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 裝飾器讓該屬性可以作為<a href=\"guide/property-binding\" title=\"Property binding | Angular\">屬性繫結</a>的<em>目標</em>使用。\n資料值會從等號右側的<a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">樣板表示式</a>所指定的資料來源流入元件的輸入屬性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6eidhux3916zjxd6n46qu3u7x\">要了解更多，參閱 <a href=\"guide/inputs-outputs\" title=\"Sharing data between child and parent directives and components | Angular\"><code>@Input()</code> 和 <code>@Output()</code> 裝飾器函式</a>。</p>\n<h2 id=\"interpolation\">interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#interpolation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vuvm0uy3sxt5bnnwq9ff7c71\"><a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">屬性資料繫結 （property data binding)</a> 的一種形式，位於雙花括號中的<a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">樣板表示式 （template expression）</a>會被渲染成文字。\n在被賦值給元素屬性或者顯示在元素標籤中之前，這些文字可能會先與周邊的文字合併，參閱下面的例子。</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;label&gt;My current hero is {{hero.name}}&lt;/label&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"125008uusaf9r2qxf1ltiqdjw\">在<a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">內嵌</a>指南中閱讀更多內容。</p>\n<h2 id=\"ivy\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eeuxo3wav90yu5if407s0vsyt\">Ivy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ivy\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e2z3vjkxhkvjh4l7ey0ntq7xb\">Ivy 是 Angular 當前<a href=\"https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7\" title=\"A plan for version 8.0 and Ivy | Angular Blog\">編譯和渲染通道</a>的歷史代號。它現在是唯一受支援的引擎，所以，一切都在使用 Ivy。</p>\n<h2 id=\"javascript\">JavaScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#javascript\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3lqvu2hmkf0sfgwumpudzwcdd\">欲知詳情，參閱 <a href=\"guide/glossary#ecmascript\" title=\"ECMAScript - Glossary | Angular\">ECMAScript</a>。\n欲知詳情，另見 <a href=\"guide/glossary#typescript\" title=\"TypeScript - Glossary | Angular\">TypeScript</a>。</p>\n<p><a id=\"jit\"></a></p>\n<h2 id=\"just-in-time-jit-compilation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"282ndyo4yqa2hdvwtz9njqwvi\">即時 （just-in-time, JIT） 編譯<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#just-in-time-jit-compilation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ryh9vfv9nr599e87jcshibh2\">在啟動期間，Angular 的即時編譯器（JIT）會在執行期間把你的 Angular HTML 和 TypeScript 程式碼轉換成高效的 JavaScript 程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6m5so7tnaqvolg8238e8j5nsm\">JIT是Angular 8之前的預設編譯模式（請參閱\n<a href=\"https://angular.io/guide/aot-compiler#choosing-a-compiler\">選擇編譯器</a>瞭解更多訊息）。 JIT模式強烈不建議用於生產環境，因為它會導致應用程式負載過大，影響啟動效能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rj6rnpi44z0xeceb1efdogjo\">與<a href=\"guide/glossary#ahead-of-time-aot-compilation\" title=\"ahead-of-time (AOT) compilation - Glossary | Angular\">預先 （AOT） 編譯相比</a>。</p>\n<h2 id=\"lazy-loading\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60kwdi1vj3oopg4mkduauzcf\">延遲載入（lazy loading）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#lazy-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14c85ams7kpkn5qhu8dsj1tzb\">延遲載入過程會把應用拆分成多個套件並且按需載入它們，從而提高應用載入速度。\n比如，一些依賴可以根據需要進行延遲載入，與之相對的是那些 <a href=\"guide/glossary#eager-loading\" title=\"eager loading - Glossary | Angular\">急性載入</a> 的模組，它們是根模組所要用的，因此會在啟動期間載入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8b9zuxijonvki346cca8ae5n5\"><a href=\"guide/glossary#router\" title=\"router - Glossary | Angular\">路由器</a>只有當父檢視啟用時才需要載入子檢視。同樣，你還可以建立一些自定義元素，它們也可以在需要時才載入進 Angular 應用。</p>\n<h2 id=\"library\">library<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#library\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6z54vzteoz1apvleq8el4dzuu\">一種 Angular <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">專案</a>。用來讓其它 Angular 應用套件含它，以提供各種功能。函式庫不是一個完整的 Angular 應用，不能獨立執行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kw00dma5rajht04052zibs3e\">要想為非 Angular 應用新增可複用的 Angular 功能，你可以使用 Angular 的<a href=\"guide/glossary#angular-element\" title=\"Angular element - Glossary | Angular\">自定義元素</a>。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pzx8a0ngr5pk69hwolv8urqi\">函式庫的開發者可以使用 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 在現有的 <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作區</a> 中 <code>generate</code> 新庫的腳手架，還能把函式庫發布為 <code>npm</code> 套件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fs7gx0bkfop2qvadr8kf2osi\">應用開發者可以使用 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 來把一個已發布的函式庫 <code>add</code> 進這個應用所在的<a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作區</a>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3mssedafw6thp9jbwn20nnme\">參閱 <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">原理圖（schematic）</a>。</p>\n<h2 id=\"lifecycle-hook\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dj3jsw8k8ar8k6l9dpy7vwl9a\">生命週期鉤子（lifecycle hook）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#lifecycle-hook\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etqlm5gp4cci59vus5ja11lhn\">一種介面，它允許你監聽<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>和<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件</a>的生命週期，比如建立、更新和銷燬等。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2itj14z7ka6091lf5ti7o80br\">每個介面只有一個鉤子方法，方法名是介面名加字首 <code>ng</code>。比如，<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> 介面的鉤子方法名為 <code>ngOnInit</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f27m3f34bco5nahe9zu6xicwa\">Angular 會按以下順序呼叫鉤子方法：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eh61rnooo8hvjybxah1h8wqqb\">鉤子方法</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><code>ngOnChanges</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ek45s7i5awdnb7vt4nauad2jd\">當\n<input>或\n<output>繫結值發生變化時。</output></td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><code>ngOnInit</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ed74hzhc26tgils6p3c3qrzuq\">在第一個\n<code>ngOnChanges</code>之後。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><code>ngDoCheck</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8e66gzv2ixt4dsftoifsyuyz0\">開發人員自定義的變更檢測。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><code>ngAfterContentInit</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gxrmbrj4fwep4ngemfb12jj8\">在元件內容初始化後。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><code>ngAfterContentChecked</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2grtdrsq4b22g1coka5j6axq\">在每次檢查元件內容後。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><code>ngAfterViewInit</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1rtg8663vkd6wex38js3hpcc\">在元件檢視初始化後。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><code>ngAfterViewChecked</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"730rvnk9bm8jmmiyija1154mw\">在每次檢查元件檢視後。</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><code>ngOnDestroy</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8gvssgqx6osn145s171704l4r\">在指令銷燬之前。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ozr0nkrcqosguwvo5flssxc5\">欲知詳情，參閱<a href=\"guide/lifecycle-hooks\" title=\"Lifecycle Hooks | Angular\">生命週期鉤子</a>。</p>\n<h2 id=\"module\">module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#module\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9esve23jw4s0aul1wmhimrlnn\">通常，模組會收集一組專注於單一目的的程式碼區塊。Angular 既使用 JavaScript 的標準模組，也定義了 Angular 自己的模組，也就是 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ga3e6o7uofo70xiagely84im\">在 JavaScript （ECMAScript） 中，每個檔案都是一個模組，該檔案中定義的所有物件都屬於這個模組。這些物件可以匯出為公共物件，而這些公共物件可以被其它模組匯入後使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blseyntucobln3u5snj8zs56a\">Angular 就是用一組 JavaScript 模組的形式發布的。這些模組的集合也稱為函式庫。每個 Angular 函式庫都帶有 <code>@angular</code> 字首。\n使用 <a href=\"https://docs.npmjs.com/about-npm\" title=\"About npm | npm\">NPM 套件管理器</a>安裝它們，並且使用 JavaScript 的 <code>import</code> 宣告語句從中匯入各個部件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwclzdjozd86sfh0vzlbgdswq\">與 <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a> 的對比。</p>\n<h2 id=\"ngmodule\">NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ngmodule\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfv4cxs7fyhkl9zim3qrp47p6\">一種帶有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>的類別定義，它會宣告並提供一組專注於特定功能的程式碼區塊，比如業務領域、工作流或一組緊密相關的能力集等。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qw5mwxzqp8ckrflv5c9embv2\">像 <a href=\"guide/glossary#module\" title=\"module - Glossary | Angular\">JavaScript 模組</a>一樣，NgModule 能匯出那些可供其它 NgModule 使用的功能，也可以從其它 NgModule 中匯入其公開的功能。\nNgModule 類別的元資料中包括一些供應用使用的元件、指令和通道，以及匯入、匯出清單。參閱<a href=\"guide/glossary#declarable\" title=\"declarable - Glossary | Angular\">可宣告物件</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ruwdpgy5wrrgc9ungujwl3xy\">NgModule 通常會根據它匯出的內容決定其檔案名，比如，Angular 的 <a href=\"api/common/DatePipe\" title=\"DatePipe | @angular/common - API | Angular\">DatePipe</a> 類就屬於 <code>date_pipe.ts</code> 檔案中一個名叫 <code>date_pipe</code> 的屬性模組。\n你可以從 Angular 的<a href=\"guide/glossary#scoped-package\" title=\"scoped package - Glossary | Angular\">範圍化套件</a>中匯入它們，比如 <code>@angular/core</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dg8lzcksx38jn08cnzxmw9aw6\">每個 Angular 應用都有一個根模組。通常，這個類會命名為 <code>AppModule</code>，並且位於一個名叫 <code>app.module.ts</code> 的檔案中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3z5vtqei2ulaqh36jdw5p6qh7\">要了解更多，參閱 <a href=\"guide/ngmodules\" title=\"NgModules | Angular\">NgModules</a>。</p>\n<h2 id=\"npm-package\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ab2q3jstpqh365tugui0kg0y\">npm 套件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#npm-package\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aj797pftcutefav8lhvaanvt\"><a href=\"https://docs.npmjs.com/about-npm\" title=\"About npm | npm\">npm 套件管理器</a>用於分發與載入 Angular 的模組和函式庫。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8u6cgo661yl3m3ocjh7x6qjxn\">你還可以瞭解 Angular 如何使用 <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">Npm 套件</a> 的更多知識。</p>\n<h2 id=\"ngc\">ngc<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ngc\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"89qm320bmxso2fls829x4t9cp\"><code>ngc</code> 是一個 TypeScript 到 JavaScript 的轉譯器，它會處理 Angular 的註解、元資料、樣板，並生成 JavaScript 程式碼。其最新的實現在內部被稱為 <code>ngtsc</code>，因為它是一個對 TypeScript 編譯器 <code>tsc</code> 的最小化包裝，為其加入了 Angular 程式碼的轉換過程。</p>\n<h2 id=\"observable\">observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#observable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hzi7js3xc2dfg77d9e2tykgk\">一個多值產生器，這些值會被推送給<a href=\"guide/glossary#subscriber\" title=\"subscriber - Glossary | Angular\">訂閱者</a>。\nAngular 中到處都會用到非同步事件處理。你要透過呼叫可觀察物件的 <code>subscribe()</code> 方法來訂閱它，從而讓這個可觀察物件得以執行，你還要給該方法傳入一些回呼函式來接收 \"有新值\"、\"錯誤\" 或 \"完成\" 等通知。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5k8iunls437wc52x3iqclv2js\">可觀察物件可以透過下列方式把一個或多個值傳給訂閱者。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7570tchzk2wsnk0k32ey9qz1e\">作為函式同步地將值傳遞給請求者</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kowb8bjjp533dozsns4m6o2z\">預定後非同步傳遞</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uffxvvdw35tm16i4vi5kgu2\">訂閱者會在生成了新值時收到包含這個新值的通知，以及正常結束或錯誤結束時的通知。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yf895d8de62aweigbpmzyqg\">Angular 使用一個名叫<a href=\"https://rxjs.dev\" title=\"RxJS\">回應式擴充套件 （RxJS）</a>的第三方套件來實現這些功能。\n要了解更多，參閱<a href=\"guide/observables\" title=\"Using observables to pass values | Angular\">可觀察物件</a>。</p>\n<h2 id=\"observer\">observer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#observer\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41cs73x8ephstyml2arjc8pbs\">傳給<a href=\"guide/glossary#observable\" title=\"observable - Glossary | Angular\">可觀察物件</a> 的 <code>subscribe()</code> 方法的一個物件，其中定義了<a href=\"guide/glossary#subscriber\" title=\"subscriber - Glossary | Angular\">訂閱者</a>的一組回呼函式。</p>\n<h2 id=\"output\">output<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#output\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60l3cdpdymcb5lu9ub4jcp7ye\">當定義<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>時，指令屬性上的 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 裝飾器會讓該屬性可用作<a href=\"guide/event-binding\" title=\"Event binding | Angular\">事件繫結</a>的<em>目標</em>。\n事件從該屬性流<em>出</em>到等號右側指定的<a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">樣板表示式</a>中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6eidhux3916zjxd6n46qu3u7x\">要了解更多，參閱 <a href=\"guide/inputs-outputs\" title=\"Sharing data between child and parent directives and components | Angular\"><code>@Input()</code> 和 <code>@Output()</code> 裝飾器函式</a>。</p>\n<h2 id=\"pipe\">pipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#pipe\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eviartn0j56xtrxzl80cuqt08\">一個帶有 <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>{}</code> 裝飾器的類，它定義了一個函式，用來把輸入值轉換成輸出值，以顯示在<a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">檢視</a>中。\nAngular 定義了很多通道，並且你還可可以自定義新的通道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cliytscyb1cge0p1n8znn0j8a\">要了解更多，請參見\n<a href=\"guide/pipes-overview\" title=\"使用通道轉換資料 | Angular\">通道</a>。</p>\n<h2 id=\"platform\">platform<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#platform\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blcjzv34k19b6yubvf5gk6yz0\">在 Angular 術語中，平台是供 Angular 應用程式在其中執行的上下文。Angular 應用程式最常見的平台是 Web 瀏覽器，但它也可以是行動裝置的作業系統或 Web 伺服器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77zedh2ta5gnuic31cmlcdqq0\"><code>@angular/platform-*</code> 軟體套件提供了對各種 Angular 執行時平台的支援。這些軟體套件透過提供用於收集使用者輸入和渲染指定平台 UI 的實現，以允許使用 <code>@angular/core</code> 和 <code>@angular/common</code> 的應用程式在不同的環境中執行。隔離平台相關的功能使開發人員可以獨立於平台使用框架的其餘部分。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84lrogcdhwj9eutrd0gpzd4cc\">在 Web 瀏覽器中執行時，<a href=\"api/platform-browser/BrowserModule\" title=\"BrowserModule | @angular/platform-browser - API | Angular\"><code>BrowserModule</code></a> 是從 <code>platform-browser</code> 軟體套件中匯入的，並支援簡化安全性和事件處理的服務，並允許應用程式訪問瀏覽器專有的功能，比如解釋鍵盤輸入和控制文件要顯示的標題。瀏覽器中執行的所有應用程式都使用同一個平台服務。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8enbc1ekbymgh2483e4163d5a\">使用<a href=\"guide/glossary#server-side-rendering\" title=\"server-side rendering - Glossary | Angular\">伺服器端渲染</a>（SSR）時，<a href=\"api/platform-server\" title=\"@angular/platform-server | API | Angular\"><code>platform-server</code></a> 套件將提供 <code>DOM</code>、<code>XMLHttpRequest</code> 和其它不依賴瀏覽器的其它底層功能的 Web 伺服器端實現。</p>\n</li>\n</ul>\n<h2 id=\"polyfill\">polyfill<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#polyfill\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw6x80tiivojha7zttnorwd8t\">一個 <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">NPM 套件</a>，它負責彌補瀏覽器 JavaScript 實現與最新標準之間的 \"縫隙\"。參閱<a href=\"guide/browser-support\" title=\"Browser support | Angular\">瀏覽器支援</a>頁，以瞭解要在特定平台支援特定功能時所需的膩子指令碼。</p>\n<h2 id=\"project\">project<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#project\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ankyb09zqcws76wo7zaf76f6x\">在 Angular CLI 中，CLI 指令可能會建立或修改獨立應用或<a href=\"guide/glossary#library\" title=\"library - Glossary | Angular\">函式庫</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c76cpfxe729b8e48ki29bo4s5\">由 <a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code></a> 建立的專案中包含一組源檔案、資源和設定檔案，當你用 CLI 開發或測試此應用時就會用到它們。此外，還可以用 <code>ng generate application</code> 或 <code>ng generate library</code> 指令建立專案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bcgurqpneisphgktnaheh873x\">欲知詳情，參閱<a href=\"guide/file-structure\" title=\"Workspace and project file structure | Angular\">專案檔案結構</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5fhey1lux652ihccphq1ka0\"><a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\"><code>angular.json</code></a> 檔案可以設定某個<a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作區</a> 中的所有專案。</p>\n<h2 id=\"provider\">provider<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#provider\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cig5igrwii2rg89q44k88jai\">一個實現了 <a href=\"api/core/Provider\" title=\"Provider | @angular/core - API | Angular\"><code>Provider</code></a> 介面的物件。一個提供者物件定義了如何獲取與 <a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI 令牌（token）</a> 相關聯的可注入依賴。\n<a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">注入器</a>會使用這個提供者來建立它所依賴的那些類別的實例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"apc6bejkyrngq4wakbrmjtdjc\">Angular 會為每個注入器註冊一些 Angular 自己的服務。你也可以註冊應用自己所需的服務提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4v4w7zdlvyt7k3a1ptmid3zvk\">參閱<a href=\"guide/glossary#service\" title=\"service - Glossary | Angular\">服務</a>。\n參閱<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"favtl4lxsdzx57inu0kmgkhu\">在<a href=\"guide/dependency-injection\" title=\"Dependency injection in Angular | Angular\">依賴注入</a>中瞭解更多訊息。</p>\n<h2 id=\"reactive-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6pvu4j74mx9jrymo2b753y7q\">回應式表單（reactive forms）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#reactive-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5bzhzibtopzvsfhxhu1y1xum\">透過元件中程式碼建立 Angular 表單的一個框架。\n另一種技術是<a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">樣板驅動表單</a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4g9gqmxd6lhlx8jsu9z330i9x\">建立回應式表單時：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1rrik3gn6aipxhb81qcl61zf\">\"事實之源\"（表單模型）定義在元件類別中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xmbiu3hl9zbgbo8crwxo190a\">表單驗證在元件程式碼而不是驗證器指令中定義。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dvryfy7kgsepms93dsf7buzt\">在元件類別中，透過建立 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 實例或使用 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 顯性地建立每個控制元件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eeqli077iffws3e8nppy00ph2\">樣板中的 <code>input</code> 元素<strong>不</strong>使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tbci1loajzyxsqwqx5ogu5al\">相關聯的 Angular 指令全部以 <code><a href=\"api/forms/Form\" class=\"code-anchor\">Form</a></code> 開頭，比如 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>()</code>、<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()</code> 和 <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">FormControlName</a>()</code>。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nazd2jxpompk3mvf6kfgeqln\">另一種方式是樣板驅動表單。樣板驅動表單的簡介和這兩種方式的比較，參閱 <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Angular 表單簡介</a>。</p>\n<h2 id=\"resolver\">resolver<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#resolver\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1sifww79hw4zwqgandsaerq3v\">實現\n<a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\">Resolve</a>介面的類，用於在導向到請求的路由之前生成或檢索所需的資料。 您可以使用與\n<a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\">resolve()</a>方法具有相同簽名的函式代替\n<a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\">Resolve</a>介面。 解析器在路由樹的所有\n<a href=\"guide/glossary#route-guard\" title=\"路由守衛 - 術語表 | Angular\">路由守衛</a>執行併成功後執行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xpwjxu5vlq8jlz2pj604d50h\">參見使用<a href=\"guide/router-tutorial-toh#resolve-pre-fetching-component-data\" title=\"Resolve: pre-fetching component data - Router tutorial: tour of heroes | Angular\">解析守衛</a>獲取動態資料一章中的例子。</p>\n<h2 id=\"route-guard\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l91l70x5qlpbm4gcirnbeea3\">路由守衛（route guard）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#route-guard\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25x5lpfl8iulm26148qo5lpma\">一種在帶路由的應用中對導向到所要求的路由進行控制的方式。這些守衛會決定一個路由是否可以啟用或停止啟用，以及延遲載入模組是否可以被載入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6d7cxhgtnjee4w47b7scm1r5\">欲知詳情，參見<a href=\"guide/router#preventing-unauthorized-access\" title=\"Preventing unauthorized access - Common Routing Tasks | Angular\">路由與導向</a>一章。</p>\n<h2 id=\"router\">router<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7zb2b7fluozwf5bk557ywuva8\">一種工具，用來設定和實現 Angular 應用中各個狀態和<a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">檢視</a>之間的導向。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6v0qsol4dlvz8809k03qaixuv\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 模組是一個 <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a>，它提供在應用檢視間導向時需要的服務提供者和指令。<a href=\"guide/glossary#routing-component\" title=\"routing component - Glossary | Angular\">路由元件</a>是一種元件，它匯入了 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 模組，並且其樣板中包含 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 元素，路由器生成的檢視就會被顯示在那裡。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1x09crqijt5r7yzihxae9bvun\">路由器定義了在單頁面中的各個檢視之間導向的方式，而不是在頁面之間。它會解釋類似 URL 的連結，以決定該建立或銷燬哪些檢視，以及要載入或解除安裝哪些元件。它讓你可以在 Angular 應用中獲得<a href=\"guide/glossary#lazy-loading\" title=\"lazy loading - Glossary | Angular\">延遲載入</a>的好處。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kk69luwivec2kfmn1xkc27wj\">要了解更多，參閱<a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">路由與導向</a>。</p>\n<h2 id=\"router-outlet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cx06xujcnioybwpfk0zblerm0\">路由出口（router outlet）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router-outlet\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5kg043u1on5f9ha1ranzaje6\">一種<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>，它在路由元件的樣板中扮演佔位符的角色，Angular 會根據當前的路由狀態動態填充它。</p>\n<h2 id=\"routing-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8813akll9dj5j67htjv6h1z9o\">路由元件（routing component）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#routing-component\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abnru84ldbupx1m748wzxe3ic\">一個樣板中帶有 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 指令的 Angular <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件</a>，用於根據路由器的導向顯示相應的檢視。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kk69luwivec2kfmn1xkc27wj\">要了解更多，參閱<a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">路由與導向</a>。</p>\n<h2 id=\"rule\">rule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#rule\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4i9v1sotl24d0gtchimwyyvu3\">在<a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">原理圖</a> 中，是指一個在<a href=\"guide/glossary#tree\" title=\"tree - Glossary | Angular\">檔案樹</a>上執行的函式，用於以指定方式建立、刪除或修改檔案，並回傳一個新的 <code>Tree</code> 物件。</p>\n<h2 id=\"schematic\">schematic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#schematic\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y6c9iwgw974pc50e60pg6cvq\">腳手架函式庫會定義如何藉助建立、修改、重構或移動檔案和程式碼等操作來生成或轉換某個專案。每個原理圖定義了<a href=\"guide/glossary#rule\" title=\"rule - Glossary | Angular\">一些規則</a>，以操作一個被稱為<a href=\"guide/glossary#tree\" title=\"tree - Glossary | Angular\">檔案樹</a>的虛擬檔案系統。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"30fb26tmodvgo3n7w4qrkjn09\">Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 使用原理圖來生成和修改 <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">Angular 專案</a>及其部件。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1q6ji4h2a5r325p5gh6m4ie4z\">Angular 提供了一組用於 CLI 的原理圖。參閱 <a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">Angular CLI 指令參考手冊</a>。當 <a href=\"cli/add\" title=\"ng add | CLI | Angular\"><code>ng add</code></a> 指令向專案中新增某個函式庫時，就會執行原理圖。<a href=\"cli/generate\" title=\"ng generate | CLI | Angular\"><code>ng generate</code></a> 指令則會執行原理圖，來建立應用、函式庫和 Angular 程式碼區塊。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1561ov0q5d9yoh7qm2v6ywv1p\">公共<a href=\"guide/glossary#library\" title=\"library - Glossary | Angular\">函式庫</a>的開發者可以建立原理圖，來讓 Angular CLI 新增或升級他們自己的發布的函式庫，還可以生成此庫中定義的工件。請把這些原理圖新增到要用來發布和共享本函式庫的 npm 套件中。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mlsk7x9dnbtqugkwc2rnd6ll\">欲知詳情，參閱<a href=\"guide/schematics\" title=\"Generating code using schematics | Angular\">原理圖</a>。\n欲知詳情，參閱<a href=\"guide/creating-libraries#integrating-with-the-cli-using-code-generation-schematics\" title=\"Integrating with the CLI using code-generation schematics - Creating libraries | Angular\">將函式庫與 CLI 整合</a>。</p>\n<h2 id=\"schematics-cli\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qorl1fzbsnxnx80m6vk83xzm\">原理圖 CLI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#schematics-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu72vuq3qejczki79j15o685q\">Schematics 自帶了一個指令行工具。使用 Node 6.9 或更高版本，可以全域安裝這個 Schematics CLI。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install -g @angular-devkit/schematics-cli\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9a111ctk4a4p4ky0rtzy07ypa\">這會安裝可執行檔案 <code>schematics</code>，你可以用它來建立新工程、往現有工程中新增新的 schematic，或擴充套件某個現有的 schematic。</p>\n<h2 id=\"scoped-package\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bg1rsg30ld0c3i6l35kdd9k2o\">範圍化套件 （scoped package）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#scoped-package\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zfd8ynolvghmugige83ai9rx\">一種分組相關\n<a href=\"guide/npm-packages\" title=\"工作區 npm 依賴項 | Angular\">npm 套件</a>的方式。 Angular物件是從以 Angular \n<em>作用域名稱</em> \n<code>@angular</code>開頭的 npm 套件中提供的。 例如，\n<code>@angular/core</code>、\n<code>@angular/common</code>、\n<code>@angular/forms</code>和\n<code>@angular/router</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zilen8xl3772tsya9e9elzec\">和匯入普通套件相同的方式匯入範圍化套件。</p>\n<code-example path=\"architecture/src/app/app.component.ts\" header=\"architecture/src/app/app.component.ts (import)\" region=\"import\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n</code-example>\n<h2 id=\"server-side-rendering\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1j3sy4qhc2wvofn6milszetji\">伺服器端渲染<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#server-side-rendering\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"677uo1ya9if30ad8fkeu4s9ze\">一項在服務端生成靜態應用頁面的技術，它可以在對來自瀏覽器的請求進行回應時生成這些頁面或用它們提供服務。它還可以預先把這些頁面生成為 HTML 檔案，以便稍後用它們來提供服務。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zbyoh38fa5ndzm7gxjwbaqi5\">該技術可以增強手機和低功耗裝置的效能，而且會在應用載入透過快速展示一個靜態首屏來提升使用者體驗。這個靜態版本還能讓你的應用對網路蜘蛛更加友好。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjmt00mszf4kstpuidfl922bw\">你可以透過使用\n<code>ng add @angular/ssr</code>指令輕鬆為伺服器端渲染準備應用程式。</p>\n<h2 id=\"service\">service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#service\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axa5u34cgwd7k2n8dkhab5g59\">在Angular中，使用\n<a href=\"guide/glossary#injectable\" title=\"可注入 - 術語表 | Angular\">@Injectable()</a>裝飾器的類，封裝非UI邏輯和可在應用程式中重複使用的程式碼。 Angular區分元件和服務，以增加模組化和可重用性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wka0xkp0htezwx93wjj4ucqp\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元資料讓服務類別能用於<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入</a>機制中。可注入的類是用<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者</a>進行實例化的。\n<a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">各個注入器</a>會維護一個提供者的清單，並根據元件或其它服務的需要，用它們來提供服務的實例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yzxizooklqm4h5drgjpy4zfj\">欲知詳情，請參閱<a href=\"guide/architecture-services\" title=\"Introduction to services and dependency injection | Angular\">服務和依賴注入介紹</a>。</p>\n<h2 id=\"standalone\">standalone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#standalone\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ddgz8sc0w5gmbt7do5l204qgq\"><a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件</a>、<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>和<a href=\"guide/glossary#pipe\" title=\"pipe - Glossary | Angular\">通道</a>的一種設定，用以表明可以直接匯入此類，而無需在任何 <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a> 中宣告它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awhnhecmirrt8ko5avgrj5t55\">獨立元件、指令和通道與非獨立元件、指令和通道的區別在於：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1iwt5csgv5j1qxnvn0up0gg6\">將裝飾器的 <code>standalone</code> 欄位設定為 <code>true</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"715n5youebynuoo8fhi93eovt\">允許直接匯入它們，而無需透過 NgModules。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18dx4vvn0c3uzrquzy5k3rlt3\">直接在它們的裝飾器中指定它們的依賴項。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2owkchhfcni4r70exxovl4i9k\">欲知詳情，請參閱<a href=\"guide/standalone-components\" title=\"Getting started with standalone components | Angular\">獨立元件指南</a>。</p>\n<h2 id=\"structural-directive\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cxcolh45w9qof4dxq99qon09\">結構型指令（structural directive）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#structural-directive\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5eom63x6yf18o3zioqjbuhptv\">一種<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>型別，它能透過修改 DOM 來修整或重塑 HTML 的佈局。\n這裡所說的修改 DOM 包括新增、刪除或操縱元素及其相關子元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wn2w29sewvw3cjjg8hyc98io\">欲知詳情，參閱<a href=\"guide/structural-directives\" title=\"Structural directives | Angular\">結構型指令</a>。</p>\n<h2 id=\"subscriber\">subscriber<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#subscriber\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fx609a2et1hhio0to6flsy9g\">一個函式，用於定義如何獲取或生成要發布的值或訊息。\n當有消費者呼叫<a href=\"guide/glossary#observable\" title=\"observable - Glossary | Angular\">可觀察物件</a>的 <code>subscribe()</code> 方法時，該函式就會執行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7aruri5zmmqyo2rti0bvx1sy8\">訂閱一個可觀察物件就會觸發該物件的執行、為該物件關聯一些回呼函式，並建立一個 <code>Subscription</code>（訂閱記錄）物件來讓你能取消訂閱。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dz33dzlzacl9lrhs0d84hqvjv\"><code>subscribe()</code> 方法接收一個名叫<a href=\"guide/glossary#observer\" title=\"observer - Glossary | Angular\">觀察者（observer）</a>的 JavaScript 物件，其中最多可以包含三個回呼，分別對應可觀察物件可以發出的幾種通知型別：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hb5jw118jok4jvqeiwf5go0b\"><code>next</code>（下一個）通知會發送一個值，比如數字、字串、物件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4i5t75j7qe7ng63b1vebz41qs\"><code>error</code>（錯誤）通知會發送 JavaScript 錯誤或異常。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xkdi8v8z2i253mho6oul7ye0\"><code>complete</code>（完成）通知不會傳送值，但是當呼叫結束時會呼叫這個處理器。非同步的值可能會在呼叫了完成之後繼續傳送過來。</li>\n</ul>\n<h2 id=\"target\">target<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#target\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kc0njh50u5g1webp7jsqieuv\"><a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">專案</a>的一個可建立或可執行的子集，它是<a href=\"guide/workspace-config#project-tool-configuration-options\" title=\"Project tool configuration options - Angular workspace configuration | Angular\">工作區設定檔案</a>中的一個子物件，它會被<a href=\"guide/glossary#architect\" title=\"Architect - Glossary | Angular\">建築師（Architect）</a>的<a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">建構式（Builder）</a>執行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3qmdsc1v0rjq83pef3gq68t3\">在 <code>angular.json</code> 檔案中，每個專案都有一個 <code>architect</code> 分割槽，其中包含一些用於設定建構式的目標。其中一些目標對應於 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI 指令</a>，比如 <code>build</code>、<code>serve</code>、<code>test</code> 和 <code>lint</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25lnqsr0ji2q085kfk6q1nvkt\">比如，<code>ng build</code> 指令用來編譯專案時所呼叫的建構式會使用一個特定的建立工具，並且具有一份預設設定，此設定中的值可以透過指令行引數進行覆蓋。目標 <code>build</code> 還為 \"開發環境\" 建立定義了另一個設定，可以透過在 <code>build</code> 指令上新增 <code>--configuration development</code> 標誌來呼叫它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmzczdiyyxvtxifccghi78xuw\">建築師工具提供了一組建構式。<a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code> 指令</a>為初始應用專案提供了一組目標。<a href=\"cli/generate#application\" title=\"application - ng generate | CLI | Angular\"><code>ng generate application</code></a> 和 <a href=\"cli/generate#library\" title=\"library - ng generate | CLI | Angular\"><code>ng generate library</code></a> 指令則為每個新<a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">專案</a>提供了一組目標。這些目標的選項和設定都可以進行自定義，以便適應你專案的需求。比如，你可能會想為專案的 \"build\" 目標新增一個 \"staging\" 或 \"testing\" 設定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mqr9tsxx8yobomej311zmn3x\">你還可以定義一個自定義建構式，並且往專案設定中新增一個目標，來使用你的自定義建構式。然後你就可以透過 <a href=\"cli/run\" title=\"ng run | CLI | Angular\"><code>ng run</code></a> 這個 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 指令來執行此目標。</p>\n<h2 id=\"template\">template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lzlu3026sxikcrwzienpr3jf\">用來定義要如何渲染元件<a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">檢視</a>的程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7863gtsw86esiym7022ggx5b5\">樣板會把純 HTML 和 Angular 的<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">資料繫結</a>語法、<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>和<a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">樣板表示式</a>組合起來。Angular 的元素會插入或計算那些值，以便在頁面顯示出來之前修改 HTML 元素。\n在<a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">樣板語法</a>指南中瞭解有關 Angular 樣板語言的更多訊息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4cqf6yylz8mqsgtugcpz08n5r\">樣板透過 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>與<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件類別</a>類關聯起來。樣板程式碼可以作為 <code>template</code> 屬性的值用行內的方式提供，也可以透過 <code>templateUrl</code> 屬性連結到一個獨立的 HTML 檔案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkqtmwscz69dic6mklvj6k1dh\">用 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 物件表示的其它樣板用來定義一些備用檢視或<em>內嵌</em>檢視，它們可以來自多個不同的元件。</p>\n<h2 id=\"template-driven-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b9itqk4074ulecxdt2m0d5gyc\">樣板驅動表單（template-driven forms）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-driven-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4ndkyanwf7ao8dvdpnwq123n\">一種在檢視中使用 HTML 表單和輸入類元素建立 Angular 表單的格式。\n它的替代方案是<a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">回應式表單</a>框架。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29d79fo0aci3pixf0wgjmgqwg\">當建立樣板驅動表單時：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zuvskw2yvfar33giywosvy3s\">樣板是『事實之源』。使用屬性 （attribute） 在單個輸入元素上定義驗證規則。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awam0ve5vigqagfzaiz028mxc\">使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 進行<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">雙向繫結</a>，保持元件模型和使用者輸入之間的同步。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dnfalao25ajqut1ofcdgxmdpy\">在幕後，Angular 為每個帶有 <code>name</code> 屬性和雙向繫結的輸入元素建立了一個新的控制元件。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej1k3bakwct8juezd8p6ox0wl\">相關的 Angular 指令都帶有 <code>ng</code> 字首，比如 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code>、<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 和 <code><a href=\"api/forms/NgModelGroup\" class=\"code-anchor\">ngModelGroup</a></code>。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hgxa2vdd30ryykztgfspmyr3\">另一種方式是回應式表單。回應式表單的簡介和兩種方式的比較參閱 <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Angular 表單簡介</a>。</p>\n<h2 id=\"template-expression\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckf3rn7ou9tsbm89yoi7qtg4z\">樣板表示式（template expression）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-expression\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkzwoo4tpw6k7pvf2ir3adf9m\">一種類似 TypeScript 的語法，Angular 用它對<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">資料繫結 （data binding）</a>進行求值。</p>\n<!--todo: have Alex review this -->\n<!-- Read about how to write template expressions in the [template expressions][AioGuideInterpolationTemplateExpressions] section of the [Interpolation][AioGuideInterpolation] guide. -->\n<h2 id=\"template-reference-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23l4ijb0fnwykwn35tituxxch\">樣板引用變數（template reference variable）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-reference-variable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nedmbizfrvyqh2z78dzn1qwa\">樣板中定義的一個變數，它可以引用與某元素相關的實例，比如指令實例、元件實例、樣板（<code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>）或 DOM 元素。在樣板中的某個元素上聲明瞭樣板引用變數之後，你可以從同一個樣板中的其它位置訪問這些值。下面的例子定義了一個名叫 <code>#phone</code> 的樣板引用變數。</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&lt;input #phone placeholder=\"phone number\" /&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgcik7kcly1f82081iird73n5\">欲知詳情，參閱<a href=\"guide/template-reference-variables\" title=\"Template variables | Angular\">樣板引用變數</a>。</p>\n<h2 id=\"template-input-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tr40qshfzoyf4qxe3pxx4htf\">樣板輸入變數（template input variable）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-input-variable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3lys7yy3gp4y8r4e2ywqwmn6\">樣板輸入變數是一種你可以在樣板的單個實例中引用的變數。你可以使用 <code>let</code> 關鍵字來宣告樣板輸入變數，就像 <code>let customer</code> 一樣。</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers;\"&gt;\n    &lt;td&gt;{{customer.customerNo}}&lt;/td&gt;\n    &lt;td&gt;{{customer.name}}&lt;/td&gt;\n    &lt;td&gt;{{customer.address}}&lt;/td&gt;\n    &lt;td&gt;{{customer.city}}&lt;/td&gt;\n    &lt;td&gt;{{customer.state}}&lt;/td&gt;\n    &lt;button (click)=\"selectedCustomer=customer\"&gt;Select&lt;/button&gt;\n&lt;/tr&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6y2nsccpuvvujcasyo2rojjt\">欲知詳情，參閱<a href=\"guide/template-reference-variables#template-input-variable\" title=\"Template input variable - Template variables | Angular\">樣板輸入變數</a>。</p>\n<h2 id=\"token\">token<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#token\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtw7synpwl3oh8vu7gfasu79f\">用於高效查表的不透明識別符號（譯註：不透明是指你不必瞭解其細節）。在 Angular 中，<a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI 令牌</a>用於在<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入</a>系統中查詢<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">服務提供者</a>。</p>\n<h2 id=\"transpile\">transpile<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#transpile\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77q0inwxsfj80z6bdijaikzjx\">一種翻譯過程，它會把一個版本的 JavaScript 轉換成另一個版本，比如把下一版的 ES2015 轉換成老版本的 ES5。</p>\n<h2 id=\"tree\">tree<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#tree\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwr13gqj11amqwz3r06seem7l\">在 <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematics</a> 中，一個用 <code>Tree</code> 類表示的虛擬檔案系統。\nSchematic <a href=\"guide/glossary#rule\" title=\"rule - Glossary | Angular\">規則</a>以一個 <code>tree</code> 物件作為輸入，對它們進行操作，並且回傳一個新的 <code>tree</code> 物件。</p>\n<h2 id=\"typescript\">TypeScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#typescript\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4uc06v4xsd75qstyc6ir7guns\">TypeScript 是一種基於 JavaScript 的程式設計語言，以其可選型別系統著稱。TypeScript 提供了編譯時型別檢查和強大的工具支援。這裡所說的型別檢查和工具支援包括程式碼補齊、重構、行內文件和智慧搜尋等。許多程式碼編輯器和 IDE 都原生支援 TypeScript 或透過外掛提供支援。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej7tbxg6po1aw2du0pc2a9hq5\">TypeScript 是 Angular 的首選語言。要了解更多，參閱 <a href=\"https://www.typescriptlang.org\" title=\"TypeScript\">typescriptlang.org</a>。</p>\n<h2 id=\"typescript-configuration-file\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byxlym6pjk6ovnpllwqk6rkch\">TypeScript 設定檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#typescript-configuration-file\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d59lpwycu2rznerjg8b7zjlcz\">一個檔案，用來指定編譯 TypeScript 專案時的根檔案和編譯器選項。欲知詳情，參閱 <a href=\"guide/typescript-configuration\" title=\"TypeScript configuration | Angular\">TypeScript 設定</a>。</p>\n<h2 id=\"unidirectional-data-flow\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"q4btnpdxvrgkds4n3knda7pf\">單向資料流<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#unidirectional-data-flow\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"259alztlwwbe9iw4i1ksdgg4n\">一種資料流模型，它總是在一個方向（從父到子）上檢查元件樹是否有變化，以防止在變更檢測圖中出現迴圈。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afinga4a90n9fflnhmezdw3ba\">在實踐中，這意味著 Angular 中的資料會在變更檢測過程中向下流動。父元件可以很容易地改變子元件中的值，因為父元件是先檢查的。但是，如果子元件在變更檢測期間（反轉預期的資料流）嘗試更改其父元件中的值，則可能會導致錯誤，因為父元件已經渲染過了。在開發模式下，如果你的應用嘗試這樣做，Angular 會丟擲 <code>ExpressionChangedAfterItHasBeenCheckedError</code> 錯誤，而不是沉默地渲染新值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6s8g396542t0n5lrts1zdpgev\">為了避免這個錯誤，進行此類更改的<a href=\"guide/lifecycle-hooks\" title=\"Lifecycle Hooks | Angular\">生命週期鉤子</a>方法中就要觸發一次新的變更檢測。這次新的變更檢測與之前那次的方向一樣，但可以成功獲得新值。</p>\n<h2 id=\"server-side-rendering-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63o3famemwo1dv6m2wf1liv55\">伺服器端渲染<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#server-side-rendering-1\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2sxkmdic8acee2azohni57tlv\">用於實現Angular應用程式的\n<a href=\"guide/glossary#server-side-rendering\" title=\"伺服器端渲染 - 術語表 | Angular\">伺服器端渲染</a>的工具。 與應用程式整合後，Universal會在服務器上回應瀏覽器的請求並生成和提供靜態頁面。 初始靜態頁面作為快速載入的佔位符，同時全面準備應用程式以在瀏覽器中正常執行。 要了解更多，請參見\n<a href=\"guide/ssr\" title=\"使用 Angular 進行伺服器端渲染\">Angular伺服器端渲染</a>。</p>\n<h2 id=\"view\">view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egp524f7v9qxkpm63mzmw2ebf\">檢視是可顯示元素的最小分組單位，它們會被同時建立和銷燬。\nAngular 在一個或多個<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令 （directive）</a> 的控制下渲染檢視。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9adnlqp24hz46gl23qkjjxsh3\"><a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件（component）</a> 類及其關聯的<a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">樣板 （template）</a>定義了一個檢視。\n具體實現上，檢視由一個與該組件相關的 <code><a href=\"api/core/ViewRef\" class=\"code-anchor\">ViewRef</a></code> 實例表示。\n直屬於某個元件的檢視叫做<em>宿主檢視</em>。\n通常會把檢視組織成一些<a href=\"guide/glossary#view-hierarchy\" title=\"view hierarchy - Glossary | Angular\">檢視樹（view hierarchies）</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsn0ibfbq1jrhouyzfyb2dg8i\">檢視中各個元素的屬性可以動態修改以回應使用者的操作，而這些元素的結構（數量或順序）則不能。你可以透過在它們的檢視容器中插入、移動或移除內嵌檢視來修改這些元素的結構。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bu6rvjssd05o6hyb6yoqtg6m0\">當用戶在應用中導向時（比如使用<a href=\"guide/glossary#router\" title=\"router - Glossary | Angular\">路由器</a>），檢視樹可以動態載入或解除安裝。</p>\n<p><a id=\"ve\"></a></p>\n<h2 id=\"view-engine\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zdliunjwyc0wk0y1axmsxpyh\">檢視引擎（View Engine）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view-engine\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9qem6o8igccstcd10lb8sxup\">Angular 曾經用過的編譯和渲染通道。它已被 <a href=\"guide/glossary#ivy\" title=\"Ivy - Glossary | Angular\">Ivy</a> 取代，不再使用了。View Engine 在版本 9 中已棄用，並在版本 13 中刪除。</p>\n<p><a id=\"view-tree\"></a></p>\n<h2 id=\"view-hierarchy\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38apn26ff4h66n6qwgu9ydkh3\">檢視樹（View hierarchy）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view-hierarchy\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"355s72uhz5lo0t65mvyhc0w2z\">一棵相關檢視的樹，它們可以作為一個整體行動。其根檢視就是元件的<em>宿主檢視</em>。宿主檢視可以是<em>內嵌檢視</em>樹的根，它被收集到了宿主元件上的一個<em>檢視容器（<code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>）</em>中。檢視樹是 Angular <a href=\"guide/glossary#change-detection\" title=\" change detection - Glossary | Angular\">變更檢測</a>的關鍵部件之一。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19kpxrnk4hdxq7k615flpylyr\">檢視樹和元件樹並不是一一對應的。那些嵌入到指定檢視樹上下文中的檢視也可能是其它元件的宿主檢視。那些元件可能和宿主元件位於同一個 NgModule 中，也可能屬於其它 NgModule。</p>\n<h2 id=\"web-component\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6gw5k9c9itrz0tbunyvm5ai7b\">Web 元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#web-component\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1na7o2nc9q8llw428b0y11o5g\">參閱<a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">自定義元素</a></p>\n<h2 id=\"workspace\">workspace<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#workspace\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83awhrlpatps9ssdxi8it2ujl\">一組基於 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a> 的 Angular <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">專案</a>（也就是說應用或函式庫），它們通常共同位於一個單一的原始碼倉庫（比如 <a href=\"https://git-scm.com\" title=\"Git\">git</a>）中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7p9d27i8m4zlmlkgzdurghmvx\"><a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 的 <a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code> 指令</a>會在檔案系統中建立一個目錄（也就是工作區的根目錄）。\n在工作區根目錄下，還會建立此工作區的<a href=\"guide/glossary#configuration\" title=\"configuration - Glossary | Angular\">設定檔案</a>（<code>angular.json</code>），並且還會預設初始化一個同名的應用專案。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvpsppi4zl5lpc8fmoayz3h2o\">而用來建立或操作應用和函式庫的指令（比如 <code>add</code> 和 <code>generate</code>）必須在工作區目錄下才能執行。\n欲知詳情，參閱<a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">工作區設定</a>。</p>\n<h2 id=\"workspace-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yimof5sfkh787if1dsmzdyel\">工作區設定（workspace configuration）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#workspace-configuration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4r3jperr4n40ejd9mantxnyv6\">一個名叫 <code>angular.json</code> 的檔案，它位於 Angular <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作區</a> 的根目錄下，併為 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a> 提供的或整合的各個建立/開發工具提供工作區級和專案專屬的預設設定項。\n欲知詳情，參閱<a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">工作區設定</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1um6zdahm0ao5qod7x2c29at4\">還有一些專案專屬的設定檔案是給某些工具使用的。比如 <code>package.json</code> 是給 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 套件管理器</a>使用的，<code>tsconfig.json</code> 是給 <a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">TypeScript 轉譯器</a>使用的，而 <code>tslint.json</code> 是給 <a href=\"https://palantir.github.io/tslint\" title=\"TSLint | Palantir | GitHub\">TSLint</a> 使用的。\n欲知詳情，參閱<a href=\"guide/file-structure\" title=\"Workspace and project file structure | Angular\">工作區和專案檔案結構</a>。</p>\n<h2 id=\"zone\">zone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#zone\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ev8enksq8ovtu7zlady0bi1ik\">一組非同步任務的執行上下文。它對於除錯、效能分析和測試那些包含了非同步操作（如事件處理、 Promise 、遠端伺服器呼叫等）的應用是非常有用的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej0g8f1m8mdziezcmka91b0tj\">Angular 應用會執行在一個 Zone 區域中，在這裡，它可以對非同步事件做出反應，可以透過檢查資料變更、利用<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">資料繫結 （data bindings）</a> 來更新訊息顯示。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nevzhbhzly5lmu1re5o1psc0\">Zone 的使用方可以在非同步操作完成之前或之後採取行動。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2l7cwp7ofbqgmq5vu99tx11tb\">在此<a href=\"https://www.youtube.com/watch?v=3IqtmUscE_U\" title=\"Brian Ford - Zones - NG-Conf 2014 | YouTube\">Brian Ford 影片</a>中瞭解有關區域的更多訊息。</p>\n<!-- vale Angular.Google_Headings = YES -->\n<!-- links -->\n<!-- [AioGuideInterpolationTemplateExpressions]: guide/interpolation#template-expressions \"Template expressions - Text interpolation | Angular\" -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Aug 14 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/common\n - api/common/APP_BASE_HREF\n - api/common/http\n - api/common/http/HttpClientJsonpModule\n - api/common/http/HttpClientModule\n - api/core\n - api/core/APP_BOOTSTRAP_LISTENER\n - api/core/APP_ID\n - api/core/APP_INITIALIZER\n - api/core/Component\n - api/core/ComponentRef\n - api/core/Directive\n - api/core/EmbeddedViewRef\n - api/core/Inject\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/core/PACKAGE_ROOT_URL\n - api/core/Pipe\n - api/core/ViewContainerRef\n - api/core/ViewRef\n - api/platform-browser\n - api/platform-browser-dynamic\n - api/platform-browser/REMOVE_STYLES_ON_COMPONENT_DESTROY\n - api/platform-browser/animations\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/platform-browser/animations/async\n - api/platform-browser/animations/async/provideAnimationsAsync\n - api/platform-browser/animations/provideAnimations\n - api/platform-browser/animations/provideNoopAnimations\n - api/platform-server\n - api/router\n - api/router/provideRoutes\n - api/service-worker/SwUpdate\n - cli\n - guide/animate-state-style\n - guide/animations\n - guide/aot-compiler\n - guide/architecture\n - guide/architecture-components\n - guide/architecture-next-steps\n - guide/binding-overview\n - guide/bootstrapping\n - guide/build\n - guide/cli-builder\n - guide/creating-libraries\n - guide/defer\n - guide/dependency-injection\n - guide/dependency-injection-navtree\n - guide/event-binding\n - guide/file-structure\n - guide/forms\n - guide/http-request-data-from-server\n - guide/http-server-communication\n - guide/i18n-common-format-data-locale\n - guide/i18n-common-merge\n - guide/i18n-common-overview\n - guide/i18n-common-prepare\n - guide/i18n-optional-overview\n - guide/interpolation\n - guide/libraries\n - guide/lifecycle-hooks\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n - guide/npm-packages\n - guide/pipes\n - guide/pipes-custom-data-trans\n - guide/pipes-overview\n - guide/property-binding\n - guide/reactive-forms\n - guide/roadmap\n - guide/routing-overview\n - guide/schematics\n - guide/service-worker-communications\n - guide/setup-local\n - guide/styleguide\n - guide/template-statements\n - guide/understanding-template-expr-overview\n - guide/upgrade\n - guide/upgrade-setup\n - guide/workspace-config\n - presskit\n - start/start-data\n - tutorial\n - tutorial/tour-of-heroes\n - tutorial/tour-of-heroes/toh-pt0\n-->\n<!-- links from this doc:\n - api/common/DatePipe\n - api/common/NgFor\n - api/common/NgIf\n - api/core/ChangeDetectorRef\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnInit\n - api/core/Output\n - api/core/Pipe\n - api/core/Provider\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/core/ViewRef\n - api/forms/FormArray\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/NgForm\n - api/forms/NgModel\n - api/forms/NgModelGroup\n - api/platform-browser/BrowserModule\n - api/platform-server\n - api/router/Resolve\n - api/router/Router\n - api/router/RouterOutlet\n - cli\n - cli/add\n - cli/generate\n - cli/generate#app-shell\n - cli/generate#application\n - cli/generate#library\n - cli/new\n - cli/run\n - guide/angular-package-format\n - guide/animations\n - guide/architecture\n - guide/architecture-services\n - guide/attribute-binding\n - guide/attribute-directives\n - guide/bootstrapping\n - guide/browser-support\n - guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\n - guide/class-binding\n - guide/creating-libraries#integrating-with-the-cli-using-code-generation-schematics\n - guide/dependency-injection\n - guide/elements\n - guide/event-binding\n - guide/file-structure\n - guide/form-validation\n - guide/form-validation#adding-custom-validators-to-reactive-forms\n - guide/form-validation#adding-custom-validators-to-template-driven-forms\n - guide/forms\n - guide/forms-overview\n - guide/glossary#ahead-of-time-aot-compilation\n - guide/glossary#angular-element\n - guide/glossary#angular-package-format-apf\n - guide/glossary#annotation\n - guide/glossary#app-shell\n - guide/glossary#architect\n - guide/glossary#attribute-directive\n - guide/glossary#binding\n - guide/glossary#bootstrap\n - guide/glossary#builder\n - guide/glossary#case-types\n - guide/glossary#change-detection\n - guide/glossary#class-decorator\n - guide/glossary#class-field-decorator\n - guide/glossary#collection\n - guide/glossary#command-line-interface-cli\n - guide/glossary#component\n - guide/glossary#configuration\n - guide/glossary#content-projection\n - guide/glossary#custom-element\n - guide/glossary#data-binding\n - guide/glossary#declarable\n - guide/glossary#decorator--decoration\n - guide/glossary#dependency-injection-di\n - guide/glossary#di-token\n - guide/glossary#directive\n - guide/glossary#domain-specific-language-dsl\n - guide/glossary#dynamic-component-loading\n - guide/glossary#eager-loading\n - guide/glossary#ecmascript\n - guide/glossary#element\n - guide/glossary#entry-point\n - guide/glossary#form-control\n - guide/glossary#form-model\n - guide/glossary#form-validation\n - guide/glossary#glossary\n - guide/glossary#immutability\n - guide/glossary#injectable\n - guide/glossary#injector\n - guide/glossary#input\n - guide/glossary#interpolation\n - guide/glossary#ivy\n - guide/glossary#javascript\n - guide/glossary#just-in-time-jit-compilation\n - guide/glossary#lazy-loading\n - guide/glossary#library\n - guide/glossary#lifecycle-hook\n - guide/glossary#module\n - guide/glossary#ngc\n - guide/glossary#ngmodule\n - guide/glossary#npm-package\n - guide/glossary#observable\n - guide/glossary#observer\n - guide/glossary#output\n - guide/glossary#pipe\n - guide/glossary#platform\n - guide/glossary#polyfill\n - guide/glossary#project\n - guide/glossary#provider\n - guide/glossary#reactive-forms\n - guide/glossary#resolver\n - guide/glossary#route-guard\n - guide/glossary#router\n - guide/glossary#router-outlet\n - guide/glossary#routing-component\n - guide/glossary#rule\n - guide/glossary#schematic\n - guide/glossary#schematics-cli\n - guide/glossary#scoped-package\n - guide/glossary#server-side-rendering\n - guide/glossary#server-side-rendering-1\n - guide/glossary#service\n - guide/glossary#standalone\n - guide/glossary#structural-directive\n - guide/glossary#subscriber\n - guide/glossary#target\n - guide/glossary#template\n - guide/glossary#template-driven-forms\n - guide/glossary#template-expression\n - guide/glossary#template-input-variable\n - guide/glossary#template-reference-variable\n - guide/glossary#token\n - guide/glossary#transpile\n - guide/glossary#tree\n - guide/glossary#typescript\n - guide/glossary#typescript-configuration-file\n - guide/glossary#unidirectional-data-flow\n - guide/glossary#view\n - guide/glossary#view-engine\n - guide/glossary#view-hierarchy\n - guide/glossary#web-component\n - guide/glossary#workspace\n - guide/glossary#workspace-configuration\n - guide/glossary#zone\n - guide/hierarchical-dependency-injection\n - guide/inputs-outputs\n - guide/interpolation\n - guide/lifecycle-hooks\n - guide/lifecycle-hooks#responding-to-projected-content-changes\n - guide/ngmodules\n - guide/npm-packages\n - guide/observables\n - guide/pipes-overview\n - guide/property-binding\n - guide/router\n - guide/router#preventing-unauthorized-access\n - guide/router-tutorial-toh#resolve-pre-fetching-component-data\n - guide/schematics\n - guide/service-worker-intro\n - guide/setup-local\n - guide/ssr\n - guide/standalone-components\n - guide/structural-directives\n - guide/styleguide#02-01\n - guide/template-reference-variables\n - guide/template-reference-variables#template-input-variable\n - guide/template-syntax\n - guide/typescript-configuration\n - guide/workspace-config\n - guide/workspace-config#project-tool-configuration-options\n - https://angular.io/guide/aot-compiler#choosing-a-compiler\n - https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7\n - https://developer.mozilla.org/docs/Web/API/CustomElementRegistry\n - https://developers.google.com/web/fundamentals/architecture/app-shell\n - https://docs.npmjs.com/about-npm\n - https://en.wikipedia.org/wiki/Domain-specific_language\n - https://en.wikipedia.org/wiki/ECMAScript\n - https://git-scm.com\n - https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/browser\n - https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/karma\n - https://github.com/tc39/proposal-decorators\n - https://palantir.github.io/tslint\n - https://rxjs.dev\n - https://web.dev/faster-angular-change-detection\n - https://webpack.js.org\n - https://www.typescriptlang.org\n - https://www.youtube.com/watch?v=3IqtmUscE_U\n-->"}
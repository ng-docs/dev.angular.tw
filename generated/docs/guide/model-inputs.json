{"id":"guide/model-inputs","title":"模型輸入","contents":"<div class=\"content\">\n  <h1 id=\"model-inputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9peg3nbw1q4dbnfqsthab9fn0\">模型輸入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#model-inputs\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lqszhur4qm0wywl0a4pdzud\"><strong>模型輸入</strong> 是一種特殊型別的輸入，使元件能夠將新值傳播回另一個元件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nkavx2r1j5qu265fmr0igvvo\">模型輸入目前處於 \n<a href=\"/guide/releases#developer-preview\">開發者預覽</a> 狀態。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cugcul2ug813akutgl3t6sk8z\">建立元件時，你可以類似於建立標準輸入那樣定義模型輸入。</p>\n<code-example language=\"typescript\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/model\" class=\"code-anchor\">model</a>, input} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({...})\nexport class CustomCheckbox {\n  // This is a <a href=\"api/core/model\" class=\"code-anchor\">model</a> input.\n  checked = <a href=\"api/core/model\" class=\"code-anchor\">model</a>(false);\n\n  // This is a standard input.\n  disabled = input(false);\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"el2b3830mvndttb3e1siym5o6\">這兩種型別的輸入都允許將一個值繫結到屬性中。然而，\n<strong>模型輸入允許元件作者將值寫入屬性中</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8e705ka815sfvx0gllrwn4vi\">在其他方面，你可以像使用標準輸入一樣使用模型輸入。你可以透過呼叫訊號函式來讀取值，包括在回應式上下文中如 \n<code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code> 和 \n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code> 中。</p>\n<code-example language=\"typescript\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/model\" class=\"code-anchor\">model</a>, input} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'custom-checkbox',\n  template: '&lt;div (click)=\"toggle()\"&gt; ... &lt;/div&gt;',\n})\nexport class CustomCheckbox {\n  checked = <a href=\"api/core/model\" class=\"code-anchor\">model</a>(false);\n  disabled = input(false);\n\n  toggle() {\n    // While standard inputs are read-only, you can write directly to <a href=\"api/core/model\" class=\"code-anchor\">model</a> inputs.\n    this.checked.set(!this.checked());\n  }\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7xn89em6t0se9em81xuwos22\">當一個元件將新值寫入模型輸入時，Angular 可以將新值傳播回將值繫結到該輸入的元件。這被稱為 \n<strong>雙向繫結</strong>，因為值可以雙向流動。</p>\n<h2 id=\"two-way-binding-with-signals\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azd6vrcyn00jw0xhujpmzm6y2\">使用訊號進行雙向繫結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#two-way-binding-with-signals\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2arom0i0wk7oa73jvw0ogpcz7\">你可以將可寫訊號繫結到模型輸入。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  ...,\n  // `checked` is a <a href=\"api/core/model\" class=\"code-anchor\">model</a> input.\n  // The parenthesis-inside-square-brackets syntax (aka \"banana-in-a-box\") creates a two-way binding\n  template: '&lt;custom-checkbox [(checked)]=\"isAdmin\" /&gt;',\n})\nexport class UserProfile {\n  protected isAdmin = <a href=\"api/core/signal\" class=\"code-anchor\">signal</a>(false);\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ogrxz4gr0spvsvzpyt5ehvj8\">在上面的範例中，\n<code>CustomCheckbox</code> 可以將值寫入其 \n<code>checked</code> 模型輸入，然後將這些值傳播回 \n<code>UserProfile</code> 中的 \n<code>isAdmin</code> 訊號。這種繫結保持 \n<code>checked</code> 和 \n<code>isAdmin</code> 的值同步。請注意，繫結傳遞的是 \n<code>isAdmin</code> 訊號本身，而不是訊號的 \n<em>值</em>。</p>\n<h2 id=\"two-way-binding-with-plain-properties\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9n7zzmwlbz8gplinqol1fuv\">使用普通屬性進行雙向繫結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#two-way-binding-with-plain-properties\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1acee4gt91l7elrhogkqpnq8d\">你可以將普通的 JavaScript 屬性繫結到模型輸入。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  ...,\n  // `checked` is a <a href=\"api/core/model\" class=\"code-anchor\">model</a> input.\n  // The parenthesis-inside-square-brackets syntax (aka \"banana-in-a-box\") creates a two-way binding\n  template: '&lt;custom-checkbox [(checked)]=\"isAdmin\" /&gt;',\n})\nexport class UserProfile {\n  protected isAdmin = false;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dy0y5eaax8lxnzm73mwof5v3\">在上面的範例中，\n<code>CustomCheckbox</code> 可以將值寫入其 \n<code>checked</code> 模型輸入，然後將這些值傳播回 \n<code>UserProfile</code> 中的 \n<code>isAdmin</code> 屬性。這種繫結保持 \n<code>checked</code> 和 \n<code>isAdmin</code> 的值同步。</p>\n<h2 id=\"implicit-change-events\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6f12bo0nuko2s8r0hb8bnfgz3\">隱式 \n<code>change</code> 事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#implicit-change-events\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4l2tcn95f3cf5pa1e07mlue50\">當在元件或指令中宣告模型輸入時，Angular 會自動為該模型建立一個對應的 \n<a href=\"/guide/inputs-outputs\">輸出</a>。輸出的名稱是模型輸入的名稱後跟 \"Change\"。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({...})\nexport class CustomCheckbox {\n  // This automatically creates an output named \"checkedChange\".\n  // Can be subscribed to using `(checkedChange)=\"handler()\"` in the template.\n  checked = <a href=\"api/core/model\" class=\"code-anchor\">model</a>(false);\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eokfskluh5b3xbc77pzk62xf1\">每當透過呼叫其 \n<code>set</code> 或 \n<code>update</code> 方法將新值寫入模型輸入時，Angular 就會發出此更改事件。</p>\n<h2 id=\"customizing-model-inputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oil7uvzz6dombe8rwyudmobq\">自定義模型輸入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#customizing-model-inputs\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28sfers8fhefaemynbj5ppihq\">你可以像 \n<a href=\"/guide/signal-inputs\">標準輸入</a> 一樣將模型輸入標記為必需或提供別名。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rbx17vk6e33o5zq9btofho3p\">模型輸入不支援輸入轉換。</p>\n<h2 id=\"differences-between-model-and-input\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yhnqh6tg1a9mfgoco92si8qk\">關於\n<code><a href=\"api/core/model\" class=\"code-anchor\">model</a>()</code>和\n<code>input()</code>之間的區別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#differences-between-model-and-input\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13j2avfpwc14ps9dbe384k13i\">在 Angular 中，\n<code>input()</code>和\n<code><a href=\"api/core/model\" class=\"code-anchor\">model</a>()</code>函式都是定義基於訊號的輸入的方法，但它們在以下幾個方面有所不同：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jvcvom76ig2o6y9p2vr4szi6\"><code><a href=\"api/core/model\" class=\"code-anchor\">model</a>()</code>定義了\n<strong>同時</strong>一個輸入和一個輸出。輸出的名稱始終是輸入名稱加上\n<code>Change</code>字尾，以支援雙向繫結。消費者將決定是否僅使用輸入、僅使用輸出，或同時使用兩者。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t47xsfi4yxtdp9xpijx4qivp\"><code><a href=\"api/core/ModelSignal\" class=\"code-anchor\">ModelSignal</a></code>是一個\n<code><a href=\"api/core/WritableSignal\" class=\"code-anchor\">WritableSignal</a></code>，這意味著它的值可以從任何地方使用\n<code>set</code>和\n<code>update</code>方法進行更改。當分配新值時，\n<code><a href=\"api/core/ModelSignal\" class=\"code-anchor\">ModelSignal</a></code>將發出到其輸出。這與\n<code><a href=\"api/core/InputSignal\" class=\"code-anchor\">InputSignal</a></code>不同，後者是隻讀的，只能透過範本更改。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vba9cz1kpafkv0lexw1f9nlt\">Model輸入不支援輸入轉換，而訊號輸入支援。</li>\n</ol>\n<h2 id=\"when-to-use-model-inputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52z0pyxy4rsdwg4f13zdqsuma\">何時使用模型輸入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#when-to-use-model-inputs\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bblyj6ohh6rmw515nzyj2zzkf\">在存在於基於使用者互動的值修改元件中使用模型輸入。自定義表單控制元件，如日期選擇器或組合框，應該使用模型輸入作為它們的主要值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"auv9p1vdrwyribpagtreaa3we\">避免僅為了方便而使用模型輸入，以避免引入額外的類別屬性來包含本地狀態。</p>\n\n  \n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /guide/inputs-outputs\n - /guide/releases#developer-preview\n - /guide/signal-inputs\n - api/core/Component\n - api/core/Directive\n - api/core/InputSignal\n - api/core/ModelSignal\n - api/core/WritableSignal\n - api/core/computed\n - api/core/effect\n - api/core/model\n - api/core/signal\n - guide/model-inputs#customizing-model-inputs\n - guide/model-inputs#differences-between-model-and-input\n - guide/model-inputs#implicit-change-events\n - guide/model-inputs#model-inputs\n - guide/model-inputs#two-way-binding-with-plain-properties\n - guide/model-inputs#two-way-binding-with-signals\n - guide/model-inputs#when-to-use-model-inputs\n-->"}
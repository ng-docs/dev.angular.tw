{"id":"guide/model-inputs","title":"模型输入","contents":"<div class=\"content\">\n  <h1 id=\"model-inputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9peg3nbw1q4dbnfqsthab9fn0\">模型输入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#model-inputs\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lqszhur4qm0wywl0a4pdzud\"><strong>模型输入</strong> 是一种特殊类型的输入，使组件能够将新值传播回另一个组件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nkavx2r1j5qu265fmr0igvvo\">模型输入目前处于 \n<a href=\"/guide/releases#developer-preview\">开发者预览</a> 状态。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cugcul2ug813akutgl3t6sk8z\">创建组件时，你可以类似于创建标准输入那样定义模型输入。</p>\n<code-example language=\"typescript\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/model\" class=\"code-anchor\">model</a>, input} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({...})\nexport class CustomCheckbox {\n  // This is a <a href=\"api/core/model\" class=\"code-anchor\">model</a> input.\n  checked = <a href=\"api/core/model\" class=\"code-anchor\">model</a>(false);\n\n  // This is a standard input.\n  disabled = input(false);\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"el2b3830mvndttb3e1siym5o6\">这两种类型的输入都允许将一个值绑定到属性中。然而，\n<strong>模型输入允许组件作者将值写入属性中</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8e705ka815sfvx0gllrwn4vi\">在其他方面，你可以像使用标准输入一样使用模型输入。你可以通过调用信号函数来读取值，包括在响应式上下文中如 \n<code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code> 和 \n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code> 中。</p>\n<code-example language=\"typescript\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/model\" class=\"code-anchor\">model</a>, input} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'custom-checkbox',\n  template: '&lt;div (click)=\"toggle()\"&gt; ... &lt;/div&gt;',\n})\nexport class CustomCheckbox {\n  checked = <a href=\"api/core/model\" class=\"code-anchor\">model</a>(false);\n  disabled = input(false);\n\n  toggle() {\n    // While standard inputs are read-only, you can write directly to <a href=\"api/core/model\" class=\"code-anchor\">model</a> inputs.\n    this.checked.set(!this.checked());\n  }\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7xn89em6t0se9em81xuwos22\">当一个组件将新值写入模型输入时，Angular 可以将新值传播回将值绑定到该输入的组件。这被称为 \n<strong>双向绑定</strong>，因为值可以双向流动。</p>\n<h2 id=\"two-way-binding-with-signals\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azd6vrcyn00jw0xhujpmzm6y2\">使用信号进行双向绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#two-way-binding-with-signals\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2arom0i0wk7oa73jvw0ogpcz7\">你可以将可写信号绑定到模型输入。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  ...,\n  // `checked` is a <a href=\"api/core/model\" class=\"code-anchor\">model</a> input.\n  // The parenthesis-inside-square-brackets syntax (aka \"banana-in-a-box\") creates a two-way binding\n  template: '&lt;custom-checkbox [(checked)]=\"isAdmin\" /&gt;',\n})\nexport class UserProfile {\n  protected isAdmin = <a href=\"api/core/signal\" class=\"code-anchor\">signal</a>(false);\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ogrxz4gr0spvsvzpyt5ehvj8\">在上面的示例中，\n<code>CustomCheckbox</code> 可以将值写入其 \n<code>checked</code> 模型输入，然后将这些值传播回 \n<code>UserProfile</code> 中的 \n<code>isAdmin</code> 信号。这种绑定保持 \n<code>checked</code> 和 \n<code>isAdmin</code> 的值同步。请注意，绑定传递的是 \n<code>isAdmin</code> 信号本身，而不是信号的 \n<em>值</em>。</p>\n<h2 id=\"two-way-binding-with-plain-properties\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9n7zzmwlbz8gplinqol1fuv\">使用普通属性进行双向绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#two-way-binding-with-plain-properties\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1acee4gt91l7elrhogkqpnq8d\">你可以将普通的 JavaScript 属性绑定到模型输入。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  ...,\n  // `checked` is a <a href=\"api/core/model\" class=\"code-anchor\">model</a> input.\n  // The parenthesis-inside-square-brackets syntax (aka \"banana-in-a-box\") creates a two-way binding\n  template: '&lt;custom-checkbox [(checked)]=\"isAdmin\" /&gt;',\n})\nexport class UserProfile {\n  protected isAdmin = false;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dy0y5eaax8lxnzm73mwof5v3\">在上面的示例中，\n<code>CustomCheckbox</code> 可以将值写入其 \n<code>checked</code> 模型输入，然后将这些值传播回 \n<code>UserProfile</code> 中的 \n<code>isAdmin</code> 属性。这种绑定保持 \n<code>checked</code> 和 \n<code>isAdmin</code> 的值同步。</p>\n<h2 id=\"implicit-change-events\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6f12bo0nuko2s8r0hb8bnfgz3\">隐式 \n<code>change</code> 事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#implicit-change-events\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4l2tcn95f3cf5pa1e07mlue50\">当在组件或指令中声明模型输入时，Angular 会自动为该模型创建一个对应的 \n<a href=\"/guide/inputs-outputs\">输出</a>。输出的名称是模型输入的名称后跟 \"Change\"。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({...})\nexport class CustomCheckbox {\n  // This automatically creates an output named \"checkedChange\".\n  // Can be subscribed to using `(checkedChange)=\"handler()\"` in the template.\n  checked = <a href=\"api/core/model\" class=\"code-anchor\">model</a>(false);\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eokfskluh5b3xbc77pzk62xf1\">每当通过调用其 \n<code>set</code> 或 \n<code>update</code> 方法将新值写入模型输入时，Angular 就会发出此更改事件。</p>\n<h2 id=\"customizing-model-inputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oil7uvzz6dombe8rwyudmobq\">自定义模型输入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#customizing-model-inputs\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28sfers8fhefaemynbj5ppihq\">你可以像 \n<a href=\"/guide/signal-inputs\">标准输入</a> 一样将模型输入标记为必需或提供别名。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rbx17vk6e33o5zq9btofho3p\">模型输入不支持输入转换。</p>\n<h2 id=\"differences-between-model-and-input\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yhnqh6tg1a9mfgoco92si8qk\">关于\n<code><a href=\"api/core/model\" class=\"code-anchor\">model</a>()</code>和\n<code>input()</code>之间的区别<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#differences-between-model-and-input\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13j2avfpwc14ps9dbe384k13i\">在 Angular 中，\n<code>input()</code>和\n<code><a href=\"api/core/model\" class=\"code-anchor\">model</a>()</code>函数都是定义基于信号的输入的方法，但它们在以下几个方面有所不同：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jvcvom76ig2o6y9p2vr4szi6\"><code><a href=\"api/core/model\" class=\"code-anchor\">model</a>()</code>定义了\n<strong>同时</strong>一个输入和一个输出。输出的名称始终是输入名称加上\n<code>Change</code>后缀，以支持双向绑定。消费者将决定是否仅使用输入、仅使用输出，或同时使用两者。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t47xsfi4yxtdp9xpijx4qivp\"><code><a href=\"api/core/ModelSignal\" class=\"code-anchor\">ModelSignal</a></code>是一个\n<code><a href=\"api/core/WritableSignal\" class=\"code-anchor\">WritableSignal</a></code>，这意味着它的值可以从任何地方使用\n<code>set</code>和\n<code>update</code>方法进行更改。当分配新值时，\n<code><a href=\"api/core/ModelSignal\" class=\"code-anchor\">ModelSignal</a></code>将发出到其输出。这与\n<code><a href=\"api/core/InputSignal\" class=\"code-anchor\">InputSignal</a></code>不同，后者是只读的，只能通过模板更改。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vba9cz1kpafkv0lexw1f9nlt\">Model输入不支持输入转换，而信号输入支持。</li>\n</ol>\n<h2 id=\"when-to-use-model-inputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52z0pyxy4rsdwg4f13zdqsuma\">何时使用模型输入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/model-inputs#when-to-use-model-inputs\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bblyj6ohh6rmw515nzyj2zzkf\">在存在于基于用户交互的值修改组件中使用模型输入。自定义表单控件，如日期选择器或组合框，应该使用模型输入作为它们的主要值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"auv9p1vdrwyribpagtreaa3we\">避免仅为了方便而使用模型输入，以避免引入额外的类属性来包含本地状态。</p>\n\n  \n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /guide/inputs-outputs\n - /guide/releases#developer-preview\n - /guide/signal-inputs\n - api/core/Component\n - api/core/Directive\n - api/core/InputSignal\n - api/core/ModelSignal\n - api/core/WritableSignal\n - api/core/computed\n - api/core/effect\n - api/core/model\n - api/core/signal\n - guide/model-inputs#customizing-model-inputs\n - guide/model-inputs#differences-between-model-and-input\n - guide/model-inputs#implicit-change-events\n - guide/model-inputs#model-inputs\n - guide/model-inputs#two-way-binding-with-plain-properties\n - guide/model-inputs#two-way-binding-with-signals\n - guide/model-inputs#when-to-use-model-inputs\n-->"}
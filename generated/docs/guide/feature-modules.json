{"id":"guide/feature-modules","title":"屬性模組","contents":"<div class=\"content\">\n  <h1 id=\"feature-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bf4qau51t25zl7c84rwr3a4f\">屬性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#feature-modules\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9d2kzc8u7qck2znv56nw9m765\">屬性模組是用來對程式碼進行組織的模組。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16geite9hiew7mpg7sj141q89\">要想檢視本頁提到的這個帶有屬性模組的範例應用，參閱 <live-example></live-example>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7u3kdym9f2adg5vji86gxk8ia\">隨著應用的增長，你可能需要組織與特定應用有關的程式碼。\n這將幫你把屬性劃出清晰的邊界。使用屬性模組，你可以把與特定的功能或屬性有關的程式碼從其它程式碼中分離出來。\n為應用勾勒出清晰的邊界，有助於開發人員之間、小組之間的協作，有助於分離各個指令，並幫助管理根模組的大小。</p>\n<h2 id=\"feature-modules-vs-root-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqxwz5vg5splvi09jha5fyq81\">屬性模組 vs. 根模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#feature-modules-vs-root-modules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77kg3qac2hbb8v4kes46ohhvk\">與核心的 Angular API 的概念相反，屬性模組是最佳的組織方式。屬性模組提供了聚焦於特定應用需求的一組功能，比如使用者工作流、路由或表單。\n雖然你也可以用根模組做完所有事情，不過屬性模組可以幫助你把應用劃分成一些聚焦的功能區。屬性模組透過它提供的服務以及共享出的元件、指令和通道來與根模組和其它模組合作。</p>\n<h2 id=\"how-to-make-a-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jcazmx5d98oytp4pisxx0dip\">如何製作屬性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#how-to-make-a-feature-module\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4yk0damb7qdi9g2s51u1y6h83\">如果你已經有了 <a href=\"cli\">Angular CLI</a> 生成的應用，可以在專案的根目錄下輸入下面的指令來建立屬性模組。把這裡的 <code>CustomerDashboard</code> 替換成你的模組名。你可以從名字中省略掉『Module』字尾，因為 CLI 會自動追加上它：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module CustomerDashboard\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0pyi66xi2ptfppcdku005sdx\">這會讓 CLI 建立一個名叫 <code>customer-dashboard</code> 的資料夾，其中有一個名叫 <code>customer-dashboard.module.ts</code>，內容如下：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: []\n})\nexport class CustomerDashboardModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tg7dxpv2z798aj40sb988qpn\">無論根模組還是屬性模組，其 NgModule 結構都是一樣的。在 CLI 生成的屬性模組中，在檔案頂部有兩個 JavaScript 的匯入語句：第一個匯入了 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>，它像根模組中一樣讓你能使用 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器；第二個匯入了 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>，它提供了很多像 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 這樣的常用指令。\n屬性模組匯入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>，而不是 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>，後者只應該在根模組中匯入一次。\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 只包含常用指令的訊息，比如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>，它們在大多數範本中都要用到，而 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 為瀏覽器所做的應用設定只會使用一次。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64i4ti54m0vczvw2ggzgurseh\"><code>declarations</code> 陣列讓你能新增專屬於這個模組的可宣告物件（元件、指令和通道）。\n要新增元件，就在指令行中輸入如下指令，這裡的 <code>customer-dashboard</code> 是一個目錄，CLI 會把屬性模組生成在這裡，而 <code>CustomerDashboard</code> 就是該組件的名字：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component customer-dashboard/CustomerDashboard\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27dsy440xsaiqmkfj6i9dkb0o\">這會在 <code>customer-dashboard</code> 中為新元件生成一個目錄，並使用 <code>CustomerDashboardComponent</code> 的訊息修改這個屬性模組：</p>\n<code-example header=\"src/app/customer-dashboard/customer-dashboard.module.ts\" path=\"feature-modules/src/app/customer-dashboard/customer-dashboard.module.ts\" region=\"customer-dashboard-component\">\n// import the new component\nimport { CustomerDashboardComponent } from './customer-dashboard/customer-dashboard.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: [\n    CustomerDashboardComponent\n  ],\n})\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"402xuabs06c1t6vo5h5eoh1j9\"><code>CustomerDashboardComponent</code> 出現在了頂部的 JavaScript 匯入清單裡，並且被新增到了 <code>declarations</code> 陣列中，它會讓 Angular 把新元件和這個屬性模組聯絡起來。</p>\n<h2 id=\"importing-a-feature-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6dll9l77n9l9br0f3ny04x0k\">匯入屬性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#importing-a-feature-module\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vx73d0atpaeikxo2eoe4lmk6\">要想把這個屬性模組包含進應用中，你還得讓根模組 <code>app.module.ts</code> 知道它。注意，在 <code>customer-dashboard.module.ts</code> 檔案底部 <code>CustomerDashboardModule</code> 的匯出部分。這樣就把它暴露出來，以便其它模組可以拿到它。要想把它匯入到 <code>AppModule</code> 中，就把它加入 <code>app.module.ts</code> 的匯入表中，並將其加入 <code>imports</code> 陣列：</p>\n<code-example header=\"src/app/app.module.ts\" path=\"feature-modules/src/app/app.module.ts\" region=\"app-module\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n// import the feature module here so you can add it to the imports array below\nimport { CustomerDashboardModule } from './customer-dashboard/customer-dashboard.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    CustomerDashboardModule // add the feature module here\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8qop5qz9r6ls28opgxir07pxh\">現在 <code>AppModule</code> 知道這個屬性模組了。如果你往該屬性模組中加入過任何服務提供者，<code>AppModule</code> 也同樣會知道它，其它模組中也一樣。不過，NgModule 並不會暴露出它們的元件。</p>\n<h2 id=\"rendering-a-feature-modules-component-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6setre8jqluggrhei0ekhra9j\">渲染屬性模組的元件範本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#rendering-a-feature-modules-component-template\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzpqysevg9iyz9xrb6durbi7u\">當 CLI 為這個屬性模組生成 <code>CustomerDashboardComponent</code> 時，還包含一個範本 <code>customer-dashboard.component.html</code>，它帶有如下頁面指令碼：</p>\n<code-example header=\"src/app/customer-dashboard/customer-dashboard/customer-dashboard.component.html\" path=\"feature-modules/src/app/customer-dashboard/customer-dashboard/customer-dashboard.component.html\" region=\"feature-template\">\n&lt;p&gt;\n  customer-dashboard works!\n&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7cqn1spicb1j0zr6wdke8kcr0\">要想在 <code>AppComponent</code> 中檢視這些 HTML，你首先要在 <code>CustomerDashboardModule</code> 中匯出 <code>CustomerDashboardComponent</code>。\n在 <code>customer-dashboard.module.ts</code> 中，<code>declarations</code> 陣列的緊下方，加入一個包含 <code>CustomerDashboardModule</code> 的 <code>exports</code> 陣列：</p>\n<code-example header=\"src/app/customer-dashboard/customer-dashboard.module.ts\" path=\"feature-modules/src/app/customer-dashboard/customer-dashboard.module.ts\" region=\"component-exports\">\nexports: [\n  CustomerDashboardComponent\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"douu83oy0rlym1gzquqmtikku\">然後，在 <code>AppComponent</code> 的 <code>app.component.html</code> 中，加入標籤 <code>&lt;app-customer-dashboard&gt;</code>：</p>\n<code-example header=\"src/app/app.component.html\" path=\"feature-modules/src/app/app.component.html\" region=\"app-component-template\">\n&lt;h1&gt;\n  {{title}}\n&lt;/h1&gt;\n\n&lt;!-- add the selector from the CustomerDashboardComponent --&gt;\n&lt;app-customer-dashboard&gt;&lt;/app-customer-dashboard&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7xldnueeqk2mmunvno4ns840c\">現在，除了預設渲染出的標題外，還渲染出了 <code>CustomerDashboardComponent</code> 的範本：</p>\n<div class=\"lightbox\">\n<img alt=\"feature module component\" src=\"generated/images/guide/feature-modules/feature-module.png\" width=\"594\" height=\"408\">\n</div>\n<h2 id=\"more-on-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpukz8usqrzb3byrzbogm52l\">關於 NgModule 的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"320pd4quk21g01cifflgmc0pj\">你可能還對下列內容感興趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a488aahakf9yx5yykgy1ln7dv\"><a href=\"guide/lazy-loading-ngmodules\">使用 Angular 路由器延遲載入模組</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0n6et5hry7sni1qgcd1web7k\"><a href=\"guide/providers\">服務提供者</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bot5kxk6jyhqjbnbem8f1gew\"><a href=\"guide/module-types\">屬性模組的分類</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/ngmodules\n - guide/testing-components-scenarios\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http\n - api/common/http/HttpClientModule\n - api/core/NgModule\n - api/forms/FormsModule\n - api/platform-browser/BrowserModule\n - cli\n - guide/feature-modules#feature-modules\n - guide/feature-modules#feature-modules-vs-root-modules\n - guide/feature-modules#how-to-make-a-feature-module\n - guide/feature-modules#importing-a-feature-module\n - guide/feature-modules#more-on-ngmodules\n - guide/feature-modules#rendering-a-feature-modules-component-template\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/providers\n-->"}
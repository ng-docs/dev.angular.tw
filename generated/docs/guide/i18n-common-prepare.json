{"id":"guide/i18n-common-prepare","title":"准备翻译组件","contents":"<div class=\"content\">\n  <h1 id=\"prepare-component-for-translation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2bj8f466inlapqxogmicf5uhy\">准备翻译组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#prepare-component-for-translation\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9o7ztlbvk0ts8s8q5xtz84yhx\">要准备翻译项目，请完成以下操作。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9p04i909fe924mw5ei05yxh68\">使用 <code>i18n</code> 属性标记组件模板中的文本</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jthrd6b8u6ehqbh0hhlc8ndw\">使用 <code>i18n-</code> 属性在组件模板中标记属性文本字符串</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etaph6jcpiu2d88hb6mejmt3d\">使用带 <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> 标记的消息字符串标记组件代码中的文本字符串</li>\n</ul>\n<h2 id=\"mark-text-in-component-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2bswwv0jfsbyxsbi3pm7xs3i1\">在组件模板中标记文本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#mark-text-in-component-template\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32qoc8a22n4zw6fane2uwum5n\">在组件模板中，i18n 元数据就是 <code>i18n</code> 属性的值。</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;element i18n=\"{i18n_metadata}\"&gt;{string_to_translate}&lt;/element&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"300seipmuow9mvyvq6zirnhiu\">使用 <code>i18n</code> 属性在组件模板中标记静态文本消息以进行翻译。将它放在每个包含要翻译的固定文本的元素标签上。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63hs2uuhhr5haaxwijrwire0u\"><code>i18n</code> 属性是供 Angular 工具和编译器识别的自定义属性。</p>\n</div>\n<h3 id=\"i18n-example\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9k4b6jj7xat5pm0lhi820hqc4\"><code>i18n</code> 示例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#i18n-example\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dze9gfxl7xtshnqglbhvzyeue\">下面的 <code>&lt;h1&gt;</code> 标签显示了一个简单的英语问候语：“Hello i18n！”。</p>\n<code-example header=\"src/app/app.component.html\" path=\"i18n/doc-files/app.component.html\" region=\"greeting\">\n&lt;h1&gt;Hello i18n!&lt;/h1&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtuwoqvnnpe9ip9vl9i0zf3gs\">要把这个问候语标记为要翻译的，请把 <code>i18n</code> 属性添加到 <code>&lt;h1&gt;</code> 标签上。</p>\n<code-example header=\"src/app/app.component.html\" path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute\">\n&lt;h1 i18n&gt;Hello i18n!&lt;/h1&gt;\n\n</code-example>\n<h3 id=\"translate-inline-text-without-html-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azj0l5kpw4kit2h5b6n14fmkq\">翻译没有 HTML 元素的内联文本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#translate-inline-text-without-html-element\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agnnh1gmt6lmact2dj2xvadx3\">使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素来为特定文本关联翻译行为，而不会改变文本的显示方式。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5new8xwiv1j0vg4tcxv2jem1e\">每个 HTML 元素都会创建一个新的 DOM 元素。要想避免创建新的 DOM 元素，请将文本包裹在 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素中。以下示例显示了如何将 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素转换为不显示的 HTML 注释。</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-ng-container\">\n&lt;ng-container i18n&gt;I don't output any element&lt;/ng-container&gt;\n\n</code-example>\n</div>\n<h2 id=\"mark-element-attributes-for-translations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7q2zgpld40cysfgz7gzx5zuoa\">标记要翻译的元素属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#mark-element-attributes-for-translations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2j3b3k7angicbrbj3tdk32pf\">在组件模板中，i18n 的元数据是 <code>i18n-{attribute_name}</code> 属性的值。</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;element i18n-{attribute_name}=\"{i18n_metadata}\" {attribute_name}=\"{attribute_value}\" /&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9iv3toenjec7fzym5c2i23jgm\">HTML 元素的属性包括那些要和组件模板中显示的其它文本一起翻译的文本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xz369t8a1s4dvpp7w9i2v50l\">将 <code>i18n-{attribute_name}</code> 与任何元素的任何属性一起使用，并将 <code>{attribute_name}</code> 替换为该属性的名称。使用以下语法分配含义、描述和自定义 ID。</p>\n<!--todo: replace with code-example -->\n<code-example format=\"html\" language=\"html\">\n\ni18n-{attribute_name}=\"{meaning}|{description}@@{id}\"\n\n</code-example>\n<h3 id=\"i18n-title-example\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cte4jqg0jt4hl5no6ae1v2o35\"><code>i18n-title</code> 示例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#i18n-title-example\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"q4t3wu1jdqau59opxnlnd2lm\">要翻译图像的标题，请查看此示例。以下示例显示具有 <code>title</code> 属性的图像。</p>\n<code-example header=\"src/app/app.component.html\" path=\"i18n/doc-files/app.component.html\" region=\"i18n-title\">\n&lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> [src]=\"logo\" title=\"Angular logo\" alt=\"Angular logo\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eztubtdusne04u4biabi70u83\">要标记出待翻译的标题属性，请完成以下操作。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asahiu9kqhhsu6wugauc2m015\">添加 <code>i18n-title</code> 属性</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f36m3tkxbzyrkjr0okdxldrt3\">下面的示例展示了如何通过添加 <code>i18n-title</code> 来标记出 <code><a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a></code> 标签上的 <code>title</code> 属性。</p>\n<code-example header=\"src/app/app.component.html\" path=\"i18n/src/app/app.component.html\" region=\"i18n-title-translate\">\n&lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> [src]=\"logo\" i18n-title title=\"Angular logo\" alt=\"Angular logo\"/&gt;\n\n</code-example>\n</li>\n</ol>\n<h2 id=\"mark-text-in-component-code\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ixewfve30f6doy28b267hdt5\">在组件代码中标记文本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#mark-text-in-component-code\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"boehnif927l7ipd9zb76k3szg\">在组件代码中，翻译源文本和元数据被反引号 （<code>`</code>） 字符包围。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zlceuq5ozbzb19bh1wp5rhxv\">使用 <a href=\"api/localize/init/$localize\" title=\"$localize | init - localize - API  | Angular\"> <code>$localize</code> </a> 标记的消息字符串在代码中标记出要翻译的字符串。</p>\n<!--todo: replace with code-example -->\n<code-example format=\"typescript\" language=\"typescript\">\n\n$localize `string_to_translate`;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a12uc8h1u9vqqs1h4k6jo9r1i\">i18n 元数据包裹在冒号 （<code>:</code>） 字符中，并放在翻译源文本之前。</p>\n<!--todo: replace with code-example -->\n<code-example format=\"typescript\" language=\"typescript\">\n\n$localize `:{i18n_metadata}:string_to_translate`\n\n</code-example>\n<h3 id=\"include-interpolated-text\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6etguknm7ecytmiqi8ubujld7\">包含插值文本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#include-interpolated-text\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hljrmlphz2jewayt135d5ca2\">在 <a href=\"api/localize/init/$localize\" title=\"$localize | init - localize - API  | Angular\"><code>$localize</code></a> 标记的消息字符串中包含<a href=\"guide/glossary#interpolation\" title=\"interpolation - Glossary | Angular\">插值文本</a>。</p>\n<!--todo: replace with code-example -->\n<code-example format=\"typescript\" language=\"typescript\">\n\n$localize `string_to_translate ${variable_name}`;\n\n</code-example>\n<h3 id=\"name-the-interpolation-placeholder\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98bhej84al1celqk7vixvu7z5\">命名插值占位符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#name-the-interpolation-placeholder\"><i class=\"material-icons\">link</i></a></h3>\n<code-example format=\"typescript\" language=\"typescript\">\n\n$localize `string_to_translate ${variable_name}:placeholder_name:`;\n\n</code-example>\n<h2 id=\"i18n-metadata-for-translation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7686otfhj9dqmq5p227sfimx\">用于翻译的 i18n 元数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#i18n-metadata-for-translation\"><i class=\"material-icons\">link</i></a></h2>\n<!--todo: replace with code-example -->\n<code-example>\n\n{meaning}|{description}@@{custom_id}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bf40me0dwkps3tphz93ilng14\">以下参数提供上下文和附加信息，以避免翻译人员弄混。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ca66ndnjhx2n1ocwfx2kahif\">元数据参数</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adglv61k66nzykq5yloiw83lt\">自定义标识符</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ck5ncauvkmhfowmdlw09aa8mt\">提供一个自定义标识符</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ar5q09mdsagdppsbze96eagxl\">说明</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9p9pttn8bnd36zd7yv7ahcmv0\">提供额外信息或上下文</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ryq83o4vnwnm29aax9uihwua\">含义</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ovibrynhlte5ibov2agkcnlr\">在特定上下文中提供文本的含义或意图</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3efybsuq052q74jtzurc6qlml\">有关自定义 ID 的其他信息，请参阅<a href=\"guide/i18n-optional-manage-marked-text\" title=\"Manage marked text with custom IDs | Angular\">使用自定义 ID 管理已标记的文本</a>。</p>\n<h3 id=\"add-helpful-descriptions-and-meanings\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f2m0h2q6vyarvibnzpygfmtcc\">添加有用的描述和含义<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#add-helpful-descriptions-and-meanings\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"baifmsl5hjofdhuuc9n1r1dxe\">要准确翻译文本消息，就要为翻译人员提供额外信息或上下文。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acc574xj6hz6d1740ospz87em\">为 <code>i18n</code> 属性的值或 <a href=\"api/localize/init/$localize\" title=\"$localize | init - localize - API  | Angular\"> <code>$localize</code> </a> 标记的消息字符串添加文本消息的<em>描述</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekx00z42j9x9f6h82jr1iu7kh\">以下示例显示了 <code>i18n</code> 属性的值。</p>\n<code-example header=\"src/app/app.component.html\" path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-desc\">\n&lt;h1 i18n=\"An introduction header for this sample\"&gt;Hello i18n!&lt;/h1&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lf8j8fr2vmtsi04xjdlhff1b\">以下示例显示了带有描述的 <a href=\"api/localize/init/$localize\" title=\"$localize | init - localize - API  | Angular\"><code>$localize</code></a> 标记消息字符串的值。</p>\n<!--todo: replace with code-example -->\n<code-example format=\"typescript\" language=\"typescript\">\n\n$localize `:An introduction header for this sample:Hello i18n!`;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e6inxjdvxpafmcl9kfm9fhfq\">翻译者可能还需要了解该特定应用上下文中此文本消息的含义或意图，以便以与具有相同含义的其他文本相同的方式对其进行翻译。把<em>含义</em>放在 <code>i18n</code> 属性值的最前面，并用 <code>|</code> 字符将其与<em>描述</em>分开：<code>{meaning}|{description}</code>。</p>\n<h4 id=\"h1-example\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avkp4et228le4h1nvgu3op614\"><code>h1</code> 示例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#h1-example\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2a0blhk1k4e96e1qd26dv02hz\">比如，你可能希望将 <code>&lt;h1&gt;</code> 标记指定为需要以相同方式翻译的站点标题，无论是把它用作标题还是在其他文本部分中引用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b81kxcvj0wbc1td37yvo2t2cn\">以下示例显示如何指定 <code>&lt;h1&gt;</code> 标记无论在标题还是在别处引用都要以相同方式翻译。</p>\n<code-example header=\"src/app/app.component.html\" path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-meaning\">\n&lt;h1 i18n=\"site header|An introduction header for this sample\"&gt;Hello i18n!&lt;/h1&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3snm77wwpxbrvfr9b847du1lc\">其结果是：任何标有 <code>site header</code> 的文本都会以相同方式翻译，因为其<em>含义</em>完全相同。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8wum43bsy8nvtb05lqgop6nvq\">以下代码示例显示了带有含义和描述的 <a href=\"api/localize/init/$localize\" title=\"$localize | init - localize - API  | Angular\"><code>$localize</code></a> 标记消息字符串的值。</p>\n<!--todo: replace with code-example -->\n<code-example format=\"typescript\" language=\"typescript\">\n\n$localize `:site header|An introduction header for this sample:Hello i18n!`;\n\n</code-example>\n<div class=\"callout is-helpful\">\n<header id=\"how-meanings-control-text-extraction-and-merges\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7781d0igmhpwdesb8tq0tydwy\">含义（meaning）是如何控制文本提取与合并的</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b31rog8ucxp6nn4mo3tv4t4yg\">Angular 提取工具会为模板中的每个 <code>i18n</code> 属性生成一个翻译单元条目。Angular 提取工具会根据<em>含义</em>和<em>描述</em>为每个翻译单元分配一个唯一的 ID。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1r4obwbgv8y4pj4tlomyhon7o\">有关 Angular 提取工具的更多信息，请参阅<a href=\"guide/i18n-common-translation-files\" title=\"Work with translation files | Angular\">使用翻译文件</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewfat9v7p194eo7ny3him9qh2\">具有不同<em>含义</em>的相同文本元素以不同的 ID 提取。比如，如果单词“right”在两个不同的位置使用以下两个定义，则该单词将被以不同地方式翻译并作为不同的翻译条目合并回应用程序。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8dcfuppotnhhqyg822h5d218h\"><code>correct</code> 如 \"you are right\"</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edaei6hg0auh1l02c51nk718r\"><code>direction</code> 如 \"turn right\"</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gtox7tk3wjhxs9bxsbkhzo3u\">如果相同的文本元素满足以下条件，则只会提取一次文本元素并使用相同的 ID。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qib1gtsd2jpzhjbo9t3iuj7n\">相同的含义或定义</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ee9m92u0zpho9cknujz5j39o7\">不同的描述</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xd3843kpxdwt7qf5ary1dzjz\">只要出现相同的文本元素，该翻译条目就会合并回应用程序。</p>\n</div>\n<h2 id=\"icu-expressions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88emkq0iydg7j15exjrzju5m2\">ICU 表达式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#icu-expressions\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"861tjswar0o9c9mr94s12a9e3\">ICU 表达式可帮助你在组件模板中标记出某些条件下的替代文本。ICU 表达式包括一个组件属性、一个 ICU 子句以及由左花括号 （ <code>{</code> ） 和右花括号 （ <code>}</code> ） 字符包围的 case 语句。</p>\n<!--todo: replace with code-example -->\n<code-example>\n\n{ component_property, icu_clause, case_statements }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kikp7qkufsy3glgdn51lb9n9\">组件属性定义了变量，而 ICU 子句定义了条件文本的类型。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jgp7i94iucab9bpq0mhbvgoa\">ICU 子句</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ac47tg497yynr26dpzodf0f21\"><a href=\"guide/i18n-common-prepare#mark-plurals\" title=\"标记复数 - 为翻译准备组件 | Angular\"><code>plural</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66xwby12joz1vv8u3hllt6t1w\">标记使用复数数字</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bogvq970y8kg079jma05oti5d\"><a href=\"guide/i18n-common-prepare#mark-alternates-and-nested-expressions\" title=\"标记备用和嵌套表达式 - 为翻译准备模板 | Angular\"><code>select</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ambfhwkc13m9bsd8l8gr3o29\">根据您定义的字符串值标记备用文本的选择</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1is2bnnufmwh95vo1svj4t2wi\">为了简化翻译，请使用带有正则表达式的 Unicode 子句（ICU 子句）的国际化组件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e461ftnblf1hmqutkubkuhdt\">ICU 子句遵循 <a href=\"http://cldr.unicode.org/index/cldr-spec/plural-rules\" title=\"Plural Rules | CLDR - Unicode Common Locale Data Repository | Unicode\">CLDR 复数规则</a> 中指定的 <a href=\"https://unicode-org.github.io/icu/userguide/format_parse/messages\" title=\"ICU Message Format - ICU Documentation | Unicode | GitHub\">ICU 消息格式</a>。</p>\n</div>\n<h3 id=\"mark-plurals\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ug9871ywbtpksp24gz84dld8\">标出复数形式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#mark-plurals\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tfyhb6q3dy12y3fgw46u131n\">不同的语言有不同的复数规则，这增加了翻译的难度。因为其他语言环境表达基数的方式不同，你可能需要设置与英语不一致的复数类别。使用 <code>plural</code> 从句来标记当逐字翻译时可能没有意义的表达式。</p>\n<!--todo: replace with code-example -->\n<code-example>\n\n{ component_property, plural, pluralization_categories }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ajk7nbjtx8r8bdac7kmwuvyj\">在复数类别之后，输入由左大括号 （<code>{</code>） 和右大括号 （<code>}</code>） 字符包围的默认文本（英文）。</p>\n<!--todo: replace with code-example -->\n<code-example>\n\npluralization_category { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bxnu76lj5xdew3b0re0ja34ly\">以下复数类别适用于英语，可能会根据语言环境而变化。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94gksjtt6a4bwbn0x6d3do2mz\">复数化类别</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lzz2v4ucg07faxnpe2bu1wa1\">范例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>zero</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ae31thacealdf8i5lqo4r2fnc\">数量为零</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sodrndzcbl17x5wcw2083s5v\"><code>=0 { }</code> \n<br> \n<code>zero { }</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>one</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayrkcm3ut1jt66vwjgt5rvquu\">数量为1</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cbcgnkl10xd23bz7wl8lnc4z\"><code>=1 { }</code> \n<br> \n<code>one { }</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>two</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kk959nz0h4rwz9r5mh90tren\">数量为2</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1adqn5ad23atp8qc3ti3lbvqb\"><code>=2 { }</code> \n<br> \n<code>two { }</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>few</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9slvbl16qarah7cj178ooppu\">数量为2或更多</td>\n<td align=\"left\"><code>few { }</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>many</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"au4pjt2voj4hw7x4t1zlhg5yd\">数量为大数</td>\n<td align=\"left\"><code>many { }</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>other</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6dsoams8ybqgdouw45206gd63\">默认数量</td>\n<td align=\"left\"><code>other { }</code></td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blk9uaettic3988h9glgal9cl\">如果不能匹配任何复数类别，Angular 就会使用 <code>other</code> 来匹配缺失类别的标准后备值。</p>\n<!--todo: replace with code-example -->\n<code-example>\n\nother { default_quantity }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31kabk194h4vfvdmf8ruycwjo\">有关复数类别的更多信息，请参阅 <a href=\"https://cldr.unicode.org\" title=\"Unicode CLDR Project\">CLDR - Unicode Common Locale Data Repository</a> 中的<a href=\"http://cldr.unicode.org/index/cldr-spec/plural-rules#TOC-Choosing-Plural-Category-Names\" title=\"Choosing Plural Category Names - Plural Rules | CLDR - Unicode Common Locale Data Repository | Unicode\">选择复数类别名称</a>。</p>\n</div>\n<div class=\"callout is-important\">\n<header id=\"background-locales-may-not-support-some-pluralization-categories\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0nlzyxjp2l6ed3339wyalyn5\">背景：语言环境可能不支持某些复数类别</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zim08s3lyi6b1esis834s0c2\">许多语言环境不支持某些复数类别。默认语言环境 (<code>en-US</code>) 使用一个非常简单的 <code>plural()</code> 函数，该函数不支持 <code>few</code> 复数类别。另一个具有简单 <code>plural()</code> 函数的语言环境是 <code>es</code>。以下代码示例显示了 <a href=\"https://github.com/angular/angular/blob/ecffc3557fe1bff9718c01277498e877ca44588d/packages/core/src/i18n/locale_en.ts#L14-L18\" title=\"Line 14 to 18 - angular/packages/core/src/i18n/locale_en.ts | angular/angular | GitHub\">en-US 多重 <code>plural()</code></a> 函数。</p>\n<code-example path=\"i18n/doc-files/locale_plural_function.ts\" class=\"no-box\" hidecopy=\"\">\nfunction plural(n: number): number {\n  let i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '').length;\n  if (i === 1 &amp;&amp; v === 0) return 1;\n  return 5;\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"av5b9d5gbeizs179265scpp7s\"><code>plural()</code> 函数只返回 1 ( <code>one</code> ) 或 5 ( <code>other</code> )。而 <code>few</code> 类别永远不会匹配到。</p>\n</div>\n<h4 id=\"minutes-example\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dpqsm0ac5iqcfzrcnmaoyjmq\"><code>minutes</code> 示例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#minutes-example\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbt7cacd7vlnhkbyw43svewo6\">如果你想用英文显示以下短语，其中 <code>x</code> 是一个数字。</p>\n<!--todo: replace output code-example with screen capture image --->\n<code-example>\n\nupdated x minutes ago\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfs1hh2yi9rqs9hb6ajfvjm8e\">如果你还想根据 <code>x</code> 的基数显示以下短语。</p>\n<!--todo: replace output code-example with screen capture image --->\n<code-example>\n\nupdated just now\n\n</code-example>\n<!--todo: replace output code-example with screen capture image --->\n<code-example>\n\nupdated one minute ago\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1o0c1t75i08mlwg5xxuesga7p\">使用 HTML 标记和<a href=\"guide/glossary#interpolation\" title=\"interpolation - Glossary | Angular\">插值</a>。下面的代码示例展示了如何在 <code>&lt;span&gt;</code> 元素中使用 <code>plural</code> 子句来表达前三种情况。</p>\n<code-example header=\"src/app/app.component.html\" path=\"i18n/src/app/app.component.html\" region=\"i18n-plural\">\n&lt;span i18n&gt;Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{minutes}} minutes ago}}&lt;/span&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9daqp66rek38fc0oiyqtqf9j8\">查看前面代码示例中的以下详细信息。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2yvleri23pqevh8tr49s6skto\">参数</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>minutes</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"r5rbmlrlckonvh2fipsluwc6\">第一个参数指定组件属性为\n<code>minutes</code>，并确定分钟数。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>plural</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5frld0cjvxh6xuu4bcc4lu63r\">第二个参数指定 ICU 子句为\n<code>plural</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>=0 {just now}</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a01gqir99pz6399tepd88oe1p\">对于零分钟，复数化类别为\n<code>=0</code>。值为\n<code>刚刚</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>=1 {one minute}</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azvyayfllss2ezjhq0ka95cnj\">对于一分钟，复数化类别为\n<code>=1</code>。值为\n<code>一分钟</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>other {{{minutes}} minutes ago}</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cb8q1naau2f5axq9pp4jwzerm\">对于任何未匹配的基数，默认的复数化类别为\n<code>other</code>。值为\n<code>{{minutes}}分钟前</code>。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2azlq420i151a0zz6m8el1jyd\"><code>{{minutes}}</code> 是一个<a href=\"guide/glossary#interpolation\" title=\"interpolation - Glossary | Angular\">插值</a>。</p>\n<h3 id=\"mark-alternates-and-nested-expressions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6l8jz8jj6o13j59srl1ph4e7f\">标记替代表达式和嵌套表达式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#mark-alternates-and-nested-expressions\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brfalt75li2d0fapfipdf8foh\"><code>select</code> 子句根据你定义的字符串值标记替代文本的选择。</p>\n<!--todo: replace with code-example -->\n<code-example>\n\n{ component_property, select, selection_categories }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6syoohr6wq6cqse04mgnj35b6\">翻译所有替代项以根据变量的值显示替代文本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e119hi4g0uva3hk5fazbdcfi4\">在选择类别后，输入由左大括号 （ <code>{</code> ） 和右大括号 （ <code>}</code> ） 字符包围的文本（英文）。</p>\n<!--todo: replace with code-example -->\n<code-example>\n\nselection_category { text }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d78r4bwqyl51fillddnwm61z\">不同的语言环境具有不同的语法结构，这增加了翻译的难度。使用 HTML 标记。如果无法匹配任何选择类别，Angular 就会使用 <code>other</code> 来匹配缺失类别的标准后备值。</p>\n<!--todo: replace with code-example -->\n<code-example>\n\nother { default_value }\n\n</code-example>\n<h4 id=\"gender-example\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"krxf3nrhbvyqdoeo7iw2zcxw\"><code>gender</code> 例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#gender-example\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bybct64j6cm2hhmt4d82ord63\">如果你想用英文显示下面的短语。</p>\n<!--todo: replace output code-example with screen capture image --->\n<code-example>\n\nThe author is other\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59585fvbln5u66t9ec7ak0283\">如果你还想根据组件的 <code>gender</code> 属性显示以下短语。</p>\n<!--todo: replace output code-example with screen capture image --->\n<code-example>\n\nThe author is female\n\n</code-example>\n<!--todo: replace output code-example with screen capture image --->\n<code-example>\n\nThe author is male\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dqpnytpbbq14ybsc13ikr57o\">下面的代码示例展示了如何绑定组件的 <code>gender</code> 属性，并使用 <code>select</code> 子句在 <code>&lt;span&gt;</code> 元素中表达前三种情况。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y7q1gq1h8d4k841kvxw6gl08\"><code>gender</code> 属性将输出绑定到以下每个字符串值。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66vasbp44yre2dcyqjx64g0vw\">数值</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axlgfsc5jna8uzuso4zl8vtm7\">英文值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">female</td>\n<td align=\"left\"><code>female</code></td>\n</tr>\n<tr>\n<td align=\"left\">male</td>\n<td align=\"left\"><code>male</code></td>\n</tr>\n<tr>\n<td align=\"left\">other</td>\n<td align=\"left\"><code>other</code></td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ypch8wy7l965ths7bpqlpiga\"><code>select</code> 子句会将值映射成适当的翻译。以下代码示例显示了与 select 子句一起使用的 <code>gender</code> 属性。</p>\n<code-example header=\"src/app/app.component.html\" path=\"i18n/src/app/app.component.html\" region=\"i18n-select\">\n&lt;span i18n&gt;The author is {gender, select, male {male} female {female} other {other}}&lt;/span&gt;\n\n</code-example>\n<h4 id=\"gender-and-minutes-example\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fadixvc8n3jjuj7cofa9bel1\"><code>gender</code> 和 <code>minutes</code> 示例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#gender-and-minutes-example\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec5pnvaortllf4wkr6mroyzck\">将不同的子句组合在一起，比如 <code>plural</code> 和 <code>select</code> 子句。以下代码示例显示了基于 <code>gender</code> 和 <code>minutes</code> 示例的嵌套子句。</p>\n<code-example header=\"src/app/app.component.html\" path=\"i18n/src/app/app.component.html\" region=\"i18n-nested\">\n&lt;span i18n&gt;Updated: {minutes, plural,\n  =0 {just now}\n  =1 {one minute ago}\n  other {{{minutes}} minutes ago by {gender, select, male {male} female {female} other {other}}}}\n&lt;/span&gt;\n\n</code-example>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arzc8hk8cqjfsumylt7ssaggv\"><a href=\"guide/i18n-common-translation-files\" title=\"Work with translation files | Angular\">使用翻译文件</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/localize/init/$localize\n - guide/angular-compiler-options\n - guide/i18n-common-format-data-locale\n - guide/i18n-common-overview\n - guide/i18n-common-translation-files\n - guide/i18n-optional-manage-marked-text\n-->\n<!-- links from this doc:\n - api/common/NgOptimizedImage\n - api/core/ng-container\n - api/localize/init/$localize\n - guide/glossary#interpolation\n - guide/i18n-common-prepare#add-helpful-descriptions-and-meanings\n - guide/i18n-common-prepare#gender-and-minutes-example\n - guide/i18n-common-prepare#gender-example\n - guide/i18n-common-prepare#h1-example\n - guide/i18n-common-prepare#i18n-example\n - guide/i18n-common-prepare#i18n-metadata-for-translation\n - guide/i18n-common-prepare#i18n-title-example\n - guide/i18n-common-prepare#icu-expressions\n - guide/i18n-common-prepare#include-interpolated-text\n - guide/i18n-common-prepare#mark-alternates-and-nested-expressions\n - guide/i18n-common-prepare#mark-element-attributes-for-translations\n - guide/i18n-common-prepare#mark-plurals\n - guide/i18n-common-prepare#mark-text-in-component-code\n - guide/i18n-common-prepare#mark-text-in-component-template\n - guide/i18n-common-prepare#minutes-example\n - guide/i18n-common-prepare#name-the-interpolation-placeholder\n - guide/i18n-common-prepare#prepare-component-for-translation\n - guide/i18n-common-prepare#translate-inline-text-without-html-element\n - guide/i18n-common-prepare#whats-next\n - guide/i18n-common-translation-files\n - guide/i18n-optional-manage-marked-text\n - http://cldr.unicode.org/index/cldr-spec/plural-rules\n - http://cldr.unicode.org/index/cldr-spec/plural-rules#TOC-Choosing-Plural-Category-Names\n - https://cldr.unicode.org\n - https://github.com/angular/angular/blob/ecffc3557fe1bff9718c01277498e877ca44588d/packages/core/src/i18n/locale_en.ts#L14-L18\n - https://unicode-org.github.io/icu/userguide/format_parse/messages\n-->"}
{"id":"guide/ngmodule-api","title":"NgModule API","contents":"<div class=\"content\">\n  <h1 id=\"ngmodule-api\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmiagjxdqv8kiny360gjmegk7\">NgModule API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-api\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enck6gsqshvwyq5khdhzv0w02\">宏观来讲，NgModule 是组织 Angular 应用的一种方式，它们通过 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器中的元数据来实现这一点。这些元数据可以分成三类：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hg0rfp9hxuu1apt1jmdrpier\">类别</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uqedai4zw35hlih3lg95oopi\">静态</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3blx0roz62q6qte6pnrwv7lkm\">编译器配置，告诉编译器关于指令选择器以及在模板中通过选择器匹配应用指令的位置。这是使用 \n<code>declarations</code> 数组配置的。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b54v67m26iezsq7c8xtfrlbdq\">运行时</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bunevvdthslh27ctpttpbyx46\">使用 \n<code>providers</code> 数组进行注入器配置。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1iwvz9z3qrlnwjt01yylntlwr\">可组合性/分组</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5iqgpbx7wn62zzw6jfll04c1g\">将 NgModules 组合在一起，并使用 \n<code>imports</code> 和 \n<code>exports</code> 数组使它们可用。</td>\n</tr>\n</tbody>\n</table>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  // Static, that is compiler configuration\n  declarations: [], // Configure the selectors\n\n  // Runtime, or injector configuration\n  providers: [], // Runtime injector configuration\n\n  // Composability / Grouping\n  imports: [], // composing NgModules together\n  exports: [] // making NgModules available to other parts of the app\n})\n\n</code-example>\n<h2 id=\"ngmodule-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rthghpdhexwk9futbcldgcvm\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-metadata\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayvcen8eaq04t9npfno6tpyz8\">下面是 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据中属性的汇总表。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dkddoxcqk28ajo52wkpdu2by\">属性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>declarations</code></td>\n<td align=\"left\">A list of <a href=\"guide/ngmodule-faq#q-declarable\">declarable</a> classes (<em>components</em>, <em>directives</em>, and <em>pipes</em>) that <em>belong to this module</em>. <ol> <li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u7msxi2jimmoe5kh49u8g3fh\">在编译模板时，你需要确定一组选择器，用于触发其相应的指令。</li> <li> The template is compiled within the context of an NgModule —the NgModule within which the template's component is declared— which determines the set of selectors using the following rules: <ul> <li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bv8canrwttzybzz5yzekcx7o\">所有在 \n<code>declarations</code> 中列出的指令的选择器。</li> <li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ieaqikwupbp2mhv9u4pmk0i7\">所有从导入的 NgModules 导出的指令的选择器。</li> </ul> </li> </ol> Components, directives, and pipes must belong to <em>exactly</em> one module. The compiler emits an error if you try to declare the same class in more than one module. Be careful not to re-declare a class that is imported directly or indirectly from another module.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cluzf0b9zvqd9t022mxg5ekzd\">一组依赖注入提供者。\n<br> Angular 使用这些提供者注册到 NgModule 的注入器中。如果它是用于启动的 NgModule，那么它就是根注入器。\n<br> 这些服务可供注入到任何作为此注入器子级的组件、指令、管道或服务中。\n<br> 延迟加载的模块有其自己的注入器，通常是应用程序根注入器的子级。\n<br> 延迟加载的服务范围限定于延迟模块的注入器。如果延迟加载的模块还提供了 \n<code>UserService</code>，那么在该模块的上下文中创建的任何组件（例如通过路由导航）都将获得该服务的本地实例，而不是根应用程序注入器中的实例。\n<br> 外部模块中的组件继续接收其注入器提供的实例。\n<br> 更多关于注入器层次结构和作用域的信息，请参见 \n<a href=\"guide/providers\">提供者</a> 和 \n<a href=\"guide/dependency-injection\">DI 指南</a>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>imports</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"67n5zfk7zo3goh1xratp6w7zz\">应该合并到此模块中的模块列表。合并意味着好像所有导入的 NgModule 的导出属性都在此声明了。\n<br> 具体来说，当组件模板引用了导入模块导出的组件、指令或管道时，好像声明了这些模块的列表。\n<br> 当引用声明在此模块中或导入的模块已导出时，组件模板可以 \n<a href=\"guide/ngmodule-faq#q-template-reference\">引用</a> 另一个组件、指令或管道。例如，只有在导入了 Angular 的 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>（可能是通过间接导入 \n<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>）之后，组件才能使用 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 \n<code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 指令。\n<br> 你可以从 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 导入许多标准指令，但一些常见指令属于其他模块。例如，只有在导入了 Angular 的 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 后才能使用 \n<code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>exports</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55ljjfpzcgq4apm7gmyfeq88e\">一组声明 —\n<em>组件</em>、\n<em>指令</em> 和 \n<em>管道</em> 类— 可供导入模块使用。\n<br> 导出的声明是模块的 \n<em>公共 API</em>。如果另一个模块导入了此模块并且此模块导出了 \n<code>UserComponent</code>，那么另一个模块中的组件可以 \n<a href=\"guide/ngmodule-faq#q-template-reference\">使用</a> \n<em>此</em> 模块的 \n<code>UserComponent</code>。\n<br> 默认情况下，声明是私有的。如果此模块 \n<em>未</em> 导出 \n<code>UserComponent</code>，那么只有在 \n<em>此</em> 模块内的组件才能使用 \n<code>UserComponent</code>。\n<br> 导入模块 \n<em>不会</em> 自动重新导出导入的模块的导入。模块'B'不能仅仅因为导入了导入了 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 的模块'A' 而使用 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>。模块'B'必须自己导入 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。\n<br> 一个模块可以将另一个模块列在其 \n<code>exports</code> 中，这样该模块的所有公共组件、指令和管道都将被导出。\n<br> \n<a href=\"guide/ngmodule-faq#q-reexport\">重新导出</a> 明确了模块的传递性。如果模块'A'重新导出了 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>，并且模块'B'导入了模块'A'，那么模块'B'的组件可以使用 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>，尽管'B'本身没有导入 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>bootstrap</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"296qot5g4ezbfcf1hmbeqw2j7\">自动引导的组件列表。\n<br> 通常只有一个组件在此列表中，即应用程序的 \n<em>根组件</em>。\n<br> Angular 可以启动多个引导组件，每个组件在主机网页中有自己的位置。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"more-on-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpukz8usqrzb3byrzbogm52l\">关于 NgModule 的更多知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"320pd4quk21g01cifflgmc0pj\">你可能还对下列内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fzene1iev0zqe4b7pk810fn2\"><a href=\"guide/feature-modules\">特性模块</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0n6et5hry7sni1qgcd1web7k\"><a href=\"guide/providers\">服务提供者</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bot5kxk6jyhqjbnbem8f1gew\"><a href=\"guide/module-types\">特性模块的分类</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/core/NgModule\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/dependency-injection\n - guide/feature-modules\n - guide/module-types\n - guide/ngmodule-api#more-on-ngmodules\n - guide/ngmodule-api#ngmodule-api\n - guide/ngmodule-api#ngmodule-metadata\n - guide/ngmodule-faq#q-declarable\n - guide/ngmodule-faq#q-reexport\n - guide/ngmodule-faq#q-template-reference\n - guide/providers\n-->"}
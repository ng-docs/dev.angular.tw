{"id":"guide/ngmodule-api","title":"NgModule API","contents":"<div class=\"content\">\n  <h1 id=\"ngmodule-api\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmiagjxdqv8kiny360gjmegk7\">NgModule API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-api\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enck6gsqshvwyq5khdhzv0w02\">宏觀來講，NgModule 是組織 Angular 應用的一種方式，它們透過 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器中的元資料來實現這一點。這些元資料可以分成三類：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hg0rfp9hxuu1apt1jmdrpier\">類別</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uqedai4zw35hlih3lg95oopi\">靜態</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3blx0roz62q6qte6pnrwv7lkm\">編譯器設定，告訴編譯器關於指令選擇器以及在樣板中透過選擇器對應應用指令的位置。這是使用 \n<code>declarations</code> 陣列設定的。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b54v67m26iezsq7c8xtfrlbdq\">執行時</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bunevvdthslh27ctpttpbyx46\">使用 \n<code>providers</code> 陣列進行注入器設定。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1iwvz9z3qrlnwjt01yylntlwr\">可組合性/分組</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5iqgpbx7wn62zzw6jfll04c1g\">將 NgModules 組合在一起，並使用 \n<code>imports</code> 和 \n<code>exports</code> 陣列使它們可用。</td>\n</tr>\n</tbody>\n</table>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  // Static, that is compiler configuration\n  declarations: [], // Configure the selectors\n\n  // Runtime, or injector configuration\n  providers: [], // Runtime injector configuration\n\n  // Composability / Grouping\n  imports: [], // composing NgModules together\n  exports: [] // making NgModules available to other parts of the app\n})\n\n</code-example>\n<h2 id=\"ngmodule-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rthghpdhexwk9futbcldgcvm\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-metadata\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayvcen8eaq04t9npfno6tpyz8\">下面是 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料中屬性的彙總表。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dkddoxcqk28ajo52wkpdu2by\">屬性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>declarations</code></td>\n<td align=\"left\">A list of <a href=\"guide/ngmodule-faq#q-declarable\">declarable</a> classes (<em>components</em>, <em>directives</em>, and <em>pipes</em>) that <em>belong to this module</em>. <ol> <li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u7msxi2jimmoe5kh49u8g3fh\">在編譯樣板時，你需要確定一組選擇器，用於觸發其相應的指令。</li> <li> The template is compiled within the context of an NgModule —the NgModule within which the template's component is declared— which determines the set of selectors using the following rules: <ul> <li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bv8canrwttzybzz5yzekcx7o\">所有在 \n<code>declarations</code> 中列出的指令的選擇器。</li> <li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ieaqikwupbp2mhv9u4pmk0i7\">所有從匯入的 NgModules 匯出的指令的選擇器。</li> </ul> </li> </ol> Components, directives, and pipes must belong to <em>exactly</em> one module. The compiler emits an error if you try to declare the same class in more than one module. Be careful not to re-declare a class that is imported directly or indirectly from another module.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cluzf0b9zvqd9t022mxg5ekzd\">一組依賴注入提供者。\n<br> Angular 使用這些提供者註冊到 NgModule 的注入器中。如果它是用於啟動的 NgModule，那麼它就是根注入器。\n<br> 這些服務可供注入到任何作為此注入器子級的元件、指令、通道或服務中。\n<br> 延遲載入的模組有其自己的注入器，通常是應用程式根注入器的子級。\n<br> 延遲載入的服務範圍限定於延遲模組的注入器。如果延遲載入的模組還提供了 \n<code>UserService</code>，那麼在該模組的上下文中建立的任何元件（例如透過路由導向）都將獲得該服務的本地實例，而不是根應用程式注入器中的實例。\n<br> 外部模組中的元件繼續接收其注入器提供的實例。\n<br> 更多關於注入器層次結構和作用域的訊息，請參見 \n<a href=\"guide/providers\">提供者</a> 和 \n<a href=\"guide/dependency-injection\">DI 指南</a>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>imports</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"67n5zfk7zo3goh1xratp6w7zz\">應該合併到此模組中的模組清單。合併意味著好像所有匯入的 NgModule 的匯出屬性都在此宣告了。\n<br> 具體來說，當元件樣板引用了匯入模組匯出的元件、指令或通道時，好像宣告了這些模組的清單。\n<br> 當引用宣告在此模組中或匯入的模組已匯出時，元件樣板可以 \n<a href=\"guide/ngmodule-faq#q-template-reference\">引用</a> 另一個元件、指令或通道。例如，只有在匯入了 Angular 的 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>（可能是透過間接匯入 \n<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>）之後，元件才能使用 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 \n<code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 指令。\n<br> 你可以從 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 匯入許多標準指令，但一些常見指令屬於其他模組。例如，只有在匯入了 Angular 的 \n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 後才能使用 \n<code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>exports</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"55ljjfpzcgq4apm7gmyfeq88e\">一組宣告 —\n<em>元件</em>、\n<em>指令</em> 和 \n<em>通道</em> 類— 可供匯入模組使用。\n<br> 匯出的宣告是模組的 \n<em>公共 API</em>。如果另一個模組匯入了此模組並且此模組匯出了 \n<code>UserComponent</code>，那麼另一個模組中的元件可以 \n<a href=\"guide/ngmodule-faq#q-template-reference\">使用</a> \n<em>此</em> 模組的 \n<code>UserComponent</code>。\n<br> 預設情況下，宣告是私有的。如果此模組 \n<em>未</em> 匯出 \n<code>UserComponent</code>，那麼只有在 \n<em>此</em> 模組內的元件才能使用 \n<code>UserComponent</code>。\n<br> 匯入模組 \n<em>不會</em> 自動重新匯出匯入的模組的匯入。模組'B'不能僅僅因為匯入了匯入了 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 的模組'A' 而使用 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>。模組'B'必須自己匯入 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。\n<br> 一個模組可以將另一個模組列在其 \n<code>exports</code> 中，這樣該模組的所有公共元件、指令和通道都將被匯出。\n<br> \n<a href=\"guide/ngmodule-faq#q-reexport\">重新匯出</a> 明確了模組的傳遞性。如果模組'A'重新匯出了 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>，並且模組'B'匯入了模組'A'，那麼模組'B'的元件可以使用 \n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>，儘管'B'本身沒有匯入 \n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>bootstrap</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"296qot5g4ezbfcf1hmbeqw2j7\">自動引導的元件清單。\n<br> 通常只有一個元件在此清單中，即應用程式的 \n<em>根元件</em>。\n<br> Angular 可以啟動多個引導元件，每個元件在主機網頁中有自己的位置。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"more-on-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpukz8usqrzb3byrzbogm52l\">關於 NgModule 的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"320pd4quk21g01cifflgmc0pj\">你可能還對下列內容感興趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fzene1iev0zqe4b7pk810fn2\"><a href=\"guide/feature-modules\">屬性模組</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0n6et5hry7sni1qgcd1web7k\"><a href=\"guide/providers\">服務提供者</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bot5kxk6jyhqjbnbem8f1gew\"><a href=\"guide/module-types\">屬性模組的分類</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/core/NgModule\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/dependency-injection\n - guide/feature-modules\n - guide/module-types\n - guide/ngmodule-api#more-on-ngmodules\n - guide/ngmodule-api#ngmodule-api\n - guide/ngmodule-api#ngmodule-metadata\n - guide/ngmodule-faq#q-declarable\n - guide/ngmodule-faq#q-reexport\n - guide/ngmodule-faq#q-template-reference\n - guide/providers\n-->"}
{"id":"guide/template-reference-variables","title":"理解模板变量","contents":"<div class=\"content\">\n  <h1 id=\"understanding-template-variables\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34marep0igwa0f1zsomxufpiz\">理解模板变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#understanding-template-variables\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sfq56lxu4y2gn1a5791xapm6\">模板变量可以帮助你在模板的另一部分使用这个部分的数据。使用模板变量，你可以执行某些任务，比如响应用户输入或微调应用的表单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ovn6gghr4199c3mn8u5mmrxy\">模板变量可以引用这些东西：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2dxuw253v5qxvmvrnbkvtyswg\">模板中的 DOM 元素</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51iycf4hpcolvskqzse2tlwcj\">指令或组件</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7n66fs9eg4l5xwtvpsp7iu34p\">来自 <a href=\"api/core/ng-template\">ng-template</a> 的 <a href=\"api/core/TemplateRef\">TemplateRef</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ew1xbem8hycy6dap4fra7qch\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN：Web Components\">Web 组件</a></li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81el5yk7yllx1tewd03bnp7o0\">本章包含代码片段的工作实例参阅<live-example></live-example>。</p>\n</div>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lvs0h1x4icqv27g56mkig8yt\"><a href=\"guide/template-overview\">了解模板</a></li>\n</ul>\n<h2 id=\"syntax\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p44mx807exjp3s0k9dwbuxla\">语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#syntax\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3whnp7u7qsr7n9h3iykqot3ta\">在模板中，要使用井号 <code>#</code> 来声明一个模板变量。下列模板变量 <code>#phone</code> 声明了一个名为 <code>phone</code> 的变量，其值为此 <code>&lt;input&gt;</code> 元素。</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&lt;input #phone placeholder=\"phone number\" /&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cnun2x28nu8dicxhzebpec1gz\">可以在组件模板中的任何地方引用某个模板变量。这里的 <code>&lt;button&gt;</code> 就引用了 <code>phone</code> 变量。</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-phone\" header=\"src/app/app.component.html\">\n&lt;input #phone placeholder=\"phone number\" /&gt;\n\n&lt;!-- lots of other elements --&gt;\n\n&lt;!-- phone refers to the input element; pass its `value` to an event handler --&gt;\n&lt;button type=\"button\" (click)=\"callPhone(phone.value)\"&gt;Call&lt;/button&gt;\n\n</code-example>\n<h2 id=\"how-angular-assigns-values-to-template-variables\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgfzvbpavqbnp4icxupw4051k\">Angular 是如何为模板变量赋值的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#how-angular-assigns-values-to-template-variables\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyijzhxvj22n8hl7gjxgr33u4\">Angular 根据你所声明的变量的位置给模板变量赋值：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"du09uyt5gt1rc15qnqh51fe2v\">如果在组件上声明变量，该变量就会引用该组件实例。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wc5k6ctg9gki85u4u4x9e7rl\">如果在标准的 HTML 标记上声明变量，该变量就会引用该元素。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7n8wt8iwty107a7l8ro6rux2i\">如果你在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素上声明变量，该变量就会引用一个 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 实例来代表此模板。关于 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 的更多信息，请参阅<a href=\"guide/structural-directives#asterisk\">结构型指令</a> 中的 <a href=\"guide/structural-directives#asterisk\">Angular 如何使用 <code>*</code> 语法</a>部分。</li>\n</ul>\n<h2 id=\"variable-specifying-a-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ttt65m3ssa6c9z1umnylirzp\">指定名称的变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#variable-specifying-a-name\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckmyfkiyod7kryt2odfp8ok9y\">如果变量在右侧指定了一个名称，例如 \n<code>#var=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>，那么该变量将指向具有匹配的 \n<code>exportAs</code> 名称的元素上的指令或组件。 \n<!-- 第二部分的含义是什么？^^我们能更全面地解释这一点吗？我能看一个示例吗？-kw --></li>\n</ul>\n<h3 id=\"using-ngform-with-template-variables\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e68jpjuh4zg1beu3ssac49m2s\">将 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 与模板变量一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#using-ngform-with-template-variables\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fkxo8l9sbitv0vsebj3ejbhu\">在大多数情况下，Angular 会把模板变量的值设置为它所在的元素。在前面的例子中，<code>phone</code> 引用的是电话号码 <code>&lt;input&gt;</code>。该按钮的 click 处理程序会把这个 <code>&lt;input&gt;</code> 的值传给该组件的 <code>callPhone()</code> 方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yyzigotrn2w47e3zkwgh48il\">这里的 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令演示了如何通过引用指令的的 <code>exportAs</code> 名字来引用不同的值。在下面的例子中，模板变量 <code>itemForm</code> 在 HTML 中分别出现了三次。</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ngForm\" header=\"src/app/hero-form.component.html\">\n&lt;form #itemForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\" (ngSubmit)=\"onSubmit(itemForm)\"&gt;\n  &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n  &lt;input type=\"text\" id=\"name\" class=\"form-control\" name=\"name\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> required /&gt;\n  &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;div [hidden]=\"!itemForm.form.valid\"&gt;\n  &lt;p&gt;{{ submitMessage }}&lt;/p&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bcki8pqy69mz7xl0j5yi3el9s\">如果没有 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code> 这个属性值，<code>itemForm</code> 引用的值将是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a> 也就是 <code>&lt;form&gt;</code> 元素。如果某元素是一个 Angular 组件，则不带属性值的引用会自动引用此组件的实例。否则，不带属性值的引用会引用此 DOM 元素，而不管此元素上有一个或多个指令。</p>\n<!-- What is the train of thought from talking about a form element to the difference between a component and a directive? Why is the component directive conversation relevant here?  -kw I agree -alex -->\n<h2 id=\"template-variable-scope\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zb03j1233w56w7duyxmg7v08\">模板变量的作用域<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-variable-scope\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bm1j989lcmi3fg0rha2snz431\">就像 JavaScript 或 TypeScript 代码中的变量一样，模板变量的范围为声明它们的模板。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4iiaslxwd7i5jyi33fmp6mytd\">同样，诸如 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 类的<a href=\"guide/built-in-directives\">结构指令</a>或 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 声明会创建一个新的嵌套模板范围，就像 JavaScript 的控制流语句（例如 <code>if</code> 和 <code>for</code> 创建新的词法范围。你不能从边界外访问这些结构指令之一中的模板变量。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqstnxv9izg2pi4m203ztr2dg\">同名变量在模板中只能定义一次，这样运行时它的值就是可预测的。</p>\n</div>\n<h3 id=\"accessing-in-a-nested-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0hlnkptlnosg1ovybg1wdvnx\">在嵌套模板中访问<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#accessing-in-a-nested-template\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xj003t897s66xb1jgev9apj3\">内部模板可以访问外模板定义的模板变量。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2bpptaf3w46pstfiz99pq85yk\">在下面的例子中，修改 <code>&lt;input&gt;</code> 中的文本值也会改变 <code>&lt;span&gt;</code> 中的值，因为 Angular 会立即通过模板变量 <code>ref1</code> 来更新这种变化。</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"template-ref-vars-scope1\" header=\"src/app/app.component.html\">\n&lt;input #ref1 type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"firstExample\" /&gt;\n&lt;span *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\"&gt;Value: {{ ref1.value }}&lt;/span&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ci28nl781ztjjxutp6l8uck48\">在这种情况下，<code>&lt;span&gt;</code> 上的 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 会创建一个新的模板范围，其中包括其父范围中的 <code>ref1</code> 变量。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bepstuhg4ywxe24nh9ukffinw\">但是，从外部的父模板访问子范围中的变量是行不通的。</p>\n<code-example language=\"html\">\n  &lt;input *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\" #ref2 type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"secondExample\" /&gt;\n  &lt;span&gt;Value: {{ ref2?.value }}&lt;/span&gt; &lt;!-- doesn't work --&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ndcr2vqh0dw52q1pqtd3k8s\">在这里，<code>ref2</code> 是在 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 创建的子范围中声明的，并且无法从父模板访问。</p>\n<a id=\"template-input-variable\"></a>\n<a id=\"template-input-variables\"></a>\n<h2 id=\"template-input-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5a2gy97h1l50s2vnxa0okxfh\">模板输入变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-input-variable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7sxcz812kjfe8b4beoe0zso2g\"><em>模板输入变量</em>是一个具有在创建该模板实例时设置的值的变量。请参阅：<a href=\"/guide/structural-directives\">编写结构指令</a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l1ypsn4kc5u2p8kfvcye5jg8\">可以在 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 的长格式用法中看到模板输入变量的作用：</p>\n<code-example language=\"html\">\n&lt;ul&gt;\n  &lt;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> let-hero [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\"&gt;\n    &lt;li&gt;{{hero.name}}&lt;/li&gt;\n  &lt;/ng-template&gt;\n&lt;/ul&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vm5cqll6e6yt02vnw0xp1vc0\"><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 指令将实例化此<ng-template>为 hero 数组中的每个 <code>heroes</code> 一次，并将为每个实例相应地设置 <code>hero</code> 变量。</ng-template></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2d8n0ahhnt8zcw5lno2ruoba\">实例化 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 时，可以传递多个命名值，这些值可以绑定到不同的模板输入变量。输入变量的 <code>let-</code> 声明的右侧可以指定应该用于该变量的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwdwjks2a2mb7wpktz4sijq22\">例如，<code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 还提供了对数组中每个英雄的 <code>index</code> 的访问：</p>\n<code-example language=\"html\">\n&lt;ul&gt;\n  &lt;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> let-hero let-i=\"index\" [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\"&gt;\n    &lt;li&gt;Hero number {{i}}: {{hero.name}}&lt;/li&gt;\n  &lt;/ng-template&gt;\n&lt;/ul&gt;\n</code-example>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ll381kx5kaawqp659sqtiywr\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lacfdwyuycapdvs7y35hq3rn\"><a href=\"/guide/structural-directives\">编写结构指令</a></p>\n\n  <div class=\"reviewed\">最后复查时间：Thu May 12 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/common/NgFor\n - api/common/NgForOf\n - api/core/ng-template\n - guide/binding-overview\n - guide/example-apps-list\n - guide/forms\n - guide/glossary\n - guide/inputs-outputs\n - guide/template-overview\n - guide/template-statements\n - guide/template-syntax\n - guide/understanding-template-expr-overview\n - guide/user-input\n-->\n<!-- links from this doc:\n - /guide/structural-directives\n - api/common/NgFor\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/TemplateRef\n - api/core/ng-template\n - api/forms/NgForm\n - api/forms/NgModel\n - guide/built-in-directives\n - guide/structural-directives\n - guide/structural-directives#asterisk\n - guide/template-overview\n - guide/template-reference-variables#accessing-in-a-nested-template\n - guide/template-reference-variables#how-angular-assigns-values-to-template-variables\n - guide/template-reference-variables#prerequisites\n - guide/template-reference-variables#syntax\n - guide/template-reference-variables#template-input-variable\n - guide/template-reference-variables#template-variable-scope\n - guide/template-reference-variables#understanding-template-variables\n - guide/template-reference-variables#using-ngform-with-template-variables\n - guide/template-reference-variables#variable-specifying-a-name\n - guide/template-reference-variables#whats-next\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\n - https://developer.mozilla.org/en-US/docs/Web/Web_Components\n-->"}
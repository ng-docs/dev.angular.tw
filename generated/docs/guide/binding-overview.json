{"id":"guide/binding-overview","title":"了解绑定","contents":"<div class=\"content\">\n  <h1 id=\"understanding-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhd34w50xlagdosqlczs2pyf9\">了解绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#understanding-binding\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b9agbkxfrq0mful4y3w9x3a4\">在 Angular 模板中，绑定会在从模板创建的一部分 UI（DOM 元素、指令或组件）与模型（模板所属的组件实例）之间创建实时连接。此连接可用于将视图与模型同步、在视图中发生事件或用户操作时通知模型，或两者兼而有之。Angular 的<a href=\"guide/change-detection\">变更检测</a>算法负责保持视图和模型的同步。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76vexfn8hdlz17cyofz2dlvgz\">绑定的例子包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"m3qbb8t4uh2uppqvi6xvqlb2\">文本插值</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9835d9ra9d5nk1webn6fpqk77\">属性绑定</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bp910usdze7garhcxqe8udodm\">事件绑定</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oqx1d89088zk2s6q67b6c841\">双向绑定</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avuhzdkudb870b8vq1fw6i51l\">绑定始终有两部分：将接收绑定值的<em>目标</em>和从模型生成值的<em>模板表达式</em>。</p>\n<h2 id=\"syntax\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p44mx807exjp3s0k9dwbuxla\">语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#syntax\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cw0kx21a4327aq8dntuz221b5\">模板表达式类似于 JavaScript 表达式。许多 JavaScript 表达式都是合法的模板表达式，但以下例外。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"812ufwsqp34mv5k3nnuor7hh7\">你不能使用那些具有或可能引发副作用的 JavaScript 表达式，包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gbnqy2ufx2p68a6a75yzwiio\">赋值（<code>=</code>, <code>+=</code>, <code>-=</code>, <code>...</code>）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2u08tgl6zuhsgdibjbw60gjrc\">运算符，比如 <code>new</code>、<code>typeof</code> 或 <code>instanceof</code> 等。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2omhmj2gt8fhz1ar54ejmgaca\">链接表达式<code>;</code>或<code>，</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9olwnih7g7qzwgrmmgsarmuso\">自增和自减运算符：<code>++</code> 和 <code>--</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egjzm4gsetscngt7a0apxbkrz\">一些 ES2015+ 版本的运算符</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qccswl3y9mnxon20ey6ojp2y\">和 JavaScript 语法的其它显著差异包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r6vfm22rvtc2ggommuufykhl\">不支持位运算，比如 <code>|</code> 和 <code>&amp;</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erltcnfdizzzwjy04kllka4ub\">新的<a href=\"guide/template-expression-operators\">模板表达式运算符</a>，比如 <code>|</code></li>\n</ul>\n<h2 id=\"expression-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hlg7poy4z2utivz797sb1eid\">表达式上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#expression-context\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75g7shu0oevj3gby9su8emhy7\">插值表达式具有上下文 —— 表达式所属应用中的特定部分。通常，此上下文就是组件实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66q7irjnxs3bbe1zlsc9tjjxw\">在下面的代码片段中，表达式 <code>recommended</code> 和 <code>itemImageUrl2</code> 表达式所引用的都是 <code>AppComponent</code> 中的属性。</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-context\" header=\"src/app/app.component.html\">\n&lt;h4&gt;{{recommended}}&lt;/h4&gt;\n&lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> alt=\"item 2\" [src]=\"itemImageUrl2\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ars2xiw9mjk0v7x84501dviy1\">表达式还可以引用<em>模板</em>上下文中的属性，比如<a href=\"guide/structural-directives#shorthand\">模板输入变量</a>或<a href=\"guide/template-reference-variables\">模板引用变量</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"466388rs0hdjz7w1w2lxjcteq\">下面的例子就使用了模板输入变量 <code>customer</code>。</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-input-variable\" header=\"src/app/app.component.html (template input variable)\">\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\"&gt;{{customer.name}}&lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9catuc89v5f2h3puxmi97x4bp\">接下来的例子使用了模板引用变量 <code>#customerInput</code>。</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-reference-variable\" header=\"src/app/app.component.html (template reference variable)\">\n&lt;label for=\"customer-input\"&gt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a> something:\n  &lt;input id=\"customer-input\" #customerInput&gt;{{customerInput.value}}\n&lt;/label&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuk849v0rn2s48qs9u018dnvd\">模板表达式不能引用全局命名空间中的任何东西，除了 <code>undefined</code>。他们不能引用 <code>window</code> 或 <code>document</code>。此外，它们不能调用 <code>console.log()</code> 或 <code>Math.max()</code>，并且只能引用表达式上下文的成员。</p>\n</div>\n<h3 id=\"preventing-name-collisions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aotu0qo49kque79pf3u5m361b\">防止命名冲突<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#preventing-name-collisions\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vdl1uota92xsx3appnc8fc04\">表达式估算的上下文是模板变量、指令的上下文对象（如果有）和组件成员的并集。如果你引用的名称属于这些命名空间之一，则 Angular 会应用以下优先逻辑来确定上下文：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cc4zi4savzsus9tvymlj5zvsc\">模板变量的名称。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hhk2bnv305q24tt2m2he4o51\">指令上下文中的名称。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rdvy56btc1mu6lu2izodxc57\">组件成员的名称。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej3aiup78un3s2kxpzc38fm8n\">为避免变量遮盖另一个上下文中的变量，请保持变量名称唯一。在以下示例中，<code>AppComponent</code> 模板在问候 <code>customer</code> Padma。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3u0a6he7byq0iwm4sn71sb5x\">然后，一个 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 列出了 <code>customers</code> 数组中的每个 <code>customer</code>。</p>\n<code-example path=\"interpolation/src/app/app.component.1.ts\" region=\"var-collision\" header=\"src/app/app.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  template: `\n    &lt;div&gt;\n      &lt;!-- Hello, Padma --&gt;\n      &lt;h1&gt;Hello, {{customer}}&lt;/h1&gt;\n      &lt;ul&gt;\n        &lt;!-- Ebony and Chiho in a list--&gt;\n        &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\"&gt;{{ customer.value }}&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  `,\n  imports: [<a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>]\n})\nexport class AppComponent {\n  customers = [{value: 'Ebony'}, {value: 'Chiho'}];\n  customer = 'Padma';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4snffny8c2ebvjux525sre5e\">在\n<code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>定义的隐式上下文中，\n<code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>中的\n<code>customer</code>指的是\n<code>customers</code>数组中的每个\n<code>customer</code>，并显示\"Ebony\"和\"Chiho\"。\"Padma\"不会显示，因为该名称不在该数组中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63up7o6tjcqtmdjcgxhtbb6lc\">另一方面，\n<code>&lt;h1&gt;</code>显示的是\"Padma\"，它与组件类中\n<code>customer</code>属性的值绑定。</p>\n<h2 id=\"expression-best-practices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5k8nds3ui2tl872vsn0lx5fxj\">表达式最佳实践<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#expression-best-practices\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1i70qs9i1j0eplg3wome0inov\">使用模板表达式时，请遵循以下最佳实践：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2b3w10d602nwjrd3cosw7kauj\"><strong>使用短表达式</strong></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58t1j3whfh9c0cqz2zjy1tw6g\">尽可能使用属性名称或方法调用。将应用和业务逻辑保留在组件中，这里更便于开发和测试。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f3rfmi9i1zjdmm8apilkb95v\"><strong>快速执行</strong></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8w1ntppuwtyjecapmblu9grh\">Angular 会在每个<a href=\"guide/glossary#change-detection\">变更检测</a>周期之后执行一个模板表达式。许多异步活动会触发变更检测周期，比如 promise 解析、HTTP 结果、计时器事件、按键和鼠标移动。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9v9qsnokmdnmgzqmon3vy9nqq\">表达式应该快速完成，以保持用户体验尽可能高效，在较慢的设备上尤为明显。当计算需要更多资源时，考虑缓存值。</p>\n<h2 id=\"no-visible-side-effects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pv194tfabfbvvfsaj7nupvm5\">没有明显的副作用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#no-visible-side-effects\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnokaicz6cvzq3rt5cnyb6h41\">根据 Angular 的<a href=\"guide/glossary#unidirectional-data-flow\">单向数据流模型</a>，除了目标属性的值之外，模板表达式不应更改任何应用状态。读取组件值不应更改其他显示值。该视图应在整个渲染过程中保持稳定。</p>\n  <div class=\"callout is-important\">\n    <header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dd0bca2hywj6fgsf8gv5af2fm\">用幂等表达式减少副作用</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j7r9ignwruesv83jzzux4x5b\"><a href=\"https://en.wikipedia.org/wiki/Idempotence\">幂等</a>的表达式是最理想的，因为它没有副作用，并且可以提高 Angular 的变更检测性能。用 Angular 术语来说，幂等表达式总会返回<em>完全相同的东西</em>，除非其依赖值之一发生了变化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8iyuyzt17zt5d13ye6s3rayt8\">在单独的一次事件循环中，被依赖的值不应该改变。如果幂等的表达式返回一个字符串或数字，如果连续调用它两次，会返回相同的字符串或数字。如果幂等的表达式返回一个对象（也包括 <code>Array</code>），如果连续调用它两次，会返回同一个对象的<em>引用</em>。</p>\n  </div>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mfyxx87fibqbnu58gbuv5vkk\"><a href=\"guide/property-binding\">属性绑定</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tdxpqx0gzw605pst3e974rgi\"><a href=\"guide/event-binding\">事件绑定</a></li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间：Fri Sep 01 2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgOptimizedImage\n - api/core/Component\n - api/core/Type\n - api/core/ng-template\n - guide/binding-overview#expression-best-practices\n - guide/binding-overview#expression-context\n - guide/binding-overview#no-visible-side-effects\n - guide/binding-overview#preventing-name-collisions\n - guide/binding-overview#syntax\n - guide/binding-overview#understanding-binding\n - guide/binding-overview#whats-next\n - guide/change-detection\n - guide/event-binding\n - guide/glossary#change-detection\n - guide/glossary#unidirectional-data-flow\n - guide/property-binding\n - guide/structural-directives#shorthand\n - guide/template-expression-operators\n - guide/template-reference-variables\n - https://en.wikipedia.org/wiki/Idempotence\n-->"}
{"id":"guide/binding-overview","title":"瞭解繫結","contents":"<div class=\"content\">\n  <h1 id=\"understanding-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhd34w50xlagdosqlczs2pyf9\">瞭解繫結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#understanding-binding\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b9agbkxfrq0mful4y3w9x3a4\">在 Angular 範本中，繫結會在從範本建立的一部分 UI（DOM 元素、指令或元件）與模型（範本所屬的元件實例）之間建立實時連線。此連線可用於將檢視與模型同步、在檢視中發生事件或使用者操作時通知模型，或兩者兼而有之。Angular 的<a href=\"guide/change-detection\">變更檢測</a>演算法負責保持檢視和模型的同步。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76vexfn8hdlz17cyofz2dlvgz\">繫結的例子包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"m3qbb8t4uh2uppqvi6xvqlb2\">文字內嵌</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9835d9ra9d5nk1webn6fpqk77\">屬性繫結</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bp910usdze7garhcxqe8udodm\">事件繫結</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oqx1d89088zk2s6q67b6c841\">雙向繫結</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avuhzdkudb870b8vq1fw6i51l\">繫結始終有兩部分：將接收繫結值的<em>目標</em>和從模型生成值的<em>範本表示式</em>。</p>\n<h2 id=\"syntax\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8p44mx807exjp3s0k9dwbuxla\">語法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#syntax\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cw0kx21a4327aq8dntuz221b5\">範本表示式類似於 JavaScript 表示式。許多 JavaScript 表示式都是合法的範本表示式，但以下例外。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"812ufwsqp34mv5k3nnuor7hh7\">你不能使用那些具有或可能引發副作用的 JavaScript 表示式，包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gbnqy2ufx2p68a6a75yzwiio\">賦值（<code>=</code>, <code>+=</code>, <code>-=</code>, <code>...</code>）</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2u08tgl6zuhsgdibjbw60gjrc\">運算符，比如 <code>new</code>、<code>typeof</code> 或 <code>instanceof</code> 等。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2omhmj2gt8fhz1ar54ejmgaca\">連結表示式<code>;</code>或<code>，</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9olwnih7g7qzwgrmmgsarmuso\">自增和自減運算符：<code>++</code> 和 <code>--</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egjzm4gsetscngt7a0apxbkrz\">一些 ES2015+ 版本的運算符</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qccswl3y9mnxon20ey6ojp2y\">和 JavaScript 語法的其它顯著差異包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r6vfm22rvtc2ggommuufykhl\">不支援位運算，比如 <code>|</code> 和 <code>&amp;</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erltcnfdizzzwjy04kllka4ub\">新的<a href=\"guide/template-expression-operators\">範本表示式運算符</a>，比如 <code>|</code></li>\n</ul>\n<h2 id=\"expression-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hlg7poy4z2utivz797sb1eid\">表示式上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#expression-context\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75g7shu0oevj3gby9su8emhy7\">內嵌表示式具有上下文 —— 表示式所屬應用中的特定部分。通常，此上下文就是元件實例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66q7irjnxs3bbe1zlsc9tjjxw\">在下面的程式碼片段中，表示式 <code>recommended</code> 和 <code>itemImageUrl2</code> 表示式所引用的都是 <code>AppComponent</code> 中的屬性。</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-context\" header=\"src/app/app.component.html\">\n&lt;h4&gt;{{recommended}}&lt;/h4&gt;\n&lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> alt=\"item 2\" [src]=\"itemImageUrl2\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ars2xiw9mjk0v7x84501dviy1\">表示式還可以引用<em>範本</em>上下文中的屬性，比如<a href=\"guide/structural-directives#shorthand\">範本輸入變數</a>或<a href=\"guide/template-reference-variables\">範本引用變數</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"466388rs0hdjz7w1w2lxjcteq\">下面的例子就使用了範本輸入變數 <code>customer</code>。</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-input-variable\" header=\"src/app/app.component.html (template input variable)\">\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\"&gt;{{customer.name}}&lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9catuc89v5f2h3puxmi97x4bp\">接下來的例子使用了範本引用變數 <code>#customerInput</code>。</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-reference-variable\" header=\"src/app/app.component.html (template reference variable)\">\n&lt;label for=\"customer-input\"&gt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a> something:\n  &lt;input id=\"customer-input\" #customerInput&gt;{{customerInput.value}}\n&lt;/label&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuk849v0rn2s48qs9u018dnvd\">範本表示式不能引用全域命名空間中的任何東西，除了 <code>undefined</code>。他們不能引用 <code>window</code> 或 <code>document</code>。此外，它們不能呼叫 <code>console.log()</code> 或 <code>Math.max()</code>，並且只能引用表示式上下文的成員。</p>\n</div>\n<h3 id=\"preventing-name-collisions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aotu0qo49kque79pf3u5m361b\">防止命名衝突<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#preventing-name-collisions\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vdl1uota92xsx3appnc8fc04\">表示式估算的上下文是範本變數、指令的上下文物件（如果有）和元件成員的並集。如果你引用的名稱屬於這些命名空間之一，則 Angular 會應用以下優先邏輯來確定上下文：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cc4zi4savzsus9tvymlj5zvsc\">範本變數的名稱。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hhk2bnv305q24tt2m2he4o51\">指令上下文中的名稱。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rdvy56btc1mu6lu2izodxc57\">元件成員的名稱。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej3aiup78un3s2kxpzc38fm8n\">為避免變數遮蓋另一個上下文中的變數，請保持變數名稱唯一。在以下範例中，<code>AppComponent</code> 範本在問候 <code>customer</code> Padma。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3u0a6he7byq0iwm4sn71sb5x\">然後，一個 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 列出了 <code>customers</code> 陣列中的每個 <code>customer</code>。</p>\n<code-example path=\"interpolation/src/app/app.component.1.ts\" region=\"var-collision\" header=\"src/app/app.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  template: `\n    &lt;div&gt;\n      &lt;!-- Hello, Padma --&gt;\n      &lt;h1&gt;Hello, {{customer}}&lt;/h1&gt;\n      &lt;ul&gt;\n        &lt;!-- Ebony and Chiho in a list--&gt;\n        &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\"&gt;{{ customer.value }}&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  `,\n  imports: [<a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>]\n})\nexport class AppComponent {\n  customers = [{value: 'Ebony'}, {value: 'Chiho'}];\n  customer = 'Padma';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4snffny8c2ebvjux525sre5e\">在\n<code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>定義的隱式上下文中，\n<code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>中的\n<code>customer</code>指的是\n<code>customers</code>陣列中的每個\n<code>customer</code>，並顯示\"Ebony\"和\"Chiho\"。\"Padma\"不會顯示，因為該名稱不在該陣列中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"63up7o6tjcqtmdjcgxhtbb6lc\">另一方面，\n<code>&lt;h1&gt;</code>顯示的是\"Padma\"，它與元件類別中\n<code>customer</code>屬性的值繫結。</p>\n<h2 id=\"expression-best-practices\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5k8nds3ui2tl872vsn0lx5fxj\">表示式最佳實踐<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#expression-best-practices\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1i70qs9i1j0eplg3wome0inov\">使用範本表示式時，請遵循以下最佳實踐：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2b3w10d602nwjrd3cosw7kauj\"><strong>使用短表示式</strong></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58t1j3whfh9c0cqz2zjy1tw6g\">儘可能使用屬性名稱或方法呼叫。將應用和業務邏輯保留在元件中，這裡更便於開發和測試。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f3rfmi9i1zjdmm8apilkb95v\"><strong>快速執行</strong></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8w1ntppuwtyjecapmblu9grh\">Angular 會在每個<a href=\"guide/glossary#change-detection\">變更檢測</a>週期之後執行一個範本表示式。許多非同步活動會觸發變更檢測週期，比如 promise 解析、HTTP 結果、計時器事件、按鍵和滑鼠移動。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9v9qsnokmdnmgzqmon3vy9nqq\">表示式應該快速完成，以保持使用者體驗儘可能高效，在較慢的裝置上尤為明顯。當計算需要更多資源時，考慮快取值。</p>\n<h2 id=\"no-visible-side-effects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pv194tfabfbvvfsaj7nupvm5\">沒有明顯的副作用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#no-visible-side-effects\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnokaicz6cvzq3rt5cnyb6h41\">根據 Angular 的<a href=\"guide/glossary#unidirectional-data-flow\">單向資料流模型</a>，除了目標屬性的值之外，範本表示式不應更改任何應用狀態。讀取元件值不應更改其他顯示值。該檢視應在整個渲染過程中保持穩定。</p>\n  <div class=\"callout is-important\">\n    <header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dd0bca2hywj6fgsf8gv5af2fm\">用冪等表示式減少副作用</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j7r9ignwruesv83jzzux4x5b\"><a href=\"https://en.wikipedia.org/wiki/Idempotence\">冪等</a>的表示式是最理想的，因為它沒有副作用，並且可以提高 Angular 的變更檢測效能。用 Angular 術語來說，冪等表示式總會回傳<em>完全相同的東西</em>，除非其依賴值之一發生了變化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8iyuyzt17zt5d13ye6s3rayt8\">在單獨的一次事件迴圈中，被依賴的值不應該改變。如果冪等的表示式回傳一個字串或數字，如果連續呼叫它兩次，會回傳相同的字串或數字。如果冪等的表示式回傳一個物件（也包括 <code>Array</code>），如果連續呼叫它兩次，會回傳同一個物件的<em>引用</em>。</p>\n  </div>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-overview#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mfyxx87fibqbnu58gbuv5vkk\"><a href=\"guide/property-binding\">屬性繫結</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6tdxpqx0gzw605pst3e974rgi\"><a href=\"guide/event-binding\">事件繫結</a></li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：Fri Sep 01 2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgOptimizedImage\n - api/core/Component\n - api/core/Type\n - api/core/ng-template\n - guide/binding-overview#expression-best-practices\n - guide/binding-overview#expression-context\n - guide/binding-overview#no-visible-side-effects\n - guide/binding-overview#preventing-name-collisions\n - guide/binding-overview#syntax\n - guide/binding-overview#understanding-binding\n - guide/binding-overview#whats-next\n - guide/change-detection\n - guide/event-binding\n - guide/glossary#change-detection\n - guide/glossary#unidirectional-data-flow\n - guide/property-binding\n - guide/structural-directives#shorthand\n - guide/template-expression-operators\n - guide/template-reference-variables\n - https://en.wikipedia.org/wiki/Idempotence\n-->"}
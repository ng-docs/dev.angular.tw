{"id":"guide/component-interaction","title":"元件之間的互動","contents":"<div class=\"content\">\n  <h1 id=\"component-interaction\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arqlquaj6g4ttogb44c6soqz\">元件之間的互動<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#component-interaction\"><i class=\"material-icons\">link</i></a></h1>\n<p><a id=\"top\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7kqmy047s7fyh6eygiisoo3iy\">本文包含了常見的元件通訊場景，也就是讓兩個或多個元件之間共享訊息的方法。</p>\n<p><a id=\"toc\"></a></p>\n<!--\n# Contents\n\n*   [Pass data from parent to child with input binding](guide/component-interaction#parent-to-child)\n*   [Intercept input property changes with a setter](guide/component-interaction#parent-to-child-setter)\n*   [Intercept input property changes with `ngOnChanges()`](guide/component-interaction#parent-to-child-on-changes)\n*   [Parent calls an `@ViewChild()`](guide/component-interaction#parent-to-view-child)\n*   [Parent and children communicate via a service](guide/component-interaction#bidirectional-service)\n-->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1nwq36q7soen69lfz1fiwb6q\"><strong>參閱<live-example name=\"component-interaction\"></live-example></strong>。</p>\n<p><a id=\"parent-to-child\"></a></p>\n<h2 id=\"pass-data-from-parent-to-child-with-input-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ax6epdcrjlh2rifhq4p4hi7vi\">透過輸入型繫結把資料從父元件傳到子元件。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#pass-data-from-parent-to-child-with-input-binding\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"di3l01fve2to8l6iv5axl2j61\"><code>HeroChildComponent</code> 有兩個\n<strong><em>輸入屬性</em></strong>，通常使用 \n<a href=\"guide/inputs-outputs#input\">@Input() 裝飾器</a> 裝飾。</p>\n<code-example header=\"component-interaction/src/app/hero-child.component.ts\" path=\"component-interaction/src/app/hero-child.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-child',\n  template: `\n    &lt;h3&gt;{{hero.name}} says:&lt;/h3&gt;\n    &lt;p&gt;I, {{hero.name}}, am at your service, {{masterName}}.&lt;/p&gt;\n  `\n})\nexport class HeroChildComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero!: Hero;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('master') masterName = '';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axmr0vnu79mah3ugm2ajp9ejg\">第二個 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 為子元件的屬性名 <code>masterName</code> 指定一個別名 <code>master</code>（譯者注：不推薦為起別名，參閱風格指南）.</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jmy293zof8tqrjaokw2n5wy8\">父元件 <code>HeroParentComponent</code> 把子元件的 <code>HeroChildComponent</code> 放到 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 迴圈器中，把自己的 <code>master</code> 字串屬性繫結到子元件的 <code>master</code> 別名上，並把每個迴圈的 <code>hero</code> 實例繫結到子元件的 <code>hero</code> 屬性。</p>\n<code-example header=\"component-interaction/src/app/hero-parent.component.ts\" path=\"component-interaction/src/app/hero-parent.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { HEROES } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-parent',\n  template: `\n    &lt;h2&gt;{{master}} controls {{heroes.length}} heroes&lt;/h2&gt;\n\n    &lt;app-hero-child\n      *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n      [hero]=\"hero\"\n      [master]=\"master\"&gt;\n    &lt;/app-hero-child&gt;\n  `\n})\nexport class HeroParentComponent {\n  heroes = HEROES;\n  master = 'Master';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exxq3hminlei5uzhfcom3tub3\">執行應用程式會顯示三個英雄：</p>\n<div class=\"lightbox\">\n<img alt=\"Parent-to-child\" src=\"generated/images/guide/component-interaction/parent-to-child.png\" width=\"346\" height=\"298\">\n</div>\n<h3 id=\"test-it-for-pass-data-from-parent-to-child-with-input-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zktysz60mlo311h40jxq7dts\">測試它，以瞭解如何藉助輸入繫結將資料從父級傳遞給子級<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-for-pass-data-from-parent-to-child-with-input-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vwo12lk6nc0mh4jounmpwwuz\">端到端測試，用於確保所有的子元件都如預期般初始化並顯示出來：</p>\n<code-example header=\"component-interaction/e2e/src/app.e2e-spec.ts\" path=\"component-interaction/e2e/src/app.e2e-spec.ts\" region=\"parent-to-child\">\n// ...\nconst heroNames = ['Dr. IQ', 'Magneta', 'Bombasto'];\nconst masterName = 'Master';\n\nit('should pass properties to children properly', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  const parent = element(by.tagName('app-hero-parent'));\n  const heroes = parent.all(by.tagName('app-hero-child'));\n\n  for (let i = 0; i &lt; heroNames.length; i++) {\n    const childTitle = await heroes.get(i).element(by.tagName('h3')).getText();\n    const childDetail = await heroes.get(i).element(by.tagName('p')).getText();\n    expect(childTitle).toEqual(heroNames[i] + ' says:');\n    expect(childDetail).toContain(masterName);\n  }\n});\n// ...\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xfw83e0n468q0xs3ron8gvol\"><a href=\"guide/component-interaction#top\">回到頂部</a></p>\n<p><a id=\"parent-to-child-setter\"></a></p>\n<h2 id=\"intercept-input-property-changes-with-a-setter\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fec4jw8wtsghfi8zl8q2mlkz\">透過 setter 截聽輸入屬性值的變化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#intercept-input-property-changes-with-a-setter\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66vum4qsiri3pnk8xijlgcaqq\">使用一個輸入屬性的 setter，以攔截父元件中值的變化，並採取行動。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"emhg6ftg597tzgdh5239vf3bf\">子元件 <code>NameChildComponent</code> 的輸入屬性 <code>name</code> 上的這個 setter，會 trim 掉名字裡的空格，並把空值替換成預設字串。</p>\n<code-example header=\"component-interaction/src/app/name-child.component.ts\" path=\"component-interaction/src/app/name-child.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-name-child',\n  template: '&lt;h3&gt;\"{{name}}\"&lt;/h3&gt;'\n})\nexport class NameChildComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n  get name(): string { return this._name; }\n  set name(name: string) {\n    this._name = (name &amp;&amp; name.trim()) || '&lt;no name set&gt;';\n  }\n  private _name = '';\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bpbkjpreoacehxf91ef4pr3l\">下面的 <code>NameParentComponent</code> 展示了各種名字的處理方式，包括一個全是空格的名字。</p>\n<code-example header=\"component-interaction/src/app/name-parent.component.ts\" path=\"component-interaction/src/app/name-parent.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-name-parent',\n  template: `\n    &lt;h2&gt;Master controls {{names.length}} names&lt;/h2&gt;\n\n    &lt;app-name-child *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let name of names\" [name]=\"name\"&gt;&lt;/app-name-child&gt;\n  `\n})\nexport class NameParentComponent {\n  // Displays 'Dr. IQ', '&lt;no name set&gt;', 'Bombasto'\n  names = ['Dr. IQ', '   ', '  Bombasto  '];\n}\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"Parent-to-child-setter\" src=\"generated/images/guide/component-interaction/setter.png\" width=\"332\" height=\"190\">\n</div>\n<h3 id=\"test-it-for-intercept-input-property-changes-with-a-setter\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctnakmndzx56uzr7p2s14mfls\">測試它，以瞭解如何使用設定器攔截輸入屬性更改<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-for-intercept-input-property-changes-with-a-setter\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lu40g6lf2mlup6mb3v89vyk9\">端到端測試：輸入屬性的 setter，分別使用空名字和非空名字。</p>\n<code-example header=\"component-interaction/e2e/src/app.e2e-spec.ts\" path=\"component-interaction/e2e/src/app.e2e-spec.ts\" region=\"parent-to-child-setter\">\n// ...\nit('should display trimmed, non-empty names', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  const nonEmptyNameIndex = 0;\n  const nonEmptyName = '\"Dr. IQ\"';\n  const parent = element(by.tagName('app-name-parent'));\n  const hero = parent.all(by.tagName('app-name-child')).get(nonEmptyNameIndex);\n\n  const displayName = await hero.element(by.tagName('h3')).getText();\n  expect(displayName).toEqual(nonEmptyName);\n});\n\nit('should replace empty name with default name', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  const emptyNameIndex = 1;\n  const defaultName = '\"&lt;no name set&gt;\"';\n  const parent = element(by.tagName('app-name-parent'));\n  const hero = parent.all(by.tagName('app-name-child')).get(emptyNameIndex);\n\n  const displayName = await hero.element(by.tagName('h3')).getText();\n  expect(displayName).toEqual(defaultName);\n});\n// ...\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xfw83e0n468q0xs3ron8gvol\"><a href=\"guide/component-interaction#top\">回到頂部</a></p>\n<p><a id=\"parent-to-child-on-changes\"></a></p>\n<h2 id=\"intercept-input-property-changes-with-ngonchanges\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dil50z24m0sutry3grrb4zx87\">透過 <code>ngOnChanges()</code> 來截聽輸入屬性值的變化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#intercept-input-property-changes-with-ngonchanges\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21hk54yol7a0po54sdwurgob9\">使用 <code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> 生命週期鉤子介面的 <code>ngOnChanges()</code> 方法來監測輸入屬性值的變化並做出回應。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fll6f6bukl2pkzx4shz2oyzz\">當需要監視多個、互動式輸入屬性的時候，本方法比用屬性的 setter 更合適。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"46238n35l0dj4dr5njqlt2o4u\">學習關於 <code>ngOnChanges()</code> 的更多知識，參閱<a href=\"guide/lifecycle-hooks\">生命週期鉤子</a>一章。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aqmhoyoqtljg1cvviruezod87\">這個 <code>VersionChildComponent</code> 會監測輸入屬性 <code>major</code> 和 <code>minor</code> 的變化，並把這些變化編寫成日誌以報告這些變化。</p>\n<code-example header=\"component-interaction/src/app/version-child.component.ts\" path=\"component-interaction/src/app/version-child.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a>, <a href=\"api/core/SimpleChanges\" class=\"code-anchor\">SimpleChanges</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-version-child',\n  template: `\n    &lt;h3&gt;<a href=\"api/core/Version\" class=\"code-anchor\">Version</a> {{major}}.{{minor}}&lt;/h3&gt;\n    &lt;h4&gt;Change log:&lt;/h4&gt;\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let change of changeLog\"&gt;{{change}}&lt;/li&gt;\n    &lt;/ul&gt;\n  `\n})\nexport class VersionChildComponent implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() major = 0;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() minor = 0;\n  changeLog: string[] = [];\n\n  ngOnChanges(changes: <a href=\"api/core/SimpleChanges\" class=\"code-anchor\">SimpleChanges</a>) {\n    const log: string[] = [];\n    for (const propName in changes) {\n      const changedProp = changes[propName];\n      const to = JSON.stringify(changedProp.currentValue);\n      if (changedProp.isFirstChange()) {\n        log.push(`Initial value of ${propName} set to ${to}`);\n      } else {\n        const from = JSON.stringify(changedProp.previousValue);\n        log.push(`${propName} changed from ${from} to ${to}`);\n      }\n    }\n    this.changeLog.push(log.join(', '));\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3w6t4pihvepx1qnvaa0rjxxio\"><code>VersionParentComponent</code> 提供 <code>minor</code> 和 <code>major</code> 值，把修改它們值的方法繫結到按鈕上。</p>\n<code-example header=\"component-interaction/src/app/version-parent.component.ts\" path=\"component-interaction/src/app/version-parent.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-version-parent',\n  template: `\n    &lt;h2&gt;Source code version&lt;/h2&gt;\n    &lt;button type=\"button\" (click)=\"newMinor()\"&gt;New minor version&lt;/button&gt;\n    &lt;button type=\"button\" (click)=\"newMajor()\"&gt;New major version&lt;/button&gt;\n    &lt;app-version-child [major]=\"major\" [minor]=\"minor\"&gt;&lt;/app-version-child&gt;\n  `\n})\nexport class VersionParentComponent {\n  major = 1;\n  minor = 23;\n\n  newMinor() {\n    this.minor++;\n  }\n\n  newMajor() {\n    this.major++;\n    this.minor = 0;\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3d8kdidawp46fb913ovvbpz4u\">下面是點選按鈕的結果。</p>\n<div class=\"lightbox\">\n<img alt=\"Parent-to-child-onchanges\" src=\"generated/images/guide/component-interaction/parent-to-child-on-changes.gif\" width=\"481\" height=\"264\">\n</div>\n<h3 id=\"test-it-for-intercept-input-property-changes-with-ngonchanges\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99x2gkznum251f0zsehpx5zub\">測試它，以瞭解如何使用 <code>ngOnChanges()</code> 來攔截輸入屬性更改<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-for-intercept-input-property-changes-with-ngonchanges\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2msb85p1ye7gx96zsin70l4g9\">測試確保<strong><em>這兩個</em></strong>輸入屬性值都被初始化了，當點選按鈕後，<code>ngOnChanges</code> 應該被呼叫，屬性的值也符合預期。</p>\n<code-example header=\"component-interaction/e2e/src/app.e2e-spec.ts\" path=\"component-interaction/e2e/src/app.e2e-spec.ts\" region=\"parent-to-child-onchanges\">\n// ...\n// Test must all execute in this exact order\nit('should set expected initial values', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  const actual = await getActual();\n\n  const initialLabel = '<a href=\"api/core/Version\" class=\"code-anchor\">Version</a> 1.23';\n  const initialLog = 'Initial value of major set to 1, Initial value of minor set to 23';\n\n  expect(actual.label).toBe(initialLabel);\n  expect(actual.count).toBe(1);\n  expect(await actual.logs.get(0).getText()).toBe(initialLog);\n});\n\nit(\"should set expected values after clicking 'Minor' twice\", <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  const repoTag = element(by.tagName('app-version-parent'));\n  const newMinorButton = repoTag.all(by.tagName('button')).get(0);\n\n  await newMinorButton.click();\n  await newMinorButton.click();\n\n  const actual = await getActual();\n\n  const labelAfter2Minor = '<a href=\"api/core/Version\" class=\"code-anchor\">Version</a> 1.25';\n  const logAfter2Minor = 'minor changed from 24 to 25';\n\n  expect(actual.label).toBe(labelAfter2Minor);\n  expect(actual.count).toBe(3);\n  expect(await actual.logs.get(2).getText()).toBe(logAfter2Minor);\n});\n\nit(\"should set expected values after clicking 'Major' once\", <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  const repoTag = element(by.tagName('app-version-parent'));\n  const newMajorButton = repoTag.all(by.tagName('button')).get(1);\n\n  await newMajorButton.click();\n  const actual = await getActual();\n\n  const labelAfterMajor = '<a href=\"api/core/Version\" class=\"code-anchor\">Version</a> 2.0';\n  const logAfterMajor = 'major changed from 1 to 2, minor changed from 23 to 0';\n\n  expect(actual.label).toBe(labelAfterMajor);\n  expect(actual.count).toBe(2);\n  expect(await actual.logs.get(1).getText()).toBe(logAfterMajor);\n});\n\n<a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> function getActual() {\n  const versionTag = element(by.tagName('app-version-child'));\n  const label = await versionTag.element(by.tagName('h3')).getText();\n  const ul = versionTag.element((by.tagName('ul')));\n  const logs = ul.all(by.tagName('li'));\n\n  return {\n    label,\n    logs,\n    count: await logs.count(),\n  };\n}\n// ...\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xfw83e0n468q0xs3ron8gvol\"><a href=\"guide/component-interaction#top\">回到頂部</a></p>\n<p><a id=\"child-to-parent\"></a></p>\n<h2 id=\"parent-listens-for-child-event\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ivp0xaegmuozitolyhnwghjo\">父元件監聽子元件的事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#parent-listens-for-child-event\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a64grh8f4y44eyuurf2p8nzar\">子元件暴露一個 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 屬性，當事件發生時，子元件利用該屬性 <code>emits</code> （發出）事件。父元件繫結到這個事件屬性，並在事件發生時作出回應。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"em92rgw5ifzxwa2giv1ea44hk\">子元件的 \n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 屬性是一個\n<strong><em>輸出屬性</em></strong>，通常使用 \n<a href=\"guide/inputs-outputs#output\">@Output() 裝飾器</a> 裝飾，就像在這個 \n<code>VoterComponent</code> 中所見：</p>\n<code-example header=\"component-interaction/src/app/voter.component.ts\" path=\"component-interaction/src/app/voter.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-voter',\n  template: `\n    &lt;h4&gt;{{name}}&lt;/h4&gt;\n    &lt;button type=\"button\" (click)=\"vote(true)\"  [disabled]=\"didVote\"&gt;Agree&lt;/button&gt;\n    &lt;button type=\"button\" (click)=\"vote(false)\" [disabled]=\"didVote\"&gt;Disagree&lt;/button&gt;\n  `\n})\nexport class VoterComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()  name = '';\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() voted = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;boolean&gt;();\n  didVote = false;\n\n  vote(agreed: boolean) {\n    this.voted.emit(agreed);\n    this.didVote = true;\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5isjq5pafxbo34tuypyigkjs\">點選按鈕會觸發 <code>true</code> 或 <code>false</code>（布林型<em>有效載荷</em>）的事件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aeatvoelo74fpnv9kc0pil85u\">父元件 <code>VoteTakerComponent</code> 繫結了一個事件處理器（<code>onVoted()</code>），用來回應子元件的事件（<code>$event</code>）並更新一個計數器。</p>\n<code-example header=\"component-interaction/src/app/votetaker.component.ts\" path=\"component-interaction/src/app/votetaker.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-vote-taker',\n  template: `\n    &lt;h2&gt;Should mankind colonize the Universe?&lt;/h2&gt;\n    &lt;h3&gt;Agree: {{agreed}}, Disagree: {{disagreed}}&lt;/h3&gt;\n\n    &lt;app-voter\n      *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let voter of voters\"\n      [name]=\"voter\"\n      (voted)=\"onVoted($event)\"&gt;\n    &lt;/app-voter&gt;\n  `\n})\nexport class VoteTakerComponent {\n  agreed = 0;\n  disagreed = 0;\n  voters = ['Dr. IQ', 'Celeritas', 'Bombasto'];\n\n  onVoted(agreed: boolean) {\n    if (agreed) {\n      this.agreed++;\n    } else {\n      this.disagreed++;\n    }\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3en3372thad4c2ax8r44jd7hj\">本框架把事件引數（用 <code>$event</code> 表示）傳給事件處理方法，該方法會處理它：</p>\n<div class=\"lightbox\">\n<img alt=\"Child-to-parent\" src=\"generated/images/guide/component-interaction/child-to-parent.gif\" width=\"476\" height=\"524\">\n</div>\n<h3 id=\"test-it-for-parent-listens-for-child-event\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5c99e4jc7m4xu1nm4i7qzkhry\">測試它，以瞭解如何用父級監聽子級的事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-for-parent-listens-for-child-event\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39hc44nk3uk3k48ypk105ja60\">測試確保點選 <em>Agree</em> 和 <em>Disagree</em> 按鈕時，計數器被正確更新。</p>\n<code-example header=\"component-interaction/e2e/src/app.e2e-spec.ts\" path=\"component-interaction/e2e/src/app.e2e-spec.ts\" region=\"child-to-parent\">\n// ...\nit('should not emit the event initially', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  const voteLabel = element(by.tagName('app-vote-taker')).element(by.tagName('h3'));\n  expect(await voteLabel.getText()).toBe('Agree: 0, Disagree: 0');\n});\n\nit('should process Agree vote', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  const voteLabel = element(by.tagName('app-vote-taker')).element(by.tagName('h3'));\n  const agreeButton1 = element.all(by.tagName('app-voter')).get(0)\n    .all(by.tagName('button')).get(0);\n\n  await agreeButton1.click();\n\n  expect(await voteLabel.getText()).toBe('Agree: 1, Disagree: 0');\n});\n\nit('should process Disagree vote', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  const voteLabel = element(by.tagName('app-vote-taker')).element(by.tagName('h3'));\n  const agreeButton1 = element.all(by.tagName('app-voter')).get(1)\n    .all(by.tagName('button')).get(1);\n\n  await agreeButton1.click();\n\n  expect(await voteLabel.getText()).toBe('Agree: 0, Disagree: 1');\n});\n// ...\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xfw83e0n468q0xs3ron8gvol\"><a href=\"guide/component-interaction#top\">回到頂部</a></p>\n<h2 id=\"parent-interacts-with-child-using-local-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2284r5dv02ah5f0cnl1lqnsxr\">父元件與子元件透過<em>本地變數</em>互動<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#parent-interacts-with-child-using-local-variable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhbsylfmmh5qs9do8pt4y76qy\">父元件不能使用資料繫結來讀取子元件的屬性或呼叫子元件的方法。但可以在父元件範本裡，新建一個本地變數來代表子元件，然後利用這個變數來讀取子元件的屬性和呼叫子元件的方法，如下例所示。</p>\n<p><a id=\"countdown-timer-example\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rp0tpulr6s00rvlgxrbac884\">子元件 <code>CountdownTimerComponent</code> 進行倒計時，歸零時發射一個導彈。<code>start</code> 和 <code>stop</code> 方法負責控制時鐘並在範本裡顯示倒計時的狀態訊息。</p>\n<code-example header=\"component-interaction/src/app/countdown-timer.component.ts\" path=\"component-interaction/src/app/countdown-timer.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-countdown-timer',\n  template: '&lt;p&gt;{{message}}&lt;/p&gt;'\n})\nexport class CountdownTimerComponent implements <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n  message = '';\n  seconds = 11;\n\n  ngOnDestroy() { this.clearTimer?.(); }\n\n  start() { this.countDown(); }\n  stop()  {\n    this.clearTimer?.();\n    this.message = `Holding at T-${this.seconds} seconds`;\n  }\n\n  private clearTimer: VoidFunction | undefined;\n\n  private countDown() {\n    this.clearTimer?.();\n    const interval = setInterval(() =&gt; {\n      this.seconds -= 1;\n      if (this.seconds === 0) {\n        this.message = 'Blast off!';\n      } else {\n        if (this.seconds &lt; 0) { this.seconds = 10; } // reset\n        this.message = `T-${this.seconds} seconds and counting`;\n      }\n    }, 1000);\n    this.clearTimer = () =&gt; clearInterval(interval);\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95kbbmyons8mpalz5crkl55s9\">計時器元件的宿主元件 <code>CountdownLocalVarParentComponent</code> 如下：</p>\n<code-example header=\"component-interaction/src/app/countdown-parent.component.ts\" path=\"component-interaction/src/app/countdown-parent.component.ts\" region=\"lv\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { CountdownTimerComponent } from './countdown-timer.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-countdown-parent-lv',\n  template: `\n    &lt;h3&gt;Countdown to Liftoff (via local variable)&lt;/h3&gt;\n    &lt;button type=\"button\" (click)=\"timer.start()\"&gt;Start&lt;/button&gt;\n    &lt;button type=\"button\" (click)=\"timer.stop()\"&gt;Stop&lt;/button&gt;\n    &lt;div class=\"seconds\"&gt;{{timer.seconds}}&lt;/div&gt;\n    &lt;app-countdown-timer #timer&gt;&lt;/app-countdown-timer&gt;\n  `,\n  styleUrls: ['../assets/demo.css']\n})\nexport class CountdownLocalVarParentComponent { }\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blfuzbndo37opkzwd1zkcdl8h\">父元件不能透過資料繫結使用子元件的 <code>start</code> 和 <code>stop</code> 方法，也不能訪問子元件的 <code>seconds</code> 屬性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1y45ftpo6mu4kfczgyw0y8g14\">把本地變數 <code>#timer</code> 放到 <code>&lt;app-countdown-timer&gt;</code> 標籤中，用來代表子元件。這樣父元件的範本就得到了子元件的引用，於是可以在父元件的範本中訪問子元件的所有屬性和方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"304cjaklehddj3sxhnvr5rsjt\">這個例子把父元件的按鈕繫結到子元件的 <code>start</code> 和 <code>stop</code> 方法，並用內嵌來顯示子元件的 <code>seconds</code> 屬性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ah71g01kvl4lb1ormm4aa44dj\">下面是父元件和子元件一起工作時的效果。</p>\n<div class=\"lightbox\">\n<img alt=\"countdown timer\" src=\"generated/images/guide/component-interaction/countdown-timer-anim.gif\" width=\"212\" height=\"172\">\n</div>\n<p><a id=\"countdown-tests\"></a></p>\n<h3 id=\"test-it-for-parent-interacts-with-child-using-local-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9akauqty5oulw52o3du706if8\">測試它，以瞭解父級如何使用<em>區域性變數</em>與其子級互動<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-for-parent-interacts-with-child-using-local-variable\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e98lgf6i5v5o6xo8di8xvl1jt\">測試確保在父元件範本中顯示的秒數和子元件狀態訊息裡的秒數同步。它還會點選 <em>Stop</em> 按鈕來停止倒計時：</p>\n<code-example header=\"component-interaction/e2e/src/app.e2e-spec.ts\" path=\"component-interaction/e2e/src/app.e2e-spec.ts\" region=\"countdown-timer-tests\">\n// ...\n// The tests <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> periodic asynchronous operations (via `setInterval()`), which will prevent\n// the app from stabilizing. See https://angular.io/api/core/<a href=\"api/core/ApplicationRef\" class=\"code-anchor\">ApplicationRef</a>#is-stable-examples\n// for more details.\n// To allow the tests to complete, we will disable automatically waiting for the Angular app to\n// stabilize.\nbeforeEach(() =&gt; browser.waitForAngularEnabled(false));\nafterEach(() =&gt; browser.waitForAngularEnabled(true));\n\nit('timer and parent seconds should match', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  const parent = element(by.tagName(parentTag));\n  const startButton = parent.element(by.buttonText('Start'));\n  const seconds = parent.element(by.className('seconds'));\n  const timer = parent.element(by.tagName('app-countdown-timer'));\n\n  await startButton.click();\n\n  // Wait for `&lt;app-countdown-timer&gt;` to be populated with any text.\n  await browser.wait(() =&gt; timer.getText(), 2000);\n\n  expect(await timer.getText()).toContain(await seconds.getText());\n});\n\nit('should stop the countdown', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  const parent = element(by.tagName(parentTag));\n  const startButton = parent.element(by.buttonText('Start'));\n  const stopButton = parent.element(by.buttonText('Stop'));\n  const timer = parent.element(by.tagName('app-countdown-timer'));\n\n  await startButton.click();\n  expect(await timer.getText()).not.toContain('Holding');\n\n  await stopButton.click();\n  expect(await timer.getText()).toContain('Holding');\n});\n// ...\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xfw83e0n468q0xs3ron8gvol\"><a href=\"guide/component-interaction#top\">回到頂部</a></p>\n<p><a id=\"parent-to-view-child\"></a></p>\n<h2 id=\"parent-calls-an-viewchild\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"amjhvksgwpbrg7yqu0c8afyyj\">父級呼叫 <code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#parent-calls-an-viewchild\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ch931hp1h30yqal0qtse4msgr\">這個<em>本地變數</em>方法是個簡單明瞭的方法。但是它也有侷限性，因為父元件-子元件的連線必須全部在父元件的範本中進行。父元件本身的程式碼對子元件沒有訪問權。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"554borcxs7ibg3sx61ftxy3rf\">如果父元件的<em>類別</em>需要依賴於子元件類別，就不能使用<em>本地變數</em>方法。元件之間的父子關係 元件的父子關係不能透過在每個元件的<em>類別</em>中各自定義<em>本地變數</em>來建立。這是因為這兩個<em>類別</em>的實例互相不知道，因此父<em>類別</em>也就不能訪問子<em>類別</em>中的屬性和方法。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8q1x3neh9755cd5gfqgzwvwmv\">當父元件<em>類別</em>需要這種訪問時，可以把子元件作為 <em>ViewChild</em>，<strong><em>注入</em></strong>到父元件裡面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ob94e0o2yac5q1t3rfynf81c\">下面的例子用與<a href=\"guide/component-interaction#countdown-timer-example\">倒計時</a>相同的範例來解釋這種技術。它的外觀或行為沒有變化。子元件<a href=\"guide/component-interaction#countdown-timer-example\">CountdownTimerComponent</a>也和原來一樣。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8goj20rau5ro647o97948zph\">由<em>本地變數</em>切換到 <em>ViewChild</em> 技術的唯一目的就是做示範。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"409i49crqq7s7h2p27autkmss\">下面是父元件 <code>CountdownViewChildParentComponent</code>:</p>\n<code-example header=\"component-interaction/src/app/countdown-parent.component.ts\" path=\"component-interaction/src/app/countdown-parent.component.ts\" region=\"vc\">\nimport { <a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a>, <a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a> } from '@angular/core';\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { CountdownTimerComponent } from './countdown-timer.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-countdown-parent-vc',\n  template: `\n    &lt;h3&gt;Countdown to Liftoff (via <a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>)&lt;/h3&gt;\n    &lt;button type=\"button\" (click)=\"start()\"&gt;Start&lt;/button&gt;\n    &lt;button type=\"button\" (click)=\"stop()\"&gt;Stop&lt;/button&gt;\n    &lt;div class=\"seconds\"&gt;{{ seconds() }}&lt;/div&gt;\n    &lt;app-countdown-timer&gt;&lt;/app-countdown-timer&gt;\n  `,\n  styleUrls: ['../assets/demo.css']\n})\nexport class CountdownViewChildParentComponent implements <a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a> {\n\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(CountdownTimerComponent)\n  private timerComponent!: CountdownTimerComponent;\n\n  seconds() { return 0; }\n\n  ngAfterViewInit() {\n    // Redefine `seconds()` to get from the `CountdownTimerComponent.seconds` ...\n    // but wait a <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a> first to avoid one-time devMode\n    // unidirectional-data-flow-violation error\n    setTimeout(() =&gt; this.seconds = () =&gt; this.timerComponent.seconds, 0);\n  }\n\n  start() { this.timerComponent.start(); }\n  stop() { this.timerComponent.stop(); }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9x0gd3zyqvkihopjjnuvv4ltp\">把子元件的檢視插入到父元件類別需要做一點額外的工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aq79m6u55mkh5kmvqxj5o3zur\">首先，你必須匯入對裝飾器 <code><a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a></code> 以及生命週期鉤子 <code><a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a></code> 的引用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsm3x8nme50fcsexmcnu4g6ln\">接著，透過 <code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a></code> 屬性裝飾器，將子元件 <code>CountdownTimerComponent</code> 注入到私有屬性 <code>timerComponent</code> 裡面。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mf1vj61bc7kjld380z8d4dm1\">元件元資料裡就不再需要 <code>#timer</code> 本地變數了。而是把按鈕繫結到父元件自己的 <code>start</code> 和 <code>stop</code> 方法，使用父元件的 <code>seconds</code> 方法的內嵌來展示秒數變化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4pd07nc3r174depav4ax4mho\">這些方法可以直接訪問被注入的計時器元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"btah6uv1frokf2wlhvcovhwp2\"><code>ngAfterViewInit()</code> 生命週期鉤子是非常重要的一步。被注入的計時器元件只有在 Angular 顯示了父元件檢視之後才能訪問，所以它先把秒數顯示為 0。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"biibygeakh2j5fweckqnlzxdd\">然後 Angular 會呼叫 <code>ngAfterViewInit</code> 生命週期鉤子，但這時候再更新父元件檢視的倒計時就已經太晚了。Angular 的單向資料流規則會阻止在同一個週期內更新父元件檢視。應用在顯示秒數之前會被迫<em>再等一輪</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjkffa682gqzhx1gfb84v4x26\">使用 <code>setTimeout()</code> 來等下一輪，然後改寫 <code>seconds()</code> 方法，這樣它接下來就會從注入的這個計時器元件裡獲取秒數的值。</p>\n<h3 id=\"test-it-for-parent-calls-an-viewchild\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lnq5za5gntc6x6frt2c3ot13\">測試它，以瞭解父級如何呼叫 <code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-for-parent-calls-an-viewchild\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"595hijzla738d683vx1pfttcp\">使用和之前<a href=\"guide/component-interaction#countdown-tests\">一樣的倒計時測試</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xfw83e0n468q0xs3ron8gvol\"><a href=\"guide/component-interaction#top\">回到頂部</a></p>\n<p><a id=\"bidirectional-service\"></a></p>\n<h2 id=\"parent-and-children-communicate-using-a-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32lbvyqzyvlcwfszn9osy7de8\">父元件和子元件透過服務來通訊<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#parent-and-children-communicate-using-a-service\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bc9750v6ye3svuhsw4nh1a3j\">父元件和它的子元件共享同一個服務，利用該服務<em>在元件家族內部</em>實現雙向通訊。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fdubmooebuf2n9awntqp5c43\">該服務實例的作用域被限制在父元件和其子元件內。這個元件子樹之外的元件將無法訪問該服務或者與它們通訊。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c69b6dhtqo8k4e2axoss257dg\">這個 <code>MissionService</code> 把 <code>MissionControlComponent</code> 和多個 <code>AstronautComponent</code> 子元件連線起來。</p>\n<code-example header=\"component-interaction/src/app/mission.service.ts\" path=\"component-interaction/src/app/mission.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class MissionService {\n\n  // Observable string sources\n  private missionAnnouncedSource = new Subject&lt;string&gt;();\n  private missionConfirmedSource = new Subject&lt;string&gt;();\n\n  // Observable string streams\n  missionAnnounced$ = this.missionAnnouncedSource.asObservable();\n  missionConfirmed$ = this.missionConfirmedSource.asObservable();\n\n  // Service message commands\n  announceMission(mission: string) {\n    this.missionAnnouncedSource.next(mission);\n  }\n\n  confirmMission(astronaut: string) {\n    this.missionConfirmedSource.next(astronaut);\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rqpmumoch1jm2q8so9kdmft7\"><code>MissionControlComponent</code> 提供服務的實例，並將其共享給它的子元件（透過 <code>providers</code> 元資料陣列），子元件可以透過建構式函式將該實例注入到自身。</p>\n<code-example header=\"component-interaction/src/app/missioncontrol.component.ts\" path=\"component-interaction/src/app/missioncontrol.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { MissionService } from './mission.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-mission-control',\n  template: `\n    &lt;h2&gt;Mission Control&lt;/h2&gt;\n    &lt;button type=\"button\" (click)=\"announce()\"&gt;Announce mission&lt;/button&gt;\n\n    &lt;app-astronaut\n      *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let astronaut of astronauts\"\n      [astronaut]=\"astronaut\"&gt;\n    &lt;/app-astronaut&gt;\n\n    &lt;h3&gt;History&lt;/h3&gt;\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let event of history\"&gt;{{event}}&lt;/li&gt;\n    &lt;/ul&gt;\n  `,\n  providers: [MissionService]\n})\nexport class MissionControlComponent {\n  astronauts = ['Lovell', 'Swigert', 'Haise'];\n  history: string[] = [];\n  missions = ['Fly to the moon!',\n              'Fly to mars!',\n              'Fly to Vegas!'];\n  nextMission = 0;\n\n  constructor(private missionService: MissionService) {\n    missionService.missionConfirmed$.subscribe(\n      astronaut =&gt; {\n        this.history.push(`${astronaut} confirmed the mission`);\n      });\n  }\n\n  announce() {\n    const mission = this.missions[this.nextMission++];\n    this.missionService.announceMission(mission);\n    this.history.push(`Mission \"${mission}\" announced`);\n    if (this.nextMission &gt;= this.missions.length) { this.nextMission = 0; }\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52rdmeqh0zxyzrcvlt7jdsydx\"><code>AstronautComponent</code> 也透過自己的建構式函式注入該服務。由於每個 <code>AstronautComponent</code> 都是 <code>MissionControlComponent</code> 的子元件，所以它們獲取到的也是父元件的這個服務實例。</p>\n<code-example header=\"component-interaction/src/app/astronaut.component.ts\" path=\"component-interaction/src/app/astronaut.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> } from '@angular/core';\n\nimport { MissionService } from './mission.service';\nimport { Subscription } from 'rxjs';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-astronaut',\n  template: `\n    &lt;p&gt;\n      {{astronaut}}: &lt;strong&gt;{{mission}}&lt;/strong&gt;\n      &lt;button\n        type=\"button\"\n        (click)=\"confirm()\"\n        [disabled]=\"!announced || confirmed\"&gt;\n        Confirm\n      &lt;/button&gt;\n    &lt;/p&gt;\n  `\n})\nexport class AstronautComponent implements <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() astronaut = '';\n  mission = '&lt;no mission announced&gt;';\n  confirmed = false;\n  announced = false;\n  subscription: Subscription;\n\n  constructor(private missionService: MissionService) {\n    this.subscription = missionService.missionAnnounced$.subscribe(\n      mission =&gt; {\n        this.mission = mission;\n        this.announced = true;\n        this.confirmed = false;\n    });\n  }\n\n  confirm() {\n    this.confirmed = true;\n    this.missionService.confirmMission(this.astronaut);\n  }\n\n  ngOnDestroy() {\n    // prevent memory leak when component destroyed\n    this.subscription.unsubscribe();\n  }\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5es51j6d2fv2cyc8w4naazkve\">注意，這個例子儲存了 <code>subscription</code> 變數，並在 <code>AstronautComponent</code> 被銷燬時調用 <code>unsubscribe()</code> 退訂。這是一個用於防止記憶體洩漏的保護措施。實際上，在這個應用程式中並沒有這個風險，因為 <code>AstronautComponent</code> 的生命期和應用程式的生命期一樣長。但在更復雜的應用程式環境中就不一定了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"873ajq37yvdc2hz581espjqcn\">不需要在 <code>MissionControlComponent</code> 中新增這個保護措施，因為它作為父元件，控制著 <code>MissionService</code> 的生命期。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"916asv72jatypzzbm9e3pruyr\"><em>History</em> 日誌證明了：在父元件 <code>MissionControlComponent</code> 和子元件 <code>AstronautComponent</code> 之間，訊息透過該服務實現了雙向傳遞。</p>\n<div class=\"lightbox\">\n<img alt=\"bidirectional-service\" src=\"generated/images/guide/component-interaction/bidirectional-service.gif\" width=\"310\" height=\"346\">\n</div>\n<h3 id=\"test-it-for-parent-and-children-communicate-using-a-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9iz6fc1oj8884x17oq6wwp9sk\">測試它，以瞭解父級和子級如何使用服務進行通訊<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-interaction#test-it-for-parent-and-children-communicate-using-a-service\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vlz6rwrnl10agkdsqeameb2e\">測試確保點選父元件 <code>MissionControlComponent</code> 和子元件 <code>AstronautComponent</code> 兩個的元件的按鈕時，<em>History</em> 日誌和預期的一樣。</p>\n<code-example header=\"component-interaction/e2e/src/app.e2e-spec.ts\" path=\"component-interaction/e2e/src/app.e2e-spec.ts\" region=\"bidirectional-service\">\n// ...\nit('should announce a mission', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  const missionControl = element(by.tagName('app-mission-control'));\n  const announceButton = missionControl.all(by.tagName('button')).get(0);\n  const history = missionControl.all(by.tagName('li'));\n\n  await announceButton.click();\n\n  expect(await history.count()).toBe(1);\n  expect(await history.get(0).getText()).toMatch(/Mission.* announced/);\n});\n\nit('should confirm the mission by Lovell', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  await testConfirmMission(1, 'Lovell');\n});\n\nit('should confirm the mission by Haise', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  await testConfirmMission(3, 'Haise');\n});\n\nit('should confirm the mission by Swigert', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  await testConfirmMission(2, 'Swigert');\n});\n\n<a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> function testConfirmMission(buttonIndex: number, astronaut: string) {\n  const missionControl = element(by.tagName('app-mission-control'));\n  const announceButton = missionControl.all(by.tagName('button')).get(0);\n  const confirmButton = missionControl.all(by.tagName('button')).get(buttonIndex);\n  const history = missionControl.all(by.tagName('li'));\n\n  await announceButton.click();\n  await confirmButton.click();\n\n  expect(await history.count()).toBe(2);\n  expect(await history.get(1).getText()).toBe(`${astronaut} confirmed the mission`);\n}\n// ...\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xfw83e0n468q0xs3ron8gvol\"><a href=\"guide/component-interaction#top\">回到頂部</a></p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - start\n-->\n<!-- links from this doc:\n - api/animations/trigger\n - api/common/NgFor\n - api/core/AfterViewInit\n - api/core/ApplicationRef\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Injectable\n - api/core/Input\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/Output\n - api/core/SimpleChanges\n - api/core/Version\n - api/core/ViewChild\n - api/core/testing/tick\n - api/platform-browser/animations/async\n - guide/component-interaction#component-interaction\n - guide/component-interaction#countdown-tests\n - guide/component-interaction#countdown-timer-example\n - guide/component-interaction#intercept-input-property-changes-with-a-setter\n - guide/component-interaction#intercept-input-property-changes-with-ngonchanges\n - guide/component-interaction#parent-and-children-communicate-using-a-service\n - guide/component-interaction#parent-calls-an-viewchild\n - guide/component-interaction#parent-interacts-with-child-using-local-variable\n - guide/component-interaction#parent-listens-for-child-event\n - guide/component-interaction#pass-data-from-parent-to-child-with-input-binding\n - guide/component-interaction#test-it-for-intercept-input-property-changes-with-a-setter\n - guide/component-interaction#test-it-for-intercept-input-property-changes-with-ngonchanges\n - guide/component-interaction#test-it-for-parent-and-children-communicate-using-a-service\n - guide/component-interaction#test-it-for-parent-calls-an-viewchild\n - guide/component-interaction#test-it-for-parent-interacts-with-child-using-local-variable\n - guide/component-interaction#test-it-for-parent-listens-for-child-event\n - guide/component-interaction#test-it-for-pass-data-from-parent-to-child-with-input-binding\n - guide/component-interaction#top\n - guide/inputs-outputs#input\n - guide/inputs-outputs#output\n - guide/lifecycle-hooks\n-->"}
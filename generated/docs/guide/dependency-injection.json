{"id":"guide/dependency-injection","title":"理解依賴注入","contents":"<div class=\"content\">\n  <h1 id=\"understanding-dependency-injection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6yvsg1jhbulx35x6m8zucrwf0\">理解依賴注入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#understanding-dependency-injection\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axdoai4yb0lomm2eevnafzntj\">依賴注入（DI）是 Angular 中的基本概念之一。DI 被裝配進 Angular 框架，並允許帶有 Angular 裝飾器的類別（例如元件、指令、通道和可注入物件）設定它們所需的依賴項。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dz4vffz5pmjgzb6ktye9v85vo\">DI 系統中存在兩個主要角色：依賴使用者和依賴提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hqpqt21vhcsg872zr0grrva0\">Angular 使用一種稱為 <a href=\"guide/glossary#injector\">Injector</a> 的抽象來促進依賴消費者和依賴提供者之間的互動。當有人請求依賴項時，注入器會檢查其登錄檔以檢視那裡是否已有可用的實例。如果沒有，就會建立一個新實例並將其儲存在登錄檔中。Angular 會在應用的引導過程中建立一個應用範圍的注入器（也稱為『根』注入器），並會根據需要建立任何其它注入器。在大多數情況下，你都不需要手動建立注入器，但應該知道有這樣一個連線提供者和消費者的層次。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8pbl1s6to4yxny21rw8w8t5c\">本主題介紹了某個類別如何作為依賴項的基本場景。Angular 還允許你使用函式、物件、基本型別（例如字串或 Boolean）或任何其他型別作為依賴項。有關更多訊息，請參閱<a href=\"guide/dependency-injection-providers\">依賴提供者</a>。</p>\n<h2 id=\"providing-dependency\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"10r9bra9bzm51s8ozb975w36c\">提供依賴項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#providing-dependency\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elywm7y2fi2beh0abm743q3j2\">假設有一個名為 HeroService 的類別需要用作元件中的依賴項。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wzm3joui6fhkhyxpx0ys806a\">第一步是新增@Injectable裝飾器，以顯示該類別可以被注入。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass HeroService {}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akjkt5oondazcbue47q0wcqj\">下一步是提供它，以便讓其在 DI 中可用。可以在多種地方提供依賴項：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32ved4pwnyozivmqr65dqfvsy\">在元件級別，使用 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器的 <code>providers</code> 欄位。在這種情況下，<code>HeroService</code> 將可用於此元件的所有實例以及它的範本中使用的其他元件和指令。例如：</li>\n</ul>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'hero-list',\n  template: '...',\n  providers: [HeroService]\n})\nclass HeroListComponent {}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkvq95hir8daqe6pnzudkd34o\">當你在元件級別註冊提供者時，該組件的每個新實例都會獲得一個新的服務實例。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74ssajzjiawi3qnbvl9q9rr17\">使用傳遞給bootstrapApplication函式的ApplicationConfig物件的providers欄位，在應用程式級別提供服務或其他@Injectable。在這種情況下，HeroService對在此NgModule中宣告的所有元件、指令和通道，以及在此NgModule內或適用於此NgModule的其他NgModule中宣告的所有元件、指令和通道都是可用的。當在ApplicationConfig中註冊提供者時，同一個服務實例對所有適用的元件、指令和通道都可用。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6m1xhs7zz8hue8hjpi5ad8xkd\">對於基於NgModule的應用程式，請使用NgModule裝飾器的providers欄位來提供在應用程式級別可用的服務或其他@Injectable。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cc47yybljra777r7gglyfuob1\">要了解所有邊緣情況，請參閱Hierarchical injectors。例如:</p>\n<code-example language=\"typescript\">\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n    providers: [\n      { provide: HeroService },\n    ]\n};\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2elh794bm50fyqlelcz3kuhl\">然後，在main.ts中： \n<code-example language=\"typescript\">\n  bootstrapApplication(AppComponent, appConfig) \n</code-example></p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"620711hhvuwbi9bnlm498uenv\">在應用程式根級別，允許將其注入應用程式中的其他類別。這可以透過將 <code>providedIn: 'root'</code> 欄位新增到 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 裝飾器來實現：</li>\n</ul>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nclass HeroService {}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9enfsdeuz7jhnfftn0so1m2f\">當你在根級別提供服務時，Angular 會建立一個 <code>HeroService</code> 的共享實例，並將其注入到任何需要它的類別中。在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元資料中註冊提供者還允許 Angular 透過從已編譯的應用程式中刪除沒用到的服務來最佳化應用程式，這個過程稱為搖樹最佳化（tree-shaking）。</p>\n<h2 id=\"injecting-a-dependency\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1eqo54x3gcjzt98z0yv5fnrge\">注入依賴項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#injecting-a-dependency\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gu8tb6h3onxb9106ao5akw9b\">注入依賴項的最常見方法是在類別的建構式函式中宣告它。當 Angular 建立元件、指令或通道類別的新實例時，它會通過檢視建構式函式的引數型別來確定該類別需要哪些服務或其他依賴項。例如，如果 <code>HeroListComponent</code> 要用 <code>HeroService</code>，則建構式函式可以如下所示：</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nclass HeroListComponent {\n  constructor(private service: HeroService) {}\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cl3jju4iuom2umkvzg03756ii\">另一種選擇是使用inject方法:</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nclass HeroListComponent {\n  private service = inject(HeroService);\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bi3l0p4trrdrv57wv5fdv0jg\">當 Angular 發現一個元件依賴於一項服務時，它會首先檢查注入器中是否已有該服務的任何現有實例。如果所請求的服務實例尚不存在，注入器就會使用註冊的提供者建立一個，並在將服務回傳給 Angular 之前將其新增到注入器中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azi8pf0rs679xrhdnc8oegqwv\">當所有請求的服務都已解析並回傳時，Angular 就可以用這些服務實例為引數，呼叫該組件的建構式函式。</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/architecture/injector-injects.png\" alt=\"Service\" class=\"left\" width=\"479\" height=\"218\">\n</div>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5umx7iyhywptkcsxpcje6tj3r\"><a href=\"guide/creating-injectable-service\">建立和注入服務</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gv65k67y6jmm88mzefenhg2y\"><a href=\"guide/dependency-injection-in-action\">依賴注入實戰</a></li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：Tue Aug 29 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/ClassProvider\n - api/core/ClassSansProvider\n - api/core/ConstructorProvider\n - api/core/ConstructorSansProvider\n - api/core/ExistingProvider\n - api/core/ExistingSansProvider\n - api/core/FactoryProvider\n - api/core/FactorySansProvider\n - api/core/Inject\n - api/core/Injectable\n - api/core/Optional\n - api/core/Provider\n - api/core/StaticClassProvider\n - api/core/TypeProvider\n - api/core/ValueProvider\n - errors/NG0201\n - guide/architecture-next-steps\n - guide/architecture-services\n - guide/attribute-directives\n - guide/dependency-injection-overview\n - guide/docs-style-guide\n - guide/example-apps-list\n - guide/glossary\n - guide/http-intercept-requests-and-responses\n - guide/http-server-communication\n - guide/http-setup-server-communication\n - guide/ngmodule-api\n - guide/providers\n - guide/testing-services\n - guide/understanding-angular-overview\n - guide/upgrade\n - tutorial/tour-of-heroes/toh-pt4\n-->\n<!-- links from this doc:\n - api/core/ApplicationConfig\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/inject\n - api/platform-browser/bootstrapApplication\n - guide/creating-injectable-service\n - guide/dependency-injection#injecting-a-dependency\n - guide/dependency-injection#providing-dependency\n - guide/dependency-injection#understanding-dependency-injection\n - guide/dependency-injection#whats-next\n - guide/dependency-injection-in-action\n - guide/dependency-injection-providers\n - guide/glossary#injector\n - guide/hierarchical-dependency-injection\n-->"}
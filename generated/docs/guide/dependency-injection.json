{"id":"guide/dependency-injection","title":"理解依赖注入","contents":"<div class=\"content\">\n  <h1 id=\"understanding-dependency-injection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6yvsg1jhbulx35x6m8zucrwf0\">理解依赖注入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#understanding-dependency-injection\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axdoai4yb0lomm2eevnafzntj\">依赖注入（DI）是 Angular 中的基本概念之一。DI 被装配进 Angular 框架，并允许带有 Angular 装饰器的类（例如组件、指令、管道和可注入对象）配置它们所需的依赖项。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dz4vffz5pmjgzb6ktye9v85vo\">DI 系统中存在两个主要角色：依赖使用者和依赖提供者。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hqpqt21vhcsg872zr0grrva0\">Angular 使用一种称为 <a href=\"guide/glossary#injector\">Injector</a> 的抽象来促进依赖消费者和依赖提供者之间的互动。当有人请求依赖项时，注入器会检查其注册表以查看那里是否已有可用的实例。如果没有，就会创建一个新实例并将其存储在注册表中。Angular 会在应用的引导过程中创建一个应用范围的注入器（也称为“根”注入器），并会根据需要创建任何其它注入器。在大多数情况下，你都不需要手动创建注入器，但应该知道有这样一个连接提供者和消费者的层次。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8pbl1s6to4yxny21rw8w8t5c\">本主题介绍了某个类如何作为依赖项的基本场景。Angular 还允许你使用函数、对象、基本类型（例如字符串或 Boolean）或任何其他类型作为依赖项。有关更多信息，请参阅<a href=\"guide/dependency-injection-providers\">依赖提供者</a>。</p>\n<h2 id=\"providing-dependency\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"10r9bra9bzm51s8ozb975w36c\">提供依赖项<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#providing-dependency\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elywm7y2fi2beh0abm743q3j2\">假设有一个名为 HeroService 的类需要用作组件中的依赖项。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1wzm3joui6fhkhyxpx0ys806a\">第一步是添加@Injectable装饰器，以显示该类可以被注入。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass HeroService {}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akjkt5oondazcbue47q0wcqj\">下一步是提供它，以便让其在 DI 中可用。可以在多种地方提供依赖项：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32ved4pwnyozivmqr65dqfvsy\">在组件级别，使用 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的 <code>providers</code> 字段。在这种情况下，<code>HeroService</code> 将可用于此组件的所有实例以及它的模板中使用的其他组件和指令。例如：</li>\n</ul>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'hero-list',\n  template: '...',\n  providers: [HeroService]\n})\nclass HeroListComponent {}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkvq95hir8daqe6pnzudkd34o\">当你在组件级别注册提供者时，该组件的每个新实例都会获得一个新的服务实例。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74ssajzjiawi3qnbvl9q9rr17\">使用传递给bootstrapApplication函数的ApplicationConfig对象的providers字段，在应用程序级别提供服务或其他@Injectable。在这种情况下，HeroService对在此NgModule中声明的所有组件、指令和管道，以及在此NgModule内或适用于此NgModule的其他NgModule中声明的所有组件、指令和管道都是可用的。当在ApplicationConfig中注册提供者时，同一个服务实例对所有适用的组件、指令和管道都可用。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6m1xhs7zz8hue8hjpi5ad8xkd\">对于基于NgModule的应用程序，请使用NgModule装饰器的providers字段来提供在应用程序级别可用的服务或其他@Injectable。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cc47yybljra777r7gglyfuob1\">要了解所有边缘情况，请参阅Hierarchical injectors。例如:</p>\n<code-example language=\"typescript\">\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n    providers: [\n      { provide: HeroService },\n    ]\n};\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2elh794bm50fyqlelcz3kuhl\">然后，在main.ts中： \n<code-example language=\"typescript\">\n  bootstrapApplication(AppComponent, appConfig) \n</code-example></p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"620711hhvuwbi9bnlm498uenv\">在应用程序根级别，允许将其注入应用程序中的其他类。这可以通过将 <code>providedIn: 'root'</code> 字段添加到 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 装饰器来实现：</li>\n</ul>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nclass HeroService {}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9enfsdeuz7jhnfftn0so1m2f\">当你在根级别提供服务时，Angular 会创建一个 <code>HeroService</code> 的共享实例，并将其注入到任何需要它的类中。在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元数据中注册提供者还允许 Angular 通过从已编译的应用程序中删除没用到的服务来优化应用程序，这个过程称为摇树优化（tree-shaking）。</p>\n<h2 id=\"injecting-a-dependency\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1eqo54x3gcjzt98z0yv5fnrge\">注入依赖项<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#injecting-a-dependency\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gu8tb6h3onxb9106ao5akw9b\">注入依赖项的最常见方法是在类的构造函数中声明它。当 Angular 创建组件、指令或管道类的新实例时，它会通过查看构造函数的参数类型来确定该类需要哪些服务或其他依赖项。例如，如果 <code>HeroListComponent</code> 要用 <code>HeroService</code>，则构造函数可以如下所示：</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nclass HeroListComponent {\n  constructor(private service: HeroService) {}\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cl3jju4iuom2umkvzg03756ii\">另一种选择是使用inject方法:</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nclass HeroListComponent {\n  private service = inject(HeroService);\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bi3l0p4trrdrv57wv5fdv0jg\">当 Angular 发现一个组件依赖于一项服务时，它会首先检查注入器中是否已有该服务的任何现有实例。如果所请求的服务实例尚不存在，注入器就会使用注册的提供者创建一个，并在将服务返回给 Angular 之前将其添加到注入器中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azi8pf0rs679xrhdnc8oegqwv\">当所有请求的服务都已解析并返回时，Angular 就可以用这些服务实例为参数，调用该组件的构造函数。</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/architecture/injector-injects.png\" alt=\"Service\" class=\"left\" width=\"479\" height=\"218\">\n</div>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5umx7iyhywptkcsxpcje6tj3r\"><a href=\"guide/creating-injectable-service\">创建和注入服务</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gv65k67y6jmm88mzefenhg2y\"><a href=\"guide/dependency-injection-in-action\">依赖注入实战</a></li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间：Tue Aug 29 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/ClassProvider\n - api/core/ClassSansProvider\n - api/core/ConstructorProvider\n - api/core/ConstructorSansProvider\n - api/core/ExistingProvider\n - api/core/ExistingSansProvider\n - api/core/FactoryProvider\n - api/core/FactorySansProvider\n - api/core/Inject\n - api/core/Injectable\n - api/core/Optional\n - api/core/Provider\n - api/core/StaticClassProvider\n - api/core/TypeProvider\n - api/core/ValueProvider\n - errors/NG0201\n - guide/architecture-next-steps\n - guide/architecture-services\n - guide/attribute-directives\n - guide/dependency-injection-overview\n - guide/docs-style-guide\n - guide/example-apps-list\n - guide/glossary\n - guide/http-intercept-requests-and-responses\n - guide/http-server-communication\n - guide/http-setup-server-communication\n - guide/ngmodule-api\n - guide/providers\n - guide/testing-services\n - guide/understanding-angular-overview\n - guide/upgrade\n - tutorial/tour-of-heroes/toh-pt4\n-->\n<!-- links from this doc:\n - api/core/ApplicationConfig\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/inject\n - api/platform-browser/bootstrapApplication\n - guide/creating-injectable-service\n - guide/dependency-injection#injecting-a-dependency\n - guide/dependency-injection#providing-dependency\n - guide/dependency-injection#understanding-dependency-injection\n - guide/dependency-injection#whats-next\n - guide/dependency-injection-in-action\n - guide/dependency-injection-providers\n - guide/glossary#injector\n - guide/hierarchical-dependency-injection\n-->"}
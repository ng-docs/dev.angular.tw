{"id":"guide/pipes-custom-data-trans","title":"为自定义数据转换创建管道","contents":"<div class=\"content\">\n  <h1 id=\"creating-pipes-for-custom-data-transformations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byn6vq1dhq9z2si0f3n6ikiod\">为自定义数据转换创建管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#creating-pipes-for-custom-data-transformations\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39jb1lxpmx51dcv8teehy49v8\">创建自定义管道来封装那些内置管道没有提供的转换。然后就可以在模板表达式中使用自定义管道了，像内置管道一样，把输入值转换成显示输出。</p>\n<h2 id=\"marking-a-class-as-a-pipe\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmncqwy4zdbr1ix9izi238ci4\">把一个类标记为一个管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#marking-a-class-as-a-pipe\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7kb7qjqz2u67rs9fzhehfu5r\">要将一个类标记为管道并提供配置元数据，请将 \n<a href=\"/api/core/Pipe\" title=\"Pipe 的 API 参考\"><code>@Pipe</code></a> \n<a href=\"/guide/glossary#decorator--decoration\" title=\"装饰器的定义\">装饰器</a> 应用于该类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cwskv5au5gzbsxlpawb90774\">使用<a href=\"guide/glossary#case-types\" title=\"案例类型的定义\">UpperCamelCase</a>（类名的一般约定）作为管道类名，并使用<a href=\"guide/glossary#case-types\" title=\"案例类型的定义\">camelCase</a>作为对应的 <code>name</code> 字符串。不要在 <code>name</code> 中使用连字符。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yyq0vhhrcl6uebv8bjpyp7aw\">有关详细信息和更多示例，请参阅<a href=\"guide/styleguide#pipe-names\" title=\"Angular 编码风格指南中的管道名称\">管道名称</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59woxknp7rmjrsh7t0u53y0tr\">在模板表达式中使用 <code>name</code> 就像在内置管道中一样。</p>\n<div class=\"alert is-important\">\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehv7whg299d9zf2f68sw5quqx\">将你的管道包含在 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据的 <code>declarations</code> 字段中，以使其可用于模板。请参阅示例应用程序中的 <code>app.module.ts</code> 文件（<live-example></live-example>）。有关详细信息，请参阅<a href=\"guide/ngmodules\" title=\"NgModules 介绍\">NgModules</a>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"butqjskv5pxwbqymtlq2hmqbo\">注册自定义管道。<a href=\"cli\" title=\"CLI 概述和命令参考\">Angular CLI</a> 的 <a href=\"cli/generate#pipe\" title=\"ng 在 CLI Command Reference 中生成管道\"><code>ng generate pipe</code></a> 命令会自动注册该管道。</li>\n</ul>\n</div>\n<h2 id=\"using-the-pipetransform-interface\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coz9qgu2vendycp7ynb13ugbr\">使用 PipeTransform 接口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#using-the-pipetransform-interface\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5u79qk4nzdwhb58zjzpj2jnj\">在你的自定义管道类中实现 \n<a href=\"/api/core/PipeTransform\" title=\"PipeTransform 的 API 参考\"><code>PipeTransform</code></a> 接口以执行转换。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rdwu0ty9ppt7pbhl77s60rk5\">Angular 调用 <code>transform</code> 方法，该方法使用绑定的值作为第一个参数，把其它任何参数都以列表的形式作为第二个参数，并返回转换后的值。</p>\n<h2 id=\"example-transforming-a-value-exponentially\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8nxbr3fmax5b8puwr1r32cix\">范例：指数级转换<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes-custom-data-trans#example-transforming-a-value-exponentially\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5o59bxhab8w3jz1n0dyos17e\">在游戏中，可能希望实现一种指数级转换，以指数级增加英雄的力量。比如，如果英雄的得分是 2，那么英雄的能量会指数级增长 10 次，最终得分为 1024。你可以使用自定义管道进行这种转换。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hxuxz2tjgo19fh04hpo4t8b0\">下列代码范例显示了两个组件定义：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3irkvq0b44fm6jjn5bwxj8u0\"><code>exponential-strength.pipe.ts</code> 通过一个执行转换的 <code>transform</code> 方法定义了一个名为 <code>exponentialStrength</code> 的自定义管道。它为传给管道的参数定义了 <code>transform</code> 方法的一个参数（<code>exponent</code>）。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egkrtvklbufxvb0lg9cndxqil\"><code>power-booster.component.ts</code> 组件演示了如何使用该管道，指定了一个值（<code>2</code>）和一个 exponent 参数（<code>10</code>）。</li>\n</ul>\n<code-tabs>\n    <code-pane header=\"src/app/exponential-strength.pipe.ts\" path=\"pipes/src/app/exponential-strength.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n/*\n * Raise the value exponentially\n * Takes an exponent argument that defaults to 1.\n * Usage:\n *   value | exponentialStrength:exponent\n * Example:\n *   {{ 2 | exponentialStrength:10 }}\n *   formats to: 1024\n*/\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  standalone: true,\n  name: 'exponentialStrength'\n})\nexport class ExponentialStrengthPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(value: number, exponent = 1): number {\n    return Math.pow(value, exponent);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/power-booster.component.ts\" path=\"pipes/src/app/power-booster.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { ExponentialStrengthPipe } from './exponential-strength.pipe';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-power-booster',\n  template: `\n    &lt;h2&gt;Power Booster&lt;/h2&gt;\n    &lt;p&gt;Super power boost: {{2 | exponentialStrength: 10}}&lt;/p&gt;\n  `,\n  imports: [ExponentialStrengthPipe]\n})\nexport class PowerBoosterComponent { }\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"953cupjezya903jzm3cso9rlv\">浏览器显示如下：</p>\n<code-example language=\"none\">\n\nPower Booster\n\nSuperpower boost: 1024\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qolknuixfxule42whg5wkz4g\">可以到<live-example></live-example>中体验 <code>exponentialStrength</code> 管道的行为，可以更改模板中的值和可选的指数值。</p>\n</div>\n\n  <div class=\"reviewed\">最后复查时间：Fri Jan 06 2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /api/core/Pipe\n - /api/core/PipeTransform\n - /guide/glossary#decorator--decoration\n - api/core/Component\n - api/core/NgModule\n - api/core/Pipe\n - api/core/PipeTransform\n - cli\n - cli/generate#pipe\n - guide/glossary#case-types\n - guide/ngmodules\n - guide/pipes-custom-data-trans#creating-pipes-for-custom-data-transformations\n - guide/pipes-custom-data-trans#example-transforming-a-value-exponentially\n - guide/pipes-custom-data-trans#marking-a-class-as-a-pipe\n - guide/pipes-custom-data-trans#using-the-pipetransform-interface\n - guide/styleguide#pipe-names\n-->"}
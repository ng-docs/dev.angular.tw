{"id":"guide/reactive-forms","title":"回應式表單","contents":"<div class=\"content\">\n  <h1 id=\"reactive-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2xwzrnb2ye7twpwf3t9i2eiv\">回應式表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#reactive-forms\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jlimjbqirhzn9e8682fakis0\"><em>回應式表單</em>提供了一種模型驅動的方式來處理表單輸入，其中的值會隨時間而變化。本文會向你展示如何建立和更新基本的表單控制元件，接下來還會在一個表單組中使用多個控制元件，驗證表單的值，以及建立動態表單，也就是在執行期新增或移除控制元件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66yqa2vy32ojzv7d7jmqjnvx5\">試試這個<live-example name=\"reactive-forms\" title=\"Reactive Forms in Stackblitz\">回應式表單的現場演練</live-example>。</p>\n</div>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7u7632c8guk8kn4rauo6vcf7y\">在深入瞭解被動表單之前，你應該對這些內容有一個基本的瞭解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6k0qc2cmhdp2uc1zzhrizy1z5\"><a href=\"https://www.typescriptlang.org/\" title=\"The TypeScript language\">TypeScript</a> 程式設計</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"231u6redz2hxq6aoj944xbmky\">Angular 的應用設計基礎，就像<a href=\"guide/architecture\" title=\"Angular 概念簡介。\">Angular Concepts 中</a>描述的那樣</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mhk43enn2xjxc67dcp1z86c\"><a href=\"guide/forms-overview\" title=\"Angular 表單概述\">『表單簡介』</a>中提供的表單設計概念</li>\n</ul>\n<p><a id=\"intro\"></a></p>\n<h2 id=\"overview-of-reactive-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ytjp8a8cccvj5seiyo3oz4r4\">回應式表單概述<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#overview-of-reactive-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6g608eweswton4ej31crbdkng\">回應式表單使用顯式的、不可變的方式，管理表單在特定的時間點上的狀態。對錶單狀態的每一次變更都會回傳一個新的狀態，這樣可以在變化時維護模型的整體性。回應式表單是圍繞 <a href=\"guide/glossary#observable\" title=\"Observable definition.\">Observable</a> 流建立的，表單的輸入和值都是透過這些輸入值組成的流來提供的，它可以同步訪問。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cnglyza13v428ijj3n1h1asl8\">回應式表單還提供了一種更直觀的測試路徑，因為在請求時你可以確信這些資料是一致的、可預料的。這個流的任何一個消費者都可以安全地操縱這些資料。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3bogfh7n2ltwqmfxui7qgu94\">回應式表單與<a href=\"guide/forms\" title=\"Template-driven forms guide\">樣板驅動表單</a>有著顯著的不同點。回應式表單透過對資料模型的同步訪問提供了更多的可預測性，使用 Observable 的運算子提供了不可變性，並且透過 Observable 流提供了變化追蹤功能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1w1fvpfcreokp0wnpcshjve9r\">樣板驅動表單允許你直接在樣板中修改資料，但不像回應式表單那麼明確，因為它們依賴嵌入到樣板中的指令，並藉助可變資料來非同步跟蹤變化。參閱<a href=\"guide/forms-overview\" title=\"Angular 表單概覽\">表單概覽</a>以瞭解這兩種正規化之間的詳細比較。</p>\n<h2 id=\"adding-a-basic-form-control\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lhmjzgldp42sj2bgi7ni2shl\">新增基礎表單控制元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#adding-a-basic-form-control\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86od8zyjw6f7zl0pv81ex3j6g\">使用表單控制元件有三個步驟。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckflbtjhnxc7unvjjxa04jupi\">生成一個新元件來匯入回應式表單模組並實例化一個新的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyzw9nisyp2ko4xereopwsx1b\">在樣板中註冊這個 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9u8k7pis6wjf81ghuec43m5w\">然後，你可以把元件新增到樣板中來顯示錶單。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12c44d0ajer6qfunm2itwakbu\">下面的例子展示了如何新增一個表單控制元件。在這個例子中，使用者在輸入欄位中輸入自己的名字，捕獲其輸入值，並顯示錶單控制元件的當前值。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqqz4d3lnmdbou82b2hkjq9wt\">生成一個新的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mt2p9mttlqd7zgqm521ouv8h\">使用 \n<a href=\"cli/generate#component-command\" title=\"使用 Angular 指令行介面\">CLI 指令</a> \n<code>ng generate</code> 在專案中生成一個元件，以註冊和託管 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 和 \n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>。 \n<code-example header=\"src/app/name-editor/name-editor.component.ts\" path=\"reactive-forms/src/app/name-editor/name-editor.component.ts\" region=\"create-control\">\n  import { \n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core'; import { \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>, \n <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> } from '@angular/forms'; @\n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ standalone: true, selector: 'app-name-editor', templateUrl: './name-editor.component.html', styleUrls: ['./name-editor.component.css'], imports: [\n <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>], }) export class NameEditorComponent { name = new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''); } \n</code-example> 使用 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的建構式函式來設定其初始值，在本例中是一個空字串。透過在元件類別中建立這些控制元件，您可以立即訪問監聽、更新和驗證表單輸入狀態。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dnbvfxn9m33o912ar9tfgp1y\">在樣板中註冊控制元件</td>\n<td align=\"left\">After you create the control in the component class, you must associate it with a form control element in the template. Update the template with the form control using the <code>formControl</code> binding provided by <code><a href=\"api/forms/FormControlDirective\" class=\"code-anchor\">FormControlDirective</a></code>, which is also included in the <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>. <code-example header=\"src/app/name-editor/name-editor.component.html\" path=\"reactive-forms/src/app/name-editor/name-editor.component.html\" region=\"control-binding\">\n&lt;label for=\"name\"&gt;Name: &lt;/label&gt;\n&lt;input id=\"name\" type=\"text\" [formControl]=\"name\"&gt;\n\n</code-example> <div class=\"alert is-helpful\"> <ul> <li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44ykgx4npx6utp1e7xyewvi0x\">有關由 \n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> 提供的類別和指令的摘要，請參閱以下\n<a href=\"guide/reactive-forms#reactive-forms-api\" title=\"API 摘要\">回應式表單 API</a>部分</li> <li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brqlcezs2rz52q04yrpwj5i39\">有關這些類別和指令的完整語法詳情，請參閱 \n<a href=\"api/forms\" title=\"API 參考\">Forms 套件</a> 的 API 參考文件</li> </ul> </div> Using the template binding syntax, the form control is now registered to the <code>name</code> input element in the template. The form control and DOM element communicate with each other: the view reflects changes in the model, and the model reflects changes in the view.</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exfzjlt09qtpyaycgbqjuvooa\">顯示元件</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5du26iffe9akzj1ietwsd0y9u\">將分配給 \n<code>name</code> 屬性的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 在將屬性的宿主元件新增到樣板時顯示。 \n<code-example header=\"src/app/app.component.html (name editor)\" path=\"reactive-forms/src/app/app.component.1.html\" region=\"app-name-editor\">\n  &lt;app-name-editor&gt;&lt;/app-name-editor&gt; \n</code-example> \n<div class=\"lightbox\"> \n <img alt=\"名稱編輯器，其中包含名稱標籤和輸入框，使用者可以輸入名稱\" src=\"generated/images/guide/reactive-forms/name-editor-1.png\" width=\"396\" height=\"98\"> \n</div></td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"display-value\"></a></p>\n<h3 id=\"displaying-a-form-control-value\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ljfghmfsihcrk3hxsxumdztm\">顯示錶單控制元件的值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#displaying-a-form-control-value\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e43ygfbtq01gxu8n11zed2ih3\">你可以用下列方式顯示它的值。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dg1fkl1kmm154r8q7ton656ay\">透過可觀察物件 <code>valueChanges</code>，你可以在樣板中使用 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 或在元件類別中使用 <code>subscribe()</code> 方法來監聽表單值的變化。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exxdcqpzd8f5u4sp8o631y75r\">使用 <code>value</code> 屬性。它能讓你獲得當前值的一份快照。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pmypu4slg7i2bb5uxn9fdb50\">下面的例子展示了如何在樣板中使用內嵌顯示當前值。</p>\n<code-example header=\"src/app/name-editor/name-editor.component.html (control value)\" path=\"reactive-forms/src/app/name-editor/name-editor.component.html\" region=\"display-value\">\n&lt;p&gt;Value: {{ name.value }}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"r075z0scuk04scm3d6mabdqw\">一旦你修改了表單控制元件所關聯的元素，這裡顯示的值也跟著變化了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eu9j12pqjt5v9ytuhssg9p0mb\">回應式表單還能透過每個實例的屬性和方法提供關於特定控制元件的更多訊息。<a href=\"api/forms/AbstractControl\">AbstractControl</a> 的這些屬性和方法用於控制表單狀態，並在處理表單校驗時決定何時顯示訊息。\n欲知詳情，參閱稍後的<a href=\"guide/reactive-forms#basic-form-validation\">輸入驗證</a>一節。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28o29byh4kbfziz1udkuzgogg\">要了解 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的其它屬性和方法，參閱 <a href=\"api/forms/FormControl\">API 參考手冊</a>。</p>\n<h3 id=\"replacing-a-form-control-value\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2y447111jw2jx6droz8x2m02k\">替換表單控制元件的值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#replacing-a-form-control-value\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ltmkzmdl3bfmb313mhvz64fv\">回應式表單還有一些方法可以用程式設計的方式修改控制元件的值，它讓你可以靈活的修改控制元件的值而不需要藉助使用者互動。<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 實例提供了一個 <code>setValue()</code> 方法，它會修改這個表單控制元件的值，並且驗證與控制元件結構相對應的值的結構。比如，當從後端 API 或服務接收到了表單資料時，可以透過 <code>setValue()</code> 方法來把原來的值替換為新的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efnb4t60w77bqgq3gmoc3joi8\">下列的例子往元件類別中新增了一個方法，它使用 <code>setValue()</code> 方法來將控制元件的值修改為 <em>Nancy</em>。</p>\n<code-example header=\"src/app/name-editor/name-editor.component.ts (update value)\" path=\"reactive-forms/src/app/name-editor/name-editor.component.ts\" region=\"update-value\">\nupdateName() {\n  this.name.setValue('Nancy');\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4o9tbowcb5mqsk6dvtbo4s2a\">修改樣板，新增一個按鈕，用於模擬改名操作。在點 <code>Update Name</code> 按鈕之前表單控制元件元素中輸入的任何值都會回顯為它的當前值。</p>\n<code-example header=\"src/app/name-editor/name-editor.component.html (update value)\" path=\"reactive-forms/src/app/name-editor/name-editor.component.html\" region=\"update-value\">\n&lt;button type=\"button\" (click)=\"updateName()\"&gt;Update Name&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9akc4i4ge3j05s7d6ne1msncn\">由於表單模型是該控制元件的事實之源，因此當你單擊該按鈕時，元件中該輸入框的值也變化了，覆蓋掉它的當前值。</p>\n<div class=\"lightbox\">\n<img alt=\"Name Editor Update with a name label, the name Nancy in the input, text specifying that the value of the input is Nancy and an Update Name button\" src=\"generated/images/guide/reactive-forms/name-editor-2.gif\" width=\"400\" height=\"241\">\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ymigbole1omp4is5ykan4p2r\"><strong>注意</strong>：<br>\n在這個例子中，你只使用單個控制元件，但是當呼叫 <a href=\"guide/reactive-forms#grouping-form-controls\" title=\"Learn more about form groups.\"><code>FormGroup</code></a> 或 <a href=\"guide/reactive-forms#creating-dynamic-forms\" title=\"Learn more about dynamic forms.\"><code>FormArray</code></a> 實例的 <code>setValue()</code> 方法時，傳入的值就必須對應控制元件群組或控制元件陣列的結構才行。</p>\n</div>\n<h2 id=\"grouping-form-controls\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ebp6l4cz7g6ebzrj3ixzdgidr\">把表單控制元件分組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#grouping-form-controls\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"329hb2zpzy7wx2ym44z6h4f57\">表單中通常會包含幾個相互關聯的控制元件。回應式表單提供了兩種把多個相關控制元件分組到同一個輸入表單中的方法。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ngau0a6t749at24vwnzrz546\">表單組</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f29x74v1ea7lp27z3inu83opl\">表單組</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40keas5qav7d9d1lpul4n456u\">定義一個具有固定控制元件集合的表單，可以一起管理。本節討論了表單組的基礎知識。您還可以\n<a href=\"guide/reactive-forms#nested-groups\" title=\"瞭解有關巢狀組的更多訊息\">巢狀表單組</a>以建立更復雜的表單。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3p9yaammp9kmb6owakru0tkhg\">表單陣列</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"deauj48kalu6ayeoq2rexg7s5\">定義一個動態表單，在執行時可以新增和移除控制元件。你還可以巢狀表單陣列以建立更復雜的表單。有關此選項的更多訊息，請參見\n<a href=\"guide/reactive-forms#dynamic-forms\" title=\"檢視有關表單陣列的更多訊息\">建立動態表單</a>。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yne0l1augb5nhoxi8o4uxqu\">就像 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的實例能讓你控制單個輸入框所對應的控制元件一樣，<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的實例也能跟蹤一組 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 實例（比如一個表單）的表單狀態。當建立 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 時，其中的每個控制元件都會根據其名字進行跟蹤。下面的例子展示了如何管理單個控制元件群組中的多個 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 實例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7eig6ysnqyhn6wujmaoen47rj\">生成一個 <code>ProfileEditor</code> 元件並從 <code>@angular/forms</code> 套件中匯入 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 類。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component ProfileEditor\n\n</code-example>\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (imports)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"imports\">\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qjvz5ayjkxvdccsi0nd4y2f5\">要將表單組新增到此元件中，請執行以下步驟。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4gouexag0k8rbzik5co89dqz\">建立一個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 實例。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58hfrspmhnyru7pk709q8su4t\">把這個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 模型關聯到檢視。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35u19fr5xo9ostfmimua3fnel\">儲存表單資料。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nc5azer2tee9euwood3fda7x\">建立一個\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>實例</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93efy30jkb92cp82c5sc7ekd7\">在元件類別中建立一個名為\n<code>profileForm</code>的屬性，並將該屬性設定為一個新的表單組實例。要初始化表單組，請向建構式函式提供一個對映到其控制元件的命名鍵物件。\n<br>對於個人資料表單，新增兩個名為\n<code>firstName</code>和\n<code>lastName</code>的表單控制元件實例。\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts（表單組）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"formgroup\">\n  import { \n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core'; import { \n <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms'; @\n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ standalone: true, selector: 'app-profile-editor', templateUrl: './profile-editor.component.html', styleUrls: ['./profile-editor.component.css'], }) export class ProfileEditorComponent { profileForm = new \n <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({ firstName: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), lastName: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), }); } \n</code-example>現在，各個表單控制元件已在一個組中收集。一個\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>實例透過從組中每個控制元件的值減少而提供其模型值作為物件。表單組實例具有與表單控制元件實例相同的屬性（如\n<code>value</code>和\n<code>untouched</code>）和方法（如\n<code>setValue()</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7l53gb5a0yzs42l3v4jox7pya\">關聯\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>模型和檢視</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5nbpljkjg1o01k2sm5qgxyzj\">表單組跟蹤其每個控制元件的狀態和更改，因此如果其中一個控制元件發生更改，父控制元件也會發出新的狀態或值更改。組的模型來自其成員。定義模型後，你必須更新樣板以反映檢視中的模型。\n<code-example header=\"src/app/profile-editor/profile-editor.component.html（樣板表單組）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.html\" region=\"formgroup\">\n  &lt;form [formGroup]=\"profileForm\"&gt; &lt;label for=\"first-name\"&gt;名： &lt;/label&gt; &lt;input id=\"first-name\" type=\"text\" \n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"firstName\"&gt; &lt;label for=\"last-name\"&gt;姓： &lt;/label&gt; &lt;input id=\"last-name\" type=\"text\" \n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"lastName\"&gt; &lt;/form&gt; \n</code-example> \n<div class=\"alert is-helpful\"> \n <strong>注意</strong>：\n <br>就像表單組包含一組控制元件一樣，\n <em>profileForm</em> \n <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>與\n <code>form</code>元素繫結，使用\n <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>指令，在模型和包含輸入的表單之間建立通訊層。\n</div>由\n<code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">FormControlName</a></code>指令提供的\n<code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code>輸入將每個單獨的輸入繫結到\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>中定義的表單控制元件。表單控制元件與其各自的元素通訊。它們還將更改通知給表單組實例，該實例為模型值提供了事實之源。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewfedwkz2pap4rmyv0u380ser\">儲存表單資料</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37h2ri4dnj16h5ajfvl48atr9\"><code>ProfileEditor</code>元件接受使用者輸入，但在實際情景中，你想捕獲表單值並使其可用於元件外的進一步處理。 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>指令監聽由\n<code>form</code>元素發出的\n<code>submit</code>事件，併發出一個\n<code>ngSubmit</code>事件，可以將其繫結到回呼函式。在\n<code>form</code>標記上新增一個\n<code>ngSubmit</code>事件監聽器，使用\n<code>onSubmit()</code>回呼方法。\n<code-example header=\"src/app/profile-editor/profile-editor.component.html（送出事件）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"ng-submit\">\n  &lt;form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\"&gt; \n</code-example>\n<code>ProfileEditor</code>元件中的\n<code>onSubmit()</code>方法捕獲\n<code>profileForm</code>的當前值。使用\n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>來保持表單封裝並提供元件外的表單值。以下範例使用\n<code>console.warn</code>將訊息記錄到瀏覽器控制台。\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts（送出方法）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"on-submit\">\n  onSubmit() { // TODO: 使用\n <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>與表單值 console.warn(this.profileForm.value); } \n</code-example>\n<code>submit</code>事件由\n<code>form</code>標記使用內建的DOM事件發出。你可以透過點選具有\n<code>submit</code>型別的按鈕觸發事件。這使用戶可以按下\n<strong>Enter</strong>鍵送出已完成的表單。\n<br>使用\n<code>button</code>元素在表單底部新增一個按鈕來觸發送出表單。\n<code-example header=\"src/app/profile-editor/profile-editor.component.html（送出按鈕）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"submit-button\">\n  &lt;p&gt;填寫表單以啟用按鈕。&lt;/p&gt; &lt;button type=\"submit\" [disabled]=\"!profileForm.valid\"&gt;送出&lt;/button&gt; \n</code-example>\n<div class=\"alert is-helpful\"> \n <strong>注意</strong>：\n <br>上述片段中的按鈕還附有\n <code>disabled</code>繫結，用於在\n <code>profileForm</code>無效時停用按鈕。目前尚未執行任何驗證，因此按鈕始終是啟用的。基本表單驗證在\n <a href=\"guide/reactive-forms#basic-form-validation\" title=\"基本表單驗證\">驗證表單輸入</a>部分中介紹。\n</div></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exfzjlt09qtpyaycgbqjuvooa\">顯示元件</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cnc628hkfcvs4qz9oqb99ugg\">要顯示包含表單的\n<code>ProfileEditor</code>元件，請將其新增到元件樣板中。\n<code-example header=\"src/app/app.component.html（個人資料編輯器）\" path=\"reactive-forms/src/app/app.component.1.html\" region=\"app-profile-editor\">\n  &lt;app-profile-editor&gt;&lt;/app-profile-editor&gt; \n</code-example>\n<code>ProfileEditor</code>讓你管理表單控制元件實例，用於\n<code>firstName</code>和\n<code>lastName</code>控制元件在表單組實例內。\n<div class=\"lightbox\"> \n <img alt=\"具有名和姓標籤和輸入以及送出按鈕的個人資料編輯器\" src=\"generated/images/guide/reactive-forms/profile-editor-1.gif\" width=\"400\" height=\"232\"> \n</div></td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"nested-groups\"></a></p>\n<h3 id=\"creating-nested-form-groups\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpovoo6cwrqivfdh8a9qjolju\">建立巢狀的表單組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#creating-nested-form-groups\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aklzyzaf2uhfv1aivoace1kq4\">表單組可以同時接受單個表單控制元件實例和其它表單組實例作為其子控制元件。這可以讓複雜的表單模型更容易維護，並在邏輯上把它們分組到一起。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv6q64950bm6fupzc0h2oomb3\">如果要建立複雜的表單，如果能在更小的分割槽中管理不同類別的訊息就會更容易一些。使用巢狀的 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 可以讓你把大型表單組織成一些稍小的、易管理的分組。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6juoxv7i1ds9h21qswytuiomq\">要製作更復雜的表單，請遵循如下步驟。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avvv6bozxp54cxr408mzedv5k\">建立一個巢狀的表單組。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7lrotzhtr2ec6klgpxci2m5l\">在樣板中對這個巢狀表單分組。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37n6foherrdjm0c8ui1yjl0ds\">某些型別的訊息天然就屬於同一個組。比如名稱和地址就是這類巢狀組的典型例子，下面的例子中就用到了它們。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8apnhc37naq472gy5z5x91k11\">建立一個巢狀組</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6f1bbpqv4uz6lsdmewpctzhr\">要在\n<code>profileForm</code>中建立一個巢狀組，請向表單組實例新增一個巢狀\n<code>address</code>元素。\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts（巢狀表單組）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"nested-formgroup\">\n  import { \n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core'; import { \n <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms'; @\n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ standalone: true, selector: 'app-profile-editor', templateUrl: './profile-editor.component.html', styleUrls: ['./profile-editor.component.css'], }) export class ProfileEditorComponent { profileForm = new \n <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({ firstName: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), lastName: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), address: new \n <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({ street: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), city: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), state: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), zip: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), }), }); } \n</code-example>在此範例中，\n<code>地址組</code>將當前的\n<code>firstName</code>和\n<code>lastName</code>控制元件與新的\n<code>street</code>、\n<code>city</code>、\n<code>state</code>和\n<code>zip</code>控制元件群組合在一起。儘管表單組中的\n<code>地址</code>元素是整體\n<code>profileForm</code>元素中的子元素，但與值和狀態更改相關的規則仍然適用。來自巢狀表單組的狀態和值更改會傳播到父表單組，保持整體模型的一致性。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dr5xlkyuxps8a08n0h28539gr\">在樣板中對巢狀表單進行分組</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a018m7re1q7n2kuro6063orgt\">在元件類別中更新模型後，更新樣板以連線表單組實例及其輸入元素。將包含\n<code>street</code>、\n<code>city</code>、\n<code>state</code>和\n<code>zip</code>欄位的\n<code>address</code>表單組新增到\n<code>ProfileEditor</code>樣板中。\n<code-example header=\"src/app/profile-editor/profile-editor.component.html（樣板巢狀表單組）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.html\" region=\"formgroupname\">\n  &lt;div \n <a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a>=\"address\"&gt; &lt;h2&gt;地址&lt;/h2&gt; &lt;label for=\"street\"&gt;街道： &lt;/label&gt; &lt;input id=\"street\" type=\"text\" \n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"street\"&gt; &lt;label for=\"city\"&gt;城市： &lt;/label&gt; &lt;input id=\"city\" type=\"text\" \n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"city\"&gt; &lt;label for=\"state\"&gt;州： &lt;/label&gt; &lt;input id=\"state\" type=\"text\" \n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"state\"&gt; &lt;label for=\"zip\"&gt;郵遞區號： &lt;/label&gt; &lt;input id=\"zip\" type=\"text\" \n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"zip\"&gt; &lt;/div&gt; \n</code-example>\n<code>ProfileEditor</code>表單顯示為一組，但模型進一步分解以表示邏輯分組區域。\n<div class=\"lightbox\"> \n <img alt=\"個人資料編輯器更新新增地址輸入，填寫表單以啟用送出按鈕的指示文字以及停用的送出按鈕\" src=\"generated/images/guide/reactive-forms/profile-editor-2.png\" width=\"400\" height=\"739\"> \n</div>\n<div class=\"alert is-helpful\"> \n <strong>提示</strong>：\n <br>使用\n <code>value</code>屬性和\n <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a></code>在元件樣板中顯示錶單組實例的值。\n</div></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"updating-parts-of-the-data-model\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79doltm3ltchl1q64nsndmvuf\">更新部分資料模型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#updating-parts-of-the-data-model\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s6y6b45jen7eps4hgeogeol7\">當修改包含多個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 實例的值時，你可能只希望更新模型中的一部分，而不是完全替換掉。這一節會講解該如何更新表單控制元件資料模型模型中的一部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2cehnv06ru6paj612vwoosni\">有兩種更新模型值的方式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xubgaqmffibk0p3s7z4lwoiw\">方法</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>setValue()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1h74gdjermlato26kgh7i114\">為單個控制元件設定新值。\n<code>setValue()</code>方法嚴格遵循表單組的結構，並替換控制元件的整個值。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>patchValue()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ryky193pgg1eahtuxvlm28la\">替換在表單模型中已更改的任何已定義屬性。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csdob4rucokriy7d48yb1er6a\"><code>setValue()</code> 方法的嚴格檢查可以幫助你捕獲複雜表單巢狀中的錯誤，而 <code>patchValue()</code> 在遇到那些錯誤時可能會默默的失敗。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akd417lsh82sj3s5w4e2wy09j\">在 <code>ProfileEditorComponent</code> 中，使用 <code>updateProfile</code> 方法傳入下列資料可以更新使用者的名字與街道住址。</p>\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (patch value)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"patch-value\">\nupdateProfile() {\n  this.profileForm.patchValue({\n    firstName: 'Nancy',\n    address: {\n      street: '123 Drew Street',\n    },\n  });\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b72t9pes0pmkixn592abvg42e\">透過往樣板中新增一個按鈕來模擬一次更新操作，以修改使用者檔案。</p>\n<code-example header=\"src/app/profile-editor/profile-editor.component.html (update value)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.html\" region=\"patch-value\">\n&lt;button type=\"button\" (click)=\"updateProfile()\"&gt;Update Profile&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmgque1lf9ed1ylgwjew69h81\">當點選按鈕時，<code>profileForm</code> 模型中只有 <code>firstName</code> 和 <code>street</code> 被修改了。注意，<code>street</code> 是在 <code>address</code> 屬性的物件中被修改的。這種結構是必須的，因為 <code>patchValue()</code> 方法要針對模型的結構進行更新。<code>patchValue()</code> 只會更新表單模型中所定義的那些屬性。</p>\n<h2 id=\"using-the-formbuilder-service-to-generate-controls\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edqcwfo3te608olip9ptu0mac\">使用 FormBuilder 服務生成控制元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#using-the-formbuilder-service-to-generate-controls\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"az1bd6o3qvxgxrhotxcoqsla2\">當需要與多個表單打交道時，手動建立多個表單控制元件實例會非常繁瑣。<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服務提供了一些便捷方法來生成表單控制元件。<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 在幕後也使用同樣的方式來建立和回傳這些實例，只是用起來更簡單。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4k4pjx3m0p92jn6zaiwkd6vct\">透過下列步驟可以利用這項服務。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ci1w8ldkxy0qfgmgm9sdf6nok\">匯入 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 類。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qdsj89hwqbhyohgmtyllr8eo\">注入這個 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服務。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pk42y7ozodrg64k4uizl841h\">生成表單內容。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bht3aqkhgfnatyiy254ljhk8u\">下面的例子展示了如何重構 <code>ProfileEditor</code> 元件，用 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服務來代替手工建立這些 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 和 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 實例。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nkaf80o8zqmnarc7kjox23fg\">匯入FormBuilder類</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6g0xma9z6gks0hdxjj5b2v1pc\">從\n<code>@angular/forms</code>套件中匯入\n<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>類。\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts（匯入）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"form-builder-imports\">\n  import { \n <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> } from '@angular/forms'; \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aelqijlgak9h5pnglk00owy41\">注入FormBuilder服務</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1c95x5mxjr3ahv7xolw4d9ezo\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>服務是一個可注入的提供者，它會隨著回應式表單模組一起提供。透過將其新增到元件建構式函式中，來注入此依賴項。\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts（建構式函式）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"inject-form-builder\">\n  constructor(private formBuilder: \n <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) {} \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hab1kzm365vmk452i1c4xgjq\">生成表單控制元件</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8eqwdojqpel7mdck0dis98t59\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服務有三個方法：\n<code>control()</code>、\n<code>group()</code> 和 \n<code>array()</code>。 這些是用於在你的元件類別中生成實例的工廠方法，包括表單控制元件、表單組和表單陣列。 使用 \n<code>group</code> 方法建立 \n<code>profileForm</code> 控制元件。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (表單建構式)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"form-builder\">\n  import { \n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core'; import { \n <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> } from '@angular/forms'; @\n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ standalone: true, selector: 'app-profile-editor', templateUrl: './profile-editor.component.html', styleUrls: ['./profile-editor.component.css'], }) export class ProfileEditorComponent { profileForm = this.formBuilder.group({ firstName: [''], lastName: [''], address: this.formBuilder.group({ street: [''], city: [''], state: [''], zip: [''], }), }); constructor(private formBuilder: \n <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) {} } \n</code-example> 在上面的範例中，你使用相同的物件和 \n<code>group()</code> 方法來定義模型中的屬性。 每個控制元件名稱的值是一個包含初始值的陣列中的第一個專案。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"basic-form-validation\"></a></p>\n<h2 id=\"validating-form-input\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj26fyjitoxu8l9ytnse5nhrn\">驗證表單輸入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#validating-form-input\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"268ovkd9gv4dj2vkpq1cyla8x\"><em>表單驗證</em>用於確保使用者的輸入是完整和正確的。本節講解瞭如何把單個驗證器新增到表單控制元件中，以及如何顯示錶單的整體狀態。表單驗證的更多知識在<a href=\"guide/form-validation\" title=\"關於表單驗證\">表單驗證</a>一章中有詳細的講解。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7sgoiyfn4kf80g7tgyh1kca54\">使用下列步驟新增表單驗證。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eydluqlol4f42nx635myt1a68\">在表單元件中匯入一個驗證器函式。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vu0gf0n4rugytpa636zt97o9\">把這個驗證器新增到表單中的相應欄位。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7rmq7st6jkmp3tqo9ik46nv2i\">新增邏輯來處理驗證狀態。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jvyzo51dot5jc6q372knfw1h\">最常見的驗證是做一個必填欄位。下面的例子給出瞭如何在 <code>firstName</code> 控制元件中新增必填驗證並顯示驗證結果的方法。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tf2rpeh96tfgm71f7jkxa0sz\">匯入驗證器函式</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3lni40rckl18vd908a170cqw\">回應式表單包含一組用於常見用例的驗證器函式。 這些函式接收要根據其進行驗證的控制元件，並根據驗證檢查回傳一個錯誤物件或空值。 匯入 \n<code><a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a></code> 類自 \n<code>@angular/forms</code> 套件。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (匯入)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"validator-imports\">\n  import { \n <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms'; \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adgea8vzvev2bk63mdiekpynx\">使欄位為必填</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjc98yrzygbj5racizvh4z8fv\">在 \n<code>ProfileEditor</code> 元件中，將 \n<code>Validators.required</code> 靜態方法作為 \n<code>firstName</code> 控制元件陣列的第二個專案新增到陣列中。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (必填驗證器)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"required-validator\">\n  profileForm = this.formBuilder.group({ firstName: ['', Validators.required], lastName: [''], address: this.formBuilder.group({ street: [''], city: [''], state: [''], zip: [''], }), }); \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72nqjoaef0xg4ezkf34ct5ydb\">顯示錶單狀態</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drhfubv8rsozzohl60o1p7ph9\">當向表單控制元件新增必填欄位時，其初始狀態為無效。 這種無效狀態會傳播到父表單組元素，使其狀態無效。 透過其 \n<code>status</code> 屬性訪問表單組實例的當前狀態。 使用內嵌顯示 \n<code>profileForm</code> 的當前狀態。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.html (顯示狀態)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"display-status\">\n  &lt;p&gt;\n <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> 狀態: {{ profileForm.status }}&lt;/p&gt; \n</code-example> \n<div class=\"lightbox\"> \n <img alt=\"帶有無效驗證狀態的個人資料編輯器\" src=\"generated/images/guide/reactive-forms/profile-editor-3.png\" width=\"400\" height=\"737\"> \n</div> 由於必填的 \n<code>firstName</code> 表單控制元件，\n<strong>送出</strong> 按鈕被停用。 填寫 \n<code>firstName</code> 輸入後，表單變為有效，\n<strong>送出</strong> 按鈕將啟用。 瞭解更多表單驗證訊息，請訪問 \n<a href=\"guide/form-validation\" title=\"關於表單驗證的所有內容\">表單驗證</a> 指南。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"dynamic-forms\"></a></p>\n<h2 id=\"creating-dynamic-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1i171v2m669qwsefxozcpdj\">建立動態表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#creating-dynamic-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dpksqwohc7qs3ahyi7d8msu\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 是 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 之外的另一個選擇，用於管理任意數量的匿名控制元件。像 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 實例一樣，你也可以往 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 中動態插入和移除控制元件，並且 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 實例的值和驗證狀態也是根據它的子控制元件計算得來的。不過，你不需要為每個控制元件定義一個名字作為 key，因此，如果你事先不知道子控制元件的數量，這就是一個很好的選擇。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ibuq0m3xr9h2akonojvkmgj7\">要定義一個動態表單，請執行以下步驟。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"behlyau42hk1mxjwlenx6tq9q\">匯入 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 類。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19hecn4isg16moapf051gga2p\">定義一個 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 控制元件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qj1j7r6vkghs2f7jq4l10lo0\">使用 getter 方法訪問 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 控制元件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7t5avvfbcvppfs3lboxdc6bfm\">在樣板中顯示這個表單陣列。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab8p1tm2z88xecqnw8tq6ttks\">下面的例子展示了如何在 <code>ProfileEditor</code> 中管理<em>別名</em>陣列。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7y41k57h77dzg7givzfppuu7q\">匯入 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 類</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2833fhf8mth6q4qimpvvwkicp\">從 \n<code>@angular/forms</code> 匯入 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 類以用於型別訊息。 \n<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服務已準備好建立 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 實例。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (匯入)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"form-array-imports\">\n  import { \n <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a> } from '@angular/forms'; \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej7mev7z3osk7qhn8k1gk9e6k\">定義 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 控制元件</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4k2j82fdj6kzr4hzzmhuz5r2w\">你可以透過在陣列中定義來初始化表單陣列，其控制元件數量可以是從零到多個。 為 \n<code>profileForm</code> 的表單組實例新增 \n<code>aliases</code> 屬性以定義表單陣列。 使用 \n<code><a href=\"api/forms/FormBuilder#array\" class=\"code-anchor\">FormBuilder.array()</a></code> 方法定義陣列，並使用 \n<code><a href=\"api/forms/FormBuilder#control\" class=\"code-anchor\">FormBuilder.control()</a></code> 方法將初始控制元件填充到陣列中。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (別名表單陣列)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"aliases\">\n  profileForm = this.formBuilder.group({ firstName: ['', Validators.required], lastName: [''], address: this.formBuilder.group({ street: [''], city: [''], state: [''], zip: [''], }), aliases: this.formBuilder.array([this.formBuilder.control('')]), }); \n</code-example> 表單組實例中的別名控制元件現在填充有單個控制元件，直到動態新增更多控制元件。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"518vydh802i3kq2n6w73oj03g\">訪問 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 控制元件</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tzhgsfd0v54fumot9afmddzj\">與重複使用 \n<code>profileForm.get()</code> 方法以獲取每個實例相比，getter 提供了訪問表單陣列實例中的別名的方式。 表單陣列實例代表陣列中未定義數量的控制元件。 透過 getter 方式方便地訪問控制元件，並且這種方法對於重複使用以獲取其他控制元件非常簡單。 使用 getter 語法建立一個 \n<code>aliases</code> 類別屬性以從父表單組中檢索別名的表單陣列控制元件。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (別名 getter)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"aliases-getter\">\n  get aliases() { return this.profileForm.get('aliases') as \n <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>; } \n</code-example> \n<div class=\"alert is-helpful\"> \n <strong>注意</strong>: \n <br> 因為回傳的控制元件型別為 \n <code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code>，你需要提供明確的型別以訪問表單陣列實例的方法語法。 \n</div> 定義一個方法，動態將別名控制元件插入到別名表單陣列中。 \n<code><a href=\"api/forms/FormArray#push\" class=\"code-anchor\">FormArray.push()</a></code> 方法將控制元件作為陣列中的新項插入。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (新增別名)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"add-alias\">\n  addAlias() { this.aliases.push(this.formBuilder.control('')); } \n</code-example> 在樣板中，每個控制元件顯示為單獨的輸入欄位。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y2kebvgnekz8oges653ecat9\">在樣板中顯示錶單數組</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"euu3m3pfdei8lzua84vcwug89\">要將別名從你的表單模型附加到樣板中，必須將其新增到樣板中。 類似於由 \n<code>FormGroupNameDirective</code> 提供的 \n<code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a></code> 輸入，\n<code><a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a></code> 透過 \n<code>FormArrayNameDirective</code> 將通訊從表單陣列實例繫結到樣板。 在關閉 \n<code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a></code> 元素的 \n<code>&lt;div&gt;</code> 後新增以下樣板 HTML。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.html (別名表單陣列樣板)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"formarrayname\">\n  &lt;div \n <a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"aliases\"&gt; &lt;h2&gt;別名&lt;/h2&gt; &lt;button type=\"button\" (click)=\"addAlias()\"&gt;+ 新增另一個別名&lt;/button&gt; &lt;div *\n <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let alias of aliases.controls; let i=index\"&gt; &lt;!-- 重複的別名樣板 --&gt; &lt;label for=\"alias-{{ i }}\"&gt;別名:&lt;/label&gt; &lt;input id=\"alias-{{ i }}\" type=\"text\" [\n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"i\"&gt; &lt;/div&gt; &lt;/div&gt; \n</code-example> \n<code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 指令遍歷由別名表單陣列實例提供的每個表單控制元件實例。 因為表單陣列元素沒有名稱，所以將索引分配給 \n<code>i</code> 變數，並將其傳遞給每個控制元件以繫結到 \n<code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> 輸入。 \n<div class=\"lightbox\"> \n <img alt=\"帶有別名部分的個人資料編輯器，包括一個別名標籤、輸入和用於新增另一個別名文字輸入的按鈕\" src=\"generated/images/guide/reactive-forms/profile-editor-4.png\" width=\"400\" height=\"945\"> \n</div> 每次新增新別名實例時，新的表單陣列實例根據索引提供其控制元件。 這使你可以在計算根控制元件的狀態和值時跟蹤每個單獨的控制元件。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bzevn4u589buadx1kuedp5fy\">新增別名</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckmbohlg2he36afhg90d4iyrt\">初始時，表單包含一個 \n<code>別名</code> 欄位。 要新增另一個欄位，請單擊 \n<strong>新增別名</strong> 按鈕。 你還可以驗證表單模型中報告的別名陣列，該別名陣列由樣板底部顯示的 \n<code><a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> Value</code> 顯示。 \n<div class=\"alert is-helpful\"> \n <strong>注意</strong>: \n <br> 與為每個別名建立一個表單控制元件實例相比，你可以使用其他欄位組成另一個表單組實例。 定義每個專案的控制元件的過程相同。 \n</div></td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"reactive-forms-api\"></a></p>\n<h2 id=\"reactive-forms-api-summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jv6zxxi13f8zqdhdbpyr938a\">回應式表單 API 彙總<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#reactive-forms-api-summary\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an4zz7you3dvxoj3n8uqco1q7\">下表給出了用於建立和管理回應式表單控制元件的基礎類和服務。要了解完整的語法，請參閱 API 文件中的 <a href=\"api/forms\" title=\"API 參考。\">Forms 套件</a>。</p>\n<h4 id=\"classes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtpuzegyjmcbul5yz5jn1ham3\">類<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#classes\"><i class=\"material-icons\">link</i></a></h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"985cbtp8j98j90yytg5u911v3\">類</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bmp1rjwd8jokeyyoeaf2aqw\">具體表單控制元件類 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>、\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 的抽象基底類別。 它提供它們的共同行為和屬性。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1yusncunhmpnr8yg1ahmy711\">管理單個表單控制元件的值和有效狀態。 它對應於 HTML 表單控制元件，如 \n<code>&lt;input&gt;</code> 或 \n<code>&lt;select&gt;</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5e5546knnpt4ysxmfbq4cgumv\">管理一組\n<code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code>實例的值和有效狀態。該組的屬性包括其子控制元件。元件中頂級表單是\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fyvzttgct4kvpcz3s3ge18rn\">管理一個數字索引陣列的\n<code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code>實例的值和有效狀態。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b9w17tl2xehs5rewqshsi2y4e\">一個可注入的服務，提供用於建立控制元件實例的工廠方法。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1s4se8zp40qy26on8z2vhmkl7\">跟蹤一組\n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>實例的值和有效狀態，每個實例具有相同的值型別。</td>\n</tr>\n</tbody>\n</table>\n\n<h4 id=\"directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\">指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#directives\"><i class=\"material-icons\">link</i></a></h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qejxun37dz68k5ig2h0hy3bw\">指令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormControlDirective\" class=\"code-anchor\">FormControlDirective</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coljjk69zgcnzel8md01uct45\">將獨立的\n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>實例與表單控制元件元素同步。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">FormControlName</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qilrg25w4hb54hnnjrg6b09g\">將現有\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>實例中的\n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>按名稱與表單控制元件元素同步。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormGroupDirective\" class=\"code-anchor\">FormGroupDirective</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6iz8ibbyr5ggae2wk7ywlwden\">將現有\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>實例與DOM元素同步。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">FormGroupName</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hfnguux6tzliqvt1n77knpxp\">將巢狀的\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>實例與DOM元素同步。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormArrayName\" class=\"code-anchor\">FormArrayName</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqze3rs8ctd7qhjyofwhi3r0c\">將巢狀的\n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>實例與DOM元素同步。</td>\n</tr>\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Fri Sep 08 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/forms/FormArrayName\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/forms/FormGroupDirective\n - api/forms/FormGroupName\n - api/forms/ReactiveFormsModule\n - guide/dynamic-form\n - guide/example-apps-list\n - guide/form-validation\n - guide/forms-overview\n - guide/libraries\n - guide/npm-packages\n - guide/typed-forms\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/JsonPipe\n - api/common/NgFor\n - api/core/Component\n - api/core/EventEmitter\n - api/forms\n - api/forms/AbstractControl\n - api/forms/Form\n - api/forms/FormArray\n - api/forms/FormArray#push\n - api/forms/FormArrayName\n - api/forms/FormBuilder\n - api/forms/FormBuilder#array\n - api/forms/FormBuilder#control\n - api/forms/FormControl\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/FormGroupDirective\n - api/forms/FormGroupName\n - api/forms/FormRecord\n - api/forms/ReactiveFormsModule\n - api/forms/Validators\n - cli/generate#component-command\n - guide/architecture\n - guide/form-validation\n - guide/forms\n - guide/forms-overview\n - guide/glossary#observable\n - guide/reactive-forms#adding-a-basic-form-control\n - guide/reactive-forms#basic-form-validation\n - guide/reactive-forms#classes\n - guide/reactive-forms#creating-dynamic-forms\n - guide/reactive-forms#creating-nested-form-groups\n - guide/reactive-forms#directives\n - guide/reactive-forms#displaying-a-form-control-value\n - guide/reactive-forms#dynamic-forms\n - guide/reactive-forms#grouping-form-controls\n - guide/reactive-forms#nested-groups\n - guide/reactive-forms#overview-of-reactive-forms\n - guide/reactive-forms#prerequisites\n - guide/reactive-forms#reactive-forms\n - guide/reactive-forms#reactive-forms-api\n - guide/reactive-forms#reactive-forms-api-summary\n - guide/reactive-forms#replacing-a-form-control-value\n - guide/reactive-forms#updating-parts-of-the-data-model\n - guide/reactive-forms#using-the-formbuilder-service-to-generate-controls\n - guide/reactive-forms#validating-form-input\n - https://www.typescriptlang.org/\n-->"}
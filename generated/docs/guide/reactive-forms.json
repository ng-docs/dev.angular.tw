{"id":"guide/reactive-forms","title":"响应式表单","contents":"<div class=\"content\">\n  <h1 id=\"reactive-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2xwzrnb2ye7twpwf3t9i2eiv\">响应式表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#reactive-forms\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jlimjbqirhzn9e8682fakis0\"><em>响应式表单</em>提供了一种模型驱动的方式来处理表单输入，其中的值会随时间而变化。本文会向你展示如何创建和更新基本的表单控件，接下来还会在一个表单组中使用多个控件，验证表单的值，以及创建动态表单，也就是在运行期添加或移除控件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66yqa2vy32ojzv7d7jmqjnvx5\">试试这个<live-example name=\"reactive-forms\" title=\"Reactive Forms in Stackblitz\">响应式表单的现场演练</live-example>。</p>\n</div>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7u7632c8guk8kn4rauo6vcf7y\">在深入了解被动表单之前，你应该对这些内容有一个基本的了解：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6k0qc2cmhdp2uc1zzhrizy1z5\"><a href=\"https://www.typescriptlang.org/\" title=\"The TypeScript language\">TypeScript</a> 编程</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"231u6redz2hxq6aoj944xbmky\">Angular 的应用设计基础，就像<a href=\"guide/architecture\" title=\"Angular 概念简介。\">Angular Concepts 中</a>描述的那样</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mhk43enn2xjxc67dcp1z86c\"><a href=\"guide/forms-overview\" title=\"Angular 表单概述\">“表单简介”</a>中提供的表单设计概念</li>\n</ul>\n<p><a id=\"intro\"></a></p>\n<h2 id=\"overview-of-reactive-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ytjp8a8cccvj5seiyo3oz4r4\">响应式表单概述<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#overview-of-reactive-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6g608eweswton4ej31crbdkng\">响应式表单使用显式的、不可变的方式，管理表单在特定的时间点上的状态。对表单状态的每一次变更都会返回一个新的状态，这样可以在变化时维护模型的整体性。响应式表单是围绕 <a href=\"guide/glossary#observable\" title=\"Observable definition.\">Observable</a> 流构建的，表单的输入和值都是通过这些输入值组成的流来提供的，它可以同步访问。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cnglyza13v428ijj3n1h1asl8\">响应式表单还提供了一种更直观的测试路径，因为在请求时你可以确信这些数据是一致的、可预料的。这个流的任何一个消费者都可以安全地操纵这些数据。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3bogfh7n2ltwqmfxui7qgu94\">响应式表单与<a href=\"guide/forms\" title=\"Template-driven forms guide\">模板驱动表单</a>有着显著的不同点。响应式表单通过对数据模型的同步访问提供了更多的可预测性，使用 Observable 的操作符提供了不可变性，并且通过 Observable 流提供了变化追踪功能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1w1fvpfcreokp0wnpcshjve9r\">模板驱动表单允许你直接在模板中修改数据，但不像响应式表单那么明确，因为它们依赖嵌入到模板中的指令，并借助可变数据来异步跟踪变化。参阅<a href=\"guide/forms-overview\" title=\"Angular 表单概览\">表单概览</a>以了解这两种范式之间的详细比较。</p>\n<h2 id=\"adding-a-basic-form-control\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"lhmjzgldp42sj2bgi7ni2shl\">添加基础表单控件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#adding-a-basic-form-control\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86od8zyjw6f7zl0pv81ex3j6g\">使用表单控件有三个步骤。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckflbtjhnxc7unvjjxa04jupi\">生成一个新组件来导入响应式表单模块并实例化一个新的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyzw9nisyp2ko4xereopwsx1b\">在模板中注册这个 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9u8k7pis6wjf81ghuec43m5w\">然后，你可以把组件添加到模板中来显示表单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12c44d0ajer6qfunm2itwakbu\">下面的例子展示了如何添加一个表单控件。在这个例子中，用户在输入字段中输入自己的名字，捕获其输入值，并显示表单控件的当前值。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqqz4d3lnmdbou82b2hkjq9wt\">生成一个新的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mt2p9mttlqd7zgqm521ouv8h\">使用 \n<a href=\"cli/generate#component-command\" title=\"使用 Angular 命令行界面\">CLI 命令</a> \n<code>ng generate</code> 在项目中生成一个组件，以注册和托管 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 和 \n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>。 \n<code-example header=\"src/app/name-editor/name-editor.component.ts\" path=\"reactive-forms/src/app/name-editor/name-editor.component.ts\" region=\"create-control\">\n  import { \n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core'; import { \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>, \n <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> } from '@angular/forms'; @\n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ standalone: true, selector: 'app-name-editor', templateUrl: './name-editor.component.html', styleUrls: ['./name-editor.component.css'], imports: [\n <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>], }) export class NameEditorComponent { name = new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''); } \n</code-example> 使用 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的构造函数来设置其初始值，在本例中是一个空字符串。通过在组件类中创建这些控件，您可以立即访问监听、更新和验证表单输入状态。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dnbvfxn9m33o912ar9tfgp1y\">在模板中注册控件</td>\n<td align=\"left\">After you create the control in the component class, you must associate it with a form control element in the template. Update the template with the form control using the <code>formControl</code> binding provided by <code><a href=\"api/forms/FormControlDirective\" class=\"code-anchor\">FormControlDirective</a></code>, which is also included in the <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>. <code-example header=\"src/app/name-editor/name-editor.component.html\" path=\"reactive-forms/src/app/name-editor/name-editor.component.html\" region=\"control-binding\">\n&lt;label for=\"name\"&gt;Name: &lt;/label&gt;\n&lt;input id=\"name\" type=\"text\" [formControl]=\"name\"&gt;\n\n</code-example> <div class=\"alert is-helpful\"> <ul> <li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44ykgx4npx6utp1e7xyewvi0x\">有关由 \n<code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> 提供的类和指令的摘要，请参阅以下\n<a href=\"guide/reactive-forms#reactive-forms-api\" title=\"API 摘要\">响应式表单 API</a>部分</li> <li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brqlcezs2rz52q04yrpwj5i39\">有关这些类和指令的完整语法详情，请参阅 \n<a href=\"api/forms\" title=\"API 参考\">Forms 包</a> 的 API 参考文档</li> </ul> </div> Using the template binding syntax, the form control is now registered to the <code>name</code> input element in the template. The form control and DOM element communicate with each other: the view reflects changes in the model, and the model reflects changes in the view.</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exfzjlt09qtpyaycgbqjuvooa\">显示组件</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5du26iffe9akzj1ietwsd0y9u\">将分配给 \n<code>name</code> 属性的 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 在将属性的宿主组件添加到模板时显示。 \n<code-example header=\"src/app/app.component.html (name editor)\" path=\"reactive-forms/src/app/app.component.1.html\" region=\"app-name-editor\">\n  &lt;app-name-editor&gt;&lt;/app-name-editor&gt; \n</code-example> \n<div class=\"lightbox\"> \n <img alt=\"名称编辑器，其中包含名称标签和输入框，用户可以输入名称\" src=\"generated/images/guide/reactive-forms/name-editor-1.png\" width=\"396\" height=\"98\"> \n</div></td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"display-value\"></a></p>\n<h3 id=\"displaying-a-form-control-value\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ljfghmfsihcrk3hxsxumdztm\">显示表单控件的值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#displaying-a-form-control-value\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e43ygfbtq01gxu8n11zed2ih3\">你可以用下列方式显示它的值。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dg1fkl1kmm154r8q7ton656ay\">通过可观察对象 <code>valueChanges</code>，你可以在模板中使用 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 或在组件类中使用 <code>subscribe()</code> 方法来监听表单值的变化。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exxdcqpzd8f5u4sp8o631y75r\">使用 <code>value</code> 属性。它能让你获得当前值的一份快照。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pmypu4slg7i2bb5uxn9fdb50\">下面的例子展示了如何在模板中使用插值显示当前值。</p>\n<code-example header=\"src/app/name-editor/name-editor.component.html (control value)\" path=\"reactive-forms/src/app/name-editor/name-editor.component.html\" region=\"display-value\">\n&lt;p&gt;Value: {{ name.value }}&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"r075z0scuk04scm3d6mabdqw\">一旦你修改了表单控件所关联的元素，这里显示的值也跟着变化了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eu9j12pqjt5v9ytuhssg9p0mb\">响应式表单还能通过每个实例的属性和方法提供关于特定控件的更多信息。<a href=\"api/forms/AbstractControl\">AbstractControl</a> 的这些属性和方法用于控制表单状态，并在处理表单校验时决定何时显示信息。\n欲知详情，参阅稍后的<a href=\"guide/reactive-forms#basic-form-validation\">输入验证</a>一节。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"28o29byh4kbfziz1udkuzgogg\">要了解 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的其它属性和方法，参阅 <a href=\"api/forms/FormControl\">API 参考手册</a>。</p>\n<h3 id=\"replacing-a-form-control-value\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2y447111jw2jx6droz8x2m02k\">替换表单控件的值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#replacing-a-form-control-value\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ltmkzmdl3bfmb313mhvz64fv\">响应式表单还有一些方法可以用编程的方式修改控件的值，它让你可以灵活的修改控件的值而不需要借助用户交互。<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 实例提供了一个 <code>setValue()</code> 方法，它会修改这个表单控件的值，并且验证与控件结构相对应的值的结构。比如，当从后端 API 或服务接收到了表单数据时，可以通过 <code>setValue()</code> 方法来把原来的值替换为新的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efnb4t60w77bqgq3gmoc3joi8\">下列的例子往组件类中添加了一个方法，它使用 <code>setValue()</code> 方法来将控件的值修改为 <em>Nancy</em>。</p>\n<code-example header=\"src/app/name-editor/name-editor.component.ts (update value)\" path=\"reactive-forms/src/app/name-editor/name-editor.component.ts\" region=\"update-value\">\nupdateName() {\n  this.name.setValue('Nancy');\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4o9tbowcb5mqsk6dvtbo4s2a\">修改模板，添加一个按钮，用于模拟改名操作。在点 <code>Update Name</code> 按钮之前表单控件元素中输入的任何值都会回显为它的当前值。</p>\n<code-example header=\"src/app/name-editor/name-editor.component.html (update value)\" path=\"reactive-forms/src/app/name-editor/name-editor.component.html\" region=\"update-value\">\n&lt;button type=\"button\" (click)=\"updateName()\"&gt;Update Name&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9akc4i4ge3j05s7d6ne1msncn\">由于表单模型是该控件的事实之源，因此当你单击该按钮时，组件中该输入框的值也变化了，覆盖掉它的当前值。</p>\n<div class=\"lightbox\">\n<img alt=\"Name Editor Update with a name label, the name Nancy in the input, text specifying that the value of the input is Nancy and an Update Name button\" src=\"generated/images/guide/reactive-forms/name-editor-2.gif\" width=\"400\" height=\"241\">\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ymigbole1omp4is5ykan4p2r\"><strong>注意</strong>：<br>\n在这个例子中，你只使用单个控件，但是当调用 <a href=\"guide/reactive-forms#grouping-form-controls\" title=\"Learn more about form groups.\"><code>FormGroup</code></a> 或 <a href=\"guide/reactive-forms#creating-dynamic-forms\" title=\"Learn more about dynamic forms.\"><code>FormArray</code></a> 实例的 <code>setValue()</code> 方法时，传入的值就必须匹配控件组或控件数组的结构才行。</p>\n</div>\n<h2 id=\"grouping-form-controls\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ebp6l4cz7g6ebzrj3ixzdgidr\">把表单控件分组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#grouping-form-controls\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"329hb2zpzy7wx2ym44z6h4f57\">表单中通常会包含几个相互关联的控件。响应式表单提供了两种把多个相关控件分组到同一个输入表单中的方法。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ngau0a6t749at24vwnzrz546\">表单组</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f29x74v1ea7lp27z3inu83opl\">表单组</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"40keas5qav7d9d1lpul4n456u\">定义一个具有固定控件集合的表单，可以一起管理。本节讨论了表单组的基础知识。您还可以\n<a href=\"guide/reactive-forms#nested-groups\" title=\"了解有关嵌套组的更多信息\">嵌套表单组</a>以创建更复杂的表单。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3p9yaammp9kmb6owakru0tkhg\">表单数组</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"deauj48kalu6ayeoq2rexg7s5\">定义一个动态表单，在运行时可以添加和移除控件。你还可以嵌套表单数组以创建更复杂的表单。有关此选项的更多信息，请参见\n<a href=\"guide/reactive-forms#dynamic-forms\" title=\"查看有关表单数组的更多信息\">创建动态表单</a>。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yne0l1augb5nhoxi8o4uxqu\">就像 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的实例能让你控制单个输入框所对应的控件一样，<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的实例也能跟踪一组 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 实例（比如一个表单）的表单状态。当创建 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 时，其中的每个控件都会根据其名字进行跟踪。下面的例子展示了如何管理单个控件组中的多个 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7eig6ysnqyhn6wujmaoen47rj\">生成一个 <code>ProfileEditor</code> 组件并从 <code>@angular/forms</code> 包中导入 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 类。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component ProfileEditor\n\n</code-example>\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (imports)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"imports\">\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qjvz5ayjkxvdccsi0nd4y2f5\">要将表单组添加到此组件中，请执行以下步骤。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4gouexag0k8rbzik5co89dqz\">创建一个 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 实例。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58hfrspmhnyru7pk709q8su4t\">把这个 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 模型关联到视图。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35u19fr5xo9ostfmimua3fnel\">保存表单数据。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nc5azer2tee9euwood3fda7x\">创建一个\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>实例</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93efy30jkb92cp82c5sc7ekd7\">在组件类中创建一个名为\n<code>profileForm</code>的属性，并将该属性设置为一个新的表单组实例。要初始化表单组，请向构造函数提供一个映射到其控件的命名键对象。\n<br>对于个人资料表单，添加两个名为\n<code>firstName</code>和\n<code>lastName</code>的表单控件实例。\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts（表单组）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"formgroup\">\n  import { \n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core'; import { \n <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms'; @\n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ standalone: true, selector: 'app-profile-editor', templateUrl: './profile-editor.component.html', styleUrls: ['./profile-editor.component.css'], }) export class ProfileEditorComponent { profileForm = new \n <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({ firstName: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), lastName: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), }); } \n</code-example>现在，各个表单控件已在一个组中收集。一个\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>实例通过从组中每个控件的值减少而提供其模型值作为对象。表单组实例具有与表单控件实例相同的属性（如\n<code>value</code>和\n<code>untouched</code>）和方法（如\n<code>setValue()</code>）。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7l53gb5a0yzs42l3v4jox7pya\">关联\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>模型和视图</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5nbpljkjg1o01k2sm5qgxyzj\">表单组跟踪其每个控件的状态和更改，因此如果其中一个控件发生更改，父控件也会发出新的状态或值更改。组的模型来自其成员。定义模型后，你必须更新模板以反映视图中的模型。\n<code-example header=\"src/app/profile-editor/profile-editor.component.html（模板表单组）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.html\" region=\"formgroup\">\n  &lt;form [formGroup]=\"profileForm\"&gt; &lt;label for=\"first-name\"&gt;名： &lt;/label&gt; &lt;input id=\"first-name\" type=\"text\" \n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"firstName\"&gt; &lt;label for=\"last-name\"&gt;姓： &lt;/label&gt; &lt;input id=\"last-name\" type=\"text\" \n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"lastName\"&gt; &lt;/form&gt; \n</code-example> \n<div class=\"alert is-helpful\"> \n <strong>注意</strong>：\n <br>就像表单组包含一组控件一样，\n <em>profileForm</em> \n <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>与\n <code>form</code>元素绑定，使用\n <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>指令，在模型和包含输入的表单之间创建通信层。\n</div>由\n<code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">FormControlName</a></code>指令提供的\n<code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code>输入将每个单独的输入绑定到\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>中定义的表单控件。表单控件与其各自的元素通信。它们还将更改通知给表单组实例，该实例为模型值提供了事实之源。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewfedwkz2pap4rmyv0u380ser\">保存表单数据</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37h2ri4dnj16h5ajfvl48atr9\"><code>ProfileEditor</code>组件接受用户输入，但在实际情景中，你想捕获表单值并使其可用于组件外的进一步处理。 \n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>指令监听由\n<code>form</code>元素发出的\n<code>submit</code>事件，并发出一个\n<code>ngSubmit</code>事件，可以将其绑定到回调函数。在\n<code>form</code>标记上添加一个\n<code>ngSubmit</code>事件监听器，使用\n<code>onSubmit()</code>回调方法。\n<code-example header=\"src/app/profile-editor/profile-editor.component.html（提交事件）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"ng-submit\">\n  &lt;form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\"&gt; \n</code-example>\n<code>ProfileEditor</code>组件中的\n<code>onSubmit()</code>方法捕获\n<code>profileForm</code>的当前值。使用\n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>来保持表单封装并提供组件外的表单值。以下示例使用\n<code>console.warn</code>将消息记录到浏览器控制台。\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts（提交方法）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"on-submit\">\n  onSubmit() { // TODO: 使用\n <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>与表单值 console.warn(this.profileForm.value); } \n</code-example>\n<code>submit</code>事件由\n<code>form</code>标记使用内置的DOM事件发出。你可以通过点击具有\n<code>submit</code>类型的按钮触发事件。这使用户可以按下\n<strong>Enter</strong>键提交已完成的表单。\n<br>使用\n<code>button</code>元素在表单底部添加一个按钮来触发提交表单。\n<code-example header=\"src/app/profile-editor/profile-editor.component.html（提交按钮）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"submit-button\">\n  &lt;p&gt;填写表单以启用按钮。&lt;/p&gt; &lt;button type=\"submit\" [disabled]=\"!profileForm.valid\"&gt;提交&lt;/button&gt; \n</code-example>\n<div class=\"alert is-helpful\"> \n <strong>注意</strong>：\n <br>上述片段中的按钮还附有\n <code>disabled</code>绑定，用于在\n <code>profileForm</code>无效时禁用按钮。目前尚未执行任何验证，因此按钮始终是启用的。基本表单验证在\n <a href=\"guide/reactive-forms#basic-form-validation\" title=\"基本表单验证\">验证表单输入</a>部分中介绍。\n</div></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exfzjlt09qtpyaycgbqjuvooa\">显示组件</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cnc628hkfcvs4qz9oqb99ugg\">要显示包含表单的\n<code>ProfileEditor</code>组件，请将其添加到组件模板中。\n<code-example header=\"src/app/app.component.html（个人资料编辑器）\" path=\"reactive-forms/src/app/app.component.1.html\" region=\"app-profile-editor\">\n  &lt;app-profile-editor&gt;&lt;/app-profile-editor&gt; \n</code-example>\n<code>ProfileEditor</code>让你管理表单控件实例，用于\n<code>firstName</code>和\n<code>lastName</code>控件在表单组实例内。\n<div class=\"lightbox\"> \n <img alt=\"具有名和姓标签和输入以及提交按钮的个人资料编辑器\" src=\"generated/images/guide/reactive-forms/profile-editor-1.gif\" width=\"400\" height=\"232\"> \n</div></td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"nested-groups\"></a></p>\n<h3 id=\"creating-nested-form-groups\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpovoo6cwrqivfdh8a9qjolju\">创建嵌套的表单组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#creating-nested-form-groups\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aklzyzaf2uhfv1aivoace1kq4\">表单组可以同时接受单个表单控件实例和其它表单组实例作为其子控件。这可以让复杂的表单模型更容易维护，并在逻辑上把它们分组到一起。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv6q64950bm6fupzc0h2oomb3\">如果要构建复杂的表单，如果能在更小的分区中管理不同类别的信息就会更容易一些。使用嵌套的 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 可以让你把大型表单组织成一些稍小的、易管理的分组。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6juoxv7i1ds9h21qswytuiomq\">要制作更复杂的表单，请遵循如下步骤。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avvv6bozxp54cxr408mzedv5k\">创建一个嵌套的表单组。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7lrotzhtr2ec6klgpxci2m5l\">在模板中对这个嵌套表单分组。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37n6foherrdjm0c8ui1yjl0ds\">某些类型的信息天然就属于同一个组。比如名称和地址就是这类嵌套组的典型例子，下面的例子中就用到了它们。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8apnhc37naq472gy5z5x91k11\">创建一个嵌套组</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6f1bbpqv4uz6lsdmewpctzhr\">要在\n<code>profileForm</code>中创建一个嵌套组，请向表单组实例添加一个嵌套\n<code>address</code>元素。\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts（嵌套表单组）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"nested-formgroup\">\n  import { \n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core'; import { \n <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms'; @\n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ standalone: true, selector: 'app-profile-editor', templateUrl: './profile-editor.component.html', styleUrls: ['./profile-editor.component.css'], }) export class ProfileEditorComponent { profileForm = new \n <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({ firstName: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), lastName: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), address: new \n <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({ street: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), city: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), state: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), zip: new \n <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''), }), }); } \n</code-example>在此示例中，\n<code>地址组</code>将当前的\n<code>firstName</code>和\n<code>lastName</code>控件与新的\n<code>street</code>、\n<code>city</code>、\n<code>state</code>和\n<code>zip</code>控件组合在一起。尽管表单组中的\n<code>地址</code>元素是整体\n<code>profileForm</code>元素中的子元素，但与值和状态更改相关的规则仍然适用。来自嵌套表单组的状态和值更改会传播到父表单组，保持整体模型的一致性。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dr5xlkyuxps8a08n0h28539gr\">在模板中对嵌套表单进行分组</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a018m7re1q7n2kuro6063orgt\">在组件类中更新模型后，更新模板以连接表单组实例及其输入元素。将包含\n<code>street</code>、\n<code>city</code>、\n<code>state</code>和\n<code>zip</code>字段的\n<code>address</code>表单组添加到\n<code>ProfileEditor</code>模板中。\n<code-example header=\"src/app/profile-editor/profile-editor.component.html（模板嵌套表单组）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.html\" region=\"formgroupname\">\n  &lt;div \n <a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a>=\"address\"&gt; &lt;h2&gt;地址&lt;/h2&gt; &lt;label for=\"street\"&gt;街道： &lt;/label&gt; &lt;input id=\"street\" type=\"text\" \n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"street\"&gt; &lt;label for=\"city\"&gt;城市： &lt;/label&gt; &lt;input id=\"city\" type=\"text\" \n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"city\"&gt; &lt;label for=\"state\"&gt;州： &lt;/label&gt; &lt;input id=\"state\" type=\"text\" \n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"state\"&gt; &lt;label for=\"zip\"&gt;邮政编码： &lt;/label&gt; &lt;input id=\"zip\" type=\"text\" \n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"zip\"&gt; &lt;/div&gt; \n</code-example>\n<code>ProfileEditor</code>表单显示为一组，但模型进一步分解以表示逻辑分组区域。\n<div class=\"lightbox\"> \n <img alt=\"个人资料编辑器更新添加地址输入，填写表单以启用提交按钮的指示文本以及禁用的提交按钮\" src=\"generated/images/guide/reactive-forms/profile-editor-2.png\" width=\"400\" height=\"739\"> \n</div>\n<div class=\"alert is-helpful\"> \n <strong>提示</strong>：\n <br>使用\n <code>value</code>属性和\n <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a></code>在组件模板中显示表单组实例的值。\n</div></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"updating-parts-of-the-data-model\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79doltm3ltchl1q64nsndmvuf\">更新部分数据模型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#updating-parts-of-the-data-model\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s6y6b45jen7eps4hgeogeol7\">当修改包含多个 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 实例的值时，你可能只希望更新模型中的一部分，而不是完全替换掉。这一节会讲解该如何更新表单控件数据模型模型中的一部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2cehnv06ru6paj612vwoosni\">有两种更新模型值的方式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xubgaqmffibk0p3s7z4lwoiw\">方法</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>setValue()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1h74gdjermlato26kgh7i114\">为单个控件设置新值。\n<code>setValue()</code>方法严格遵循表单组的结构，并替换控件的整个值。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>patchValue()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ryky193pgg1eahtuxvlm28la\">替换在表单模型中已更改的任何已定义属性。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"csdob4rucokriy7d48yb1er6a\"><code>setValue()</code> 方法的严格检查可以帮助你捕获复杂表单嵌套中的错误，而 <code>patchValue()</code> 在遇到那些错误时可能会默默的失败。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akd417lsh82sj3s5w4e2wy09j\">在 <code>ProfileEditorComponent</code> 中，使用 <code>updateProfile</code> 方法传入下列数据可以更新用户的名字与街道住址。</p>\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (patch value)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"patch-value\">\nupdateProfile() {\n  this.profileForm.patchValue({\n    firstName: 'Nancy',\n    address: {\n      street: '123 Drew Street',\n    },\n  });\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b72t9pes0pmkixn592abvg42e\">通过往模板中添加一个按钮来模拟一次更新操作，以修改用户档案。</p>\n<code-example header=\"src/app/profile-editor/profile-editor.component.html (update value)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.html\" region=\"patch-value\">\n&lt;button type=\"button\" (click)=\"updateProfile()\"&gt;Update Profile&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmgque1lf9ed1ylgwjew69h81\">当点击按钮时，<code>profileForm</code> 模型中只有 <code>firstName</code> 和 <code>street</code> 被修改了。注意，<code>street</code> 是在 <code>address</code> 属性的对象中被修改的。这种结构是必须的，因为 <code>patchValue()</code> 方法要针对模型的结构进行更新。<code>patchValue()</code> 只会更新表单模型中所定义的那些属性。</p>\n<h2 id=\"using-the-formbuilder-service-to-generate-controls\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edqcwfo3te608olip9ptu0mac\">使用 FormBuilder 服务生成控件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#using-the-formbuilder-service-to-generate-controls\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"az1bd6o3qvxgxrhotxcoqsla2\">当需要与多个表单打交道时，手动创建多个表单控件实例会非常繁琐。<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服务提供了一些便捷方法来生成表单控件。<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 在幕后也使用同样的方式来创建和返回这些实例，只是用起来更简单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4k4pjx3m0p92jn6zaiwkd6vct\">通过下列步骤可以利用这项服务。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ci1w8ldkxy0qfgmgm9sdf6nok\">导入 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 类。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qdsj89hwqbhyohgmtyllr8eo\">注入这个 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服务。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pk42y7ozodrg64k4uizl841h\">生成表单内容。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bht3aqkhgfnatyiy254ljhk8u\">下面的例子展示了如何重构 <code>ProfileEditor</code> 组件，用 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服务来代替手工创建这些 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 和 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 实例。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7nkaf80o8zqmnarc7kjox23fg\">导入FormBuilder类</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6g0xma9z6gks0hdxjj5b2v1pc\">从\n<code>@angular/forms</code>包中导入\n<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>类。\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts（导入）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"form-builder-imports\">\n  import { \n <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> } from '@angular/forms'; \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aelqijlgak9h5pnglk00owy41\">注入FormBuilder服务</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1c95x5mxjr3ahv7xolw4d9ezo\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>服务是一个可注入的提供者，它会随着响应式表单模块一起提供。通过将其添加到组件构造函数中，来注入此依赖项。\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts（构造函数）\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"inject-form-builder\">\n  constructor(private formBuilder: \n <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) {} \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hab1kzm365vmk452i1c4xgjq\">生成表单控件</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8eqwdojqpel7mdck0dis98t59\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服务有三个方法：\n<code>control()</code>、\n<code>group()</code> 和 \n<code>array()</code>。 这些是用于在你的组件类中生成实例的工厂方法，包括表单控件、表单组和表单数组。 使用 \n<code>group</code> 方法创建 \n<code>profileForm</code> 控件。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (表单构建器)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"form-builder\">\n  import { \n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core'; import { \n <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> } from '@angular/forms'; @\n <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ standalone: true, selector: 'app-profile-editor', templateUrl: './profile-editor.component.html', styleUrls: ['./profile-editor.component.css'], }) export class ProfileEditorComponent { profileForm = this.formBuilder.group({ firstName: [''], lastName: [''], address: this.formBuilder.group({ street: [''], city: [''], state: [''], zip: [''], }), }); constructor(private formBuilder: \n <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) {} } \n</code-example> 在上面的示例中，你使用相同的对象和 \n<code>group()</code> 方法来定义模型中的属性。 每个控件名称的值是一个包含初始值的数组中的第一个项目。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"basic-form-validation\"></a></p>\n<h2 id=\"validating-form-input\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj26fyjitoxu8l9ytnse5nhrn\">验证表单输入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#validating-form-input\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"268ovkd9gv4dj2vkpq1cyla8x\"><em>表单验证</em>用于确保用户的输入是完整和正确的。本节讲解了如何把单个验证器添加到表单控件中，以及如何显示表单的整体状态。表单验证的更多知识在<a href=\"guide/form-validation\" title=\"关于表单验证\">表单验证</a>一章中有详细的讲解。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7sgoiyfn4kf80g7tgyh1kca54\">使用下列步骤添加表单验证。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eydluqlol4f42nx635myt1a68\">在表单组件中导入一个验证器函数。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vu0gf0n4rugytpa636zt97o9\">把这个验证器添加到表单中的相应字段。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7rmq7st6jkmp3tqo9ik46nv2i\">添加逻辑来处理验证状态。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jvyzo51dot5jc6q372knfw1h\">最常见的验证是做一个必填字段。下面的例子给出了如何在 <code>firstName</code> 控件中添加必填验证并显示验证结果的方法。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tf2rpeh96tfgm71f7jkxa0sz\">导入验证器函数</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c3lni40rckl18vd908a170cqw\">响应式表单包含一组用于常见用例的验证器函数。 这些函数接收要根据其进行验证的控件，并根据验证检查返回一个错误对象或空值。 导入 \n<code><a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a></code> 类自 \n<code>@angular/forms</code> 包。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (导入)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"validator-imports\">\n  import { \n <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms'; \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adgea8vzvev2bk63mdiekpynx\">使字段为必填</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjc98yrzygbj5racizvh4z8fv\">在 \n<code>ProfileEditor</code> 组件中，将 \n<code>Validators.required</code> 静态方法作为 \n<code>firstName</code> 控件数组的第二个项目添加到数组中。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (必填验证器)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"required-validator\">\n  profileForm = this.formBuilder.group({ firstName: ['', Validators.required], lastName: [''], address: this.formBuilder.group({ street: [''], city: [''], state: [''], zip: [''], }), }); \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72nqjoaef0xg4ezkf34ct5ydb\">显示表单状态</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"drhfubv8rsozzohl60o1p7ph9\">当向表单控件添加必填字段时，其初始状态为无效。 这种无效状态会传播到父表单组元素，使其状态无效。 通过其 \n<code>status</code> 属性访问表单组实例的当前状态。 使用插值显示 \n<code>profileForm</code> 的当前状态。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.html (显示状态)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"display-status\">\n  &lt;p&gt;\n <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> 状态: {{ profileForm.status }}&lt;/p&gt; \n</code-example> \n<div class=\"lightbox\"> \n <img alt=\"带有无效验证状态的个人资料编辑器\" src=\"generated/images/guide/reactive-forms/profile-editor-3.png\" width=\"400\" height=\"737\"> \n</div> 由于必填的 \n<code>firstName</code> 表单控件，\n<strong>提交</strong> 按钮被禁用。 填写 \n<code>firstName</code> 输入后，表单变为有效，\n<strong>提交</strong> 按钮将启用。 了解更多表单验证信息，请访问 \n<a href=\"guide/form-validation\" title=\"关于表单验证的所有内容\">表单验证</a> 指南。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"dynamic-forms\"></a></p>\n<h2 id=\"creating-dynamic-forms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1i171v2m669qwsefxozcpdj\">创建动态表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#creating-dynamic-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dpksqwohc7qs3ahyi7d8msu\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 是 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 之外的另一个选择，用于管理任意数量的匿名控件。像 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 实例一样，你也可以往 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 中动态插入和移除控件，并且 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 实例的值和验证状态也是根据它的子控件计算得来的。不过，你不需要为每个控件定义一个名字作为 key，因此，如果你事先不知道子控件的数量，这就是一个很好的选择。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ibuq0m3xr9h2akonojvkmgj7\">要定义一个动态表单，请执行以下步骤。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"behlyau42hk1mxjwlenx6tq9q\">导入 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 类。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19hecn4isg16moapf051gga2p\">定义一个 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 控件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qj1j7r6vkghs2f7jq4l10lo0\">使用 getter 方法访问 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 控件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7t5avvfbcvppfs3lboxdc6bfm\">在模板中显示这个表单数组。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab8p1tm2z88xecqnw8tq6ttks\">下面的例子展示了如何在 <code>ProfileEditor</code> 中管理<em>别名</em>数组。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mrmhabmulen10w0rlhu0uhf\">操作</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7y41k57h77dzg7givzfppuu7q\">导入 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 类</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2833fhf8mth6q4qimpvvwkicp\">从 \n<code>@angular/forms</code> 导入 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 类以用于类型信息。 \n<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服务已准备好创建 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 实例。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (导入)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"form-array-imports\">\n  import { \n <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a> } from '@angular/forms'; \n</code-example></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ej7mev7z3osk7qhn8k1gk9e6k\">定义 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 控件</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4k2j82fdj6kzr4hzzmhuz5r2w\">你可以通过在数组中定义来初始化表单数组，其控件数量可以是从零到多个。 为 \n<code>profileForm</code> 的表单组实例添加 \n<code>aliases</code> 属性以定义表单数组。 使用 \n<code><a href=\"api/forms/FormBuilder#array\" class=\"code-anchor\">FormBuilder.array()</a></code> 方法定义数组，并使用 \n<code><a href=\"api/forms/FormBuilder#control\" class=\"code-anchor\">FormBuilder.control()</a></code> 方法将初始控件填充到数组中。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (别名表单数组)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"aliases\">\n  profileForm = this.formBuilder.group({ firstName: ['', Validators.required], lastName: [''], address: this.formBuilder.group({ street: [''], city: [''], state: [''], zip: [''], }), aliases: this.formBuilder.array([this.formBuilder.control('')]), }); \n</code-example> 表单组实例中的别名控件现在填充有单个控件，直到动态添加更多控件。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"518vydh802i3kq2n6w73oj03g\">访问 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 控件</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1tzhgsfd0v54fumot9afmddzj\">与重复使用 \n<code>profileForm.get()</code> 方法以获取每个实例相比，getter 提供了访问表单数组实例中的别名的方式。 表单数组实例代表数组中未定义数量的控件。 通过 getter 方式方便地访问控件，并且这种方法对于重复使用以获取其他控件非常简单。 使用 getter 语法创建一个 \n<code>aliases</code> 类属性以从父表单组中检索别名的表单数组控件。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (别名 getter)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"aliases-getter\">\n  get aliases() { return this.profileForm.get('aliases') as \n <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>; } \n</code-example> \n<div class=\"alert is-helpful\"> \n <strong>注意</strong>: \n <br> 因为返回的控件类型为 \n <code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code>，你需要提供明确的类型以访问表单数组实例的方法语法。 \n</div> 定义一个方法，动态将别名控件插入到别名表单数组中。 \n<code><a href=\"api/forms/FormArray#push\" class=\"code-anchor\">FormArray.push()</a></code> 方法将控件作为数组中的新项插入。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (添加别名)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"add-alias\">\n  addAlias() { this.aliases.push(this.formBuilder.control('')); } \n</code-example> 在模板中，每个控件显示为单独的输入字段。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y2kebvgnekz8oges653ecat9\">在模板中显示表单数组</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"euu3m3pfdei8lzua84vcwug89\">要将别名从你的表单模型附加到模板中，必须将其添加到模板中。 类似于由 \n<code>FormGroupNameDirective</code> 提供的 \n<code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a></code> 输入，\n<code><a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a></code> 通过 \n<code>FormArrayNameDirective</code> 将通信从表单数组实例绑定到模板。 在关闭 \n<code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a></code> 元素的 \n<code>&lt;div&gt;</code> 后添加以下模板 HTML。 \n<code-example header=\"src/app/profile-editor/profile-editor.component.html (别名表单数组模板)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"formarrayname\">\n  &lt;div \n <a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"aliases\"&gt; &lt;h2&gt;别名&lt;/h2&gt; &lt;button type=\"button\" (click)=\"addAlias()\"&gt;+ 添加另一个别名&lt;/button&gt; &lt;div *\n <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let alias of aliases.controls; let i=index\"&gt; &lt;!-- 重复的别名模板 --&gt; &lt;label for=\"alias-{{ i }}\"&gt;别名:&lt;/label&gt; &lt;input id=\"alias-{{ i }}\" type=\"text\" [\n <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"i\"&gt; &lt;/div&gt; &lt;/div&gt; \n</code-example> \n<code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 指令遍历由别名表单数组实例提供的每个表单控件实例。 因为表单数组元素没有名称，所以将索引分配给 \n<code>i</code> 变量，并将其传递给每个控件以绑定到 \n<code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> 输入。 \n<div class=\"lightbox\"> \n <img alt=\"带有别名部分的个人资料编辑器，包括一个别名标签、输入和用于添加另一个别名文本输入的按钮\" src=\"generated/images/guide/reactive-forms/profile-editor-4.png\" width=\"400\" height=\"945\"> \n</div> 每次添加新别名实例时，新的表单数组实例根据索引提供其控件。 这使你可以在计算根控件的状态和值时跟踪每个单独的控件。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bzevn4u589buadx1kuedp5fy\">添加别名</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ckmbohlg2he36afhg90d4iyrt\">初始时，表单包含一个 \n<code>别名</code> 字段。 要添加另一个字段，请单击 \n<strong>添加别名</strong> 按钮。 你还可以验证表单模型中报告的别名数组，该别名数组由模板底部显示的 \n<code><a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> Value</code> 显示。 \n<div class=\"alert is-helpful\"> \n <strong>注意</strong>: \n <br> 与为每个别名创建一个表单控件实例相比，你可以使用其他字段组成另一个表单组实例。 定义每个项目的控件的过程相同。 \n</div></td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"reactive-forms-api\"></a></p>\n<h2 id=\"reactive-forms-api-summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jv6zxxi13f8zqdhdbpyr938a\">响应式表单 API 汇总<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#reactive-forms-api-summary\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"an4zz7you3dvxoj3n8uqco1q7\">下表给出了用于创建和管理响应式表单控件的基础类和服务。要了解完整的语法，请参阅 API 文档中的 <a href=\"api/forms\" title=\"API 参考。\">Forms 包</a>。</p>\n<h4 id=\"classes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtpuzegyjmcbul5yz5jn1ham3\">类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#classes\"><i class=\"material-icons\">link</i></a></h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"985cbtp8j98j90yytg5u911v3\">类</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bmp1rjwd8jokeyyoeaf2aqw\">具体表单控件类 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>、\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 \n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 的抽象基类。 它提供它们的共同行为和属性。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1yusncunhmpnr8yg1ahmy711\">管理单个表单控件的值和有效状态。 它对应于 HTML 表单控件，如 \n<code>&lt;input&gt;</code> 或 \n<code>&lt;select&gt;</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5e5546knnpt4ysxmfbq4cgumv\">管理一组\n<code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code>实例的值和有效状态。该组的属性包括其子控件。组件中顶级表单是\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fyvzttgct4kvpcz3s3ge18rn\">管理一个数字索引数组的\n<code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code>实例的值和有效状态。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b9w17tl2xehs5rewqshsi2y4e\">一个可注入的服务，提供用于创建控件实例的工厂方法。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1s4se8zp40qy26on8z2vhmkl7\">跟踪一组\n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>实例的值和有效状态，每个实例具有相同的值类型。</td>\n</tr>\n</tbody>\n</table>\n\n<h4 id=\"directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\">指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#directives\"><i class=\"material-icons\">link</i></a></h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1qejxun37dz68k5ig2h0hy3bw\">指令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormControlDirective\" class=\"code-anchor\">FormControlDirective</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"coljjk69zgcnzel8md01uct45\">将独立的\n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>实例与表单控件元素同步。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">FormControlName</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qilrg25w4hb54hnnjrg6b09g\">将现有\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>实例中的\n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>按名称与表单控件元素同步。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormGroupDirective\" class=\"code-anchor\">FormGroupDirective</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6iz8ibbyr5ggae2wk7ywlwden\">将现有\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>实例与DOM元素同步。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">FormGroupName</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hfnguux6tzliqvt1n77knpxp\">将嵌套的\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>实例与DOM元素同步。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormArrayName\" class=\"code-anchor\">FormArrayName</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqze3rs8ctd7qhjyofwhi3r0c\">将嵌套的\n<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>实例与DOM元素同步。</td>\n</tr>\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Fri Sep 08 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/forms/FormArrayName\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/forms/FormGroupDirective\n - api/forms/FormGroupName\n - api/forms/ReactiveFormsModule\n - guide/dynamic-form\n - guide/example-apps-list\n - guide/form-validation\n - guide/forms-overview\n - guide/libraries\n - guide/npm-packages\n - guide/typed-forms\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/JsonPipe\n - api/common/NgFor\n - api/core/Component\n - api/core/EventEmitter\n - api/forms\n - api/forms/AbstractControl\n - api/forms/Form\n - api/forms/FormArray\n - api/forms/FormArray#push\n - api/forms/FormArrayName\n - api/forms/FormBuilder\n - api/forms/FormBuilder#array\n - api/forms/FormBuilder#control\n - api/forms/FormControl\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/FormGroupDirective\n - api/forms/FormGroupName\n - api/forms/FormRecord\n - api/forms/ReactiveFormsModule\n - api/forms/Validators\n - cli/generate#component-command\n - guide/architecture\n - guide/form-validation\n - guide/forms\n - guide/forms-overview\n - guide/glossary#observable\n - guide/reactive-forms#adding-a-basic-form-control\n - guide/reactive-forms#basic-form-validation\n - guide/reactive-forms#classes\n - guide/reactive-forms#creating-dynamic-forms\n - guide/reactive-forms#creating-nested-form-groups\n - guide/reactive-forms#directives\n - guide/reactive-forms#displaying-a-form-control-value\n - guide/reactive-forms#dynamic-forms\n - guide/reactive-forms#grouping-form-controls\n - guide/reactive-forms#nested-groups\n - guide/reactive-forms#overview-of-reactive-forms\n - guide/reactive-forms#prerequisites\n - guide/reactive-forms#reactive-forms\n - guide/reactive-forms#reactive-forms-api\n - guide/reactive-forms#reactive-forms-api-summary\n - guide/reactive-forms#replacing-a-form-control-value\n - guide/reactive-forms#updating-parts-of-the-data-model\n - guide/reactive-forms#using-the-formbuilder-service-to-generate-controls\n - guide/reactive-forms#validating-form-input\n - https://www.typescriptlang.org/\n-->"}
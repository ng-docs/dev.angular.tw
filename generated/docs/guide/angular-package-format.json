{"id":"guide/angular-package-format","title":"Angular 包格式","contents":"<div class=\"content\">\n  <h1 id=\"angular-package-format\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djemh9azsuvl2vd73wcvk28bb\">Angular 包格式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#angular-package-format\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eu3oeddn8urasjn2mm0uioctf\">本文档描述了 Angular 包格式 (APF)。APF 是针对 npm 包结构和格式的 Angular 专用规范，所有第一方 Angular 包（<code>@angular/core</code> 、 <code>@angular/material</code> 等）和大多数第三方 Angular 库都使用了该规范。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ea5ieczglelbs52rkgalenz6o\">APF 能让包在使用 Angular 的大多数常见场景下无缝工作。使用 APF 的包与 Angular 团队提供的工具以及更广泛的 JavaScript 生态系统兼容。建议第三方库开发者也都遵循这种格式。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vqao9y6kyrfa9a60xopl2gb4\">APF（Angular Package Format）一直在跟随 Angular 的版本而发展，每个主要版本都会改进包格式。你可以在这份 <a href=\"https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/preview\">google 文档</a>中找到 v13 之前的版本规范。</p>\n</div>\n<h2 id=\"why-specify-a-package-format\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec7wz86lruo8janxgsf7whbw5\">为什么要指定包格式？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#why-specify-a-package-format\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3a5j1fpqdwl430atagcsgmg2i\">在当今的 JavaScript 环境中，开发人员将使用多种不同的工具链（Webpack、rollup、esbuild 等）以多种不同的方式使用包。这些工具可能理解并需要不同的输入 —— 一些工具能处理最新的 ES 语言版本，而其他工具也许要直接使用较旧的 ES 版本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wdzn73ybksvzociqsd08bksq\">这种 Angular 分发格式支持所有常用的开发工具和工作流，并着重于优化，从而缩小应用程序有效负载大小或缩短开发迭代周期（构建时间）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cme899ilaavr0ry4hn052v9j7\">开发人员可以依靠 Angular CLI 和 <a href=\"https://github.com/ng-packagr/ng-packagr\">ng-packagr</a>（Angular CLI 使用的构建工具）来生成 APF 格式的包。有关更多详细信息，参阅<a href=\"guide/creating-libraries\">创建库</a>指南。</p>\n<h2 id=\"file-layout\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60zl4qg1jig7bd5u898e1a8ws\">文件布局<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#file-layout\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19co7s5t9m7g2y36t6asjliyc\">以下示例显示了 <code>@angular/core</code> 包文件布局的简化版本，并附有对包中每个文件的解释。</p>\n<div class=\"filetree\">\n    <div class=\"file\">\n      node_modules/@angular/core\n    </div>\n    <div class=\"children\">\n        <div class=\"file\">\n          README.md &nbsp; <!-- // &lt;-- Package README, used by npmjs web UI. -->\n        </div>\n        <div class=\"file\">\n          package.json &nbsp; <!-- // &lt;-- Primary package.json, describing the package itself as well as all available entrypoints and code formats. This file contains the \"exports\" mapping used by runtimes and tools to perform module resolution. -->\n        </div>\n        <div class=\"file\">\n          index.d.ts &nbsp; <!-- // &lt;-- Bundled .d.ts for the primary entrypoint &commat;angular/core. -->\n        </div>\n        <div class=\"file\">\n          esm2022 &nbsp; <!-- // &lt;-- Tree of &commat;angular/core sources in unflattened ES2022 format. -->\n        </div>\n        <div class=\"children\">\n            <div class=\"file\">\n              core.mjs\n            </div>\n            <div class=\"file\">\n              index.mjs\n            </div>\n            <div class=\"file\">\n              public_api.mjs\n            </div>\n            <div class=\"file\">\n              testing &nbsp; <!-- // &lt;-- Tree of the &commat;angular/core/testing entrypoint in unflattened ES2022 format. -->\n            </div>\n        </div>\n        <div class=\"file\">\n          fesm2022 &nbsp; <!-- // &lt;-- Code for all entrypoints in flattened \\(FESM\\) ES2022 format, along with sourcemaps. -->\n        </div>\n        <div class=\"children\">\n            <div class=\"file\">\n              core.mjs\n            </div>\n            <div class=\"file\">\n              core.mjs.map\n            </div>\n            <div class=\"file\">\n              testing.mjs\n            </div>\n            <div class=\"file\">\n              testing.mjs.map\n            </div>\n        </div>\n        <div class=\"file\">\n          testing &nbsp; <!-- // &lt;-- Directory representing the \"testing\" entrypoint. -->\n        </div>\n        <div class=\"children\">\n            <div class=\"file\">\n              index.d.ts &nbsp; <!-- // &lt;-- Bundled .d.ts for the &commat;angular/core/testing entrypoint. -->\n            </div>\n        </div>\n    </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8r7u6ra2vxlrbr10x497uo6jo\">此表描述了 <code>node_modules/@angular/core</code> 下的文件布局，注释为描述文件和目录的用途：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n2c7wfntpyw9gnmnqx5bqxht\">文件</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"297niinze7mn1fnajtyjcs0tb\">目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>README.md</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dftwh4hqixdt0ot4bhmden7l2\">包的 README，在 npmjs 网页界面中使用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>package.json</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zlmxcwc7kyxnwrakpb87g51z\">主要的\n<code>package.json</code>，描述了包本身以及所有可用的入口点和代码格式。此文件包含了供运行时和工具使用的\"exports\"映射，以执行模块解析。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>index.d.ts</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"h5ajmsbyzuh0luid7xpv5ctj\">主入口点\n<code>@angular/core</code>的捆绑\n<code>.d.ts</code>。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cx4f4trsnciqv2j92xnqgr78\"><code>esm2022/</code> \n<br> &nbsp;&nbsp;─ \n<code>core.mjs</code> \n<br> &nbsp;&nbsp;─ \n<code>index.mjs</code> \n<br> &nbsp;&nbsp;─ \n<code>public_api.mjs</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5faa2bjo0scvazkc9ryrp2u0n\"><code>@angular/core</code>源码树，以未压平的 ES2022 格式呈现。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>esm2022/testing/</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mxgrgu49bblrtkdqrvbw7dov\"><code>@angular/core/testing</code>入口点的源码树，以未压平的 ES2022 格式呈现。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lfojpef33ccs37x5g32fmkd4\"><code>fesm2022/</code> \n<br> &nbsp;&nbsp;─ \n<code>core.mjs</code> \n<br> &nbsp;&nbsp;─ \n<code>core.mjs.map</code> \n<br> &nbsp;&nbsp;─ \n<code>testing.mjs</code> \n<br> &nbsp;&nbsp;─ \n<code>testing.mjs.map</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aad3ub28jlpxeat2yq1096o8n\">所有入口点的代码以压平（FESM）ES2022格式和源映射呈现。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>testing/</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2t17dqvjnpiwywg4cpm0go868\">代表\"testing\"入口点的目录。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>testing/index.d.ts</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"audlagbj9fqk1zlbbax3uakio\"><code>@angular/core/testing</code>入口点的捆绑\n<code>.d.ts</code>。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"packagejson\"><code>package.json</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#packagejson\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b18a1onvyhemr58sva7xhsldc\">主 <code>package.json</code> 包含重要的包元数据，包括以下内容：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6deypq6wqq40ges6u4y51ajm0\">它把此包<a href=\"guide/angular-package-format#esm-declaration\">声明</a>为 EcmaScript 模块 (ESM) 格式</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99tke0c1fyzs0ej89pq1q4r5h\">它包含一个 <a href=\"guide/angular-package-format#exports\"><code>\"exports\"</code> 字段</a>，用于定义所有入口点的可用源码格式</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bs6eawdb603r3pu8td4p05p\">它包含定义主入口点 <code>@angular/core</code> 的可用源码格式的<a href=\"guide/angular-package-format#legacy-resolution-keys\">一些键</a>，供不理解 <code>\"exports\"</code> 的工具使用。这些键已弃用，随着对 <code>\"exports\"</code> 的支持在整个生态系统中逐步退出，这些键将被删除。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eu40m2o50powb9oktqjv91zye\">它声明此包是否包含<a href=\"guide/angular-package-format#side-effects\">副作用</a></p>\n</li>\n</ul>\n<h3 id=\"esm-declaration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e56nk5cdw0rhsdr7ish6iey63\">ESM 声明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#esm-declaration\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6c5wusrm7u39lmpzc9t73fmut\">顶级 <code>package.json</code> 包含此键：</p>\n<code-example language=\"javascript\">\n\n{\n  \"type\": \"module\"\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wjhw9bi8le759wy2jiv0nlir\">这会通知解析器，此包中的代码正在使用 EcmaScript 模块而不是 CommonJS 模块。</p>\n<h3 id=\"exports\"><code>\"exports\"</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#exports\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23bd3layuz0srlzzbtth7nkpg\"><code>\"exports\"</code> 字段具有以下结构：</p>\n<code-example language=\"javascript\">\n\n\"exports\": {\n  \"./schematics/*\": {\n    \"default\": \"./schematics/*.js\"\n  },\n  \"./package.json\": {\n    \"default\": \"./package.json\"\n  },\n  \".\": {\n    \"types\": \"./core.d.ts\",\n    \"esm\": \"./esm2022/core.mjs\",\n    \"esm2022\": \"./esm2022/core.mjs\",\n    \"default\": \"./fesm2022/core.mjs\"\n  },\n  \"./testing\": {\n    \"types\": \"./testing/testing.d.ts\",\n    \"esm\": \"./esm2022/testing/testing.mjs\",\n    \"esm2022\": \"./esm2022/testing/testing.mjs\",\n    \"default\": \"./fesm2022/testing.mjs\"\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"341f4o2kvr3vmp8rls5t1p1t4\">主要看 <code>\".\"</code> 和 <code>\"./testing\"</code> 这两个键，它们分别定义了 <code>@angular/core</code> 主要入口点和 <code>@angular/core/testing</code> 次要入口点的可用代码格式。对于每个入口点，可用的格式为：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyud1ifnjjmski3sq0abf9rs\">格式</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80hx5tehf2rwur97qgesrgak3\">类型（\n<code>.d.ts</code>文件）</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d85m7o30ybsiady4cwvp7wyi8\"><code>.d.ts</code>文件在 TypeScript 依赖于给定包时使用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>es2022</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu4x70x7zy81nbyud211740tn\">ES2022代码压平成单个源文件。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>esm2022</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ca2p0q8s9r5tbvgsnv5puzbzv\">未压平的源文件中的ES2022代码（此格式包含用于实验的内容 - 有关详细信息，请参阅\n<a href=\"guide/angular-package-format#note-about-the-defaults-in-packagejson\">这里关于默认值的讨论</a>）。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>default</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53x1oy3pmpgto1334i7e4pxv6\">ES2022代码压平成单个源。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elyl8r6s6983rmfz7recn6yqj\">能理解这些键名的工具可以优先从 <code>\"exports\"</code> 中选择所需的代码格式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"260qzu56w8t9vjgp27z9ckga8\">库可能希望公开其他静态文件，这些文件没有被基于 JavaScript 的入口点（比如 Sass mixins 或预编译的 CSS）的导出所捕获。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"181kgrbe4oi0j444wkh153yj1\">有关更多信息，参阅<a href=\"guide/creating-libraries#managing-assets-in-a-library\">管理库中的资产</a>。</p>\n<h3 id=\"legacy-resolution-keys\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jz9a3vknf2lcrksjq8bn6dsa\">旧版解析键<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#legacy-resolution-keys\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7yxn9krwhryfu4itp4euh10f\">除了 <code>\"exports\"</code> 之外，顶级 <code>package.json</code> 还为不支持 <code>\"exports\"</code> 的解析器定义了旧模块解析键。对于 <code>@angular/core</code>，这些是：</p>\n<code-example language=\"javascript\">\n\n{\n  \"module\": \"./fesm2022/core.mjs\",\n  \"typings\": \"./core.d.ts\",\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bx7l277711iokrfmvonsv0gt1\">如前述代码片段所示，模块解析器可以用这些键来加载特定的代码格式。</p>\n<h3 id=\"side-effects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36atpxs4ooqf4k4lf79gfdz9y\">副作用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#side-effects\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14kq35cl5fh9mzi2z8c6la9tj\"><code>package.json</code> 的最后一个功能是声明此包是否有<a href=\"guide/angular-package-format#sideeffects-flag\">副作用</a>。</p>\n<code-example language=\"javascript\">\n\n{\n  \"sideEffects\": false\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1em4w4fzud82eevocwa1ys1vp\">大多数 Angular 包不应该依赖于顶级副作用，因此应该包含这个声明。</p>\n<h2 id=\"entrypoints-and-code-splitting\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3k84czi0cy1cl93t11avj2583\">入口点和代码拆分<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#entrypoints-and-code-splitting\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5eq090xgfy2v6lermo9bltahi\">APF 格式的包，包含一个主要入口点和零到多个次要入口点（比如 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code>）。入口点有多种功能。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jj01yfop4cxeipadxo02me5s\">它们定义了用户要从中导入代码的模块说明符（比如，<code>@angular/core</code> 和 <code>@angular/core/testing</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4iye4vsz0p6esv4owgk7rnliy\">用户通常将这些入口点视为具有不同用途或能力的不同符号组。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nxf5bv9yr15elb1rzrmpoqat\">特定入口点可能仅用于特殊目的，比如测试。此类 API 可以与主入口点分离，以减少它们被意外或错误使用的机会。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mckv5uac6fy2gywbvwd7aqyz\">它们定义了可以惰性加载代码的粒度。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1z2ywxntduzqtn0pxlgy4ciic\">许多现代构建工具只能在 ES 模块级别进行“代码拆分”（又名惰性加载）。APF 主要为每个入口点使用一个“扁平” ES 模块。这意味着大多数构建工具无法将单个入口点中的代码拆分为多个输出块。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crm988wse2yddz3mr0hces6b8\">APF 包的一般规则是为尽可能小的逻辑相关代码集使用入口点。比如，Angular Material 包将每个逻辑组件或一组组件作为单独的入口点发布 - 一个用于按钮，一个用于选项卡等。如果需要，这允许单独惰性加载每个 Material 组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32jjeux48csb2c0aha468o5j6\">并非所有库都需要这样的粒度。大多数具有单一逻辑目的的库应该作为单一入口点发布。比如 <code>@angular/core</code> 为运行时使用单个入口点，因为 Angular 运行时通常用作单个实体。</p>\n<h3 id=\"resolution-of-secondary-entry-points\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pwleubiiu0sfm8zef34t32p3\">次要入口点的解析<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#resolution-of-secondary-entry-points\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8y6pgmxshsw3m5di2jew73epl\">可以通过包的 <code>package.json</code> 的 <code>\"exports\"</code> 字段解析辅助入口点。</p>\n<h2 id=\"readmemd\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6irign9vg742h1mc20hb6qg\">自述文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#readmemd\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dia6191o065jmk3ho9yqiuck1\">Markdown 格式的 README 文件，用于在 npm 和 GitHub 上显示包的描述。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzcwvosoud92anuqcpj1647r0\">@angular/core 包的 README 内容示例：</p>\n<code-example language=\"html\">\n\nAngular\n=======\n\nThe sources for this package are in the main [Angular](https://github.com/angular/angular) repo.Please file issues and pull requests against that repo.\n\nLicense: MIT\n\n</code-example>\n<h2 id=\"partial-compilation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ezeek0ucabgjwair8akr8qn6\">部分编译<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#partial-compilation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4k5lflj0flbcjl52idlgu7hg\">APF 格式的库必须以“部分编译”模式发布。这是 <code>ngc</code> 的一种编译模式，它生成不依赖于特定 Angular 运行时版本的已编译 Angular 代码，与用于应用程序的完整编译形成对比，其中 Angular 编译器和运行时版本必须完全匹配。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8n1y5lxxyo5mjz4w8djhtgtt\">要部分编译 Angular 代码，请在 <code>tsconfig.json</code> 中的 <code>\"angularCompilerOptions\"</code> 属性中使用 <code>\"compilationMode\"</code> 标志：</p>\n<code-example language=\"javascript\">\n\n{\n  …\n  \"angularCompilerOptions\": {\n    \"compilationMode\": \"partial\",\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abfaw93kievk4ub86wjblwpae\">然后，在应用程序构建过程中，Angular CLI 将部分编译的库代码转换为完全编译的代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co48qarqhw557wsskxixtapta\">如果你的构建管道不使用 Angular CLI，参阅<a href=\"guide/creating-libraries#consuming-partial-ivy-code-outside-the-angular-cli\">在 Angular CLI 之外使用部分编译的 Ivy 代码</a>指南。</p>\n<h2 id=\"optimizations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"biaikzimxzbisviusrndzfa63\">优化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#optimizations\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"flattening-of-es-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gfzvlf9v3uxfq2ts4z309e0w\">ES 模块的扁平化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#flattening-of-es-modules\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3138op0ocig721m7qbi5cfl5e\">APF 指定代码要以“扁平化”的 ES 模块格式发布。这显著减少了 Angular 应用程序的构建时间以及最终应用程序包的下载和解析时间。请查看 Nolan Lawson 发表的优秀文章<a href=\"https://nolanlawson.com/2016/08/15/the-cost-of-small-modules\">“小模块的成本”</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5owa9k66zjfriliruauhf2lo\">Angular 编译器可以生成索引 ES 模块文件。像 Rollup 这样的工具可以用这些文件以扁平化 ES 模块（FESM）文件格式生成扁平化模块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mdb1ibmotc97xuyxp9igebkh\">FESM 是一种文件格式，它会将所有可从入口点访问的 ES 模块扁平化为单个 ES 模块。它是通过跟踪包中的所有导入并将该代码复制到单个文件中而生成的，同时保留所有公共 ES 导出并删除所有私有导入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4yq8mbp1to93vls1ll2qgws3w\">缩写名称 FESM，发音为<em>phe-som</em>，后面可以跟一个数字，例如 FESM2020。该数字是指模块内 JavaScript 的语言级别。因此，FESM2022 文件将是 ESM+ES2022 格式的，并且包括导入/导出语句和 ES2022 源代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19kqzsrijs41085m6l1gdswi4\">要生成扁平化的 ES 模块索引文件，请在 tsconfig.json 文件中使用以下配置选项：</p>\n<code-example language=\"javascript\">\n\n{\n  \"compilerOptions\": {\n    …\n    \"module\": \"esnext\",\n    \"target\": \"es2022\",\n    …\n  },\n  \"angularCompilerOptions\": {\n    …\n    \"flatModuleOutFile\": \"my-ui-lib.js\",\n    \"flatModuleId\": \"my-ui-lib\"\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41ai79gyt0py5r7ndrnbpjoqn\">一旦 ngc 生成了索引文件（比如 <code>my-ui-lib.js</code>），打包器和优化器（如 Rollup）就可用于生成扁平化的 ESM 文件。</p>\n<h4 id=\"note-about-the-defaults-in-packagejson\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4caakr55h6flyhfw6xcnlddqg\">注意 package.json 中的默认值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#note-about-the-defaults-in-packagejson\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88zh6sb46dmsfsg5kbqe8w8vs\">从 webpack v4 开始，ES 模块优化的扁平化对于 webpack 用户来说不再是必需的。当不扁平化 webpack 中的模块时，可以获得更好的代码拆分效果。在实践中，当使用未展平的模块作为 webpack v4 的输入时，仍然可能出现体积回归现象（也就是体积反而变大了）。这就是为什么 package.json 中的 <code>module</code> 和 <code>es2022</code> 条目仍然指向 FESM 文件的原因。这个问题正在调查中。预计在解决体积回归问题后，会将 package.json 中的 <code>module</code> 和 <code>es2022</code> 入口点切换为未展平的文件。APF 目前包含未扁平化的 ESM2022 代码，用于验证这种未来可能出现的更改。</p>\n<h3 id=\"sideeffects-flag\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctgt07mpuwz63p64o0hs0lbjh\">“副作用”标志<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#sideeffects-flag\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9yvogtzmeqsq4iqcfo8drrcgu\">默认情况下，EcmaScript 模块是有副作用的：从模块导入可确保该模块顶层的任何代码都将执行。这通常是不可取的，因为典型模块中的大多数副作用代码并不是真正的副作用，而是仅影响特定符号。如果没有导入和使用这些符号，通常需要在称为 tree-shaking 的优化过程中将它们删除，而副作用代码可以防止这种情况发生。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gadmfkj25ttt3zxip9dkjmmp\">诸如 Webpack 之类的构建工具支持一个标志，该标志允许包声明它们并不依赖于其模块顶层的副作用代码，从而使工具可以更自由地对包中的代码进行摇树优化。这些优化的最终结果应该是较小的包大小和代码拆分后包块中更好的代码分布。如果此优化包含非本地副作用，则此优化可能会破坏你的代码 - 然而，这在 Angular 应用程序中并不常见，并且通常是糟糕设计的标志。建议让所有包通过将 <code>sideEffects</code> 属性设置为 <code>false</code> 来声明无副作用状态，并且让开发人员遵循 <a href=\"/guide/styleguide\">Angular 风格指南</a>，这自然会导致代码没有非本地副作用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs58cgeqdrlcqm5uo6b4vhdg0\">更多信息：<a href=\"https://github.com/webpack/webpack/tree/master/examples/side-effects\">关于副作用的 webpack 文档</a></p>\n<h3 id=\"es2022-language-level\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hrsif1pwq7aevqtf97tswk9r\">ES2022 语言级别<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#es2022-language-level\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8djdpsy43wa8twc7cazpqvq5z\">ES2022 语言级别现在是 Angular CLI 和其他工具使用的默认语言级别。Angular CLI 在应用程序构建时会将捆绑包降级到所有目标浏览器都支持的语言级别。</p>\n<h3 id=\"dts-bundling--type-definition-flattening\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bu1jbmlu1nqqo0blrx3poa5y0\">d.ts 捆绑/类型定义的扁平化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#dts-bundling--type-definition-flattening\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bnd57yhucrmb8qbrri16jwsv\">从 APF v8 开始，更建议运行 <a href=\"https://api-extractor.com\">API Extractor</a> 来打包 TypeScript 定义，以便让全部 API 都出现在单个文件中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdxo48bf364qokcyldw5jl887\">在之前的 APF 版本中，每个入口点都会在 .d.ts 入口点旁边有一个 <code>src</code> 目录，该目录包含与原始源代码结构匹配的单个 d.ts 文件。虽然这种分发格式仍然被允许和支持，但非常不鼓励它，因为它会弄晕 IDE 之类的工具，然后提供错误的自动完成，并允许用户依赖深度导入的路径，这些路径通常不被认为是库或包的公共 API。</p>\n<h3 id=\"tslib\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5v3aboce3a1xi60k40kz182sm\">库<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#tslib\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byglz62n091gruqsi7ngnhvpe\">从 APF v10 开始，建议添加 tslib 作为主要入口点的直接依赖项。这是因为 tslib 版本与用来编译库的 TypeScript 版本相关联。</p>\n<h2 id=\"examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4iecnoqh39op5dvxqr6b3gip\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#examples\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gi17asti4mxffye1irbvs4ta\"><a href=\"https://unpkg.com/browse/@angular/core@17.0.0/\">@angular/core 包</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58kznqo1fyloqzqd7wfrig6b1\"><a href=\"https://unpkg.com/browse/@angular/material@17.0.0/\">@angular/material 包</a></li>\n</ul>\n<h2 id=\"definition-of-terms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2w2zxxzsdukgcllhnr0hbfz8l\">术语定义<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#definition-of-terms\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80p7vouhm9kskkgl6qif4qdco\">本文档中特意使用了以下术语。在本节中会定义所有这些以便更清晰。</p>\n<h4 id=\"package\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xgsw2mzyxp4abkks03qoyo30\">包<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#package\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dod89wnf1h7tdk9545y28k7df\">发布到 NPM 并一起安装的最小文件集，比如 <code>@angular/core</code>。该包中包含一个名为 package.json 的清单、编译后的源代码、TypeScript 定义文件、源码映射、元数据等。该包是通过 <code>npm install @angular/core</code> 安装的。</p>\n<h4 id=\"symbol\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xiw1gbpmrz9czmn84a7vngz\">符号<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#symbol\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92w5otx9brkackl3xzjlmnrno\">包含在模块中的类、函数、常量或变量，可选择通过模块导出，以便对外界可见。</p>\n<h4 id=\"module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#module\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1bxifvn3w97slblb56gf6y30\">ECMAScript 模块的缩写。包含导入和导出符号的语句的文件。这与 ECMAScript 规范中模块的定义相同。</p>\n<h4 id=\"esm\">ESM<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#esm\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vi026shzn402088um9ih6ok3\">ECMAScript 模块的缩写（见上文）。</p>\n<h4 id=\"fesm\">FESM<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#fesm\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mcnejyqcuubqc62528yms8ip\">Flattened ES Modules 的缩写，由一种文件格式组成，该文件格式是通过将所有可从入口点访问的 ES 模块扁平化为单个 ES 模块而创建的。</p>\n<h4 id=\"module-id\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gbs3a43m00rqtcvlq9jozwg9\">模块标识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#module-id\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8m7k7n8lfmlfnwybajac89lm9\">导入语句中使用的模块的标识符（比如 <code>@angular/core</code>）。此 ID 通常直接映射到文件系统上的路径，但由于有各种模块解析策略，情况也并非总是如此。</p>\n<h4 id=\"module-specifier\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjcjp0hr77rq6t950qgj37xnd\">模块说明符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#module-specifier\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8815w4qqzzlcwr6plp7w1shrj\">模块标识符（见上文）。</p>\n<h4 id=\"module-resolution-strategy\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dosh8snuj61ibvbtgwcshkbfs\">模块解析策略<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#module-resolution-strategy\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0gn968idnjabvw844myjam5\">用于将模块 ID 转换为文件系统路径的算法。Node.js 就有一个良好定义且广泛使用的，TypeScript 支持多种模块解析策略，<a href=\"https://developers.google.com/closure/compiler\">Closure Compiler</a> 还有另一种策略。</p>\n<h4 id=\"module-format\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3spjhh2ob041t7hltnspq5qwo\">模块格式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#module-format\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2hlfrc2und7rzdb357448xgq\">模块语法规范，至少涵盖从文件导入和导出的语法。常见的模块格式是 CommonJS（CJS，通常用于 Node.js 应用程序）或 ECMAScript 模块 (ESM)。模块格式仅表示单个模块的封装，而不表示用于构成模块内容的 JavaScript 语言特性。正因为如此，Angular 团队经常使用语言级别说明符作为模块格式的后缀，（例如 ESM+ES2022 指定模块为 ESM 格式并包含 ES2022 代码）。</p>\n<h4 id=\"bundle\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8t2kshuya9i2jzo3zfmilyvu0\">捆绑包<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#bundle\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ev9puo7jc2db9eildqse6bnqh\">单个 JS 文件形式的工件，由构建工具（比如 <a href=\"https://webpack.js.org\">Webpack</a>或<a href=\"https://rollupjs.org/\">Rollup</a>）生成，其中包含源自一个或多个模块的符号。捆绑包是一种浏览器专用的解决方案，可减少浏览器开始下载数百甚至数万个文件时可能造成的网络压力。Node.js 通常不使用捆绑包。常见的捆绑包格式是 UMD 和 System.register。</p>\n<h4 id=\"language-level\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kvppzx651gzgcwqlj3wv3miv\">语言级别<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#language-level\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7jph3d8o5chbdc3z1xai4ofo\">代码的语言 (ES2022)。独立于模块格式。</p>\n<h4 id=\"entry-point\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7q4w7so1wo1fmsg15jz5rvb0a\">入口点<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#entry-point\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahpymxnrbs0wudv4mwb383g3g\">旨在由用户导入的模块。它由唯一的模块 ID 引用，并导出该模块 ID 引用的公共 API。一个例子是 <code>@angular/core</code> 或 <code>@angular/core/testing</code>。<code>@angular/core</code> 包中存在两个入口点，但它们导出不同的符号。一个包可以有许多入口点。</p>\n<h4 id=\"deep-import\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47w6wkohvt40ie3bj9jwjtx59\">深度导入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#deep-import\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aagekx4dgvciae045kqmymot8\">从不是入口点的模块中检索符号的过程。这些模块 ID 通常被认为是私有 API，它们可以在项目的生命周期内或在创建给定包的捆绑包时更改。</p>\n<h4 id=\"top-level-import\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ntv48yvm295aa4hnibc80iy7\">顶级导入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#top-level-import\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6c1re2zagzr027dvy39909us4\">来自入口点的导入。可用的顶级导入定义了公共 API，并在“@angular/name”模块中公开，比如 <code>@angular/core</code> 或 <code>@angular/common</code>。</p>\n<h4 id=\"tree-shaking\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs1v547i9dx5u01qukxdvhodw\">摇树优化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#tree-shaking\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6sjfi56at63si6bq04l6foc8s\">识别和删除应用程序中未使用的代码的过程 - 也称为死代码消除。这是使用 <a href=\"https://rollupjs.org\">Rollup</a> 、 <a href=\"https://developers.google.com/closure/compiler\">Closure Compiler</a> 或 <a href=\"https://github.com/terser/terser/\">Terser</a> 等工具在应用程序级别执行的全局优化。</p>\n<h4 id=\"aot-compiler\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ac10ejizuxpvklmyi1h245a7a\">AOT 编译器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#aot-compiler\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ek5md63q9oiw4ijvwbdtz3lyc\">Angular 的预先编译器。</p>\n<h4 id=\"flattened-type-definitions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d06n5f1vmkztd1gdrcvpvubd6\">扁平类型定义<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#flattened-type-definitions\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdexpjr74mmgehdh5vxnrvfsh\">从 <a href=\"https://api-extractor.com\">API Extractor</a> 生成的捆绑 TypeScript 定义。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Mar 06 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/glossary\n-->\n<!-- links from this doc:\n - /guide/styleguide\n - api/common/http\n - guide/angular-package-format#angular-package-format\n - guide/angular-package-format#aot-compiler\n - guide/angular-package-format#bundle\n - guide/angular-package-format#deep-import\n - guide/angular-package-format#definition-of-terms\n - guide/angular-package-format#dts-bundling--type-definition-flattening\n - guide/angular-package-format#entry-point\n - guide/angular-package-format#entrypoints-and-code-splitting\n - guide/angular-package-format#es2022-language-level\n - guide/angular-package-format#esm\n - guide/angular-package-format#esm-declaration\n - guide/angular-package-format#examples\n - guide/angular-package-format#exports\n - guide/angular-package-format#fesm\n - guide/angular-package-format#file-layout\n - guide/angular-package-format#flattened-type-definitions\n - guide/angular-package-format#flattening-of-es-modules\n - guide/angular-package-format#language-level\n - guide/angular-package-format#legacy-resolution-keys\n - guide/angular-package-format#module\n - guide/angular-package-format#module-format\n - guide/angular-package-format#module-id\n - guide/angular-package-format#module-resolution-strategy\n - guide/angular-package-format#module-specifier\n - guide/angular-package-format#note-about-the-defaults-in-packagejson\n - guide/angular-package-format#optimizations\n - guide/angular-package-format#package\n - guide/angular-package-format#packagejson\n - guide/angular-package-format#partial-compilation\n - guide/angular-package-format#readmemd\n - guide/angular-package-format#resolution-of-secondary-entry-points\n - guide/angular-package-format#side-effects\n - guide/angular-package-format#sideeffects-flag\n - guide/angular-package-format#symbol\n - guide/angular-package-format#top-level-import\n - guide/angular-package-format#tree-shaking\n - guide/angular-package-format#tslib\n - guide/angular-package-format#why-specify-a-package-format\n - guide/creating-libraries\n - guide/creating-libraries#consuming-partial-ivy-code-outside-the-angular-cli\n - guide/creating-libraries#managing-assets-in-a-library\n - https://api-extractor.com\n - https://developers.google.com/closure/compiler\n - https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/preview\n - https://github.com/ng-packagr/ng-packagr\n - https://github.com/terser/terser\n - https://github.com/webpack/webpack/tree/master/examples/side-effects\n - https://nolanlawson.com/2016/08/15/the-cost-of-small-modules\n - https://rollupjs.org\n - https://unpkg.com/browse/@angular/core@17.0.0/\n - https://unpkg.com/browse/@angular/material@17.0.0/\n - https://webpack.js.org\n-->"}
{"id":"guide/angular-package-format","title":"Angular 套件格式","contents":"<div class=\"content\">\n  <h1 id=\"angular-package-format\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djemh9azsuvl2vd73wcvk28bb\">Angular 套件格式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#angular-package-format\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eu3oeddn8urasjn2mm0uioctf\">本文件描述了 Angular 套件格式 (APF)。APF 是針對 npm 套件結構和格式的 Angular 專用規範，所有第一方 Angular 套件（<code>@angular/core</code> 、 <code>@angular/material</code> 等）和大多數第三方 Angular 函式庫都使用了該規範。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ea5ieczglelbs52rkgalenz6o\">APF 能讓套件在使用 Angular 的大多數常見場景下無縫工作。使用 APF 的套件與 Angular 團隊提供的工具以及更廣泛的 JavaScript 生態系統相容。建議第三方函式庫開發者也都遵循這種格式。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vqao9y6kyrfa9a60xopl2gb4\">APF（Angular Package Format）一直在跟隨 Angular 的版本而發展，每個主要版本都會改進套件格式。你可以在這份 <a href=\"https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/preview\">google 文件</a>中找到 v13 之前的版本規範。</p>\n</div>\n<h2 id=\"why-specify-a-package-format\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec7wz86lruo8janxgsf7whbw5\">為什麼要指定套件格式？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#why-specify-a-package-format\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3a5j1fpqdwl430atagcsgmg2i\">在當今的 JavaScript 環境中，開發人員將使用多種不同的工具鏈（Webpack、rollup、esbuild 等）以多種不同的方式使用套件。這些工具可能理解並需要不同的輸入 —— 一些工具能處理最新的 ES 語言版本，而其他工具也許要直接使用較舊的 ES 版本。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wdzn73ybksvzociqsd08bksq\">這種 Angular 分發格式支援所有常用的開發工具和工作流，並著重於最佳化，從而縮小應用程式有效負載大小或縮短開發迭代週期（建立時間）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cme899ilaavr0ry4hn052v9j7\">開發人員可以依靠 Angular CLI 和 <a href=\"https://github.com/ng-packagr/ng-packagr\">ng-packagr</a>（Angular CLI 使用的建立工具）來生成 APF 格式的套件。有關更多詳細訊息，參閱<a href=\"guide/creating-libraries\">建立函式庫</a>指南。</p>\n<h2 id=\"file-layout\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60zl4qg1jig7bd5u898e1a8ws\">檔案佈局<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#file-layout\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19co7s5t9m7g2y36t6asjliyc\">以下範例顯示了 <code>@angular/core</code> 套件檔案佈局的簡化版本，並附有對套件中每個檔案的解釋。</p>\n<div class=\"filetree\">\n    <div class=\"file\">\n      node_modules/@angular/core\n    </div>\n    <div class=\"children\">\n        <div class=\"file\">\n          README.md &nbsp; <!-- // &lt;-- Package README, used by npmjs web UI. -->\n        </div>\n        <div class=\"file\">\n          package.json &nbsp; <!-- // &lt;-- Primary package.json, describing the package itself as well as all available entrypoints and code formats. This file contains the \"exports\" mapping used by runtimes and tools to perform module resolution. -->\n        </div>\n        <div class=\"file\">\n          index.d.ts &nbsp; <!-- // &lt;-- Bundled .d.ts for the primary entrypoint &commat;angular/core. -->\n        </div>\n        <div class=\"file\">\n          esm2022 &nbsp; <!-- // &lt;-- Tree of &commat;angular/core sources in unflattened ES2022 format. -->\n        </div>\n        <div class=\"children\">\n            <div class=\"file\">\n              core.mjs\n            </div>\n            <div class=\"file\">\n              index.mjs\n            </div>\n            <div class=\"file\">\n              public_api.mjs\n            </div>\n            <div class=\"file\">\n              testing &nbsp; <!-- // &lt;-- Tree of the &commat;angular/core/testing entrypoint in unflattened ES2022 format. -->\n            </div>\n        </div>\n        <div class=\"file\">\n          fesm2022 &nbsp; <!-- // &lt;-- Code for all entrypoints in flattened \\(FESM\\) ES2022 format, along with sourcemaps. -->\n        </div>\n        <div class=\"children\">\n            <div class=\"file\">\n              core.mjs\n            </div>\n            <div class=\"file\">\n              core.mjs.map\n            </div>\n            <div class=\"file\">\n              testing.mjs\n            </div>\n            <div class=\"file\">\n              testing.mjs.map\n            </div>\n        </div>\n        <div class=\"file\">\n          testing &nbsp; <!-- // &lt;-- Directory representing the \"testing\" entrypoint. -->\n        </div>\n        <div class=\"children\">\n            <div class=\"file\">\n              index.d.ts &nbsp; <!-- // &lt;-- Bundled .d.ts for the &commat;angular/core/testing entrypoint. -->\n            </div>\n        </div>\n    </div>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8r7u6ra2vxlrbr10x497uo6jo\">此表描述了 <code>node_modules/@angular/core</code> 下的檔案佈局，註解為描述檔案和目錄的用途：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n2c7wfntpyw9gnmnqx5bqxht\">檔案</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"297niinze7mn1fnajtyjcs0tb\">目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>README.md</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dftwh4hqixdt0ot4bhmden7l2\">套件的 README，在 npmjs 網頁介面中使用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>package.json</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zlmxcwc7kyxnwrakpb87g51z\">主要的\n<code>package.json</code>，描述了套件本身以及所有可用的入口點和程式碼格式。此檔案包含了供執行時和工具使用的\"exports\"對映，以執行模組解析。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>index.d.ts</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"h5ajmsbyzuh0luid7xpv5ctj\">主入口點\n<code>@angular/core</code>的捆綁\n<code>.d.ts</code>。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cx4f4trsnciqv2j92xnqgr78\"><code>esm2022/</code> \n<br> &nbsp;&nbsp;─ \n<code>core.mjs</code> \n<br> &nbsp;&nbsp;─ \n<code>index.mjs</code> \n<br> &nbsp;&nbsp;─ \n<code>public_api.mjs</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5faa2bjo0scvazkc9ryrp2u0n\"><code>@angular/core</code>原始碼樹，以未壓平的 ES2022 格式呈現。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>esm2022/testing/</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mxgrgu49bblrtkdqrvbw7dov\"><code>@angular/core/testing</code>入口點的原始碼樹，以未壓平的 ES2022 格式呈現。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lfojpef33ccs37x5g32fmkd4\"><code>fesm2022/</code> \n<br> &nbsp;&nbsp;─ \n<code>core.mjs</code> \n<br> &nbsp;&nbsp;─ \n<code>core.mjs.map</code> \n<br> &nbsp;&nbsp;─ \n<code>testing.mjs</code> \n<br> &nbsp;&nbsp;─ \n<code>testing.mjs.map</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aad3ub28jlpxeat2yq1096o8n\">所有入口點的程式碼以壓平（FESM）ES2022格式和源對映呈現。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>testing/</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2t17dqvjnpiwywg4cpm0go868\">代表\"testing\"入口點的目錄。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>testing/index.d.ts</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"audlagbj9fqk1zlbbax3uakio\"><code>@angular/core/testing</code>入口點的捆綁\n<code>.d.ts</code>。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"packagejson\"><code>package.json</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#packagejson\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b18a1onvyhemr58sva7xhsldc\">主 <code>package.json</code> 包含重要的套件元資料，包括以下內容：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6deypq6wqq40ges6u4y51ajm0\">它把此套件<a href=\"guide/angular-package-format#esm-declaration\">宣告</a>為 EcmaScript 模組 (ESM) 格式</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99tke0c1fyzs0ej89pq1q4r5h\">它包含一個 <a href=\"guide/angular-package-format#exports\"><code>\"exports\"</code> 欄位</a>，用於定義所有入口點的可用原始碼格式</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bs6eawdb603r3pu8td4p05p\">它包含定義主入口點 <code>@angular/core</code> 的可用原始碼格式的<a href=\"guide/angular-package-format#legacy-resolution-keys\">一些鍵</a>，供不理解 <code>\"exports\"</code> 的工具使用。這些鍵已棄用，隨著對 <code>\"exports\"</code> 的支援在整個生態系統中逐步退出，這些鍵將被刪除。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eu40m2o50powb9oktqjv91zye\">它宣告此套件是否包含<a href=\"guide/angular-package-format#side-effects\">副作用</a></p>\n</li>\n</ul>\n<h3 id=\"esm-declaration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e56nk5cdw0rhsdr7ish6iey63\">ESM 宣告<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#esm-declaration\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6c5wusrm7u39lmpzc9t73fmut\">頂級 <code>package.json</code> 包含此鍵：</p>\n<code-example language=\"javascript\">\n\n{\n  \"type\": \"module\"\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6wjhw9bi8le759wy2jiv0nlir\">這會通知解析器，此套件中的程式碼正在使用 EcmaScript 模組而不是 CommonJS 模組。</p>\n<h3 id=\"exports\"><code>\"exports\"</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#exports\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23bd3layuz0srlzzbtth7nkpg\"><code>\"exports\"</code> 欄位具有以下結構：</p>\n<code-example language=\"javascript\">\n\n\"exports\": {\n  \"./schematics/*\": {\n    \"default\": \"./schematics/*.js\"\n  },\n  \"./package.json\": {\n    \"default\": \"./package.json\"\n  },\n  \".\": {\n    \"types\": \"./core.d.ts\",\n    \"esm\": \"./esm2022/core.mjs\",\n    \"esm2022\": \"./esm2022/core.mjs\",\n    \"default\": \"./fesm2022/core.mjs\"\n  },\n  \"./testing\": {\n    \"types\": \"./testing/testing.d.ts\",\n    \"esm\": \"./esm2022/testing/testing.mjs\",\n    \"esm2022\": \"./esm2022/testing/testing.mjs\",\n    \"default\": \"./fesm2022/testing.mjs\"\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"341f4o2kvr3vmp8rls5t1p1t4\">主要看 <code>\".\"</code> 和 <code>\"./testing\"</code> 這兩個鍵，它們分別定義了 <code>@angular/core</code> 主要入口點和 <code>@angular/core/testing</code> 次要入口點的可用程式碼格式。對於每個入口點，可用的格式為：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyud1ifnjjmski3sq0abf9rs\">格式</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80hx5tehf2rwur97qgesrgak3\">型別（\n<code>.d.ts</code>檔案）</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d85m7o30ybsiady4cwvp7wyi8\"><code>.d.ts</code>檔案在 TypeScript 依賴於給定套件時使用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>es2022</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu4x70x7zy81nbyud211740tn\">ES2022程式碼壓平成單個源檔案。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>esm2022</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ca2p0q8s9r5tbvgsnv5puzbzv\">未壓平的源檔案中的ES2022程式碼（此格式包含用於實驗的內容 - 有關詳細訊息，請參閱\n<a href=\"guide/angular-package-format#note-about-the-defaults-in-packagejson\">這裡關於預設值的討論</a>）。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>default</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53x1oy3pmpgto1334i7e4pxv6\">ES2022程式碼壓平成單個源。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elyl8r6s6983rmfz7recn6yqj\">能理解這些鍵名的工具可以優先從 <code>\"exports\"</code> 中選擇所需的程式碼格式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"260qzu56w8t9vjgp27z9ckga8\">函式庫可能希望公開其他靜態檔案，這些檔案沒有被基於 JavaScript 的入口點（比如 Sass mixins 或預編譯的 CSS）的匯出所捕獲。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"181kgrbe4oi0j444wkh153yj1\">有關更多訊息，參閱<a href=\"guide/creating-libraries#managing-assets-in-a-library\">管理函式庫中的資產</a>。</p>\n<h3 id=\"legacy-resolution-keys\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9jz9a3vknf2lcrksjq8bn6dsa\">舊版解析鍵<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#legacy-resolution-keys\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7yxn9krwhryfu4itp4euh10f\">除了 <code>\"exports\"</code> 之外，頂級 <code>package.json</code> 還為不支援 <code>\"exports\"</code> 的解析器定義了舊模組解析鍵。對於 <code>@angular/core</code>，這些是：</p>\n<code-example language=\"javascript\">\n\n{\n  \"module\": \"./fesm2022/core.mjs\",\n  \"typings\": \"./core.d.ts\",\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bx7l277711iokrfmvonsv0gt1\">如前述程式碼片段所示，模組解析器可以用這些鍵來載入特定的程式碼格式。</p>\n<h3 id=\"side-effects\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36atpxs4ooqf4k4lf79gfdz9y\">副作用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#side-effects\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14kq35cl5fh9mzi2z8c6la9tj\"><code>package.json</code> 的最後一個功能是宣告此套件是否有<a href=\"guide/angular-package-format#sideeffects-flag\">副作用</a>。</p>\n<code-example language=\"javascript\">\n\n{\n  \"sideEffects\": false\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1em4w4fzud82eevocwa1ys1vp\">大多數 Angular 套件不應該依賴於頂級副作用，因此應該包含這個宣告。</p>\n<h2 id=\"entrypoints-and-code-splitting\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3k84czi0cy1cl93t11avj2583\">入口點和程式碼拆分<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#entrypoints-and-code-splitting\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5eq090xgfy2v6lermo9bltahi\">APF 格式的套件，包含一個主要入口點和零到多個次要入口點（比如 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code>）。入口點有多種功能。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jj01yfop4cxeipadxo02me5s\">它們定義了使用者要從中匯入程式碼的模組說明符（比如，<code>@angular/core</code> 和 <code>@angular/core/testing</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4iye4vsz0p6esv4owgk7rnliy\">使用者通常將這些入口點視為具有不同用途或能力的不同符號組。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nxf5bv9yr15elb1rzrmpoqat\">特定入口點可能僅用於特殊目的，比如測試。此類別 API 可以與主入口點分離，以減少它們被意外或錯誤使用的機會。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mckv5uac6fy2gywbvwd7aqyz\">它們定義了可以延遲載入程式碼的粒度。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1z2ywxntduzqtn0pxlgy4ciic\">許多現代建立工具只能在 ES 模組級別進行『程式碼拆分』（又名延遲載入）。APF 主要為每個入口點使用一個『扁平』 ES 模組。這意味著大多數建立工具無法將單個入口點中的程式碼拆分為多個輸出區塊。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crm988wse2yddz3mr0hces6b8\">APF 套件的一般規則是為儘可能小的邏輯相關程式碼集使用入口點。比如，Angular Material 套件將每個邏輯元件或一組元件作為單獨的入口點發布 - 一個用於按鈕，一個用於頁籤等。如果需要，這允許單獨延遲載入每個 Material 元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32jjeux48csb2c0aha468o5j6\">並非所有函式庫都需要這樣的粒度。大多數具有單一邏輯目的的函式庫應該作為單一入口點發布。比如 <code>@angular/core</code> 為執行時使用單個入口點，因為 Angular 執行時通常用作單個實體。</p>\n<h3 id=\"resolution-of-secondary-entry-points\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pwleubiiu0sfm8zef34t32p3\">次要入口點的解析<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#resolution-of-secondary-entry-points\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8y6pgmxshsw3m5di2jew73epl\">可以透過套件的 <code>package.json</code> 的 <code>\"exports\"</code> 欄位解析輔助入口點。</p>\n<h2 id=\"readmemd\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6irign9vg742h1mc20hb6qg\">自述檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#readmemd\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dia6191o065jmk3ho9yqiuck1\">Markdown 格式的 README 檔案，用於在 npm 和 GitHub 上顯示套件的描述。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzcwvosoud92anuqcpj1647r0\">@angular/core 套件的 README 內容範例：</p>\n<code-example language=\"html\">\n\nAngular\n=======\n\nThe sources for this package are in the main [Angular](https://github.com/angular/angular) repo.Please file issues and pull requests against that repo.\n\nLicense: MIT\n\n</code-example>\n<h2 id=\"partial-compilation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ezeek0ucabgjwair8akr8qn6\">部分編譯<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#partial-compilation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4k5lflj0flbcjl52idlgu7hg\">APF 格式的函式庫必須以『部分編譯』模式發布。這是 <code>ngc</code> 的一種編譯模式，它生成不依賴於特定 Angular 執行時版本的已編譯 Angular 程式碼，與用於應用程式的完整編譯形成對比，其中 Angular 編譯器和執行時版本必須完全對應。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8n1y5lxxyo5mjz4w8djhtgtt\">要部分編譯 Angular 程式碼，請在 <code>tsconfig.json</code> 中的 <code>\"angularCompilerOptions\"</code> 屬性中使用 <code>\"compilationMode\"</code> 標誌：</p>\n<code-example language=\"javascript\">\n\n{\n  …\n  \"angularCompilerOptions\": {\n    \"compilationMode\": \"partial\",\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"abfaw93kievk4ub86wjblwpae\">然後，在應用程式建立過程中，Angular CLI 將部分編譯的函式庫程式碼轉換為完全編譯的程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co48qarqhw557wsskxixtapta\">如果你的建立通道不使用 Angular CLI，參閱<a href=\"guide/creating-libraries#consuming-partial-ivy-code-outside-the-angular-cli\">在 Angular CLI 之外使用部分編譯的 Ivy 程式碼</a>指南。</p>\n<h2 id=\"optimizations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"biaikzimxzbisviusrndzfa63\">最佳化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#optimizations\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"flattening-of-es-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4gfzvlf9v3uxfq2ts4z309e0w\">ES 模組的扁平化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#flattening-of-es-modules\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3138op0ocig721m7qbi5cfl5e\">APF 指定程式碼要以『扁平化』的 ES 模組格式發布。這顯著減少了 Angular 應用程式的建立時間以及最終應用程式套件的下載和解析時間。請檢視 Nolan Lawson 發表的優秀文章<a href=\"https://nolanlawson.com/2016/08/15/the-cost-of-small-modules\">『小模區塊的成本』</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5owa9k66zjfriliruauhf2lo\">Angular 編譯器可以生成索引 ES 模組檔案。像 Rollup 這樣的工具可以用這些檔案以扁平化 ES 模組（FESM）檔案格式生成扁平化模組。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8mdb1ibmotc97xuyxp9igebkh\">FESM 是一種檔案格式，它會將所有可從入口點訪問的 ES 模組扁平化為單個 ES 模組。它是透過跟蹤套件中的所有匯入並將該程式碼複製到單個檔案中而生成的，同時保留所有公共 ES 匯出並刪除所有私有匯入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4yq8mbp1to93vls1ll2qgws3w\">縮寫名稱 FESM，發音為<em>phe-som</em>，後面可以跟一個數字，例如 FESM2020。該數字是指模組內 JavaScript 的語言級別。因此，FESM2022 檔案將是 ESM+ES2022 格式的，並且包括匯入/匯出語句和 ES2022 原始碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"19kqzsrijs41085m6l1gdswi4\">要生成扁平化的 ES 模組索引檔案，請在 tsconfig.json 檔案中使用以下設定選項：</p>\n<code-example language=\"javascript\">\n\n{\n  \"compilerOptions\": {\n    …\n    \"module\": \"esnext\",\n    \"target\": \"es2022\",\n    …\n  },\n  \"angularCompilerOptions\": {\n    …\n    \"flatModuleOutFile\": \"my-ui-lib.js\",\n    \"flatModuleId\": \"my-ui-lib\"\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41ai79gyt0py5r7ndrnbpjoqn\">一旦 ngc 生成了索引檔案（比如 <code>my-ui-lib.js</code>），打包器和最佳化器（如 Rollup）就可用於生成扁平化的 ESM 檔案。</p>\n<h4 id=\"note-about-the-defaults-in-packagejson\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4caakr55h6flyhfw6xcnlddqg\">注意 package.json 中的預設值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#note-about-the-defaults-in-packagejson\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88zh6sb46dmsfsg5kbqe8w8vs\">從 webpack v4 開始，ES 模組最佳化的扁平化對於 webpack 使用者來說不再是必需的。當不扁平化 webpack 中的模組時，可以獲得更好的程式碼拆分效果。在實踐中，當使用未展平的模組作為 webpack v4 的輸入時，仍然可能出現體積迴歸現象（也就是體積反而變大了）。這就是為什麼 package.json 中的 <code>module</code> 和 <code>es2022</code> 條目仍然指向 FESM 檔案的原因。這個問題正在調查中。預計在解決體積迴歸問題後，會將 package.json 中的 <code>module</code> 和 <code>es2022</code> 入口點切換為未展平的檔案。APF 目前包含未扁平化的 ESM2022 程式碼，用於驗證這種未來可能出現的更改。</p>\n<h3 id=\"sideeffects-flag\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctgt07mpuwz63p64o0hs0lbjh\">『副作用』標誌<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#sideeffects-flag\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9yvogtzmeqsq4iqcfo8drrcgu\">預設情況下，EcmaScript 模組是有副作用的：從模組匯入可確保該模組頂層的任何程式碼都將執行。這通常是不可取的，因為典型模組中的大多數副作用程式碼並不是真正的副作用，而是僅影響特定符號。如果沒有匯入和使用這些符號，通常需要在稱為 tree-shaking 的最佳化過程中將它們刪除，而副作用程式碼可以防止這種情況發生。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gadmfkj25ttt3zxip9dkjmmp\">諸如 Webpack 之類別的建立工具支援一個標誌，該標誌允許套件宣告它們並不依賴於其模組頂層的副作用程式碼，從而使工具可以更自由地對套件中的程式碼進行搖樹最佳化。這些最佳化的最終結果應該是較小的套件大小和程式碼拆分後套件塊中更好的程式碼分佈。如果此最佳化包含非本地副作用，則此最佳化可能會破壞你的程式碼 - 然而，這在 Angular 應用程式中並不常見，並且通常是糟糕設計的標誌。建議讓所有套件透過將 <code>sideEffects</code> 屬性設定為 <code>false</code> 來宣告無副作用狀態，並且讓開發人員遵循 <a href=\"/guide/styleguide\">Angular 風格指南</a>，這自然會導致程式碼沒有非本地副作用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs58cgeqdrlcqm5uo6b4vhdg0\">更多訊息：<a href=\"https://github.com/webpack/webpack/tree/master/examples/side-effects\">關於副作用的 webpack 文件</a></p>\n<h3 id=\"es2022-language-level\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hrsif1pwq7aevqtf97tswk9r\">ES2022 語言級別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#es2022-language-level\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8djdpsy43wa8twc7cazpqvq5z\">ES2022 語言級別現在是 Angular CLI 和其他工具使用的預設語言級別。Angular CLI 在應用程式建立時會將捆綁包降級到所有目標瀏覽器都支援的語言級別。</p>\n<h3 id=\"dts-bundling--type-definition-flattening\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bu1jbmlu1nqqo0blrx3poa5y0\">d.ts 捆綁/型別定義的扁平化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#dts-bundling--type-definition-flattening\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bnd57yhucrmb8qbrri16jwsv\">從 APF v8 開始，更建議執行 <a href=\"https://api-extractor.com\">API Extractor</a> 來打包 TypeScript 定義，以便讓全部 API 都出現在單個檔案中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdxo48bf364qokcyldw5jl887\">在之前的 APF 版本中，每個入口點都會在 .d.ts 入口點旁邊有一個 <code>src</code> 目錄，該目錄包含與原始原始碼結構對應的單個 d.ts 檔案。雖然這種分發格式仍然被允許和支援，但非常不鼓勵它，因為它會弄暈 IDE 之類別的工具，然後提供錯誤的自動完成，並允許使用者依賴深度匯入的路徑，這些路徑通常不被認為是函式庫或套件的公共 API。</p>\n<h3 id=\"tslib\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5v3aboce3a1xi60k40kz182sm\">函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#tslib\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byglz62n091gruqsi7ngnhvpe\">從 APF v10 開始，建議新增 tslib 作為主要入口點的直接依賴項。這是因為 tslib 版本與用來編譯函式庫的 TypeScript 版本相關聯。</p>\n<h2 id=\"examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4iecnoqh39op5dvxqr6b3gip\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#examples\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gi17asti4mxffye1irbvs4ta\"><a href=\"https://unpkg.com/browse/@angular/core@17.0.0/\">@angular/core 套件</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"58kznqo1fyloqzqd7wfrig6b1\"><a href=\"https://unpkg.com/browse/@angular/material@17.0.0/\">@angular/material 套件</a></li>\n</ul>\n<h2 id=\"definition-of-terms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2w2zxxzsdukgcllhnr0hbfz8l\">術語定義<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#definition-of-terms\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80p7vouhm9kskkgl6qif4qdco\">本文件中特意使用了以下術語。在本節中會定義所有這些以便更清晰。</p>\n<h4 id=\"package\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xgsw2mzyxp4abkks03qoyo30\">套件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#package\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dod89wnf1h7tdk9545y28k7df\">發布到 NPM 並一起安裝的最小檔案集，比如 <code>@angular/core</code>。該套件中包含一個名為 package.json 的清單、編譯後的原始碼、TypeScript 定義檔案、原始碼對映、元資料等。該套件是透過 <code>npm install @angular/core</code> 安裝的。</p>\n<h4 id=\"symbol\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xiw1gbpmrz9czmn84a7vngz\">符號<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#symbol\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92w5otx9brkackl3xzjlmnrno\">包含在模組中的類別、函式、常數或變數，可選擇透過模組匯出，以便對外界可見。</p>\n<h4 id=\"module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkuxw56x8curh875ge5tvqede\">模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#module\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1bxifvn3w97slblb56gf6y30\">ECMAScript 模組的縮寫。包含匯入和匯出符號的語句的檔案。這與 ECMAScript 規範中模組的定義相同。</p>\n<h4 id=\"esm\">ESM<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#esm\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vi026shzn402088um9ih6ok3\">ECMAScript 模組的縮寫（見上文）。</p>\n<h4 id=\"fesm\">FESM<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#fesm\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6mcnejyqcuubqc62528yms8ip\">Flattened ES Modules 的縮寫，由一種檔案格式組成，該檔案格式是透過將所有可從入口點訪問的 ES 模組扁平化為單個 ES 模組而建立的。</p>\n<h4 id=\"module-id\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gbs3a43m00rqtcvlq9jozwg9\">模組標識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#module-id\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8m7k7n8lfmlfnwybajac89lm9\">匯入語句中使用的模組的識別符號（比如 <code>@angular/core</code>）。此 ID 通常直接對映到檔案系統上的路徑，但由於有各種模組解析策略，情況也並非總是如此。</p>\n<h4 id=\"module-specifier\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjcjp0hr77rq6t950qgj37xnd\">模組說明符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#module-specifier\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8815w4qqzzlcwr6plp7w1shrj\">模組識別符號（見上文）。</p>\n<h4 id=\"module-resolution-strategy\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dosh8snuj61ibvbtgwcshkbfs\">模組解析策略<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#module-resolution-strategy\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0gn968idnjabvw844myjam5\">用於將模組 ID 轉換為檔案系統路徑的演算法。Node.js 就有一個良好定義且廣泛使用的，TypeScript 支援多種模組解析策略，<a href=\"https://developers.google.com/closure/compiler\">Closure Compiler</a> 還有另一種策略。</p>\n<h4 id=\"module-format\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3spjhh2ob041t7hltnspq5qwo\">模組格式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#module-format\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b2hlfrc2und7rzdb357448xgq\">模組語法規範，至少涵蓋從檔案匯入和匯出的語法。常見的模組格式是 CommonJS（CJS，通常用於 Node.js 應用程式）或 ECMAScript 模組 (ESM)。模組格式僅表示單個模組的封裝，而不表示用於構成模組內容的 JavaScript 語言屬性。正因為如此，Angular 團隊經常使用語言級別說明符作為模組格式的字尾，（例如 ESM+ES2022 指定模組為 ESM 格式幷包含 ES2022 程式碼）。</p>\n<h4 id=\"bundle\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8t2kshuya9i2jzo3zfmilyvu0\">捆綁包<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#bundle\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ev9puo7jc2db9eildqse6bnqh\">單個 JS 檔案形式的工件，由建立工具（比如 <a href=\"https://webpack.js.org\">Webpack</a>或<a href=\"https://rollupjs.org/\">Rollup</a>）生成，其中包含源自一個或多個模組的符號。捆綁包是一種瀏覽器專用的解決方案，可減少瀏覽器開始下載數百甚至數萬個檔案時可能造成的網路壓力。Node.js 通常不使用捆綁包。常見的捆綁包格式是 UMD 和 System.register。</p>\n<h4 id=\"language-level\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kvppzx651gzgcwqlj3wv3miv\">語言級別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#language-level\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7jph3d8o5chbdc3z1xai4ofo\">程式碼的語言 (ES2022)。獨立於模組格式。</p>\n<h4 id=\"entry-point\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7q4w7so1wo1fmsg15jz5rvb0a\">入口點<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#entry-point\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahpymxnrbs0wudv4mwb383g3g\">旨在由使用者匯入的模組。它由唯一的模組 ID 引用，並匯出該模組 ID 引用的公共 API。一個例子是 <code>@angular/core</code> 或 <code>@angular/core/testing</code>。<code>@angular/core</code> 套件中存在兩個入口點，但它們匯出不同的符號。一個套件可以有許多入口點。</p>\n<h4 id=\"deep-import\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47w6wkohvt40ie3bj9jwjtx59\">深度匯入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#deep-import\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aagekx4dgvciae045kqmymot8\">從不是入口點的模組中檢索符號的過程。這些模組 ID 通常被認為是私有 API，它們可以在專案的生命週期內或在建立給定套件的捆綁包時更改。</p>\n<h4 id=\"top-level-import\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ntv48yvm295aa4hnibc80iy7\">頂級匯入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#top-level-import\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6c1re2zagzr027dvy39909us4\">來自入口點的匯入。可用的頂級匯入定義了公共 API，並在『@angular/name』模組中公開，比如 <code>@angular/core</code> 或 <code>@angular/common</code>。</p>\n<h4 id=\"tree-shaking\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs1v547i9dx5u01qukxdvhodw\">搖樹最佳化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#tree-shaking\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6sjfi56at63si6bq04l6foc8s\">識別和刪除應用程式中未使用的程式碼的過程 - 也稱為死程式碼消除。這是使用 <a href=\"https://rollupjs.org\">Rollup</a> 、 <a href=\"https://developers.google.com/closure/compiler\">Closure Compiler</a> 或 <a href=\"https://github.com/terser/terser/\">Terser</a> 等工具在應用程式級別執行的全域最佳化。</p>\n<h4 id=\"aot-compiler\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ac10ejizuxpvklmyi1h245a7a\">AOT 編譯器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#aot-compiler\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ek5md63q9oiw4ijvwbdtz3lyc\">Angular 的預先編譯器。</p>\n<h4 id=\"flattened-type-definitions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d06n5f1vmkztd1gdrcvpvubd6\">扁平型別定義<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-package-format#flattened-type-definitions\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdexpjr74mmgehdh5vxnrvfsh\">從 <a href=\"https://api-extractor.com\">API Extractor</a> 生成的捆綁 TypeScript 定義。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Mar 06 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/glossary\n-->\n<!-- links from this doc:\n - /guide/styleguide\n - api/common/http\n - guide/angular-package-format#angular-package-format\n - guide/angular-package-format#aot-compiler\n - guide/angular-package-format#bundle\n - guide/angular-package-format#deep-import\n - guide/angular-package-format#definition-of-terms\n - guide/angular-package-format#dts-bundling--type-definition-flattening\n - guide/angular-package-format#entry-point\n - guide/angular-package-format#entrypoints-and-code-splitting\n - guide/angular-package-format#es2022-language-level\n - guide/angular-package-format#esm\n - guide/angular-package-format#esm-declaration\n - guide/angular-package-format#examples\n - guide/angular-package-format#exports\n - guide/angular-package-format#fesm\n - guide/angular-package-format#file-layout\n - guide/angular-package-format#flattened-type-definitions\n - guide/angular-package-format#flattening-of-es-modules\n - guide/angular-package-format#language-level\n - guide/angular-package-format#legacy-resolution-keys\n - guide/angular-package-format#module\n - guide/angular-package-format#module-format\n - guide/angular-package-format#module-id\n - guide/angular-package-format#module-resolution-strategy\n - guide/angular-package-format#module-specifier\n - guide/angular-package-format#note-about-the-defaults-in-packagejson\n - guide/angular-package-format#optimizations\n - guide/angular-package-format#package\n - guide/angular-package-format#packagejson\n - guide/angular-package-format#partial-compilation\n - guide/angular-package-format#readmemd\n - guide/angular-package-format#resolution-of-secondary-entry-points\n - guide/angular-package-format#side-effects\n - guide/angular-package-format#sideeffects-flag\n - guide/angular-package-format#symbol\n - guide/angular-package-format#top-level-import\n - guide/angular-package-format#tree-shaking\n - guide/angular-package-format#tslib\n - guide/angular-package-format#why-specify-a-package-format\n - guide/creating-libraries\n - guide/creating-libraries#consuming-partial-ivy-code-outside-the-angular-cli\n - guide/creating-libraries#managing-assets-in-a-library\n - https://api-extractor.com\n - https://developers.google.com/closure/compiler\n - https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/preview\n - https://github.com/ng-packagr/ng-packagr\n - https://github.com/terser/terser\n - https://github.com/webpack/webpack/tree/master/examples/side-effects\n - https://nolanlawson.com/2016/08/15/the-cost-of-small-modules\n - https://rollupjs.org\n - https://unpkg.com/browse/@angular/core@17.0.0/\n - https://unpkg.com/browse/@angular/material@17.0.0/\n - https://webpack.js.org\n-->"}
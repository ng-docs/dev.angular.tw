{"id":"guide/architecture-modules","title":"NgModule 简介","contents":"<div class=\"content\">\n  <h1 id=\"introduction-to-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cirtfesipvhtxz9yhm6vsdfzp\">NgModule 简介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#introduction-to-modules\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajmmwvy84nyzcwqrrkqk6c5u3\">Angular 应用程序是模块化的，Angular 有自己的模块化系统称为 \n<em>NgModules</em>。</p>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ct5x176cvh4kivx7iadhb6is\">旧版 Angular 应用程序是使用 \n<code>NgModules</code> 构建的。 尽管这不再是首选方法，但许多现有应用程序仍然使用 \n<code>NgModules</code> 构建。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egtuji8ru0znep6uyu128fd7o\">本页面提供了该概念的概述；\n<a href=\"guide/ngmodules\">在这里了解更多</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb07287hpc9u7n0lukit1b6wq\"><em>NgModules</em> 是专用于应用程序领域、工作流或密切相关功能集的代码块的容器。 它们可以包含组件、服务提供者和其他代码文件，其作用域由包含的 NgModule 定义。 它们可以导入从其他 NgModules 导出的功能，并为其他 NgModules 使用选择的功能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exwsq6auter5pjrcvkhms9bqf\">虽然小型的应用可能只有一个 NgModule，不过大多数应用都会有很多<em>特性模块</em>。应用的<em>根模块</em>之所以叫根模块，是因为它可以包含任意深度的层次化子模块。</p>\n<h2 id=\"ngmodule-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8tnvaoxoyxihwyk8ybi4d7x5f\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#ngmodule-metadata\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9o3m072nl7yhlx49sx52ov71i\">NgModule 是一个带有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 装饰器的类。<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 装饰器是一个函数，它接受一个元数据对象，该对象的属性用来描述这个模块。其中最重要的属性如下。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ghvm54f9feewnb0zbrlubp2h\">属性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>declarations</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b754mxqh6o9gne7f1m99wxokl\">属于此 NgModule 的组件、\n<em>指令</em>和\n<em>管道</em>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>exports</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ecra5zpgtum8fravj5wwwj06w\">应在其他 NgModules 的\n<em>组件模板</em>中可见和可用的声明子集。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>imports</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2oqesz6w5g1e6gp43cj0sb7rn\">组件模板中声明的需要由\n<em>此</em> NgModule 导出类的其他模块。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8nhntog96l97zstnyve73yo3\">该 NgModule 贡献到全局服务集合中的\n<em>服务</em>的创建者；它们可以在应用程序的所有部分中访问。（也可以在组件级别指定提供者。）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>bootstrap</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d65v172elhcyai6g2zpeuivd6\">主应用程序视图，称为\n<em>根组件</em>，承载所有其他应用程序视图。只有\n<em>根 NgModule</em>应设置\n<code>bootstrap</code>属性。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vfsd1dm7mchlgyptkqcstrf5\">下面是一个简单的根 NgModule 定义：</p>\n<code-example header=\"src/app/app.module.ts\" path=\"architecture/src/app/mini-app.ts\" region=\"module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  providers:    [ Logger ],\n  declarations: [ AppComponent ],\n  exports:      [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4t3ahopyv188qknflcugmslu3\">把 <code>AppComponent</code> 放到 <code>exports</code> 中是为了演示导出的语法，这在本例子中实际上是没必要的。根模块没有任何理由<em>导出</em>任何东西，因为其它模块永远不需要<em>导入</em>根模块。</p>\n</div>\n<h2 id=\"ngmodules-and-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qgys2kvxw6w33xicr1x6ehk1\">NgModule 和组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#ngmodules-and-components\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cus3cvb2whwbnqt8xhyshywkm\">NgModule 为其中的组件提供了一个<em>编译上下文环境</em>。根模块总会有一个根组件，并在引导期间创建它。但是，任何模块都能包含任意数量的其它组件，这些组件可以通过路由器加载，也可以通过模板创建。那些属于这个 NgModule 的组件会共享同一个编译上下文环境。</p>\n<div class=\"lightbox\">\n<img alt=\"Component compilation context\" class=\"left\" src=\"generated/images/guide/architecture/compilation-context.png\" width=\"600\" height=\"202\">\n</div>\n<br class=\"clear\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c10a6mvgntdwnsdueldy7x4dr\">组件及其模板共同定义<em>视图</em>。组件还可以包含<em>视图层次结构</em>，它能让你定义任意复杂的屏幕区域，可以将其作为一个整体进行创建、修改和销毁。一个视图层次结构中可以混合使用由不同 NgModule 中的组件定义的视图。这种情况很常见，特别是对一些 UI 库来说。</p>\n<div class=\"lightbox\">\n<img alt=\"View hierarchy\" class=\"left\" src=\"generated/images/guide/architecture/view-hierarchy.png\" width=\"600\" height=\"303\">\n</div>\n<br class=\"clear\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5lyjd5072se3vnww9c1n86zd\">当你创建一个组件时，它直接与一个叫做<em>宿主视图</em>的视图关联起来。宿主视图可以是视图层次结构的根，该视图层次结构可以包含一些<em>内嵌视图</em>，这些内嵌视图又是其它组件的宿主视图。这些组件可以位于相同的 NgModule 中，也可以从其它 NgModule 中导入。树中的视图可以嵌套到任意深度。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3x3cuorpqr1eqqlltywj29kwk\"><strong>注意</strong>：<br>\n视图的这种层次结构是 Angular 在 DOM 和应用数据中检测与响应变更时的关键因素。</p>\n</div>\n<h2 id=\"ngmodules-and-javascript-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"kcbycbkq4aa5n01auhvc7ltj\">NgModule 和 JavaScript 的模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#ngmodules-and-javascript-modules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cn7o7h0z46rirx46shrwp5dn\">NgModule 系统与 JavaScript（ES2015）用来管理 JavaScript 对象的模块系统不同，而且也没有直接关联。这两种模块系统不同但<em>互补</em>。你可以使用它们来共同编写你的应用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96zg3ifegbgr71j33g60dqdr7\">JavaScript 中，每个<em>文件</em>是一个模块，文件中定义的所有对象都从属于那个模块。通过 <code>export</code> 关键字，模块可以把它的某些对象声明为公共的。其它 JavaScript 模块可以使用<em>import 语句</em>来访问这些公共对象。</p>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"imports\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\n</code-example>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"export\">\nexport class AppModule { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6dj6ff9ywqhaz20n03rskjjjf\"><a href=\"http://exploringjs.com/es6/ch_modules.html\">学习更多关于 JavaScript 模块的知识。</a>。</p>\n</div>\n<h2 id=\"angular-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjgzfq5kpoyc4exr29wfib0nb\">Angular 自带的库<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#angular-libraries\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"lightbox\">\n<img alt=\"Component\" class=\"left\" src=\"generated/images/guide/architecture/library-module.png\" width=\"240\" height=\"181\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9s8u8ihwipejk9okv9q3ruqf7\">Angular 会作为一组 JavaScript 模块进行加载，你可以把它们看成库模块。每个 Angular 库的名称都带有 <code>@angular</code> 前缀。使用 <code>npm</code> 包管理器安装 Angular 的库，并使用 JavaScript 的 <code>import</code> 语句导入其中的各个部分。</p>\n<br class=\"clear\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pguvvbcwe0u7bhhhmtsop8qf\">比如，像下面这样，从 <code>@angular/core</code> 库中导入 Angular 的 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器：</p>\n<code-example path=\"architecture/src/app/app.component.ts\" region=\"import\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14j6xj3yc76fex22vznhigmcf\">还可以使用 JavaScript 的导入语句从 Angular <em>库</em>中导入 Angular <em>模块</em>。比如，下列代码从 <code>platform-browser</code> 库中导入了 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 这个 NgModule。</p>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"import-browser-module\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cf3fmhgyzy63kr9noprwoumx\">在上面这个简单的根模块范例中，应用的根模块需要来自 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 中的素材。要访问这些素材，就要把它加入 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元数据的 <code>imports</code> 中，代码如下：</p>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"ngmodule-imports\">\nimports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9abg43ixit3cx6ejcsw3n13c3\">通过这种方式，你可以<em>同时</em>使用 Angular 和 JavaScript 的这两种模块系统。虽然这两种模块系统容易混淆（它们共享了同样的词汇 <code>import</code> 和 <code>export</code>），不过只要多用用你就会熟悉它们各自的语境了。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"duhff3z6jtsl3yz986uje9ikn\">更多信息，参阅 <a href=\"guide/ngmodules\">NgModules</a>。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - guide/architecture-components\n - guide/architecture-modules#angular-libraries\n - guide/architecture-modules#introduction-to-modules\n - guide/architecture-modules#ngmodule-metadata\n - guide/architecture-modules#ngmodules-and-components\n - guide/architecture-modules#ngmodules-and-javascript-modules\n - guide/architecture-services\n - guide/ngmodules\n - https://exploringjs.com/es6/ch_modules.html\n-->"}
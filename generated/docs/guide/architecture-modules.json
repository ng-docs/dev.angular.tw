{"id":"guide/architecture-modules","title":"NgModule 簡介","contents":"<div class=\"content\">\n  <h1 id=\"introduction-to-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cirtfesipvhtxz9yhm6vsdfzp\">NgModule 簡介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#introduction-to-modules\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajmmwvy84nyzcwqrrkqk6c5u3\">Angular 應用程式是模組化的，Angular 有自己的模組化系統稱為 \n<em>NgModules</em>。</p>\n<div class=\"alert is-critical\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ct5x176cvh4kivx7iadhb6is\">舊版 Angular 應用程式是使用 \n<code>NgModules</code> 建立的。 儘管這不再是首選方法，但許多現有應用程式仍然使用 \n<code>NgModules</code> 建立。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egtuji8ru0znep6uyu128fd7o\">本頁面提供了該概念的概述；\n<a href=\"guide/ngmodules\">在這裡瞭解更多</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bb07287hpc9u7n0lukit1b6wq\"><em>NgModules</em> 是專用於應用程式領域、工作流或密切相關功能集的程式碼區塊的容器。 它們可以包含元件、服務提供者和其他程式碼檔案，其作用域由包含的 NgModule 定義。 它們可以匯入從其他 NgModules 匯出的功能，併為其他 NgModules 使用選擇的功能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exwsq6auter5pjrcvkhms9bqf\">雖然小型的應用可能只有一個 NgModule，不過大多數應用都會有很多<em>屬性模組</em>。應用的<em>根模組</em>之所以叫根模組，是因為它可以包含任意深度的層次化子模組。</p>\n<h2 id=\"ngmodule-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8tnvaoxoyxihwyk8ybi4d7x5f\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#ngmodule-metadata\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9o3m072nl7yhlx49sx52ov71i\">NgModule 是一個帶有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 裝飾器的類。<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 裝飾器是一個函式，它接受一個元資料物件，該物件的屬性用來描述這個模組。其中最重要的屬性如下。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ghvm54f9feewnb0zbrlubp2h\">屬性</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>declarations</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b754mxqh6o9gne7f1m99wxokl\">屬於此 NgModule 的元件、\n<em>指令</em>和\n<em>通道</em>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>exports</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ecra5zpgtum8fravj5wwwj06w\">應在其他 NgModules 的\n<em>元件樣板</em>中可見和可用的宣告子集。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>imports</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2oqesz6w5g1e6gp43cj0sb7rn\">元件樣板中宣告的需要由\n<em>此</em> NgModule 匯出類別的其他模組。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8nhntog96l97zstnyve73yo3\">該 NgModule 貢獻到全域服務集合中的\n<em>服務</em>的建立者；它們可以在應用程式的所有部分中訪問。（也可以在元件級別指定提供者。）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>bootstrap</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d65v172elhcyai6g2zpeuivd6\">主應用程式檢視，稱為\n<em>根元件</em>，承載所有其他應用程式檢視。只有\n<em>根 NgModule</em>應設定\n<code>bootstrap</code>屬性。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vfsd1dm7mchlgyptkqcstrf5\">下面是一個簡單的根 NgModule 定義：</p>\n<code-example header=\"src/app/app.module.ts\" path=\"architecture/src/app/mini-app.ts\" region=\"module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  providers:    [ Logger ],\n  declarations: [ AppComponent ],\n  exports:      [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4t3ahopyv188qknflcugmslu3\">把 <code>AppComponent</code> 放到 <code>exports</code> 中是為了示範匯出的語法，這在本例子中實際上是沒必要的。根模組沒有任何理由<em>匯出</em>任何東西，因為其它模組永遠不需要<em>匯入</em>根模組。</p>\n</div>\n<h2 id=\"ngmodules-and-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qgys2kvxw6w33xicr1x6ehk1\">NgModule 和元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#ngmodules-and-components\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cus3cvb2whwbnqt8xhyshywkm\">NgModule 為其中的元件提供了一個<em>編譯上下文環境</em>。根模組總會有一個根元件，並在引導期間建立它。但是，任何模組都能包含任意數量的其它元件，這些元件可以透過路由器載入，也可以透過樣板建立。那些屬於這個 NgModule 的元件會共享同一個編譯上下文環境。</p>\n<div class=\"lightbox\">\n<img alt=\"Component compilation context\" class=\"left\" src=\"generated/images/guide/architecture/compilation-context.png\" width=\"600\" height=\"202\">\n</div>\n<br class=\"clear\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c10a6mvgntdwnsdueldy7x4dr\">元件及其樣板共同定義<em>檢視</em>。元件還可以包含<em>檢視層次結構</em>，它能讓你定義任意複雜的螢幕區域，可以將其作為一個整體進行建立、修改和銷燬。一個檢視層次結構中可以混合使用由不同 NgModule 中的元件定義的檢視。這種情況很常見，特別是對一些 UI 函式庫來說。</p>\n<div class=\"lightbox\">\n<img alt=\"View hierarchy\" class=\"left\" src=\"generated/images/guide/architecture/view-hierarchy.png\" width=\"600\" height=\"303\">\n</div>\n<br class=\"clear\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5lyjd5072se3vnww9c1n86zd\">當你建立一個元件時，它直接與一個叫做<em>宿主檢視</em>的檢視關聯起來。宿主檢視可以是檢視層次結構的根，該檢視層次結構可以包含一些<em>內嵌檢視</em>，這些內嵌檢視又是其它元件的宿主檢視。這些元件可以位於相同的 NgModule 中，也可以從其它 NgModule 中匯入。樹中的檢視可以巢狀到任意深度。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3x3cuorpqr1eqqlltywj29kwk\"><strong>注意</strong>：<br>\n檢視的這種層次結構是 Angular 在 DOM 和應用資料中檢測與回應變更時的關鍵因素。</p>\n</div>\n<h2 id=\"ngmodules-and-javascript-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"kcbycbkq4aa5n01auhvc7ltj\">NgModule 和 JavaScript 的模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#ngmodules-and-javascript-modules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cn7o7h0z46rirx46shrwp5dn\">NgModule 系統與 JavaScript（ES2015）用來管理 JavaScript 物件的模組系統不同，而且也沒有直接關聯。這兩種模組系統不同但<em>互補</em>。你可以使用它們來共同編寫你的應用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96zg3ifegbgr71j33g60dqdr7\">JavaScript 中，每個<em>檔案</em>是一個模組，檔案中定義的所有物件都從屬於那個模組。透過 <code>export</code> 關鍵字，模組可以把它的某些物件宣告為公共的。其它 JavaScript 模組可以使用<em>import 語句</em>來訪問這些公共物件。</p>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"imports\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\n</code-example>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"export\">\nexport class AppModule { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6dj6ff9ywqhaz20n03rskjjjf\"><a href=\"http://exploringjs.com/es6/ch_modules.html\">學習更多關於 JavaScript 模組的知識。</a>。</p>\n</div>\n<h2 id=\"angular-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjgzfq5kpoyc4exr29wfib0nb\">Angular 自帶的函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#angular-libraries\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"lightbox\">\n<img alt=\"Component\" class=\"left\" src=\"generated/images/guide/architecture/library-module.png\" width=\"240\" height=\"181\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9s8u8ihwipejk9okv9q3ruqf7\">Angular 會作為一組 JavaScript 模組進行載入，你可以把它們看成函式庫模組。每個 Angular 函式庫的名稱都帶有 <code>@angular</code> 字首。使用 <code>npm</code> 套件管理器安裝 Angular 的函式庫，並使用 JavaScript 的 <code>import</code> 語句匯入其中的各個部分。</p>\n<br class=\"clear\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8pguvvbcwe0u7bhhhmtsop8qf\">比如，像下面這樣，從 <code>@angular/core</code> 庫中匯入 Angular 的 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器：</p>\n<code-example path=\"architecture/src/app/app.component.ts\" region=\"import\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14j6xj3yc76fex22vznhigmcf\">還可以使用 JavaScript 的匯入語句從 Angular <em>函式庫</em>中匯入 Angular <em>模組</em>。比如，下列程式碼從 <code>platform-browser</code> 庫中匯入了 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 這個 NgModule。</p>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"import-browser-module\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cf3fmhgyzy63kr9noprwoumx\">在上面這個簡單的根模組範例中，應用的根模組需要來自 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 中的素材。要訪問這些素材，就要把它加入 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料的 <code>imports</code> 中，程式碼如下：</p>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"ngmodule-imports\">\nimports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9abg43ixit3cx6ejcsw3n13c3\">透過這種方式，你可以<em>同時</em>使用 Angular 和 JavaScript 的這兩種模組系統。雖然這兩種模組系統容易混淆（它們共享了同樣的詞彙 <code>import</code> 和 <code>export</code>），不過只要多用用你就會熟悉它們各自的語境了。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"duhff3z6jtsl3yz986uje9ikn\">更多訊息，參閱 <a href=\"guide/ngmodules\">NgModules</a>。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - guide/architecture-components\n - guide/architecture-modules#angular-libraries\n - guide/architecture-modules#introduction-to-modules\n - guide/architecture-modules#ngmodule-metadata\n - guide/architecture-modules#ngmodules-and-components\n - guide/architecture-modules#ngmodules-and-javascript-modules\n - guide/architecture-services\n - guide/ngmodules\n - https://exploringjs.com/es6/ch_modules.html\n-->"}
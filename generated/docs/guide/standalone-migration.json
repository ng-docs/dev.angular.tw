{"id":"guide/standalone-migration","title":"将现有的 Angular 项目迁移到独立项目","contents":"<div class=\"content\">\n  <h1 id=\"migrate-an-existing-angular-project-to-standalone\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3z2mhd4e53kky93skdbur6s4n\">将现有的 Angular 项目迁移到独立项目<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#migrate-an-existing-angular-project-to-standalone\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2u02l7jhh843ojpgdnuopv5fg\">从版本 15.2.0 开始，Angular 提供了一个<a href=\"guide/schematics\">原理图</a>来帮助项目作者将现有项目转换为<a href=\"guide/standalone-components\">新的独立 API</a>。该原理图旨在自动转换尽可能多的代码，但可能需要项目作者进行一些手动修复。使用以下命令运行原理图：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate @angular/core:standalone\n\n</code-example>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vcb4xrpcx7581usuzxbe84xx\">在使用本原理图之前，请确保项目：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jpdmgkfmovcgd0z72pbp1l95\">使用的是 Angular 15.2.0 或更高版本。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9cu9yi0px5l2al7iztp63vr4w\">构建没有任何编译错误。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dx1kjq08yc122sdp4tecak693\">在干净的 Git 分支上，所有工作都已保存。</li>\n</ol>\n<h2 id=\"schematic-options\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bavmc9s22pe9kepfeabnk6djl\">原理图选项<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#schematic-options\"><i class=\"material-icons\">link</i></a></h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba7axgt6bldn3wzg2te3xd6f\">选项</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>mode</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u1cg89dxcpd15r6l0uib0dft\">要执行的转换。请查看下面的 \n<a href=\"guide/standalone-migration#migration-modes\">迁移模式</a>，了解可用选项的详细信息。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>path</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"277r3iboo5ozpll7zt79dura2\">要迁移的路径，相对于项目根目录。您可以使用此选项逐步迁移项目的部分。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"migrations-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dg30c2pdh1p1u5xk1mmgt4qo\">迁移步骤<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#migrations-steps\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vfl9niz0vac7w8b5yzr1svq5\">迁移过程由三个步骤组成。你必须多次运行它并手动检查项目是否能按预期构建和运行。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hsql3vswumoq8o4rcoiskq24\">注意</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1st0j3fq5g3zmwg5mf8lr4ttz\">虽然脚手架可以自动更新大部分代码，但有些极端情况还是需要开发人员进行干预。你应该为在每个迁移步骤之后进行手动修复做好准备。此外，脚手架生成的新代码也可能与你的代码格式规则不匹配。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4d89559pney2jprxbbc9rqtxq\">按照下面列出的顺序运行迁移，验证你的代码在每个步骤之间构建和运行：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bty8cj7umhzoflb306gq0xfa3\">运行 <code>ng g @angular/core:standalone</code> 并选择 “Convert all components, directives and pipes to standalone”</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sjvx44sp8pn95jrgkjujz8i0\">运行 <code>ng g @angular/core:standalone</code> 并选择 “Remove unnecessary NgModule classes”</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c891h5jrzsixqvc3xmn37tdwm\">运行 <code>ng g @angular/core:standalone</code> 并选择 “Bootstrap the project using standalone APIs”</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"274pgm8x603hsr3a3v3szmvu5\">运行任何静态分析（lint）和格式检查，修复任何故障，并提交结果</li>\n</ol>\n<h2 id=\"after-the-migration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o0sl7vcip896jleduh4ln757\">迁移后<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#after-the-migration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ds5zpxzpne3q1ncjjxtgug5ew\">恭喜，你的应用程序已转换为独立应用程序 🎉。这些是你现在可能想要采取的一些可选的后续步骤：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p26bu0god4kx483nbz31gd90\">查找并删除任何剩余的 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 声明：由于<a href=\"guide/standalone-migration#remove-unnecessary-ngmodules\">“删除不必要的 NgModule”步骤</a>不能自动删除所有模块，你可能必须手动删除剩余的声明。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33o9svh76vp122ua7vmzs2uub\">运行项目的单元测试并修复所有故障。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b62cauy9y4zll2fczpxe7az6\">如果项目使用了自动格式化，则运行所有代码格式化程序。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8tpsm9tnr8m0gijvjyjyjua3\">运行项目中的任何代码检查器，并修复新的警告。一些代码检查器支持 \n<code>--fix</code> 标志，可以自动解决一些警告。</li>\n</ul>\n<h2 id=\"migration-modes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba21qxx7l1j72s7q5vo833csn\">迁移模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#migration-modes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mhmrivpwnh0sqfk9qa12n9yv\">迁移有以下几个步骤：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba57mhw6ct2lftjhk8y26d309\">将声明转换为独立的。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o86zam11gw2j0ao9ri8w5dx0\">移除不必要的 NgModule。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ypt9i37g9gyvpt0tyunpl94q\">切换到独立的引导启动 API。</li>\n</ol>\n<h3 id=\"convert-declarations-to-standalone\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5v0diwy2sdcglowvhhsked38\">将声明转换为独立的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#convert-declarations-to-standalone\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dksmj3jagszluno2k0fdozgot\">在这种模式下，迁移通过设置 <code>standalone: true</code> 并将依赖项添加到它们的 <code>imports</code> 数组来将所有组件、指令和管道转换为独立的。</p>\n<div class=\"callout is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39ufyt1kckyfecmtxiytf8qag\">在此步骤中，该原理图会忽略在此过程中引导组件的 NgModules，因为它们很可能是由 <code>bootstrapModule</code> 使用的根模块，而不是兼容独立的 <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code>。该原理图会自动将这些声明转换为<a href=\"guide/standalone-migration#switch-to-standalone-bootstrapping-api\">\"独立引导 API\"</a> 步骤的一部分。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaf4w2mfc4bmjwfg76el4q4p\"><strong>之前：</strong></p>\n<code-example language=\"typescript\">\n// shared.module.ts\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>],\n  declarations: [GreeterComponent],\n  exports: [GreeterComponent]\n})\nexport class SharedModule {}\n</code-example>\n<code-example language=\"typescript\">\n// greeter.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'greeter',\n  template: '&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showGreeting\"&gt;Hello&lt;/div&gt;',\n})\nexport class GreeterComponent {\n  showGreeting = true;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s2h6p2y5qkyl4avo82t6rkg9\"><strong>之后：</strong></p>\n<code-example language=\"typescript\">\n// shared.module.ts\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, GreeterComponent],\n  exports: [GreeterComponent]\n})\nexport class SharedModule {}\n</code-example>\n<code-example language=\"typescript\">\n// greeter.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'greeter',\n  template: '&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showGreeting\"&gt;Hello&lt;/div&gt;',\n  standalone: true,\n  imports: [<a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>]\n})\nexport class GreeterComponent {\n  showGreeting = true;\n}\n</code-example>\n<h3 id=\"remove-unnecessary-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7frnu95fkded2garz7b5dz8vz\">移除不必要的 NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#remove-unnecessary-ngmodules\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7eofjm4qwr93tt4il8pwetcot\">在将所有声明都转换为独立声明后，就可以安全地删除许多 NgModule 了。此步骤会删除这类模块声明和尽可能多的相应引用。如果迁移无法自动删除引用，它就会留下以下 TODO 注释，以便你可以手动删除 NgModule：</p>\n<code-example language=\"typescript\">\n/* TODO(standalone-migration): clean up removed <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> reference manually */\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dz73fzq4mtwevt2mtxdogg6yr\">如果该模块满足以下条件，则迁移器就认为该模块可以安全删除了：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8qx3h26nkxscqp89f7fy5rwt\">没有 <code>declarations</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d3pw93zpaicejx8q9ta8uuh9\">没有 <code>providers</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ad29hacoase27n416fgpnt9s6\">没有 <code>bootstrap</code> 组件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nq39w3ya5is9o7sxrhgb0htn\">没有引用 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 符号或无法删除的模块的 <code>imports</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5su6i34i4wbkvjjw2c888gime\">没有类成员。空构造函数将被忽略。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaf4w2mfc4bmjwfg76el4q4p\"><strong>之前：</strong></p>\n<code-example language=\"typescript\">\n// importer.module.ts\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [FooComponent, BarPipe],\n  exports: [FooComponent, BarPipe]\n})\nexport class ImporterModule {}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s2h6p2y5qkyl4avo82t6rkg9\"><strong>之后：</strong></p>\n<code-example language=\"typescript\">\n// importer.module.ts\n// Does not exist!\n</code-example>\n<h3 id=\"switch-to-standalone-bootstrapping-api\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8b0nxpjcouy99l8a8bqqtjk5s\">切换到独立的引导 API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#switch-to-standalone-bootstrapping-api\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ja9syj7da68re0rlrazjz0gn\">此步骤将 <code>bootstrapModule</code> 的任何用法转换为新的、基于独立的 <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code>。它还会将根组件切换为 <code>standalone: true</code> 并删除根 NgModule。如果根模块有任何 <code>providers</code> 或 <code>imports</code>，迁移会尝试将尽可能多的配置复制到新的引导程序调用中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaf4w2mfc4bmjwfg76el4q4p\"><strong>之前：</strong></p>\n<code-example language=\"typescript\">\n// ./app/app.module.ts\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n</code-example>\n<code-example language=\"typescript\">\n// ./app/app.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ selector: 'app', template: 'hello' })\nexport class AppComponent {}\n</code-example>\n<code-example language=\"typescript\">\n// ./main.ts\nimport { <a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a> } from '@angular/platform-browser';\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a>().bootstrapModule(AppModule).catch(e =&gt; console.error(e));\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s2h6p2y5qkyl4avo82t6rkg9\"><strong>之后：</strong></p>\n<code-example language=\"typescript\">\n// ./app/app.module.ts\n// Does not exist!\n</code-example>\n<code-example language=\"typescript\">\n// ./app/app.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ selector: 'app', template: 'hello', standalone: true })\nexport class AppComponent {}\n</code-example>\n<code-example language=\"typescript\">\n// ./main.ts\nimport { <a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a> } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\n\n<a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>(AppComponent).catch(e =&gt; console.error(e));\n</code-example>\n<h2 id=\"common-problems\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1l08z1e2rx8e4d2lt1awkvhts\">常见问题<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#common-problems\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yv5b7kn4ij90qpr3mratfvxe\">一些可能阻止原理图正常工作的常见问题包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4wv5xkqtoqljuq7pr1w2ci3p\">编译错误 —— 如果项目有编译错误，Angular 就无法正确分析和迁移它。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fl0aq7x8gwnm4o4dlq01ad91\">文件未包含在 tsconfig 中 —— 原理图通过分析项目的 <code>tsconfig.json</code> 文件来确定要迁移的文件。该原理图不会包括任何未被 tsconfig 捕获的文件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29ks6jie3vd45vjbez5yj21cg\">无法静态分析的代码 —— 原理图使用静态分析来理解你的代码并确定在哪里进行更改。迁移可能会跳过任何包含在构建时无法静态分析的元数据的类。</li>\n</ul>\n<h2 id=\"limitations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmsauccxl8xk9tpc1jn2jncks\">限制<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#limitations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rlbxl5iv4ofawh0j5kma58ax\">由于迁移的规模和复杂性，有一些情况是原理图无法处理的：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyfsddu0uhv2lrwlelrd3dl1d\">因为单元测试不是预先（AoT）编译的，所以在单元测试中往组件的 <code>imports</code> 中添加类可能不完全正确。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ppble6k40ew19vsv49aou3jl\">该原理图依赖于对 Angular API 的直接调用。原理图无法识别围绕 Angular API 的自定义包装器。例如，如果你在那里定义了一个自定义的 <code>customConfigureTestModule</code> 函数来包装 <code>TestBed.configureTestingModule</code>，它声明的组件可能无法被识别。</li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间：Wed Feb 15 2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgIf\n - api/core/Component\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/platform-browser/bootstrapApplication\n - api/platform-browser/platformBrowser\n - guide/schematics\n - guide/standalone-components\n - guide/standalone-migration#after-the-migration\n - guide/standalone-migration#common-problems\n - guide/standalone-migration#convert-declarations-to-standalone\n - guide/standalone-migration#limitations\n - guide/standalone-migration#migrate-an-existing-angular-project-to-standalone\n - guide/standalone-migration#migration-modes\n - guide/standalone-migration#migrations-steps\n - guide/standalone-migration#prerequisites\n - guide/standalone-migration#remove-unnecessary-ngmodules\n - guide/standalone-migration#schematic-options\n - guide/standalone-migration#switch-to-standalone-bootstrapping-api\n-->"}
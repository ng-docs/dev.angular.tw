{"id":"guide/standalone-migration","title":"將現有的 Angular 專案遷移到獨立專案","contents":"<div class=\"content\">\n  <h1 id=\"migrate-an-existing-angular-project-to-standalone\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3z2mhd4e53kky93skdbur6s4n\">將現有的 Angular 專案遷移到獨立專案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#migrate-an-existing-angular-project-to-standalone\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2u02l7jhh843ojpgdnuopv5fg\">從版本 15.2.0 開始，Angular 提供了一個<a href=\"guide/schematics\">原理圖</a>來幫助專案作者將現有專案轉換為<a href=\"guide/standalone-components\">新的獨立 API</a>。該原理圖旨在自動轉換儘可能多的程式碼，但可能需要專案作者進行一些手動修復。使用以下指令執行原理圖：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate @angular/core:standalone\n\n</code-example>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vcb4xrpcx7581usuzxbe84xx\">在使用本原理圖之前，請確保專案：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jpdmgkfmovcgd0z72pbp1l95\">使用的是 Angular 15.2.0 或更高版本。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9cu9yi0px5l2al7iztp63vr4w\">建立沒有任何編譯錯誤。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dx1kjq08yc122sdp4tecak693\">在乾淨的 Git 分支上，所有工作都已儲存。</li>\n</ol>\n<h2 id=\"schematic-options\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bavmc9s22pe9kepfeabnk6djl\">原理圖選項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#schematic-options\"><i class=\"material-icons\">link</i></a></h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba7axgt6bldn3wzg2te3xd6f\">選項</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>mode</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u1cg89dxcpd15r6l0uib0dft\">要執行的轉換。請檢視下面的 \n<a href=\"guide/standalone-migration#migration-modes\">遷移模式</a>，瞭解可用選項的詳細訊息。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>path</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"277r3iboo5ozpll7zt79dura2\">要遷移的路徑，相對於專案根目錄。您可以使用此選項逐步遷移專案的部分。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"migrations-steps\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dg30c2pdh1p1u5xk1mmgt4qo\">遷移步驟<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#migrations-steps\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vfl9niz0vac7w8b5yzr1svq5\">遷移過程由三個步驟組成。你必須多次執行它並手動檢查專案是否能按預期建立和執行。</p>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hsql3vswumoq8o4rcoiskq24\">注意</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1st0j3fq5g3zmwg5mf8lr4ttz\">雖然腳手架可以自動更新大部分程式碼，但有些極端情況還是需要開發人員進行干預。你應該為在每個遷移步驟之後進行手動修復做好準備。此外，腳手架生成的新程式碼也可能與你的程式碼格式規則不對應。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4d89559pney2jprxbbc9rqtxq\">按照下面列出的順序執行遷移，驗證你的程式碼在每個步驟之間建立和執行：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bty8cj7umhzoflb306gq0xfa3\">執行 <code>ng g @angular/core:standalone</code> 並選擇 『Convert all components, directives and pipes to standalone』</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sjvx44sp8pn95jrgkjujz8i0\">執行 <code>ng g @angular/core:standalone</code> 並選擇 『Remove unnecessary NgModule classes』</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c891h5jrzsixqvc3xmn37tdwm\">執行 <code>ng g @angular/core:standalone</code> 並選擇 『Bootstrap the project using standalone APIs』</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"274pgm8x603hsr3a3v3szmvu5\">執行任何靜態分析（lint）和格式檢查，修復任何故障，並送出結果</li>\n</ol>\n<h2 id=\"after-the-migration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o0sl7vcip896jleduh4ln757\">遷移後<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#after-the-migration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ds5zpxzpne3q1ncjjxtgug5ew\">恭喜，你的應用程式已轉換為獨立應用程式 🎉。這些是你現在可能想要採取的一些可選的後續步驟：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6p26bu0god4kx483nbz31gd90\">查詢並刪除任何剩餘的 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 宣告：由於<a href=\"guide/standalone-migration#remove-unnecessary-ngmodules\">『刪除不必要的 NgModule』步驟</a>不能自動刪除所有模組，你可能必須手動刪除剩餘的宣告。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33o9svh76vp122ua7vmzs2uub\">執行專案的單元測試並修復所有故障。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b62cauy9y4zll2fczpxe7az6\">如果專案使用了自動格式化，則執行所有程式碼格式化程式。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8tpsm9tnr8m0gijvjyjyjua3\">執行專案中的任何程式碼檢查器，並修復新的警告。一些程式碼檢查器支援 \n<code>--fix</code> 標誌，可以自動解決一些警告。</li>\n</ul>\n<h2 id=\"migration-modes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba21qxx7l1j72s7q5vo833csn\">遷移模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#migration-modes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mhmrivpwnh0sqfk9qa12n9yv\">遷移有以下幾個步驟：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ba57mhw6ct2lftjhk8y26d309\">將宣告轉換為獨立的。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o86zam11gw2j0ao9ri8w5dx0\">移除不必要的 NgModule。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ypt9i37g9gyvpt0tyunpl94q\">切換到獨立的引導啟動 API。</li>\n</ol>\n<h3 id=\"convert-declarations-to-standalone\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5v0diwy2sdcglowvhhsked38\">將宣告轉換為獨立的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#convert-declarations-to-standalone\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dksmj3jagszluno2k0fdozgot\">在這種模式下，遷移透過設定 <code>standalone: true</code> 並將依賴項新增到它們的 <code>imports</code> 陣列來將所有元件、指令和通道轉換為獨立的。</p>\n<div class=\"callout is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39ufyt1kckyfecmtxiytf8qag\">在此步驟中，該原理圖會忽略在此過程中引導元件的 NgModules，因為它們很可能是由 <code>bootstrapModule</code> 使用的根模組，而不是相容獨立的 <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code>。該原理圖會自動將這些宣告轉換為<a href=\"guide/standalone-migration#switch-to-standalone-bootstrapping-api\">\"獨立引導 API\"</a> 步驟的一部分。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaf4w2mfc4bmjwfg76el4q4p\"><strong>之前：</strong></p>\n<code-example language=\"typescript\">\n// shared.module.ts\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>],\n  declarations: [GreeterComponent],\n  exports: [GreeterComponent]\n})\nexport class SharedModule {}\n</code-example>\n<code-example language=\"typescript\">\n// greeter.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'greeter',\n  template: '&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showGreeting\"&gt;Hello&lt;/div&gt;',\n})\nexport class GreeterComponent {\n  showGreeting = true;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s2h6p2y5qkyl4avo82t6rkg9\"><strong>之後：</strong></p>\n<code-example language=\"typescript\">\n// shared.module.ts\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, GreeterComponent],\n  exports: [GreeterComponent]\n})\nexport class SharedModule {}\n</code-example>\n<code-example language=\"typescript\">\n// greeter.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'greeter',\n  template: '&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showGreeting\"&gt;Hello&lt;/div&gt;',\n  standalone: true,\n  imports: [<a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>]\n})\nexport class GreeterComponent {\n  showGreeting = true;\n}\n</code-example>\n<h3 id=\"remove-unnecessary-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7frnu95fkded2garz7b5dz8vz\">移除不必要的 NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#remove-unnecessary-ngmodules\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7eofjm4qwr93tt4il8pwetcot\">在將所有宣告都轉換為獨立宣告後，就可以安全地刪除許多 NgModule 了。此步驟會刪除這類別模組宣告和儘可能多的相應引用。如果遷移無法自動刪除引用，它就會留下以下 TODO 註解，以便你可以手動刪除 NgModule：</p>\n<code-example language=\"typescript\">\n/* TODO(standalone-migration): clean up removed <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> reference manually */\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dz73fzq4mtwevt2mtxdogg6yr\">如果該模組滿足以下條件，則遷移器就認為該模組可以安全刪除了：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c8qx3h26nkxscqp89f7fy5rwt\">沒有 <code>declarations</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d3pw93zpaicejx8q9ta8uuh9\">沒有 <code>providers</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ad29hacoase27n416fgpnt9s6\">沒有 <code>bootstrap</code> 元件。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nq39w3ya5is9o7sxrhgb0htn\">沒有引用 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 符號或無法刪除的模組的 <code>imports</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5su6i34i4wbkvjjw2c888gime\">沒有類別成員。空建構式函式將被忽略。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaf4w2mfc4bmjwfg76el4q4p\"><strong>之前：</strong></p>\n<code-example language=\"typescript\">\n// importer.module.ts\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [FooComponent, BarPipe],\n  exports: [FooComponent, BarPipe]\n})\nexport class ImporterModule {}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s2h6p2y5qkyl4avo82t6rkg9\"><strong>之後：</strong></p>\n<code-example language=\"typescript\">\n// importer.module.ts\n// Does not exist!\n</code-example>\n<h3 id=\"switch-to-standalone-bootstrapping-api\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8b0nxpjcouy99l8a8bqqtjk5s\">切換到獨立的引導 API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#switch-to-standalone-bootstrapping-api\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ja9syj7da68re0rlrazjz0gn\">此步驟將 <code>bootstrapModule</code> 的任何用法轉換為新的、基於獨立的 <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code>。它還會將根元件切換為 <code>standalone: true</code> 並刪除根 NgModule。如果根模組有任何 <code>providers</code> 或 <code>imports</code>，遷移會嘗試將盡可能多的設定複製到新的引導程式呼叫中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaf4w2mfc4bmjwfg76el4q4p\"><strong>之前：</strong></p>\n<code-example language=\"typescript\">\n// ./app/app.module.ts\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n</code-example>\n<code-example language=\"typescript\">\n// ./app/app.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ selector: 'app', template: 'hello' })\nexport class AppComponent {}\n</code-example>\n<code-example language=\"typescript\">\n// ./main.ts\nimport { <a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a> } from '@angular/platform-browser';\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a>().bootstrapModule(AppModule).catch(e =&gt; console.error(e));\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3s2h6p2y5qkyl4avo82t6rkg9\"><strong>之後：</strong></p>\n<code-example language=\"typescript\">\n// ./app/app.module.ts\n// Does not exist!\n</code-example>\n<code-example language=\"typescript\">\n// ./app/app.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ selector: 'app', template: 'hello', standalone: true })\nexport class AppComponent {}\n</code-example>\n<code-example language=\"typescript\">\n// ./main.ts\nimport { <a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a> } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\n\n<a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>(AppComponent).catch(e =&gt; console.error(e));\n</code-example>\n<h2 id=\"common-problems\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1l08z1e2rx8e4d2lt1awkvhts\">常見問題<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#common-problems\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5yv5b7kn4ij90qpr3mratfvxe\">一些可能阻止原理圖正常工作的常見問題包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e4wv5xkqtoqljuq7pr1w2ci3p\">編譯錯誤 —— 如果專案有編譯錯誤，Angular 就無法正確分析和遷移它。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fl0aq7x8gwnm4o4dlq01ad91\">檔案未包含在 tsconfig 中 —— 原理圖透過分析專案的 <code>tsconfig.json</code> 檔案來確定要遷移的檔案。該原理圖不會包括任何未被 tsconfig 捕獲的檔案。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29ks6jie3vd45vjbez5yj21cg\">無法靜態分析的程式碼 —— 原理圖使用靜態分析來理解你的程式碼並確定在哪裡進行更改。遷移可能會跳過任何包含在建立時無法靜態分析的元資料的類別。</li>\n</ul>\n<h2 id=\"limitations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmsauccxl8xk9tpc1jn2jncks\">限制<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#limitations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rlbxl5iv4ofawh0j5kma58ax\">由於遷移的規模和複雜性，有一些情況是原理圖無法處理的：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyfsddu0uhv2lrwlelrd3dl1d\">因為單元測試不是預先（AoT）編譯的，所以在單元測試中往元件的 <code>imports</code> 中新增類別可能不完全正確。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ppble6k40ew19vsv49aou3jl\">該原理圖依賴於對 Angular API 的直接呼叫。原理圖無法識別圍繞 Angular API 的自定義套件裝器。例如，如果你在那裡定義了一個自定義的 <code>customConfigureTestModule</code> 函式來包裝 <code>TestBed.configureTestingModule</code>，它宣告的元件可能無法被識別。</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：Wed Feb 15 2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgIf\n - api/core/Component\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/platform-browser/bootstrapApplication\n - api/platform-browser/platformBrowser\n - guide/schematics\n - guide/standalone-components\n - guide/standalone-migration#after-the-migration\n - guide/standalone-migration#common-problems\n - guide/standalone-migration#convert-declarations-to-standalone\n - guide/standalone-migration#limitations\n - guide/standalone-migration#migrate-an-existing-angular-project-to-standalone\n - guide/standalone-migration#migration-modes\n - guide/standalone-migration#migrations-steps\n - guide/standalone-migration#prerequisites\n - guide/standalone-migration#remove-unnecessary-ngmodules\n - guide/standalone-migration#schematic-options\n - guide/standalone-migration#switch-to-standalone-bootstrapping-api\n-->"}
{"id":"guide/libraries","title":"Angular 库开发概述","contents":"<div class=\"content\">\n  <h1 id=\"overview-of-angular-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwbbz0hfqfvvermuhu7sqrfp6\">Angular 库开发概述<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/libraries#overview-of-angular-libraries\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bdcimpwvfap6awspnqx0i11v\">许多应用都需要解决一些同样的常见问题，比如提供统一的用户界面、渲染数据，以及允许数据输入。开发人员可以为特定的领域创建一些通用解决方案，以便在不同的应用中重复使用。像这样的解决方案就可以构建成 Angular <em>库</em>，这些库可以作为 <em>npm 包</em>进行发布和共享。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5b9h3ijwqtfec0hz5r02o3y0v\">Angular 库是一个 Angular <a href=\"guide/glossary#project\">项目</a>，它与应用的不同之处在于它本身是不能运行的。必须在某个应用中导入库并使用它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"al6szxpgd680w5set4r9hgqgv\">这些库扩展了 Angular 的基本功能。比如，要向应用添加<a href=\"guide/reactive-forms\">响应式表单</a>，请使用 <code>ng add @angular/forms</code> 添加该库的 npm 包，再从应用代码中，从 <code>@angular/forms</code> 库中导入 <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>。同样，把 <a href=\"guide/service-worker-intro\">Service Worker</a> 库添加到 Angular 应用中是将应用转换为<a href=\"https://developers.google.com/web/progressive-web-apps\">渐进式 Web 应用程序</a>（PWA）的步骤之一。<a href=\"https://material.angular.cn\">Angular Material</a> 是一个大型通用库的典范，它提供了一些复杂、可复用，兼具高度适应性的 UI 组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ooxukm4q8u7eae3k6u8e0uf1\">任何一位应用开发者都可以使用这样或那样的库，它们都已经由 Angular 团队或第三方发布为 npm 包。参阅<a href=\"guide/using-libraries\">使用已发布的库</a>。</p>\n<h2 id=\"creating-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zlzz7c1g9hkwkz1rdjs5em5m\">创建库<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/libraries#creating-libraries\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab6ijwp4s9d9lowqu5ryjp0n9\">如果已经开发出了适合复用的功能，你就可以创建自己的库。这些库可以在你的工作区中本地使用，也可以把它们发布成 <a href=\"guide/npm-packages\">npm 包</a>，共享给其它项目或其它 Angular 开发者。这些包可以发布到 npm 服务器、一个私有的 npm 企业版服务器，或一个支持 npm 包的私有包管理系统。参阅<a href=\"guide/creating-libraries\">创建库</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs7ww45k8evol1ncbu2tj7cs2\">是否把一些功能打包成库是一种架构决策。做出比较以决定一个功能应该做成组件还是服务，或决定一个组件的范围该有多大。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3io77n8wuf8b59dcqx807l4g7\">把功能打包成库会强迫库中的工件与应用的业务逻辑分离。这有助于避免各种不良实践或架构失误，这些失误会导致将来很难解耦和复用代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9k3bs819vyrm5zcfsnbjzd6g1\">把代码放到一个单独的库中比简单地把所有内容都放在一个应用中要复杂得多。它需要更多的时间投入，并且需要管理、维护和更新这个库。不过，当把该库用在多个应用中时，这种复杂性就会得到回报。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a48g6m943qwjx56redu89xhlc\"><strong>注意</strong>：<br>\n这里所说的库是为了供 Angular 应用使用的。\n如果想把 Angular 的功能添加到非 Angular 应用中，可以使用 <a href=\"guide/elements\">Angular 自定义元素</a>。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n-->\n<!-- links from this doc:\n - api/forms/ReactiveFormsModule\n - guide/creating-libraries\n - guide/elements\n - guide/glossary#project\n - guide/libraries#creating-libraries\n - guide/libraries#overview-of-angular-libraries\n - guide/npm-packages\n - guide/reactive-forms\n - guide/service-worker-intro\n - guide/using-libraries\n - https://developers.google.com/web/progressive-web-apps\n - https://material.angular.io\n-->"}
{"id":"guide/libraries","title":"Angular 函式庫開發概述","contents":"<div class=\"content\">\n  <h1 id=\"overview-of-angular-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwbbz0hfqfvvermuhu7sqrfp6\">Angular 函式庫開發概述<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/libraries#overview-of-angular-libraries\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bdcimpwvfap6awspnqx0i11v\">許多應用都需要解決一些同樣的常見問題，比如提供統一的使用者介面、渲染資料，以及允許資料輸入。開發人員可以為特定的領域建立一些通用解決方案，以便在不同的應用中重複使用。像這樣的解決方案就可以建立成 Angular <em>函式庫</em>，這些函式庫可以作為 <em>npm 套件</em>進行發布和共享。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5b9h3ijwqtfec0hz5r02o3y0v\">Angular 函式庫是一個 Angular <a href=\"guide/glossary#project\">專案</a>，它與應用的不同之處在於它本身是不能執行的。必須在某個應用中匯入函式庫並使用它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"al6szxpgd680w5set4r9hgqgv\">這些函式庫擴充套件了 Angular 的基本功能。比如，要嚮應用新增<a href=\"guide/reactive-forms\">回應式表單</a>，請使用 <code>ng add @angular/forms</code> 新增該函式庫的 npm 套件，再從應用程式碼中，從 <code>@angular/forms</code> 庫中匯入 <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>。同樣，把 <a href=\"guide/service-worker-intro\">Service Worker</a> 函式庫新增到 Angular 應用中是將應用轉換為<a href=\"https://developers.google.com/web/progressive-web-apps\">漸進式 Web 應用程式</a>（PWA）的步驟之一。<a href=\"https://material.angular.cn\">Angular Material</a> 是一個大型通用函式庫的典範，它提供了一些複雜、可複用，兼具高度適應性的 UI 元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ooxukm4q8u7eae3k6u8e0uf1\">任何一位應用開發者都可以使用這樣或那樣的函式庫，它們都已經由 Angular 團隊或第三方發布為 npm 套件。參閱<a href=\"guide/using-libraries\">使用已發布的函式庫</a>。</p>\n<h2 id=\"creating-libraries\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zlzz7c1g9hkwkz1rdjs5em5m\">建立函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/libraries#creating-libraries\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ab6ijwp4s9d9lowqu5ryjp0n9\">如果已經開發出了適合複用的功能，你就可以建立自己的函式庫。這些函式庫可以在你的工作區中本地使用，也可以把它們發布成 <a href=\"guide/npm-packages\">npm 套件</a>，共享給其它專案或其它 Angular 開發者。這些套件可以發布到 npm 伺服器、一個私有的 npm 企業版伺服器，或一個支援 npm 套件的私有套件管理系統。參閱<a href=\"guide/creating-libraries\">建立函式庫</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs7ww45k8evol1ncbu2tj7cs2\">是否把一些功能打包成函式庫是一種架構決策。做出比較以決定一個功能應該做成元件還是服務，或決定一個元件的範圍該有多大。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3io77n8wuf8b59dcqx807l4g7\">把功能打包成函式庫會強迫庫中的工件與應用的業務邏輯分離。這有助於避免各種不良實踐或架構失誤，這些失誤會導致將來很難解耦和複用程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9k3bs819vyrm5zcfsnbjzd6g1\">把程式碼放到一個單獨的庫中比簡單地把所有內容都放在一個應用中要複雜得多。它需要更多的時間投入，並且需要管理、維護和更新這個函式庫。不過，當把該函式庫用在多個應用中時，這種複雜性就會得到回報。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a48g6m943qwjx56redu89xhlc\"><strong>注意</strong>：<br>\n這裡所說的函式庫是為了供 Angular 應用使用的。\n如果想把 Angular 的功能新增到非 Angular 應用中，可以使用 <a href=\"guide/elements\">Angular 自定義元素</a>。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n-->\n<!-- links from this doc:\n - api/forms/ReactiveFormsModule\n - guide/creating-libraries\n - guide/elements\n - guide/glossary#project\n - guide/libraries#creating-libraries\n - guide/libraries#overview-of-angular-libraries\n - guide/npm-packages\n - guide/reactive-forms\n - guide/service-worker-intro\n - guide/using-libraries\n - https://developers.google.com/web/progressive-web-apps\n - https://material.angular.io\n-->"}
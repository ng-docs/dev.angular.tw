{"id":"guide/dependency-injection-context","title":"注入上下文","contents":"<div class=\"content\">\n  <h1 id=\"injection-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6i2331m8j8vxiqrm3m7o9qbot\">注入上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#injection-context\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"424uqqv5algxoafvkza4dmgcs\">依赖注入（DI）系统在内部依赖于当前注入器可用的运行时上下文。 这意味着只有在这个上下文中执行代码时，注入器才能正常工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bygdte7vyonh6p4d6sn4zin0v\">注入上下文在以下情况下可用：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gu106lc22dreivhybphtspi5\">在由 DI 系统实例化的类的构造函数（通过 \n<code>constructor</code>）中，例如 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 或 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29172th10uuxu5ic4snjdofwf\">在此类类的字段的初始化器中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jkpszgeam34zsfe1887jmqlc\">在为 <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> 的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> <code>useFactory</code> 的工厂函数中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjff316boi01659epye5taniq\">在为 <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code> 指定的 <code>factory</code> 函数中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e593fs1luwtnm4t0nyw3aotu\">在运行在注入上下文中的堆栈帧内。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yldkgv94je4ou43278o7e89c\">知道何时处于注入上下文中，将允许你使用 \n<a href=\"api/core/inject\"><code>inject</code></a> 函数来注入实例。</p>\n<h2 id=\"class-constructors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3oqj1hssym4rnwiox0y7y15s7\">类构造函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#class-constructors\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ey803ud407sdvjmxoehuiz9v0\">每当 DI 系统实例化一个类时，都是在注入上下文中进行的。这由框架本身处理。类的构造函数在那个运行时上下文中执行，从而允许使用 \n<a href=\"api/core/inject\"><code>inject</code></a> 函数来注入一个令牌。</p>\n<code-example language=\"typescript\">\nclass MyComponent  {\n  private service1: Service1;\n  private service2: Service2 = inject(Service2); // In context\n\n  constructor() {\n    this.service1 = inject(HeroService) // In context\n  }\n}\n</code-example>\n<h2 id=\"stack-frame-in-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"351h91x0frwbrcy4xnwswpvly\">上下文中的堆栈帧<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#stack-frame-in-context\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38vtybn2ljdo770k8yvvr4wb6\">某些 API 设计为在注入上下文中运行。例如，路由守卫就是这种情况。它允许使用 \n<a href=\"api/core/inject\"><code>inject</code></a> 来在守卫函数内访问服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3ugeud1hqomf26bnpvd6n2d7\">这里是一个 \n<code><a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a></code> 的示例 \n<code-example format=\"typescript\" language=\"typescript\">\n  const canActivateTeam: \n <a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a> = (route: \n <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, state: \n <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>) =&gt; { return inject(PermissionsService).canActivate(inject(UserToken), route.params.id); }; \n</code-example></p>\n<h2 id=\"run-within-an-injection-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b1oyrnzm5bu9hsv5breup3h6\">在注入上下文中运行<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#run-within-an-injection-context\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tym238jlgs66crm1tqumkbua\">当你想要在注入上下文中运行特定函数但又不在其中时，可以使用 \n<code><a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a></code>。 这需要访问给定的注入器，比如例如 \n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>。</p>\n<code-example path=\"dependency-injection/src/app/heroes/hero.service.5.ts\" region=\"run-in-context\" header=\"src/app/heroes/hero.service.ts\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n  private environmentInjector = inject(<a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a>);\n\n  someMethod() {\n    <a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a>(this.environmentInjector, () =&gt; {\n      inject(SomeService); // Do what you need with the injected service\n    });\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3u1juoywca3hmuzqoanxk9pnp\">请注意，\n<code>inject</code> 只有在注入器能够解析所需令牌时才会返回一个实例。</p>\n<h2 id=\"asserts-the-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nggrxl3vuxqokgusz5o03mnd\">断言上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#asserts-the-context\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43eho5fzf3hupbe3jlwfcc88p\">Angular 提供了 \n<code><a href=\"api/core/assertInInjectionContext\" class=\"code-anchor\">assertInInjectionContext</a></code> 辅助函数，用于断言当前上下文是否为注入上下文。</p>\n<h2 id=\"using-di-outside-of-a-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ckg2xj8uymhpwr4stuxcfzle\">在上下文之外使用 DI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#using-di-outside-of-a-context\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj6oumaddisiwib8dc1ndntwq\">在不在注入上下文中调用 \n<a href=\"api/core/inject\"><code>inject</code></a> 或调用 \n<code><a href=\"api/core/assertInInjectionContext\" class=\"code-anchor\">assertInInjectionContext</a></code> 时，将抛出错误 \n<a href=\"/errors/NG0203\">NG0203</a>。</p>\n\n  <div class=\"reviewed\">最后复查时间：Tue Apr 11 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core\n - api/core/CreateEffectOptions\n - api/core/TemplateRef\n - api/core/assertInInjectionContext\n - api/core/runInInjectionContext\n - api/core/rxjs-interop/ToObservableOptions\n - api/core/rxjs-interop/takeUntilDestroyed\n - api/router/withNavigationErrorHandler\n - errors/NG0203\n - guide/dependency-injection-overview\n-->\n<!-- links from this doc:\n - /errors/NG0203\n - api/core/Component\n - api/core/EnvironmentInjector\n - api/core/Injectable\n - api/core/InjectionToken\n - api/core/Provider\n - api/core/assertInInjectionContext\n - api/core/inject\n - api/core/runInInjectionContext\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivateFn\n - api/router/RouterStateSnapshot\n - guide/dependency-injection-context#asserts-the-context\n - guide/dependency-injection-context#class-constructors\n - guide/dependency-injection-context#injection-context\n - guide/dependency-injection-context#run-within-an-injection-context\n - guide/dependency-injection-context#stack-frame-in-context\n - guide/dependency-injection-context#using-di-outside-of-a-context\n-->"}
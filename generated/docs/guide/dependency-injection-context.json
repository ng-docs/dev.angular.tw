{"id":"guide/dependency-injection-context","title":"注入上下文","contents":"<div class=\"content\">\n  <h1 id=\"injection-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6i2331m8j8vxiqrm3m7o9qbot\">注入上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#injection-context\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"424uqqv5algxoafvkza4dmgcs\">依賴注入（DI）系統在內部依賴於當前注入器可用的執行時上下文。 這意味著只有在這個上下文中執行程式碼時，注入器才能正常工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bygdte7vyonh6p4d6sn4zin0v\">注入上下文在以下情況下可用：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gu106lc22dreivhybphtspi5\">在由 DI 系統實例化的類別的建構式函式（透過 \n<code>constructor</code>）中，例如 \n<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 或 \n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29172th10uuxu5ic4snjdofwf\">在此類類別的欄位的初始化器中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jkpszgeam34zsfe1887jmqlc\">在為 <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> 的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> <code>useFactory</code> 的工廠函式中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjff316boi01659epye5taniq\">在為 <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code> 指定的 <code>factory</code> 函式中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e593fs1luwtnm4t0nyw3aotu\">在執行在注入上下文中的堆疊幀內。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8yldkgv94je4ou43278o7e89c\">知道何時處於注入上下文中，將允許你使用 \n<a href=\"api/core/inject\"><code>inject</code></a> 函式來注入實例。</p>\n<h2 id=\"class-constructors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3oqj1hssym4rnwiox0y7y15s7\">類建構式函式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#class-constructors\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ey803ud407sdvjmxoehuiz9v0\">每當 DI 系統實例化一個類時，都是在注入上下文中進行的。這由框架本身處理。類別的建構式函式在那個執行時上下文中執行，從而允許使用 \n<a href=\"api/core/inject\"><code>inject</code></a> 函式來注入一個令牌。</p>\n<code-example language=\"typescript\">\nclass MyComponent  {\n  private service1: Service1;\n  private service2: Service2 = inject(Service2); // In context\n\n  constructor() {\n    this.service1 = inject(HeroService) // In context\n  }\n}\n</code-example>\n<h2 id=\"stack-frame-in-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"351h91x0frwbrcy4xnwswpvly\">上下文中的堆疊幀<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#stack-frame-in-context\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38vtybn2ljdo770k8yvvr4wb6\">某些 API 設計為在注入上下文中執行。例如，路由守衛就是這種情況。它允許使用 \n<a href=\"api/core/inject\"><code>inject</code></a> 來在守衛函式內訪問服務。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d3ugeud1hqomf26bnpvd6n2d7\">這裡是一個 \n<code><a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a></code> 的範例 \n<code-example format=\"typescript\" language=\"typescript\">\n  const canActivateTeam: \n <a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a> = (route: \n <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, state: \n <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>) =&gt; { return inject(PermissionsService).canActivate(inject(UserToken), route.params.id); }; \n</code-example></p>\n<h2 id=\"run-within-an-injection-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b1oyrnzm5bu9hsv5breup3h6\">在注入上下文中執行<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#run-within-an-injection-context\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tym238jlgs66crm1tqumkbua\">當你想要在注入上下文中執行特定函式但又不在其中時，可以使用 \n<code><a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a></code>。 這需要訪問給定的注入器，比如例如 \n<code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>。</p>\n<code-example path=\"dependency-injection/src/app/heroes/hero.service.5.ts\" region=\"run-in-context\" header=\"src/app/heroes/hero.service.ts\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n  private environmentInjector = inject(<a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a>);\n\n  someMethod() {\n    <a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a>(this.environmentInjector, () =&gt; {\n      inject(SomeService); // Do what you need with the injected service\n    });\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3u1juoywca3hmuzqoanxk9pnp\">請注意，\n<code>inject</code> 只有在注入器能夠解析所需令牌時才會回傳一個實例。</p>\n<h2 id=\"asserts-the-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nggrxl3vuxqokgusz5o03mnd\">斷言上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#asserts-the-context\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43eho5fzf3hupbe3jlwfcc88p\">Angular 提供了 \n<code><a href=\"api/core/assertInInjectionContext\" class=\"code-anchor\">assertInInjectionContext</a></code> 輔助函式，用於斷言當前上下文是否為注入上下文。</p>\n<h2 id=\"using-di-outside-of-a-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ckg2xj8uymhpwr4stuxcfzle\">在上下文之外使用 DI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-context#using-di-outside-of-a-context\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj6oumaddisiwib8dc1ndntwq\">在不在注入上下文中呼叫 \n<a href=\"api/core/inject\"><code>inject</code></a> 或呼叫 \n<code><a href=\"api/core/assertInInjectionContext\" class=\"code-anchor\">assertInInjectionContext</a></code> 時，將丟擲錯誤 \n<a href=\"/errors/NG0203\">NG0203</a>。</p>\n\n  <div class=\"reviewed\">最後複查時間：Tue Apr 11 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core\n - api/core/CreateEffectOptions\n - api/core/TemplateRef\n - api/core/assertInInjectionContext\n - api/core/runInInjectionContext\n - api/core/rxjs-interop/ToObservableOptions\n - api/core/rxjs-interop/takeUntilDestroyed\n - api/router/withNavigationErrorHandler\n - errors/NG0203\n - guide/dependency-injection-overview\n-->\n<!-- links from this doc:\n - /errors/NG0203\n - api/core/Component\n - api/core/EnvironmentInjector\n - api/core/Injectable\n - api/core/InjectionToken\n - api/core/Provider\n - api/core/assertInInjectionContext\n - api/core/inject\n - api/core/runInInjectionContext\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivateFn\n - api/router/RouterStateSnapshot\n - guide/dependency-injection-context#asserts-the-context\n - guide/dependency-injection-context#class-constructors\n - guide/dependency-injection-context#injection-context\n - guide/dependency-injection-context#run-within-an-injection-context\n - guide/dependency-injection-context#stack-frame-in-context\n - guide/dependency-injection-context#using-di-outside-of-a-context\n-->"}
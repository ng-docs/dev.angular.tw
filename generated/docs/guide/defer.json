{"id":"guide/defer","title":"可延迟视图","contents":"<div class=\"content\">\n  <h1 id=\"deferrable-views\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3q4t2vob8qvc0bj45iceb1d8\">可延迟视图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#deferrable-views\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ivgu86loww6mg4fq1brezlnd\">概览<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#overview\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aicu6m9211e41eapiulu3ifsa\">可延迟视图可用于组件模板中延迟加载该模板中的某些依赖项。这些依赖项包括组件、指令和管道，以及任何相关的 CSS。要使用此功能，你可以在模板中声明性地将一个部分包装在一个指定加载条件的 \n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code> 块中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgjo4r93vj19xips92bx6nb3v\">可延迟视图支持一系列 \n<a href=\"guide/defer#triggers\">触发器</a>、\n<a href=\"guide/defer#prefetching\">预取</a>，以及用于 \n<a href=\"guide/defer#placeholder\">占位符</a>、\n<a href=\"guide/defer#loading\">加载</a> 和 \n<a href=\"guide/defer#error\">错误</a> 状态管理的几个子块。你还可以使用 \n<a href=\"guide/defer#when\"><code>when</code></a> 和 \n<a href=\"guide/defer#prefetching\"><code>prefetch when</code></a> 创建自定义条件。</p>\n<code-example language=\"html\">\n@defer {\n  &lt;large-component /&gt;\n}\n</code-example>\n<h2 id=\"why-use-deferrable-views\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqw38jgvw2xoyqoitjjbfww7l\">为什么使用可延迟视图？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#why-use-deferrable-views\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87h850xe0w36jk0pxp5okysnq\">可延迟视图，也称为 \n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code> 块，是一个强大的工具，可用于减少应用程序的初始捆绑包大小，或者推迟加载可能直到以后才会被加载的重型组件。这应该会导致更快的初始加载速度，并提高你的核心 Web Vitals（CWV）结果。推迟一些组件直到以后应该特别能够改善最大内容绘制（LCP）和首字节时间（TTFB）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f27r0p8vps0xkn2rys4bpfdwq\">注意：强烈建议任何推迟加载的组件，一旦依赖项加载完成可能导致布局变化的，都应放在页面下方或者对用户尚不可见的位置。</p>\n<h2 id=\"which-dependencies-are-defer-loadable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"av5807mkv3w8igny4fjzbbew2\">哪些依赖项可以推迟加载？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#which-dependencies-are-defer-loadable\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81jhtmyvjzgcvanzfheub7ccc\">为了使 \n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code> 块中的依赖项能够推迟加载，它们需要满足两个条件：</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dga4a4vefv1w4omte5ydor2i2\">它们必须是独立的。非独立的依赖项无法推迟加载，并且将仍然被急性加载，即使在 \n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code> 块内部。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ao19h2cgbudx6xj6ffygdwbah\">它们不能直接从同一文件中的其他位置引用，即使在 \n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code> 块外部；这包括 ViewChild 查询。</p>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3q43pbzuijfspeey0hfsvvc4x\">在推迟块中使用的组件、指令和管道的传递依赖关系可以是独立的或基于 NgModule，并且仍将被推迟加载。</p>\n<h2 id=\"blocks\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5xwaqbi0e61umqg5kpxpysa\">块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#blocks\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ttaydr0z6jzzri65bfq369n2\"><code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code> 块具有几个子块，用于优雅地处理推迟加载过程中的不同阶段。</p>\n<h3 id=\"defer\"><code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#defer\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2c2drayszg3e61zu0jm0tbjud\">主 \n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code> 块的内容是延迟加载的内容部分。它在初始渲染时不会被呈现，所有内容将在指定的 \n<a href=\"guide/defer#triggers\">触发器</a> 或 \n<code>when</code> 条件满足并且依赖项被获取后才会显示。默认情况下，\n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code> 块在浏览器状态变为 \n<a href=\"guide/defer#on-idle\">空闲</a> 时触发。</p>\n<h3 id=\"placeholder\"><code>@placeholder</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#placeholder\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7e02pr8wtu4ji9rxsnapxcjb\">默认情况下，推迟块在触发之前不呈现任何内容。 \n<code>@placeholder</code> 是一个可选块，声明在推迟块触发之前要显示的内容。一旦加载完成，此占位符内容将被主内容替换。您可以在占位符部分中使用任何内容，包括纯 HTML、组件、指令和管道；但请记住，占位符块的依赖项将被急性加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ttzz4s8jynb6347wdk0q3zfk\">注意：为了获得最佳用户体验，您应始终指定一个 \n<code>@placeholder</code> 块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d859cez6bu3slqmve207e3epf\"><code>@placeholder</code> 块接受一个可选参数，用于指定此占位符应该显示的最短时间 \n<code>minimum</code>。这个 \n<code>minimum</code> 参数以毫秒（ms）或秒（s）的时间增量指定。这个参数的存在是为了防止在推迟加载的依赖项快速获取时占位符内容快速闪烁。 \n<code>@placeholder</code> 块的 \n<code>minimum</code> 计时器在初始渲染此 \n<code>@placeholder</code> 块完成后开始计时。</p>\n<code-example language=\"html\">\n@defer {\n  &lt;large-component /&gt;\n} @placeholder (minimum 500ms) {\n  &lt;p&gt;Placeholder content&lt;/p&gt;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8iaywp99mqbprkzdjrz76wnbc\">注意：某些触发器可能需要存在\n<code>@placeholder</code>或模板引用变量才能正常工作。查看\n<a href=\"guide/defer#triggers\">触发器</a>部分了解更多详情。</p>\n<h3 id=\"loading\"><code>@loading</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#loading\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86b133pf8h1fwy9ld2ntptblw\"><code>@loading</code>块是一个可选块，允许你声明在延迟依赖项加载期间显示的内容。例如，你可以显示一个加载动画。与\n<code>@placeholder</code>类似，\n<code>@loading</code>块的依赖项会被急性加载。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ilnvhe2j6beujcwg1xqrvyvd\"><code>@loading</code>块接受两个可选参数，用于指定应该显示此占位符的\n<code>最小</code>时间量和加载开始后等待显示加载模板的时间量。\n<code>minimum</code>和\n<code>after</code>参数以毫秒（ms）或秒（s）为单位指定。与\n<code>@placeholder</code>类似，这些参数存在是为了防止延迟依赖项快速获取时内容快速闪烁。\n<code>@loading</code>块的\n<code>minimum</code>和\n<code>after</code>计时器在加载触发后立即开始。</p>\n<code-example language=\"html\">\n@defer {\n  &lt;large-component /&gt;\n} @loading (after 100ms; minimum 1s) {\n  &lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> alt=\"loading...\" src=\"loading.gif\" /&gt;\n}\n</code-example>\n<h3 id=\"error\"><code>@error</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#error\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70ekio5p4v4yxik0t1va0z91m\"><code>@error</code>块允许你声明在延迟加载失败时显示的内容。与\n<code>@placeholder</code>和\n<code>@loading</code>类似，\n<code>@error</code>块的依赖项会被急性加载。\n<code>@error</code>块是可选的。</p>\n<code-example language=\"html\">\n@defer {\n  &lt;calendar-cmp /&gt;\n} @error {\n  &lt;p&gt;Failed to load the calendar&lt;/p&gt;\n}\n</code-example>\n<h2 id=\"triggers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7vgcf722ylvmkj1nb28q7j5wh\">触发器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#triggers\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"57jv5k89zo7gkgfpjlmjfyzus\">当触发\n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code>块时，它将占位内容替换为惰性加载的内容。有两种配置何时触发此替换的选项：\n<code>on</code>和\n<code>when</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hp2czyy8m8g7illj3i6flzvc\"><a id=\"on\"></a>\n<code>on</code>使用可用触发器列表中的触发器指定触发条件。例如，可以是交互或视口触发。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"y6yy85zsidrmes9o0bje6oer\">可以同时定义多个事件触发器。例如：\n<code>on interaction; on timer(5s)</code>表示如果用户与占位符交互，或者经过5秒后，延迟块将被触发。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gzzlp4jmm27blfbqjsuzbtud\">注意：多个\n<code>on</code>触发器始终为OR条件。类似地，\n<code>on</code>与\n<code>when</code>条件混合也是OR条件。</p>\n<code-example language=\"html\">\n@defer (on viewport; on timer(5s)) {\n  &lt;calendar-cmp /&gt;\n} @placeholder {\n  &lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> src=\"placeholder.png\" /&gt;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kuc7dckyoibsomr5e3fj1pgt\"><a id=\"when\"></a>\n<code>when</code>将条件指定为返回布尔值的表达式。当此表达式变为真时，占位符将与惰性加载的内容交换（如果依赖项需要获取，这可能是一个异步操作）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2cf1ecjyux600dnm2rxm9svqq\">注意：如果\n<code>when</code>条件再次切换为\n<code>false</code>，则延迟块不会恢复为占位符。替换是一次性操作。如果块内的内容应有条件地渲染，则可以在块内部使用\n<code>if</code>条件。</p>\n<code-example language=\"html\">\n@defer (when cond) {\n  &lt;calendar-cmp /&gt;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4a0xokaw1c579hp8rzbybpfy9\">你也可以在一个语句中同时使用\n<code>when</code>和\n<code>on</code>，如果任一条件满足则会触发替换。</p>\n<code-example language=\"html\">\n@defer (on viewport; when cond) {\n  &lt;calendar-cmp /&gt;\n} @placeholder {\n  &lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> src=\"placeholder.png\" /&gt;\n}\n</code-example>\n<h3 id=\"on-idle\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6yo0od9ry9n4jlq7362h1j6nu\">on idle<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#on-idle\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gf9pjtsqp3wuper8vgmoq3b8\"><code>idle</code>将在浏览器达到空闲状态时触发延迟加载（在底层使用\n<code>requestIdleCallback</code> API进行检测）。这是带有延迟块的默认行为。</p>\n<h3 id=\"on-viewport\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l5fa35s4o3mdit39v4bccrw1\">on viewport<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#on-viewport\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agfh77wvg22r8rv1zhdobscfc\"><code>viewport</code>会在指定内容进入视口时触发延迟块，使用\n<code>IntersectionObserver</code> API进行检测。这可以是占位内容或元素引用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aknyqi7gf8t7z3ev72ttb79ii\">默认情况下，只要它是单个根元素节点，占位符将作为被监视以进入视口的元素。</p>\n<code-example language=\"html\">\n@defer (on viewport) {\n  &lt;calendar-cmp /&gt;\n} @placeholder {\n  &lt;div&gt;Calendar placeholder&lt;/div&gt;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a5n60fujsgygo3rcxvwllv1jb\">或者，可以在与\n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code>块相同的模板中指定一个\n<a href=\"guide/glossary#template-reference-variable\">模板引用变量</a>作为在视口触发器上监视进入视口的元素。此变量作为视口触发器的参数传入。</p>\n<code-example language=\"html\">\n&lt;div #greeting&gt;Hello!&lt;/div&gt;\n\n@defer (on viewport(greeting)) {\n  &lt;greetings-cmp /&gt;\n}\n</code-example>\n<h3 id=\"on-interaction\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jpomf2uqg6fxlc7dz8t1zc00\">on interaction<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#on-interaction\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2klbl2kcd6s8b036jo8c5rxy7\"><code>interaction</code>将在用户通过\n<code>click</code>或\n<code>keydown</code>事件与指定元素交互时触发延迟块。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edmq5s0p78ydl9mdlb909qs81\">默认情况下，只要占位符是单个根元素节点，它就会作为交互元素。</p>\n<code-example language=\"html\">\n@defer (on interaction) {\n  &lt;calendar-cmp /&gt;\n} @placeholder {\n  &lt;div&gt;Calendar placeholder&lt;/div&gt;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7338jjskunez7zpquobdho5av\">或者，你可以指定一个作为触发交互的\n<a href=\"guide/glossary#template-reference-variable\">模板引用变量</a>。这个变量将作为交互触发器的参数传入。</p>\n<code-example language=\"html\">\n&lt;button type=\"button\" #greeting&gt;Hello!&lt;/button&gt;\n\n@defer (on interaction(greeting)) {\n  &lt;calendar-cmp /&gt;\n} @placeholder {\n  &lt;div&gt;Calendar placeholder&lt;/div&gt;\n}\n</code-example>\n<h3 id=\"on-hover\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79fn49s04jmptc9py6b736189\">在悬停时<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#on-hover\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avwgfyonfa7p4igjahem9p4l3\"><code>hover</code> 当鼠标悬停在触发区域上时触发延迟加载。用于此操作的事件为\n<code>mouseenter</code>和\n<code>focusin</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmec9s3522j6g9av48cxjc2sx\">默认情况下，只要占位符是单个根元素节点，它就会作为悬停元素。</p>\n<code-example language=\"html\">\n@defer (on hover) {\n  &lt;calendar-cmp /&gt;\n} @placeholder {\n  &lt;div&gt;Calendar placeholder&lt;/div&gt;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9g6rula47whyfm1ud2ge2y94e\">或者，你可以指定一个作为悬停元素的\n<a href=\"guide/glossary#template-reference-variable\">模板引用变量</a>。这个变量将作为悬停触发器的参数传入。</p>\n<code-example language=\"html\">\n&lt;div #greeting&gt;Hello!&lt;/div&gt;\n\n@defer (on hover(greeting)) {\n  &lt;calendar-cmp /&gt;\n} @placeholder {\n  &lt;div&gt;Calendar placeholder&lt;/div&gt;\n}\n</code-example>\n<h3 id=\"on-immediate\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2u6bykvmbcmje6t8v1naz9x3q\">立即触发<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#on-immediate\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9d6t0zhr85x6cczjowbcm94ow\"><code>immediate</code> 立即触发延迟加载，意味着一旦客户端完成渲染，延迟块就会立即开始获取。</p>\n<code-example language=\"html\">\n@defer (on immediate) {\n  &lt;calendar-cmp /&gt;\n} @placeholder {\n  &lt;div&gt;Calendar placeholder&lt;/div&gt;\n}\n</code-example>\n<h3 id=\"on-timer\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ae8oye3lfxqwvh13qy06adsfr\">按计时器触发<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#on-timer\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enqp2n849tfxu0eutm22doidv\"><code>timer(x)</code> 将在指定的持续时间后触发。持续时间是必需的，可以用\n<code>ms</code>或\n<code>s</code>指定。</p>\n<code-example language=\"html\">\n@defer (on timer(500ms)) {\n  &lt;calendar-cmp /&gt;\n}\n</code-example>\n<h2 id=\"prefetching\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"686wkjb6lmoavo6zrleeymhrp\">预取<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#prefetching\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdndvashm0sgtw5mbsv8mktjl\"><code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code>允许指定何时触发依赖项的预取条件。你可以使用特殊的\n<code>prefetch</code>关键字。\n<code>prefetch</code>语法与主要延迟条件类似，接受\n<code>when</code>和/或\n<code>on</code>来声明触发条件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2oycr9fte06bph87a30p1upd3\">在这种情况下，与延迟相关的\n<code>when</code>和\n<code>on</code>控制何时渲染，而\n<code>prefetch when</code>和\n<code>prefetch on</code>控制何时获取资源。这使得更高级的行为成为可能，例如在用户实际看到或与延迟块交互之前就开始预取资源，以更快地使资源可用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5o3q281ubwjjx218tjzblr8o7\">在下面的示例中，预取在浏览器空闲时开始，块的内容在交互时渲染。</p>\n<code-example language=\"html\">\n@defer (on interaction; prefetch on idle) {\n  &lt;calendar-cmp /&gt;\n} @placeholder {\n  &lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> src=\"placeholder.png\" /&gt;\n}\n</code-example>\n<h2 id=\"testing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etpgj6p39fywtmcrsphy8qrcg\">测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#testing\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clfjxa2pyopk3niealujpip8g\">Angular提供了TestBed API来简化测试\n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code>块和在测试期间触发不同状态的过程。默认情况下，在测试中，\n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code>块会像在实际应用程序中一样播放。如果你想手动逐步执行状态，可以在TestBed配置中将延迟块行为切换为\n<code>Manual</code>。</p>\n<code-example language=\"typescript\">\nit('should render a defer block in different states', <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> () =&gt; {\n  // configures the defer block behavior to start in \"paused\" state for manual control.\n  TestBed.configureTestingModule({deferBlockBehavior: <a href=\"api/core/testing/DeferBlockBehavior#Manual\" class=\"code-anchor\">DeferBlockBehavior.Manual</a>});\n\n  @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n    // ...\n    template: `\n      @defer {\n        &lt;large-component /&gt;\n      } @placeholder {\n        Placeholder\n      } @loading {\n        Loading...\n      }\n    `\n  })\n  class ComponentA {}\n\n  // Create component fixture.\n  const componentFixture = TestBed.createComponent(ComponentA);\n\n  // Retrieve the list of all defer block fixtures and get the first block.\n  const deferBlockFixture = (await componentFixture.getDeferBlocks())[0];\n\n  // Renders placeholder state by default.\n  expect(componentFixture.nativeElement.innerHTML).toContain('Placeholder');\n\n  // Render loading state and verify rendered output.\n  await deferBlockFixture.render(<a href=\"api/core/testing/DeferBlockState#Loading\" class=\"code-anchor\">DeferBlockState.Loading</a>);\n  expect(componentFixture.nativeElement.innerHTML).toContain('Loading');\n\n  // Render final state and verify the output.\n  await deferBlockFixture.render(<a href=\"api/core/testing/DeferBlockState#Complete\" class=\"code-anchor\">DeferBlockState.Complete</a>);\n  expect(componentFixture.nativeElement.innerHTML).toContain('large works!');\n});\n</code-example>\n<h2 id=\"behavior-with-server-side-rendering-ssr-and-static-site-generation-ssg\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1l738nh4yhfl1btc712ne60hp\">与服务器端渲染（SSR）和静态站点生成（SSG）的行为<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#behavior-with-server-side-rendering-ssr-and-static-site-generation-ssg\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"528i7hztxvzxz3l1ejmav4bm9\">在服务器端渲染应用程序（使用SSR或SSG）时，延迟块始终会呈现它们的\n<code>@placeholder</code>（如果未指定占位符，则不会呈现任何内容）。服务器端会忽略触发器。</p>\n<h2 id=\"behavior-with-ngmodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9d0rl1czjapf1servwx1zqj5k\">与\n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>的行为<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#behavior-with-ngmodule\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1evjdxkbbum354zjte4rlxll\"><code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code>块可以在独立组件、指令和管道以及NgModule中使用。你可以在\n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code>块中使用独立和NgModule中的依赖项，但\n<strong>只有独立组件、指令和管道可以延迟加载</strong>。NgModule中的依赖项将包含在急性加载的捆绑包中。</p>\n<h2 id=\"nested-defer-blocks-and-avoiding-cascading-loads\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27o495r8rsad7hz7w6eugfqdw\">嵌套的\n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code>块和避免级联加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#nested-defer-blocks-and-avoiding-cascading-loads\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7m17yrz5jakmhs6qcclzvk3w3\">有些情况下，嵌套多个 \n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code> 块可能会导致级联请求。一个例子是，当一个具有立即触发器的 \n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code> 块有一个嵌套的具有另一个立即触发器的 \n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code> 块时。当你有嵌套的 \n<code><a href=\"api/core/defer\" class=\"code-anchor\">@defer</a></code> 块时，请确保内部块具有不同的条件集，以便它们不会同时触发，从而导致级联请求。</p>\n<h2 id=\"avoiding-layout-shifts\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1wzdl7lyg58c7pevmdhoqm7r\">避免布局位移<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/defer#avoiding-layout-shifts\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezmyx51phab07pu6pd6pag682\">推荐的最佳实践是不延迟用户在初始加载时可见的组件。这将通过导致累积布局位移（CLS）而对 Core Web Vitals 产生负面影响。如果你选择在此区域延迟组件，请避免使用 \n<code>immediate</code>、\n<code>timer</code>、\n<code>viewport</code> 和自定义 \n<code>when</code> 条件，这些条件会导致内容在页面初始渲染时加载。</p>\n\n  \n</div>\n\n\n<!-- links to this doc:\n - api/core/defer\n-->\n<!-- links from this doc:\n - api/common/NgOptimizedImage\n - api/core/Component\n - api/core/NgModule\n - api/core/defer\n - api/core/testing/DeferBlockBehavior#Manual\n - api/core/testing/DeferBlockState#Complete\n - api/core/testing/DeferBlockState#Loading\n - api/platform-browser/animations/async\n - guide/defer#avoiding-layout-shifts\n - guide/defer#behavior-with-ngmodule\n - guide/defer#behavior-with-server-side-rendering-ssr-and-static-site-generation-ssg\n - guide/defer#blocks\n - guide/defer#defer\n - guide/defer#deferrable-views\n - guide/defer#error\n - guide/defer#loading\n - guide/defer#nested-defer-blocks-and-avoiding-cascading-loads\n - guide/defer#on-hover\n - guide/defer#on-idle\n - guide/defer#on-immediate\n - guide/defer#on-interaction\n - guide/defer#on-timer\n - guide/defer#on-viewport\n - guide/defer#overview\n - guide/defer#placeholder\n - guide/defer#prefetching\n - guide/defer#testing\n - guide/defer#triggers\n - guide/defer#when\n - guide/defer#which-dependencies-are-defer-loadable\n - guide/defer#why-use-deferrable-views\n - guide/glossary#template-reference-variable\n - https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n-->"}
{"id":"guide/http-optimize-server-interaction","title":"HTTP - 通过防抖优化服务器交互","contents":"<div class=\"content\">\n  <h1 id=\"http---optimize-server-interaction-with-debouncing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39hxm8dyyv78gx7svna1po8er\">HTTP - 通过防抖优化服务器交互<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-optimize-server-interaction#http---optimize-server-interaction-with-debouncing\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82l7wfppkop723hbpl4xbbkio\">如果你需要发一个 HTTP 请求来响应用户的输入，那么每次按键就发送一个请求的效率显然不高。最好等用户停止输入后再发送请求。这种技术叫做防抖。</p>\n<h2 id=\"implement-debouncing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cflvy04edp40pg8bzgyp3jdje\">实现防抖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-optimize-server-interaction#implement-debouncing\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w7kafxf4pglc1vloitvwn8fu\">考虑下面这个模板，它让用户输入一个搜索词来按名字查找包。当用户在搜索框中输入名字时，<code>PackageSearchComponent</code> 就会把这个根据名字搜索包的请求发给包搜索 API。</p>\n<code-example header=\"app/package-search/package-search.component.html (search)\" path=\"http/src/app/package-search/package-search.component.html\" region=\"search\">\n&lt;input type=\"text\" (keyup)=\"search(getValue($event))\" id=\"name\" placeholder=\"Search\"/&gt;\n\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let package of packages$ | <a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a>\"&gt;\n    &lt;strong&gt;{{package.name}} v.{{package.version}}&lt;/strong&gt; -\n    &lt;em&gt;{{package.description}}&lt;/em&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b8kz8eaad1rrud03u9ji6wrys\">在这里，<code>keyup</code> 事件绑定会将每个按键都发送到组件的 <code>search()</code> 方法。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4spjxmfmjnja8io0lkclbwput\">在模板中，<code>$event.target</code> 的类型只是 <code>EventTarget</code>。在 <code>getValue()</code> 方法中，要将目标转换为 <code>HTMLInputElement</code>，以便通过类型安全的方式访问其 <code>value</code> 属性。</p>\n<code-example path=\"http/src/app/package-search/package-search.component.ts\" region=\"getValue\">\ngetValue(event: <a href=\"api/router/Event\" class=\"code-anchor\">Event</a>): string {\n  return (event.target as HTMLInputElement).value;\n}\n\n</code-example>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2a14o77t0ylh0yl7t7xuedujy\">下面的代码片段使用 RxJS 的操作符为这个输入实现了防抖。</p>\n<code-example header=\"app/package-search/package-search.component.ts (excerpt)\" path=\"http/src/app/package-search/package-search.component.ts\" region=\"debounce\">\nwithRefresh = false;\npackages$!: Observable&lt;NpmPackageInfo[]&gt;;\nprivate searchText$ = new Subject&lt;string&gt;();\n\nsearch(packageName: string) {\n  this.searchText$.next(packageName);\n}\n\nngOnInit() {\n  this.packages$ = this.searchText$.pipe(\n    debounceTime(500),\n    distinctUntilChanged(),\n    switchMap(packageName =&gt;\n      this.searchService.search(packageName, this.withRefresh))\n  );\n}\n\nconstructor(private searchService: PackageSearchService) { }\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjahd0q525ufc6hzyxvnyv4vs\"><code>searchText$</code> 是来自用户的搜索框值的序列。它被定义为 RxJS <code>Subject</code> 类型，这意味着它是一个多播 <code>Observable</code>，它还可以通过调用 <code>next(value)</code> 来自行发出值，就像在 <code>search()</code> 方法中一样。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3zgh96gi47hauu3mmribmrpsg\">除了把每个 <code>searchText</code> 的值都直接转发给 <code>PackageSearchService</code> 之外，<code>ngOnInit()</code> 中的代码还通过下列三个操作符对这些搜索值进行<em>管道</em>处理，以便只有当它是一个新值并且用户已经停止输入时，要搜索的值才会抵达该服务。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qndn7pqn4jsl97rgz1tdgcux\">RxJS操作符</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caxrzqjg755bpeedkm53di390\"><code>debounceTime(500)</code>⁠</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1k11zhd8iaj5jn3fj3rsts1ld\">等待用户停止输入，这里是1/2秒。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>distinctUntilChanged()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7m4tkjnzj0lsuwqs0cuwr8o7i\">等待搜索文本更改。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oag1ytas82y1wbk4sx5t7cnk\"><code>switchMap()</code>⁠</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eejpot0eivk93ph9j1uv26fz1\">向服务发送搜索请求。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b841214w33b3klpbdvc2drpny\">这些代码把 <code>packages$</code> 设置成了使用搜索结果组合出的 <code>Observable</code> 对象。模板中使用 <a href=\"api/common/AsyncPipe\">AsyncPipe</a> 订阅了 <code>packages$</code>，一旦搜索结果的值发回来了，就显示这些搜索结果。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lmc54ql4jci9i4ur50wns5yx\">有关 <code>withRefresh</code> 选项的更多信息，请参见<a href=\"guide/http-interceptor-use-cases#cache-refresh\">使用拦截器请求多个值</a>。</p>\n</div>\n<h2 id=\"using-the-switchmap-operator\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ecmabjhigcnejdtdjnhete8yu\">使用 <code>switchMap()</code> 操作符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-optimize-server-interaction#using-the-switchmap-operator\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rmtpn5spb7bogao6xxahif57\"><code>switchMap()</code> 操作符接受一个返回 <code>Observable</code> 的函数型参数。在这个例子中，<code>PackageSearchService.search</code> 像其它数据服务方法那样返回一个 <code>Observable</code>。如果先前的搜索请求仍在<em>进行中</em>（如网络连接不良），它将取消该请求并发送新的请求。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91xim9rtmksuajxvn8mzaqpze\"><strong>注意</strong>：<br>\n即使服务器是以任意顺序返回的响应，<code>switchMap()</code> 也会按照它们最初的请求顺序返回它们。</p>\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9eeir3anl97ra5ekzzwe4edh2\">如果你认为自己会复用这个防抖逻辑，请考虑将它移动到一个实用工具函数或者 <code>PackageSearchService</code> 本身中。</p>\n</div>\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 27 2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/NgFor\n - api/platform-browser/animations/async\n - api/router/Event\n - guide/http-interceptor-use-cases#cache-refresh\n - guide/http-optimize-server-interaction#http---optimize-server-interaction-with-debouncing\n - guide/http-optimize-server-interaction#implement-debouncing\n - guide/http-optimize-server-interaction#using-the-switchmap-operator\n-->"}
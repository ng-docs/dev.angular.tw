{"id":"guide/transition-and-triggers","title":"動畫轉場和觸發器","contents":"<div class=\"content\">\n  <h1 id=\"animation-transitions-and-triggers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8a4gyi9ozmpxtlnhiuie3bqni\">動畫轉場和觸發器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animation-transitions-and-triggers\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rped8otia38xu6j3q8khzyk2\">本章將深入講解特殊的轉場狀態，如 <code>*</code> 萬用字元和 <code>void</code>，並說明這些特殊狀態如何作用於進入或離開檢視的元素。本節還探討了多重觸發器、動畫回呼，以及使用關鍵幀技術的序列動畫。</p>\n<h2 id=\"predefined-states-and-wildcard-matching\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzixy0xpyuus8q9126n8v200\">預定義狀態與萬用字元對應<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#predefined-states-and-wildcard-matching\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7s4mmtnvxbou7lipzud87i41s\">在 Angular 中，轉場狀態可以透過 <a href=\"api/animations/state\"><code>state()</code></a> 函式進行顯式定義，或使用預定義的 <code>*</code> 萬用字元狀態和 <code>void</code> 狀態。</p>\n<h3 id=\"wildcard-state\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wjmstgyp209y3srj2mhbvhgu\">萬用字元狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#wildcard-state\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"115rhb516nlja45gjorcg1sjn\">星號 <code>*</code> 或者叫<em>萬用字元</em>可以對應任何一個動畫狀態。它可用來定義那些不用在乎 HTML 元素的起始狀態或結束狀態的轉場動畫。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1a5fn2v4wwshqz04lnxrka59a\">比如，一個 <code>open =&gt; *</code> 轉場可應用在當元素的狀態從 <code>open</code> 變成任何其它狀態時。</p>\n<div class=\"lightbox\">\n<img alt=\"wildcard state expressions\" src=\"generated/images/guide/animations/wildcard-state-500.png\" width=\"500\" height=\"229\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pkl0t9sivgcjr3pf1eybbpbc\">下面是萬用字元狀態的另一個程式碼範例，以及我們以前使用 <code>open</code> 和 <code>closed</code> 狀態的實例。但這次，對於每個狀態到狀態的轉換對，我們這次規定從任何狀態轉場到 <code>closed</code> 狀態時要花 1 秒鐘，而從任何狀態轉場到 <code>open</code> 狀態時要花 0.5 秒。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8xipbmbatq5x1qr94wfbg2sa\">這讓我們可以新增新狀態，而不必把它手動包含到每個單獨的轉場中。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"trigger-wildcard1\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n    // ...\n    state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      height: '200px',\n      opacity: 1,\n      backgroundColor: 'yellow'\n    })),\n    state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      height: '100px',\n      opacity: 0.8,\n      backgroundColor: 'blue'\n    })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; closed', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; open', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n    ]),\n  ]),\n],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eaj1gw7v94fkk43cxzig29jgx\">使用雙向箭頭語法可以指定任意方向的狀態轉場。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"trigger-wildcard2\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open &lt;=&gt; closed', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n]),\n\n</code-example>\n<h3 id=\"use-wildcard-state-with-multiple-transition-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23xy0ugilwpqd423jv0jenud8\">使用帶多個轉場狀態的萬用字元狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#use-wildcard-state-with-multiple-transition-states\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50udlc306jaay0buzg4zs1ej3\">在這個雙態按鈕的例子中，萬用字元不是很有用，因為只有兩種可能的狀態：<code>open</code> 和 <code>closed</code>。一般而言，當一個元素可能變更為多個潛在狀態時，萬用字元狀態會更好用。如果我們的按鈕可以從 <code>open</code> 變成 <code>closed</code> 或類似 <code>inProgress</code> 的狀態，則可以使用萬用字元狀態來減少所需的編碼量。</p>\n<div class=\"lightbox\">\n<img alt=\"wildcard state with 3 states\" src=\"generated/images/guide/animations/wildcard-3-states.png\" width=\"600\" height=\"426\">\n</div>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"trigger-transition\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n    // ...\n    state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      height: '200px',\n      opacity: 1,\n      backgroundColor: 'yellow'\n    })),\n    state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      height: '100px',\n      opacity: 0.8,\n      backgroundColor: 'blue'\n    })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open =&gt; closed', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('closed =&gt; open', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; closed', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; open', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open &lt;=&gt; closed', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a> ('* =&gt; open', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a> ('1s',\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a> ({ opacity: '*' }),\n      ),\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; *', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n    ]),\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9yvf32aarhs01mccj3rvd2f1\">當在<em>任意</em>兩個狀態之間切換時，<code>* =&gt; *</code> 轉場都會生效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6urg7k5fs5j7yfudxytny3b1c\">轉場會按照其定義的順序進行對應。因此，你可以在 <code>* =&gt; *</code> 轉場的前面定義其它轉場。比如，定義只針對 <code>open =&gt; closed</code> 的狀態變更或動畫，而使用 <code>* =&gt; *</code> 作為對應不上其它狀態對時的備用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2i83llfp0epazbnu18jasccx\">要這麼做，只要把那些更特殊的轉場放在 <code>* =&gt; *</code> <em>前面</em>就行了。</p>\n<h3 id=\"use-wildcards-with-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eeeczwj8wswn7vrtg57o5dgn0\">使用帶樣式的萬用字元狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#use-wildcards-with-styles\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehyb55kl1renwylwywfaiqp6u\">使用帶樣式的 <code>*</code> 萬用字元來告訴動畫使用當前的狀態值，並用它進行動畫處理。萬用字元是一個備用值，如果未在觸發器中宣告動畫狀態，就會使用這個值。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"transition4\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a> ('* =&gt; open', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a> ('1s',\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a> ({ opacity: '*' }),\n  ),\n]),\n\n</code-example>\n<h3 id=\"void-state\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qcn6tu5hecbt2nrv6d9g17et\"><code>void</code> 狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#void-state\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1suyi8wp1a1hrwxu7y5f15ufe\">可以使用 <code>void</code> 狀態來為進入或離開頁面的元素設定轉場。參閱<a href=\"guide/transition-and-triggers#enter-leave-view\">進入和離開檢視的動畫</a>。</p>\n<h3 id=\"combine-wildcard-and-void-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vekigncw2os0exfgigptqvvv\">組合使用萬用字元和 <code>void</code> 狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#combine-wildcard-and-void-states\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ct2vbe626putcwl12j50tqw80\">可以在轉場中組合使用萬用字元和 <code>void</code> 狀態，以觸發那些進入和離開頁面的動畫：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hjmff7bx2fd6wbnxg9c3ient\">當元素離開檢視時，就會觸發 <code>* =&gt; void</code> 轉場，而不管它離開前處於什麼狀態</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cmi05u1bnw008nds2fl8zvf4\">當元素進入檢視時，就會觸發 <code>void =&gt; *</code> 轉場，而不管它進入時處於什麼狀態</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fjaf14ckj471sjo9f3rwpf3q\">萬用字元狀態 <code>*</code> 會對應<em>任何</em>狀態 —— 包括 <code>void</code></li>\n</ul>\n<h2 id=\"animate-entering-and-leaving-a-view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acask56lvg70426cnmjfxkw2q\">播放進入和離開檢視時的動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animate-entering-and-leaving-a-view\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elh5c2yx9lo75ln796zcifejg\">本節介紹如何為進入和離開頁面的元素設定動畫。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"deagctbfjh1bfw7noinog77ya\">新增一些新的行為：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20vkcyxwhhb3s9t0q5l1uina6\">當你把一個英雄新增到英雄清單中時，它看起來是從左側飛進頁面的</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aezmzqcw808hyyxld4cmlleis\">當你從清單中移除一個英雄時，它看起來是從右側飛出去的</li>\n</ul>\n<code-example header=\"src/app/hero-list-enter-leave.component.ts\" path=\"animations/src/app/hero-list-enter-leave.component.ts\" region=\"animationdef\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('flyInOut', [\n    state('in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ transform: 'translateX(0)' })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('void =&gt; *', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ transform: 'translateX(-100%)' }),\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(100)\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; void', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(100, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ transform: 'translateX(100%)' }))\n    ])\n  ])\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alrgfryv09gbmn9m8j4ffg1pr\">在上述程式碼中，當 HTML 元素沒有附著在檢視中時，我們就會應用 <code>void</code> 狀態。</p>\n<p><a id=\"enter-leave-view\"></a></p>\n<h2 id=\"aliases-enter-and-leave\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6c8j338lmbragabrbllmvsc0k\">:enter 和 :leave 別名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#aliases-enter-and-leave\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ukeh9mzcoby0ckle8ykdb94s\"><code>:enter</code> 和 <code>:leave</code> 分別是 <code>void =&gt; *</code> 和 <code>* =&gt; void</code> 的別名。這些別名供多個動畫函式使用。</p>\n<code-example hidecopy=\"\" language=\"typescript\">\n\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a> ( ':enter', [ … ] );  // alias for void =&gt; *\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a> ( ':leave', [ … ] );  // alias for * =&gt; void\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"errj8x3b2uwcy0bqgiyx4mj4\">定位進入檢視的元素更難，因為它不在 DOM 中。因此，使用別名 <code>:enter</code> 和 <code>:leave</code> 來定位要從檢視中插入或刪除的 HTML 元素。</p>\n<h3 id=\"use-ngif-and-ngfor-with-enter-and-leave\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"762y32zggxdbixkpqou23mtn1\">和 <code>:enter</code> 與 <code>:leave</code> 一起使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#use-ngif-and-ngfor-with-enter-and-leave\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o5je35bjzwcbsm1gwtjmnltg\">當任何 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 或 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中的檢視放進頁面中時，會執行 <code>:enter</code> 轉場；當移除這些檢視時，就會執行 <code>:leave</code> 轉場。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eby5qoob5vz6ld13383srbphr\"><strong>注意</strong>：<br>\n進入/離開行為有時會令人困惑。作為經驗法則，考慮到 Angular 新增到 DOM 的任何元素都會透過 <code>:enter</code> 轉換傳遞，但只有透過 Angular 直接從 DOM 刪除的元素會通過 <code>:leave</code> 轉換傳遞。例如，元素的檢視因為其父級正在從 DOM 中刪除而被刪除時。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oy44vc2f0n18g98sib0956xq\">本例子中有一個名叫 <code>myInsertRemoveTrigger</code> 的觸發器，來表示進入和離開動畫。其 HTML 樣板包含下列程式碼。</p>\n<code-example header=\"src/app/insert-remove.component.html\" path=\"animations/src/app/insert-remove.component.html\" region=\"insert-remove\">\n&lt;div @myInsertRemoveTrigger *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isShown\" class=\"insert-remove-container\"&gt;\n  &lt;p&gt;The box is inserted&lt;/p&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21xryfa58cyhblfeclu39bs94\">在元件檔案中，<code>:enter</code> 轉場會將初始透明度設定為 0，然後設定動畫，當該元素已經插入檢視中之後，把這個透明度設定為 1。</p>\n<code-example header=\"src/app/insert-remove.component.ts\" path=\"animations/src/app/insert-remove.component.ts\" region=\"enter-leave-trigger\">\n<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('myInsertRemoveTrigger', [\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0 }),\n    <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1 })),\n  ]),\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':leave', [\n    <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0 }))\n  ])\n]),\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2e9gjvyf3lsfo3czxduei1coe\">請注意，此範例不需要使用<a href=\"api/animations/state\"><code>state()</code></a>。</p>\n<h2 id=\"transition-increment-and-decrement\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3uefpgjdelpi98qb8h9sqlgm\">轉場中的 <code>:increment</code> 和 <code>:decrement</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#transition-increment-and-decrement\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7y2y8ft0m1bsw6f8f127pqdhj\"><code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 函式還能接受額外的選擇器值：<code>:increment</code> 和 <code>:decrement</code>。當數值增加或減小時，使用這些來啟動轉場。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zg51afsgq306kxt3wyh84yhc\"><strong>注意</strong>：<br>\n下面的例子使用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 和 <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> 方法。欲知詳情，參見<a href=\"guide/complex-animation-sequences#complex-sequence\">複雜序列</a>頁。</p>\n</div>\n<code-example header=\"src/app/hero-list-page.component.ts\" path=\"animations/src/app/hero-list-page.component.ts\" region=\"increment\">\n<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('filterAnimation', [\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter, * =&gt; 0, * =&gt; -1', []),\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':increment', [\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0, width: 0 }),\n      <a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>(50, [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1, width: '*' })),\n      ]),\n    ], { optional: true })\n  ]),\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':decrement', [\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n      <a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>(50, [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0, width: 0 })),\n      ]),\n    ])\n  ]),\n]),\n\n</code-example>\n<h2 id=\"boolean-values-in-transitions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aroj4anwd84lpbg5w1s6ufoal\">轉場中的邏輯值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#boolean-values-in-transitions\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j1u7osktiedb539ofbepnucl\">如果某個觸發器以邏輯型的值作為繫結值，那麼就可以使用能與 <code>true</code> 和 <code>false</code> 或 <code>1</code> 和 <code>0</code> 相比較的 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 表示式來對應這個值。</p>\n<code-example header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.2.html\" region=\"trigger-boolean\">\n&lt;div [@openClose]=\"isOpen ? true : false\" class=\"open-close-container\"&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xtt0rfstrggh7uenhcjkrq8b\">在上述程式碼片段中，HTML 樣板將 <code>&lt;div&gt;</code> 元素繫結到名為 <code>openClose</code> 的觸發器，其狀態表達式是 <code>isOpen</code>，可能的值為 <code>true</code> 和 <code>false</code>。這種模式可以代替建立兩個命名狀態 <code>open</code> 和 <code>close</code> 的方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5g78ffvlxyxhgsrc25hktqvbd\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元資料下的 <code>animations:</code> 屬性中，當該狀態求值為 <code>true</code> 時，相關 HTML 元素的高度值為萬用字元樣式 <code>*</code> 或某個預設值。在這種情況下，它會使用此元素開始動畫前的現有高度。當該元素是 \"closed\" 時，它的高度會從指定的高度運動到 0，這會讓它不可見。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.2.ts\" region=\"trigger-boolean\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n    state('true', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: '*' })),\n    state('false', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: '0px' })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('false &lt;=&gt; true', <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(500))\n  ])\n],\n\n</code-example>\n<h2 id=\"multiple-animation-triggers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ivijjrt58hsyau5vu1uiuiv9\">多重動畫觸發器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#multiple-animation-triggers\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdsbf75ngb8ls4zv9cyxy8jdh\">你可以為元件定義多個動畫觸發器並將這些動畫觸發器附著到不同的元素上，這些元素之間的父子關係會影響動畫的執行方式和時機。</p>\n<h3 id=\"parent-child-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nqfrbff9vr07e09qbf2hi2ky\">父-子動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#parent-child-animations\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dn2mvlyania4435oo2ctu9bqp\">每次在 Angular 中觸發動畫時，父動畫始終會優先，而子動畫會被阻塞。為了執行子動畫，父動畫必須查詢出包含子動畫的每個元素，然後使用 <a href=\"api/animations/animateChild\"><code>animateChild()</code></a> 函式來執行它們。</p>\n<h4 id=\"disable-an-animation-on-an-html-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwnlvl5395ho9tngovbzew4wg\">在某個 HTML 元素上停用動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#disable-an-animation-on-an-html-element\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3di28asg55y9mh83irsmie9ah\">可以把一個名叫 <code>@.disabled</code> 的動畫控制繫結放在 HTML 元素上，以停用該元素及其子元素上的動畫。當 <code>@.disabled</code> 繫結為 <code>true</code> 時，就會禁止渲染所有動畫。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kp0rfarpltkkyuhglo1xn8na\">下面的程式碼範例展示了如何使用此屬性。</p>\n<code-tabs>\n    <code-pane header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.4.html\" region=\"toggle-animation\">\n&lt;div [@.disabled]=\"isDisabled\"&gt;\n  &lt;div [@childAnimation]=\"isOpen ? 'open' : 'closed'\"\n    class=\"open-close-container\"&gt;\n    &lt;p&gt;The box is now {{ isOpen ? 'Open' : 'Closed' }}!&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.4.ts\" region=\"toggle-animation\" language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('childAnimation', [\n      // ...\n    ]),\n  ],\n})\nexport class OpenCloseChildComponent {\n  isDisabled = false;\n  isOpen = false;\n}\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54bweei7ys31t1zfpx8102oa1\">當 <code>@.disabled</code> 繫結為 <code>true</code> 時，<code>@childAnimation</code> 觸發器就不會啟動。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acwjw9sx2aufk7gmkgng2foxa\">當 HTML 樣板中的某個元素使用 <code>@.disabled</code> 禁止了動畫時，也會同時禁止其所有內部元素的動畫。你無法有選擇的單獨停用單個元素上的多個動畫。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51fzfoc92alxqh3he66v2mwa3\">選擇性的子動畫仍然可以用如下方式之一在已停用的父元素上執行：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4560k5jzih117jdagajry3u5t\">父動畫可以使用 <a href=\"api/animations/query\"><code>query()</code></a> 函式來收集 HTML 樣板中位於禁止動畫區域內部的元素。這些元素仍然可以播放動畫。</p>\n<!-- vale on --> \n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92f91aht27gwsnd0tx6h0fck6\">子動畫可以被父動畫查詢，並且稍後使用 <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code> 來播放它。</p>\n</li>\n</ul>\n<h4 id=\"disable-all-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dl57t2mvup9onjxuy957rqxmy\">停用所有動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#disable-all-animations\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mqocd6u4yyz9846qzc4sr624\">要停用 Angular 應用中的所有動畫，只要把 <code>@.disabled</code> 繫結放在頂層的 Angular 元件上即可。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"toggle-app-animations\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  imports: [<a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a>, <a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a>],\n  animations: [\n    slideInAnimation\n  ]\n})\nexport class AppComponent {\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('@.disabled')\n  public animationsDisabled = false;\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4551qlff436tnst1wq60vp6lh\"><strong>注意</strong>：<br>\n停用應用級的動畫在端到端（E2E）測試中是很有用的。</p>\n</div>\n<h2 id=\"animation-callbacks\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aaojbe0ae7jpe3r5elsd7t93a\">動畫回呼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animation-callbacks\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brvywohkl953yyav5xdtuzjzm\">當動畫啟動和終止時，<code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> 函式會發出一些<em>回呼</em>。在下面的例子中，我們有一個包含 <code>openClose</code> 觸發器的元件。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"events1\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-open-close',\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n      // ...\n    ]),\n  ],\n  templateUrl: 'open-close.component.html',\n  styleUrls: ['open-close.component.css']\n})\nexport class OpenCloseComponent {\n  onAnimationEvent(event: <a href=\"api/animations/AnimationEvent\" class=\"code-anchor\">AnimationEvent</a>) {\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1429h3rdnhrj9ydp3g535nfp\">在 HTML 樣板中，動畫事件可以透過 <code>$event</code> 傳遞回來，比如 <code>@triggerName.start</code> 和 <code>@triggerName.done</code>，這裡的 <code>triggerName</code> 表示所使用的觸發器名字。在我們的例子中，<code>openClose</code> 觸發器將會是這樣的。</p>\n<code-example header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.3.html\" region=\"callbacks\">\n  &lt;div [@openClose]=\"isOpen ? 'open' : 'closed'\"\n    (@openClose.start)=\"onAnimationEvent($event)\"\n    (@openClose.done)=\"onAnimationEvent($event)\"\n    class=\"open-close-container\"&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zkbpnd73w9046319rfp0qiq1\">動畫回呼的潛在用途之一，是用來覆蓋比較慢的 API 呼叫，比如查閱資料庫。比如，可以建立一個 <strong>InProgress</strong> 按鈕，讓它擁有自己的迴圈動畫，直到後端系統操作完成。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7qwcbm3acuxm7qw8dob3a8q1\">在當前動畫結束時，可以呼叫另一個動畫。比如，當 API 呼叫完成時，按鈕會從 <code>inProgress</code> 狀態變成 <code>closed</code> 狀態。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cogduy33rz52nntizv21y7fu\">動畫可以影響最終使用者，讓他<em>覺得</em>操作更快 —— 雖然並沒有。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6t2i7qyyulbs98kxfol756czt\">回呼可以作為除錯工具，比如與 <code>console.warn()</code> 結合使用，以便在瀏覽器的開發者控制台中檢視應用的進度。下列程式碼片段為我們原始的雙態按鈕（<code>open</code> 與 <code>closed</code>）範例建立了控制台輸出。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"events\">\nexport class OpenCloseComponent {\n  onAnimationEvent(event: <a href=\"api/animations/AnimationEvent\" class=\"code-anchor\">AnimationEvent</a>) {\n    // openClose is <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> name in this example\n    console.warn(`Animation Trigger: ${event.triggerName}`);\n\n    // phaseName is \"start\" or \"done\"\n    console.warn(`Phase: ${event.phaseName}`);\n\n    // in our example, totalTime is 1000 (number of milliseconds in a second)\n    console.warn(`Total time: ${event.totalTime}`);\n\n    // in our example, fromState is either \"open\" or \"closed\"\n    console.warn(`From: ${event.fromState}`);\n\n    // in our example, toState either \"open\" or \"closed\"\n    console.warn(`To: ${event.toState}`);\n\n    // the HTML element itself, the button in this case\n    console.warn(`Element: ${event.element}`);\n  }\n}\n\n\n</code-example>\n<p><a id=\"keyframes\"></a></p>\n<h2 id=\"keyframes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8u283m8pk848v52jkolqw8has\">關鍵幀動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#keyframes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68ij1df3krhjqml9qa62hrboe\">要建立一個具有多個順序執行步驟的動畫，請使用<em>關鍵幀動畫</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajhh18dtzm06aw7jg9pbusp96\">Angular 的 <code>keyframe()</code> 函式類似於 CSS 中的關鍵幀。關鍵幀允許在單個時間段內進行多種樣式更改。比如，我們的按鈕可以在單個的 2 秒時間段內多次改變顏色，而不是漸隱掉。</p>\n<div class=\"lightbox\">\n<img alt=\"keyframes\" src=\"generated/images/guide/animations/keyframes-500.png\" width=\"500\" height=\"244\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12dvslocoyvl1m22oqt3rz2gj\">這些更改顏色的程式碼如下所示。</p>\n<code-example header=\"src/app/status-slider.component.ts\" path=\"animations/src/app/status-slider.component.ts\" region=\"keyframes\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; active', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('2s', <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>([\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'blue' }),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'red' }),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'orange' })\n  ]))\n\n</code-example>\n<h3 id=\"offset\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d90id3aqa357uwczio0m7ky7i\">偏移<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#offset\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dts8y7bvzbwp6wbkzuag3mphc\">關鍵幀包括一個用來定義動畫中每個樣式何時開始更改的<em>偏移（offset）</em>屬性。偏移是個 0 到 1 之間的相對值，分別標記動畫的開始和結束時間，並且只要使用了它，就要同樣應用於這個關鍵幀的每個步驟。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvnkpk6ro1lznigs1rsiw5ovd\">定義關鍵幀的偏移量是可選的。如果省略它們，就會自動分配均勻間隔的偏移。比如，三個沒有預定義偏移的關鍵幀會分別使用 0、0.5、1 作為偏移。在上面的例子中，還可以為中間的轉場指定偏移量 0.8。程式碼如下。</p>\n<div class=\"lightbox\">\n<img alt=\"keyframes with offset\" src=\"generated/images/guide/animations/keyframes-offset-500.png\" width=\"500\" height=\"247\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6szshgfx72rgmim761cjg5qd2\">帶有指定偏移量的程式碼如下。</p>\n<code-example header=\"src/app/status-slider.component.ts\" path=\"animations/src/app/status-slider.component.ts\" region=\"keyframesWithOffsets\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; active', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('2s', <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>([\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'blue', offset: 0}),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'red', offset: 0.8}),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: '#754600', offset: 1.0})\n  ])),\n]),\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; inactive', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('2s', <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>([\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: '#754600', offset: 0}),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'red', offset: 0.2}),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'blue', offset: 1.0})\n  ]))\n]),\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2hkteu86owdul8inggu95zjp\">你可以在單個動畫中組合使用 <code>duration</code>、<code>delay</code> 和 <code>easing</code> 來定義關鍵幀。</p>\n<h3 id=\"keyframes-with-a-pulsation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36s34af8zm6fwf8avypyeu32k\">帶脈動效果的關鍵幀<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#keyframes-with-a-pulsation\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bji6bv0876wah24n9w2ogssow\">透過在整個動畫中定義特定偏移處的樣式，可以使用關鍵幀在動畫中建立脈動效果。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26vjl5fzgubhh86mtyixfajq5\">下面是使用關鍵幀建立脈動效果的例子：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w1iyso2kie4005hdjnt37gq3\">原始的 <code>open</code> 和 <code>closed</code> 狀態（包括其原始的高度、顏色和透明度）會在一秒鐘內逐漸發生變化。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"107m6pwe0e5p48xayjgosxnog\">插在中間的關鍵幀序列會導致該按鈕在一秒鐘內出現不規則的脈動。</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"keyframes with irregular pulsation\" src=\"generated/images/guide/animations/keyframes-pulsation.png\" width=\"600\" height=\"312\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fw19sdq8orc0iyjke0z05tda\">此動畫的程式碼片段是這樣的。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.1.ts\" region=\"trigger\">\n<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n  state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n    height: '200px',\n    opacity: 1,\n    backgroundColor: 'yellow'\n  })),\n  state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n    height: '100px',\n    opacity: 0.5,\n    backgroundColor: 'green'\n  })),\n  // ...\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; *', [\n    <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s', <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a> ( [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0.1, offset: 0.1 }),\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0.6, offset: 0.2 }),\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1,   offset: 0.5 }),\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0.2, offset: 0.7 })\n    ]))\n  ])\n])\n\n</code-example>\n<h3 id=\"animatable-properties-and-units\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nb97xhda2075r49dyi7er1pj\">可動的屬性與單位<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animatable-properties-and-units\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"260hquaw72jtllco65ibh6kx6\">Angular 的動畫支援是基於 Web 動畫的，所以你可以動瀏覽器認為可動（animatable）的任意屬性。包括位置、大小、變形、顏色、邊框等。W3C 在 <a href=\"https://www.w3.org/TR/css-transitions-1\">CSS 轉場</a>頁也維護了一個可動屬性的清單。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72pes4pfcffcpx58293bplnxm\">對於帶有數值的位置屬性，可以把值作為字串（別忘了帶引號）並使用適當的字尾來定義其單位：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qxmfyzxtk2t30imxoztq3wdj\">50 畫素：<code>'50px'</code></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e05qs1y2u8u3ddhkeswswxj7\">相對字型大小：<code>'3em'</code></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lvd8fbe9zye8q9uv0slg4wgw\">百分比：<code>'100%'</code></p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axz665p0votst3za9b0xdpk86\">你還可以用數字形式提供這個值。這種情況下，Angular 假設預設的單位是畫素（<code>px</code>）。把 50 畫素表示為 <code>50</code> 和 <code>'50px'</code> 是一樣的。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9v65a974uvlbultvp4vmxjgs\"><strong>注意</strong>：<br>\n字串形式的 <code>\"50\"</code> 是無效的。</p>\n</div>\n<h3 id=\"automatic-property-calculation-with-wildcards\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bezkxnpz97devka17rnv4mndf\">使用萬用字元自動計算屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#automatic-property-calculation-with-wildcards\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gd1eww13gt8eyktaweytbjll\">有時你在執行之前並不知道某個樣式的屬性值。比如，元素的寬度和高度通常取決於其內容和螢幕大小。在使用 CSS 動畫時，這些屬性通常會具有挑戰性（譯註：因為 CSS 動畫不支援自動確定寬高）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lk0jeoisu6vfptcfq4vsop1u\">這些情況下，你可以在 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 中指定萬用字元 <code>*</code> 屬性。該屬性的值是在執行期間計算的，然後把它插入到動畫中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3g3uasswfm7gaxlxiuavr5lw\">下面的例子中有一個名叫 <code>shrinkOut</code> 的觸發器，它會在 HTML 元素離開頁面時使用。該動畫會使用它離開之前的任意高度，並從該高度動畫到 0。</p>\n<code-example header=\"src/app/hero-list-auto.component.ts\" path=\"animations/src/app/hero-list-auto.component.ts\" region=\"auto-calc\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('shrinkOut', [\n    state('in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: '*' })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; void', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: '*' }),\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(250, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: 0 }))\n    ])\n  ])\n]\n\n</code-example>\n<h3 id=\"keyframes-summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eh9dm7os3cfdriaf51g7112gh\">關鍵幀動畫總結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#keyframes-summary\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj1jyo7c8jni6yy28z6vvti4l\">Angular 中的 <code><a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>()</code> 函式允許你在單個轉場中指定多個臨時樣式，並使用可選的 <code>offset</code> 來定義動畫中每次樣式變化的發生時機。</p>\n<h2 id=\"more-on-angular-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a26kagk7mrtsdtdkoro0iswgp\">關於 Angular 動畫的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oolgylns9kaynftarwog49tq\">你可能還對下列內容感興趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejrwy9jlbr7n31leje9s0nwps\"><a href=\"guide/animations\">Angular 動畫簡介</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3gdfoyldquxye4upb4liwohvp\"><a href=\"guide/complex-animation-sequences\">複雜動畫序列</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82pieugpn2i38mksdalgha2g3\"><a href=\"guide/reusable-animations\">可複用動畫</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"be5qvxhwesxxj6af0lirn21vy\"><a href=\"guide/route-animations\">路由轉場動畫</a></li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：Tue Oct 11 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/common/NgFor\n - api/common/NgForOf\n - guide/animations\n - guide/complex-animation-sequences\n - guide/reusable-animations\n - guide/route-animations\n-->\n<!-- links from this doc:\n - api/animations/AnimationEvent\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/keyframes\n - api/animations/query\n - api/animations/stagger\n - api/animations/state\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/common/NgFor\n - api/common/NgIf\n - api/core/Component\n - api/core/HostBinding\n - api/router/RouterLink\n - api/router/RouterOutlet\n - guide/animations\n - guide/complex-animation-sequences\n - guide/complex-animation-sequences#complex-sequence\n - guide/reusable-animations\n - guide/route-animations\n - guide/transition-and-triggers#aliases-enter-and-leave\n - guide/transition-and-triggers#animatable-properties-and-units\n - guide/transition-and-triggers#animate-entering-and-leaving-a-view\n - guide/transition-and-triggers#animation-callbacks\n - guide/transition-and-triggers#animation-transitions-and-triggers\n - guide/transition-and-triggers#automatic-property-calculation-with-wildcards\n - guide/transition-and-triggers#boolean-values-in-transitions\n - guide/transition-and-triggers#combine-wildcard-and-void-states\n - guide/transition-and-triggers#disable-all-animations\n - guide/transition-and-triggers#disable-an-animation-on-an-html-element\n - guide/transition-and-triggers#enter-leave-view\n - guide/transition-and-triggers#keyframes\n - guide/transition-and-triggers#keyframes-summary\n - guide/transition-and-triggers#keyframes-with-a-pulsation\n - guide/transition-and-triggers#more-on-angular-animations\n - guide/transition-and-triggers#multiple-animation-triggers\n - guide/transition-and-triggers#offset\n - guide/transition-and-triggers#parent-child-animations\n - guide/transition-and-triggers#predefined-states-and-wildcard-matching\n - guide/transition-and-triggers#transition-increment-and-decrement\n - guide/transition-and-triggers#use-ngif-and-ngfor-with-enter-and-leave\n - guide/transition-and-triggers#use-wildcard-state-with-multiple-transition-states\n - guide/transition-and-triggers#use-wildcards-with-styles\n - guide/transition-and-triggers#void-state\n - guide/transition-and-triggers#wildcard-state\n - https://www.w3.org/TR/css-transitions-1\n-->"}
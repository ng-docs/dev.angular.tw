{"id":"guide/transition-and-triggers","title":"动画过渡和触发器","contents":"<div class=\"content\">\n  <h1 id=\"animation-transitions-and-triggers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8a4gyi9ozmpxtlnhiuie3bqni\">动画过渡和触发器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animation-transitions-and-triggers\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rped8otia38xu6j3q8khzyk2\">本章将深入讲解特殊的过渡状态，如 <code>*</code> 通配符和 <code>void</code>，并说明这些特殊状态如何作用于进入或离开视图的元素。本节还探讨了多重触发器、动画回调，以及使用关键帧技术的序列动画。</p>\n<h2 id=\"predefined-states-and-wildcard-matching\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzixy0xpyuus8q9126n8v200\">预定义状态与通配符匹配<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#predefined-states-and-wildcard-matching\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7s4mmtnvxbou7lipzud87i41s\">在 Angular 中，过渡状态可以通过 <a href=\"api/animations/state\"><code>state()</code></a> 函数进行显式定义，或使用预定义的 <code>*</code> 通配符状态和 <code>void</code> 状态。</p>\n<h3 id=\"wildcard-state\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wjmstgyp209y3srj2mhbvhgu\">通配符状态<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#wildcard-state\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"115rhb516nlja45gjorcg1sjn\">星号 <code>*</code> 或者叫<em>通配符</em>可以匹配任何一个动画状态。它可用来定义那些不用在乎 HTML 元素的起始状态或结束状态的过渡动画。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1a5fn2v4wwshqz04lnxrka59a\">比如，一个 <code>open =&gt; *</code> 过渡可应用在当元素的状态从 <code>open</code> 变成任何其它状态时。</p>\n<div class=\"lightbox\">\n<img alt=\"wildcard state expressions\" src=\"generated/images/guide/animations/wildcard-state-500.png\" width=\"500\" height=\"229\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pkl0t9sivgcjr3pf1eybbpbc\">下面是通配符状态的另一个代码范例，以及我们以前使用 <code>open</code> 和 <code>closed</code> 状态的实例。但这次，对于每个状态到状态的转换对，我们这次规定从任何状态过渡到 <code>closed</code> 状态时要花 1 秒钟，而从任何状态过渡到 <code>open</code> 状态时要花 0.5 秒。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8xipbmbatq5x1qr94wfbg2sa\">这让我们可以添加新状态，而不必把它手动包含到每个单独的过渡中。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"trigger-wildcard1\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n    // ...\n    state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      height: '200px',\n      opacity: 1,\n      backgroundColor: 'yellow'\n    })),\n    state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      height: '100px',\n      opacity: 0.8,\n      backgroundColor: 'blue'\n    })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; closed', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; open', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n    ]),\n  ]),\n],\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eaj1gw7v94fkk43cxzig29jgx\">使用双向箭头语法可以指定任意方向的状态过渡。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"trigger-wildcard2\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open &lt;=&gt; closed', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n]),\n\n</code-example>\n<h3 id=\"use-wildcard-state-with-multiple-transition-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23xy0ugilwpqd423jv0jenud8\">使用带多个过渡状态的通配符状态<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#use-wildcard-state-with-multiple-transition-states\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50udlc306jaay0buzg4zs1ej3\">在这个双态按钮的例子中，通配符不是很有用，因为只有两种可能的状态：<code>open</code> 和 <code>closed</code>。一般而言，当一个元素可能变更为多个潜在状态时，通配符状态会更好用。如果我们的按钮可以从 <code>open</code> 变成 <code>closed</code> 或类似 <code>inProgress</code> 的状态，则可以使用通配符状态来减少所需的编码量。</p>\n<div class=\"lightbox\">\n<img alt=\"wildcard state with 3 states\" src=\"generated/images/guide/animations/wildcard-3-states.png\" width=\"600\" height=\"426\">\n</div>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"trigger-transition\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n    // ...\n    state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      height: '200px',\n      opacity: 1,\n      backgroundColor: 'yellow'\n    })),\n    state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      height: '100px',\n      opacity: 0.8,\n      backgroundColor: 'blue'\n    })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open =&gt; closed', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('closed =&gt; open', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; closed', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; open', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open &lt;=&gt; closed', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a> ('* =&gt; open', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a> ('1s',\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a> ({ opacity: '*' }),\n      ),\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; *', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n    ]),\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9yvf32aarhs01mccj3rvd2f1\">当在<em>任意</em>两个状态之间切换时，<code>* =&gt; *</code> 过渡都会生效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6urg7k5fs5j7yfudxytny3b1c\">过渡会按照其定义的顺序进行匹配。因此，你可以在 <code>* =&gt; *</code> 过渡的前面定义其它过渡。比如，定义只针对 <code>open =&gt; closed</code> 的状态变更或动画，而使用 <code>* =&gt; *</code> 作为匹配不上其它状态对时的后备。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a2i83llfp0epazbnu18jasccx\">要这么做，只要把那些更特殊的过渡放在 <code>* =&gt; *</code> <em>前面</em>就行了。</p>\n<h3 id=\"use-wildcards-with-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eeeczwj8wswn7vrtg57o5dgn0\">使用带样式的通配符状态<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#use-wildcards-with-styles\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehyb55kl1renwylwywfaiqp6u\">使用带样式的 <code>*</code> 通配符来告诉动画使用当前的状态值，并用它进行动画处理。通配符是一个后备值，如果未在触发器中声明动画状态，就会使用这个值。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"transition4\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a> ('* =&gt; open', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a> ('1s',\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a> ({ opacity: '*' }),\n  ),\n]),\n\n</code-example>\n<h3 id=\"void-state\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9qcn6tu5hecbt2nrv6d9g17et\"><code>void</code> 状态<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#void-state\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1suyi8wp1a1hrwxu7y5f15ufe\">可以使用 <code>void</code> 状态来为进入或离开页面的元素配置过渡。参阅<a href=\"guide/transition-and-triggers#enter-leave-view\">进入和离开视图的动画</a>。</p>\n<h3 id=\"combine-wildcard-and-void-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1vekigncw2os0exfgigptqvvv\">组合使用通配符和 <code>void</code> 状态<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#combine-wildcard-and-void-states\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ct2vbe626putcwl12j50tqw80\">可以在过渡中组合使用通配符和 <code>void</code> 状态，以触发那些进入和离开页面的动画：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hjmff7bx2fd6wbnxg9c3ient\">当元素离开视图时，就会触发 <code>* =&gt; void</code> 过渡，而不管它离开前处于什么状态</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1cmi05u1bnw008nds2fl8zvf4\">当元素进入视图时，就会触发 <code>void =&gt; *</code> 过渡，而不管它进入时处于什么状态</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7fjaf14ckj471sjo9f3rwpf3q\">通配符状态 <code>*</code> 会匹配<em>任何</em>状态 —— 包括 <code>void</code></li>\n</ul>\n<h2 id=\"animate-entering-and-leaving-a-view\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acask56lvg70426cnmjfxkw2q\">播放进入和离开视图时的动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animate-entering-and-leaving-a-view\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elh5c2yx9lo75ln796zcifejg\">本节介绍如何为进入和离开页面的元素设置动画。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"deagctbfjh1bfw7noinog77ya\">添加一些新的行为：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20vkcyxwhhb3s9t0q5l1uina6\">当你把一个英雄添加到英雄列表中时，它看起来是从左侧飞进页面的</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aezmzqcw808hyyxld4cmlleis\">当你从列表中移除一个英雄时，它看起来是从右侧飞出去的</li>\n</ul>\n<code-example header=\"src/app/hero-list-enter-leave.component.ts\" path=\"animations/src/app/hero-list-enter-leave.component.ts\" region=\"animationdef\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('flyInOut', [\n    state('in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ transform: 'translateX(0)' })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('void =&gt; *', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ transform: 'translateX(-100%)' }),\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(100)\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; void', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(100, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ transform: 'translateX(100%)' }))\n    ])\n  ])\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alrgfryv09gbmn9m8j4ffg1pr\">在上述代码中，当 HTML 元素没有附着在视图中时，我们就会应用 <code>void</code> 状态。</p>\n<p><a id=\"enter-leave-view\"></a></p>\n<h2 id=\"aliases-enter-and-leave\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6c8j338lmbragabrbllmvsc0k\">:enter 和 :leave 别名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#aliases-enter-and-leave\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ukeh9mzcoby0ckle8ykdb94s\"><code>:enter</code> 和 <code>:leave</code> 分别是 <code>void =&gt; *</code> 和 <code>* =&gt; void</code> 的别名。这些别名供多个动画函数使用。</p>\n<code-example hidecopy=\"\" language=\"typescript\">\n\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a> ( ':enter', [ … ] );  // alias for void =&gt; *\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a> ( ':leave', [ … ] );  // alias for * =&gt; void\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"errj8x3b2uwcy0bqgiyx4mj4\">定位进入视图的元素更难，因为它不在 DOM 中。因此，使用别名 <code>:enter</code> 和 <code>:leave</code> 来定位要从视图中插入或删除的 HTML 元素。</p>\n<h3 id=\"use-ngif-and-ngfor-with-enter-and-leave\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"762y32zggxdbixkpqou23mtn1\">和 <code>:enter</code> 与 <code>:leave</code> 一起使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#use-ngif-and-ngfor-with-enter-and-leave\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o5je35bjzwcbsm1gwtjmnltg\">当任何 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 或 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中的视图放进页面中时，会运行 <code>:enter</code> 过渡；当移除这些视图时，就会运行 <code>:leave</code> 过渡。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eby5qoob5vz6ld13383srbphr\"><strong>注意</strong>：<br>\n进入/离开行为有时会令人困惑。作为经验法则，考虑到 Angular 添加到 DOM 的任何元素都会通过 <code>:enter</code> 转换传递，但只有通过 Angular 直接从 DOM 删除的元素会通过 <code>:leave</code> 转换传递。例如，元素的视图因为其父级正在从 DOM 中删除而被删除时。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6oy44vc2f0n18g98sib0956xq\">本例子中有一个名叫 <code>myInsertRemoveTrigger</code> 的触发器，来表示进入和离开动画。其 HTML 模板包含下列代码。</p>\n<code-example header=\"src/app/insert-remove.component.html\" path=\"animations/src/app/insert-remove.component.html\" region=\"insert-remove\">\n&lt;div @myInsertRemoveTrigger *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isShown\" class=\"insert-remove-container\"&gt;\n  &lt;p&gt;The box is inserted&lt;/p&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21xryfa58cyhblfeclu39bs94\">在组件文件中，<code>:enter</code> 过渡会将初始透明度设置为 0，然后设置动画，当该元素已经插入视图中之后，把这个透明度设置为 1。</p>\n<code-example header=\"src/app/insert-remove.component.ts\" path=\"animations/src/app/insert-remove.component.ts\" region=\"enter-leave-trigger\">\n<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('myInsertRemoveTrigger', [\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0 }),\n    <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1 })),\n  ]),\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':leave', [\n    <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0 }))\n  ])\n]),\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2e9gjvyf3lsfo3czxduei1coe\">请注意，此示例不需要使用<a href=\"api/animations/state\"><code>state()</code></a>。</p>\n<h2 id=\"transition-increment-and-decrement\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b3uefpgjdelpi98qb8h9sqlgm\">过渡中的 <code>:increment</code> 和 <code>:decrement</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#transition-increment-and-decrement\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7y2y8ft0m1bsw6f8f127pqdhj\"><code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 函数还能接受额外的选择器值：<code>:increment</code> 和 <code>:decrement</code>。当数值增加或减小时，使用这些来启动过渡。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zg51afsgq306kxt3wyh84yhc\"><strong>注意</strong>：<br>\n下面的例子使用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 和 <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> 方法。欲知详情，参见<a href=\"guide/complex-animation-sequences#complex-sequence\">复杂序列</a>页。</p>\n</div>\n<code-example header=\"src/app/hero-list-page.component.ts\" path=\"animations/src/app/hero-list-page.component.ts\" region=\"increment\">\n<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('filterAnimation', [\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter, * =&gt; 0, * =&gt; -1', []),\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':increment', [\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0, width: 0 }),\n      <a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>(50, [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1, width: '*' })),\n      ]),\n    ], { optional: true })\n  ]),\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':decrement', [\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n      <a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>(50, [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0, width: 0 })),\n      ]),\n    ])\n  ]),\n]),\n\n</code-example>\n<h2 id=\"boolean-values-in-transitions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aroj4anwd84lpbg5w1s6ufoal\">过渡中的逻辑值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#boolean-values-in-transitions\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j1u7osktiedb539ofbepnucl\">如果某个触发器以逻辑型的值作为绑定值，那么就可以使用能与 <code>true</code> 和 <code>false</code> 或 <code>1</code> 和 <code>0</code> 相比较的 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 表达式来匹配这个值。</p>\n<code-example header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.2.html\" region=\"trigger-boolean\">\n&lt;div [@openClose]=\"isOpen ? true : false\" class=\"open-close-container\"&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"xtt0rfstrggh7uenhcjkrq8b\">在上述代码片段中，HTML 模板将 <code>&lt;div&gt;</code> 元素绑定到名为 <code>openClose</code> 的触发器，其状态表达式是 <code>isOpen</code>，可能的值为 <code>true</code> 和 <code>false</code>。这种模式可以代替创建两个命名状态 <code>open</code> 和 <code>close</code> 的方式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5g78ffvlxyxhgsrc25hktqvbd\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据下的 <code>animations:</code> 属性中，当该状态求值为 <code>true</code> 时，相关 HTML 元素的高度值为通配符样式 <code>*</code> 或某个默认值。在这种情况下，它会使用此元素开始动画前的现有高度。当该元素是 \"closed\" 时，它的高度会从指定的高度运动到 0，这会让它不可见。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.2.ts\" region=\"trigger-boolean\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n    state('true', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: '*' })),\n    state('false', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: '0px' })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('false &lt;=&gt; true', <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(500))\n  ])\n],\n\n</code-example>\n<h2 id=\"multiple-animation-triggers\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ivijjrt58hsyau5vu1uiuiv9\">多重动画触发器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#multiple-animation-triggers\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdsbf75ngb8ls4zv9cyxy8jdh\">你可以为组件定义多个动画触发器并将这些动画触发器附着到不同的元素上，这些元素之间的父子关系会影响动画的运行方式和时机。</p>\n<h3 id=\"parent-child-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nqfrbff9vr07e09qbf2hi2ky\">父-子动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#parent-child-animations\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dn2mvlyania4435oo2ctu9bqp\">每次在 Angular 中触发动画时，父动画始终会优先，而子动画会被阻塞。为了运行子动画，父动画必须查询出包含子动画的每个元素，然后使用 <a href=\"api/animations/animateChild\"><code>animateChild()</code></a> 函数来运行它们。</p>\n<h4 id=\"disable-an-animation-on-an-html-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dwnlvl5395ho9tngovbzew4wg\">在某个 HTML 元素上禁用动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#disable-an-animation-on-an-html-element\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3di28asg55y9mh83irsmie9ah\">可以把一个名叫 <code>@.disabled</code> 的动画控制绑定放在 HTML 元素上，以禁用该元素及其子元素上的动画。当 <code>@.disabled</code> 绑定为 <code>true</code> 时，就会禁止渲染所有动画。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kp0rfarpltkkyuhglo1xn8na\">下面的代码范例展示了如何使用此特性。</p>\n<code-tabs>\n    <code-pane header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.4.html\" region=\"toggle-animation\">\n&lt;div [@.disabled]=\"isDisabled\"&gt;\n  &lt;div [@childAnimation]=\"isOpen ? 'open' : 'closed'\"\n    class=\"open-close-container\"&gt;\n    &lt;p&gt;The box is now {{ isOpen ? 'Open' : 'Closed' }}!&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.4.ts\" region=\"toggle-animation\" language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('childAnimation', [\n      // ...\n    ]),\n  ],\n})\nexport class OpenCloseChildComponent {\n  isDisabled = false;\n  isOpen = false;\n}\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54bweei7ys31t1zfpx8102oa1\">当 <code>@.disabled</code> 绑定为 <code>true</code> 时，<code>@childAnimation</code> 触发器就不会启动。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"acwjw9sx2aufk7gmkgng2foxa\">当 HTML 模板中的某个元素使用 <code>@.disabled</code> 禁止了动画时，也会同时禁止其所有内部元素的动画。你无法有选择的单独禁用单个元素上的多个动画。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"51fzfoc92alxqh3he66v2mwa3\">选择性的子动画仍然可以用如下方式之一在已禁用的父元素上运行：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4560k5jzih117jdagajry3u5t\">父动画可以使用 <a href=\"api/animations/query\"><code>query()</code></a> 函数来收集 HTML 模板中位于禁止动画区域内部的元素。这些元素仍然可以播放动画。</p>\n<!-- vale on --> \n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92f91aht27gwsnd0tx6h0fck6\">子动画可以被父动画查询，并且稍后使用 <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code> 来播放它。</p>\n</li>\n</ul>\n<h4 id=\"disable-all-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dl57t2mvup9onjxuy957rqxmy\">禁用所有动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#disable-all-animations\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9mqocd6u4yyz9846qzc4sr624\">要禁用 Angular 应用中的所有动画，只要把 <code>@.disabled</code> 绑定放在顶层的 Angular 组件上即可。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"toggle-app-animations\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  imports: [<a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a>, <a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a>],\n  animations: [\n    slideInAnimation\n  ]\n})\nexport class AppComponent {\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('@.disabled')\n  public animationsDisabled = false;\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4551qlff436tnst1wq60vp6lh\"><strong>注意</strong>：<br>\n禁用应用级的动画在端到端（E2E）测试中是很有用的。</p>\n</div>\n<h2 id=\"animation-callbacks\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aaojbe0ae7jpe3r5elsd7t93a\">动画回调<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animation-callbacks\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"brvywohkl953yyav5xdtuzjzm\">当动画启动和终止时，<code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> 函数会发出一些<em>回调</em>。在下面的例子中，我们有一个包含 <code>openClose</code> 触发器的组件。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"events1\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-open-close',\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n      // ...\n    ]),\n  ],\n  templateUrl: 'open-close.component.html',\n  styleUrls: ['open-close.component.css']\n})\nexport class OpenCloseComponent {\n  onAnimationEvent(event: <a href=\"api/animations/AnimationEvent\" class=\"code-anchor\">AnimationEvent</a>) {\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1429h3rdnhrj9ydp3g535nfp\">在 HTML 模板中，动画事件可以通过 <code>$event</code> 传递回来，比如 <code>@triggerName.start</code> 和 <code>@triggerName.done</code>，这里的 <code>triggerName</code> 表示所使用的触发器名字。在我们的例子中，<code>openClose</code> 触发器将会是这样的。</p>\n<code-example header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.3.html\" region=\"callbacks\">\n  &lt;div [@openClose]=\"isOpen ? 'open' : 'closed'\"\n    (@openClose.start)=\"onAnimationEvent($event)\"\n    (@openClose.done)=\"onAnimationEvent($event)\"\n    class=\"open-close-container\"&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zkbpnd73w9046319rfp0qiq1\">动画回调的潜在用途之一，是用来覆盖比较慢的 API 调用，比如查阅数据库。比如，可以建立一个 <strong>InProgress</strong> 按钮，让它拥有自己的循环动画，直到后端系统操作完成。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7qwcbm3acuxm7qw8dob3a8q1\">在当前动画结束时，可以调用另一个动画。比如，当 API 调用完成时，按钮会从 <code>inProgress</code> 状态变成 <code>closed</code> 状态。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cogduy33rz52nntizv21y7fu\">动画可以影响最终用户，让他<em>觉得</em>操作更快 —— 虽然并没有。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6t2i7qyyulbs98kxfol756czt\">回调可以作为调试工具，比如与 <code>console.warn()</code> 结合使用，以便在浏览器的开发者控制台中查看应用的进度。下列代码片段为我们原始的双态按钮（<code>open</code> 与 <code>closed</code>）范例创建了控制台输出。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"events\">\nexport class OpenCloseComponent {\n  onAnimationEvent(event: <a href=\"api/animations/AnimationEvent\" class=\"code-anchor\">AnimationEvent</a>) {\n    // openClose is <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> name in this example\n    console.warn(`Animation Trigger: ${event.triggerName}`);\n\n    // phaseName is \"start\" or \"done\"\n    console.warn(`Phase: ${event.phaseName}`);\n\n    // in our example, totalTime is 1000 (number of milliseconds in a second)\n    console.warn(`Total time: ${event.totalTime}`);\n\n    // in our example, fromState is either \"open\" or \"closed\"\n    console.warn(`From: ${event.fromState}`);\n\n    // in our example, toState either \"open\" or \"closed\"\n    console.warn(`To: ${event.toState}`);\n\n    // the HTML element itself, the button in this case\n    console.warn(`Element: ${event.element}`);\n  }\n}\n\n\n</code-example>\n<p><a id=\"keyframes\"></a></p>\n<h2 id=\"keyframes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8u283m8pk848v52jkolqw8has\">关键帧动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#keyframes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68ij1df3krhjqml9qa62hrboe\">要创建一个具有多个顺序执行步骤的动画，请使用<em>关键帧动画</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajhh18dtzm06aw7jg9pbusp96\">Angular 的 <code>keyframe()</code> 函数类似于 CSS 中的关键帧。关键帧允许在单个时间段内进行多种样式更改。比如，我们的按钮可以在单个的 2 秒时间段内多次改变颜色，而不是渐隐掉。</p>\n<div class=\"lightbox\">\n<img alt=\"keyframes\" src=\"generated/images/guide/animations/keyframes-500.png\" width=\"500\" height=\"244\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12dvslocoyvl1m22oqt3rz2gj\">这些更改颜色的代码如下所示。</p>\n<code-example header=\"src/app/status-slider.component.ts\" path=\"animations/src/app/status-slider.component.ts\" region=\"keyframes\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; active', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('2s', <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>([\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'blue' }),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'red' }),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'orange' })\n  ]))\n\n</code-example>\n<h3 id=\"offset\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d90id3aqa357uwczio0m7ky7i\">偏移<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#offset\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dts8y7bvzbwp6wbkzuag3mphc\">关键帧包括一个用来定义动画中每个样式何时开始更改的<em>偏移（offset）</em>属性。偏移是个 0 到 1 之间的相对值，分别标记动画的开始和结束时间，并且只要使用了它，就要同样应用于这个关键帧的每个步骤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvnkpk6ro1lznigs1rsiw5ovd\">定义关键帧的偏移量是可选的。如果省略它们，就会自动分配均匀间隔的偏移。比如，三个没有预定义偏移的关键帧会分别使用 0、0.5、1 作为偏移。在上面的例子中，还可以为中间的过渡指定偏移量 0.8。代码如下。</p>\n<div class=\"lightbox\">\n<img alt=\"keyframes with offset\" src=\"generated/images/guide/animations/keyframes-offset-500.png\" width=\"500\" height=\"247\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6szshgfx72rgmim761cjg5qd2\">带有指定偏移量的代码如下。</p>\n<code-example header=\"src/app/status-slider.component.ts\" path=\"animations/src/app/status-slider.component.ts\" region=\"keyframesWithOffsets\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; active', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('2s', <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>([\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'blue', offset: 0}),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'red', offset: 0.8}),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: '#754600', offset: 1.0})\n  ])),\n]),\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; inactive', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('2s', <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>([\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: '#754600', offset: 0}),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'red', offset: 0.2}),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'blue', offset: 1.0})\n  ]))\n]),\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2hkteu86owdul8inggu95zjp\">你可以在单个动画中组合使用 <code>duration</code>、<code>delay</code> 和 <code>easing</code> 来定义关键帧。</p>\n<h3 id=\"keyframes-with-a-pulsation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"36s34af8zm6fwf8avypyeu32k\">带脉动效果的关键帧<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#keyframes-with-a-pulsation\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bji6bv0876wah24n9w2ogssow\">通过在整个动画中定义特定偏移处的样式，可以使用关键帧在动画中创建脉动效果。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26vjl5fzgubhh86mtyixfajq5\">下面是使用关键帧创建脉动效果的例子：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w1iyso2kie4005hdjnt37gq3\">原始的 <code>open</code> 和 <code>closed</code> 状态（包括其原始的高度、颜色和透明度）会在一秒钟内逐渐发生变化。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"107m6pwe0e5p48xayjgosxnog\">插在中间的关键帧序列会导致该按钮在一秒钟内出现不规则的脉动。</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"keyframes with irregular pulsation\" src=\"generated/images/guide/animations/keyframes-pulsation.png\" width=\"600\" height=\"312\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fw19sdq8orc0iyjke0z05tda\">此动画的代码片段是这样的。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.1.ts\" region=\"trigger\">\n<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n  state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n    height: '200px',\n    opacity: 1,\n    backgroundColor: 'yellow'\n  })),\n  state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n    height: '100px',\n    opacity: 0.5,\n    backgroundColor: 'green'\n  })),\n  // ...\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; *', [\n    <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s', <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a> ( [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0.1, offset: 0.1 }),\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0.6, offset: 0.2 }),\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1,   offset: 0.5 }),\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0.2, offset: 0.7 })\n    ]))\n  ])\n])\n\n</code-example>\n<h3 id=\"animatable-properties-and-units\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nb97xhda2075r49dyi7er1pj\">可动的属性与单位<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animatable-properties-and-units\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"260hquaw72jtllco65ibh6kx6\">Angular 的动画支持是基于 Web 动画的，所以你可以动浏览器认为可动（animatable）的任意属性。包括位置、大小、变形、颜色、边框等。W3C 在 <a href=\"https://www.w3.org/TR/css-transitions-1\">CSS 过渡</a>页也维护了一个可动属性的列表。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72pes4pfcffcpx58293bplnxm\">对于带有数值的位置属性，可以把值作为字符串（别忘了带引号）并使用适当的后缀来定义其单位：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qxmfyzxtk2t30imxoztq3wdj\">50 像素：<code>'50px'</code></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e05qs1y2u8u3ddhkeswswxj7\">相对字体大小：<code>'3em'</code></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lvd8fbe9zye8q9uv0slg4wgw\">百分比：<code>'100%'</code></p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axz665p0votst3za9b0xdpk86\">你还可以用数字形式提供这个值。这种情况下，Angular 假设默认的单位是像素（<code>px</code>）。把 50 像素表示为 <code>50</code> 和 <code>'50px'</code> 是一样的。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9v65a974uvlbultvp4vmxjgs\"><strong>注意</strong>：<br>\n字符串形式的 <code>\"50\"</code> 是无效的。</p>\n</div>\n<h3 id=\"automatic-property-calculation-with-wildcards\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bezkxnpz97devka17rnv4mndf\">使用通配符自动计算属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#automatic-property-calculation-with-wildcards\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gd1eww13gt8eyktaweytbjll\">有时你在运行之前并不知道某个样式的属性值。比如，元素的宽度和高度通常取决于其内容和屏幕大小。在使用 CSS 动画时，这些属性通常会具有挑战性（译注：因为 CSS 动画不支持自动确定宽高）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9lk0jeoisu6vfptcfq4vsop1u\">这些情况下，你可以在 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 中指定通配符 <code>*</code> 属性。该属性的值是在运行期间计算的，然后把它插入到动画中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3g3uasswfm7gaxlxiuavr5lw\">下面的例子中有一个名叫 <code>shrinkOut</code> 的触发器，它会在 HTML 元素离开页面时使用。该动画会使用它离开之前的任意高度，并从该高度动画到 0。</p>\n<code-example header=\"src/app/hero-list-auto.component.ts\" path=\"animations/src/app/hero-list-auto.component.ts\" region=\"auto-calc\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('shrinkOut', [\n    state('in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: '*' })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; void', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: '*' }),\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(250, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: 0 }))\n    ])\n  ])\n]\n\n</code-example>\n<h3 id=\"keyframes-summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eh9dm7os3cfdriaf51g7112gh\">关键帧动画总结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#keyframes-summary\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bj1jyo7c8jni6yy28z6vvti4l\">Angular 中的 <code><a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>()</code> 函数允许你在单个过渡中指定多个临时样式，并使用可选的 <code>offset</code> 来定义动画中每次样式变化的发生时机。</p>\n<h2 id=\"more-on-angular-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a26kagk7mrtsdtdkoro0iswgp\">关于 Angular 动画的更多知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oolgylns9kaynftarwog49tq\">你可能还对下列内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejrwy9jlbr7n31leje9s0nwps\"><a href=\"guide/animations\">Angular 动画简介</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3gdfoyldquxye4upb4liwohvp\"><a href=\"guide/complex-animation-sequences\">复杂动画序列</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82pieugpn2i38mksdalgha2g3\"><a href=\"guide/reusable-animations\">可复用动画</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"be5qvxhwesxxj6af0lirn21vy\"><a href=\"guide/route-animations\">路由过渡动画</a></li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间：Tue Oct 11 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/common/NgFor\n - api/common/NgForOf\n - guide/animations\n - guide/complex-animation-sequences\n - guide/reusable-animations\n - guide/route-animations\n-->\n<!-- links from this doc:\n - api/animations/AnimationEvent\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/keyframes\n - api/animations/query\n - api/animations/stagger\n - api/animations/state\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/common/NgFor\n - api/common/NgIf\n - api/core/Component\n - api/core/HostBinding\n - api/router/RouterLink\n - api/router/RouterOutlet\n - guide/animations\n - guide/complex-animation-sequences\n - guide/complex-animation-sequences#complex-sequence\n - guide/reusable-animations\n - guide/route-animations\n - guide/transition-and-triggers#aliases-enter-and-leave\n - guide/transition-and-triggers#animatable-properties-and-units\n - guide/transition-and-triggers#animate-entering-and-leaving-a-view\n - guide/transition-and-triggers#animation-callbacks\n - guide/transition-and-triggers#animation-transitions-and-triggers\n - guide/transition-and-triggers#automatic-property-calculation-with-wildcards\n - guide/transition-and-triggers#boolean-values-in-transitions\n - guide/transition-and-triggers#combine-wildcard-and-void-states\n - guide/transition-and-triggers#disable-all-animations\n - guide/transition-and-triggers#disable-an-animation-on-an-html-element\n - guide/transition-and-triggers#enter-leave-view\n - guide/transition-and-triggers#keyframes\n - guide/transition-and-triggers#keyframes-summary\n - guide/transition-and-triggers#keyframes-with-a-pulsation\n - guide/transition-and-triggers#more-on-angular-animations\n - guide/transition-and-triggers#multiple-animation-triggers\n - guide/transition-and-triggers#offset\n - guide/transition-and-triggers#parent-child-animations\n - guide/transition-and-triggers#predefined-states-and-wildcard-matching\n - guide/transition-and-triggers#transition-increment-and-decrement\n - guide/transition-and-triggers#use-ngif-and-ngfor-with-enter-and-leave\n - guide/transition-and-triggers#use-wildcard-state-with-multiple-transition-states\n - guide/transition-and-triggers#use-wildcards-with-styles\n - guide/transition-and-triggers#void-state\n - guide/transition-and-triggers#wildcard-state\n - https://www.w3.org/TR/css-transitions-1\n-->"}
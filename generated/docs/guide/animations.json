{"id":"guide/animations","title":"Angular 動畫簡介","contents":"<div class=\"content\">\n  <h1 id=\"introduction-to-angular-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bx5grkcsai72ub0it7jyx847m\">Angular 動畫簡介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#introduction-to-angular-animations\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b8zbqyxijtg1igxd02uji4o1\">動畫用於提供運動的幻覺：HTML 元素隨著時間改變樣式。精心設計的動畫可以讓你的應用更有趣，更易用，但它們不僅僅是裝飾性的。動畫可以透過幾種方式改善你的應用和使用者體驗：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4v5l8p9ewk2rpzloon951k5dk\">沒有動畫，Web 頁面的轉場就會顯得突兀、不協調</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vtng5o4wn7x842r2i12mmlwi\">運動能極大地提升使用者體驗，因此動畫可以讓使用者察覺到應用對他們的操作做出了回應</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mflvab1vt9l5fzmk56gtp6w0\">良好的動畫可以直觀的把使用者的注意力吸引到要留意的地方</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzjvpfwkl6bbl4cij3hee9aht\">典型的動畫會涉及多種隨時間變化的轉換。HTML 元素可以移動、變換顏色、增加或縮小、隱藏或從頁面中滑出。這些變化可以同時發生或順序發生。你可以控制每次轉換的持續時間。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lj6te5obpsyugoyrogg6hn7\">Angular 的動畫系統是基於 CSS 功能建立的，這意味著你可以 \"動\" 瀏覽器認為可動的任何屬性。包括位置、大小、變形、顏色、邊框等。W3C 在它的 <a href=\"https://www.w3.org/TR/css-transitions-1\">CSS Transitions（轉場）</a> 頁中維護了一個可動屬性的清單。</p>\n<h2 id=\"about-this-guide\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cymus2clh055bn4ep9j2kvh1u\">關於本指南<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#about-this-guide\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94xgjndayk9afr79okaowze1u\">本指南覆蓋了基本的 Angular 動畫屬性，讓你能開始為你的專案新增 Angular 動畫。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dh9oy3m33l496bdqjnkmrw5xa\">本指南中描述的屬性，以及相關的 Angular 動畫章節中描述的更多高階屬性，都在一個範例 <live-example></live-example> 中進行了示範。</p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctiymx02j4aaefwut9amcwj5j\">本指南假設你已經能熟練建立基本的 Angular 應用，也就是下列章節中所講的那些：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xycsbxcv0c5qkbyobw77ktsd\"><a href=\"tutorial\">教程</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eeu18mg6g2yn9t3gjx4l6qcb7\"><a href=\"guide/architecture\">架構概覽</a></li>\n</ul>\n<h2 id=\"getting-started\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1ec4dv7ru8g390agopg2loxb\">快速上手<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#getting-started\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajwgrr6ojtebjg5qbr8dufmz1\">動畫的主要 Angular 模組是 \n<code>@angular/animations</code> 和 \n<code>@angular/platform-browser</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfvh0qjr6g1tllrhe7c0o506v\">為了把 Angular 動畫新增到你的專案中，把這些與動畫相關的模組和標準的 Angular 功能一起匯入進來。</p>\n<h3 id=\"step-1-enabling-the-animations-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wt4c4bvg7j0q3n092gc44nqz\">步驟一：啟用動畫模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#step-1-enabling-the-animations-module\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"394tgvpnmb9ndx86efmbyjedd\">從 \n<code>@angular/platform-browser/animations</code> 匯入 \n<code><a href=\"api/platform-browser/animations/provideAnimations\" class=\"code-anchor\">provideAnimations</a></code> 並將其新增到 \n<code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code> 函式呼叫的提供者清單中。</p>\n<code-example language=\"ts\">\n<a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>(AppComponent, {\n  providers: [\n    <a href=\"api/platform-browser/animations/provideAnimations\" class=\"code-anchor\">provideAnimations</a>(),\n  ]\n});\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2i9fvg805azyn7f9gat1ictmb\">對於基於 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的應用程式，匯入 \n<code><a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a></code>，這將為你的 Angular 根應用程式模組引入動畫功能。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"animations/src/app/app.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>\n  ],\n  declarations: [ ],\n  bootstrap: [ ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dctvfceffjvs6otnaljertr6k\"><strong>注意</strong>：<br>\n當你使用 CLI 建立應用時，應用的根模組 <code>app.module.ts</code> 位於 <code>src/app</code> 目錄下。</p>\n</div>\n<h3 id=\"step-2-importing-animation-functions-into-component-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"717rsehiftsebgq1q2cwne844\">步驟二：把動畫功能匯入元件檔案中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#step-2-importing-animation-functions-into-component-files\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xt2h2guykc8r207tl4j63hdg\">如果你準備在元件檔案中使用特定的動畫函式，請從 <code>@angular/animations</code> 中匯入這些函式。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a> } from '@angular/core';\nimport {\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>,\n  state,\n  <a href=\"api/animations/style\" class=\"code-anchor\">style</a>,\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>,\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>,\n  // ...\n} from '@angular/animations';\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wnzp7hdbgezh8srs9ffejkh7\"><strong>注意</strong>：<br>\n參閱本指南末尾的<a href=\"guide/animations#animation-api-summary\">可用動畫函式彙總表</a>。</p>\n</div>\n<h3 id=\"step-3-adding-the-animation-metadata-property\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs933hyich1rf2l3njltohrlc\">步驟三：新增動畫的元資料屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#step-3-adding-the-animation-metadata-property\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rii7t6djbco17fy4b6tr1kzz\">在元件的 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器中，新增一個名叫 <code>animations:</code> 的元資料屬性。你可以把用來定義動畫的觸發器放進 <code>animations</code> 元資料屬性中。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"decorator\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  imports: [<a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a>, <a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a>],\n  animations: [\n    // <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a> triggers go here\n  ]\n})\n\n</code-example>\n<h2 id=\"animating-a-transition\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1hmao4jko0a161jttsq27tlft\">轉場動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animating-a-transition\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21n0tdypr8wruoxo1yzygfu8f\">我們來做一個簡單的轉場動作，它把單個 HTML 元素從一個狀態變成另一個狀態。比如，你可以指定按鈕根據使用者的最後一個動作顯示成<strong>Open</strong>或<strong>Closed</strong>狀態。當按鈕處於 <code>open</code> 狀態時，它是可見的，並且是黃色的。當它處於 <code>closed</code> 狀態時，它是透明的，並且是藍色的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j0mlmuejn5o6umsjiwlgrrof\">在 HTML 中，這些屬性都使用普通的 CSS 樣式，比如顏色（color）和透明度（opacity）。在 Angular 中，使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 函式來指定一組用作動畫的 CSS 樣式。可以為動畫狀態指定一組樣式，併為該狀態指定一個名字，比如 <code>open</code> 或 <code>closed</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eauovtiy193ujsh1w3v2o7ynn\">我們建立一個具有簡單轉場動畫的 <code>open-close</code> 元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erpk1mzed9d8bo9lt80hnjr32\">在終端視窗執行下列指令以生成該組件：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng g component open-close\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsocs1k9c9u22w8ez1rmtuj1m\">這會在 <code>src/app/open-close.component.ts</code> 下建立此元件。</p>\n</div>\n<h3 id=\"animation-state-and-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4t5izinnsmo0fipr9zbptkqn\">動畫狀態和樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animation-state-and-styles\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tm0xv8fbz8zwmj41ba2m38n6\">使用 Angular 的 <a href=\"api/animations/state\"><code>state()</code></a> 函式來定義不同的狀態，供每次轉場結束時調用。該函式接受兩個引數：一個唯一的名字，比如 <code>open</code> 或 <code>closed</code> 和一個 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 函式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3i1e71vxhuhvejtcqwh6sa5hg\">使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 函式來定義一組與指定的狀態名相關的樣式。名稱裡帶中線的樣式屬性必須是<a href=\"guide/glossary#case-conventions\"><em>小駝峰</em></a> 格式的，如 <code>backgroundColor</code>，或者把它們包裹到引號裡，如 <code>'background-color'</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hvvxy6hmt4n2a5ozffbqqe7u\">我們來看看 Angular 的 <a href=\"api/animations/state\"><code>state()</code></a> 函式如何與 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 函式聯用，來設定 CSS 樣式的屬性。\n在下面的程式碼片段中，該狀態的多個樣式屬性都是同時設定的。在 <code>open</code> 狀態中，該按鈕的高度是 200 畫素，透明度是 1，背景色是黃色。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"state1\">\n// ...\nstate('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n  height: '200px',\n  opacity: 1,\n  backgroundColor: 'yellow'\n})),\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85mc0xekdcu2pnsgikfd6gp7e\">在下面這個 <code>closed</code> 狀態中，按鈕的高度是 100 畫素，透明度是 0.8，背景色是藍色。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"state2\">\nstate('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n  height: '100px',\n  opacity: 0.8,\n  backgroundColor: 'blue'\n})),\n\n</code-example>\n<h3 id=\"transitions-and-timing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aj7q0l7mt26fiii4h9x56q5sp\">轉場與時序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#transitions-and-timing\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e47udfvcwghyjqw0dxtowoqnu\">在 Angular 中，你可以設定多個樣式而不必用動畫。不過，如果沒有進一步細化，按鈕的轉換會立即完成 —— 沒有漸隱、沒有收縮，也沒有其它的視覺化效果來指出正在發生變化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rih67qziolxuu6rswzsekfx5\">要讓這些變化不那麼突兀，就要定義一個動畫<em>轉場</em>來要求這些狀態之間的變化在一段時間內發生。<code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 接受兩個引數：第一個引數接受一個表示式，它定義兩個轉場狀態之間的方向；第二個引數接受一個或一系列 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ea6b8eslghzaftgaiwm7jcm7e\">使用 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函式來定義長度、延遲和緩動畫果，並指定一個樣式函式，以定義轉場過程中的樣式。可以用 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函式來為多步動畫定義 <code><a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>()</code> 函式。這些定義放在 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函式的第二個引數中。</p>\n<h4 id=\"animation-metadata-duration-delay-and-easing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuftglbsnx9kx43v2mann1vt2\">動畫元資料：持續時間、延遲和緩動畫果<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animation-metadata-duration-delay-and-easing\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gygs3yejm8jewpw6z524wlz4\"><code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函式（作為轉場函式的第二個引數）可以接受 <code>timings</code> 和 <code>styles</code> 引數。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97jr7u8ef7egl1rkjj0lflmxw\"><code>timings</code> 引數可以接受一個數字或由三部分組成的字串。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n<a href=\"api/animations/animate\" class=\"code-anchor\">animate</a> (duration)\n\n</code-example>\n<p>or</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n<a href=\"api/animations/animate\" class=\"code-anchor\">animate</a> ('duration delay easing')\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2lqcpzy7h9uteruoyh15u8dv\">第一部分 <code>duration</code>（持續時間）是必須的。這個持續時間可以表示成一個不帶引號的純數字（表示毫秒），或一個帶引號的有單位的時間（表示秒數）。比如，0.1 秒的持續時間有如下表示方式：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1nw09s4d5ule0wck15c2cd71m\">作為純數字，毫秒為單位：<code>100</code></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bynag0dnt54q51znjrk953y43\">作為字串，毫秒為單位：<code>'100ms'</code></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etkymh79s05cw3ujtr2dnhrcs\">作為字串，秒為單位：<code>'0.1s'</code></p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nksn60i1fcud2gm49vre9l56\">第二個引數 <code>delay</code> 的語法和 <code>duration</code> 一樣。比如：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqno0hba7nyn7hmborne2kt0y\">等待 100 毫秒，然後執行 200 毫秒表示為：<code>'0.2s 100ms'</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8r4cv60nypqtaiujw1nofhwzc\">第三個引數 <code>easing</code> 控制動畫在執行期間如何進行<a href=\"http://easings.net\">加速和減速</a>。比如 <code>ease-in</code> 表示動畫開始時很慢，然後逐漸加速。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ipgj38is9zalkzz1q3salk6n\">等待 100 毫秒，執行 200 毫秒。按照減速曲線運動，快速啟動並逐漸減速，直到靜止：<code>'0.2s 100ms ease-out'</code></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bje43umlscb66gsnep4ohp988\">執行 200 毫秒，不等待。按照標準曲線運動，開始很慢，中間加速，最後逐漸減速：<code>'0.2s ease-in-out'</code></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cm5e400dzex9ig48dy7a4d4fe\">立即開始，執行 200 毫秒。按照加速曲線運動，開始很慢，最後達到全速：<code>'0.2s ease-in'</code></p>\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bflu1cyzzo9xidkuwoww55ip1\"><strong>注意</strong>：<br>\n有關緩動曲線的一般訊息，參閱 Material Design 網站上關於<a href=\"https://material.io/design/motion/speed.html#easing\">自然緩動曲線</a>的主題。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alfklg4mie2hbvp8f7l387vlq\">下面的例子提供了一個從 <code>open</code> 到 <code>closed</code> 的持續一秒的狀態轉場。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"transition1\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open =&gt; closed', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n]),\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agr9bpq9kdq19tj555u56zdzj\">在上面的程式碼片段中，<code>=&gt;</code> 運算子表示單向轉場，而 <code>&lt;=&gt;</code> 表示雙向轉場。在轉場過程中，<code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 指定了轉場需要花費的時間。在這裡，從 <code>open</code> 到 <code>closed</code> 狀態的轉換要花費 1 秒中，表示成 <code>1s</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bo2mp90czvcyxoi8rggpyekv\">下面的例子新增了一個從 <code>closed</code> 到 <code>open</code> 的狀態轉場，轉場動畫持續 0.5 秒。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"transition2\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('closed =&gt; open', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n]),\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bncjlf21oe59fmh0ubdy7wkc7\"><strong>注意</strong>：<br>\n在 <a href=\"api/animations/state\"><code>state</code></a> 和 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a></code> 函式中使用樣式時有一些需要注意的地方。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y6ouf7rq9wtlifj7gieko8s6\">請用 <a href=\"api/animations/state\"><code>state()</code></a> 來定義那些每個轉場結束時的樣式，這些樣式在動畫完成後仍會保留</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aykwnpsnu65ik7usaz2tvo9wy\">使用 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 來定義那些中間樣式，以便在動畫過程中產生運動的錯覺</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3sj4vevxrmwjpdvxy68tdv0tu\">當停用了動畫時，也會忽略 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 中的樣式，但 <a href=\"api/animations/state\"><code>state()</code></a> 中的樣式不會。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0fx81fhl7oqphp0jdvvk212y\">在同一個 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 引數中包含多個狀態對：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>( 'on =&gt; off, off =&gt; void' )\n\n</code-example>\n</li>\n</ul>\n</div>\n<h3 id=\"triggering-the-animation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8x5y5ynh5nb659qpg2ph0uf04\">觸發動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#triggering-the-animation\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75tzpgzvqxaky84itx1jdqrlq\">動畫需要<em>觸發器</em>，以便知道該在何時開始。<code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> 函式會把一些狀態和轉場組合在一起，併為這個動畫命名，這樣你就可以在 HTML 樣板中把它附加到想要觸發動畫的元素上了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azei1o2wl1y44npl65ru1mhdn\"><code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> 函式描述了監聽變化時要使用的觸發器名稱。當這個觸發器名稱所繫結的值發生了變化時，觸發器就會啟動它所定義的操作。這些操作可能是轉場，也可能是其它功能，我們稍後就會看到。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1julbea332vvogy9pwg5eqyg\">在這個例子中，我們將把該觸發器命名為 <code>openClose</code>，並把它附加到 <code>button</code> 元素上。該觸發器描述了 <code>open</code> 和 <code>closed</code> 兩個狀態，以及兩個轉場效果的時序。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nzw0qdatzxdc50ptnyvgvl40\"><strong>注意</strong>：<br>\n在每個 <code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> 函式呼叫中，元素在任意時刻只能處於其中的一個狀態。但是，元素可以在同一時刻啟用多個觸發器。</p>\n</div>\n<h3 id=\"defining-animations-and-attaching-them-to-the-html-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f8e5mbkm7jk4e848dupmraqf\">定義動畫，並把它們附加到 HTML 樣板中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#defining-animations-and-attaching-them-to-the-html-template\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"542brm6dmfkcod34x97e4w2kg\">這些控制 HTML 元素如何運動的動畫是在元件的元資料中定義的。請在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器的 <code>animations:</code> 屬性下用程式碼定義你要用的動畫。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-open-close',\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n      // ...\n      state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        height: '200px',\n        opacity: 1,\n        backgroundColor: 'yellow'\n      })),\n      state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        height: '100px',\n        opacity: 0.8,\n        backgroundColor: 'blue'\n      })),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open =&gt; closed', [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n      ]),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('closed =&gt; open', [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n      ]),\n    ]),\n  ],\n  templateUrl: 'open-close.component.html',\n  styleUrls: ['open-close.component.css']\n})\nexport class OpenCloseComponent {\n  isOpen = true;\n\n  toggle() {\n    this.isOpen = !this.isOpen;\n  }\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7teb14r5yqm6zx81fgcbkdoa8\">為元件定義好這些動畫觸發器之後，你可以給觸發器名稱加上 <code>@</code> 字首幷包在方括號裡，來把它附加到元件樣板中的元素上。然後，你可以使用 Angular 的標準屬性綁定語法（如下所示），來把這個觸發器繫結到樣板表示式上。這裡的 <code>triggerName</code> 就是觸發器的名稱，而 <code>expression</code> 的求值結果是前面定義過的動畫狀態之一。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n&lt;div [@triggerName]=\"expression\"&gt;…&lt;/div&gt;;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"224onj073z4i6z0hxorrxjsz6\">當該表示式的值變成了新的狀態時，動畫就會執行或者叫觸發。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv1ofmcvkewk66me116fgz9j3\">下列程式碼片段把該觸發器繫結到了 <code>isOpen</code> 屬性的值上。</p>\n<code-example header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.1.html\" region=\"trigger\">\n&lt;nav&gt;\n  &lt;button type=\"button\" (click)=\"toggle()\"&gt;Toggle Open/Close&lt;/button&gt;\n&lt;/nav&gt;\n\n&lt;div [@openClose]=\"isOpen ? 'open' : 'closed'\" class=\"open-close-container\"&gt;\n  &lt;p&gt;The box is now {{ isOpen ? 'Open' : 'Closed' }}!&lt;/p&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6f36x9whsug5m8xswzbhkn4i1\">在這個例子中，當 <code>isOpen</code> 表示式求值為一個已定義狀態 <code>open</code> 或 <code>closed</code> 時，就會通知 <code>openClose</code> 觸發器說狀態變化了。然後，就由 <code>openClose</code> 中的程式碼來處理狀態變更，並啟動狀態變更動畫。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61r7ygn6tys61srrgmi9gmlx3\">對於那些進入或離開頁面的元素（插入到 DOM 中或從中移除），你可以讓動畫變成有條件的。比如，在 HTML 樣板中可以和 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 一起使用動畫觸發器。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dda4erkaz6zm4ek4ho0blrp5i\"><strong>注意</strong>：<br>\n在元件檔案中，要把用來定義動畫的觸發器設定為 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器的 <code>animations:</code> 屬性的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cno4aia9g8d97ppcqbelyartb\">在 HTML 樣板檔案中，使用這個觸發器的名稱來把所定義的這些動畫附加到想要新增動畫的 HTML 元素上。</p>\n</div>\n<h3 id=\"code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74vloiv02qvwcs03uvd8dy3bk\">程式碼回顧<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#code-review\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tb7e9dp8tys7tm4ia9i67aes\">下面是轉場動畫範例中討論過的程式碼檔案。</p>\n<code-tabs>\n    <code-pane header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-open-close',\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n      // ...\n      state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        height: '200px',\n        opacity: 1,\n        backgroundColor: 'yellow'\n      })),\n      state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        height: '100px',\n        opacity: 0.8,\n        backgroundColor: 'blue'\n      })),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open =&gt; closed', [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n      ]),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('closed =&gt; open', [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n      ]),\n    ]),\n  ],\n  templateUrl: 'open-close.component.html',\n  styleUrls: ['open-close.component.css']\n})\nexport class OpenCloseComponent {\n  isOpen = true;\n\n  toggle() {\n    this.isOpen = !this.isOpen;\n  }\n\n}\n\n</code-pane>\n    <code-pane header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.1.html\" region=\"trigger\">\n&lt;nav&gt;\n  &lt;button type=\"button\" (click)=\"toggle()\"&gt;Toggle Open/Close&lt;/button&gt;\n&lt;/nav&gt;\n\n&lt;div [@openClose]=\"isOpen ? 'open' : 'closed'\" class=\"open-close-container\"&gt;\n  &lt;p&gt;The box is now {{ isOpen ? 'Open' : 'Closed' }}!&lt;/p&gt;\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/open-close.component.css\" path=\"animations/src/app/open-close.component.css\">\n:host {\n  display: block;\n  margin-top: 1rem;\n}\n\n.open-close-container {\n  border: 1px solid #dddddd;\n  margin-top: 1em;\n  padding: 20px 20px 0px 20px;\n  color: #000000;\n  font-weight: bold;\n  font-size: 20px;\n}\n\n\n</code-pane>\n</code-tabs>\n<h3 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\">總結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#summary\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7l8rbnyl1342xk44kv230uv8f\">你已經學會瞭如何在兩個狀態之間新增簡單的轉場動畫，只要使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 和 <a href=\"api/animations/state\"><code>state()</code></a>，並使用 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 來定義時序就可以了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o6dk0x0pe1nmdprjy26ymb9d\">請到 \"動畫\" 組下學習 Angular 動畫的高階屬性，不妨先從<a href=\"guide/transition-and-triggers\">轉場與觸發器</a>中講述的高階技巧開始。</p>\n<p><a id=\"animation-api-summary\"></a></p>\n<h2 id=\"animations-api-summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bfmn4karxlz0kla0qjxw8vdm\">動畫 API 小結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animations-api-summary\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gi8anm1j6y45iqqqcjtzqfg5\"><code>@angular/animations</code> 模組提供的這些功能性 API 提供了一種領域特定語言（DSL），用於在 Angular 應用中建立和控制動畫效果。到 <a href=\"api/animations\">API 參考手冊</a>中檢視完整的清單以及這些核心功能、相關資料結構的詳細語法。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85oi3tq4pzopk40jjdlqyy0cq\">函式名稱</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahluelivcbmz75ycwe771tv33\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5utewxumc0xsz71kyrtlfxpgq\">啟動動畫並作為所有其他動畫函式呼叫的容器。HTML 樣板繫結到 \n<code>triggerName</code>。使用第一個引數宣告一個獨特的觸發器名稱。使用陣列語法。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1auzelhs2dk9xyeaxudporvfk\">定義一個或多個用於動畫的 CSS 樣式。在動畫期間控制 HTML 元素的視覺外觀。使用物件語法。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/animations/state\"><code>state()</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4e807tr15fe73dccwke1lbczs\">建立應在成功轉場到給定狀態時應用的命名一組 CSS 樣式。然後可以在其他動畫函式中透過名稱引用該狀態。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hi9xzgtgnluy1089k2a3pgwc\">為過渡指定時間訊息。可選值為 \n<code>delay</code> 和 \n<code>easing</code>。可以在其中包含 \n<code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 呼叫。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18nhl1yi07n85u0xpnym7yxtf\">定義兩個命名狀態之間的動畫序列。使用陣列語法。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dguyvjdevgs6sa4fk9jw2b3ll\">允許在指定時間間隔內按順序更改樣式。在 \n<code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 內使用。每個 \n<code>keyframe()</code> 中可以包含多個 \n<code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 呼叫。使用陣列語法。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/animations/group\"><code>group()</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24qm0xt43qtwot0793891ppha\">指定要並行執行的動畫步驟（內部動畫）。只有在所有內部動畫步驟完成後動畫才會繼續。在 \n<code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code> 或 \n<code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 中使用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ci2hkjva0cmvb6v69694jhdv1\">查詢當前元素內的一個或多個內部 HTML 元素。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2c78o2yli3v4kguonrlon3p08\">指定按順序逐個執行的動畫步驟清單。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"i1xxw8jglezmbf39ycuozg7k\">為多個元素的動畫啟動時間錯開。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6kvyb11vlz0m9e455m45cbva\">生成可重複使用的動畫，可以從其他地方呼叫。與 \n<code><a href=\"api/animations/useAnimation\" class=\"code-anchor\">useAnimation</a>()</code> 一起使用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/useAnimation\" class=\"code-anchor\">useAnimation</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96o5ylc0c37avqddo7fgo76o0\">啟用可重複使用的動畫。與 \n<code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>()</code> 一起使用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5eraa5x30xg9wtjiykjywtfvh\">允許子元件的動畫與父級在相同的時間範圍內執行。</td>\n</tr>\n</tbody>\n</table>\n\n<h2 id=\"more-on-angular-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a26kagk7mrtsdtdkoro0iswgp\">關於 Angular 動畫的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oolgylns9kaynftarwog49tq\">你可能還對下列內容感興趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d2gzislo0xv4rrldotf2u8yh\"><a href=\"guide/transition-and-triggers\">轉場與觸發器</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3gdfoyldquxye4upb4liwohvp\"><a href=\"guide/complex-animation-sequences\">複雜動畫序列</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82pieugpn2i38mksdalgha2g3\"><a href=\"guide/reusable-animations\">可複用動畫</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"be5qvxhwesxxj6af0lirn21vy\"><a href=\"guide/route-animations\">路由轉場動畫</a></li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atbphc2yejb0lnh96zotsro7h\">到這個<a href=\"https://www.youtube.com/watch?v=rnTK9meY5us\">演講</a>中檢視 2017 年 11 月的 AngularConnect 大會上完整的動畫及其<a href=\"https://github.com/matsko/animationsftw.in\">原始碼</a>。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Wed Aug 16 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/animations\n - api/platform-browser/animations\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/platform-browser/animations/async\n - api/platform-browser/animations/async/provideAnimationsAsync\n - api/platform-browser/animations/provideAnimations\n - api/platform-browser/animations/provideNoopAnimations\n - guide/architecture-next-steps\n - guide/complex-animation-sequences\n - guide/developer-guide-overview\n - guide/example-apps-list\n - guide/glossary\n - guide/npm-packages\n - guide/reusable-animations\n - guide/route-animations\n - guide/router-tutorial-toh\n - guide/transition-and-triggers\n - guide/upgrade\n - guide/what-is-angular\n-->\n<!-- links from this doc:\n - api/animations\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/animation\n - api/animations/group\n - api/animations/keyframes\n - api/animations/query\n - api/animations/sequence\n - api/animations/stagger\n - api/animations/state\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/animations/useAnimation\n - api/common/NgIf\n - api/core/Component\n - api/core/HostBinding\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/platform-browser/animations/provideAnimations\n - api/platform-browser/bootstrapApplication\n - api/router/RouterLink\n - api/router/RouterOutlet\n - guide/animations#about-this-guide\n - guide/animations#animating-a-transition\n - guide/animations#animation-api-summary\n - guide/animations#animation-metadata-duration-delay-and-easing\n - guide/animations#animation-state-and-styles\n - guide/animations#animations-api-summary\n - guide/animations#code-review\n - guide/animations#defining-animations-and-attaching-them-to-the-html-template\n - guide/animations#getting-started\n - guide/animations#introduction-to-angular-animations\n - guide/animations#more-on-angular-animations\n - guide/animations#prerequisites\n - guide/animations#step-1-enabling-the-animations-module\n - guide/animations#step-2-importing-animation-functions-into-component-files\n - guide/animations#step-3-adding-the-animation-metadata-property\n - guide/animations#summary\n - guide/animations#transitions-and-timing\n - guide/animations#triggering-the-animation\n - guide/architecture\n - guide/complex-animation-sequences\n - guide/glossary#case-conventions\n - guide/reusable-animations\n - guide/route-animations\n - guide/transition-and-triggers\n - tutorial\n - https://easings.net\n - https://github.com/matsko/animationsftw.in\n - https://material.io/design/motion/speed.html#easing\n - https://www.w3.org/TR/css-transitions-1\n - https://www.youtube.com/watch?v=rnTK9meY5us\n-->"}
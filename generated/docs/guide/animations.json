{"id":"guide/animations","title":"Angular 动画简介","contents":"<div class=\"content\">\n  <h1 id=\"introduction-to-angular-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bx5grkcsai72ub0it7jyx847m\">Angular 动画简介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#introduction-to-angular-animations\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b8zbqyxijtg1igxd02uji4o1\">动画用于提供运动的幻觉：HTML 元素随着时间改变样式。精心设计的动画可以让你的应用更有趣，更易用，但它们不仅仅是装饰性的。动画可以通过几种方式改善你的应用和用户体验：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4v5l8p9ewk2rpzloon951k5dk\">没有动画，Web 页面的过渡就会显得突兀、不协调</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vtng5o4wn7x842r2i12mmlwi\">运动能极大地提升用户体验，因此动画可以让用户察觉到应用对他们的操作做出了响应</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mflvab1vt9l5fzmk56gtp6w0\">良好的动画可以直观的把用户的注意力吸引到要留意的地方</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bzjvpfwkl6bbl4cij3hee9aht\">典型的动画会涉及多种随时间变化的转换。HTML 元素可以移动、变换颜色、增加或缩小、隐藏或从页面中滑出。这些变化可以同时发生或顺序发生。你可以控制每次转换的持续时间。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lj6te5obpsyugoyrogg6hn7\">Angular 的动画系统是基于 CSS 功能构建的，这意味着你可以 \"动\" 浏览器认为可动的任何属性。包括位置、大小、变形、颜色、边框等。W3C 在它的 <a href=\"https://www.w3.org/TR/css-transitions-1\">CSS Transitions（过渡）</a> 页中维护了一个可动属性的列表。</p>\n<h2 id=\"about-this-guide\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cymus2clh055bn4ep9j2kvh1u\">关于本指南<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#about-this-guide\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94xgjndayk9afr79okaowze1u\">本指南覆盖了基本的 Angular 动画特性，让你能开始为你的项目添加 Angular 动画。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dh9oy3m33l496bdqjnkmrw5xa\">本指南中描述的特性，以及相关的 Angular 动画章节中描述的更多高级特性，都在一个范例 <live-example></live-example> 中进行了演示。</p>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctiymx02j4aaefwut9amcwj5j\">本指南假设你已经能熟练构建基本的 Angular 应用，也就是下列章节中所讲的那些：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xycsbxcv0c5qkbyobw77ktsd\"><a href=\"tutorial\">教程</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eeu18mg6g2yn9t3gjx4l6qcb7\"><a href=\"guide/architecture\">架构概览</a></li>\n</ul>\n<h2 id=\"getting-started\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1ec4dv7ru8g390agopg2loxb\">快速上手<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#getting-started\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajwgrr6ojtebjg5qbr8dufmz1\">动画的主要 Angular 模块是 \n<code>@angular/animations</code> 和 \n<code>@angular/platform-browser</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfvh0qjr6g1tllrhe7c0o506v\">为了把 Angular 动画添加到你的项目中，把这些与动画相关的模块和标准的 Angular 功能一起导入进来。</p>\n<h3 id=\"step-1-enabling-the-animations-module\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wt4c4bvg7j0q3n092gc44nqz\">步骤一：启用动画模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#step-1-enabling-the-animations-module\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"394tgvpnmb9ndx86efmbyjedd\">从 \n<code>@angular/platform-browser/animations</code> 导入 \n<code><a href=\"api/platform-browser/animations/provideAnimations\" class=\"code-anchor\">provideAnimations</a></code> 并将其添加到 \n<code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code> 函数调用的提供者列表中。</p>\n<code-example language=\"ts\">\n<a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>(AppComponent, {\n  providers: [\n    <a href=\"api/platform-browser/animations/provideAnimations\" class=\"code-anchor\">provideAnimations</a>(),\n  ]\n});\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2i9fvg805azyn7f9gat1ictmb\">对于基于 \n<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的应用程序，导入 \n<code><a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a></code>，这将为你的 Angular 根应用程序模块引入动画功能。</p>\n<code-example header=\"src/app/app.module.ts\" path=\"animations/src/app/app.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>\n  ],\n  declarations: [ ],\n  bootstrap: [ ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dctvfceffjvs6otnaljertr6k\"><strong>注意</strong>：<br>\n当你使用 CLI 创建应用时，应用的根模块 <code>app.module.ts</code> 位于 <code>src/app</code> 目录下。</p>\n</div>\n<h3 id=\"step-2-importing-animation-functions-into-component-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"717rsehiftsebgq1q2cwne844\">步骤二：把动画功能导入组件文件中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#step-2-importing-animation-functions-into-component-files\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8xt2h2guykc8r207tl4j63hdg\">如果你准备在组件文件中使用特定的动画函数，请从 <code>@angular/animations</code> 中导入这些函数。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a> } from '@angular/core';\nimport {\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>,\n  state,\n  <a href=\"api/animations/style\" class=\"code-anchor\">style</a>,\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>,\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>,\n  // ...\n} from '@angular/animations';\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wnzp7hdbgezh8srs9ffejkh7\"><strong>注意</strong>：<br>\n参阅本指南末尾的<a href=\"guide/animations#animation-api-summary\">可用动画函数汇总表</a>。</p>\n</div>\n<h3 id=\"step-3-adding-the-animation-metadata-property\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bs933hyich1rf2l3njltohrlc\">步骤三：添加动画的元数据属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#step-3-adding-the-animation-metadata-property\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rii7t6djbco17fy4b6tr1kzz\">在组件的 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 装饰器中，添加一个名叫 <code>animations:</code> 的元数据属性。你可以把用来定义动画的触发器放进 <code>animations</code> 元数据属性中。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"decorator\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  imports: [<a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a>, <a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a>],\n  animations: [\n    // <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a> triggers go here\n  ]\n})\n\n</code-example>\n<h2 id=\"animating-a-transition\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1hmao4jko0a161jttsq27tlft\">过渡动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animating-a-transition\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21n0tdypr8wruoxo1yzygfu8f\">我们来做一个简单的过渡动作，它把单个 HTML 元素从一个状态变成另一个状态。比如，你可以指定按钮根据用户的最后一个动作显示成<strong>Open</strong>或<strong>Closed</strong>状态。当按钮处于 <code>open</code> 状态时，它是可见的，并且是黄色的。当它处于 <code>closed</code> 状态时，它是透明的，并且是蓝色的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6j0mlmuejn5o6umsjiwlgrrof\">在 HTML 中，这些属性都使用普通的 CSS 样式，比如颜色（color）和透明度（opacity）。在 Angular 中，使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 函数来指定一组用作动画的 CSS 样式。可以为动画状态指定一组样式，并为该状态指定一个名字，比如 <code>open</code> 或 <code>closed</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eauovtiy193ujsh1w3v2o7ynn\">我们创建一个具有简单过渡动画的 <code>open-close</code> 组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erpk1mzed9d8bo9lt80hnjr32\">在终端窗口运行下列命令以生成该组件：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng g component open-close\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsocs1k9c9u22w8ez1rmtuj1m\">这会在 <code>src/app/open-close.component.ts</code> 下创建此组件。</p>\n</div>\n<h3 id=\"animation-state-and-styles\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4t5izinnsmo0fipr9zbptkqn\">动画状态和样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animation-state-and-styles\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tm0xv8fbz8zwmj41ba2m38n6\">使用 Angular 的 <a href=\"api/animations/state\"><code>state()</code></a> 函数来定义不同的状态，供每次过渡结束时调用。该函数接受两个参数：一个唯一的名字，比如 <code>open</code> 或 <code>closed</code> 和一个 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 函数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3i1e71vxhuhvejtcqwh6sa5hg\">使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 函数来定义一组与指定的状态名相关的样式。名称里带中线的样式属性必须是<a href=\"guide/glossary#case-conventions\"><em>小驼峰</em></a> 格式的，如 <code>backgroundColor</code>，或者把它们包裹到引号里，如 <code>'background-color'</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hvvxy6hmt4n2a5ozffbqqe7u\">我们来看看 Angular 的 <a href=\"api/animations/state\"><code>state()</code></a> 函数如何与 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 函数联用，来设置 CSS 样式的属性。\n在下面的代码片段中，该状态的多个样式属性都是同时设置的。在 <code>open</code> 状态中，该按钮的高度是 200 像素，透明度是 1，背景色是黄色。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"state1\">\n// ...\nstate('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n  height: '200px',\n  opacity: 1,\n  backgroundColor: 'yellow'\n})),\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85mc0xekdcu2pnsgikfd6gp7e\">在下面这个 <code>closed</code> 状态中，按钮的高度是 100 像素，透明度是 0.8，背景色是蓝色。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"state2\">\nstate('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n  height: '100px',\n  opacity: 0.8,\n  backgroundColor: 'blue'\n})),\n\n</code-example>\n<h3 id=\"transitions-and-timing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aj7q0l7mt26fiii4h9x56q5sp\">过渡与时序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#transitions-and-timing\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e47udfvcwghyjqw0dxtowoqnu\">在 Angular 中，你可以设置多个样式而不必用动画。不过，如果没有进一步细化，按钮的转换会立即完成 —— 没有渐隐、没有收缩，也没有其它的可视化效果来指出正在发生变化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rih67qziolxuu6rswzsekfx5\">要让这些变化不那么突兀，就要定义一个动画<em>过渡</em>来要求这些状态之间的变化在一段时间内发生。<code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 接受两个参数：第一个参数接受一个表达式，它定义两个过渡状态之间的方向；第二个参数接受一个或一系列 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ea6b8eslghzaftgaiwm7jcm7e\">使用 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函数来定义长度、延迟和缓动效果，并指定一个样式函数，以定义过渡过程中的样式。可以用 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函数来为多步动画定义 <code><a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>()</code> 函数。这些定义放在 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函数的第二个参数中。</p>\n<h4 id=\"animation-metadata-duration-delay-and-easing\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cuftglbsnx9kx43v2mann1vt2\">动画元数据：持续时间、延迟和缓动效果<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animation-metadata-duration-delay-and-easing\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gygs3yejm8jewpw6z524wlz4\"><code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函数（作为过渡函数的第二个参数）可以接受 <code>timings</code> 和 <code>styles</code> 参数。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97jr7u8ef7egl1rkjj0lflmxw\"><code>timings</code> 参数可以接受一个数字或由三部分组成的字符串。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n<a href=\"api/animations/animate\" class=\"code-anchor\">animate</a> (duration)\n\n</code-example>\n<p>or</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n<a href=\"api/animations/animate\" class=\"code-anchor\">animate</a> ('duration delay easing')\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2lqcpzy7h9uteruoyh15u8dv\">第一部分 <code>duration</code>（持续时间）是必须的。这个持续时间可以表示成一个不带引号的纯数字（表示毫秒），或一个带引号的有单位的时间（表示秒数）。比如，0.1 秒的持续时间有如下表示方式：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1nw09s4d5ule0wck15c2cd71m\">作为纯数字，毫秒为单位：<code>100</code></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bynag0dnt54q51znjrk953y43\">作为字符串，毫秒为单位：<code>'100ms'</code></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"etkymh79s05cw3ujtr2dnhrcs\">作为字符串，秒为单位：<code>'0.1s'</code></p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nksn60i1fcud2gm49vre9l56\">第二个参数 <code>delay</code> 的语法和 <code>duration</code> 一样。比如：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqno0hba7nyn7hmborne2kt0y\">等待 100 毫秒，然后运行 200 毫秒表示为：<code>'0.2s 100ms'</code></li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8r4cv60nypqtaiujw1nofhwzc\">第三个参数 <code>easing</code> 控制动画在运行期间如何进行<a href=\"http://easings.net\">加速和减速</a>。比如 <code>ease-in</code> 表示动画开始时很慢，然后逐渐加速。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ipgj38is9zalkzz1q3salk6n\">等待 100 毫秒，运行 200 毫秒。按照减速曲线运动，快速启动并逐渐减速，直到静止：<code>'0.2s 100ms ease-out'</code></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bje43umlscb66gsnep4ohp988\">运行 200 毫秒，不等待。按照标准曲线运动，开始很慢，中间加速，最后逐渐减速：<code>'0.2s ease-in-out'</code></p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cm5e400dzex9ig48dy7a4d4fe\">立即开始，运行 200 毫秒。按照加速曲线运动，开始很慢，最后达到全速：<code>'0.2s ease-in'</code></p>\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bflu1cyzzo9xidkuwoww55ip1\"><strong>注意</strong>：<br>\n有关缓动曲线的一般信息，参阅 Material Design 网站上关于<a href=\"https://material.io/design/motion/speed.html#easing\">自然缓动曲线</a>的主题。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alfklg4mie2hbvp8f7l387vlq\">下面的例子提供了一个从 <code>open</code> 到 <code>closed</code> 的持续一秒的状态过渡。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"transition1\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open =&gt; closed', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n]),\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agr9bpq9kdq19tj555u56zdzj\">在上面的代码片段中，<code>=&gt;</code> 操作符表示单向过渡，而 <code>&lt;=&gt;</code> 表示双向过渡。在过渡过程中，<code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 指定了过渡需要花费的时间。在这里，从 <code>open</code> 到 <code>closed</code> 状态的转换要花费 1 秒中，表示成 <code>1s</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3bo2mp90czvcyxoi8rggpyekv\">下面的例子添加了一个从 <code>closed</code> 到 <code>open</code> 的状态过渡，过渡动画持续 0.5 秒。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"transition2\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('closed =&gt; open', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n]),\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bncjlf21oe59fmh0ubdy7wkc7\"><strong>注意</strong>：<br>\n在 <a href=\"api/animations/state\"><code>state</code></a> 和 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a></code> 函数中使用样式时有一些需要注意的地方。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4y6ouf7rq9wtlifj7gieko8s6\">请用 <a href=\"api/animations/state\"><code>state()</code></a> 来定义那些每个过渡结束时的样式，这些样式在动画完成后仍会保留</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aykwnpsnu65ik7usaz2tvo9wy\">使用 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 来定义那些中间样式，以便在动画过程中产生运动的错觉</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3sj4vevxrmwjpdvxy68tdv0tu\">当禁用了动画时，也会忽略 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 中的样式，但 <a href=\"api/animations/state\"><code>state()</code></a> 中的样式不会。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0fx81fhl7oqphp0jdvvk212y\">在同一个 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 参数中包含多个状态对：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>( 'on =&gt; off, off =&gt; void' )\n\n</code-example>\n</li>\n</ul>\n</div>\n<h3 id=\"triggering-the-animation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8x5y5ynh5nb659qpg2ph0uf04\">触发动画<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#triggering-the-animation\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"75tzpgzvqxaky84itx1jdqrlq\">动画需要<em>触发器</em>，以便知道该在何时开始。<code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> 函数会把一些状态和过渡组合在一起，并为这个动画命名，这样你就可以在 HTML 模板中把它附加到想要触发动画的元素上了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"azei1o2wl1y44npl65ru1mhdn\"><code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> 函数描述了监听变化时要使用的触发器名称。当这个触发器名称所绑定的值发生了变化时，触发器就会启动它所定义的操作。这些操作可能是过渡，也可能是其它功能，我们稍后就会看到。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e1julbea332vvogy9pwg5eqyg\">在这个例子中，我们将把该触发器命名为 <code>openClose</code>，并把它附加到 <code>button</code> 元素上。该触发器描述了 <code>open</code> 和 <code>closed</code> 两个状态，以及两个过渡效果的时序。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nzw0qdatzxdc50ptnyvgvl40\"><strong>注意</strong>：<br>\n在每个 <code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> 函数调用中，元素在任意时刻只能处于其中的一个状态。但是，元素可以在同一时刻激活多个触发器。</p>\n</div>\n<h3 id=\"defining-animations-and-attaching-them-to-the-html-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f8e5mbkm7jk4e848dupmraqf\">定义动画，并把它们附加到 HTML 模板中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#defining-animations-and-attaching-them-to-the-html-template\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"542brm6dmfkcod34x97e4w2kg\">这些控制 HTML 元素如何运动的动画是在组件的元数据中定义的。请在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 装饰器的 <code>animations:</code> 属性下用代码定义你要用的动画。</p>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-open-close',\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n      // ...\n      state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        height: '200px',\n        opacity: 1,\n        backgroundColor: 'yellow'\n      })),\n      state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        height: '100px',\n        opacity: 0.8,\n        backgroundColor: 'blue'\n      })),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open =&gt; closed', [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n      ]),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('closed =&gt; open', [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n      ]),\n    ]),\n  ],\n  templateUrl: 'open-close.component.html',\n  styleUrls: ['open-close.component.css']\n})\nexport class OpenCloseComponent {\n  isOpen = true;\n\n  toggle() {\n    this.isOpen = !this.isOpen;\n  }\n\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7teb14r5yqm6zx81fgcbkdoa8\">为组件定义好这些动画触发器之后，你可以给触发器名称加上 <code>@</code> 前缀并包在方括号里，来把它附加到组件模板中的元素上。然后，你可以使用 Angular 的标准属性绑定语法（如下所示），来把这个触发器绑定到模板表达式上。这里的 <code>triggerName</code> 就是触发器的名称，而 <code>expression</code> 的求值结果是前面定义过的动画状态之一。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n&lt;div [@triggerName]=\"expression\"&gt;…&lt;/div&gt;;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"224onj073z4i6z0hxorrxjsz6\">当该表达式的值变成了新的状态时，动画就会执行或者叫触发。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv1ofmcvkewk66me116fgz9j3\">下列代码片段把该触发器绑定到了 <code>isOpen</code> 属性的值上。</p>\n<code-example header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.1.html\" region=\"trigger\">\n&lt;nav&gt;\n  &lt;button type=\"button\" (click)=\"toggle()\"&gt;Toggle Open/Close&lt;/button&gt;\n&lt;/nav&gt;\n\n&lt;div [@openClose]=\"isOpen ? 'open' : 'closed'\" class=\"open-close-container\"&gt;\n  &lt;p&gt;The box is now {{ isOpen ? 'Open' : 'Closed' }}!&lt;/p&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6f36x9whsug5m8xswzbhkn4i1\">在这个例子中，当 <code>isOpen</code> 表达式求值为一个已定义状态 <code>open</code> 或 <code>closed</code> 时，就会通知 <code>openClose</code> 触发器说状态变化了。然后，就由 <code>openClose</code> 中的代码来处理状态变更，并启动状态变更动画。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61r7ygn6tys61srrgmi9gmlx3\">对于那些进入或离开页面的元素（插入到 DOM 中或从中移除），你可以让动画变成有条件的。比如，在 HTML 模板中可以和 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 一起使用动画触发器。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dda4erkaz6zm4ek4ho0blrp5i\"><strong>注意</strong>：<br>\n在组件文件中，要把用来定义动画的触发器设置为 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 装饰器的 <code>animations:</code> 属性的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cno4aia9g8d97ppcqbelyartb\">在 HTML 模板文件中，使用这个触发器的名称来把所定义的这些动画附加到想要添加动画的 HTML 元素上。</p>\n</div>\n<h3 id=\"code-review\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"74vloiv02qvwcs03uvd8dy3bk\">代码回顾<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#code-review\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tb7e9dp8tys7tm4ia9i67aes\">下面是过渡动画范例中讨论过的代码文件。</p>\n<code-tabs>\n    <code-pane header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-open-close',\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n      // ...\n      state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        height: '200px',\n        opacity: 1,\n        backgroundColor: 'yellow'\n      })),\n      state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        height: '100px',\n        opacity: 0.8,\n        backgroundColor: 'blue'\n      })),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open =&gt; closed', [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n      ]),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('closed =&gt; open', [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n      ]),\n    ]),\n  ],\n  templateUrl: 'open-close.component.html',\n  styleUrls: ['open-close.component.css']\n})\nexport class OpenCloseComponent {\n  isOpen = true;\n\n  toggle() {\n    this.isOpen = !this.isOpen;\n  }\n\n}\n\n</code-pane>\n    <code-pane header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.1.html\" region=\"trigger\">\n&lt;nav&gt;\n  &lt;button type=\"button\" (click)=\"toggle()\"&gt;Toggle Open/Close&lt;/button&gt;\n&lt;/nav&gt;\n\n&lt;div [@openClose]=\"isOpen ? 'open' : 'closed'\" class=\"open-close-container\"&gt;\n  &lt;p&gt;The box is now {{ isOpen ? 'Open' : 'Closed' }}!&lt;/p&gt;\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/open-close.component.css\" path=\"animations/src/app/open-close.component.css\">\n:host {\n  display: block;\n  margin-top: 1rem;\n}\n\n.open-close-container {\n  border: 1px solid #dddddd;\n  margin-top: 1em;\n  padding: 20px 20px 0px 20px;\n  color: #000000;\n  font-weight: bold;\n  font-size: 20px;\n}\n\n\n</code-pane>\n</code-tabs>\n<h3 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\">总结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#summary\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7l8rbnyl1342xk44kv230uv8f\">你已经学会了如何在两个状态之间添加简单的过渡动画，只要使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 和 <a href=\"api/animations/state\"><code>state()</code></a>，并使用 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 来定义时序就可以了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o6dk0x0pe1nmdprjy26ymb9d\">请到 \"动画\" 组下学习 Angular 动画的高级特性，不妨先从<a href=\"guide/transition-and-triggers\">过渡与触发器</a>中讲述的高级技巧开始。</p>\n<p><a id=\"animation-api-summary\"></a></p>\n<h2 id=\"animations-api-summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bfmn4karxlz0kla0qjxw8vdm\">动画 API 小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animations-api-summary\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5gi8anm1j6y45iqqqcjtzqfg5\"><code>@angular/animations</code> 模块提供的这些功能性 API 提供了一种领域特定语言（DSL），用于在 Angular 应用中创建和控制动画效果。到 <a href=\"api/animations\">API 参考手册</a>中查看完整的列表以及这些核心功能、相关数据结构的详细语法。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"85oi3tq4pzopk40jjdlqyy0cq\">函数名称</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahluelivcbmz75ycwe771tv33\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5utewxumc0xsz71kyrtlfxpgq\">启动动画并作为所有其他动画函数调用的容器。HTML 模板绑定到 \n<code>triggerName</code>。使用第一个参数声明一个独特的触发器名称。使用数组语法。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1auzelhs2dk9xyeaxudporvfk\">定义一个或多个用于动画的 CSS 样式。在动画期间控制 HTML 元素的视觉外观。使用对象语法。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/animations/state\"><code>state()</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4e807tr15fe73dccwke1lbczs\">创建应在成功过渡到给定状态时应用的命名一组 CSS 样式。然后可以在其他动画函数中通过名称引用该状态。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hi9xzgtgnluy1089k2a3pgwc\">为过渡指定时间信息。可选值为 \n<code>delay</code> 和 \n<code>easing</code>。可以在其中包含 \n<code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 调用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18nhl1yi07n85u0xpnym7yxtf\">定义两个命名状态之间的动画序列。使用数组语法。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dguyvjdevgs6sa4fk9jw2b3ll\">允许在指定时间间隔内按顺序更改样式。在 \n<code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 内使用。每个 \n<code>keyframe()</code> 中可以包含多个 \n<code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 调用。使用数组语法。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"api/animations/group\"><code>group()</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24qm0xt43qtwot0793891ppha\">指定要并行运行的动画步骤（内部动画）。只有在所有内部动画步骤完成后动画才会继续。在 \n<code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code> 或 \n<code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 中使用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ci2hkjva0cmvb6v69694jhdv1\">查找当前元素内的一个或多个内部 HTML 元素。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2c78o2yli3v4kguonrlon3p08\">指定按顺序逐个运行的动画步骤列表。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"i1xxw8jglezmbf39ycuozg7k\">为多个元素的动画启动时间错开。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6kvyb11vlz0m9e455m45cbva\">生成可重复使用的动画，可以从其他地方调用。与 \n<code><a href=\"api/animations/useAnimation\" class=\"code-anchor\">useAnimation</a>()</code> 一起使用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/useAnimation\" class=\"code-anchor\">useAnimation</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"96o5ylc0c37avqddo7fgo76o0\">激活可重复使用的动画。与 \n<code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>()</code> 一起使用。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5eraa5x30xg9wtjiykjywtfvh\">允许子组件的动画与父级在相同的时间范围内运行。</td>\n</tr>\n</tbody>\n</table>\n\n<h2 id=\"more-on-angular-animations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a26kagk7mrtsdtdkoro0iswgp\">关于 Angular 动画的更多知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oolgylns9kaynftarwog49tq\">你可能还对下列内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d2gzislo0xv4rrldotf2u8yh\"><a href=\"guide/transition-and-triggers\">过渡与触发器</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3gdfoyldquxye4upb4liwohvp\"><a href=\"guide/complex-animation-sequences\">复杂动画序列</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82pieugpn2i38mksdalgha2g3\"><a href=\"guide/reusable-animations\">可复用动画</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"be5qvxhwesxxj6af0lirn21vy\"><a href=\"guide/route-animations\">路由过渡动画</a></li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atbphc2yejb0lnh96zotsro7h\">到这个<a href=\"https://www.youtube.com/watch?v=rnTK9meY5us\">演讲</a>中查看 2017 年 11 月的 AngularConnect 大会上完整的动画及其<a href=\"https://github.com/matsko/animationsftw.in\">源码</a>。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Wed Aug 16 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/animations\n - api/platform-browser/animations\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/platform-browser/animations/async\n - api/platform-browser/animations/async/provideAnimationsAsync\n - api/platform-browser/animations/provideAnimations\n - api/platform-browser/animations/provideNoopAnimations\n - guide/architecture-next-steps\n - guide/complex-animation-sequences\n - guide/developer-guide-overview\n - guide/example-apps-list\n - guide/glossary\n - guide/npm-packages\n - guide/reusable-animations\n - guide/route-animations\n - guide/router-tutorial-toh\n - guide/transition-and-triggers\n - guide/upgrade\n - guide/what-is-angular\n-->\n<!-- links from this doc:\n - api/animations\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/animation\n - api/animations/group\n - api/animations/keyframes\n - api/animations/query\n - api/animations/sequence\n - api/animations/stagger\n - api/animations/state\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/animations/useAnimation\n - api/common/NgIf\n - api/core/Component\n - api/core/HostBinding\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/platform-browser/animations/provideAnimations\n - api/platform-browser/bootstrapApplication\n - api/router/RouterLink\n - api/router/RouterOutlet\n - guide/animations#about-this-guide\n - guide/animations#animating-a-transition\n - guide/animations#animation-api-summary\n - guide/animations#animation-metadata-duration-delay-and-easing\n - guide/animations#animation-state-and-styles\n - guide/animations#animations-api-summary\n - guide/animations#code-review\n - guide/animations#defining-animations-and-attaching-them-to-the-html-template\n - guide/animations#getting-started\n - guide/animations#introduction-to-angular-animations\n - guide/animations#more-on-angular-animations\n - guide/animations#prerequisites\n - guide/animations#step-1-enabling-the-animations-module\n - guide/animations#step-2-importing-animation-functions-into-component-files\n - guide/animations#step-3-adding-the-animation-metadata-property\n - guide/animations#summary\n - guide/animations#transitions-and-timing\n - guide/animations#triggering-the-animation\n - guide/architecture\n - guide/complex-animation-sequences\n - guide/glossary#case-conventions\n - guide/reusable-animations\n - guide/route-animations\n - guide/transition-and-triggers\n - tutorial\n - https://easings.net\n - https://github.com/matsko/animationsftw.in\n - https://material.io/design/motion/speed.html#easing\n - https://www.w3.org/TR/css-transitions-1\n - https://www.youtube.com/watch?v=rnTK9meY5us\n-->"}
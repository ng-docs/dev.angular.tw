{"id":"guide/creating-injectable-service","title":"创建可注入的服务","contents":"<div class=\"content\">\n  <h1 id=\"creating-an-injectable-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hlwfvf8kqawvgz32yf8ufn92\">创建可注入的服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#creating-an-injectable-service\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"540zms491e68ngr5my5uc499f\">服务是一个很宽泛的类别，它包含应用程序需要的任何值、功能或特性。服务通常是具有狭窄、明确定义的目标的类。组件是一种可以使用 DI 的类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kt2q77jh39o82x2sgfbsvc2b\">Angular 将组件与服务区分开来，是为了提高模块化程度和可复用性。通过将组件中与视图相关的特性与其他类型的处理分离开，可以让你的组件类更加精简高效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8tbqrzv7nyaa7h65zvw9fdhbt\">理想情况下，组件的工作就是提供用户体验，并无其它职责。组件应该表达用于数据绑定的属性和方法，以在视图（由模板渲染）和应用逻辑（通常包括某个模型的一些概念）之间进行居中协调。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qpj1vzqdjl6wk38ypg01y3gb\">组件可以将某些任务委托给服务，例如从服务器获取数据、验证用户输入或直接把日志记录到控制台。通过在可注入服务类中定义这样的处理任务，你可以让这些任务可用于任何组件。你还可以通过在不同的情况下注入同一个服务的不同提供者来让你的应用程序适应更多场景。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zs1y28cnic0kyfarqw9n6ooy\">Angular 不会强制执行这些原则。Angular 只是让你可以轻松地将应用逻辑分解为服务，并通过 DI 让这些服务可用在组件中，从而帮助你遵循这些原则。</p>\n<h2 id=\"service-examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8bl73lz949i79hn8v0p6tzjx\">服务范例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#service-examples\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8c0lrvqbl8sq0jaemmxbv5vlj\">下面是一个服务类的范例，用于把日志记录到浏览器的控制台：。</p>\n<code-example header=\"src/app/logger.service.ts (class)\" path=\"architecture/src/app/logger.service.ts\" region=\"class\">\nexport class Logger {\n  log(msg: any)   { console.log(msg); }\n  error(msg: any) { console.error(msg); }\n  warn(msg: any)  { console.warn(msg); }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8e2l3t27rr7fjy0jsbuwjmy9m\">服务也可以依赖其它服务。比如，这里的 <code>HeroService</code> 就依赖于 <code>Logger</code> 服务，它还用 <code>BackendService</code> 来获取英雄数据。<code>BackendService</code> 还可能再转而依赖 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服务来从服务器异步获取英雄列表。</p>\n<code-example header=\"src/app/hero.service.ts (class)\" path=\"architecture/src/app/hero.service.ts\" region=\"class\">\nexport class HeroService {\n  private heroes: Hero[] = [];\n\n  constructor(\n    private backend: BackendService,\n    private logger: Logger) { }\n\n  getHeroes() {\n    this.backend.getAll(Hero).then( (heroes: Hero[]) =&gt; {\n      this.logger.log(`Fetched ${heroes.length} heroes.`);\n      this.heroes.push(...heroes); // fill cache\n    });\n    return this.heroes;\n  }\n}\n\n\n</code-example>\n<h2 id=\"creating-an-injectable-service-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hlwfvf8kqawvgz32yf8ufn92\">创建可注入的服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#creating-an-injectable-service-1\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97vab0xvzkyky73yai9yjirn0\">Angular CLI 提供了一个命令来创建新服务。在以下示例中，你会为应用程序添加新服务，该应用是之前使用 <code>ng new</code> 命令创建的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9k5diassbs3r6zk5ebi2puvqc\">要在 <code>src/app/heroes</code> 文件夹中生成新的 <code>HeroService</code> 类，请按照以下步骤操作：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8em9q10sixsib8wdpr22gzhv4\">运行此 <a href=\"cli\">Angular CLI</a> 命令：</li>\n</ol>\n<code-example language=\"sh\">\nng generate service heroes/hero\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6kulrn1qkk7udfnv4ymapidt\">下列命令会创建默认的 <code>HeroService</code>。</p>\n<code-example path=\"dependency-injection/src/app/heroes/hero.service.0.ts\" header=\"src/app/heroes/hero.service.ts (CLI-generated)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45up1nvliii46h7omam0hh40q\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器指出 Angular 可以在 DI 体系中使用此类。元数据 <code>providedIn: 'root'</code> 表示 <code>HeroService</code> 在整个应用程序中都是可见的。</p>\n<ol start=\"2\">\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bl8ldkqncmm0l406yf1hc2kpk\">添加一个 <code>getHeroes()</code> 方法，该方法会返回来自 <code>mock.heroes.ts</code> 的英雄列表，以获取英雄的模拟数据：</li>\n</ol>\n<code-example path=\"dependency-injection/src/app/heroes/hero.service.3.ts\" header=\"src/app/heroes/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  // declares that this service should be created\n  // by the root application injector.\n  providedIn: 'root',\n})\nexport class HeroService {\n  getHeroes() { return HEROES; }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sjbf2n3ukxwynzq7mqkjo0r7\">为了清晰和可维护性，建议你在单独的文件中定义组件和服务。</p>\n<h2 id=\"injecting-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zsg3eji6vwfde37rihuvbo9o\">注入服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#injecting-services\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bhgjkhtylx2llr69njg1k06q\">要将服务作为依赖项注入到组件中，你可以使用组件的 <code>constructor()</code>，并为构造函数添加一个该依赖类型的参数。以下示例会在 <code>HeroListComponent</code> 构造函数中指定 <code>HeroService</code>。这里 <code>heroService</code> 的类型是 <code>HeroService</code>。Angular 会将 <code>HeroService</code> 识别为依赖项，因为该类以前用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 装饰器标记过。</p>\n<code-example header=\"src/app/heroes/hero-list.component (constructor signature)\" path=\"dependency-injection/src/app/heroes/hero-list.component.ts\" region=\"ctor-signature\">\nconstructor(heroService: HeroService)\n\n</code-example>\n<h2 id=\"injecting-services-in-other-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60y1lurrzupg08j5d2imrdmjf\">在其他服务中注入服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#injecting-services-in-other-services\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mulm1qcxggywmt75ljj6fbdy\">当某个服务依赖于另一个服务时，请遵循与注入组件相同的模式。在这里，<code>HeroService</code> 要依靠 <code>Logger</code> 服务来报告其活动。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjb6j5gz9aj61eekkkpqynhgz\">首先，导入 <code>Logger</code> 服务。接下来，通过指定 <code>private logger: Logger</code>，在 <code>HeroService</code> 的 <code>constructor()</code> 中注入 <code>Logger</code> 服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"da95k0dasaps853zwn0y4effo\">在这里，<code>constructor()</code> 指定了 <code>Logger</code> 的类型，并把 <code>Logger</code> 的实例存储在名叫 <code>logger</code> 的私有字段中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqgoby36vmc1k63gzhrsfjbzr\">下列代码具有 <code>Logger</code> 服务和两个版本的 <code>HeroService</code>。<code>HeroService</code> 的第一个版本不依赖于 <code>Logger</code> 服务。修改后的第二个版本依赖于 <code>Logger</code> 服务。</p>\n<code-tabs>\n\n  <code-pane header=\"src/app/heroes/hero.service (v2)\" path=\"dependency-injection/src/app/heroes/hero.service.2.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HEROES } from './mock-heroes';\nimport { Logger } from '../logger.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor(private logger: Logger) {  }\n\n  getHeroes() {\n    this.logger.log('Getting heroes ...');\n    return HEROES;\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/hero.service (v1)\" path=\"dependency-injection/src/app/heroes/hero.service.1.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n  getHeroes() { return HEROES; }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/logger.service\" path=\"dependency-injection/src/app/logger.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class Logger {\n  logs: string[] = []; // capture logs for testing\n\n  log(message: string) {\n    this.logs.push(message);\n    console.log(message);\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xz5qs8vghivu327gppq57uwe\">在这个例子中，<code>getHeroes()</code> 方法在获取英雄时就会借助 <code>Logger</code> 记录一条消息。</p>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dckjdss2sblal68pr66mt46q\"><a href=\"guide/dependency-injection-providers\">如何在 DI 中配置依赖项</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4rxwv5s58e7if211dhiiy4ng3\"><a href=\"guide/dependency-injection-providers#configuring-dependency-providers\">如何使用 <code>InjectionTokens</code> 提供和注入服务/类之外的值</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gv65k67y6jmm88mzefenhg2y\"><a href=\"guide/dependency-injection-in-action\">依赖注入实战</a></li>\n</ul>\n\n  <div class=\"reviewed\">最后复查时间：Tue Aug 02 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/dependency-injection\n - guide/dependency-injection-overview\n - tutorial/first-app/first-app-lesson-09\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient\n - api/core/Injectable\n - cli\n - guide/creating-injectable-service#creating-an-injectable-service\n - guide/creating-injectable-service#creating-an-injectable-service-1\n - guide/creating-injectable-service#injecting-services\n - guide/creating-injectable-service#injecting-services-in-other-services\n - guide/creating-injectable-service#service-examples\n - guide/creating-injectable-service#whats-next\n - guide/dependency-injection-in-action\n - guide/dependency-injection-providers\n - guide/dependency-injection-providers#configuring-dependency-providers\n-->"}
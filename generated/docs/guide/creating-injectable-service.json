{"id":"guide/creating-injectable-service","title":"建立可注入的服務","contents":"<div class=\"content\">\n  <h1 id=\"creating-an-injectable-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hlwfvf8kqawvgz32yf8ufn92\">建立可注入的服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#creating-an-injectable-service\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"540zms491e68ngr5my5uc499f\">服務是一個很寬泛的類別，它包含應用程式需要的任何值、功能或屬性。服務通常是具有狹窄、明確定義的目標的類。元件是一種可以使用 DI 的類。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kt2q77jh39o82x2sgfbsvc2b\">Angular 將元件與服務區分開來，是為了提高模組化程度和可複用性。透過將元件中與檢視相關的屬性與其他型別的處理分離開，可以讓你的元件類別更加精簡高效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8tbqrzv7nyaa7h65zvw9fdhbt\">理想情況下，元件的工作就是提供使用者體驗，並無其它職責。元件應該表達用於資料繫結的屬性和方法，以在檢視（由樣板渲染）和應用邏輯（通常包括某個模型的一些概念）之間進行居中協調。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qpj1vzqdjl6wk38ypg01y3gb\">元件可以將某些任務委託給服務，例如從伺服器獲取資料、驗證使用者輸入或直接把日誌記錄到控制台。透過在可注入服務類別中定義這樣的處理任務，你可以讓這些任務可用於任何元件。你還可以透過在不同的情況下注入同一個服務的不同提供者來讓你的應用程式適應更多場景。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zs1y28cnic0kyfarqw9n6ooy\">Angular 不會強制執行這些原則。Angular 只是讓你可以輕鬆地將應用邏輯分解為服務，並透過 DI 讓這些服務可用在元件中，從而幫助你遵循這些原則。</p>\n<h2 id=\"service-examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a8bl73lz949i79hn8v0p6tzjx\">服務範例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#service-examples\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8c0lrvqbl8sq0jaemmxbv5vlj\">下面是一個服務類別的範例，用於把日誌記錄到瀏覽器的控制台：。</p>\n<code-example header=\"src/app/logger.service.ts (class)\" path=\"architecture/src/app/logger.service.ts\" region=\"class\">\nexport class Logger {\n  log(msg: any)   { console.log(msg); }\n  error(msg: any) { console.error(msg); }\n  warn(msg: any)  { console.warn(msg); }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8e2l3t27rr7fjy0jsbuwjmy9m\">服務也可以依賴其它服務。比如，這裡的 <code>HeroService</code> 就依賴於 <code>Logger</code> 服務，它還用 <code>BackendService</code> 來獲取英雄資料。<code>BackendService</code> 還可能再轉而依賴 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服務來從伺服器非同步獲取英雄清單。</p>\n<code-example header=\"src/app/hero.service.ts (class)\" path=\"architecture/src/app/hero.service.ts\" region=\"class\">\nexport class HeroService {\n  private heroes: Hero[] = [];\n\n  constructor(\n    private backend: BackendService,\n    private logger: Logger) { }\n\n  getHeroes() {\n    this.backend.getAll(Hero).then( (heroes: Hero[]) =&gt; {\n      this.logger.log(`Fetched ${heroes.length} heroes.`);\n      this.heroes.push(...heroes); // fill cache\n    });\n    return this.heroes;\n  }\n}\n\n\n</code-example>\n<h2 id=\"creating-an-injectable-service-1\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5hlwfvf8kqawvgz32yf8ufn92\">建立可注入的服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#creating-an-injectable-service-1\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97vab0xvzkyky73yai9yjirn0\">Angular CLI 提供了一個指令來建立新服務。在以下範例中，你會為應用程式新增新服務，該應用是之前使用 <code>ng new</code> 指令建立的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9k5diassbs3r6zk5ebi2puvqc\">要在 <code>src/app/heroes</code> 資料夾中生成新的 <code>HeroService</code> 類，請按照以下步驟操作：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8em9q10sixsib8wdpr22gzhv4\">執行此 <a href=\"cli\">Angular CLI</a> 指令：</li>\n</ol>\n<code-example language=\"sh\">\nng generate service heroes/hero\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6kulrn1qkk7udfnv4ymapidt\">下列指令會建立預設的 <code>HeroService</code>。</p>\n<code-example path=\"dependency-injection/src/app/heroes/hero.service.0.ts\" header=\"src/app/heroes/hero.service.ts (CLI-generated)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"45up1nvliii46h7omam0hh40q\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器指出 Angular 可以在 DI 體系中使用此類。元資料 <code>providedIn: 'root'</code> 表示 <code>HeroService</code> 在整個應用程式中都是可見的。</p>\n<ol start=\"2\">\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bl8ldkqncmm0l406yf1hc2kpk\">新增一個 <code>getHeroes()</code> 方法，該方法會回傳來自 <code>mock.heroes.ts</code> 的英雄清單，以獲取英雄的模擬資料：</li>\n</ol>\n<code-example path=\"dependency-injection/src/app/heroes/hero.service.3.ts\" header=\"src/app/heroes/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  // declares that this service should be created\n  // by the root application injector.\n  providedIn: 'root',\n})\nexport class HeroService {\n  getHeroes() { return HEROES; }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sjbf2n3ukxwynzq7mqkjo0r7\">為了清晰和可維護性，建議你在單獨的檔案中定義元件和服務。</p>\n<h2 id=\"injecting-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zsg3eji6vwfde37rihuvbo9o\">注入服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#injecting-services\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bhgjkhtylx2llr69njg1k06q\">要將服務作為依賴項注入到元件中，你可以使用元件的 <code>constructor()</code>，併為建構式函式新增一個該依賴型別的引數。以下範例會在 <code>HeroListComponent</code> 建構式函式中指定 <code>HeroService</code>。這裡 <code>heroService</code> 的型別是 <code>HeroService</code>。Angular 會將 <code>HeroService</code> 識別為依賴項，因為該類別以前用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 裝飾器標記過。</p>\n<code-example header=\"src/app/heroes/hero-list.component (constructor signature)\" path=\"dependency-injection/src/app/heroes/hero-list.component.ts\" region=\"ctor-signature\">\nconstructor(heroService: HeroService)\n\n</code-example>\n<h2 id=\"injecting-services-in-other-services\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60y1lurrzupg08j5d2imrdmjf\">在其他服務中注入服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#injecting-services-in-other-services\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mulm1qcxggywmt75ljj6fbdy\">當某個服務依賴於另一個服務時，請遵循與注入元件相同的模式。在這裡，<code>HeroService</code> 要依靠 <code>Logger</code> 服務來報告其活動。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bjb6j5gz9aj61eekkkpqynhgz\">首先，匯入 <code>Logger</code> 服務。接下來，透過指定 <code>private logger: Logger</code>，在 <code>HeroService</code> 的 <code>constructor()</code> 中注入 <code>Logger</code> 服務。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"da95k0dasaps853zwn0y4effo\">在這裡，<code>constructor()</code> 指定了 <code>Logger</code> 的型別，並把 <code>Logger</code> 的實例儲存在名叫 <code>logger</code> 的私有欄位中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dqgoby36vmc1k63gzhrsfjbzr\">下列程式碼具有 <code>Logger</code> 服務和兩個版本的 <code>HeroService</code>。<code>HeroService</code> 的第一個版本不依賴於 <code>Logger</code> 服務。修改後的第二個版本依賴於 <code>Logger</code> 服務。</p>\n<code-tabs>\n\n  <code-pane header=\"src/app/heroes/hero.service (v2)\" path=\"dependency-injection/src/app/heroes/hero.service.2.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HEROES } from './mock-heroes';\nimport { Logger } from '../logger.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor(private logger: Logger) {  }\n\n  getHeroes() {\n    this.logger.log('Getting heroes ...');\n    return HEROES;\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/hero.service (v1)\" path=\"dependency-injection/src/app/heroes/hero.service.1.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n  getHeroes() { return HEROES; }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/logger.service\" path=\"dependency-injection/src/app/logger.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class Logger {\n  logs: string[] = []; // capture logs for testing\n\n  log(message: string) {\n    this.logs.push(message);\n    console.log(message);\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6xz5qs8vghivu327gppq57uwe\">在這個例子中，<code>getHeroes()</code> 方法在獲取英雄時就會藉助 <code>Logger</code> 記錄一條訊息。</p>\n<h2 id=\"whats-next\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"407r2fj2mi5kvg7imj9zdcpe\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dckjdss2sblal68pr66mt46q\"><a href=\"guide/dependency-injection-providers\">如何在 DI 中設定依賴項</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4rxwv5s58e7if211dhiiy4ng3\"><a href=\"guide/dependency-injection-providers#configuring-dependency-providers\">如何使用 <code>InjectionTokens</code> 提供和注入服務/類之外的值</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gv65k67y6jmm88mzefenhg2y\"><a href=\"guide/dependency-injection-in-action\">依賴注入實戰</a></li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：Tue Aug 02 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/dependency-injection\n - guide/dependency-injection-overview\n - tutorial/first-app/first-app-lesson-09\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient\n - api/core/Injectable\n - cli\n - guide/creating-injectable-service#creating-an-injectable-service\n - guide/creating-injectable-service#creating-an-injectable-service-1\n - guide/creating-injectable-service#injecting-services\n - guide/creating-injectable-service#injecting-services-in-other-services\n - guide/creating-injectable-service#service-examples\n - guide/creating-injectable-service#whats-next\n - guide/dependency-injection-in-action\n - guide/dependency-injection-providers\n - guide/dependency-injection-providers#configuring-dependency-providers\n-->"}
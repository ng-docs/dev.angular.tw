{"id":"guide/forms","title":"建立樣板驅動表單","contents":"<div class=\"content\">\n  <h1 id=\"building-a-template-driven-form\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3fuzu4ybjn0yvvwiv7dhcoaz\">建立樣板驅動表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#building-a-template-driven-form\"><i class=\"material-icons\">link</i></a></h1>\n<p><a id=\"template-driven\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nwzk55wfpncjvooa2cta8u9s\">本教程會向你展示如何建立樣板驅動的表單。表單中的控制元件元素繫結到具有輸入驗證功能的資料屬性。輸入驗證有助於保持資料的完整性，而樣式可以改善使用者體驗。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hqgrp93f8b97en0ibkb86oqr\">當在樣板中進行更改時，樣板驅動表單會使用<a href=\"guide/architecture-components#data-binding\" title=\"介紹 2 路數據繫結\">雙向資料繫結</a>來更新元件中的資料模型，反之亦然。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1b81smqg97y3o1tobj8c5g9a\">Angular 支援兩種互動式表單的設計方法。你可以使用 Angular 中的<a href=\"guide/glossary#template\" title=\"樣板術語的定義\">樣板語法和指令</a>中的表單專用指令建立表單。本教程講解了這些用於編寫樣板的指令和技巧。你還可以使用回應式或模型驅動的方式來建立表單。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhgqepiqstaj5tmmsp3vthq2i\">樣板驅動表單適用於小型或簡單的表單，而回應式表單則更具伸縮性，適用於複雜表單。要比較這兩種方法，參閱<a href=\"guide/forms-overview\" title=\"Angular 表單概述\">『表單簡介』</a></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8i5qnttb1b36j2y1h46b1xthc\">你可以用 Angular 樣板來建立各種表單，比如登入表單、聯絡人表單和幾乎所有的業務表單。你可以創造性地對控制元件進行佈局並把它們繫結到物件模型的資料上。你可以指定驗證規則並顯示驗證錯誤，根據條件啟用或停用特定控制元件，觸發內建的視覺反饋等等。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9y6t32wydp6ng3kx2llfuh03\">本教程向你展示瞭如何建立一個簡化的表單，例如<a href=\"tutorial\" title=\"英雄之旅\">《英雄之旅》教程</a>中的表單來講解這些技術。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b4zgs4vjky5xl902frh11hfw\">執行或下載範例應用：<live-example></live-example>。</p>\n</div>\n<h2 id=\"objectives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbta8klpv23x9gfh4twoy80po\">目標<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#objectives\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"67q8gx9fp6qh3qdmcm8hdr0zp\">本教程將教你如何執行以下操作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fr09aysyztgh5ibb4atppiua\">使用元件和樣板建立一個 Angular 表單</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxnjr1khynkmnh6mx8mi6y3tu\">使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 建立雙向資料繫結，以便讀寫輸入控制元件的值</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5el3kyn56j3e37s36llo1n0id\">使用跟蹤控制元件狀態的特殊 CSS 類來提供視覺反饋</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e85s4ximqozf9pkd3oqrngt9\">向用戶顯示驗證錯誤，並根據表單狀態有條件地允許來自表單控制元件的輸入</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1580hog8pyylwqe2sov8otgcn\"><a href=\"guide/template-reference-variables\">使用樣板引用變數</a>在 HTML 元素之間共享訊息</li>\n</ul>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59n6i52gq0bspd5uhycuexzzw\">在進一步研究樣板驅動表單之前，你應該對下列內容有一個基本的瞭解。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hvl8rjzxrmac41qpao60jlv6\"><a href=\"https://www.typescriptlang.org/\" title=\"TypeScript 語言\">TypeScript</a>和 HTML5 程式設計</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"231u6redz2hxq6aoj944xbmky\">Angular 的應用設計基礎，就像<a href=\"guide/architecture\" title=\"Angular 概念簡介。\">Angular Concepts 中</a>描述的那樣</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76vf6arrw2c4km5qxllzfvegv\"><a href=\"guide/template-syntax\" title=\"樣板語法指南\">Angular 樣板語法</a>的基礎知識</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mhk43enn2xjxc67dcp1z86c\"><a href=\"guide/forms-overview\" title=\"Angular 表單概述\">『表單簡介』</a>中提供的表單設計概念</li>\n</ul>\n<p><a id=\"intro\"></a></p>\n<h2 id=\"build-a-template-driven-form\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3k9tr9llxno5m57dbazt20clq\">建立一個樣板驅動表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#build-a-template-driven-form\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44vvhz68o4et0wrjjxj42oe7l\">樣板驅動表單依賴於 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 定義的指令。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\">指令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mao242zqvgm4r63ntzdafvpz\">將附加表單元素中的值更改與資料模型中的更改相調和，使您能夠透過輸入驗證和錯誤處理回應使用者輸入。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cph2byqqfpwylu2tj2dgd0mhv\">建立一個頂層\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>實例，並將其繫結到一個\n<code>&lt;form&gt;</code>元素上，以跟蹤聚合表單值和驗證狀態。一旦匯入了\n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>，此指令將預設在所有\n<code>&lt;form&gt;</code>標記上啟用，你無需新增特殊選擇器。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/NgModelGroup\" class=\"code-anchor\">NgModelGroup</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tkiamrn67me4dlmioamv81qn\">建立 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的實例並將其繫結到 DOM 元素。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"the-sample-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hh4v6xd8nm3hoqloiwcwuhb\">範例應用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#the-sample-application\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9brdhonbdyjbcsrcxjzab7ypo\"><em>英雄僱傭管理局</em>使用本指南中的範例表單來維護英雄的個人訊息。畢竟英雄也要工作啊。這個表單有助於該機構將正確的英雄與正確的危機對應起來。</p>\n<div class=\"lightbox\">\n<img alt=\"Clean Form\" src=\"generated/images/guide/forms/hero-form-1.png\" width=\"479\" height=\"339\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cebde0nqrktwft27rscpku2ax\">該表單突出了一些易於使用的設計屬性。比如，這兩個必填欄位的左邊是綠色條，以便讓它們醒目。這些欄位都有初始值，所以表單是有效的，並且 <strong>Submit</strong> 按鈕也是啟用的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfcbtl3kulnfv0z33b4hdbm68\">使用此表單會向你展示：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bh2bt4wmi22i2h6doxjwgue8\">如何包含驗證邏輯</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bixx62lxf0w9qjboc7sf5dyuw\">如何使用標準 CSS 自定義外觀表現</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehjj3oonxnl6ro4t26u1x2bh\">如何處理錯誤條件以確保輸入的有效性</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8h8jljhvz56f7cafv1q1uou5n\">如果使用者刪除了英雄的名字，那麼表單就會失效。該應用會檢測已更改的狀態，並以醒目的樣式顯示驗證錯誤。此外，<strong>Submit</strong> 按鈕會被停用，輸入控制元件左側的『必填』欄也會從綠色變為紅色。</p>\n<div class=\"lightbox\">\n<img alt=\"Invalid, Name Required\" src=\"generated/images/guide/forms/hero-form-2.png\" width=\"465\" height=\"402\">\n</div>\n<h3 id=\"step-overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99v1hniqe0mlpyv2m4o7pih2e\">步驟概述<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#step-overview\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jhraqoc1djb6oru04lf9occq\">在本教程中，你將使用以下步驟將一個範例表單繫結到資料並處理使用者輸入。</p>\n<ol>\n<li>Build the basic form.\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"l3jmvado0w42l78o18d7ha47\">定義一個範例資料模型</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsdndll2plrqi6zae01uxm7j9\">包括必需的基礎設施，比如 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code></li>\n</ul>\n</li>\n<li>Bind form controls to data properties using the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive and two-way data-binding syntax.\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pw2aix5m2djda3h2dl42x63q\">檢查 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 如何使用 CSS 類報告控制元件狀態</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33jfld9y3zdnhxs3bou0mdgrw\">為控制元件命名，以便讓 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 可以訪問它們</li>\n</ul>\n</li>\n<li>Track input validity and control status using <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>.\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"502f38bzcwmxhgm8opqt7lu13\">新增自定義 CSS 來根據狀態提供視覺化反饋</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4satvmd3n0bfv24xxn1q5i5iy\">顯示和隱藏驗證錯誤訊息</li>\n</ul>\n</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lcywk4czuf99t7bljz8varfr\">透過新增到模型資料來回應原生 HTML 按鈕的單擊事件。</li>\n<li>Handle form submission using the <a href=\"api/forms/NgForm#properties\"><code>ngSubmit</code></a> output property of the form.\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cpn6sbdl3cn295ic9zh06hu8\">在表單生效之前，先停用 <strong>Submit</strong> 按鈕</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0r8w6046lw6rdd5hjw063jir\">在送出完成後，把已完成的表單替換成頁面上不同的內容</li>\n</ul>\n</li>\n</ol>\n<p><a id=\"step1\"></a></p>\n<h2 id=\"build-the-form\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpzl3zrxahvo3xoi5zs7vatyk\">建立表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#build-the-form\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mnbppz1ad3dtv1qx31sdbvu\">你可以根據這裡提供的程式碼從頭建立範例應用，也可以檢視 <live-example></live-example>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"digkowoilafa9szwqnoefay17\">這裡提供的範例應用會建立一個 <code>Hero</code> 類，用於定義表單中所反映的資料模型。</p>\n<code-example header=\"src/app/hero.ts\" language=\"typescript\" path=\"forms/src/app/hero.ts\">\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nl40va5pmrgh1xu1l96gxoje\">該表單的佈局和細節是在 <code>HeroFormComponent</code> 類別中定義的。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.ts (v1)\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"v1\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-form',\n  templateUrl: './hero-form.component.html',\n  styleUrls: ['./hero-form.component.css']\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  <a href=\"api/core/model\" class=\"code-anchor\">model</a> = new Hero(18, 'Dr. IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aq85mi5e7v4y79qkpsknmoo9v\">該組件的 <code>selector</code> 值為 『app-hero-form』，意味著你可以用 <code>&lt;app-hero-form&gt;</code> 標籤把這個表單放到父樣板中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jpggjma4monu41atyw4kpexo\">下面的程式碼會建立一個新的 hero 實例，以便讓初始的表單顯示一個範例英雄。</p>\n<code-example language=\"typescript\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"SkyDog\">\nconst myHero =  new Hero(42, 'SkyDog',\n                       'Fetch any object at any distance',\n                       'Leslie Rollover');\nconsole.log('My hero is called ' + myHero.name); // \"My hero is called SkyDog\"\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"domym39qe4sn1n1d1u4nyzg1i\">這個示範使用虛擬資料作為\n<code><a href=\"api/core/model\" class=\"code-anchor\">model</a></code>和\n<code>powers</code>。在真實應用中，你會注入一個資料服務來獲取和儲存真實資料，或將這些屬性暴露為輸入和輸出。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejovklqnqhadyes5nk4jj5rdb\">該應用啟用了表單功能，並註冊了已建立的表單元件。</p>\n<code-example header=\"src/app/app.module.ts\" language=\"typescript\" path=\"forms/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { HeroFormComponent } from './hero-form/hero-form.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  providers: [],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bq8twbtym2jh6c48pbv61apmu\">該表單顯示在根元件樣板定義的應用佈局中。</p>\n<code-example header=\"src/app/app.component.html\" language=\"html\" path=\"forms/src/app/app.component.html\">\n&lt;app-hero-form&gt;&lt;/app-hero-form&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pzqak15bwrxpcdyldrhsudc7\">初始樣板定義了一個帶有兩個表單組和一個送出按鈕的表單佈局。表單組對應於 Hero 資料模型的兩個屬性：name 和 alterEgo。每個組都有一個標籤和一個使用者輸入框。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5z6ews0olaur3qhv4gup2sivf\"><strong>Name</strong> <code>&lt;input&gt;</code> 控制元件元素中包含了 HTML5 的 <code>required</code> 屬性</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76gv9nqazcam5uvy4kgpxpnfl\"><strong>Alter Ego</strong> <code>&lt;input&gt;</code> 沒有控制元件元素，因為 <code>alterEgo</code> 是可選的</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qage3tudknbdb8sh10i90nyi\"><strong>Submit</strong> 按鈕裡面有一些用於樣式化的類。此時，表單佈局全都是純 HTML5，沒有繫結或指令。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ak528gic4ip83m9gsgskafql\">範例表單使用的是 <a href=\"https://getbootstrap.com/css\">Twitter Bootstrap 中的</a>一些樣式類別：<code>container</code>，<code>form-group</code>，<code>form-control</code> 和 <code>btn</code>。要使用這些樣式，就要在該應用的樣式表中匯入該函式庫。</p>\n<code-example header=\"src/styles.css\" path=\"forms/src/styles.1.css\">\n@import url('https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css');\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6e0h1fdexjfusejjy3xr20lqd\">這份表單讓英雄申請人從管理局批准過的固定清單中選出一項超能力。預定義 <code>powers</code> 清單是資料模型的一部分，在 <code>HeroFormComponent</code> 內部維護。Angular 的<a href=\"api/common/NgForOf\" title=\"API 參考\">NgForOf 指令</a>會遍歷這些資料值，以填充這個 <code>&lt;select&gt;</code> 元素。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (powers)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"powers\">\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n  &lt;select class=\"form-control\" id=\"power\" required&gt;\n    &lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\"&gt;{{pow}}&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4i8d50q3fn0gpe59y6xwhw12c\">如果你現在正在執行該應用，你會看到選擇控制元件中的超能力清單。由於尚未將這些 input 元素繫結到資料值或事件，因此它們仍然是空白的，沒有任何行為。</p>\n<div class=\"lightbox\">\n<img alt=\"Early form with no binding\" src=\"generated/images/guide/forms/hero-form-3.png\" width=\"473\" height=\"294\">\n</div>\n<p><a id=\"ngModel\"></a></p>\n<h2 id=\"bind-input-controls-to-data-properties\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lwn7rws98rd3dr5b2y0esivn\">把輸入控制元件繫結到資料屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#bind-input-controls-to-data-properties\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"civljzlmnxpq68ap7qfxmaybc\">下一步是使用雙向資料繫結把輸入控制元件繫結到相應的 <code>Hero</code> 屬性，這樣它們就可以透過更新資料模型來回應使用者的輸入，並透過更新顯示來回應資料中的程式化變更。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a748a5rn2gh3u4655h5swu7id\">該 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令是由 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 宣告的，它能讓你把樣板驅動表單中的控制元件繫結到資料模型中的屬性。當你使用雙向資料繫結的語法 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 引入該指令時，Angular 就可以跟蹤控制元件的值和使用者互動，並保持檢視與模型的同步。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ygoa61yubyp5iagtrt5ue0d1\">編輯樣板 <code>hero-form.component.html</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ca2xw03y6oscp201zsi5ds4tx\">找到 <strong>Name</strong> 標籤旁邊的 <code>&lt;input&gt;</code> 標記。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1gzy5350w2mmotvf0atscezf\">使用雙向資料繫結語法 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"...\"</code> 新增 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令。</li>\n</ol>\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"ngModelName-1\">\n&lt;input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"&gt;\nTODO: remove this: {{model.name}}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lh5ovbvisjbl2v54gvwnt5ka\">這個例子中在每個 input 標記後面都有一個臨時的診斷內嵌 <code>{{model.name}}</code>，以顯示相應屬性的當前資料值。本提醒是為了讓你在觀察完這個雙向資料繫結後刪除這些診斷行。</p>\n</div>\n<p><a id=\"ngForm\"></a></p>\n<h3 id=\"access-the-overall-form-status\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vada38t3xgftfl308g06so9r\">訪問表單的整體狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#access-the-overall-form-status\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmiacrekad2jj33rgmwa8l2wm\">當你匯入了 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 時，Angular 會自動為樣板中的 <code>&lt;form&gt;</code> 標籤建立並附加一個 <a href=\"api/forms/NgForm\" title=\"NgForm 的 API 參考\">NgForm</a> 指令。（因為 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 定義了一個能對應 <code>&lt;form&gt;</code> 元素的選擇器 <code>form</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pk27n25wuw0zkxypewvtynqe\">要訪問 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 和表單的整體狀態，<a href=\"guide/template-reference-variables\">就要宣告一個樣板引用變數</a>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ygoa61yubyp5iagtrt5ue0d1\">編輯樣板 <code>hero-form.component.html</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wl9yqbv5j60jlcwk6ygtp2cd\">為 <code>&lt;form&gt;</code> 標籤新增樣板引用變數 <code>#heroForm</code>，並把它的值設定如下。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"template-variable\">\n&lt;form #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b33kp0pvwi57jg017b5rn2z9\">樣板變數 <code>heroForm</code> 現在是對 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令實例的引用，該指令實例管理整個表單。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7q61go649qd15ih8wdez0tld\">執行該應用。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dcxep43zn2shqxw8t174y4daz\">開始在 <strong>Name</strong> 輸入框中輸入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ct15m3d9ixqmujs7ekxud8f6p\">在新增和刪除字元時，你可以看到它們從資料模型中出現和消失。比如：</p>\n  <div class=\"lightbox\">\n  <img alt=\"ngModel in action\" src=\"generated/images/guide/forms/ng-model-in-action.png\" width=\"500\" height=\"74\">\n  </div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dctemklx35jtajzidt90yu91t\">用來顯示內嵌的診斷行證明了這些值確實從輸入框流向了模型，然後再回傳。</p>\n</li>\n</ol>\n<h3 id=\"naming-control-elements\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e43zm82zuoztqlvqr7p4xzb88\">為控制元件元素命名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#naming-control-elements\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2oc6og2kn57y49bif442x079t\">在元素上使用 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 時，必須為該元素定義一個 <code>name</code> 屬性。Angular 會用這個指定的名字來把這個元素註冊到父 <code>&lt;form&gt;</code> 元素上的 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"732812wnlai51hapoqfno02zy\">這個例子中為 <code>&lt;input&gt;</code> 元素新增了一個 <code>name</code> 屬性，並把它的值設定為 『name』，用來表示英雄的名字。任何唯一的值都可以用，但最好用描述性的名稱。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bn24pv83eoguwtr6f9eolne2p\">為<strong>Alter Ego</strong>和<strong>Hero Power</strong>新增類似的 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 繫結和 <code>name</code> 屬性。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7j149d3l4awfh9tbhrbkq576s\">你現在可以移除顯示內嵌的診斷訊息了。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8062bp0lhbi354nbavufu7edn\">為了確認雙向資料繫結適用於整個英雄模型，請向元件的樣板頂部新增一個使用 <a href=\"api/common/JsonPipe\"><code>json</code></a> 通道的新文字繫結，這會將資料序列化為字串。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enaftooo3vfymyrlh5q6l5p8t\">表單樣板修改完畢後，應如下所示：</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"ngModel-2\">\n{{ <a href=\"api/core/model\" class=\"code-anchor\">model</a> | json }}\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n  &lt;input type=\"text\" class=\"form-control\" id=\"name\"\n         required\n         [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"&gt;\n&lt;/div&gt;\n\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"alterEgo\"&gt;Alter Ego&lt;/label&gt;\n  &lt;input type=\"text\"  class=\"form-control\" id=\"alterEgo\"\n         [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.alterEgo\" name=\"alterEgo\"&gt;\n&lt;/div&gt;\n\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n  &lt;select class=\"form-control\"  id=\"power\"\n          required\n          [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.power\" name=\"power\"&gt;\n    &lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\"&gt;{{pow}}&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hzrd0rvsd7n6l89m9yov5axj\">注意，每個 <code>&lt;input&gt;</code> 元素都有一個 <code>id</code> 屬性。<code>&lt;label&gt;</code> 元素的 <code>for</code> 屬性用它來把標籤對應到輸入控制元件。這是一個<a href=\"https://developer.mozilla.org/docs/Web/HTML/Element/label\">標準的 HTML 屬性</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mbd9znuvilypqd4hy82l0b2i\">每個 <code>&lt;input&gt;</code> 元素都有一個必需的 <code>name</code> 屬性，Angular 用它來登錄檔單中的控制元件。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98001xkgwa7zg8w0tk36cmbh5\">如果你現在執行該應用並更改英雄模型的每個屬性，該表單可能會顯示如下：</p>\n<div class=\"lightbox\">\n<img alt=\"ngModel in action\" src=\"generated/images/guide/forms/ng-model-in-action-2.png\" width=\"515\" height=\"377\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6955266g5miofip51w3q4a7m2\">透過表單頂部的診斷行可以確認所有的更改都已反映在模型中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7kidxfe98122mwssb8dhq1a2\">當你觀察到效果後，可以刪除\n<code>{{ <a href=\"api/core/model\" class=\"code-anchor\">model</a> | json }}</code>的文字繫結。</p>\n</li>\n</ol>\n<h2 id=\"track-form-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9pkn9juma7uih6rjgzp0mm7px\">跟蹤表單狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#track-form-states\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"basmbc4mz35ytbutmjovbjg9l\">送出表單後，Angular 會將 <code>ng-submitted</code> 類應用於 <code>form</code> 元素。此類可用於在送出後更改表單的樣式。</p>\n<h2 id=\"track-control-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7az8cffjzyya7ju4xvvfsjfbk\">跟蹤控制元件狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#track-control-states\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ume7d5j3gg8gamz2s1x1ye7z\">將 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令新增到某個控制元件上時也會將一些描述其狀態的類別名稱新增上去。這些類可用於根據控制元件的狀態更改控制元件的樣式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"are1u8ddj4osj8ndgsc1epcbz\">下表描述了 Angular 根據控制元件狀態應用的類別名稱。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awqprnmpryhcwruj8dmrii1j1\">狀態</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eb6b9ucveoec82c8uwvax2wg9\">如果為真則新增類</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1odhorb8p2axsx3h5b31545ax\">如果為假則新增類</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b69hd9f0wucxugr06iu7c7obo\">該控制元件已被訪問過。</td>\n<td align=\"left\"><code>ng-touched</code></td>\n<td align=\"left\"><code>ng-untouched</code></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bip73wncv21xzonynv0sah11d\">該控制元件的值已更改。</td>\n<td align=\"left\"><code>ng-dirty</code></td>\n<td align=\"left\"><code>ng-pristine</code></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7xfn3yusrxhqovjok2pw82b5\">該控制元件的值是有效的。</td>\n<td align=\"left\"><code>ng-valid</code></td>\n<td align=\"left\"><code>ng-invalid</code></td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4cgg3gzft0wlvdgeqpzrqlw0\">Angular 還會在送出時將 <code>ng-submitted</code> 類應用於 <code>form</code> 元素，但不會應用於此 <code>form</code> 元素中的控制元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5d2v8i3jybjqd645mze022yq4\">你可以用這些 CSS 類來根據控制元件的狀態定義其樣式。</p>\n<h3 id=\"observe-control-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91dh3f4q9t3laz23n468rjygt\">觀察控制元件狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#observe-control-states\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kzk92xyyl7utqlnii9ha00am\">要想知道框架是如何新增和移除這些類別的，請開啟瀏覽器的開發者工具，檢查代表英雄名字的 <code>&lt;input&gt;</code>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nynf8snn5kfz64sjl1j6u2mz\">使用瀏覽器的開發者工具，找到與 『<strong>Name</strong>』 輸入框對應的 <code>&lt;input&gt;</code> 元素。除了 『form-control』 類之外，你還可以看到該元素有多個 CSS 類。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9k94bt1wuy3tz8zhsrw6cdgwq\">當你第一次啟動它的時候，這些類表明它是一個有效的值，該值在初始化或重置之後還沒有改變過，並且在該控制元件自初始化或重置後也沒有被訪問過。</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;input … class=\"form-control ng-untouched ng-pristine ng-valid\" …&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0mx4rrp1v78kyjf69750deko\"><strong>在 Name</strong> <code>&lt;input&gt;</code> 框中執行以下操作，看看會出現哪些類。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8muuku19jj26wryxtfgyw2xi2\">檢視，但不要碰它。這些類表明它沒有被碰過、還是最初的值，並且有效。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7i3k82vkdmi9biasr8g5t1q2o\">在 <strong>Name</strong> 框內單擊，然後單擊它外部。該控制元件現在已被訪問過，該元素具有 <code>ng-touched</code> 類，取代了 <code>ng-untouched</code> 類。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a02z9ry9cdmw7ecb3kagban82\">在名字的末尾新增斜槓。現在它被碰過，而且是髒的（變化過）。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71b83pfjn5fs1omsp4nd1or8g\">刪掉這個名字。這會使該值無效，所以 <code>ng-invalid</code> 類會取代 <code>ng-valid</code> 類。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"create-visual-feedback-for-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9st4in4d1tmazg1056g5fb3e1\">為狀態建立視覺反饋<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#create-visual-feedback-for-states\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czznd4u8wpbjscwttk9vmtgou\">注意 <code>ng-valid</code> / <code>ng-invalid</code> 這兩個類，因為你想在值無效時發出強烈的視覺訊號。你還要標記必填欄位。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yxlo51n4aasvldl44la0spdg\">你可以在輸入框的左側用彩條標記必填欄位和無效資料：</p>\n<div class=\"lightbox\">\n<img alt=\"Invalid Form\" src=\"generated/images/guide/forms/validity-required-indicator.png\" width=\"600\" height=\"171\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxjds5xmhcz8bpu894h56giti\">要想用這種方式修改外觀，請執行以下步驟。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9aolp4p1ftyjncolaqfnlj8bo\">為 <code>ng-*</code> CSS 類新增一些定義。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4yn8vfzmt934u43jr3y83gofr\">把這些類別定義新增到一個新的 <code>forms.css</code> 檔案中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkxgnic0w9mcuxbi7gpg1ye2v\">把這個新檔案新增到專案中，作為 <code>index.html</code> 的兄弟：</p>\n<code-example header=\"src/assets/forms.css\" language=\"css\" path=\"forms/src/assets/forms.css\">\n.ng-valid[required], .ng-valid.required  {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442; /* red */\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wnqpl109f4xc2ytgmvj02rk3\">在 <code>index.html</code> 檔案中，更新 <code>&lt;head&gt;</code> 標籤以包含新的樣式表。</p>\n<code-example header=\"src/index.html (styles)\" path=\"forms/src/index.html\" region=\"styles\">\n&lt;link rel=\"stylesheet\" href=\"assets/forms.css\"&gt;\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"show-and-hide-validation-error-messages\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bx9vr55xoukmze8vkmrpf4d7o\">顯示和隱藏驗證錯誤訊息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#show-and-hide-validation-error-messages\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lut0xn02wlq9ig60laeexlps\"><strong>Name</strong> 輸入框是必填的，清除它就會把彩條變成紅色。這表明有些東西是錯的，但是使用者並不知道要怎麼做或該做什麼。你可以透過檢視和回應控制元件的狀態來提供有用的訊息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wpjoykuxssmmx59ff2hgnxy5\">當用戶刪除該名字時，該表單應如下所示：</p>\n<div class=\"lightbox\">\n<img alt=\"Name required\" src=\"generated/images/guide/forms/name-required-error.png\" width=\"400\" height=\"108\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjki4tc3ga50q7i4rtsjem38q\"><strong>Hero Power</strong> 選擇框也是必填的，但它不需要這樣的錯誤處理，因為選擇框已經把選擇限制在有效值範圍內。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ui7v36h210vqh3fwqye8qnaq\">要在適當的時候定義和顯示錯誤訊息，請執行以下步驟。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkpejr7gag2gv9c97poxw2fa\">使用樣板引用變數擴充套件 <code>&lt;input&gt;</code> 標籤，你可以用來從樣板中訪問輸入框的 Angular 控制元件。在這個例子中，該變數是 <code>#name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8thid77fzyq0a3meethim6fii\">樣板引用變數（<code>#name</code>）設定為 <code>\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>，因為 \"ngModel\" 是 <a href=\"api/core/Directive#exportAs\"><code>NgModel.exportAs</code></a> 屬性的值。這個屬性告訴 Angular 如何把引用變數和指令連結起來。</p>\n</div>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6z63ibgsvoo9cehl7ksaerca\">新增一個包含合適錯誤訊息 <code>&lt;div&gt;</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cm4tgdzwjqzeheszhiw8d2cyf\">透過把 <code>name</code> 控制元件的屬性繫結到 <code>&lt;div&gt;</code> 元素的 <code>hidden</code> 屬性來顯示或隱藏錯誤訊息。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (hidden-error-msg)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"hidden-error-msg\">\n&lt;div [hidden]=\"name.valid || name.pristine\"\n     class=\"alert alert-danger\"&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3matfej6dirm03bva76nytiy9\">為 <code>name</code> 輸入框新增一個有條件的錯誤訊息，如下例所示。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"name-with-error-msg\">\n&lt;label for=\"name\"&gt;Name&lt;/label&gt;\n&lt;input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"\n       #name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"&gt;\n&lt;div [hidden]=\"name.valid || name.pristine\"\n     class=\"alert alert-danger\"&gt;\n  Name is required\n&lt;/div&gt;\n\n</code-example>\n</li>\n</ol>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efcp5kvuklye8agytwc9w789g\">關於 \"pristine\"（原始）狀態的說明</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mvt3o4dvl1bkty55zhjd073e\">在這個例子中，當控制元件是有效的（valid）或者是<em>原始的</em>（pristine）時，你會隱藏這些訊息。原始表示該使用者在此表單中顯示的值尚未更改過。如果你忽略了 <code>pristine</code> 狀態，那麼只有當值有效時才會隱藏這些訊息。如果你把一個新的（空白）英雄或一個無效的英雄傳給這個元件，你會立刻看到錯誤訊息，而這時候你還沒有做過任何事情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwgh377mrujj9lrtgr4tird10\">你可能希望只有在使用者做出無效更改時，才顯示該訊息。因此當 <code>pristine</code> 狀態時，隱藏這條訊息就可以滿足這個目標。當你在下一步中為表單新增一個新的英雄時，就會看到這個選擇有多重要。</p>\n</div>\n<h2 id=\"add-a-new-hero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8arpbx6ig96s6l5n6p1iw2fr4\">新增一個新英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#add-a-new-hero\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekso0ed8usgolzxjhthdi8rcz\">本練習透過新增模型資料，展示了如何回應原生 HTML 按鈕單擊事件。要讓表單使用者新增一個新的英雄，就要新增一個能回應 click 事件的 <strong>New Hero</strong> 按鈕。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"424nf423ad3tp9bidg7egex5j\">在樣板中，把 『New Hero』 這個 <code>&lt;button&gt;</code> 元素放在表單底部。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vdddkbkwbtjhsv08nvqhh37u\">在元件檔案中，把建立英雄的方法新增到英雄資料模型中。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.ts (New Hero method)\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"new-hero\">\nnewHero() {\n  this.model = new Hero(42, '', '');\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vue2umqdv2p2plg6d8wszyz5\">把按鈕的 click 事件繫結到一個建立英雄的方法 <code>newHero()</code> 上。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (New Hero button)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"new-hero-button-no-reset\">\n&lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero()\"&gt;New Hero&lt;/button&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rj4wl516x77l9yz2l9ouaaka\">再次執行該應用，單擊 <strong>New Hero</strong> 按鈕。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exxyou1asbtp68pqq8eqjhkrg\">表單會清空，輸入框左側的<em>必填</em>欄會顯示紅色，說明 <code>name</code> 和 <code>power</code> 屬性無效。請注意，錯誤訊息是隱藏的。這是因為表單處於原始狀態。你還沒有改過任何東西。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmv67qn7filu2sizdbxtvl4y5\">輸入一個名字，然後再次點選 <strong>New Hero</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ed9138yys124iaenw504r0ppt\">現在，該應用會顯示一條錯誤訊息 <code>Name is required</code>，因為該輸入框不再是原始狀態。表單會記住你在單擊 <strong>New Hero</strong> 之前輸入過一個名字。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4892ece20w7k1fedat39qsxco\">要恢復表單控制元件的原始狀態，可以在呼叫 <code>newHero()</code> 方法之後強制呼叫表單的 <code>reset()</code> 方法以清除所有標誌。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (Reset the form)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"new-hero-button-form-reset\">\n&lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero(); heroForm.reset()\"&gt;New Hero&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7k2afhde0wwun0su93rbz0z8t\">現在單擊 <strong>New Hero</strong> 會重置表單及其控制元件標誌。</p>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1lm2hi9tqm2idolvzur4u4xo\">關於使用事件繫結監聽 DOM 事件和更新相應元件屬性的更多訊息，參閱<a href=\"guide/user-input\">『使用者輸入』指南。</a>。</p>\n</div>\n<h2 id=\"submit-the-form-with-ngsubmit\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv6p893athd67acerrmvip3eq\">使用 <code>ngSubmit</code> 送出表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#submit-the-form-with-ngsubmit\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zmfr2ypg409is3mmuodl1vos\">使用者應該可以在填寫之後送出這個表單。表單底部的 <strong>Submit</strong> 按鈕本身沒有任何作用，但由於它的型別（<code>type=\"submit\"</code>），它會觸發一個表單送出事件。要回應此事件，請執行以下步驟。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9w28u0rq1vt95q31sa6x3c8z6\">把表單的 <a href=\"api/forms/NgForm#properties\"><code>ngSubmit</code></a> 事件屬性繫結到一個 hero-form 元件的 <code>onSubmit()</code> 方法中。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (ngSubmit)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"ngSubmit\">\n&lt;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e1sm5wqgj46i5xwzzbubv5w9\">使用樣板引用變數 <code>#heroForm</code> 訪問包含 <strong>Submit</strong> 按鈕的表單，並建立一個事件繫結。你可以把表示它整體有效性的 form 屬性繫結到 <strong>Submit</strong> 按鈕的 <code>disabled</code> 屬性上。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (submit-button)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"submit-button\">\n&lt;button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\"&gt;Submit&lt;/button&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehattcf4462hmajv5j9szu4tq\">執行該應用。注意，該按鈕已啟用 - 雖然它還沒有做任何有用的事情。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93oq1j45nizyd216k9txm5u5k\">刪除<strong>名稱</strong>值。這違反了『必需』規則，因此會顯示錯誤訊息，並注意它還會停用『<strong>送出』</strong>按鈕。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aocat8sxtmvlho4qpb7m418ma\">你不必把按鈕的啟用狀態明確地關聯表單的有效性上。當 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 在增強的表單元素上定義樣板引用變數時，會自動執行此操作，然後在按鈕控制元件中引用該變數。</p>\n</li>\n</ol>\n<h3 id=\"respond-to-form-submission\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agagi0nl54uhkths4l5vl28c5\">回應表單送出<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#respond-to-form-submission\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"73qxzpct5n7sonji1j9zr3dy3\">要展示對錶單送出的回應，你可以隱藏資料輸入區域並就地顯示其它內容。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2isp0lzr0yzqflb1u701i4qy5\">把整個表單包裹進一個 <code>&lt;div&gt;</code> 中並把它的 <code>hidden</code> 屬性繫結到 <code>HeroFormComponent.submitted</code> 屬性上。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"edit-div\">\n&lt;div [hidden]=\"submitted\"&gt;\n  &lt;h1&gt;Hero <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a>&lt;/h1&gt;\n  &lt;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n\n     &lt;!-- ... all of the form ... --&gt;\n\n  &lt;/form&gt;\n&lt;/div&gt;\n\n</code-example>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bd13qcf5le2unijthe7si0o2e\">主表單從一開始就是可見的，因為在送出之前，它的 <code>submitted</code> 屬性都是 false，正如 <code>HeroFormComponent</code> 中的這個片段所顯示的：</p>\n<code-example header=\"src/app/hero-form/hero-form.component.ts (submitted)\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"submitted\">\nsubmitted = false;\n\nonSubmit() { this.submitted = true; }\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eiiwv9eevu7fme9bkpcx0vip8\">點選 <strong>Submit</strong> 按鈕後，<code>submitted</code> 標誌就變為 <code>true</code>，表單就會消失。</p>\n</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dcj82wdwhho7cyrpxbmo2wo8\">要在表單處於已送出狀態時顯示其它內容，請在新的 <code>&lt;div&gt;</code> 套件裝器下新增以下 HTML。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"submitted\">\n&lt;div [hidden]=\"!submitted\"&gt;\n  &lt;h2&gt;You submitted the following:&lt;/h2&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Name&lt;/div&gt;\n    &lt;div class=\"col-xs-9\"&gt;{{ model.name }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Alter Ego&lt;/div&gt;\n    &lt;div class=\"col-xs-9\"&gt;{{ model.alterEgo }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Power&lt;/div&gt;\n    &lt;div class=\"col-xs-9\"&gt;{{ model.power }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;br&gt;\n  &lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\"&gt;Edit&lt;/button&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d283i95d8u72z8023jagdkgir\">這個 <code>&lt;div&gt;</code>（用於顯示帶內嵌繫結的只讀英雄）只在元件處於已送出狀態時才會出現。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvm5vsm02hl5xec0e7ufmndmn\">另外還顯示了一個 <em>Edit</em> 按鈕，它的 click 事件繫結到了一個清除 <code>submitted</code> 標誌的表示式。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfzdl44g2o1sjqmiqkkqhgt6l\">單擊 <em>Edit</em> 按鈕，將顯示切換回可編輯的表單。</p>\n</li>\n</ol>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\">總結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#summary\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egvcd7y7153ohh7p5qhziktcj\">本頁討論的 Angular 表單利用了下列框架屬性來支援資料修改，驗證等工作。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"i0lsr6icqqjn3x60r185xdd2\">一個 Angular HTML 表單樣板</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dxvivn5poooecf8hxapccdpb\">帶 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器的表單元件類</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cibs468wrfa1ceezmy2a65tjc\">繫結到 <code><a href=\"api/forms/NgForm#ngSubmit\" class=\"code-anchor\">NgForm.ngSubmit</a></code> 事件屬性來處理表單送出</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dpbubs74ill4ao7f815net1d\">樣板引用變數，比如 <code>#heroForm</code> 和 <code>#name</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ysk4god66zhvx8gcikbu4v1g\">雙向資料繫結的 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 語法</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ddu6atgveb4rbd1s33trgyke\"><code>name</code> 屬性的用途是驗證和表單元素的變更跟蹤</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5e2w2lvlmrqp21jdjlj4ka76\">輸入控制元件上的引用變數的 <code>valid</code> 屬性會表明控制元件是有效的還是應該顯示錯誤訊息</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyqo5tksuqk6d2mx36b79v81c\">用 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 的有效性來控制 <strong>Submit</strong> 按鈕的啟用狀態</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88pmrrh0zj4jnpgfve3mc8d0w\">自定義 CSS 類，向用戶提供有關無效控制元件的視覺反饋</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97xc6sghjhvyn1l9qy1j1pup3\">這裡是該應用最終版本的程式碼：</p>\n<code-tabs>\n    <code-pane header=\"hero-form/hero-form.component.ts\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"final\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-form',\n  templateUrl: './hero-form.component.html',\n  styleUrls: ['./hero-form.component.css']\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  <a href=\"api/core/model\" class=\"code-anchor\">model</a> = new Hero(18, 'Dr. IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n  newHero() {\n    this.model = new Hero(42, '', '');\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-form/hero-form.component.html\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"final\">\n&lt;div class=\"container\"&gt;\n  &lt;div [hidden]=\"submitted\"&gt;\n    &lt;h1&gt;Hero <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a>&lt;/h1&gt;\n    &lt;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"name\"\n               required\n               [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"\n               #name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"&gt;\n        &lt;div [hidden]=\"name.valid || name.pristine\"\n             class=\"alert alert-danger\"&gt;\n          Name is required\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"alterEgo\"&gt;Alter Ego&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"alterEgo\"\n               [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.alterEgo\" name=\"alterEgo\"&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n        &lt;select class=\"form-control\" id=\"power\"\n                required\n                [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.power\" name=\"power\"\n                #power=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"&gt;\n          &lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\"&gt;{{pow}}&lt;/option&gt;\n        &lt;/select&gt;\n        &lt;div [hidden]=\"power.valid || power.pristine\" class=\"alert alert-danger\"&gt;\n          Power is required\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\"&gt;Submit&lt;/button&gt;\n      &lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero(); heroForm.reset()\"&gt;New Hero&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/div&gt;\n\n  &lt;div [hidden]=\"!submitted\"&gt;\n    &lt;h2&gt;You submitted the following:&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Name&lt;/div&gt;\n      &lt;div class=\"col-xs-9\"&gt;{{ model.name }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Alter Ego&lt;/div&gt;\n      &lt;div class=\"col-xs-9\"&gt;{{ model.alterEgo }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Power&lt;/div&gt;\n      &lt;div class=\"col-xs-9\"&gt;{{ model.power }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\"&gt;Edit&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"hero.ts\" path=\"forms/src/app/hero.ts\">\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n\n\n</code-pane>\n    <code-pane header=\"app.module.ts\" path=\"forms/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { HeroFormComponent } from './hero-form/hero-form.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  providers: [],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"app.component.html\" path=\"forms/src/app/app.component.html\">\n&lt;app-hero-form&gt;&lt;/app-hero-form&gt;\n\n\n</code-pane>\n    <code-pane header=\"app.component.ts\" path=\"forms/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n\n</code-pane>\n    <code-pane header=\"main.ts\" path=\"forms/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .catch(err =&gt; console.error(err));\n\n\n</code-pane>\n    <code-pane header=\"forms.css\" path=\"forms/src/assets/forms.css\">\n.ng-valid[required], .ng-valid.required  {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442; /* red */\n}\n\n</code-pane>\n</code-tabs>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-components\n - guide/built-in-directives\n - guide/example-apps-list\n - guide/form-validation\n - guide/forms-overview\n - guide/glossary\n - guide/npm-packages\n - guide/reactive-forms\n - guide/typed-forms\n - tutorial\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/JsonPipe\n - api/common/NgFor\n - api/common/NgForOf\n - api/core/Component\n - api/core/Directive#exportAs\n - api/core/NgModule\n - api/core/model\n - api/forms/Form\n - api/forms/FormGroup\n - api/forms/FormsModule\n - api/forms/NgForm\n - api/forms/NgForm#ngSubmit\n - api/forms/NgForm#properties\n - api/forms/NgModel\n - api/forms/NgModelGroup\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - guide/architecture\n - guide/architecture-components#data-binding\n - guide/forms#access-the-overall-form-status\n - guide/forms#add-a-new-hero\n - guide/forms#bind-input-controls-to-data-properties\n - guide/forms#build-a-template-driven-form\n - guide/forms#build-the-form\n - guide/forms#building-a-template-driven-form\n - guide/forms#create-visual-feedback-for-states\n - guide/forms#naming-control-elements\n - guide/forms#objectives\n - guide/forms#observe-control-states\n - guide/forms#prerequisites\n - guide/forms#respond-to-form-submission\n - guide/forms#show-and-hide-validation-error-messages\n - guide/forms#step-overview\n - guide/forms#submit-the-form-with-ngsubmit\n - guide/forms#summary\n - guide/forms#the-sample-application\n - guide/forms#track-control-states\n - guide/forms#track-form-states\n - guide/forms-overview\n - guide/glossary#template\n - guide/template-reference-variables\n - guide/template-syntax\n - guide/user-input\n - tutorial/tour-of-heroes\n - https://developer.mozilla.org/docs/Web/HTML/Element/label\n - https://getbootstrap.com/css\n - https://www.typescriptlang.org/\n-->"}
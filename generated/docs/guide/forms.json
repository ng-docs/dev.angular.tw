{"id":"guide/forms","title":"构建模板驱动表单","contents":"<div class=\"content\">\n  <h1 id=\"building-a-template-driven-form\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3fuzu4ybjn0yvvwiv7dhcoaz\">构建模板驱动表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#building-a-template-driven-form\"><i class=\"material-icons\">link</i></a></h1>\n<p><a id=\"template-driven\"></a></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nwzk55wfpncjvooa2cta8u9s\">本教程会向你展示如何创建模板驱动的表单。表单中的控件元素绑定到具有输入验证功能的数据属性。输入验证有助于保持数据的完整性，而样式可以改善用户体验。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hqgrp93f8b97en0ibkb86oqr\">当在模板中进行更改时，模板驱动表单会使用<a href=\"guide/architecture-components#data-binding\" title=\"介绍 2 路数据绑定\">双向数据绑定</a>来更新组件中的数据模型，反之亦然。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1b81smqg97y3o1tobj8c5g9a\">Angular 支持两种交互式表单的设计方法。你可以使用 Angular 中的<a href=\"guide/glossary#template\" title=\"模板术语的定义\">模板语法和指令</a>中的表单专用指令构建表单。本教程讲解了这些用于编写模板的指令和技巧。你还可以使用响应式或模型驱动的方式来构建表单。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhgqepiqstaj5tmmsp3vthq2i\">模板驱动表单适用于小型或简单的表单，而响应式表单则更具伸缩性，适用于复杂表单。要比较这两种方法，参阅<a href=\"guide/forms-overview\" title=\"Angular 表单概述\">“表单简介”</a></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8i5qnttb1b36j2y1h46b1xthc\">你可以用 Angular 模板来构建各种表单，比如登录表单、联系人表单和几乎所有的业务表单。你可以创造性地对控件进行布局并把它们绑定到对象模型的数据上。你可以指定验证规则并显示验证错误，根据条件启用或禁用特定控件，触发内置的视觉反馈等等。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9y6t32wydp6ng3kx2llfuh03\">本教程向你展示了如何构建一个简化的表单，例如<a href=\"tutorial\" title=\"英雄之旅\">《英雄之旅》教程</a>中的表单来讲解这些技术。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3b4zgs4vjky5xl902frh11hfw\">运行或下载范例应用：<live-example></live-example>。</p>\n</div>\n<h2 id=\"objectives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbta8klpv23x9gfh4twoy80po\">目标<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#objectives\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"67q8gx9fp6qh3qdmcm8hdr0zp\">本教程将教你如何执行以下操作：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fr09aysyztgh5ibb4atppiua\">使用组件和模板构建一个 Angular 表单</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxnjr1khynkmnh6mx8mi6y3tu\">使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 创建双向数据绑定，以便读写输入控件的值</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5el3kyn56j3e37s36llo1n0id\">使用跟踪控件状态的特殊 CSS 类来提供视觉反馈</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e85s4ximqozf9pkd3oqrngt9\">向用户显示验证错误，并根据表单状态有条件地允许来自表单控件的输入</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1580hog8pyylwqe2sov8otgcn\"><a href=\"guide/template-reference-variables\">使用模板引用变量</a>在 HTML 元素之间共享信息</li>\n</ul>\n<h2 id=\"prerequisites\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e44b21uig1fakj5vcfuvz1bdu\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59n6i52gq0bspd5uhycuexzzw\">在进一步研究模板驱动表单之前，你应该对下列内容有一个基本的了解。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"hvl8rjzxrmac41qpao60jlv6\"><a href=\"https://www.typescriptlang.org/\" title=\"TypeScript 语言\">TypeScript</a>和 HTML5 编程</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"231u6redz2hxq6aoj944xbmky\">Angular 的应用设计基础，就像<a href=\"guide/architecture\" title=\"Angular 概念简介。\">Angular Concepts 中</a>描述的那样</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76vf6arrw2c4km5qxllzfvegv\"><a href=\"guide/template-syntax\" title=\"模板语法指南\">Angular 模板语法</a>的基础知识</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mhk43enn2xjxc67dcp1z86c\"><a href=\"guide/forms-overview\" title=\"Angular 表单概述\">“表单简介”</a>中提供的表单设计概念</li>\n</ul>\n<p><a id=\"intro\"></a></p>\n<h2 id=\"build-a-template-driven-form\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3k9tr9llxno5m57dbazt20clq\">构建一个模板驱动表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#build-a-template-driven-form\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44vvhz68o4et0wrjjxj42oe7l\">模板驱动表单依赖于 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 定义的指令。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\">指令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7mao242zqvgm4r63ntzdafvpz\">将附加表单元素中的值更改与数据模型中的更改相调和，使您能够通过输入验证和错误处理响应用户输入。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cph2byqqfpwylu2tj2dgd0mhv\">创建一个顶层\n<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>实例，并将其绑定到一个\n<code>&lt;form&gt;</code>元素上，以跟踪聚合表单值和验证状态。一旦导入了\n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>，此指令将默认在所有\n<code>&lt;form&gt;</code>标记上激活，你无需添加特殊选择器。</td>\n</tr>\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/NgModelGroup\" class=\"code-anchor\">NgModelGroup</a></code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tkiamrn67me4dlmioamv81qn\">创建 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的实例并将其绑定到 DOM 元素。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"the-sample-application\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3hh4v6xd8nm3hoqloiwcwuhb\">范例应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#the-sample-application\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9brdhonbdyjbcsrcxjzab7ypo\"><em>英雄雇佣管理局</em>使用本指南中的范例表单来维护英雄的个人信息。毕竟英雄也要工作啊。这个表单有助于该机构将正确的英雄与正确的危机匹配起来。</p>\n<div class=\"lightbox\">\n<img alt=\"Clean Form\" src=\"generated/images/guide/forms/hero-form-1.png\" width=\"479\" height=\"339\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cebde0nqrktwft27rscpku2ax\">该表单突出了一些易于使用的设计特性。比如，这两个必填字段的左边是绿色条，以便让它们醒目。这些字段都有初始值，所以表单是有效的，并且 <strong>Submit</strong> 按钮也是启用的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfcbtl3kulnfv0z33b4hdbm68\">使用此表单会向你展示：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bh2bt4wmi22i2h6doxjwgue8\">如何包含验证逻辑</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bixx62lxf0w9qjboc7sf5dyuw\">如何使用标准 CSS 自定义外观表现</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehjj3oonxnl6ro4t26u1x2bh\">如何处理错误条件以确保输入的有效性</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8h8jljhvz56f7cafv1q1uou5n\">如果用户删除了英雄的名字，那么表单就会失效。该应用会检测已更改的状态，并以醒目的样式显示验证错误。此外，<strong>Submit</strong> 按钮会被禁用，输入控件左侧的“必填”栏也会从绿色变为红色。</p>\n<div class=\"lightbox\">\n<img alt=\"Invalid, Name Required\" src=\"generated/images/guide/forms/hero-form-2.png\" width=\"465\" height=\"402\">\n</div>\n<h3 id=\"step-overview\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99v1hniqe0mlpyv2m4o7pih2e\">步骤概述<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#step-overview\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2jhraqoc1djb6oru04lf9occq\">在本教程中，你将使用以下步骤将一个范例表单绑定到数据并处理用户输入。</p>\n<ol>\n<li>Build the basic form.\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"l3jmvado0w42l78o18d7ha47\">定义一个范例数据模型</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsdndll2plrqi6zae01uxm7j9\">包括必需的基础设施，比如 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code></li>\n</ul>\n</li>\n<li>Bind form controls to data properties using the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive and two-way data-binding syntax.\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pw2aix5m2djda3h2dl42x63q\">检查 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 如何使用 CSS 类报告控件状态</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"33jfld9y3zdnhxs3bou0mdgrw\">为控件命名，以便让 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 可以访问它们</li>\n</ul>\n</li>\n<li>Track input validity and control status using <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>.\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"502f38bzcwmxhgm8opqt7lu13\">添加自定义 CSS 来根据状态提供可视化反馈</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4satvmd3n0bfv24xxn1q5i5iy\">显示和隐藏验证错误信息</li>\n</ul>\n</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lcywk4czuf99t7bljz8varfr\">通过添加到模型数据来响应原生 HTML 按钮的单击事件。</li>\n<li>Handle form submission using the <a href=\"api/forms/NgForm#properties\"><code>ngSubmit</code></a> output property of the form.\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6cpn6sbdl3cn295ic9zh06hu8\">在表单生效之前，先禁用 <strong>Submit</strong> 按钮</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0r8w6046lw6rdd5hjw063jir\">在提交完成后，把已完成的表单替换成页面上不同的内容</li>\n</ul>\n</li>\n</ol>\n<p><a id=\"step1\"></a></p>\n<h2 id=\"build-the-form\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpzl3zrxahvo3xoi5zs7vatyk\">建立表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#build-the-form\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mnbppz1ad3dtv1qx31sdbvu\">你可以根据这里提供的代码从头创建范例应用，也可以查看 <live-example></live-example>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"digkowoilafa9szwqnoefay17\">这里提供的范例应用会创建一个 <code>Hero</code> 类，用于定义表单中所反映的数据模型。</p>\n<code-example header=\"src/app/hero.ts\" language=\"typescript\" path=\"forms/src/app/hero.ts\">\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nl40va5pmrgh1xu1l96gxoje\">该表单的布局和细节是在 <code>HeroFormComponent</code> 类中定义的。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.ts (v1)\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"v1\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-form',\n  templateUrl: './hero-form.component.html',\n  styleUrls: ['./hero-form.component.css']\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  <a href=\"api/core/model\" class=\"code-anchor\">model</a> = new Hero(18, 'Dr. IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aq85mi5e7v4y79qkpsknmoo9v\">该组件的 <code>selector</code> 值为 “app-hero-form”，意味着你可以用 <code>&lt;app-hero-form&gt;</code> 标签把这个表单放到父模板中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jpggjma4monu41atyw4kpexo\">下面的代码会创建一个新的 hero 实例，以便让初始的表单显示一个范例英雄。</p>\n<code-example language=\"typescript\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"SkyDog\">\nconst myHero =  new Hero(42, 'SkyDog',\n                       'Fetch any object at any distance',\n                       'Leslie Rollover');\nconsole.log('My hero is called ' + myHero.name); // \"My hero is called SkyDog\"\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"domym39qe4sn1n1d1u4nyzg1i\">这个演示使用虚拟数据作为\n<code><a href=\"api/core/model\" class=\"code-anchor\">model</a></code>和\n<code>powers</code>。在真实应用中，你会注入一个数据服务来获取和保存真实数据，或将这些属性暴露为输入和输出。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejovklqnqhadyes5nk4jj5rdb\">该应用启用了表单功能，并注册了已创建的表单组件。</p>\n<code-example header=\"src/app/app.module.ts\" language=\"typescript\" path=\"forms/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { HeroFormComponent } from './hero-form/hero-form.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  providers: [],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bq8twbtym2jh6c48pbv61apmu\">该表单显示在根组件模板定义的应用布局中。</p>\n<code-example header=\"src/app/app.component.html\" language=\"html\" path=\"forms/src/app/app.component.html\">\n&lt;app-hero-form&gt;&lt;/app-hero-form&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6pzqak15bwrxpcdyldrhsudc7\">初始模板定义了一个带有两个表单组和一个提交按钮的表单布局。表单组对应于 Hero 数据模型的两个属性：name 和 alterEgo。每个组都有一个标签和一个用户输入框。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5z6ews0olaur3qhv4gup2sivf\"><strong>Name</strong> <code>&lt;input&gt;</code> 控件元素中包含了 HTML5 的 <code>required</code> 属性</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76gv9nqazcam5uvy4kgpxpnfl\"><strong>Alter Ego</strong> <code>&lt;input&gt;</code> 没有控件元素，因为 <code>alterEgo</code> 是可选的</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6qage3tudknbdb8sh10i90nyi\"><strong>Submit</strong> 按钮里面有一些用于样式化的类。此时，表单布局全都是纯 HTML5，没有绑定或指令。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ak528gic4ip83m9gsgskafql\">范例表单使用的是 <a href=\"https://getbootstrap.com/css\">Twitter Bootstrap 中的</a>一些样式类：<code>container</code>，<code>form-group</code>，<code>form-control</code> 和 <code>btn</code>。要使用这些样式，就要在该应用的样式表中导入该库。</p>\n<code-example header=\"src/styles.css\" path=\"forms/src/styles.1.css\">\n@import url('https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css');\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6e0h1fdexjfusejjy3xr20lqd\">这份表单让英雄申请人从管理局批准过的固定清单中选出一项超能力。预定义 <code>powers</code> 列表是数据模型的一部分，在 <code>HeroFormComponent</code> 内部维护。Angular 的<a href=\"api/common/NgForOf\" title=\"API 参考\">NgForOf 指令</a>会遍历这些数据值，以填充这个 <code>&lt;select&gt;</code> 元素。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (powers)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"powers\">\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n  &lt;select class=\"form-control\" id=\"power\" required&gt;\n    &lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\"&gt;{{pow}}&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4i8d50q3fn0gpe59y6xwhw12c\">如果你现在正在运行该应用，你会看到选择控件中的超能力列表。由于尚未将这些 input 元素绑定到数据值或事件，因此它们仍然是空白的，没有任何行为。</p>\n<div class=\"lightbox\">\n<img alt=\"Early form with no binding\" src=\"generated/images/guide/forms/hero-form-3.png\" width=\"473\" height=\"294\">\n</div>\n<p><a id=\"ngModel\"></a></p>\n<h2 id=\"bind-input-controls-to-data-properties\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lwn7rws98rd3dr5b2y0esivn\">把输入控件绑定到数据属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#bind-input-controls-to-data-properties\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"civljzlmnxpq68ap7qfxmaybc\">下一步是使用双向数据绑定把输入控件绑定到相应的 <code>Hero</code> 属性，这样它们就可以通过更新数据模型来响应用户的输入，并通过更新显示来响应数据中的程序化变更。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a748a5rn2gh3u4655h5swu7id\">该 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令是由 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 声明的，它能让你把模板驱动表单中的控件绑定到数据模型中的属性。当你使用双向数据绑定的语法 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 引入该指令时，Angular 就可以跟踪控件的值和用户交互，并保持视图与模型的同步。</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ygoa61yubyp5iagtrt5ue0d1\">编辑模板 <code>hero-form.component.html</code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ca2xw03y6oscp201zsi5ds4tx\">找到 <strong>Name</strong> 标签旁边的 <code>&lt;input&gt;</code> 标记。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1gzy5350w2mmotvf0atscezf\">使用双向数据绑定语法 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"...\"</code> 添加 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令。</li>\n</ol>\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"ngModelName-1\">\n&lt;input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"&gt;\nTODO: remove this: {{model.name}}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lh5ovbvisjbl2v54gvwnt5ka\">这个例子中在每个 input 标记后面都有一个临时的诊断插值 <code>{{model.name}}</code>，以显示相应属性的当前数据值。本提醒是为了让你在观察完这个双向数据绑定后删除这些诊断行。</p>\n</div>\n<p><a id=\"ngForm\"></a></p>\n<h3 id=\"access-the-overall-form-status\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vada38t3xgftfl308g06so9r\">访问表单的整体状态<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#access-the-overall-form-status\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dmiacrekad2jj33rgmwa8l2wm\">当你导入了 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 时，Angular 会自动为模板中的 <code>&lt;form&gt;</code> 标签创建并附加一个 <a href=\"api/forms/NgForm\" title=\"NgForm 的 API 参考\">NgForm</a> 指令。（因为 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 定义了一个能匹配 <code>&lt;form&gt;</code> 元素的选择器 <code>form</code>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pk27n25wuw0zkxypewvtynqe\">要访问 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 和表单的整体状态，<a href=\"guide/template-reference-variables\">就要声明一个模板引用变量</a>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ygoa61yubyp5iagtrt5ue0d1\">编辑模板 <code>hero-form.component.html</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wl9yqbv5j60jlcwk6ygtp2cd\">为 <code>&lt;form&gt;</code> 标签添加模板引用变量 <code>#heroForm</code>，并把它的值设置如下。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"template-variable\">\n&lt;form #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b33kp0pvwi57jg017b5rn2z9\">模板变量 <code>heroForm</code> 现在是对 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令实例的引用，该指令实例管理整个表单。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7q61go649qd15ih8wdez0tld\">运行该应用。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dcxep43zn2shqxw8t174y4daz\">开始在 <strong>Name</strong> 输入框中输入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ct15m3d9ixqmujs7ekxud8f6p\">在添加和删除字符时，你可以看到它们从数据模型中出现和消失。比如：</p>\n  <div class=\"lightbox\">\n  <img alt=\"ngModel in action\" src=\"generated/images/guide/forms/ng-model-in-action.png\" width=\"500\" height=\"74\">\n  </div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dctemklx35jtajzidt90yu91t\">用来显示插值的诊断行证明了这些值确实从输入框流向了模型，然后再返回。</p>\n</li>\n</ol>\n<h3 id=\"naming-control-elements\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e43zm82zuoztqlvqr7p4xzb88\">为控件元素命名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#naming-control-elements\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2oc6og2kn57y49bif442x079t\">在元素上使用 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 时，必须为该元素定义一个 <code>name</code> 属性。Angular 会用这个指定的名字来把这个元素注册到父 <code>&lt;form&gt;</code> 元素上的 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"732812wnlai51hapoqfno02zy\">这个例子中为 <code>&lt;input&gt;</code> 元素添加了一个 <code>name</code> 属性，并把它的值设置为 “name”，用来表示英雄的名字。任何唯一的值都可以用，但最好用描述性的名称。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bn24pv83eoguwtr6f9eolne2p\">为<strong>Alter Ego</strong>和<strong>Hero Power</strong>添加类似的 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 绑定和 <code>name</code> 属性。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7j149d3l4awfh9tbhrbkq576s\">你现在可以移除显示插值的诊断消息了。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8062bp0lhbi354nbavufu7edn\">为了确认双向数据绑定适用于整个英雄模型，请向组件的模板顶部添加一个使用 <a href=\"api/common/JsonPipe\"><code>json</code></a> 管道的新文本绑定，这会将数据序列化为字符串。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enaftooo3vfymyrlh5q6l5p8t\">表单模板修改完毕后，应如下所示：</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"ngModel-2\">\n{{ <a href=\"api/core/model\" class=\"code-anchor\">model</a> | json }}\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n  &lt;input type=\"text\" class=\"form-control\" id=\"name\"\n         required\n         [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"&gt;\n&lt;/div&gt;\n\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"alterEgo\"&gt;Alter Ego&lt;/label&gt;\n  &lt;input type=\"text\"  class=\"form-control\" id=\"alterEgo\"\n         [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.alterEgo\" name=\"alterEgo\"&gt;\n&lt;/div&gt;\n\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n  &lt;select class=\"form-control\"  id=\"power\"\n          required\n          [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.power\" name=\"power\"&gt;\n    &lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\"&gt;{{pow}}&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hzrd0rvsd7n6l89m9yov5axj\">注意，每个 <code>&lt;input&gt;</code> 元素都有一个 <code>id</code> 属性。<code>&lt;label&gt;</code> 元素的 <code>for</code> 属性用它来把标签匹配到输入控件。这是一个<a href=\"https://developer.mozilla.org/docs/Web/HTML/Element/label\">标准的 HTML 特性</a>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"mbd9znuvilypqd4hy82l0b2i\">每个 <code>&lt;input&gt;</code> 元素都有一个必需的 <code>name</code> 属性，Angular 用它来注册表单中的控件。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98001xkgwa7zg8w0tk36cmbh5\">如果你现在运行该应用并更改英雄模型的每个属性，该表单可能会显示如下：</p>\n<div class=\"lightbox\">\n<img alt=\"ngModel in action\" src=\"generated/images/guide/forms/ng-model-in-action-2.png\" width=\"515\" height=\"377\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6955266g5miofip51w3q4a7m2\">通过表单顶部的诊断行可以确认所有的更改都已反映在模型中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7kidxfe98122mwssb8dhq1a2\">当你观察到效果后，可以删除\n<code>{{ <a href=\"api/core/model\" class=\"code-anchor\">model</a> | json }}</code>的文本绑定。</p>\n</li>\n</ol>\n<h2 id=\"track-form-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9pkn9juma7uih6rjgzp0mm7px\">跟踪表单状态<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#track-form-states\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"basmbc4mz35ytbutmjovbjg9l\">提交表单后，Angular 会将 <code>ng-submitted</code> 类应用于 <code>form</code> 元素。此类可用于在提交后更改表单的样式。</p>\n<h2 id=\"track-control-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7az8cffjzyya7ju4xvvfsjfbk\">跟踪控件状态<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#track-control-states\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ume7d5j3gg8gamz2s1x1ye7z\">将 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令添加到某个控件上时也会将一些描述其状态的类名添加上去。这些类可用于根据控件的状态更改控件的样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"are1u8ddj4osj8ndgsc1epcbz\">下表描述了 Angular 根据控件状态应用的类名。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"awqprnmpryhcwruj8dmrii1j1\">状态</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eb6b9ucveoec82c8uwvax2wg9\">如果为真则添加类</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1odhorb8p2axsx3h5b31545ax\">如果为假则添加类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b69hd9f0wucxugr06iu7c7obo\">该控件已被访问过。</td>\n<td align=\"left\"><code>ng-touched</code></td>\n<td align=\"left\"><code>ng-untouched</code></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bip73wncv21xzonynv0sah11d\">该控件的值已更改。</td>\n<td align=\"left\"><code>ng-dirty</code></td>\n<td align=\"left\"><code>ng-pristine</code></td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7xfn3yusrxhqovjok2pw82b5\">该控件的值是有效的。</td>\n<td align=\"left\"><code>ng-valid</code></td>\n<td align=\"left\"><code>ng-invalid</code></td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4cgg3gzft0wlvdgeqpzrqlw0\">Angular 还会在提交时将 <code>ng-submitted</code> 类应用于 <code>form</code> 元素，但不会应用于此 <code>form</code> 元素中的控件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5d2v8i3jybjqd645mze022yq4\">你可以用这些 CSS 类来根据控件的状态定义其样式。</p>\n<h3 id=\"observe-control-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91dh3f4q9t3laz23n468rjygt\">观察控件状态<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#observe-control-states\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kzk92xyyl7utqlnii9ha00am\">要想知道框架是如何添加和移除这些类的，请打开浏览器的开发者工具，检查代表英雄名字的 <code>&lt;input&gt;</code>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nynf8snn5kfz64sjl1j6u2mz\">使用浏览器的开发者工具，找到与 “<strong>Name</strong>” 输入框对应的 <code>&lt;input&gt;</code> 元素。除了 “form-control” 类之外，你还可以看到该元素有多个 CSS 类。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9k94bt1wuy3tz8zhsrw6cdgwq\">当你第一次启动它的时候，这些类表明它是一个有效的值，该值在初始化或重置之后还没有改变过，并且在该控件自初始化或重置后也没有被访问过。</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;input … class=\"form-control ng-untouched ng-pristine ng-valid\" …&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e0mx4rrp1v78kyjf69750deko\"><strong>在 Name</strong> <code>&lt;input&gt;</code> 框中执行以下操作，看看会出现哪些类。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8muuku19jj26wryxtfgyw2xi2\">查看，但不要碰它。这些类表明它没有被碰过、还是最初的值，并且有效。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7i3k82vkdmi9biasr8g5t1q2o\">在 <strong>Name</strong> 框内单击，然后单击它外部。该控件现在已被访问过，该元素具有 <code>ng-touched</code> 类，取代了 <code>ng-untouched</code> 类。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a02z9ry9cdmw7ecb3kagban82\">在名字的末尾添加斜杠。现在它被碰过，而且是脏的（变化过）。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"71b83pfjn5fs1omsp4nd1or8g\">删掉这个名字。这会使该值无效，所以 <code>ng-invalid</code> 类会取代 <code>ng-valid</code> 类。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"create-visual-feedback-for-states\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9st4in4d1tmazg1056g5fb3e1\">为状态创建视觉反馈<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#create-visual-feedback-for-states\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"czznd4u8wpbjscwttk9vmtgou\">注意 <code>ng-valid</code> / <code>ng-invalid</code> 这两个类，因为你想在值无效时发出强烈的视觉信号。你还要标记必填字段。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7yxlo51n4aasvldl44la0spdg\">你可以在输入框的左侧用彩条标记必填字段和无效数据：</p>\n<div class=\"lightbox\">\n<img alt=\"Invalid Form\" src=\"generated/images/guide/forms/validity-required-indicator.png\" width=\"600\" height=\"171\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxjds5xmhcz8bpu894h56giti\">要想用这种方式修改外观，请执行以下步骤。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9aolp4p1ftyjncolaqfnlj8bo\">为 <code>ng-*</code> CSS 类添加一些定义。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4yn8vfzmt934u43jr3y83gofr\">把这些类定义添加到一个新的 <code>forms.css</code> 文件中。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkxgnic0w9mcuxbi7gpg1ye2v\">把这个新文件添加到项目中，作为 <code>index.html</code> 的兄弟：</p>\n<code-example header=\"src/assets/forms.css\" language=\"css\" path=\"forms/src/assets/forms.css\">\n.ng-valid[required], .ng-valid.required  {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442; /* red */\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4wnqpl109f4xc2ytgmvj02rk3\">在 <code>index.html</code> 文件中，更新 <code>&lt;head&gt;</code> 标签以包含新的样式表。</p>\n<code-example header=\"src/index.html (styles)\" path=\"forms/src/index.html\" region=\"styles\">\n&lt;link rel=\"stylesheet\" href=\"assets/forms.css\"&gt;\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"show-and-hide-validation-error-messages\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bx9vr55xoukmze8vkmrpf4d7o\">显示和隐藏验证错误信息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#show-and-hide-validation-error-messages\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6lut0xn02wlq9ig60laeexlps\"><strong>Name</strong> 输入框是必填的，清除它就会把彩条变成红色。这表明有些东西是错的，但是用户并不知道要怎么做或该做什么。你可以通过查看和响应控件的状态来提供有用的信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"wpjoykuxssmmx59ff2hgnxy5\">当用户删除该名字时，该表单应如下所示：</p>\n<div class=\"lightbox\">\n<img alt=\"Name required\" src=\"generated/images/guide/forms/name-required-error.png\" width=\"400\" height=\"108\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjki4tc3ga50q7i4rtsjem38q\"><strong>Hero Power</strong> 选择框也是必填的，但它不需要这样的错误处理，因为选择框已经把选择限制在有效值范围内。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ui7v36h210vqh3fwqye8qnaq\">要在适当的时候定义和显示错误信息，请执行以下步骤。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dkpejr7gag2gv9c97poxw2fa\">使用模板引用变量扩展 <code>&lt;input&gt;</code> 标签，你可以用来从模板中访问输入框的 Angular 控件。在这个例子中，该变量是 <code>#name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8thid77fzyq0a3meethim6fii\">模板引用变量（<code>#name</code>）设置为 <code>\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>，因为 \"ngModel\" 是 <a href=\"api/core/Directive#exportAs\"><code>NgModel.exportAs</code></a> 属性的值。这个属性告诉 Angular 如何把引用变量和指令链接起来。</p>\n</div>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b6z63ibgsvoo9cehl7ksaerca\">添加一个包含合适错误信息 <code>&lt;div&gt;</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cm4tgdzwjqzeheszhiw8d2cyf\">通过把 <code>name</code> 控件的属性绑定到 <code>&lt;div&gt;</code> 元素的 <code>hidden</code> 属性来显示或隐藏错误信息。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (hidden-error-msg)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"hidden-error-msg\">\n&lt;div [hidden]=\"name.valid || name.pristine\"\n     class=\"alert alert-danger\"&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3matfej6dirm03bva76nytiy9\">为 <code>name</code> 输入框添加一个有条件的错误信息，如下例所示。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"name-with-error-msg\">\n&lt;label for=\"name\"&gt;Name&lt;/label&gt;\n&lt;input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"\n       #name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"&gt;\n&lt;div [hidden]=\"name.valid || name.pristine\"\n     class=\"alert alert-danger\"&gt;\n  Name is required\n&lt;/div&gt;\n\n</code-example>\n</li>\n</ol>\n<div class=\"callout is-helpful\">\n<header data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efcp5kvuklye8agytwc9w789g\">关于 \"pristine\"（原始）状态的说明</header>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1mvt3o4dvl1bkty55zhjd073e\">在这个例子中，当控件是有效的（valid）或者是<em>原始的</em>（pristine）时，你会隐藏这些消息。原始表示该用户在此表单中显示的值尚未更改过。如果你忽略了 <code>pristine</code> 状态，那么只有当值有效时才会隐藏这些消息。如果你把一个新的（空白）英雄或一个无效的英雄传给这个组件，你会立刻看到错误信息，而这时候你还没有做过任何事情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwgh377mrujj9lrtgr4tird10\">你可能希望只有在用户做出无效更改时，才显示该消息。因此当 <code>pristine</code> 状态时，隐藏这条消息就可以满足这个目标。当你在下一步中为表单添加一个新的英雄时，就会看到这个选择有多重要。</p>\n</div>\n<h2 id=\"add-a-new-hero\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8arpbx6ig96s6l5n6p1iw2fr4\">添加一个新英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#add-a-new-hero\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekso0ed8usgolzxjhthdi8rcz\">本练习通过添加模型数据，展示了如何响应原生 HTML 按钮单击事件。要让表单用户添加一个新的英雄，就要添加一个能响应 click 事件的 <strong>New Hero</strong> 按钮。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"424nf423ad3tp9bidg7egex5j\">在模板中，把 “New Hero” 这个 <code>&lt;button&gt;</code> 元素放在表单底部。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vdddkbkwbtjhsv08nvqhh37u\">在组件文件中，把创建英雄的方法添加到英雄数据模型中。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.ts (New Hero method)\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"new-hero\">\nnewHero() {\n  this.model = new Hero(42, '', '');\n}\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9vue2umqdv2p2plg6d8wszyz5\">把按钮的 click 事件绑定到一个创建英雄的方法 <code>newHero()</code> 上。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (New Hero button)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"new-hero-button-no-reset\">\n&lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero()\"&gt;New Hero&lt;/button&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rj4wl516x77l9yz2l9ouaaka\">再次运行该应用，单击 <strong>New Hero</strong> 按钮。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exxyou1asbtp68pqq8eqjhkrg\">表单会清空，输入框左侧的<em>必填</em>栏会显示红色，说明 <code>name</code> 和 <code>power</code> 属性无效。请注意，错误消息是隐藏的。这是因为表单处于原始状态。你还没有改过任何东西。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmv67qn7filu2sizdbxtvl4y5\">输入一个名字，然后再次点击 <strong>New Hero</strong>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ed9138yys124iaenw504r0ppt\">现在，该应用会显示一条错误信息 <code>Name is required</code>，因为该输入框不再是原始状态。表单会记住你在单击 <strong>New Hero</strong> 之前输入过一个名字。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4892ece20w7k1fedat39qsxco\">要恢复表单控件的原始状态，可以在调用 <code>newHero()</code> 方法之后强制调用表单的 <code>reset()</code> 方法以清除所有标志。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (Reset the form)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"new-hero-button-form-reset\">\n&lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero(); heroForm.reset()\"&gt;New Hero&lt;/button&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7k2afhde0wwun0su93rbz0z8t\">现在单击 <strong>New Hero</strong> 会重置表单及其控件标志。</p>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1lm2hi9tqm2idolvzur4u4xo\">关于使用事件绑定监听 DOM 事件和更新相应组件属性的更多信息，参阅<a href=\"guide/user-input\">“用户输入”指南。</a>。</p>\n</div>\n<h2 id=\"submit-the-form-with-ngsubmit\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv6p893athd67acerrmvip3eq\">使用 <code>ngSubmit</code> 提交表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#submit-the-form-with-ngsubmit\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zmfr2ypg409is3mmuodl1vos\">用户应该可以在填写之后提交这个表单。表单底部的 <strong>Submit</strong> 按钮本身没有任何作用，但由于它的类型（<code>type=\"submit\"</code>），它会触发一个表单提交事件。要响应此事件，请执行以下步骤。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9w28u0rq1vt95q31sa6x3c8z6\">把表单的 <a href=\"api/forms/NgForm#properties\"><code>ngSubmit</code></a> 事件属性绑定到一个 hero-form 组件的 <code>onSubmit()</code> 方法中。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (ngSubmit)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"ngSubmit\">\n&lt;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3e1sm5wqgj46i5xwzzbubv5w9\">使用模板引用变量 <code>#heroForm</code> 访问包含 <strong>Submit</strong> 按钮的表单，并创建一个事件绑定。你可以把表示它整体有效性的 form 属性绑定到 <strong>Submit</strong> 按钮的 <code>disabled</code> 属性上。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (submit-button)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"submit-button\">\n&lt;button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\"&gt;Submit&lt;/button&gt;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ehattcf4462hmajv5j9szu4tq\">运行该应用。注意，该按钮已启用 - 虽然它还没有做任何有用的事情。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93oq1j45nizyd216k9txm5u5k\">删除<strong>名称</strong>值。这违反了“必需”规则，因此会显示错误消息，并注意它还会禁用“<strong>提交”</strong>按钮。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aocat8sxtmvlho4qpb7m418ma\">你不必把按钮的启用状态明确地关联表单的有效性上。当 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 在增强的表单元素上定义模板引用变量时，会自动执行此操作，然后在按钮控件中引用该变量。</p>\n</li>\n</ol>\n<h3 id=\"respond-to-form-submission\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agagi0nl54uhkths4l5vl28c5\">响应表单提交<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#respond-to-form-submission\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"73qxzpct5n7sonji1j9zr3dy3\">要展示对表单提交的响应，你可以隐藏数据输入区域并就地显示其它内容。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2isp0lzr0yzqflb1u701i4qy5\">把整个表单包裹进一个 <code>&lt;div&gt;</code> 中并把它的 <code>hidden</code> 属性绑定到 <code>HeroFormComponent.submitted</code> 属性上。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"edit-div\">\n&lt;div [hidden]=\"submitted\"&gt;\n  &lt;h1&gt;Hero <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a>&lt;/h1&gt;\n  &lt;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n\n     &lt;!-- ... all of the form ... --&gt;\n\n  &lt;/form&gt;\n&lt;/div&gt;\n\n</code-example>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bd13qcf5le2unijthe7si0o2e\">主表单从一开始就是可见的，因为在提交之前，它的 <code>submitted</code> 属性都是 false，正如 <code>HeroFormComponent</code> 中的这个片段所显示的：</p>\n<code-example header=\"src/app/hero-form/hero-form.component.ts (submitted)\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"submitted\">\nsubmitted = false;\n\nonSubmit() { this.submitted = true; }\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eiiwv9eevu7fme9bkpcx0vip8\">点击 <strong>Submit</strong> 按钮后，<code>submitted</code> 标志就变为 <code>true</code>，表单就会消失。</p>\n</li>\n</ul>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dcj82wdwhho7cyrpxbmo2wo8\">要在表单处于已提交状态时显示其它内容，请在新的 <code>&lt;div&gt;</code> 包装器下添加以下 HTML。</p>\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"submitted\">\n&lt;div [hidden]=\"!submitted\"&gt;\n  &lt;h2&gt;You submitted the following:&lt;/h2&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Name&lt;/div&gt;\n    &lt;div class=\"col-xs-9\"&gt;{{ model.name }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Alter Ego&lt;/div&gt;\n    &lt;div class=\"col-xs-9\"&gt;{{ model.alterEgo }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Power&lt;/div&gt;\n    &lt;div class=\"col-xs-9\"&gt;{{ model.power }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;br&gt;\n  &lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\"&gt;Edit&lt;/button&gt;\n&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d283i95d8u72z8023jagdkgir\">这个 <code>&lt;div&gt;</code>（用于显示带插值绑定的只读英雄）只在组件处于已提交状态时才会出现。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cvm5vsm02hl5xec0e7ufmndmn\">另外还显示了一个 <em>Edit</em> 按钮，它的 click 事件绑定到了一个清除 <code>submitted</code> 标志的表达式。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfzdl44g2o1sjqmiqkkqhgt6l\">单击 <em>Edit</em> 按钮，将显示切换回可编辑的表单。</p>\n</li>\n</ol>\n<h2 id=\"summary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2fflknbbur8ttwdtn3o9w4vat\">总结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#summary\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"egvcd7y7153ohh7p5qhziktcj\">本页讨论的 Angular 表单利用了下列框架特性来支持数据修改，验证等工作。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"i0lsr6icqqjn3x60r185xdd2\">一个 Angular HTML 表单模板</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dxvivn5poooecf8hxapccdpb\">带 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的表单组件类</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cibs468wrfa1ceezmy2a65tjc\">绑定到 <code><a href=\"api/forms/NgForm#ngSubmit\" class=\"code-anchor\">NgForm.ngSubmit</a></code> 事件属性来处理表单提交</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4dpbubs74ill4ao7f815net1d\">模板引用变量，比如 <code>#heroForm</code> 和 <code>#name</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ysk4god66zhvx8gcikbu4v1g\">双向数据绑定的 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 语法</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ddu6atgveb4rbd1s33trgyke\"><code>name</code> 属性的用途是验证和表单元素的变更跟踪</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5e2w2lvlmrqp21jdjlj4ka76\">输入控件上的引用变量的 <code>valid</code> 属性会表明控件是有效的还是应该显示错误消息</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cyqo5tksuqk6d2mx36b79v81c\">用 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 的有效性来控制 <strong>Submit</strong> 按钮的启用状态</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"88pmrrh0zj4jnpgfve3mc8d0w\">自定义 CSS 类，向用户提供有关无效控件的视觉反馈</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"97xc6sghjhvyn1l9qy1j1pup3\">这里是该应用最终版本的代码：</p>\n<code-tabs>\n    <code-pane header=\"hero-form/hero-form.component.ts\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"final\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-form',\n  templateUrl: './hero-form.component.html',\n  styleUrls: ['./hero-form.component.css']\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  <a href=\"api/core/model\" class=\"code-anchor\">model</a> = new Hero(18, 'Dr. IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n  newHero() {\n    this.model = new Hero(42, '', '');\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-form/hero-form.component.html\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"final\">\n&lt;div class=\"container\"&gt;\n  &lt;div [hidden]=\"submitted\"&gt;\n    &lt;h1&gt;Hero <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a>&lt;/h1&gt;\n    &lt;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"name\"\n               required\n               [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"\n               #name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"&gt;\n        &lt;div [hidden]=\"name.valid || name.pristine\"\n             class=\"alert alert-danger\"&gt;\n          Name is required\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"alterEgo\"&gt;Alter Ego&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"alterEgo\"\n               [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.alterEgo\" name=\"alterEgo\"&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n        &lt;select class=\"form-control\" id=\"power\"\n                required\n                [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.power\" name=\"power\"\n                #power=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"&gt;\n          &lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\"&gt;{{pow}}&lt;/option&gt;\n        &lt;/select&gt;\n        &lt;div [hidden]=\"power.valid || power.pristine\" class=\"alert alert-danger\"&gt;\n          Power is required\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\"&gt;Submit&lt;/button&gt;\n      &lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero(); heroForm.reset()\"&gt;New Hero&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/div&gt;\n\n  &lt;div [hidden]=\"!submitted\"&gt;\n    &lt;h2&gt;You submitted the following:&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Name&lt;/div&gt;\n      &lt;div class=\"col-xs-9\"&gt;{{ model.name }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Alter Ego&lt;/div&gt;\n      &lt;div class=\"col-xs-9\"&gt;{{ model.alterEgo }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Power&lt;/div&gt;\n      &lt;div class=\"col-xs-9\"&gt;{{ model.power }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\"&gt;Edit&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"hero.ts\" path=\"forms/src/app/hero.ts\">\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n\n\n</code-pane>\n    <code-pane header=\"app.module.ts\" path=\"forms/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { HeroFormComponent } from './hero-form/hero-form.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  providers: [],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"app.component.html\" path=\"forms/src/app/app.component.html\">\n&lt;app-hero-form&gt;&lt;/app-hero-form&gt;\n\n\n</code-pane>\n    <code-pane header=\"app.component.ts\" path=\"forms/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n\n</code-pane>\n    <code-pane header=\"main.ts\" path=\"forms/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .catch(err =&gt; console.error(err));\n\n\n</code-pane>\n    <code-pane header=\"forms.css\" path=\"forms/src/assets/forms.css\">\n.ng-valid[required], .ng-valid.required  {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442; /* red */\n}\n\n</code-pane>\n</code-tabs>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-components\n - guide/built-in-directives\n - guide/example-apps-list\n - guide/form-validation\n - guide/forms-overview\n - guide/glossary\n - guide/npm-packages\n - guide/reactive-forms\n - guide/typed-forms\n - tutorial\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/JsonPipe\n - api/common/NgFor\n - api/common/NgForOf\n - api/core/Component\n - api/core/Directive#exportAs\n - api/core/NgModule\n - api/core/model\n - api/forms/Form\n - api/forms/FormGroup\n - api/forms/FormsModule\n - api/forms/NgForm\n - api/forms/NgForm#ngSubmit\n - api/forms/NgForm#properties\n - api/forms/NgModel\n - api/forms/NgModelGroup\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - guide/architecture\n - guide/architecture-components#data-binding\n - guide/forms#access-the-overall-form-status\n - guide/forms#add-a-new-hero\n - guide/forms#bind-input-controls-to-data-properties\n - guide/forms#build-a-template-driven-form\n - guide/forms#build-the-form\n - guide/forms#building-a-template-driven-form\n - guide/forms#create-visual-feedback-for-states\n - guide/forms#naming-control-elements\n - guide/forms#objectives\n - guide/forms#observe-control-states\n - guide/forms#prerequisites\n - guide/forms#respond-to-form-submission\n - guide/forms#show-and-hide-validation-error-messages\n - guide/forms#step-overview\n - guide/forms#submit-the-form-with-ngsubmit\n - guide/forms#summary\n - guide/forms#the-sample-application\n - guide/forms#track-control-states\n - guide/forms#track-form-states\n - guide/forms-overview\n - guide/glossary#template\n - guide/template-reference-variables\n - guide/template-syntax\n - guide/user-input\n - tutorial/tour-of-heroes\n - https://developer.mozilla.org/docs/Web/HTML/Element/label\n - https://getbootstrap.com/css\n - https://www.typescriptlang.org/\n-->"}
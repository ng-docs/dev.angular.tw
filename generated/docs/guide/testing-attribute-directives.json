{"id":"guide/testing-attribute-directives","title":"测试属性型指令","contents":"<div class=\"content\">\n  <p><a id=\"attribute-directive\"></a></p>\n<h1 id=\"testing-attribute-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7as3gaxqukb7eyo00s24tsv3\">测试属性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-attribute-directives#testing-attribute-directives\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"52mr6q5j59157crygtiw1pr2f\"><em>属性型指令</em>会修改元素、组件或其他指令的行为。它的名字反映了该指令的应用方式：作为宿主元素的一个属性。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3jhe3g7pull8hzqtm08p46wf0\">如果你要试验本指南中所讲的应用，请<live-example name=\"testing\" nodownload=\"\">在浏览器中运行它</live-example>或<live-example name=\"testing\" downloadonly=\"\">下载并在本地运行它</live-example>。</p>\n</div>\n<h2 id=\"testing-the-highlightdirective\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"488f50l8p5k1ue1hrv4ghlxq7\">测试 <code>HighlightDirective</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-attribute-directives#testing-the-highlightdirective\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7l99bum16232tuyln885gc73e\">本范例应用的 <code>HighlightDirective</code> 会根据数据绑定中的颜色或默认颜色（浅灰）来设置元素的背景色。它还会把该元素的自定义属性（<code>customProperty</code>）设置为 <code>true</code>，当然这除了示范本技术之外别无它用。</p>\n<code-example header=\"app/shared/highlight.directive.ts\" path=\"testing/src/app/shared/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ standalone: true, selector: '[highlight]' })\n/**\n * Set backgroundColor for the attached element to highlight color\n * and set the element's customProperty to true\n */\nexport class HighlightDirective implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n  defaultColor = 'rgb(211, 211, 211)'; // lightgray\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('highlight') bgColor = '';\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {\n    el.nativeElement.style.customProperty = true;\n  }\n\n  ngOnChanges() {\n    this.el.nativeElement.style.backgroundColor = this.bgColor || this.defaultColor;\n  }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"948ia9e8d857ilqnagccd2x8c\">它在整个应用中都用到过，也许最简单的是在 <code>AboutComponent</code> 中：</p>\n<code-example header=\"app/about/about.component.ts\" path=\"testing/src/app/about/about.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { HighlightDirective } from '../shared/highlight.directive';\nimport { TwainComponent } from '../twain/twain.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  template: `\n    &lt;h2 highlight=\"skyblue\"&gt;About&lt;/h2&gt;\n    &lt;h3&gt;Quote of the day:&lt;/h3&gt;\n    &lt;twain-quote&gt;&lt;/twain-quote&gt;\n  `,\n  imports: [TwainComponent, HighlightDirective],\n})\nexport class AboutComponent {}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f58heezsuia4rb2hidlkvqws0\">要想在 <code>AboutComponent</code> 中测试 <code>HighlightDirective</code> 的特定用法，只需要浏览<a href=\"guide/testing-components-scenarios\">组件测试场景</a>中的<a href=\"guide/testing-components-scenarios#nested-component-tests\">“嵌套组件测试”</a>一节中提到的各种技巧。</p>\n<code-example header=\"app/about/about.component.spec.ts\" path=\"testing/src/app/about/about.component.spec.ts\" region=\"tests\">\nbeforeEach(() =&gt; {\n  fixture = TestBed.configureTestingModule({\n    imports: [AboutComponent],\n    providers: [<a href=\"api/common/http/provideHttpClient\" class=\"code-anchor\">provideHttpClient</a>(), TwainService, UserService],\n    schemas: [<a href=\"api/core/CUSTOM_ELEMENTS_SCHEMA\" class=\"code-anchor\">CUSTOM_ELEMENTS_SCHEMA</a>],\n  }).createComponent(AboutComponent);\n  fixture.detectChanges(); // initial binding\n});\n\nit('should have skyblue &lt;h2&gt;', () =&gt; {\n  const h2: HTMLElement = fixture.nativeElement.querySelector('h2');\n  const bgColor = h2.style.backgroundColor;\n  expect(bgColor).toBe('skyblue');\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"82o235c0nc4zcys2mhs8okywn\">但是，测试单个用例不太可能涉及指令的全部能力。要找到并测试那些使用了该指令的所有组件会很乏味、很脆弱，而且几乎不可能做到完全覆盖。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qfhxuagi401np7wr78s841k8\"><em>纯类测试</em>可能会有一点帮助，但像这种属性型指令往往会操纵 DOM。孤立的单元测试不会触及 DOM，因此也无法给人带来对指令功效的信心。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tqaqmzthn3yjge9is6nb69j\">更好的解决方案是创建一个人工测试组件来演示应用该指令的所有方法。</p>\n<code-example header=\"app/shared/highlight.directive.spec.ts (TestComponent)\" path=\"testing/src/app/shared/highlight.directive.spec.ts\" region=\"test-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  template: ` &lt;h2 highlight=\"yellow\"&gt;Something Yellow&lt;/h2&gt;\n    &lt;h2 highlight&gt;The Default (Gray)&lt;/h2&gt;\n    &lt;h2&gt;No Highlight&lt;/h2&gt;\n    &lt;input #box [highlight]=\"box.value\" value=\"cyan\" /&gt;`,\n  imports: [HighlightDirective],\n})\nclass TestComponent {}\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"HighlightDirective spec in action\" src=\"generated/images/guide/testing/highlight-directive-spec.png\" width=\"200\" height=\"159\">\n</div>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3x2jd90ij75y6xg6abefj2v91\">这个 <code>&lt;input&gt;</code> 用例将 <code>HighlightDirective</code> 绑定到输入框中颜色值的名称。初始值是单词“cyan”，应该把它设为输入框的背景颜色。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ou7jukpgi0ent9sl340xznfk\">下面是对该组件的一些测试：</p>\n<code-example header=\"app/shared/highlight.directive.spec.ts (selected tests)\" path=\"testing/src/app/shared/highlight.directive.spec.ts\" region=\"selected-tests\">\nbeforeEach(() =&gt; {\n  fixture = TestBed.configureTestingModule({\n    imports: [HighlightDirective, TestComponent],\n  }).createComponent(TestComponent);\n\n  fixture.detectChanges(); // initial binding\n\n  // all elements with an attached HighlightDirective\n  des = fixture.debugElement.queryAll(By.directive(HighlightDirective));\n\n  // the h2 without the HighlightDirective\n  bareH2 = fixture.debugElement.query(By.css('h2:not([highlight])'));\n});\n\n// color tests\nit('should have three highlighted elements', () =&gt; {\n  expect(des.length).toBe(3);\n});\n\nit('should color 1st &lt;h2&gt; background \"yellow\"', () =&gt; {\n  const bgColor = des[0].nativeElement.style.backgroundColor;\n  expect(bgColor).toBe('yellow');\n});\n\nit('should color 2nd &lt;h2&gt; background w/ default color', () =&gt; {\n  const dir = des[1].injector.get(HighlightDirective) as HighlightDirective;\n  const bgColor = des[1].nativeElement.style.backgroundColor;\n  expect(bgColor).toBe(dir.defaultColor);\n});\n\nit('should bind &lt;input&gt; background to value color', () =&gt; {\n  // easier to work with nativeElement\n  const input = des[2].nativeElement as HTMLInputElement;\n  expect(input.style.backgroundColor).withContext('initial backgroundColor').toBe('cyan');\n\n  input.value = 'green';\n\n  // Dispatch a DOM event so that Angular responds to the input value change.\n  input.dispatchEvent(new <a href=\"api/router/Event\" class=\"code-anchor\">Event</a>('input'));\n  fixture.detectChanges();\n\n  expect(input.style.backgroundColor).withContext('changed backgroundColor').toBe('green');\n});\n\nit('bare &lt;h2&gt; should not have a customProperty', () =&gt; {\n  expect(bareH2.properties['customProperty']).toBeUndefined();\n});\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y2lc5hlzxsz1e3wn30k2l0na\">一些技巧值得注意：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5f8hiwv6q6n8ia5l7g4ciz39k\"><code>By.directive</code> 谓词是一种获取那些<em>不知道类型</em>但都附有本指令的元素的好办法。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1a92zv6bkraprtfcwc2lt8rbh\"><code>By.css('h2:not([highlight])')</code> 中的 <a href=\"https://developer.mozilla.org/docs/Web/CSS/:not\"><code>:not</code> 伪类</a>可以帮助你找到那些<em>没有</em>该指令的 <code>&lt;h2&gt;</code> 元素。<code>By.css('*:not([highlight])')</code> 可以找到没有该指令的<em>任意</em>元素。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"765juh1cwkatprq596goqy019\"><code><a href=\"api/core/DebugElement#styles\" class=\"code-anchor\">DebugElement.styles</a></code> 提供了对元素样式的访问，即使没有真正的浏览器也是如此，这要归功于 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> 提供的抽象。但是，如果 <code>nativeElement</code> 显得比使用其抽象版本更容易或更清晰，那就把它暴露出来。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35iv940yfqo32977q92udufhp\">Angular 会在指令宿主元素的注入器中添加上该指令。对默认颜色的测试使用第二个 <code>&lt;h2&gt;</code> 上的注入器来获取它的 <code>HighlightDirective</code> 实例及其 <code>defaultColor</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7h734ztvxr8cuxgiap8abciq9\"><code><a href=\"api/core/DebugElement#properties\" class=\"code-anchor\">DebugElement.properties</a></code> 允许访问本指令设置的自定义属性。</p>\n</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Thu Sep 07 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/testing\n-->\n<!-- links from this doc:\n - api/common/http/provideHttpClient\n - api/core/CUSTOM_ELEMENTS_SCHEMA\n - api/core/Component\n - api/core/DebugElement\n - api/core/DebugElement#properties\n - api/core/DebugElement#styles\n - api/core/Directive\n - api/core/ElementRef\n - api/core/Input\n - api/core/OnChanges\n - api/router/Event\n - guide/testing-attribute-directives#testing-attribute-directives\n - guide/testing-attribute-directives#testing-the-highlightdirective\n - guide/testing-components-scenarios\n - guide/testing-components-scenarios#nested-component-tests\n - https://developer.mozilla.org/docs/Web/CSS/:not\n-->"}
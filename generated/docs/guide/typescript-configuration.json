{"id":"guide/typescript-configuration","title":"TypeScript 設定","contents":"<div class=\"content\">\n  <h1 id=\"typescript-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caij1clqa9cpildee2jbxepos\">TypeScript 設定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-configuration\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5fy3421h5dmbvtbd39asptfj\">TypeScript 是 Angular 應用開發中使用的主語言。它是 JavaScript 的『方言』之一，為型別安全和工具化而做了設計期支援。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92xo9j8me7p5v6t3o23la92wq\">瀏覽器不能直接執行 TypeScript。它得先用 <em>tsc</em> 編譯器轉譯（transpile）成 JavaScript，而且編譯器需要進行一些設定。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6b3gza38ee2js6acocgywc2g5\">本頁面會涵蓋 TypeScript 設定與環境的某些方面，這些對 Angular 開發者是很重要的。具體來說包括下列檔案：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n2c7wfntpyw9gnmnqx5bqxht\">檔案</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6s12k0hg09stitep8h23imocd\"><a href=\"guide/typescript-configuration#tsconfig\">tsconfig.json</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xwpwa9yvbwxuumq1z6a6oslf\">TypeScript編譯器設定。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/typescript-configuration#typings\">typings</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79v5iq4vhqptyguz724su3kxd\">TypesScript宣告檔案。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"tsconfig\"></a></p>\n<h2 id=\"configuration-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zakwpbaxpz096eh6ovpz1v3a\">設定檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#configuration-files\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7wk06vdyd5p95c9o4x9zkvgd\">一個 Angular 工作區中包含多個 TypeScript 設定檔案。在根一級，有兩個主要的 TypeScript 設定檔案：<code>tsconfig.json</code> 檔案和 <code>tsconfig.base.json</code> 檔案。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djy86xjq8xghu5k7wutklw37d\">請參閱 <a href=\"guide/angular-compiler-options\">Angular 編譯器選項</a>一章，以瞭解可以使用哪些 Angular 特有的選項。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tjgitf174hfhj0xjopo7uv2o\">TypeScript 和 Angular 提供了很多選項，可以用來設定型別檢查功能和要生成的輸出。更多訊息，請參閱 TypeScript 文件中的<a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">使用 extends 進行設定繼承</a>部分。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv0bwepd1ju2bszjh7iiwg6ef\">要了解 TypeScript 設定檔案的詳情，請參閱官方提供的 <a href=\"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript 手冊</a>。要了解設定繼承的詳情，參閱<a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">使用 extends 進行設定繼承</a>部分。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3r5vhup7r41oikx9ocqg6ep4b\">Angular 工作區的初始 <code>tsconfig.json</code> 通常是這樣的。</p>\n<code-example header=\"tsconfig.json\" path=\"getting-started/tsconfig.0.json\">\n/* To learn more about this file see: https://angular.io/guide/typescript-configuration. */\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"importHelpers\": true,\n    \"target\": \"ES2022\",\n    \"module\": \"ES2022\",\n    \"useDefineForClassFields\": false,\n    \"lib\": [\n      \"ES2022\",\n      \"dom\"\n    ]\n  },\n  \"angularCompilerOptions\": {\n    \"disableTypeScriptVersionCheck\": true,\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n\n\n</code-example>\n<p><a id=\"noImplicitAny\"></a></p>\n<h3 id=\"noimplicitany-and-suppressimplicitanyindexerrors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37xkb1f40rbl9tycbc47ria1j\"><code>noImplicitAny</code> 與 <code>suppressImplicitAnyIndexErrors</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#noimplicitany-and-suppressimplicitanyindexerrors\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cavxev203qmku0ubclbfjh77q\">TypeScript 開發者們在 <code>noImplicitAny</code> 標誌應該是 <code>true</code> 還是 <code>false</code> 上存在分歧。這沒有標準答案，你以後還可以修改這個標誌。但是你的選擇會在大專案中產生顯著差異，所以它值得討論一番。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5a3qetn0t6klwb00t19gepd4\">當 <code>noImplicitAny</code> 標誌是 <code>false</code>（預設值）時，如果編譯器無法根據變數的用途推斷出變數的型別，它就會悄悄的把變數型別預設為 <code>any</code>。這就是<em>隱式 <code>any</code></em>的含義。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uy80njqmqrtq8cgtptaldl9o\">當 <code>noImplicitAny</code> 標誌是 <code>true</code> 並且 TypeScript 編譯器無法推斷出型別時，它仍然會生成 JavaScript 檔案。但是它也會<strong>報告一個錯誤</strong>。很多飽經滄桑的工程師更喜歡這種嚴格的設定，因為型別檢查能在編譯期間捕獲更多意外錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv14cu3kpp7vj7n79q8xnt28d\">即使 <code>noImplicitAny</code> 標誌被設定成了 <code>true</code>，你也可以把變數的型別設定為 <code>any</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eji03pxeidldr96rq2d0tclie\">如果把 <code>noImplicitAny</code> 標誌設定為了 <code>true</code>，你可能會得到<em>隱式索引錯</em>。大多數工程師可能覺得<em>這種錯誤</em>是個煩惱而不是助力。你可以使用另一個標誌來禁止它們。</p>\n<code-example>\n\n\"suppressImplicitAnyIndexErrors\": true\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yxzyg2sfqcf7f93x3e3smb9m\">要了解 TypeScript 設定如何影響編譯的更多訊息，請參閱 <a href=\"guide/angular-compiler-options\">Angular 編譯器選項</a>和<a href=\"guide/template-typecheck\">範本型別檢查</a> 兩章。</p>\n</div>\n<p><a id=\"typings\"></a></p>\n<h2 id=\"typescript-typings\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3v6szkl8jcrqsff0d0ur1zc6\">TypeScript 型別定義（typings）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-typings\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4co2qqq028s6ienz6d9osern\">很多 JavaScript 函式庫，比如 jQuery、Jasmine 測試函式庫和 Angular，會通過新的屬性和語法來擴充套件 JavaScript 環境。而 TypeScript 編譯器並不能原生的識別它們。當編譯器不能識別時，它就會丟擲一個錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8674a23v4z5bah5grne57qbfe\">可以使用<a href=\"https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\">TypeScript 型別定義檔案</a> —— <code>.d.ts</code> 檔案 —— 來告訴編譯器你要載入的函式庫的型別定義。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsqg7h9geny6l9yx0lwz3bnse\">TypeScript 敏感的編輯器藉助這些定義檔案來顯示這些函式庫中各個屬性的型別定義。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4itfu7yt6p3skra3c0t5ub1hb\">很多函式庫在自己的 npm 套件中都包含了它們的型別定義檔案，TypeScript 編譯器和編輯器都能找到它們。Angular 函式庫也是這樣的。任何 Angular 應用程式的 <code>node_modules/@angular/core/</code> 目錄下，都包含幾個 <code>d.ts</code> 檔案，它們描述了 Angular 的各個部分。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69kh6uikp973jby37ohfpj5ib\">你不需要為那些包含了 <code>d.ts</code> 檔案的函式庫獲取<em>型別定義</em>檔案 —— Angular 的所有套件都是如此。</p>\n</div>\n<h3 id=\"lib\"><code>lib</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#lib\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anz98jck5hjb7unrpskmib877\">TypeScript 包含一組預設的宣告檔案。這些檔案包含 JavaScript 執行時和 DOM 中存在的各種通用 JavaScript 結構的環境宣告。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lwd9g109gzaeam3l2qja3ksm\">有關更多訊息，請參閱 TypeScript 指南中的<a href=\"https://www.typescriptlang.org/tsconfig#lib\">lib</a>。</p>\n<h3 id=\"installable-typings-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qq2dnur0jnwljkm10yc68nfp\">安裝型別定義檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#installable-typings-files\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8zgssyf7k1pcf3eejyn20iyc\">遺憾的是，很多函式庫 —— jQuery、Jasmine 和 Lodash 等函式庫 —— 都<em>沒有</em>在它們自己的 npm 套件中包含 <code>d.ts</code> 檔案。幸運的是，它們的作者或社群中的貢獻者已經為這些函式庫建立了獨立的 <code>d.ts</code> 檔案，並且把它們發布到了一個眾所周知的位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co8cn114iewbefntavf2m2tsx\">你可以透過 <code>npm</code> 來使用 <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\"><code>@types/*</code> 範圍化套件</a>來安裝這些型別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxzs4xuzsfl4lxsn58nd9wz3v\"><code>@types/*</code> 中自動包含哪些環境宣告檔案由 <a href=\"https://www.typescriptlang.org/tsconfig#types\">TypeScript 編譯器選項 <code>types</code></a>決定。Angular CLI 會生成一個 <code>tsconfig.app.json</code> 檔案，用於建立應用程式，其中 <code>types</code> 編譯器選項設定為 <code>[]</code> 以禁止自動包含來自 <code>@types/*</code> 的宣告。同時，<code>tsconfig.spec.json</code> 檔案用於測試並設定 <code>\"types\": [\"jasmine\"]</code> 以允許在測試中使用 Jasmine 的環境宣告。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gcsm3s08w6ddayl9ugmp08wp\">在安裝了 <code>@types/*</code> 宣告之後，你還要修改 <code>tsconfig.app.json</code> 和 <code>tsconfig.spec.json</code> 檔案，以便把新安裝的宣告檔案新增到它們的 <code>types</code> 清單中。如果這些宣告檔案只是供測試用的，那麼只要修改 <code>tsconfig.spec.json</code> 檔案就可以了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajuh3tqvi4w336e379repnnwc\">比如，要安裝 <code>chai</code> 的型別訊息，你可以執行 <code>npm install @types/chai --save-dev</code>，然後修改 <code>tsconfig.spec.json</code> 來把 <code>\"chai\"</code> 新增到 <code>types</code> 清單中。</p>\n<p><a id=\"target\"></a></p>\n<h3 id=\"target\"><code>target</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#target\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"680r8p8kzfi0vak1fxa3m6rj1\">預設情況下，編譯目標是 <code>es2022</code>。要控制 ECMA 語法，請使用 <a href=\"https://github.com/browserslist/browserslist\">Browserslist</a> 設定檔案。欲知詳情，參見<a href=\"/guide/build#configuring-browser-compatibility\">設定瀏覽器相容性</a>一章。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Oct 24 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/angular-compiler-options\n - guide/aot-compiler\n - guide/architecture-next-steps\n - guide/file-structure\n - guide/glossary\n - guide/i18n-common-add-package\n - guide/template-typecheck\n - guide/upgrade\n-->\n<!-- links from this doc:\n - /guide/build#configuring-browser-compatibility\n - guide/angular-compiler-options\n - guide/template-typecheck\n - guide/typescript-configuration#configuration-files\n - guide/typescript-configuration#installable-typings-files\n - guide/typescript-configuration#lib\n - guide/typescript-configuration#noimplicitany-and-suppressimplicitanyindexerrors\n - guide/typescript-configuration#target\n - guide/typescript-configuration#tsconfig\n - guide/typescript-configuration#typescript-configuration\n - guide/typescript-configuration#typescript-typings\n - guide/typescript-configuration#typings\n - https://github.com/browserslist/browserslist\n - https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\n - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\n - https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\n - https://www.typescriptlang.org/tsconfig#lib\n - https://www.typescriptlang.org/tsconfig#types\n-->"}
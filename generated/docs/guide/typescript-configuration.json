{"id":"guide/typescript-configuration","title":"TypeScript 配置","contents":"<div class=\"content\">\n  <h1 id=\"typescript-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"caij1clqa9cpildee2jbxepos\">TypeScript 配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-configuration\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5fy3421h5dmbvtbd39asptfj\">TypeScript 是 Angular 应用开发中使用的主语言。它是 JavaScript 的“方言”之一，为类型安全和工具化而做了设计期支持。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"92xo9j8me7p5v6t3o23la92wq\">浏览器不能直接执行 TypeScript。它得先用 <em>tsc</em> 编译器转译（transpile）成 JavaScript，而且编译器需要进行一些配置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6b3gza38ee2js6acocgywc2g5\">本页面会涵盖 TypeScript 配置与环境的某些方面，这些对 Angular 开发者是很重要的。具体来说包括下列文件：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8n2c7wfntpyw9gnmnqx5bqxht\">文件</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6s12k0hg09stitep8h23imocd\"><a href=\"guide/typescript-configuration#tsconfig\">tsconfig.json</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xwpwa9yvbwxuumq1z6a6oslf\">TypeScript编译器配置。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/typescript-configuration#typings\">typings</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79v5iq4vhqptyguz724su3kxd\">TypesScript声明文件。</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"tsconfig\"></a></p>\n<h2 id=\"configuration-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zakwpbaxpz096eh6ovpz1v3a\">配置文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#configuration-files\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e7wk06vdyd5p95c9o4x9zkvgd\">一个 Angular 工作区中包含多个 TypeScript 配置文件。在根一级，有两个主要的 TypeScript 配置文件：<code>tsconfig.json</code> 文件和 <code>tsconfig.base.json</code> 文件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"djy86xjq8xghu5k7wutklw37d\">请参阅 <a href=\"guide/angular-compiler-options\">Angular 编译器选项</a>一章，以了解可以使用哪些 Angular 特有的选项。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tjgitf174hfhj0xjopo7uv2o\">TypeScript 和 Angular 提供了很多选项，可以用来配置类型检查功能和要生成的输出。更多信息，请参阅 TypeScript 文档中的<a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">使用 extends 进行配置继承</a>部分。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bv0bwepd1ju2bszjh7iiwg6ef\">要了解 TypeScript 配置文件的详情，请参阅官方提供的 <a href=\"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript 手册</a>。要了解配置继承的详情，参阅<a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">使用 extends 进行配置继承</a>部分。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3r5vhup7r41oikx9ocqg6ep4b\">Angular 工作区的初始 <code>tsconfig.json</code> 通常是这样的。</p>\n<code-example header=\"tsconfig.json\" path=\"getting-started/tsconfig.0.json\">\n/* To learn more about this file see: https://angular.io/guide/typescript-configuration. */\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"importHelpers\": true,\n    \"target\": \"ES2022\",\n    \"module\": \"ES2022\",\n    \"useDefineForClassFields\": false,\n    \"lib\": [\n      \"ES2022\",\n      \"dom\"\n    ]\n  },\n  \"angularCompilerOptions\": {\n    \"disableTypeScriptVersionCheck\": true,\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n\n\n</code-example>\n<p><a id=\"noImplicitAny\"></a></p>\n<h3 id=\"noimplicitany-and-suppressimplicitanyindexerrors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37xkb1f40rbl9tycbc47ria1j\"><code>noImplicitAny</code> 与 <code>suppressImplicitAnyIndexErrors</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#noimplicitany-and-suppressimplicitanyindexerrors\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cavxev203qmku0ubclbfjh77q\">TypeScript 开发者们在 <code>noImplicitAny</code> 标志应该是 <code>true</code> 还是 <code>false</code> 上存在分歧。这没有标准答案，你以后还可以修改这个标志。但是你的选择会在大项目中产生显著差异，所以它值得讨论一番。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c5a3qetn0t6klwb00t19gepd4\">当 <code>noImplicitAny</code> 标志是 <code>false</code>（默认值）时，如果编译器无法根据变量的用途推断出变量的类型，它就会悄悄的把变量类型默认为 <code>any</code>。这就是<em>隐式 <code>any</code></em>的含义。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uy80njqmqrtq8cgtptaldl9o\">当 <code>noImplicitAny</code> 标志是 <code>true</code> 并且 TypeScript 编译器无法推断出类型时，它仍然会生成 JavaScript 文件。但是它也会<strong>报告一个错误</strong>。很多饱经沧桑的程序员更喜欢这种严格的设置，因为类型检查能在编译期间捕获更多意外错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dv14cu3kpp7vj7n79q8xnt28d\">即使 <code>noImplicitAny</code> 标志被设置成了 <code>true</code>，你也可以把变量的类型设置为 <code>any</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eji03pxeidldr96rq2d0tclie\">如果把 <code>noImplicitAny</code> 标志设置为了 <code>true</code>，你可能会得到<em>隐式索引错</em>。大多数程序员可能觉得<em>这种错误</em>是个烦恼而不是助力。你可以使用另一个标志来禁止它们。</p>\n<code-example>\n\n\"suppressImplicitAnyIndexErrors\": true\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yxzyg2sfqcf7f93x3e3smb9m\">要了解 TypeScript 配置如何影响编译的更多信息，请参阅 <a href=\"guide/angular-compiler-options\">Angular 编译器选项</a>和<a href=\"guide/template-typecheck\">模板类型检查</a> 两章。</p>\n</div>\n<p><a id=\"typings\"></a></p>\n<h2 id=\"typescript-typings\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3v6szkl8jcrqsff0d0ur1zc6\">TypeScript 类型定义（typings）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-typings\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d4co2qqq028s6ienz6d9osern\">很多 JavaScript 库，比如 jQuery、Jasmine 测试库和 Angular，会通过新的特性和语法来扩展 JavaScript 环境。而 TypeScript 编译器并不能原生的识别它们。当编译器不能识别时，它就会抛出一个错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8674a23v4z5bah5grne57qbfe\">可以使用<a href=\"https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\">TypeScript 类型定义文件</a> —— <code>.d.ts</code> 文件 —— 来告诉编译器你要加载的库的类型定义。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bsqg7h9geny6l9yx0lwz3bnse\">TypeScript 敏感的编辑器借助这些定义文件来显示这些库中各个特性的类型定义。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4itfu7yt6p3skra3c0t5ub1hb\">很多库在自己的 npm 包中都包含了它们的类型定义文件，TypeScript 编译器和编辑器都能找到它们。Angular 库也是这样的。任何 Angular 应用程序的 <code>node_modules/@angular/core/</code> 目录下，都包含几个 <code>d.ts</code> 文件，它们描述了 Angular 的各个部分。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"69kh6uikp973jby37ohfpj5ib\">你不需要为那些包含了 <code>d.ts</code> 文件的库获取<em>类型定义</em>文件 —— Angular 的所有包都是如此。</p>\n</div>\n<h3 id=\"lib\"><code>lib</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#lib\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anz98jck5hjb7unrpskmib877\">TypeScript 包含一组默认的声明文件。这些文件包含 JavaScript 运行时和 DOM 中存在的各种通用 JavaScript 结构的环境声明。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lwd9g109gzaeam3l2qja3ksm\">有关更多信息，请参阅 TypeScript 指南中的<a href=\"https://www.typescriptlang.org/tsconfig#lib\">lib</a>。</p>\n<h3 id=\"installable-typings-files\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7qq2dnur0jnwljkm10yc68nfp\">安装类型定义文件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#installable-typings-files\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e8zgssyf7k1pcf3eejyn20iyc\">遗憾的是，很多库 —— jQuery、Jasmine 和 Lodash 等库 —— 都<em>没有</em>在它们自己的 npm 包中包含 <code>d.ts</code> 文件。幸运的是，它们的作者或社区中的贡献者已经为这些库创建了独立的 <code>d.ts</code> 文件，并且把它们发布到了一个众所周知的位置。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"co8cn114iewbefntavf2m2tsx\">你可以通过 <code>npm</code> 来使用 <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\"><code>@types/*</code> 范围化包</a>来安装这些类型。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxzs4xuzsfl4lxsn58nd9wz3v\"><code>@types/*</code> 中自动包含哪些环境声明文件由 <a href=\"https://www.typescriptlang.org/tsconfig#types\">TypeScript 编译器选项 <code>types</code></a>决定。Angular CLI 会生成一个 <code>tsconfig.app.json</code> 文件，用于构建应用程序，其中 <code>types</code> 编译器选项设置为 <code>[]</code> 以禁止自动包含来自 <code>@types/*</code> 的声明。同时，<code>tsconfig.spec.json</code> 文件用于测试并设置 <code>\"types\": [\"jasmine\"]</code> 以允许在测试中使用 Jasmine 的环境声明。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"gcsm3s08w6ddayl9ugmp08wp\">在安装了 <code>@types/*</code> 声明之后，你还要修改 <code>tsconfig.app.json</code> 和 <code>tsconfig.spec.json</code> 文件，以便把新安装的声明文件添加到它们的 <code>types</code> 列表中。如果这些声明文件只是供测试用的，那么只要修改 <code>tsconfig.spec.json</code> 文件就可以了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajuh3tqvi4w336e379repnnwc\">比如，要安装 <code>chai</code> 的类型信息，你可以执行 <code>npm install @types/chai --save-dev</code>，然后修改 <code>tsconfig.spec.json</code> 来把 <code>\"chai\"</code> 添加到 <code>types</code> 列表中。</p>\n<p><a id=\"target\"></a></p>\n<h3 id=\"target\"><code>target</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#target\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"680r8p8kzfi0vak1fxa3m6rj1\">默认情况下，编译目标是 <code>es2022</code>。要控制 ECMA 语法，请使用 <a href=\"https://github.com/browserslist/browserslist\">Browserslist</a> 配置文件。欲知详情，参见<a href=\"/guide/build#configuring-browser-compatibility\">配置浏览器兼容性</a>一章。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Oct 24 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/angular-compiler-options\n - guide/aot-compiler\n - guide/architecture-next-steps\n - guide/file-structure\n - guide/glossary\n - guide/i18n-common-add-package\n - guide/template-typecheck\n - guide/upgrade\n-->\n<!-- links from this doc:\n - /guide/build#configuring-browser-compatibility\n - guide/angular-compiler-options\n - guide/template-typecheck\n - guide/typescript-configuration#configuration-files\n - guide/typescript-configuration#installable-typings-files\n - guide/typescript-configuration#lib\n - guide/typescript-configuration#noimplicitany-and-suppressimplicitanyindexerrors\n - guide/typescript-configuration#target\n - guide/typescript-configuration#tsconfig\n - guide/typescript-configuration#typescript-configuration\n - guide/typescript-configuration#typescript-typings\n - guide/typescript-configuration#typings\n - https://github.com/browserslist/browserslist\n - https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\n - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\n - https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\n - https://www.typescriptlang.org/tsconfig#lib\n - https://www.typescriptlang.org/tsconfig#types\n-->"}
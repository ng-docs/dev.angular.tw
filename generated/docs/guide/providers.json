{"id":"guide/providers","title":"在模組中提供依賴","contents":"<div class=\"content\">\n  <h1 id=\"providing-dependencies-in-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c711uy96a1xftu25eke96bvi3\">在模組中提供依賴<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#providing-dependencies-in-modules\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"botcs6uakar1htbs3rfglv0g\">提供者就是一本說明書，用來指導<a href=\"guide/dependency-injection\">依賴注入</a>系統該如何獲取某個依賴的值。大多數情況下，這些依賴就是你要建立和提供的那些服務。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"414newwqoazql7uug6di1s6bt\">要想檢視本頁提到的這個帶有屬性模組的範例應用，參閱 <live-example></live-example>。</p>\n<h2 id=\"providing-a-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqbndmh59jdanzp44olf38bqa\">提供服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#providing-a-service\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"k1jueb1ign5ie353f25492rv\">如果你是用 <a href=\"cli\">Angular CLI</a> 建立的應用，那麼可以使用下列 CLI 的 <a href=\"cli/generate\"><code>ng generate</code></a> 指令在專案根目錄下建立一個服務。把其中的 <code>User</code> 替換成你的服務名。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service User\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zld9njgshrbhvr99uzfqcmbp\">該指令會建立下列 <code>UserService</code> 骨架：</p>\n<code-example header=\"src/app/user.service.ts\" path=\"providers/src/app/user.service.0.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class UserService {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhnl3vylbhc3nhlz68d3uf2ng\">現在，你就可以在應用中到處注入 <code>UserService</code> 了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ti60uu4dulsbycz6ic530zm8\">該服務本身是 CLI 建立的一個類，並且加上了 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器。預設情況下，該裝飾器是用 <code>providedIn</code> 屬性進行設定的，它會為該服務建立一個提供者。在這個例子中，<code>providedIn: 'root'</code> 指定 Angular 應該在根注入器中提供該服務。</p>\n<h2 id=\"provider-scope\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1v52y51wo5zeaxywqzof5ft6k\">提供者的作用域<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#provider-scope\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1br4paltkl5qtgfka32g1a0q\">當你把服務提供者新增到應用的根注入器中時，它就在整個應用程式中可用了。另外，這些服務提供者也同樣對整個應用中的類是可用的 —— 只要它們有供查詢用的服務令牌。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7z8ogmfqrnr8t09ikmn8gyomo\">你應該始終在根注入器中提供這些服務 —— 除非你希望該服務只有在消費方要匯入特定的 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 時才生效。</p>\n<h2 id=\"limiting-provider-scope-by-lazy-loading-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zrrzcu38os8yr0jqt35u4jhc\">使用延遲載入模組限制提供者的作用域<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#limiting-provider-scope-by-lazy-loading-modules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ug7ln3y4sreicsqwfpp0e4rn\">在 CLI 生成的基本應用中，模組是急性載入的，這意味著它們都是由本應用啟動的，Angular 會使用一個依賴注入體系來讓一切服務都在模組間有效。對於急性載入式應用，應用中的根注入器會讓所有服務提供者都對整個應用有效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42pjzp6f7y6zotbdpolj6pbor\">當使用延遲載入時，這種行為需要進行改變。延遲載入就是只有當需要時才載入模組，比如路由中。它們沒辦法像急性載入模組那樣進行載入。這意味著，在它們的 <code>providers</code> 陣列中列出的服務都是不可用的，因為根注入器並不知道這些模組。</p>\n<!--todo: KW--Make diagram here -->\n<!--todo: KW--per Misko: not clear if the lazy modules are siblings or grand-children. They are both depending on router structure. -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37xodrc3glseti0nsjv1y4rc\">當 Angular 的路由器延遲載入一個模組時，它會建立一個新的注入器。這個注入器是應用的根注入器的一個子注入器。想象一棵注入器樹，它有唯一的根注入器，而每一個延遲載入模組都有一個自己的子注入器。這個子注入器會操縱所有特定於此模組的提供者，如果有的話。可以遵循這份<a href=\"guide/hierarchical-dependency-injection#resolution-rules\">多級依賴注入規則</a>來了解每個提供者的解析過程。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nkmuz6z1hgv8816a9v0yc28k\">任何在延遲載入模組的上下文中建立的元件（比如路由導向），都會獲取由子注入器提供的服務的區域性實例，而不是應用的根注入器中的實例。而外部模組中的元件，仍然會收到來自於應用的根注入器建立的實例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d94ys2mnsooe7z585akewq7se\">雖然你可以使用延遲載入模組來提供實例，但不是所有的服務都能延遲載入。比如，像路由之類的模組只能在根模組中使用。路由器需要使用瀏覽器中的全域物件 <code>location</code> 進行工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7lqecophmxl5xv4c2swyhhfj\">從 Angular 9 開始，你可以在每個延遲載入模組中提供服務的新實例。下列程式碼把此功能新增到 <code>UserService</code> 中。</p>\n<code-example header=\"src/app/user.service.ts\" path=\"providers/src/app/user.service.2.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'any',\n})\nexport class UserService {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aj9x8a4gfdcctoi46132qh84y\">透過使用 <code>providedIn: 'any'</code>，所有急性載入的模組都會共享同一個服務單例，不過，延遲載入模組各自有它們自己獨有的單例。如下所示。</p>\n<div class=\"lightbox\">\n<img alt=\"any-provider-scope\" class=\"left\" src=\"generated/images/guide/providers/any-provider.svg\" width=\"607\" height=\"389\">\n</div>\n<h2 id=\"limiting-provider-scope-with-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9i9pygcxdrpwxn9o8ym477mv3\">使用元件限定服務提供者的作用域<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#limiting-provider-scope-with-components\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ru65z677yc0uv1v0lta8s8g2\">另一種限定提供者作用域的方式是把要限定的服務新增到元件的 <code>providers</code> 陣列中。元件中的提供者和 NgModule 中的提供者是彼此獨立的。當你要急性載入一個自帶了全部所需服務的模組時，這種方式是有幫助的。在元件中提供服務，會限定該服務只能在該組件及其子元件中有效，而同一模組中的其它元件不能訪問它。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"providers/src/app/app.component.ts\" region=\"component-providers\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  /* . . . */\n  providers: [UserService]\n})\n\n</code-example>\n<h2 id=\"providing-services-in-modules-vs-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"at1tsh98fkinvtxow6vmegwwz\">在模組中提供服務還是在元件中？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#providing-services-in-modules-vs-components\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94cw1kegku4155wxvwrugs202\">通常，要在根模組中提供整個應用都需要的服務，在延遲載入模組中提供限定範圍的服務。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bkfct3bjnra9ee31og91t0ym\">路由器工作在根級，所以如果你把服務提供者放進元件（即使是 <code>AppComponent</code>）中，那些依賴於路由器的延遲載入模組，將無法看到它們。</p>\n<!-- KW--Make a diagram here -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3r8w7lvajgn460i800jw7z4wn\">當你必須把一個服務實例的作用域限定到元件及其元件樹中時，可以使用元件註冊一個服務提供者。比如，使用者編輯元件 <code>UserEditorComponent</code>，它需要一個快取 <code>UserService</code> 實例，那就應該把 <code>UserService</code> 註冊進 <code>UserEditorComponent</code> 中。然後，每個 <code>UserEditorComponent</code> 的實例都會獲取它自己的快取服務實例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ajf9hyno9m2n3w0sj9lf4q4n\"><a id=\"singleton-services\"></a>\n<a id=\"component-child-injectors\"></a></p>\n<h2 id=\"injector-hierarchy-and-service-instances\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ixcs7kjxkkbersh01ei5g5bd\">多級注入器和服務實例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#injector-hierarchy-and-service-instances\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clt26jihrnr4brxqsmqakb14a\">服務都是某個注入器範圍內的單例，這意味著在給定的注入器中最多有一個服務實例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5m1wgo5b69ycbsykzl6tyugh4\">Angular DI 具有<a href=\"guide/hierarchical-dependency-injection\">多級注入體系</a>，這意味著巢狀的注入器可以建立自己的服務實例。<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 指定的 <code>providers</code> 的元件的新實例時，它也會為該實例建立一個新的子注入器。同樣，當在執行時延遲載入新的 NgModule 時，Angular 可以使用其自己的提供者為其建立注入器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"737brhzhxn3vrzau03yy1v2sc\">子模組注入器和元件注入器彼此獨立，併為已提供的服務建立它們自己的單獨實例。當 Angular 銷燬 NgModule 或元件實例時，它也會銷燬該注入器和該注入器的服務實例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21uu429nzsl78dvz3ifdw58u5\">欲知詳情，請參見<a href=\"guide/hierarchical-dependency-injection\">分層注入器</a>。</p>\n<h2 id=\"more-on-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpukz8usqrzb3byrzbogm52l\">關於 NgModule 的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ho2p43rev7e4non44xvp10gw\">你還可能對下列內容感興趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2j0n5ar56s63jdyekb5wcxvzl\"><a href=\"guide/singleton-services\">單例服務</a>詳細解釋了本頁包含的那些概念</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n61fq4bh64oca64ah92fj77g\"><a href=\"guide/lazy-loading-ngmodules\">延遲載入模組</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6agro5h5b9xusnybyzfkvez7o\"><a href=\"guide/dependency-injection-providers\">依賴提供者</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lvx2smj79lwdeup8531yjvm4\"><a href=\"guide/ngmodule-faq\">NgModule 常見問題</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/bootstrapping\n - guide/example-apps-list\n - guide/feature-modules\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/ngmodule-api\n - guide/ngmodules\n - guide/sharing-ngmodules\n - tutorial/tour-of-heroes/toh-pt4\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - cli\n - cli/generate\n - guide/dependency-injection\n - guide/dependency-injection-providers\n - guide/hierarchical-dependency-injection\n - guide/hierarchical-dependency-injection#resolution-rules\n - guide/lazy-loading-ngmodules\n - guide/ngmodule-faq\n - guide/providers#injector-hierarchy-and-service-instances\n - guide/providers#limiting-provider-scope-by-lazy-loading-modules\n - guide/providers#limiting-provider-scope-with-components\n - guide/providers#more-on-ngmodules\n - guide/providers#provider-scope\n - guide/providers#providing-a-service\n - guide/providers#providing-dependencies-in-modules\n - guide/providers#providing-services-in-modules-vs-components\n - guide/singleton-services\n-->"}
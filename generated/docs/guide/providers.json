{"id":"guide/providers","title":"在模块中提供依赖","contents":"<div class=\"content\">\n  <h1 id=\"providing-dependencies-in-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c711uy96a1xftu25eke96bvi3\">在模块中提供依赖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#providing-dependencies-in-modules\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"botcs6uakar1htbs3rfglv0g\">提供者就是一本说明书，用来指导<a href=\"guide/dependency-injection\">依赖注入</a>系统该如何获取某个依赖的值。大多数情况下，这些依赖就是你要创建和提供的那些服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"414newwqoazql7uug6di1s6bt\">要想查看本页提到的这个带有特性模块的范例应用，参阅 <live-example></live-example>。</p>\n<h2 id=\"providing-a-service\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bqbndmh59jdanzp44olf38bqa\">提供服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#providing-a-service\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"k1jueb1ign5ie353f25492rv\">如果你是用 <a href=\"cli\">Angular CLI</a> 创建的应用，那么可以使用下列 CLI 的 <a href=\"cli/generate\"><code>ng generate</code></a> 命令在项目根目录下创建一个服务。把其中的 <code>User</code> 替换成你的服务名。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service User\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zld9njgshrbhvr99uzfqcmbp\">该命令会创建下列 <code>UserService</code> 骨架：</p>\n<code-example header=\"src/app/user.service.ts\" path=\"providers/src/app/user.service.0.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class UserService {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhnl3vylbhc3nhlz68d3uf2ng\">现在，你就可以在应用中到处注入 <code>UserService</code> 了。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ti60uu4dulsbycz6ic530zm8\">该服务本身是 CLI 创建的一个类，并且加上了 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器。默认情况下，该装饰器是用 <code>providedIn</code> 属性进行配置的，它会为该服务创建一个提供者。在这个例子中，<code>providedIn: 'root'</code> 指定 Angular 应该在根注入器中提供该服务。</p>\n<h2 id=\"provider-scope\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1v52y51wo5zeaxywqzof5ft6k\">提供者的作用域<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#provider-scope\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c1br4paltkl5qtgfka32g1a0q\">当你把服务提供者添加到应用的根注入器中时，它就在整个应用程序中可用了。另外，这些服务提供者也同样对整个应用中的类是可用的 —— 只要它们有供查找用的服务令牌。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7z8ogmfqrnr8t09ikmn8gyomo\">你应该始终在根注入器中提供这些服务 —— 除非你希望该服务只有在消费方要导入特定的 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 时才生效。</p>\n<h2 id=\"limiting-provider-scope-by-lazy-loading-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"zrrzcu38os8yr0jqt35u4jhc\">使用惰性加载模块限制提供者的作用域<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#limiting-provider-scope-by-lazy-loading-modules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ug7ln3y4sreicsqwfpp0e4rn\">在 CLI 生成的基本应用中，模块是急性加载的，这意味着它们都是由本应用启动的，Angular 会使用一个依赖注入体系来让一切服务都在模块间有效。对于急性加载式应用，应用中的根注入器会让所有服务提供者都对整个应用有效。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42pjzp6f7y6zotbdpolj6pbor\">当使用惰性加载时，这种行为需要进行改变。惰性加载就是只有当需要时才加载模块，比如路由中。它们没办法像急性加载模块那样进行加载。这意味着，在它们的 <code>providers</code> 数组中列出的服务都是不可用的，因为根注入器并不知道这些模块。</p>\n<!--todo: KW--Make diagram here -->\n<!--todo: KW--per Misko: not clear if the lazy modules are siblings or grand-children. They are both depending on router structure. -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37xodrc3glseti0nsjv1y4rc\">当 Angular 的路由器惰性加载一个模块时，它会创建一个新的注入器。这个注入器是应用的根注入器的一个子注入器。想象一棵注入器树，它有唯一的根注入器，而每一个惰性加载模块都有一个自己的子注入器。这个子注入器会操纵所有特定于此模块的提供者，如果有的话。可以遵循这份<a href=\"guide/hierarchical-dependency-injection#resolution-rules\">多级依赖注入规则</a>来了解每个提供者的解析过程。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nkmuz6z1hgv8816a9v0yc28k\">任何在惰性加载模块的上下文中创建的组件（比如路由导航），都会获取由子注入器提供的服务的局部实例，而不是应用的根注入器中的实例。而外部模块中的组件，仍然会收到来自于应用的根注入器创建的实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d94ys2mnsooe7z585akewq7se\">虽然你可以使用惰性加载模块来提供实例，但不是所有的服务都能惰性加载。比如，像路由之类的模块只能在根模块中使用。路由器需要使用浏览器中的全局对象 <code>location</code> 进行工作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7lqecophmxl5xv4c2swyhhfj\">从 Angular 9 开始，你可以在每个惰性加载模块中提供服务的新实例。下列代码把此功能添加到 <code>UserService</code> 中。</p>\n<code-example header=\"src/app/user.service.ts\" path=\"providers/src/app/user.service.2.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'any',\n})\nexport class UserService {\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aj9x8a4gfdcctoi46132qh84y\">通过使用 <code>providedIn: 'any'</code>，所有急性加载的模块都会共享同一个服务单例，不过，惰性加载模块各自有它们自己独有的单例。如下所示。</p>\n<div class=\"lightbox\">\n<img alt=\"any-provider-scope\" class=\"left\" src=\"generated/images/guide/providers/any-provider.svg\" width=\"607\" height=\"389\">\n</div>\n<h2 id=\"limiting-provider-scope-with-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9i9pygcxdrpwxn9o8ym477mv3\">使用组件限定服务提供者的作用域<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#limiting-provider-scope-with-components\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ru65z677yc0uv1v0lta8s8g2\">另一种限定提供者作用域的方式是把要限定的服务添加到组件的 <code>providers</code> 数组中。组件中的提供者和 NgModule 中的提供者是彼此独立的。当你要急性加载一个自带了全部所需服务的模块时，这种方式是有帮助的。在组件中提供服务，会限定该服务只能在该组件及其子组件中有效，而同一模块中的其它组件不能访问它。</p>\n<code-example header=\"src/app/app.component.ts\" path=\"providers/src/app/app.component.ts\" region=\"component-providers\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  /* . . . */\n  providers: [UserService]\n})\n\n</code-example>\n<h2 id=\"providing-services-in-modules-vs-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"at1tsh98fkinvtxow6vmegwwz\">在模块中提供服务还是在组件中？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#providing-services-in-modules-vs-components\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"94cw1kegku4155wxvwrugs202\">通常，要在根模块中提供整个应用都需要的服务，在惰性加载模块中提供限定范围的服务。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bkfct3bjnra9ee31og91t0ym\">路由器工作在根级，所以如果你把服务提供者放进组件（即使是 <code>AppComponent</code>）中，那些依赖于路由器的惰性加载模块，将无法看到它们。</p>\n<!-- KW--Make a diagram here -->\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3r8w7lvajgn460i800jw7z4wn\">当你必须把一个服务实例的作用域限定到组件及其组件树中时，可以使用组件注册一个服务提供者。比如，用户编辑组件 <code>UserEditorComponent</code>，它需要一个缓存 <code>UserService</code> 实例，那就应该把 <code>UserService</code> 注册进 <code>UserEditorComponent</code> 中。然后，每个 <code>UserEditorComponent</code> 的实例都会获取它自己的缓存服务实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ajf9hyno9m2n3w0sj9lf4q4n\"><a id=\"singleton-services\"></a>\n<a id=\"component-child-injectors\"></a></p>\n<h2 id=\"injector-hierarchy-and-service-instances\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ixcs7kjxkkbersh01ei5g5bd\">多级注入器和服务实例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#injector-hierarchy-and-service-instances\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"clt26jihrnr4brxqsmqakb14a\">服务都是某个注入器范围内的单例，这意味着在给定的注入器中最多有一个服务实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5m1wgo5b69ycbsykzl6tyugh4\">Angular DI 具有<a href=\"guide/hierarchical-dependency-injection\">多级注入体系</a>，这意味着嵌套的注入器可以创建自己的服务实例。<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 指定的 <code>providers</code> 的组件的新实例时，它也会为该实例创建一个新的子注入器。同样，当在运行时惰性加载新的 NgModule 时，Angular 可以使用其自己的提供者为其创建注入器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"737brhzhxn3vrzau03yy1v2sc\">子模块注入器和组件注入器彼此独立，并为已提供的服务创建它们自己的单独实例。当 Angular 销毁 NgModule 或组件实例时，它也会销毁该注入器和该注入器的服务实例。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21uu429nzsl78dvz3ifdw58u5\">欲知详情，请参见<a href=\"guide/hierarchical-dependency-injection\">分层注入器</a>。</p>\n<h2 id=\"more-on-ngmodules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4zpukz8usqrzb3byrzbogm52l\">关于 NgModule 的更多知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/providers#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ho2p43rev7e4non44xvp10gw\">你还可能对下列内容感兴趣：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2j0n5ar56s63jdyekb5wcxvzl\"><a href=\"guide/singleton-services\">单例服务</a>详细解释了本页包含的那些概念</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6n61fq4bh64oca64ah92fj77g\"><a href=\"guide/lazy-loading-ngmodules\">惰性加载模块</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6agro5h5b9xusnybyzfkvez7o\"><a href=\"guide/dependency-injection-providers\">依赖提供者</a></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5lvx2smj79lwdeup8531yjvm4\"><a href=\"guide/ngmodule-faq\">NgModule 常见问题</a></li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/bootstrapping\n - guide/example-apps-list\n - guide/feature-modules\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/ngmodule-api\n - guide/ngmodules\n - guide/sharing-ngmodules\n - tutorial/tour-of-heroes/toh-pt4\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - cli\n - cli/generate\n - guide/dependency-injection\n - guide/dependency-injection-providers\n - guide/hierarchical-dependency-injection\n - guide/hierarchical-dependency-injection#resolution-rules\n - guide/lazy-loading-ngmodules\n - guide/ngmodule-faq\n - guide/providers#injector-hierarchy-and-service-instances\n - guide/providers#limiting-provider-scope-by-lazy-loading-modules\n - guide/providers#limiting-provider-scope-with-components\n - guide/providers#more-on-ngmodules\n - guide/providers#provider-scope\n - guide/providers#providing-a-service\n - guide/providers#providing-dependencies-in-modules\n - guide/providers#providing-services-in-modules-vs-components\n - guide/singleton-services\n-->"}
{"id":"guide/change-detection-zone-pollution","title":"解决区域（Zone）污染","contents":"<div class=\"content\">\n  <h1 id=\"resolving-zone-pollution\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gjquylafri3fdypvcetqn4p6\">解决区域（Zone）污染<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#resolving-zone-pollution\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nww2a4wkljfds3t7osnrbrne\"><strong>Zone.js</strong>是一种信号机制，Angular 用它来检测应用程序状态何时可能已更改。它捕获异步操作，比如 <code>setTimeout</code>、网络请求和事件侦听器。Angular 会根据来自 Zone.js 的信号安排变更检测</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cmckjag2j2aznkbfahwyaq4uy\">在某些情况下，已安排的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#tasks\">任务</a>或<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#microtasks\">微任务</a>不会对数据模型进行任何更改，这使得运行变更检测变得不必要。常见的例子是：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6c3f17kgk05kplih1tzehgsi9\"><code>requestAnimationFrame</code> 、 <code>setTimeout</code> 或 <code>setInterval</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dc5kiwqikk3hfo1mp1rfjlt0p\">第三方库的任务或微任务调度</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68934pw06e0w5vcyie166q92y\">本节介绍如何识别此类条件，以及如何在 Angular 区域外运行代码以避免不必要的变更检测调用。</p>\n<h2 id=\"identifying-unnecessary-change-detection-calls\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5arwhfhc29lmqdot3ggcqytxq\">识别不必要的变更检测调用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#identifying-unnecessary-change-detection-calls\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5knipzjbvhxtu0yh1rd7yfkug\">你可以用 Angular DevTools 检测不必要的变更检测调用。它们通常在分析器的时间线中显示为连续的条形，其源为 <code>setTimeout</code>、<code>setInterval</code>、<code>requestAnimationFrame</code> 或事件处理程序。当你在应用程序中对这些 API 的调用有限时，变更检测调用通常是由第三方库引起的。</p>\n<div class=\"lightbox\">\n  <img alt=\"Angular DevTools profiler preview showing Zone pollution\" src=\"generated/images/guide/change-detection/zone-pollution.png\" width=\"1600\" height=\"480\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ik3erzlhtuzpqudb9d4wi1rj\">在上图中，有一系列由与元素关联的事件处理程序触发的变更检测调用。这是使用第三方非原生 Angular 组件时的常见挑战，这些组件不会更改 <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 的默认行为。</p>\n<h2 id=\"run-tasks-outside-ngzone\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ayncjuc1hospjlfavkq8t40vt\">在 <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 之外运行任务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#run-tasks-outside-ngzone\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dgescoqtc0f1wcxhoc4g9jqc\">在这种情况下，你可以指示 Angular 避免为由给定代码块调度的任务调用变更检测，使用\n<a href=\"/api/core/NgZone\">NgZone</a>。</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>(...)\nclass AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>) {}\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() =&gt; setInterval(pollForUpdates), 500);\n  }\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cylwgikw7gm9i3magj944k49y\">上面的代码段告诉 Angular 要在 Angular Zone 之外执行 <code>setInterval</code> 调用，并在 <code>pollForUpdates</code> 运行之后跳过运行变更检测。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6yfc4d4bvfrhj0yd1e0att8zx\">第三方库通常会触发不必要的变更检测周期，因为它们在创作时并没有考虑到 Zone.js。通过调用 Angular 区域外的库 API 来避免这些额外的周期：</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport * as Plotly from 'plotly.js-dist-min';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>(...)\nclass AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>) {}\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() =&gt; {\n      Plotly.newPlot('chart', data);\n    });\n  }\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5cvhogxf5z8oif4ce6ds2m5e2\">在 <code>runOutsideAngular</code> 中运行 <code>Plotly.newPlot('chart', data);</code> 会告诉框架它不应该在执行此初始化逻辑安排的这些任务之后执行变更检测。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5uxg4bpn3m37f1k7o6oxnscb9\">比如，如果 <code>Plotly.newPlot('chart', data)</code> 将事件侦听器添加到 DOM 元素，则 Angular 将不会在执行其处理程序之后执行变更检测。</p>\n\n  <div class=\"reviewed\">最后复查时间：Wed May 04 2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /api/core/NgZone\n - api/core/Component\n - api/core/NgZone\n - api/core/OnInit\n - guide/change-detection-zone-pollution#identifying-unnecessary-change-detection-calls\n - guide/change-detection-zone-pollution#resolving-zone-pollution\n - guide/change-detection-zone-pollution#run-tasks-outside-ngzone\n - https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#microtasks\n - https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#tasks\n-->"}
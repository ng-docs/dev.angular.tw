{"id":"guide/structural-directives","title":"結構型指令","contents":"<div class=\"content\">\n  <h1 id=\"structural-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59lj2adjv35bjs3nghyd6twal\">結構型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#structural-directives\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kra4mrtbm951i32shcjnjdo2\">本指南是關於結構指令的，並提供了有關此類別指令的工作方式、Angular 如何解釋它們的速記語法以及如何新增範本保護屬性以捕獲範本型別錯誤的概念訊息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jkvsnixn07otpcn1mdybit8i\">結構指令是透過新增和刪除 DOM 元素來更改 DOM 佈局的指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9afkqzo8t5zvlq7bj0iqt78h5\">Angular 提供了一組內建的結構指令（例如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 、 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 、 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 等），在所有 Angular 專案中通用。有關更多訊息，請參閱<a href=\"guide/built-in-directives\">內建指令</a>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8wffcx2v0zn88t2qwd9l03hxo\">對於本頁面介紹的範例應用程式，請參閱<live-example name=\"structural-directives\"></live-example>.</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2y35c89evtn7gak1r81882ncx\"><a id=\"shorthand\"></a>\n<a id=\"asterisk\"></a></p>\n<h2 id=\"structural-directive-shorthand\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1sihb7la17m64uvph58hqo1ci\">結構型指令簡寫形式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#structural-directive-shorthand\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8b06o45ngo25y4mst22ucxgcx\">應用結構指令時，它們通常以星號 <code>*</code> 為字首，例如 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>。本約定是 Angular 解釋並轉換為更長形式的速記。Angular 會將結構指令前面的星號轉換為圍繞宿主元素及其後代的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zpvkb4n6gwj1q5q6i6khtayw\">例如，讓我們採取以下程式碼，如果 <code>hero</code> 存在，則使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 來顯示英雄的名字：</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (asterisk)\" region=\"asterisk\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\" class=\"name\"&gt;{{hero.name}}&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7j41fmky2q9i800d3mbk2b9ve\">Angular 建立一個 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素，並將 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令應用於它，在那裡它成為方括號中的屬性繫結 <code>[<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]</code>。然後，<code>&lt;div&gt;</code> 的其餘部分（包括其 class 屬性）會在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 中移動：</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (ngif-template)\" region=\"ngif-template\">\n&lt;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"hero\"&gt;\n  &lt;div class=\"name\"&gt;{{hero.name}}&lt;/div&gt;\n&lt;/ng-template&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ptdcyii7vp4j5hnp3z4jk073\">請注意，Angular 實際上並沒有建立真正的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素，而是僅渲染 <code>&lt;div&gt;</code> 元素。</p>\n<code-example language=\"html\">\n&lt;div _ngcontent-c0&gt;Mr. Nice&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adr204t3sv5xewmw8zrn3muhx\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中的星號的簡寫形式與非簡寫的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 形式進行比較：</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (inside-ngfor)\" region=\"inside-ngfor\">\n&lt;div\n  *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes; let i=index; let odd=odd; trackBy: trackById\"\n  [class.odd]=\"odd\"&gt;\n  ({{i}}) {{hero.name}}\n&lt;/div&gt;\n\n&lt;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> let-hero [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\"\n  let-i=\"index\" let-odd=\"odd\" [ngForTrackBy]=\"trackById\"&gt;\n  &lt;div [class.odd]=\"odd\"&gt;\n    ({{i}}) {{hero.name}}\n  &lt;/div&gt;\n&lt;/ng-template&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54u4o4bsjc56az6t7c6um0ea9\">在這裡，與 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 結構指令相關的所有內容都被移動到 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>。元素上的所有其他繫結和屬性都適用於 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 中的 <code>&lt;div&gt;</code> 元素。當元素在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 中移動時，宿主元素上的其他修飾符（除了 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 字串）會保持在原位。在此範例中，<code>[class.odd]=\"odd\"</code> 保留在 <code>&lt;div&gt;</code> 上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3t8ubo9jc3uslpprbwl9swlld\"><code>let</code> 關鍵字會宣告一個範本輸入變數，你可以在範本中引用該變數。在這個例子中，是 <code>hero</code>、<code>i</code> 和 <code>odd</code>。解析器將 <code>let hero</code>、<code>let i</code> 和 <code>let odd</code> 轉換為名為 <code>let-hero</code>、<code>let-i</code> 和 <code>let-odd</code> 的變數。<code>let-i</code> 和 <code>let-odd</code> 變數變為 <code>let i=index</code> 和 <code>let odd=odd</code>。Angular 會將 <code>i</code> 和 <code>odd</code> 設定為上下文中 <code>index</code> 和 <code>odd</code> 屬性的當前值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ri6dyq25vnsk37esfyouxxui\">解析器將 PascalCase 應用於所有指令，並以指令的屬性名稱為字首，例如 ngFor。例如，<code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 輸入屬性 <code>of</code> 和 <code>trackBy</code> 對映到 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a></code> 和 <code>ngForTrackBy</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bn8354vmyxxlb4gvc33b2yva8\">當 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 指令遍歷清單時，它會設定和重置其自己的上下文物件的屬性。這些屬性可以包括但不限於 <code>index</code> 、 <code>odd</code> 和名為 <code>$implicit</code> 的特殊屬性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhgvhhe974wfd196ba56d1imz\">Angular 會將 <code>let-hero</code> 設定為上下文的 <code>$implicit</code> 屬性的值，<code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 已經將其初始化為當前正在迭代的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ub0aqc9rdya3t9lx9qss840w\">有關更多訊息，請參見 <a href=\"api/common/NgForOf\" title=\"API：NgFor\">NgFor API</a> 和 <a href=\"api/common/NgForOf\">NgForOf API</a> 文件。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nfidf0fagbu20rd75300tmu9\">請注意，Angular 的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素定義了一個預設不渲染任何內容的範本，如果你只是在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 中包裝元素而不應用結構指令，則不會渲染這些元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cb6vogh1j66thzgci5yz9va8g\">有關更多訊息，請參閱<a href=\"api/core/ng-template\">ng-template API</a>文件。</p>\n</div>\n<p><a id=\"one-per-element\"></a></p>\n<h2 id=\"one-structural-directive-per-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bok1mve03gbluvbhqk2zekkor\">每個元素一個結構指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#one-structural-directive-per-element\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b68k0eq709e0ewdyr9hryph9e\">重複一個 HTML 區塊是一個很常見的用例，但前提是在特定條件為真時。一種直觀的方法是將 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 和 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 放在同一個元素上。但是，由於 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 和 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 都是結構指令，因此編譯器會將其視為錯誤。你只能將一個 <em> 結構 </em> 指令應用於一個元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e246rafpz2zx6fvhr7x4muovx\">原因是簡單。結構指令可以用宿主元素及其後代做複雜的事情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25c9hy8sgpvew1p38bk0k3vgn\">當兩個指令都聲稱使用了同一個宿主元素時，哪一個應該優先？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7jzm4grensh84lbb636chqgy\">哪個應該先走，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 或 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> ？ <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 可以取消 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 的效果嗎？如果是這樣（看起來應該是這樣），Angular 應該如何概括其他結構指令的取消能力？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77thuujdzojlelgvcbsowhkiz\">這些問題沒有簡單的答案。禁止多個結構指令使它們沒有實際意義。這個用例有一個簡單的解決方案：將 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 放在包裝 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 元素的容器元素上。一個或兩個元素可以是 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code>，以便不會生成額外的 DOM 元素。</p>\n<p><a id=\"unless\"></a></p>\n<h2 id=\"creating-a-structural-directive\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vm1te90yw2758g6abyrc10ys\">建立結構型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#creating-a-structural-directive\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lzjzw51pncr64y4ossyf1jx0\">本節將指導你建立 <code>UnlessDirective</code> 以及如何設定 <code>condition</code> 值。<code>UnlessDirective</code> 與 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 相反，並且 <code>condition</code> 值可以設定為 <code>true</code> 或 <code>false</code>。<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 為 <code>true</code> 時顯示範本內容；而 <code>UnlessDirective</code> 在這個條件為 <code>false</code> 時顯示內容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fsykpxroln4lbvcnhwyevjhl\">以下是應用於 p 元素的 <code>UnlessDirective</code> 選擇器 <code>appUnless</code> 當 <code>condition</code> 為 <code>false</code>，瀏覽器將顯示該句子。</p>\n<code-example header=\"src/app/app.component.html (appUnless-1)\" path=\"structural-directives/src/app/app.component.html\" region=\"appUnless-1\">\n&lt;p *appUnless=\"condition\"&gt;Show this sentence unless the condition is true.&lt;/p&gt;\n\n</code-example>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"p7lggoms6vfr59okylq5yw27\">使用 Angular CLI，執行以下指令，其中 <code>unless</code> 是偽指令的名稱：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate directive unless\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"odugper9eu7pg4bj6hmwtehd\">Angular 會建立指令類別，並指定 CSS 選擇器 <code>appUnless</code>，它會在範本中標識指令。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9j04aru62zr5cp8h1bzb1wt44\">匯入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>、<code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 和 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>。</p>\n<code-example header=\"src/app/unless.directive.ts (skeleton)\" path=\"structural-directives/src/app/unless.directive.ts\" region=\"skeleton\">\nimport {<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>} from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  standalone: true,\n  selector: '[appUnless]',\n})\nexport class UnlessDirective {\n}\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r58mza00g7ompseh6kv8uput\">在指令的建構式函式中將 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 和 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 注入成私有變數。</p>\n<code-example header=\"src/app/unless.directive.ts (ctor)\" path=\"structural-directives/src/app/unless.directive.ts\" region=\"ctor\">\nconstructor(\n  private templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;,\n  private viewContainer: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>,\n) {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1r0py74s9icwoaw7vwsxmtd86\"><code>UnlessDirective</code> 會通過 Angular 生成的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 建立一個<a href=\"api/core/EmbeddedViewRef\" title=\"API：EmbeddedViewRef\">嵌入的檢視</a>，然後將該檢視插入到該指令的原始 <code>&lt;p&gt;</code> 宿主元素緊後面的<a href=\"api/core/ViewContainerRef\" title=\"API：ViewContainerRef\">檢視容器</a>中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ansgapda48aaaqx240e4n8pqu\"><a href=\"api/core/TemplateRef\" title=\"API：TemplateRef\"><code>TemplateRef</code></a>可幫助你獲取 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 的內容，而 <a href=\"api/core/ViewContainerRef\" title=\"API：ViewContainerRef\"><code>ViewContainerRef</code></a> 可以訪問檢視容器。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tu0a7zp0fclfmh9twfa9fcph\">新增一個帶 setter 的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 屬性 <code>appUnless</code>。</p>\n<code-example header=\"src/app/unless.directive.ts (set)\" path=\"structural-directives/src/app/unless.directive.ts\" region=\"set\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() set appUnless(condition: boolean) {\n  if (!condition &amp;&amp; !this.hasView) {\n    this.viewContainer.createEmbeddedView(this.templateRef);\n    this.hasView = true;\n  } else if (condition &amp;&amp; this.hasView) {\n    this.viewContainer.clear();\n    this.hasView = false;\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bencypd2jzyea5zmzhjlf94h\">每當條件的值更改時，Angular 都會設定 <code>appUnless</code> 屬性。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2h8fzsiaoywp4iglpnhltl2a3\">如果條件是假值，並且 Angular 以前尚未建立檢視，則此 setter 會導致檢視容器從範本建立出嵌入式檢視。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7woqrz9m1e5lwi4tpbpwuxb28\">如果條件為真值，並且當前正顯示著檢視，則此 setter 會清除容器，這會導致銷燬該檢視。</li>\n</ul>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21un9y884n4fp9o9zfqgad9od\">完整的指令如下：</p>\n<code-example header=\"src/app/unless.directive.ts (excerpt)\" path=\"structural-directives/src/app/unless.directive.ts\" region=\"no-docs\">\nimport {<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>} from '@angular/core';\n\n/**\n * Add the template content to the DOM unless the condition is true.\n */\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  standalone: true,\n  selector: '[appUnless]',\n})\nexport class UnlessDirective {\n  private hasView = false;\n\n  constructor(\n    private templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;,\n    private viewContainer: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>,\n  ) {}\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() set appUnless(condition: boolean) {\n    if (!condition &amp;&amp; !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (condition &amp;&amp; this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n\n\n</code-example>\n<h3 id=\"testing-the-directive\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1d9vgn5aqa0gtm3wplplrhxgi\">測試指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#testing-the-directive\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"73r4lhbftxglqciew9hh28jx0\">在本節中，你將更新你的應用程式，以測試 <code>UnlessDirective</code>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8e93bkxh811wy7c05nai7mhdd\">新增一個 <code>condition</code> 設定為 <code>false</code> 的 <code>AppComponent</code>。</p>\n<code-example header=\"src/app/app.component.ts (excerpt)\" path=\"structural-directives/src/app/app.component.ts\" region=\"condition\">\ncondition = false;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bw8iuaynsikg5sicpqgbj7nl6\">更新範本以使用指令。這裡，<code>*appUnless</code> 位於兩個具有相反 <code>condition</code> 的 <code>&lt;p&gt;</code> 標記上，一個為 <code>true</code>，一個為 <code>false</code>。</p>\n<code-example header=\"src/app/app.component.html (appUnless)\" path=\"structural-directives/src/app/app.component.html\" region=\"appUnless\">\n&lt;p *appUnless=\"condition\" class=\"unless a\"&gt;\n  (A) This paragraph is displayed because the condition is false.\n&lt;/p&gt;\n\n&lt;p *appUnless=\"!condition\" class=\"unless b\"&gt;\n  (B) Although the condition is true,\n  this paragraph is displayed because appUnless is set to false.\n&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60gpnj500oevzm4n5wuiqdxfp\">星號是將 <code>appUnless</code> 標記為結構型指令的簡寫形式。如果 <code>condition</code> 是假值，則會讓頂部段落 A，而底部段落 B 消失。當 <code>condition</code> 為真時，頂部段落 A 消失，而底部段落 B 出現。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f0ersuxpkc95zao4a5l9onfu\">要在瀏覽器中更改並顯示 <code>condition</code> 的值，請新增一段標記程式碼以顯示狀態和按鈕。</p>\n<code-example header=\"src/app/app.component.html\" path=\"structural-directives/src/app/app.component.html\" region=\"toggle-info\">\n&lt;p&gt;\n  The condition is currently\n  &lt;span [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{ 'a': !condition, 'b': condition, 'unless': true }\"&gt;{{condition}}&lt;/span&gt;.\n  &lt;button\n    type=\"button\"\n    (click)=\"condition = !condition\"\n    [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>] = \"{ 'a': condition, 'b': !condition }\" &gt;\n    Toggle condition to {{condition ? 'false' : 'true'}}\n  &lt;/button&gt;\n&lt;/p&gt;\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0w394m4m3uqz5j8uxt1kca1j\">要驗證指令是否有效，請單擊按鈕以更改 <code>condition</code> 的值。</p>\n<div class=\"lightbox\">\n<img alt=\"UnlessDirective in action\" src=\"generated/images/guide/structural-directives/unless-anim.gif\" width=\"524\" height=\"100\">\n</div>\n<h2 id=\"structural-directive-syntax-reference\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"artird410rf5om9u9awzzk2g7\">結構型指令語法參考<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#structural-directive-syntax-reference\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cntsjh17z959elh3e219mpd9\">當你編寫自己的結構型指令時，請使用以下語法：</p>\n<code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\">\n\n*:prefix=\"( :let | :expression ) (';' | ',')? ( :let | :as | :keyExp )*\"\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26k20y76nlbc95xz4j64m7z87\">下表描述了結構型指令語法的每個部分：</p>\n<code-tabs>\n    <code-pane format=\"typescript\" header=\"as\" hidecopy=\"\" language=\"typescript\"> as = :export \"as\" :local \";\"? </code-pane>\n    <code-pane format=\"typescript\" header=\"keyExp\" hidecopy=\"\" language=\"typescript\"> keyExp = :key \":\"? :expression (\"as\" :local)? \";\"? </code-pane>\n    <code-pane format=\"typescript\" header=\"let\" hidecopy=\"\" language=\"typescript\"> let = \"let\" :local \"=\" :export \";\"? </code-pane>\n</code-tabs>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20l9gl2mdedoiwy798oi5zs35\">關鍵字</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>prefix</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pz3gbcpzgvg2g9pvjabjz92\">HTML屬性鍵</td>\n</tr>\n<tr>\n<td align=\"left\"><code>key</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pz3gbcpzgvg2g9pvjabjz92\">HTML屬性鍵</td>\n</tr>\n<tr>\n<td align=\"left\"><code>local</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bnmwzm9yshcwe2s6p2z9926d\">範本中使用的區域性變數名稱</td>\n</tr>\n<tr>\n<td align=\"left\"><code>export</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8uo35jewtdcuxzzedrqp1ssrp\">指令匯出的值，以給定名稱</td>\n</tr>\n<tr>\n<td align=\"left\"><code>expression</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bln2v7ho1pkt49htdzu90my\">標準 Angular 表示式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"how-angular-translates-shorthand\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5oryrljo2p71zghaj3h8wfpl4\">Angular 如何翻譯簡寫形式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#how-angular-translates-shorthand\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1aictm6r3lnac9h4ye98dx39c\">Angular 會將結構型指令的簡寫形式轉換為普通的綁定語法，如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7iki2yrykvobv9rw87y8dyy6d\">簡寫</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6i1o53c36480k0hdnh9mw6y64\">翻譯</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vd59p276qkls52y3l5pss1rl\"><code>prefix</code> 和裸 \n<code>expression</code></td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> [prefix]=\"expression\" </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code>keyExp</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ci8et84fi4f017xkprukxks94\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\">\n  [prefixKey] \"expression\" (let-prefixKey=\"export\") \n</code-example> \n<div class=\"alert is-helpful\"> \n <strong>注意</strong>: \n <br> \n <code>prefix</code> 被新增到 \n <code>key</code> 中 \n</div></td>\n</tr>\n<tr>\n<td align=\"left\"><code>let</code></td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> let-local=\"export\" </code-example></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"shorthand-examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5x7ip10jhqemptxvix60qu59b\">簡寫形式範例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#shorthand-examples\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ibhho2xv0u4v3nuzx2w4p04x\">下表提供了一些簡寫形式範例：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7iki2yrykvobv9rw87y8dyy6d\">簡寫</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9428q8xyts1a5lfveohqr43h7\">Angular 如何解釋這種語法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of [1,2,3]\" </code-example></td>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let-item \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"[1,2,3]\"&gt; </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of [1,2,3] as items; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trackBy: myTrack; index as i\" </code-example></td>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let-item \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"[1,2,3]\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let-items=\"<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ngForTrackBy]=\"myTrack\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let-i=\"index\"&gt; </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"exp\" </code-example></td>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"exp\"&gt; </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"exp as value\" </code-example></td>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"exp\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let-value=\"<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>\"&gt; </code-example></td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"directive-type-checks\"></a></p>\n<!--todo: To do follow up PR: move this section to a more general location because it also applies to attribute directives. -->\n<h2 id=\"improving-template-type-checking-for-custom-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6i5ho92crfgwkr73ox89cgcyh\">改進自定義指令的範本型別檢查<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#improving-template-type-checking-for-custom-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9anjsgh0vv2g6z130ler0kcxy\">你可以透過將範本守衛屬性新增到指令定義中來改進自定義指令的範本型別檢查。這些屬性可幫助 Angular 的範本型別檢查器在編譯時發現範本中的錯誤，從而避免執行時錯誤。這些屬性如下：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gs3sox7s9o90n8u38mupdhf8\"><code>ngTemplateGuard_(someInputProperty)</code> 屬性使你可以為範本中的輸入表示式指定更準確的型別。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56msukiejk1m7phf0ve6tnw6y\">靜態屬性 <code>ngTemplateContextGuard</code> 宣告了範本上下文的型別。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c87q6m6m9t19ix75sxhrp9o6\">本節提供了兩種型別守衛的範例。欲知詳情，請參見<a href=\"guide/template-typecheck\" title=\"範本型別檢查指南\">範本型別檢查</a>。</p>\n<p><a id=\"narrowing-input-types\"></a></p>\n<h3 id=\"making-in-template-type-requirements-more-specific-with-template-guards\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6gjqdcrx9hhsjytyqzdigr129\">使用範本守衛使範本中的型別要求更具體<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#making-in-template-type-requirements-more-specific-with-template-guards\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rnoa5lep6aej1zfq6zuirsp6\">範本中的結構型指令會根據輸入表示式來控制是否要在執行時渲染該範本。為了幫助編譯器捕獲範本型別中的錯誤，你應該儘可能詳細地指定範本內指令的輸入表示式所期待的型別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tbclfxlj6u3ic6arifo5mfqy\">型別保護函式會將輸入表示式的預期型別縮小為可能在執行時傳遞給範本內指令的型別的子集。你可以提供這樣的功能來幫助型別檢查器在編譯時為表示式推斷正確的型別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eaooqbytbbog85ykkf39muow2\">比如，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 的實現使用型別窄化來確保只有當 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 的輸入表示式為真時，範本才會被實例化。為了提供具體的型別要求，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 指令定義了一個<a href=\"api/common/NgIf#static-properties\">靜態屬性 <code>ngTemplateGuard_ngIf: 'binding'</code></a>。這裡的 <code>binding</code> 值是一種常見的型別窄化的例子，它會對輸入表示式進行求值，以滿足型別要求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29l0icntmouwbzhqvyrkc6b36\">要為範本中指令的輸入表示式提供更具體的型別，請在指令中新增 <code>ngTemplateGuard_xx</code> 屬性，其中靜態屬性名稱 <code>xx</code> 就是 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 欄位的名字。該屬性的值可以是基於其回傳型別的常規型別窄化函式，也可以是字串，比如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 中的 <code>\"binding\"</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nff3qh2x8et1d7sh9bfp53ud\">比如，考慮以下結構型指令，該指令以範本表示式的結果作為輸入：</p>\n<code-tabs linenums=\"true\">\n  <code-pane header=\"src/app/if-loaded.directive.ts\" path=\"structural-directives/src/app/if-loaded.directive.ts\">\nimport {<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>} from '@angular/core';\n\nimport {Loaded, LoadingState} from './loading-state';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  standalone: true,\n  selector: '[appIfLoaded]',\n})\nexport class IfLoadedDirective&lt;T&gt; {\n  private isViewCreated = false;\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appIfLoaded') set state(state: LoadingState&lt;T&gt;) {\n    if (!this.isViewCreated &amp;&amp; state.type === 'loaded') {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n      this.isViewCreated = true;\n    } else if (this.isViewCreated &amp;&amp; state.type !== 'loaded') {\n      this.viewContainerRef.clear();\n      this.isViewCreated = false;\n    }\n  }\n\n  constructor(\n    private readonly viewContainerRef: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>,\n    private readonly templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;unknown&gt;,\n  ) {}\n\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> ngTemplateGuard_appIfLoaded&lt;T&gt;(\n    dir: IfLoadedDirective&lt;T&gt;,\n    state: LoadingState&lt;T&gt;,\n  ): state is Loaded&lt;T&gt; {\n    return true;\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"src/app/loading-state.ts\" path=\"structural-directives/src/app/loading-state.ts\">\nexport type Loaded&lt;T&gt; = { type: 'loaded', data: T };\n\nexport type Loading = { type: 'loading' };\n\nexport type LoadingState&lt;T&gt; = Loaded&lt;T&gt; | Loading;\n\n\n</code-pane>\n  <code-pane header=\"src/app/hero.component.ts\" path=\"structural-directives/src/app/hero.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n\nimport {IfLoadedDirective} from './if-loaded.directive';\n\nimport {LoadingState} from './loading-state';\nimport {Hero, heroes} from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-hero',\n  template: `\n    &lt;button (click)=\"onLoadHero()\"&gt;Load Hero&lt;/button&gt;\n    &lt;p *appIfLoaded=\"heroLoadingState\"&gt;{{ heroLoadingState.data | json }}&lt;/p&gt;\n  `,\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, IfLoadedDirective],\n})\nexport class HeroComponent {\n  heroLoadingState: LoadingState&lt;Hero&gt; = {type: 'loading'};\n\n  onLoadHero(): void {\n    this.heroLoadingState = {type: 'loaded', data: heroes[0]};\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ba79wopflm6tpzlprwlqh5j3\">在這個例子中，<code>LoadingState&lt;T&gt;</code> 型別允許兩個狀態之一，<code>Loaded&lt;T&gt;</code> 或 <code>Loading</code>。用作指令的 <code>state</code> 輸入（別名為 <code>appIfLoaded</code>）的表示式是寬泛的傘形型別 <code>LoadingState</code>，因為還不知道此時的載入狀態是什麼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1erc5kc35feo6t0zk01v6j4xr\"><code>IfLoadedDirective</code> 定義宣告了靜態欄位 <code>ngTemplateGuard_appIfLoaded</code>，以表示其窄化行為。在 <code>AppComponent</code> 範本中，<code>*appIfLoaded</code> 結構型指令只有當實際的 <code>state</code> 是 <code>Loaded&lt;Person&gt;</code> 型別時，才會渲染該範本。型別守護允許型別檢查器推斷出範本中可接受的 <code>state</code> 型別是 <code>Loaded&lt;T&gt;</code>，並進一步推斷出 <code>T</code> 必須是一個 <code>Hero</code> 的實例。</p>\n<p><a id=\"narrowing-context-type\"></a></p>\n<h3 id=\"typing-the-directives-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"is6bv3kpwpp01yh3g6jxiktx\">為指令的上下文指定型別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#typing-the-directives-context\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pbk59eadgddozco6em62j4x1\">如果你的結構型指令要為實例化的範本提供一個上下文，可以透過提供靜態的 <code>ngTemplateContextGuard</code> 函式在範本中給它提供合適的型別。下面的程式碼片段展示了該函式的一個例子。</p>\n<code-tabs linenums=\"true\">\n  <code-pane header=\"src/app/trigonometry.directive.ts\" path=\"structural-directives/src/app/trigonometry.directive.ts\">\nimport {<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>} from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  standalone: true,\n  selector: '[appTrigonometry]',\n})\nexport class TrigonometryDirective {\n  private isViewCreated = false;\n  private readonly context = new TrigonometryContext();\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appTrigonometry') set angle(angleInDegrees: number) {\n    const angleInRadians = toRadians(angleInDegrees);\n    this.context.sin = Math.sin(angleInRadians);\n    this.context.cos = Math.cos(angleInRadians);\n    this.context.tan = Math.tan(angleInRadians);\n\n    if (!this.isViewCreated) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);\n      this.isViewCreated = true;\n    }\n  }\n\n  constructor(\n    private readonly viewContainerRef: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>,\n    private readonly templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;TrigonometryContext&gt;,\n  ) {}\n\n  // Make sure the template checker knows the type of the context with which the\n  // template of this directive will be rendered\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> ngTemplateContextGuard(\n    directive: TrigonometryDirective,\n    context: unknown,\n  ): context is TrigonometryContext {\n    return true;\n  }\n}\n\nclass TrigonometryContext {\n  sin = 0;\n  cos = 0;\n  tan = 0;\n}\n\nfunction toRadians(degrees: number): number {\n  return degrees * (Math.PI / 180);\n}\n\n\n</code-pane>\n  <code-pane header=\"src/app/app.component.html (appTrigonometry)\" path=\"structural-directives/src/app/app.component.html\" region=\"appTrigonometry\">\n&lt;ul *appTrigonometry=\"30; sin as s; cos as c; tan as t\"&gt;\n  &lt;li&gt;sin(30°): {{ s }}&lt;/li&gt;\n  &lt;li&gt;cos(30°): {{ c }}&lt;/li&gt;\n  &lt;li&gt;tan(30°): {{ t }}&lt;/li&gt;\n&lt;/ul&gt;\n\n</code-pane>\n</code-tabs>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/common\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgSwitch\n - api/core/ng-container\n - api/core/ng-template\n - guide/ajs-quick-reference\n - guide/aot-compiler\n - guide/architecture-components\n - guide/binding-overview\n - guide/bootstrapping\n - guide/built-in-directives\n - guide/example-apps-list\n - guide/glossary\n - guide/template-reference-variables\n - guide/template-statements\n - guide/template-typecheck\n - guide/understanding-template-expr-overview\n - start\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgClass\n - api/common/NgFor\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgIf#static-properties\n - api/common/NgSwitch\n - api/core/Component\n - api/core/Directive\n - api/core/EmbeddedViewRef\n - api/core/Input\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/core/ng-container\n - api/core/ng-template\n - api/upgrade/static\n - guide/built-in-directives\n - guide/structural-directives#creating-a-structural-directive\n - guide/structural-directives#how-angular-translates-shorthand\n - guide/structural-directives#improving-template-type-checking-for-custom-directives\n - guide/structural-directives#making-in-template-type-requirements-more-specific-with-template-guards\n - guide/structural-directives#one-structural-directive-per-element\n - guide/structural-directives#shorthand-examples\n - guide/structural-directives#structural-directive-shorthand\n - guide/structural-directives#structural-directive-syntax-reference\n - guide/structural-directives#structural-directives\n - guide/structural-directives#testing-the-directive\n - guide/structural-directives#typing-the-directives-context\n - guide/template-typecheck\n-->"}
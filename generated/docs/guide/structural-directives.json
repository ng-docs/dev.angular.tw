{"id":"guide/structural-directives","title":"结构型指令","contents":"<div class=\"content\">\n  <h1 id=\"structural-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59lj2adjv35bjs3nghyd6twal\">结构型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#structural-directives\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kra4mrtbm951i32shcjnjdo2\">本指南是关于结构指令的，并提供了有关此类指令的工作方式、Angular 如何解释它们的速记语法以及如何添加模板保护属性以捕获模板类型错误的概念信息。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jkvsnixn07otpcn1mdybit8i\">结构指令是通过添加和删除 DOM 元素来更改 DOM 布局的指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9afkqzo8t5zvlq7bj0iqt78h5\">Angular 提供了一组内置的结构指令（例如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 、 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 、 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 等），在所有 Angular 项目中通用。有关更多信息，请参阅<a href=\"guide/built-in-directives\">内置指令</a>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8wffcx2v0zn88t2qwd9l03hxo\">对于本页面介绍的示例应用程序，请参阅<live-example name=\"structural-directives\"></live-example>.</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2y35c89evtn7gak1r81882ncx\"><a id=\"shorthand\"></a>\n<a id=\"asterisk\"></a></p>\n<h2 id=\"structural-directive-shorthand\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1sihb7la17m64uvph58hqo1ci\">结构型指令简写形式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#structural-directive-shorthand\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8b06o45ngo25y4mst22ucxgcx\">应用结构指令时，它们通常以星号 <code>*</code> 为前缀，例如 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>。本约定是 Angular 解释并转换为更长形式的速记。Angular 会将结构指令前面的星号转换为围绕宿主元素及其后代的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zpvkb4n6gwj1q5q6i6khtayw\">例如，让我们采取以下代码，如果 <code>hero</code> 存在，则使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 来显示英雄的名字：</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (asterisk)\" region=\"asterisk\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\" class=\"name\"&gt;{{hero.name}}&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7j41fmky2q9i800d3mbk2b9ve\">Angular 创建一个 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素，并将 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令应用于它，在那里它成为方括号中的属性绑定 <code>[<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]</code>。然后，<code>&lt;div&gt;</code> 的其余部分（包括其 class 属性）会在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 中移动：</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (ngif-template)\" region=\"ngif-template\">\n&lt;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"hero\"&gt;\n  &lt;div class=\"name\"&gt;{{hero.name}}&lt;/div&gt;\n&lt;/ng-template&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ptdcyii7vp4j5hnp3z4jk073\">请注意，Angular 实际上并没有创建真正的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素，而是仅渲染 <code>&lt;div&gt;</code> 元素。</p>\n<code-example language=\"html\">\n&lt;div _ngcontent-c0&gt;Mr. Nice&lt;/div&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adr204t3sv5xewmw8zrn3muhx\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中的星号的简写形式与非简写的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 形式进行比较：</p>\n<code-example path=\"structural-directives/src/app/app.component.html\" header=\"src/app/app.component.html (inside-ngfor)\" region=\"inside-ngfor\">\n&lt;div\n  *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes; let i=index; let odd=odd; trackBy: trackById\"\n  [class.odd]=\"odd\"&gt;\n  ({{i}}) {{hero.name}}\n&lt;/div&gt;\n\n&lt;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> let-hero [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\"\n  let-i=\"index\" let-odd=\"odd\" [ngForTrackBy]=\"trackById\"&gt;\n  &lt;div [class.odd]=\"odd\"&gt;\n    ({{i}}) {{hero.name}}\n  &lt;/div&gt;\n&lt;/ng-template&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54u4o4bsjc56az6t7c6um0ea9\">在这里，与 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 结构指令相关的所有内容都被移动到 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>。元素上的所有其他绑定和属性都适用于 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 中的 <code>&lt;div&gt;</code> 元素。当元素在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 中移动时，宿主元素上的其他修饰符（除了 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 字符串）会保持在原位。在此示例中，<code>[class.odd]=\"odd\"</code> 保留在 <code>&lt;div&gt;</code> 上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3t8ubo9jc3uslpprbwl9swlld\"><code>let</code> 关键字会声明一个模板输入变量，你可以在模板中引用该变量。在这个例子中，是 <code>hero</code>、<code>i</code> 和 <code>odd</code>。解析器将 <code>let hero</code>、<code>let i</code> 和 <code>let odd</code> 转换为名为 <code>let-hero</code>、<code>let-i</code> 和 <code>let-odd</code> 的变量。<code>let-i</code> 和 <code>let-odd</code> 变量变为 <code>let i=index</code> 和 <code>let odd=odd</code>。Angular 会将 <code>i</code> 和 <code>odd</code> 设置为上下文中 <code>index</code> 和 <code>odd</code> 属性的当前值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ri6dyq25vnsk37esfyouxxui\">解析器将 PascalCase 应用于所有指令，并以指令的属性名称为前缀，例如 ngFor。例如，<code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 输入属性 <code>of</code> 和 <code>trackBy</code> 映射到 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a></code> 和 <code>ngForTrackBy</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bn8354vmyxxlb4gvc33b2yva8\">当 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 指令遍历列表时，它会设置和重置其自己的上下文对象的属性。这些属性可以包括但不限于 <code>index</code> 、 <code>odd</code> 和名为 <code>$implicit</code> 的特殊属性。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhgvhhe974wfd196ba56d1imz\">Angular 会将 <code>let-hero</code> 设置为上下文的 <code>$implicit</code> 属性的值，<code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 已经将其初始化为当前正在迭代的英雄。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ub0aqc9rdya3t9lx9qss840w\">有关更多信息，请参见 <a href=\"api/common/NgForOf\" title=\"API：NgFor\">NgFor API</a> 和 <a href=\"api/common/NgForOf\">NgForOf API</a> 文档。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nfidf0fagbu20rd75300tmu9\">请注意，Angular 的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素定义了一个默认不渲染任何内容的模板，如果你只是在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 中包装元素而不应用结构指令，则不会渲染这些元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cb6vogh1j66thzgci5yz9va8g\">有关更多信息，请参阅<a href=\"api/core/ng-template\">ng-template API</a>文档。</p>\n</div>\n<p><a id=\"one-per-element\"></a></p>\n<h2 id=\"one-structural-directive-per-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bok1mve03gbluvbhqk2zekkor\">每个元素一个结构指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#one-structural-directive-per-element\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b68k0eq709e0ewdyr9hryph9e\">重复一个 HTML 块是一个很常见的用例，但前提是在特定条件为真时。一种直观的方法是将 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 和 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 放在同一个元素上。但是，由于 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 和 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 都是结构指令，因此编译器会将其视为错误。你只能将一个 <em> 结构 </em> 指令应用于一个元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e246rafpz2zx6fvhr7x4muovx\">原因是简单。结构指令可以用宿主元素及其后代做复杂的事情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25c9hy8sgpvew1p38bk0k3vgn\">当两个指令都声称使用了同一个宿主元素时，哪一个应该优先？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b7jzm4grensh84lbb636chqgy\">哪个应该先走，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 或 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> ？ <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 可以取消 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 的效果吗？如果是这样（看起来应该是这样），Angular 应该如何概括其他结构指令的取消能力？</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77thuujdzojlelgvcbsowhkiz\">这些问题没有简单的答案。禁止多个结构指令使它们没有实际意义。这个用例有一个简单的解决方案：将 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 放在包装 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 元素的容器元素上。一个或两个元素可以是 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code>，以便不会生成额外的 DOM 元素。</p>\n<p><a id=\"unless\"></a></p>\n<h2 id=\"creating-a-structural-directive\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vm1te90yw2758g6abyrc10ys\">创建结构型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#creating-a-structural-directive\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lzjzw51pncr64y4ossyf1jx0\">本节将指导你创建 <code>UnlessDirective</code> 以及如何设置 <code>condition</code> 值。<code>UnlessDirective</code> 与 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 相反，并且 <code>condition</code> 值可以设置为 <code>true</code> 或 <code>false</code>。<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 为 <code>true</code> 时显示模板内容；而 <code>UnlessDirective</code> 在这个条件为 <code>false</code> 时显示内容。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fsykpxroln4lbvcnhwyevjhl\">以下是应用于 p 元素的 <code>UnlessDirective</code> 选择器 <code>appUnless</code> 当 <code>condition</code> 为 <code>false</code>，浏览器将显示该句子。</p>\n<code-example header=\"src/app/app.component.html (appUnless-1)\" path=\"structural-directives/src/app/app.component.html\" region=\"appUnless-1\">\n&lt;p *appUnless=\"condition\"&gt;Show this sentence unless the condition is true.&lt;/p&gt;\n\n</code-example>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"p7lggoms6vfr59okylq5yw27\">使用 Angular CLI，运行以下命令，其中 <code>unless</code> 是伪指令的名称：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nng generate directive unless\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"odugper9eu7pg4bj6hmwtehd\">Angular 会创建指令类，并指定 CSS 选择器 <code>appUnless</code>，它会在模板中标识指令。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9j04aru62zr5cp8h1bzb1wt44\">导入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>、<code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 和 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>。</p>\n<code-example header=\"src/app/unless.directive.ts (skeleton)\" path=\"structural-directives/src/app/unless.directive.ts\" region=\"skeleton\">\nimport {<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>} from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  standalone: true,\n  selector: '[appUnless]',\n})\nexport class UnlessDirective {\n}\n\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6r58mza00g7ompseh6kv8uput\">在指令的构造函数中将 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 和 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 注入成私有变量。</p>\n<code-example header=\"src/app/unless.directive.ts (ctor)\" path=\"structural-directives/src/app/unless.directive.ts\" region=\"ctor\">\nconstructor(\n  private templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;,\n  private viewContainer: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>,\n) {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1r0py74s9icwoaw7vwsxmtd86\"><code>UnlessDirective</code> 会通过 Angular 生成的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 创建一个<a href=\"api/core/EmbeddedViewRef\" title=\"API：EmbeddedViewRef\">嵌入的视图</a>，然后将该视图插入到该指令的原始 <code>&lt;p&gt;</code> 宿主元素紧后面的<a href=\"api/core/ViewContainerRef\" title=\"API：ViewContainerRef\">视图容器</a>中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ansgapda48aaaqx240e4n8pqu\"><a href=\"api/core/TemplateRef\" title=\"API：TemplateRef\"><code>TemplateRef</code></a>可帮助你获取 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 的内容，而 <a href=\"api/core/ViewContainerRef\" title=\"API：ViewContainerRef\"><code>ViewContainerRef</code></a> 可以访问视图容器。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tu0a7zp0fclfmh9twfa9fcph\">添加一个带 setter 的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性 <code>appUnless</code>。</p>\n<code-example header=\"src/app/unless.directive.ts (set)\" path=\"structural-directives/src/app/unless.directive.ts\" region=\"set\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() set appUnless(condition: boolean) {\n  if (!condition &amp;&amp; !this.hasView) {\n    this.viewContainer.createEmbeddedView(this.templateRef);\n    this.hasView = true;\n  } else if (condition &amp;&amp; this.hasView) {\n    this.viewContainer.clear();\n    this.hasView = false;\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7bencypd2jzyea5zmzhjlf94h\">每当条件的值更改时，Angular 都会设置 <code>appUnless</code> 属性。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2h8fzsiaoywp4iglpnhltl2a3\">如果条件是假值，并且 Angular 以前尚未创建视图，则此 setter 会导致视图容器从模板创建出嵌入式视图。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7woqrz9m1e5lwi4tpbpwuxb28\">如果条件为真值，并且当前正显示着视图，则此 setter 会清除容器，这会导致销毁该视图。</li>\n</ul>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21un9y884n4fp9o9zfqgad9od\">完整的指令如下：</p>\n<code-example header=\"src/app/unless.directive.ts (excerpt)\" path=\"structural-directives/src/app/unless.directive.ts\" region=\"no-docs\">\nimport {<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>} from '@angular/core';\n\n/**\n * Add the template content to the DOM unless the condition is true.\n */\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  standalone: true,\n  selector: '[appUnless]',\n})\nexport class UnlessDirective {\n  private hasView = false;\n\n  constructor(\n    private templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;,\n    private viewContainer: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>,\n  ) {}\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() set appUnless(condition: boolean) {\n    if (!condition &amp;&amp; !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (condition &amp;&amp; this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n\n\n</code-example>\n<h3 id=\"testing-the-directive\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1d9vgn5aqa0gtm3wplplrhxgi\">测试指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#testing-the-directive\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"73r4lhbftxglqciew9hh28jx0\">在本节中，你将更新你的应用程序，以测试 <code>UnlessDirective</code>。</p>\n<ol>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8e93bkxh811wy7c05nai7mhdd\">添加一个 <code>condition</code> 设置为 <code>false</code> 的 <code>AppComponent</code>。</p>\n<code-example header=\"src/app/app.component.ts (excerpt)\" path=\"structural-directives/src/app/app.component.ts\" region=\"condition\">\ncondition = false;\n\n</code-example>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bw8iuaynsikg5sicpqgbj7nl6\">更新模板以使用指令。这里，<code>*appUnless</code> 位于两个具有相反 <code>condition</code> 的 <code>&lt;p&gt;</code> 标记上，一个为 <code>true</code>，一个为 <code>false</code>。</p>\n<code-example header=\"src/app/app.component.html (appUnless)\" path=\"structural-directives/src/app/app.component.html\" region=\"appUnless\">\n&lt;p *appUnless=\"condition\" class=\"unless a\"&gt;\n  (A) This paragraph is displayed because the condition is false.\n&lt;/p&gt;\n\n&lt;p *appUnless=\"!condition\" class=\"unless b\"&gt;\n  (B) Although the condition is true,\n  this paragraph is displayed because appUnless is set to false.\n&lt;/p&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"60gpnj500oevzm4n5wuiqdxfp\">星号是将 <code>appUnless</code> 标记为结构型指令的简写形式。如果 <code>condition</code> 是假值，则会让顶部段落 A，而底部段落 B 消失。当 <code>condition</code> 为真时，顶部段落 A 消失，而底部段落 B 出现。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f0ersuxpkc95zao4a5l9onfu\">要在浏览器中更改并显示 <code>condition</code> 的值，请添加一段标记代码以显示状态和按钮。</p>\n<code-example header=\"src/app/app.component.html\" path=\"structural-directives/src/app/app.component.html\" region=\"toggle-info\">\n&lt;p&gt;\n  The condition is currently\n  &lt;span [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{ 'a': !condition, 'b': condition, 'unless': true }\"&gt;{{condition}}&lt;/span&gt;.\n  &lt;button\n    type=\"button\"\n    (click)=\"condition = !condition\"\n    [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>] = \"{ 'a': condition, 'b': !condition }\" &gt;\n    Toggle condition to {{condition ? 'false' : 'true'}}\n  &lt;/button&gt;\n&lt;/p&gt;\n\n</code-example>\n</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d0w394m4m3uqz5j8uxt1kca1j\">要验证指令是否有效，请单击按钮以更改 <code>condition</code> 的值。</p>\n<div class=\"lightbox\">\n<img alt=\"UnlessDirective in action\" src=\"generated/images/guide/structural-directives/unless-anim.gif\" width=\"524\" height=\"100\">\n</div>\n<h2 id=\"structural-directive-syntax-reference\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"artird410rf5om9u9awzzk2g7\">结构型指令语法参考<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#structural-directive-syntax-reference\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cntsjh17z959elh3e219mpd9\">当你编写自己的结构型指令时，请使用以下语法：</p>\n<code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\">\n\n*:prefix=\"( :let | :expression ) (';' | ',')? ( :let | :as | :keyExp )*\"\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"26k20y76nlbc95xz4j64m7z87\">下表描述了结构型指令语法的每个部分：</p>\n<code-tabs>\n    <code-pane format=\"typescript\" header=\"as\" hidecopy=\"\" language=\"typescript\"> as = :export \"as\" :local \";\"? </code-pane>\n    <code-pane format=\"typescript\" header=\"keyExp\" hidecopy=\"\" language=\"typescript\"> keyExp = :key \":\"? :expression (\"as\" :local)? \";\"? </code-pane>\n    <code-pane format=\"typescript\" header=\"let\" hidecopy=\"\" language=\"typescript\"> let = \"let\" :local \"=\" :export \";\"? </code-pane>\n</code-tabs>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20l9gl2mdedoiwy798oi5zs35\">关键字</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>prefix</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pz3gbcpzgvg2g9pvjabjz92\">HTML属性键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>key</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1pz3gbcpzgvg2g9pvjabjz92\">HTML属性键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>local</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bnmwzm9yshcwe2s6p2z9926d\">模板中使用的局部变量名称</td>\n</tr>\n<tr>\n<td align=\"left\"><code>export</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8uo35jewtdcuxzzedrqp1ssrp\">指令导出的值，以给定名称</td>\n</tr>\n<tr>\n<td align=\"left\"><code>expression</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bln2v7ho1pkt49htdzu90my\">标准 Angular 表达式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"how-angular-translates-shorthand\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5oryrljo2p71zghaj3h8wfpl4\">Angular 如何翻译简写形式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#how-angular-translates-shorthand\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1aictm6r3lnac9h4ye98dx39c\">Angular 会将结构型指令的简写形式转换为普通的绑定语法，如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7iki2yrykvobv9rw87y8dyy6d\">简写</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6i1o53c36480k0hdnh9mw6y64\">翻译</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vd59p276qkls52y3l5pss1rl\"><code>prefix</code> 和裸 \n<code>expression</code></td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> [prefix]=\"expression\" </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code>keyExp</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ci8et84fi4f017xkprukxks94\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\">\n  [prefixKey] \"expression\" (let-prefixKey=\"export\") \n</code-example> \n<div class=\"alert is-helpful\"> \n <strong>注意</strong>: \n <br> \n <code>prefix</code> 被添加到 \n <code>key</code> 中 \n</div></td>\n</tr>\n<tr>\n<td align=\"left\"><code>let</code></td>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> let-local=\"export\" </code-example></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"shorthand-examples\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5x7ip10jhqemptxvix60qu59b\">简写形式示例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#shorthand-examples\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ibhho2xv0u4v3nuzx2w4p04x\">下表提供了一些简写形式示例：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7iki2yrykvobv9rw87y8dyy6d\">简写</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9428q8xyts1a5lfveohqr43h7\">Angular 如何解释这种语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of [1,2,3]\" </code-example></td>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let-item \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"[1,2,3]\"&gt; </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of [1,2,3] as items; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trackBy: myTrack; index as i\" </code-example></td>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let-item \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"[1,2,3]\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let-items=\"<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ngForTrackBy]=\"myTrack\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let-i=\"index\"&gt; </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"exp\" </code-example></td>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"exp\"&gt; </code-example></td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"exp as value\" </code-example></td>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"exp\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let-value=\"<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>\"&gt; </code-example></td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"directive-type-checks\"></a></p>\n<!--todo: To do follow up PR: move this section to a more general location because it also applies to attribute directives. -->\n<h2 id=\"improving-template-type-checking-for-custom-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6i5ho92crfgwkr73ox89cgcyh\">改进自定义指令的模板类型检查<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#improving-template-type-checking-for-custom-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9anjsgh0vv2g6z130ler0kcxy\">你可以通过将模板守卫属性添加到指令定义中来改进自定义指令的模板类型检查。这些属性可帮助 Angular 的模板类型检查器在编译时发现模板中的错误，从而避免运行时错误。这些属性如下：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7gs3sox7s9o90n8u38mupdhf8\"><code>ngTemplateGuard_(someInputProperty)</code> 属性使你可以为模板中的输入表达式指定更准确的类型。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56msukiejk1m7phf0ve6tnw6y\">静态属性 <code>ngTemplateContextGuard</code> 声明了模板上下文的类型。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c87q6m6m9t19ix75sxhrp9o6\">本节提供了两种类型守卫的示例。欲知详情，请参见<a href=\"guide/template-typecheck\" title=\"模板类型检查指南\">模板类型检查</a>。</p>\n<p><a id=\"narrowing-input-types\"></a></p>\n<h3 id=\"making-in-template-type-requirements-more-specific-with-template-guards\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6gjqdcrx9hhsjytyqzdigr129\">使用模板守卫使模板中的类型要求更具体<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#making-in-template-type-requirements-more-specific-with-template-guards\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3rnoa5lep6aej1zfq6zuirsp6\">模板中的结构型指令会根据输入表达式来控制是否要在运行时渲染该模板。为了帮助编译器捕获模板类型中的错误，你应该尽可能详细地指定模板内指令的输入表达式所期待的类型。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tbclfxlj6u3ic6arifo5mfqy\">类型保护函数会将输入表达式的预期类型缩小为可能在运行时传递给模板内指令的类型的子集。你可以提供这样的功能来帮助类型检查器在编译时为表达式推断正确的类型。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eaooqbytbbog85ykkf39muow2\">比如，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 的实现使用类型窄化来确保只有当 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 的输入表达式为真时，模板才会被实例化。为了提供具体的类型要求，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 指令定义了一个<a href=\"api/common/NgIf#static-properties\">静态属性 <code>ngTemplateGuard_ngIf: 'binding'</code></a>。这里的 <code>binding</code> 值是一种常见的类型窄化的例子，它会对输入表达式进行求值，以满足类型要求。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29l0icntmouwbzhqvyrkc6b36\">要为模板中指令的输入表达式提供更具体的类型，请在指令中添加 <code>ngTemplateGuard_xx</code> 属性，其中静态属性名称 <code>xx</code> 就是 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 字段的名字。该属性的值可以是基于其返回类型的常规类型窄化函数，也可以是字符串，比如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 中的 <code>\"binding\"</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9nff3qh2x8et1d7sh9bfp53ud\">比如，考虑以下结构型指令，该指令以模板表达式的结果作为输入：</p>\n<code-tabs linenums=\"true\">\n  <code-pane header=\"src/app/if-loaded.directive.ts\" path=\"structural-directives/src/app/if-loaded.directive.ts\">\nimport {<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>} from '@angular/core';\n\nimport {Loaded, LoadingState} from './loading-state';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  standalone: true,\n  selector: '[appIfLoaded]',\n})\nexport class IfLoadedDirective&lt;T&gt; {\n  private isViewCreated = false;\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appIfLoaded') set state(state: LoadingState&lt;T&gt;) {\n    if (!this.isViewCreated &amp;&amp; state.type === 'loaded') {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n      this.isViewCreated = true;\n    } else if (this.isViewCreated &amp;&amp; state.type !== 'loaded') {\n      this.viewContainerRef.clear();\n      this.isViewCreated = false;\n    }\n  }\n\n  constructor(\n    private readonly viewContainerRef: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>,\n    private readonly templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;unknown&gt;,\n  ) {}\n\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> ngTemplateGuard_appIfLoaded&lt;T&gt;(\n    dir: IfLoadedDirective&lt;T&gt;,\n    state: LoadingState&lt;T&gt;,\n  ): state is Loaded&lt;T&gt; {\n    return true;\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"src/app/loading-state.ts\" path=\"structural-directives/src/app/loading-state.ts\">\nexport type Loaded&lt;T&gt; = { type: 'loaded', data: T };\n\nexport type Loading = { type: 'loading' };\n\nexport type LoadingState&lt;T&gt; = Loaded&lt;T&gt; | Loading;\n\n\n</code-pane>\n  <code-pane header=\"src/app/hero.component.ts\" path=\"structural-directives/src/app/hero.component.ts\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\nimport {<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>} from '@angular/common';\n\nimport {IfLoadedDirective} from './if-loaded.directive';\n\nimport {LoadingState} from './loading-state';\nimport {Hero, heroes} from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'app-hero',\n  template: `\n    &lt;button (click)=\"onLoadHero()\"&gt;Load Hero&lt;/button&gt;\n    &lt;p *appIfLoaded=\"heroLoadingState\"&gt;{{ heroLoadingState.data | json }}&lt;/p&gt;\n  `,\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, IfLoadedDirective],\n})\nexport class HeroComponent {\n  heroLoadingState: LoadingState&lt;Hero&gt; = {type: 'loading'};\n\n  onLoadHero(): void {\n    this.heroLoadingState = {type: 'loaded', data: heroes[0]};\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ba79wopflm6tpzlprwlqh5j3\">在这个例子中，<code>LoadingState&lt;T&gt;</code> 类型允许两个状态之一，<code>Loaded&lt;T&gt;</code> 或 <code>Loading</code>。用作指令的 <code>state</code> 输入（别名为 <code>appIfLoaded</code>）的表达式是宽泛的伞形类型 <code>LoadingState</code>，因为还不知道此时的加载状态是什么。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1erc5kc35feo6t0zk01v6j4xr\"><code>IfLoadedDirective</code> 定义声明了静态字段 <code>ngTemplateGuard_appIfLoaded</code>，以表示其窄化行为。在 <code>AppComponent</code> 模板中，<code>*appIfLoaded</code> 结构型指令只有当实际的 <code>state</code> 是 <code>Loaded&lt;Person&gt;</code> 类型时，才会渲染该模板。类型守护允许类型检查器推断出模板中可接受的 <code>state</code> 类型是 <code>Loaded&lt;T&gt;</code>，并进一步推断出 <code>T</code> 必须是一个 <code>Hero</code> 的实例。</p>\n<p><a id=\"narrowing-context-type\"></a></p>\n<h3 id=\"typing-the-directives-context\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"is6bv3kpwpp01yh3g6jxiktx\">为指令的上下文指定类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/structural-directives#typing-the-directives-context\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pbk59eadgddozco6em62j4x1\">如果你的结构型指令要为实例化的模板提供一个上下文，可以通过提供静态的 <code>ngTemplateContextGuard</code> 函数在模板中给它提供合适的类型。下面的代码片段展示了该函数的一个例子。</p>\n<code-tabs linenums=\"true\">\n  <code-pane header=\"src/app/trigonometry.directive.ts\" path=\"structural-directives/src/app/trigonometry.directive.ts\">\nimport {<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>} from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  standalone: true,\n  selector: '[appTrigonometry]',\n})\nexport class TrigonometryDirective {\n  private isViewCreated = false;\n  private readonly context = new TrigonometryContext();\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appTrigonometry') set angle(angleInDegrees: number) {\n    const angleInRadians = toRadians(angleInDegrees);\n    this.context.sin = Math.sin(angleInRadians);\n    this.context.cos = Math.cos(angleInRadians);\n    this.context.tan = Math.tan(angleInRadians);\n\n    if (!this.isViewCreated) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef, this.context);\n      this.isViewCreated = true;\n    }\n  }\n\n  constructor(\n    private readonly viewContainerRef: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>,\n    private readonly templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;TrigonometryContext&gt;,\n  ) {}\n\n  // Make sure the template checker knows the type of the context with which the\n  // template of this directive will be rendered\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> ngTemplateContextGuard(\n    directive: TrigonometryDirective,\n    context: unknown,\n  ): context is TrigonometryContext {\n    return true;\n  }\n}\n\nclass TrigonometryContext {\n  sin = 0;\n  cos = 0;\n  tan = 0;\n}\n\nfunction toRadians(degrees: number): number {\n  return degrees * (Math.PI / 180);\n}\n\n\n</code-pane>\n  <code-pane header=\"src/app/app.component.html (appTrigonometry)\" path=\"structural-directives/src/app/app.component.html\" region=\"appTrigonometry\">\n&lt;ul *appTrigonometry=\"30; sin as s; cos as c; tan as t\"&gt;\n  &lt;li&gt;sin(30°): {{ s }}&lt;/li&gt;\n  &lt;li&gt;cos(30°): {{ c }}&lt;/li&gt;\n  &lt;li&gt;tan(30°): {{ t }}&lt;/li&gt;\n&lt;/ul&gt;\n\n</code-pane>\n</code-tabs>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/common\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgSwitch\n - api/core/ng-container\n - api/core/ng-template\n - guide/ajs-quick-reference\n - guide/aot-compiler\n - guide/architecture-components\n - guide/binding-overview\n - guide/bootstrapping\n - guide/built-in-directives\n - guide/example-apps-list\n - guide/glossary\n - guide/template-reference-variables\n - guide/template-statements\n - guide/template-typecheck\n - guide/understanding-template-expr-overview\n - start\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgClass\n - api/common/NgFor\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgIf#static-properties\n - api/common/NgSwitch\n - api/core/Component\n - api/core/Directive\n - api/core/EmbeddedViewRef\n - api/core/Input\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/core/ng-container\n - api/core/ng-template\n - api/upgrade/static\n - guide/built-in-directives\n - guide/structural-directives#creating-a-structural-directive\n - guide/structural-directives#how-angular-translates-shorthand\n - guide/structural-directives#improving-template-type-checking-for-custom-directives\n - guide/structural-directives#making-in-template-type-requirements-more-specific-with-template-guards\n - guide/structural-directives#one-structural-directive-per-element\n - guide/structural-directives#shorthand-examples\n - guide/structural-directives#structural-directive-shorthand\n - guide/structural-directives#structural-directive-syntax-reference\n - guide/structural-directives#structural-directives\n - guide/structural-directives#testing-the-directive\n - guide/structural-directives#typing-the-directives-context\n - guide/template-typecheck\n-->"}
{"id":"guide/signal-inputs","title":"訊號輸入","contents":"<div class=\"content\">\n  <h1 id=\"signal-inputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dusl85b8uq8bewp993jz4y5q\">訊號輸入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#signal-inputs\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pajletbqczfzicysm3xy2zpm\">訊號輸入允許從父元件繫結值。 這些值使用\n<code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>暴露出來，並且可以在元件的生命週期中改變。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axcajuuc9eg2knjwc9uqzcobo\">訊號輸入目前處於\n<a href=\"/guide/releases#developer-preview\">開發者預覽</a>階段。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rdn0kyjnlii2ipy2u2dvsxog\">Angular 支援兩種輸入變體：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"817x91ekcnofjvld8abyj73vh\"><strong>可選輸入</strong> 輸入預設為可選的，除非使用\n<code>input.required</code>。 您可以指定顯式的初始值，或者 Angular 將隱式使用\n<code>undefined</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sxk4weav8l2cppwopfc9zv5s\"><strong>必選輸入</strong> 必選輸入始終具有給定輸入型別的值。 它們使用\n<code>input.required</code>函式宣告。</p>\n<code-example language=\"typescript\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, input} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({...})\nexport class MyComp {\n  // optional\n  firstName = input&lt;string&gt;();         // <a href=\"api/core/InputSignal\" class=\"code-anchor\">InputSignal</a>&lt;string|undefined&gt;\n  age = input(0);                      // <a href=\"api/core/InputSignal\" class=\"code-anchor\">InputSignal</a>&lt;number&gt;\n\n  // required\n  lastName = input.required&lt;string&gt;(); // <a href=\"api/core/InputSignal\" class=\"code-anchor\">InputSignal</a>&lt;string&gt;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mrols8mwm090uh6cj2vzhztd\">每當您使用\n<code>input</code>或\n<code>input.required</code>函式作為類別成員的初始化器時，Angular 會自動識別輸入。</p>\n<h2 id=\"aliasing-an-input\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bqi2fpzb1ksywzc5ygbbkg8w\">為輸入設定別名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#aliasing-an-input\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5wrizptsinkuq23fxljm6c98\">Angular 使用類別成員名稱作為輸入的名稱。 您可以為輸入設定別名，以便更改它們的公共名稱。</p>\n<code-example language=\"typescript\">\nclass StudentDirective {\n  age = input(0, {alias: 'studentAge'});\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dgwmvx3d5g3t862os8mmqmqnl\">這允許使用者使用\n<code>[studentAge]</code>繫結到您的輸入，而在元件內部，您可以使用\n<code>this.age</code>訪問輸入值。</p>\n<h2 id=\"using-in-templates\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c8ptqg50lt0wk8it42p7q5kq\">在樣板中使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#using-in-templates\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9v4gh2m42zgl3iotk9rlqfspr\">訊號輸入是隻讀訊號。與透過\n<code><a href=\"api/core/signal\" class=\"code-anchor\">signal</a>()</code>宣告的訊號一樣，透過呼叫輸入訊號來訪問輸入當前值。</p>\n<code-example language=\"html\">\n&lt;p&gt;First name: {{firstName()}}&lt;/p&gt;\n&lt;p&gt;Last name: {{lastName()}}&lt;/p&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dcvf7dno7t5zg4wdpd446a68m\">這種對值的訪問在回應式上下文中被捕獲，並且可以在輸入值發生變化時通知活動的消費者，比如 Angular 本身。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2x7avoy4j0ix1r5leenif1qny\">實際上，輸入訊號是從你在\n<a href=\"/guide/signals\">訊號指南</a>中瞭解到的訊號的一個微不足道的擴充套件。</p>\n<code-example language=\"typescript\">\nexport class <a href=\"api/core/InputSignal\" class=\"code-anchor\">InputSignal</a>&lt;T&gt; extends <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;T&gt; { ... }`.\n</code-example>\n<h2 id=\"deriving-values\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"140olfp11p27pflws0qt91kwp\">派生值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#deriving-values\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evpt3run4dmz3nu4nmta4mfn\">與訊號一樣，你可以使用\n<code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code>從輸入中派生值。</p>\n<code-example language=\"typescript\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, input, <a href=\"api/core/computed\" class=\"code-anchor\">computed</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({...})\nexport class MyComp {\n  age = input(0);\n\n  // age multiplied by two.\n  ageMultiplied = <a href=\"api/core/computed\" class=\"code-anchor\">computed</a>(() =&gt; this.age() * 2);\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56zbp4gezrktx2h2g1u8fnuc3\">計算訊號會對值進行儲存。在\n<a href=\"/guide/signals#computed-signals\">用於計算的專用部分</a>中檢視更多細節。</p>\n<h2 id=\"monitoring-changes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwi75eyis0to52f12dsu1buum\">監視變化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#monitoring-changes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13fgxpz1jsy6loanp5vq8rbot\">使用訊號輸入，使用者可以利用\n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>函式。該函式將在輸入發生變化時執行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l5uu3ws4jpch7vp3vngivu4h\">考慮以下範例。每當\n<code>firstName</code>輸入發生變化時，新值將被列印到控制台。</p>\n<code-example language=\"typescript\">\nimport {input, <a href=\"api/core/effect\" class=\"code-anchor\">effect</a>} from '@angular/core';\n\nclass MyComp {\n  firstName = input.required&lt;string&gt;();\n\n  constructor() {\n    <a href=\"api/core/effect\" class=\"code-anchor\">effect</a>(() =&gt; {\n      console.log(this.firstName());\n    });\n  }\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9u9u5hmc81l5xbibmu8nf4lsz\">每當\n<code>firstName</code>輸入發生變化時，\n<code>console.log</code>函式都會被呼叫。這將在\n<code>firstName</code>可用時立即發生，並持續發生在\n<code>MyComp</code>的生命週期內。</p>\n<h2 id=\"value-transforms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8hfhy2kpwzakj3kahd2v6uaij\">值轉換<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#value-transforms\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c92j2s8pmtr5cm6cufg8mloki\">您可能希望在不改變輸入含義的情況下強制轉換或解析輸入值。轉換將父樣板的原始值轉換為期望的輸入型別。轉換應該是\n<a href=\"https://en.wikipedia.org/wiki/Pure_function\">純函式</a>。</p>\n<code-example language=\"typescript\">\nclass MyComp {\n  disabled = input(false, {\n    transform: (value: boolean|string) =&gt; typeof value === 'string' ? value === '' : value,\n  });\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o4t06p0s066dior1hrxsfyxj\">在上面的範例中，您宣告了一個名為\n<code>disabled</code>的輸入，接受\n<code>boolean</code>和\n<code>string</code>型別的值。這由\n<code>transform</code>選項中\n<code>value</code>的顯式引數型別捕獲。然後，這些值透過轉換解析為\n<code>boolean</code>，生成布林值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4si3v3ax2xy6hgzz9xsgr6g5d\">這樣，當呼叫\n<code>this.disabled()</code>時，您在元件內部只處理\n<code>boolean</code>，而元件的使用者可以傳遞空字串作為一種快捷方式來標記您的元件為停用狀態。</p>\n<code-example language=\"html\">\n&lt;my-custom-comp disabled&gt;\n</code-example>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35dhcqqcljh424cy96k105g0h\">如果轉換改變了輸入的含義，或者是\n<a href=\"https://en.wikipedia.org/wiki/Pure_function#Impure_functions\">不純的函式</a>，請不要使用轉換。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"svkjw4o2e9sie4jjefxykjvd\">相反，使用\n<code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code>進行具有不同含義的轉換，或使用\n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>進行在輸入發生變化時應該執行的不純程式碼。</p>\n</div>\n<h2 id=\"why-should-we-use-signal-inputs-and-not-input\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wg6fb8up8g3rl0ru6cxg6fac\">為什麼應該使用訊號輸入而不是\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#why-should-we-use-signal-inputs-and-not-input\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d17oxw62yvvabs3i1z0mb4n7m\">訊號輸入是裝飾器為基礎的\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>的回應式替代品。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmbhvq713bc57v29jcqf00cix\">與基於裝飾器的\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>相比，訊號輸入提供了許多優勢：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ceexmf44mxqqz73o8ha9p74c\">訊號輸入更加\n<strong>型別安全• 必需輸入不需要初始值，也不需要技巧告訴 TypeScript 輸入始終有值。 <br>• 轉換會自動檢查對應的輸入值。</strong></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ca3q02v9yumulxgzgekkawj1d\">在樣板中使用訊號輸入時，將\n<strong>自動</strong>標記 \n<code>OnPush</code> 元件為髒。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nnmr0mqg8u5es1vuk38qnhfy\">每當輸入發生變化時，可以使用\n<code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code>輕鬆地派生數值。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efoq4j4q1vlgrq3itv8d0ripd\">使用\n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>比使用\n<code>ngOnChanges</code>或setter更容易和更本地地監控輸入。</li>\n</ol>\n\n  \n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /guide/releases#developer-preview\n - /guide/signals\n - /guide/signals#computed-signals\n - api/core/Component\n - api/core/Input\n - api/core/InputSignal\n - api/core/Signal\n - api/core/computed\n - api/core/effect\n - api/core/signal\n - guide/signal-inputs#aliasing-an-input\n - guide/signal-inputs#deriving-values\n - guide/signal-inputs#monitoring-changes\n - guide/signal-inputs#signal-inputs\n - guide/signal-inputs#using-in-templates\n - guide/signal-inputs#value-transforms\n - guide/signal-inputs#why-should-we-use-signal-inputs-and-not-input\n - https://en.wikipedia.org/wiki/Pure_function\n - https://en.wikipedia.org/wiki/Pure_function#Impure_functions\n-->"}
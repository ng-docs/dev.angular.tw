{"id":"guide/signal-inputs","title":"信号输入","contents":"<div class=\"content\">\n  <h1 id=\"signal-inputs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dusl85b8uq8bewp993jz4y5q\">信号输入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#signal-inputs\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pajletbqczfzicysm3xy2zpm\">信号输入允许从父组件绑定值。 这些值使用\n<code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>暴露出来，并且可以在组件的生命周期中改变。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axcajuuc9eg2knjwc9uqzcobo\">信号输入目前处于\n<a href=\"/guide/releases#developer-preview\">开发者预览</a>阶段。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rdn0kyjnlii2ipy2u2dvsxog\">Angular 支持两种输入变体：</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"817x91ekcnofjvld8abyj73vh\"><strong>可选输入</strong> 输入默认为可选的，除非使用\n<code>input.required</code>。 您可以指定显式的初始值，或者 Angular 将隐式使用\n<code>undefined</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sxk4weav8l2cppwopfc9zv5s\"><strong>必选输入</strong> 必选输入始终具有给定输入类型的值。 它们使用\n<code>input.required</code>函数声明。</p>\n<code-example language=\"typescript\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, input} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({...})\nexport class MyComp {\n  // optional\n  firstName = input&lt;string&gt;();         // <a href=\"api/core/InputSignal\" class=\"code-anchor\">InputSignal</a>&lt;string|undefined&gt;\n  age = input(0);                      // <a href=\"api/core/InputSignal\" class=\"code-anchor\">InputSignal</a>&lt;number&gt;\n\n  // required\n  lastName = input.required&lt;string&gt;(); // <a href=\"api/core/InputSignal\" class=\"code-anchor\">InputSignal</a>&lt;string&gt;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4mrols8mwm090uh6cj2vzhztd\">每当您使用\n<code>input</code>或\n<code>input.required</code>函数作为类成员的初始化器时，Angular 会自动识别输入。</p>\n<h2 id=\"aliasing-an-input\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4bqi2fpzb1ksywzc5ygbbkg8w\">为输入设置别名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#aliasing-an-input\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5wrizptsinkuq23fxljm6c98\">Angular 使用类成员名称作为输入的名称。 您可以为输入设置别名，以便更改它们的公共名称。</p>\n<code-example language=\"typescript\">\nclass StudentDirective {\n  age = input(0, {alias: 'studentAge'});\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dgwmvx3d5g3t862os8mmqmqnl\">这允许用户使用\n<code>[studentAge]</code>绑定到您的输入，而在组件内部，您可以使用\n<code>this.age</code>访问输入值。</p>\n<h2 id=\"using-in-templates\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c8ptqg50lt0wk8it42p7q5kq\">在模板中使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#using-in-templates\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9v4gh2m42zgl3iotk9rlqfspr\">信号输入是只读信号。与通过\n<code><a href=\"api/core/signal\" class=\"code-anchor\">signal</a>()</code>声明的信号一样，通过调用输入信号来访问输入当前值。</p>\n<code-example language=\"html\">\n&lt;p&gt;First name: {{firstName()}}&lt;/p&gt;\n&lt;p&gt;Last name: {{lastName()}}&lt;/p&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dcvf7dno7t5zg4wdpd446a68m\">这种对值的访问在响应式上下文中被捕获，并且可以在输入值发生变化时通知活动的消费者，比如 Angular 本身。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2x7avoy4j0ix1r5leenif1qny\">实际上，输入信号是从你在\n<a href=\"/guide/signals\">信号指南</a>中了解到的信号的一个微不足道的扩展。</p>\n<code-example language=\"typescript\">\nexport class <a href=\"api/core/InputSignal\" class=\"code-anchor\">InputSignal</a>&lt;T&gt; extends <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;T&gt; { ... }`.\n</code-example>\n<h2 id=\"deriving-values\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"140olfp11p27pflws0qt91kwp\">派生值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#deriving-values\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"evpt3run4dmz3nu4nmta4mfn\">与信号一样，你可以使用\n<code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code>从输入中派生值。</p>\n<code-example language=\"typescript\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, input, <a href=\"api/core/computed\" class=\"code-anchor\">computed</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({...})\nexport class MyComp {\n  age = input(0);\n\n  // age multiplied by two.\n  ageMultiplied = <a href=\"api/core/computed\" class=\"code-anchor\">computed</a>(() =&gt; this.age() * 2);\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56zbp4gezrktx2h2g1u8fnuc3\">计算信号会对值进行存储。在\n<a href=\"/guide/signals#computed-signals\">用于计算的专用部分</a>中查看更多细节。</p>\n<h2 id=\"monitoring-changes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwi75eyis0to52f12dsu1buum\">监视变化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#monitoring-changes\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13fgxpz1jsy6loanp5vq8rbot\">使用信号输入，用户可以利用\n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>函数。该函数将在输入发生变化时执行。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3l5uu3ws4jpch7vp3vngivu4h\">考虑以下示例。每当\n<code>firstName</code>输入发生变化时，新值将被打印到控制台。</p>\n<code-example language=\"typescript\">\nimport {input, <a href=\"api/core/effect\" class=\"code-anchor\">effect</a>} from '@angular/core';\n\nclass MyComp {\n  firstName = input.required&lt;string&gt;();\n\n  constructor() {\n    <a href=\"api/core/effect\" class=\"code-anchor\">effect</a>(() =&gt; {\n      console.log(this.firstName());\n    });\n  }\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9u9u5hmc81l5xbibmu8nf4lsz\">每当\n<code>firstName</code>输入发生变化时，\n<code>console.log</code>函数都会被调用。这将在\n<code>firstName</code>可用时立即发生，并持续发生在\n<code>MyComp</code>的生命周期内。</p>\n<h2 id=\"value-transforms\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8hfhy2kpwzakj3kahd2v6uaij\">值转换<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#value-transforms\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c92j2s8pmtr5cm6cufg8mloki\">您可能希望在不改变输入含义的情况下强制转换或解析输入值。转换将父模板的原始值转换为期望的输入类型。转换应该是\n<a href=\"https://en.wikipedia.org/wiki/Pure_function\">纯函数</a>。</p>\n<code-example language=\"typescript\">\nclass MyComp {\n  disabled = input(false, {\n    transform: (value: boolean|string) =&gt; typeof value === 'string' ? value === '' : value,\n  });\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6o4t06p0s066dior1hrxsfyxj\">在上面的示例中，您声明了一个名为\n<code>disabled</code>的输入，接受\n<code>boolean</code>和\n<code>string</code>类型的值。这由\n<code>transform</code>选项中\n<code>value</code>的显式参数类型捕获。然后，这些值通过转换解析为\n<code>boolean</code>，生成布尔值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4si3v3ax2xy6hgzz9xsgr6g5d\">这样，当调用\n<code>this.disabled()</code>时，您在组件内部只处理\n<code>boolean</code>，而组件的用户可以传递空字符串作为一种快捷方式来标记您的组件为禁用状态。</p>\n<code-example language=\"html\">\n&lt;my-custom-comp disabled&gt;\n</code-example>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35dhcqqcljh424cy96k105g0h\">如果转换改变了输入的含义，或者是\n<a href=\"https://en.wikipedia.org/wiki/Pure_function#Impure_functions\">不纯的函数</a>，请不要使用转换。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"svkjw4o2e9sie4jjefxykjvd\">相反，使用\n<code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code>进行具有不同含义的转换，或使用\n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>进行在输入发生变化时应该运行的不纯代码。</p>\n</div>\n<h2 id=\"why-should-we-use-signal-inputs-and-not-input\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3wg6fb8up8g3rl0ru6cxg6fac\">为什么应该使用信号输入而不是\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signal-inputs#why-should-we-use-signal-inputs-and-not-input\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d17oxw62yvvabs3i1z0mb4n7m\">信号输入是装饰器为基础的\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>的响应式替代品。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bmbhvq713bc57v29jcqf00cix\">与基于装饰器的\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>相比，信号输入提供了许多优势：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6ceexmf44mxqqz73o8ha9p74c\">信号输入更加\n<strong>类型安全• 必需输入不需要初始值，也不需要技巧告诉 TypeScript 输入始终有值。 <br>• 转换会自动检查匹配的输入值。</strong></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ca3q02v9yumulxgzgekkawj1d\">在模板中使用信号输入时，将\n<strong>自动</strong>标记 \n<code>OnPush</code> 组件为脏。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nnmr0mqg8u5es1vuk38qnhfy\">每当输入发生变化时，可以使用\n<code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code>轻松地派生数值。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"efoq4j4q1vlgrq3itv8d0ripd\">使用\n<code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code>比使用\n<code>ngOnChanges</code>或setter更容易和更本地地监控输入。</li>\n</ol>\n\n  \n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /guide/releases#developer-preview\n - /guide/signals\n - /guide/signals#computed-signals\n - api/core/Component\n - api/core/Input\n - api/core/InputSignal\n - api/core/Signal\n - api/core/computed\n - api/core/effect\n - api/core/signal\n - guide/signal-inputs#aliasing-an-input\n - guide/signal-inputs#deriving-values\n - guide/signal-inputs#monitoring-changes\n - guide/signal-inputs#signal-inputs\n - guide/signal-inputs#using-in-templates\n - guide/signal-inputs#value-transforms\n - guide/signal-inputs#why-should-we-use-signal-inputs-and-not-input\n - https://en.wikipedia.org/wiki/Pure_function\n - https://en.wikipedia.org/wiki/Pure_function#Impure_functions\n-->"}
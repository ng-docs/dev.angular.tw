{"id":"guide/aot-metadata-errors","title":"AOT 元資料錯誤","contents":"<div class=\"content\">\n  <h1 id=\"aot-metadata-errors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ubva5ekegcprdgv0kqjap9hb\">AOT 元資料錯誤<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#aot-metadata-errors\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dryuujvcj34rk8wuw1s30ktxu\">以下是你可能會遇到的元資料錯誤，帶有解釋和建議的更正。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2r4t89x9d1ez44cufxs7fm5m2\"><a href=\"guide/aot-metadata-errors#expression-form-not-supported\">不支援此表示式格式（Expression form not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-local-symbol\">引用了局部（未匯出的）符號（Reference to a local (non-exported) symbol）</a><br>\n<a href=\"guide/aot-metadata-errors#only-initialized-variables\">只允許初始化過的變數和常數（Only initialized variables and constants）</a><br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-non-exported-class\">引用了未匯出的類（Reference to a non-exported class）</a><br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-non-exported-function\">引用了未匯出的函式（Reference to a non-exported function）</a><br>\n<a href=\"guide/aot-metadata-errors#function-calls-not-supported\">不支援函式呼叫（Function calls are not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#destructured-variable-not-supported\">不支援解構變數或常數（Destructured variable or constant not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#could-not-resolve-type\">不能解析此類型（Could not resolve type）</a><br>\n<a href=\"guide/aot-metadata-errors#name-expected\">期待是名字（Name expected）</a><br>\n<a href=\"guide/aot-metadata-errors#unsupported-enum-member-name\">不支援的列舉成員名（Unsupported enum member name）</a><br>\n<a href=\"guide/aot-metadata-errors#tagged-template-expressions-not-supported\">不支援帶標籤函式的樣板表示式（Tagged template expressions are not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#symbol-reference-expected\">期待是符號引用（Symbol reference expected）</a><br></p>\n<p><a id=\"expression-form-not-supported\"></a></p>\n<h2 id=\"expression-form-not-supported\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dulek5ot6uppv7bou77m7u11\">不支援此表示式格式（Expression form not supported）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#expression-form-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahcp74yfsypfmg4rncd3lyz4r\">編譯器在對 Angular 元資料求值時遇到了一個它不能理解的表示式。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyrshl29i8qtlzio9qxaobde\">如以下範例所示，使用了編譯器的<a href=\"guide/aot-compiler#expression-syntax\">受限表示式語法</a>之外的語言屬性可能會產生此錯誤：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nexport class Fooish { … }\n…\nconst prop = typeof Fooish; // typeof is not valid in metadata\n  …\n  // bracket notation is not valid in metadata\n  { provide: 'token', useValue: { [prop]: 'value' } };\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54u85983876b6lqdbwybq93yb\">你可以在普通的應用程式碼中使用 <code>typeof</code> 和方括號標記法來指定屬性名，但是這些屬性不能在定義 Angular 元資料的表示式中使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5avrv4heswvydblo41bsllucz\">透過在編寫 Angular 元資料時堅持使用編譯器的<a href=\"guide/aot-compiler#expression-syntax\">受限表示式語法</a>來避免此錯誤，並小心新的或不常用的 TypeScript 功能。</p>\n<p><a id=\"reference-to-a-local-symbol\"></a></p>\n<h2 id=\"reference-to-a-local-non-exported-symbol\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18u6us3sdhgpp4ewlcai2o99k\">引用本地（未匯出的）符號（Reference to a local (non-exported) symbol）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-local-non-exported-symbol\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mhg0v0zdrxx9spfdekda2t2l\"><em>如果要引用區域性（未匯出的）符號 'symbol name'，請考慮匯出它。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ea9c6sbf5juppnkwazj1xxsp\">編譯器遇到對本地定義的符號的引用，該符號未被匯出或未被初始化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dzuj5v4jlutmq3tm3ogu7mxg\">下面就是存在該問題的 <code>provider</code> 範例。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nlet foo: number; // neither exported nor initialized\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: … ,\n  providers: [\n    { provide: Foo, useValue: foo }\n  ]\n})\nexport class MyComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8s7sixxj2x77j1t1gel64dfsw\">編譯器會生成這個元件工廠，其中包含 <code>useValue</code> 提供者的程式碼。<em>那個</em>工廠模組不能訪問<em>這個</em>原始碼模組，無法訪問這個（未匯出的）<code>foo</code> 變數。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7ckchu1w4936zkwov1vu76zt\">你可以透過初始化 <code>foo</code> 來修正這個錯誤。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nlet foo = 42; // initialized\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xnq51n7i175z88kn2662ax53\">編譯器會將表示式<a href=\"guide/aot-compiler#code-folding\">摺疊</a>到提供者中，就像你自己寫的一樣。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nproviders: [\n  { provide: Foo, useValue: 42 }\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ugs77pyww18k58s9ctnpmy97\">另外，你也可以透過匯出 <code>foo</code> 來解決它，這樣 <code>foo</code> 將會在執行期間你真正知道它的值的時候被賦值。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport let foo: number; // exported\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: … ,\n  providers: [\n    { provide: Foo, useValue: foo }\n  ]\n})\nexport class MyComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vmljfr3rvlvgdhrr7mdt8j8w\">新增 <code>export</code> 的方式通常用於需要在元資料中引用變數時，如 <code>providers</code> 和 <code>animations</code>，這樣編譯器就可以在這些表示式中生成對已匯出變數的引用了。它不需要知道這些變數的<em>值</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6opjdkqkkhcamlcrxhputipos\">當編譯器需要知道<em>真正的值</em>以生成程式碼時，新增 <code>export</code> 的方式就是無效的。比如這裡的 <code>template</code> 屬性。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nexport let someTemplate: string; // exported but not initialized\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"62f8wu7f4r3so1asqha38u6h2\">編譯器<em>現在就</em>需要 <code>template</code> 屬性的值來生成元件工廠。\n僅僅有對該變數的引用是不夠的。\n給這個宣告加上 <code>export</code> 字首只會生成一個新的錯誤 \"<a href=\"guide/aot-metadata-errors#only-initialized-variables\"><code>Only initialized variables and constants can be referenced</code>【只能引用初始化過的變數和常數】</a>\"。</p>\n<p><a id=\"only-initialized-variables\"></a></p>\n<h2 id=\"only-initialized-variables-and-constants\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bprvedijwxq3hl9ll4egk0zsr\">只支援初始化過的變數和常數（Only initialized variables and constants）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#only-initialized-variables-and-constants\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2s5k9uhzh6zisp3gwcfhrhjys\"><em>只能引用已初始化過的變數和常數，因為樣板編譯器需要該變數的值。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6o8bnucpqy36z0h0srfie601\">編譯器發現某個到已匯出的變數或靜態欄位的引用是沒有初始化過的。而它需要根據那個變數的值來生成程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wxx0w7u9pmvjtkofpu9879hj\">下面的例子試圖把元件的 <code>template</code> 屬性設定為已匯出的 <code>someTemplate</code> 變數的值，而這個值雖然宣告過，卻沒有初始化過。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nexport let someTemplate: string;\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4oneyif8k5kulbxrhtfrza87z\">如果你從其它模組中匯入了 <code>someTemplate</code>，但那個模組中忘了初始化它，就會看到這個錯誤。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR - not initialized there either\nimport { someTemplate } from './config';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6in0zqvyf60c2bzpdcy5y6xz\">編譯器不能等到執行時才得到該樣板的訊息。它必須從原始碼中靜態獲得這個 <code>someTemplate</code> 變數的值，以便生成元件工廠，元件工廠中需要包含根據這個樣板來生成元素的程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vgc43m3ssj65jzb71iag1qmc\">要糾正這個錯誤，請在<em>同一行</em>的初始化子句中初始化這個變數的值。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport let someTemplate = '&lt;h1&gt;Greetings from Angular&lt;/h1&gt;';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p><a id=\"reference-to-a-non-exported-class\"></a></p>\n<h2 id=\"reference-to-a-non-exported-class\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9oyv5n8nt8gltoczjjfelm4yi\">引用未匯出過的類（Reference to a non-exported class）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-non-exported-class\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxbhfjr9f14uc1b1qkb5kvljs\"><em>對非匯出類 <code>&lt;class name&gt;</code> 的引用。</em>\n<em>考慮匯出此類。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7aam8ulnuk8pm034q1u7doe1u\">元資料引用了一個未匯出的類。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5uczmc6r7j1ilv0es457xuz\">比如，你可能定義了一個類並在某個 <code>providers</code> 陣列中把它用作了依賴注入令牌，但是忘了匯出這個類。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nabstract class MyStrategy { }\n\n  …\n  providers: [\n    { provide: MyStrategy, useValue: … }\n  ]\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ed2j1ixk7wykw0f30o4i6e3v\">Angular 在單獨的模組中生成類別工廠，並且該工廠<a href=\"guide/aot-compiler#exported-symbols\">只能訪問匯出的類</a>。要更正此錯誤，請匯出所引用的類。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport abstract class MyStrategy { }\n\n  …\n  providers: [\n    { provide: MyStrategy, useValue: … }\n  ]\n  …\n\n</code-example>\n<p><a id=\"reference-to-a-non-exported-function\"></a></p>\n<h2 id=\"reference-to-a-non-exported-function\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtp9v6ovipajzeozc0n5gg7iz\">引用未匯出過的函式（Reference to a non-exported function）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-non-exported-function\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ro0apk1wpxja42i0riuvrfst\">元資料中引用了未匯出的函式。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5x86r11utsllqop4p99g1vpvy\">比如，你可能已經把某個服務提供者的 <code>useFactory</code> 屬性設定成了一個區域性定義但忘了匯出的函式。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nfunction myStrategy() { … }\n\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: myStrategy }\n  ]\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nqz8z1nepotidd5jdjifpvan\">Angular 在單獨的模組中生成類別工廠，該工廠<a href=\"guide/aot-compiler#exported-symbols\">只能訪問匯出的函式</a>。要更正此錯誤，請匯出此函式。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport function myStrategy() { … }\n\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: myStrategy }\n  ]\n  …\n\n</code-example>\n<p><a id=\"function-calls-not-supported\"></a></p>\n<h2 id=\"function-calls-are-not-supported\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewhraec9c3hvgpbupkpn7bhy1\">不支援函式呼叫（Function calls are not supported）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#function-calls-are-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b354bzxxzevc4cqdp2gqutlbu\"><em>不支援函式呼叫。考慮把這個函式或 lambda 表示式替換成一個對已匯出函式的引用。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4etvbft6bbm0u1f8l49cvb9ct\">編譯器當前不支援<a href=\"guide/aot-compiler#function-expression\">函式表示式或 lambda 函式</a>。比如，你不能將提供者的 <code>useFactory</code> 設定為這樣的匿名函式或箭頭函式。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: function() { … } },\n    { provide: OtherStrategy, useFactory: () =&gt; { … } }\n  ]\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34bn7s0rlik57m97her4y40xp\">如果你在某個提供者的 <code>useValue</code> 中呼叫函式或方法，也會導致這個錯誤。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nimport { calculateValue } from './utilities';\n\n  …\n  providers: [\n    { provide: SomeValue, useValue: calculateValue() }\n  ]\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qikbuc6qz1xrlc4oxi39qi67\">要改正這個問題，就要從模組中匯出這個函式，並改成在服務提供者的 <code>useFactory</code> 中引用該函式。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nimport { calculateValue } from './utilities';\n\nexport function myStrategy() { … }\nexport function otherStrategy() { … }\nexport function someValueFactory() {\n  return calculateValue();\n}\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: myStrategy },\n    { provide: OtherStrategy, useFactory: otherStrategy },\n    { provide: SomeValue, useFactory: someValueFactory }\n  ]\n  …\n\n</code-example>\n<p><a id=\"destructured-variable-not-supported\"></a></p>\n<h2 id=\"destructured-variable-or-constant-not-supported\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3qxudjj67h4qwrpdswxics9s\">不支援解構變數或常數（Destructured variable or constant not supported）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#destructured-variable-or-constant-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beln593bgzgl5jr03noqifvz\"><em>樣板編譯器不支援引用匯出的解構語法的變數或常數。考慮簡化這一點，以避免解構語法。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bm03emkidfoni29cv279g3iys\">編譯器不支援引用透過<a href=\"https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring\">解構</a>賦值的方式得到的變數。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fq18w42jnibzm2a9cmak4g17\">比如，你不能這麼寫：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nimport { configuration } from './configuration';\n\n// destructured assignment to foo and bar\nconst {foo, bar} = configuration;\n  …\n  providers: [\n    {provide: Foo, useValue: foo},\n    {provide: Bar, useValue: bar},\n  ]\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"el4xro44cn3bltwycnoemwk0q\">要糾正這個錯誤，就要引用非解構方式的變數。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nimport { configuration } from './configuration';\n  …\n  providers: [\n    {provide: Foo, useValue: configuration.foo},\n    {provide: Bar, useValue: configuration.bar},\n  ]\n  …\n\n</code-example>\n<p><a id=\"could-not-resolve-type\"></a></p>\n<h2 id=\"could-not-resolve-type\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4qfeuvukgarfelvtnl8c15tf\">無法解析型別（Could not resolve type）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#could-not-resolve-type\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bej9gtuc9xet3bbkhyryp794a\">編譯器遇到了某個型別，但是不知道它是由哪個模組匯出的。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nztnww9gl5jykprm7xhau0mx\">這通常會發生在你引用環境型別時。比如，<code>Window</code> 型別就是在全域 <code>.d.ts</code> 檔案中宣告的環境型別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cpdkuocnj1wwssmxvcw1ys1y\">如果你在元件的建構式函式中引用它就會導致一個錯誤，因為編譯器必須對建構式函式進行靜態分析。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ })\nexport class MyComponent {\n  constructor (private win: Window) { … }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atb480531cuv7du0td662omvb\">TypeScript 能理解這些環境型別，所以你不用匯入它們。但 Angular 編譯器不理解你沒有匯入或匯出過的型別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35a3dqzvzkxpn4tg40v6z6nq1\">這種情況下，編譯器就無法理解如何使用這個 <code>Window</code> 令牌來進行注入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vfqr3fxqfahumzpvd8znoatv\">不要在元資料表示式中引用環境型別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vpfy30mfzt30dhstwam3rzy9\">如果你必須注入某個環境型別的實例，可以用以下四步來巧妙解決這個問題：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7azba8pu8cpaq3f7mzubl6cu9\">為環境型別的實例建立一個注入令牌。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"as49x53ncygxk5upognv5e526\">建立一個回傳該實例的工廠函式。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wsh1apbzvey7sh9blen7a389\">使用該工廠函式新增一個 <code>useFactory</code> 提供者。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zhqm0bzo408g0gpj5upjdfjh\">使用 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code> 來注入這個實例。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e2ujetaxxophkq8txsishde0\">下面的例子說明了這一點。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nimport { <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a> } from '@angular/core';\n\nexport const WINDOW = new <a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a>('Window');\nexport function _window() { return window; }\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  …\n  providers: [\n    { provide: WINDOW, useFactory: _window }\n  ]\n})\nexport class MyComponent {\n  constructor (@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(WINDOW) private win: Window) { … }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhvjhmiqvxk1hh1s6tzek6wjf\">對於編譯器來說，建構式函式中出現 <code>Window</code> 型別已不再是個問題，因為它現在使用 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(WINDOW)</code> 來生成注入程式碼。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e919cnku0vq80koisd7xg4l2b\">Angular 也用 <code><a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a></code> 令牌做了類似的事情，所以你也可以注入瀏覽器的 <code>document</code> 物件（或它的一個抽象層，取決於該應用執行在哪個平台）。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a> }   from '@angular/core';\nimport { <a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a> } from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nexport class MyComponent {\n  constructor (@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a>) private doc: Document) { … }\n}\n\n</code-example>\n<p><a id=\"name-expected\"></a></p>\n<h2 id=\"name-expected\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"car89uhh3krarwl9p9uaw8sym\">期望有名字（Name expected）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#name-expected\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bso2arbhpfvtl42b33fw45sge\"><em>編譯器在正在計算的表示式中期望有一個名字。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ci084vj0h39jmgikrhjf6bzdf\">如果將數字用作屬性名稱，則可能發生這種情況，如以下範例所示。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nprovider: [{ provide: Foo, useValue: { 0: 'test' } }]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2oy2f5ul3pwf6aly2b8tj4hdw\">把該屬性的名字改為非數字型別。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nprovider: [{ provide: Foo, useValue: { '0': 'test' } }]\n\n</code-example>\n<p><a id=\"unsupported-enum-member-name\"></a></p>\n<h2 id=\"unsupported-enum-member-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91k4pa8bmfa28ljb31gcg0w1m\">不支援的列舉成員名稱（Unsupported enum member name）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#unsupported-enum-member-name\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw1mqhv755lohl9c6uf63cl0y\">Angular 不能確定你在元資料中引用的<a href=\"https://www.typescriptlang.org/docs/handbook/enums.html\">列舉成員</a>的值。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44vrhjlw85r36polyudo1x4cx\">編譯器可以理解簡單的列舉值，但不能理解複雜的，比如從那些計算屬性中派生出來的。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nenum Colors {\n  Red = 1,\n  White,\n  Blue = \"Blue\".length // <a href=\"api/core/computed\" class=\"code-anchor\">computed</a>\n}\n\n  …\n  providers: [\n    { provide: BaseColor,   useValue: Colors.White } // ok\n    { provide: DangerColor, useValue: Colors.Red }   // ok\n    { provide: StrongColor, useValue: Colors.Blue }  // bad\n  ]\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b6kg6vcz6z7tgibkp4qf1cpr\">避免引用那些使用了複雜初始化物件或計算屬性的列舉。</p>\n<p><a id=\"tagged-template-expressions-not-supported\"></a></p>\n<h2 id=\"tagged-template-expressions-are-not-supported\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8g7442isf97t6c4w10pzfe3so\">不支援帶標籤的樣板表示式（Tagged template expressions are not supported）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#tagged-template-expressions-are-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1khe2u1g9ngklk9pzwztb5um\"><em>元資料中不支援帶標籤函式的樣板表示式。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gwizaykaw5wwcc6usn722dqk\">編譯器遇到了 JavaScript ES2015 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\">帶標籤的樣板表示式</a>，如下所示。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nconst expression = 'funky';\nconst raw = String.raw`A tagged template ${expression} string`;\n …\n template: '&lt;div&gt;' + raw + '&lt;/div&gt;'\n …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99cdfd4mw4ccp3iblylt7d5i4\"><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw()</code></a>是 JavaScript ES2015 的原生<em>標籤函式</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41une5bp1qaqjgdw76rhm85zx\">AOT 編譯器不支援帶標籤函式的樣板表示式，避免在元資料表示式中使用它們。</p>\n<p><a id=\"symbol-reference-expected\"></a></p>\n<h2 id=\"symbol-reference-expected\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15ckguihb6ocobdy4wqsag9s7\">期待符號的引用（Symbol reference expected）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#symbol-reference-expected\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95j474w6tsjjsrptqs6lwhavs\">編譯器期待在錯誤訊息指出的位置是一個符號引用。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dh6v9vsn475y4uq6u6buorexh\">當你在類別的 <code>extends</code> 子句中使用表示式時就會出現這個錯誤。</p>\n<!--todo: Chuck: After reviewing your PR comment I'm still at a loss. See [comment there](https://github.com/angular/angular/pull/17712#discussion_r132025495). -->\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/aot-compiler\n-->\n<!-- links from this doc:\n - api/common/DOCUMENT\n - api/core/Component\n - api/core/Inject\n - api/core/InjectionToken\n - api/core/computed\n - guide/aot-compiler#code-folding\n - guide/aot-compiler#exported-symbols\n - guide/aot-compiler#expression-syntax\n - guide/aot-compiler#function-expression\n - guide/aot-metadata-errors#aot-metadata-errors\n - guide/aot-metadata-errors#could-not-resolve-type\n - guide/aot-metadata-errors#destructured-variable-not-supported\n - guide/aot-metadata-errors#destructured-variable-or-constant-not-supported\n - guide/aot-metadata-errors#expression-form-not-supported\n - guide/aot-metadata-errors#function-calls-are-not-supported\n - guide/aot-metadata-errors#function-calls-not-supported\n - guide/aot-metadata-errors#name-expected\n - guide/aot-metadata-errors#only-initialized-variables\n - guide/aot-metadata-errors#only-initialized-variables-and-constants\n - guide/aot-metadata-errors#reference-to-a-local-non-exported-symbol\n - guide/aot-metadata-errors#reference-to-a-local-symbol\n - guide/aot-metadata-errors#reference-to-a-non-exported-class\n - guide/aot-metadata-errors#reference-to-a-non-exported-function\n - guide/aot-metadata-errors#symbol-reference-expected\n - guide/aot-metadata-errors#tagged-template-expressions-are-not-supported\n - guide/aot-metadata-errors#tagged-template-expressions-not-supported\n - guide/aot-metadata-errors#unsupported-enum-member-name\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/raw\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\n - https://www.typescriptlang.org/docs/handbook/enums.html\n - https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring\n-->"}
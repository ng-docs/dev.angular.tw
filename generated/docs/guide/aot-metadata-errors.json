{"id":"guide/aot-metadata-errors","title":"AOT 元数据错误","contents":"<div class=\"content\">\n  <h1 id=\"aot-metadata-errors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ubva5ekegcprdgv0kqjap9hb\">AOT 元数据错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#aot-metadata-errors\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dryuujvcj34rk8wuw1s30ktxu\">以下是你可能会遇到的元数据错误，带有解释和建议的更正。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2r4t89x9d1ez44cufxs7fm5m2\"><a href=\"guide/aot-metadata-errors#expression-form-not-supported\">不支持此表达式格式（Expression form not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-local-symbol\">引用了局部（未导出的）符号（Reference to a local (non-exported) symbol）</a><br>\n<a href=\"guide/aot-metadata-errors#only-initialized-variables\">只允许初始化过的变量和常量（Only initialized variables and constants）</a><br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-non-exported-class\">引用了未导出的类（Reference to a non-exported class）</a><br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-non-exported-function\">引用了未导出的函数（Reference to a non-exported function）</a><br>\n<a href=\"guide/aot-metadata-errors#function-calls-not-supported\">不支持函数调用（Function calls are not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#destructured-variable-not-supported\">不支持解构变量或常量（Destructured variable or constant not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#could-not-resolve-type\">不能解析此类型（Could not resolve type）</a><br>\n<a href=\"guide/aot-metadata-errors#name-expected\">期待是名字（Name expected）</a><br>\n<a href=\"guide/aot-metadata-errors#unsupported-enum-member-name\">不支持的枚举成员名（Unsupported enum member name）</a><br>\n<a href=\"guide/aot-metadata-errors#tagged-template-expressions-not-supported\">不支持带标签函数的模板表达式（Tagged template expressions are not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#symbol-reference-expected\">期待是符号引用（Symbol reference expected）</a><br></p>\n<p><a id=\"expression-form-not-supported\"></a></p>\n<h2 id=\"expression-form-not-supported\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dulek5ot6uppv7bou77m7u11\">不支持此表达式格式（Expression form not supported）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#expression-form-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ahcp74yfsypfmg4rncd3lyz4r\">编译器在对 Angular 元数据求值时遇到了一个它不能理解的表达式。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dyrshl29i8qtlzio9qxaobde\">如以下范例所示，使用了编译器的<a href=\"guide/aot-compiler#expression-syntax\">受限表达式语法</a>之外的语言特性可能会产生此错误：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nexport class Fooish { … }\n…\nconst prop = typeof Fooish; // typeof is not valid in metadata\n  …\n  // bracket notation is not valid in metadata\n  { provide: 'token', useValue: { [prop]: 'value' } };\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54u85983876b6lqdbwybq93yb\">你可以在普通的应用代码中使用 <code>typeof</code> 和方括号标记法来指定属性名，但是这些特性不能在定义 Angular 元数据的表达式中使用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5avrv4heswvydblo41bsllucz\">通过在编写 Angular 元数据时坚持使用编译器的<a href=\"guide/aot-compiler#expression-syntax\">受限表达式语法</a>来避免此错误，并小心新的或不常用的 TypeScript 功能。</p>\n<p><a id=\"reference-to-a-local-symbol\"></a></p>\n<h2 id=\"reference-to-a-local-non-exported-symbol\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"18u6us3sdhgpp4ewlcai2o99k\">引用本地（未导出的）符号（Reference to a local (non-exported) symbol）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-local-non-exported-symbol\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mhg0v0zdrxx9spfdekda2t2l\"><em>如果要引用局部（未导出的）符号 'symbol name'，请考虑导出它。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ea9c6sbf5juppnkwazj1xxsp\">编译器遇到对本地定义的符号的引用，该符号未被导出或未被初始化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7dzuj5v4jlutmq3tm3ogu7mxg\">下面就是存在该问题的 <code>provider</code> 范例。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nlet foo: number; // neither exported nor initialized\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: … ,\n  providers: [\n    { provide: Foo, useValue: foo }\n  ]\n})\nexport class MyComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8s7sixxj2x77j1t1gel64dfsw\">编译器会生成这个组件工厂，其中包含 <code>useValue</code> 提供者的代码。<em>那个</em>工厂模块不能访问<em>这个</em>源码模块，无法访问这个（未导出的）<code>foo</code> 变量。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d7ckchu1w4936zkwov1vu76zt\">你可以通过初始化 <code>foo</code> 来修正这个错误。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nlet foo = 42; // initialized\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xnq51n7i175z88kn2662ax53\">编译器会将表达式<a href=\"guide/aot-compiler#code-folding\">折叠</a>到提供者中，就像你自己写的一样。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nproviders: [\n  { provide: Foo, useValue: 42 }\n]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ugs77pyww18k58s9ctnpmy97\">另外，你也可以通过导出 <code>foo</code> 来解决它，这样 <code>foo</code> 将会在运行期间你真正知道它的值的时候被赋值。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport let foo: number; // exported\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: … ,\n  providers: [\n    { provide: Foo, useValue: foo }\n  ]\n})\nexport class MyComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vmljfr3rvlvgdhrr7mdt8j8w\">添加 <code>export</code> 的方式通常用于需要在元数据中引用变量时，如 <code>providers</code> 和 <code>animations</code>，这样编译器就可以在这些表达式中生成对已导出变量的引用了。它不需要知道这些变量的<em>值</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6opjdkqkkhcamlcrxhputipos\">当编译器需要知道<em>真正的值</em>以生成代码时，添加 <code>export</code> 的方式就是无效的。比如这里的 <code>template</code> 属性。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nexport let someTemplate: string; // exported but not initialized\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"62f8wu7f4r3so1asqha38u6h2\">编译器<em>现在就</em>需要 <code>template</code> 属性的值来生成组件工厂。\n仅仅有对该变量的引用是不够的。\n给这个声明加上 <code>export</code> 前缀只会生成一个新的错误 \"<a href=\"guide/aot-metadata-errors#only-initialized-variables\"><code>Only initialized variables and constants can be referenced</code>【只能引用初始化过的变量和常量】</a>\"。</p>\n<p><a id=\"only-initialized-variables\"></a></p>\n<h2 id=\"only-initialized-variables-and-constants\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bprvedijwxq3hl9ll4egk0zsr\">只支持初始化过的变量和常量（Only initialized variables and constants）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#only-initialized-variables-and-constants\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2s5k9uhzh6zisp3gwcfhrhjys\"><em>只能引用已初始化过的变量和常量，因为模板编译器需要该变量的值。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c6o8bnucpqy36z0h0srfie601\">编译器发现某个到已导出的变量或静态字段的引用是没有初始化过的。而它需要根据那个变量的值来生成代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wxx0w7u9pmvjtkofpu9879hj\">下面的例子试图把组件的 <code>template</code> 属性设置为已导出的 <code>someTemplate</code> 变量的值，而这个值虽然声明过，却没有初始化过。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nexport let someTemplate: string;\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4oneyif8k5kulbxrhtfrza87z\">如果你从其它模块中导入了 <code>someTemplate</code>，但那个模块中忘了初始化它，就会看到这个错误。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR - not initialized there either\nimport { someTemplate } from './config';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a6in0zqvyf60c2bzpdcy5y6xz\">编译器不能等到运行时才得到该模板的信息。它必须从源码中静态获得这个 <code>someTemplate</code> 变量的值，以便生成组件工厂，组件工厂中需要包含根据这个模板来生成元素的代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8vgc43m3ssj65jzb71iag1qmc\">要纠正这个错误，请在<em>同一行</em>的初始化子句中初始化这个变量的值。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport let someTemplate = '&lt;h1&gt;Greetings from Angular&lt;/h1&gt;';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p><a id=\"reference-to-a-non-exported-class\"></a></p>\n<h2 id=\"reference-to-a-non-exported-class\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9oyv5n8nt8gltoczjjfelm4yi\">引用未导出过的类（Reference to a non-exported class）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-non-exported-class\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxbhfjr9f14uc1b1qkb5kvljs\"><em>对非导出类 <code>&lt;class name&gt;</code> 的引用。</em>\n<em>考虑导出此类。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7aam8ulnuk8pm034q1u7doe1u\">元数据引用了一个未导出的类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b5uczmc6r7j1ilv0es457xuz\">比如，你可能定义了一个类并在某个 <code>providers</code> 数组中把它用作了依赖注入令牌，但是忘了导出这个类。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nabstract class MyStrategy { }\n\n  …\n  providers: [\n    { provide: MyStrategy, useValue: … }\n  ]\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ed2j1ixk7wykw0f30o4i6e3v\">Angular 在单独的模块中生成类工厂，并且该工厂<a href=\"guide/aot-compiler#exported-symbols\">只能访问导出的类</a>。要更正此错误，请导出所引用的类。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport abstract class MyStrategy { }\n\n  …\n  providers: [\n    { provide: MyStrategy, useValue: … }\n  ]\n  …\n\n</code-example>\n<p><a id=\"reference-to-a-non-exported-function\"></a></p>\n<h2 id=\"reference-to-a-non-exported-function\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtp9v6ovipajzeozc0n5gg7iz\">引用未导出过的函数（Reference to a non-exported function）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-non-exported-function\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ro0apk1wpxja42i0riuvrfst\">元数据中引用了未导出的函数。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5x86r11utsllqop4p99g1vpvy\">比如，你可能已经把某个服务提供者的 <code>useFactory</code> 属性设置成了一个局部定义但忘了导出的函数。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nfunction myStrategy() { … }\n\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: myStrategy }\n  ]\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nqz8z1nepotidd5jdjifpvan\">Angular 在单独的模块中生成类工厂，该工厂<a href=\"guide/aot-compiler#exported-symbols\">只能访问导出的函数</a>。要更正此错误，请导出此函数。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport function myStrategy() { … }\n\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: myStrategy }\n  ]\n  …\n\n</code-example>\n<p><a id=\"function-calls-not-supported\"></a></p>\n<h2 id=\"function-calls-are-not-supported\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewhraec9c3hvgpbupkpn7bhy1\">不支持函数调用（Function calls are not supported）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#function-calls-are-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b354bzxxzevc4cqdp2gqutlbu\"><em>不支持函数调用。考虑把这个函数或 lambda 表达式替换成一个对已导出函数的引用。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4etvbft6bbm0u1f8l49cvb9ct\">编译器当前不支持<a href=\"guide/aot-compiler#function-expression\">函数表达式或 lambda 函数</a>。比如，你不能将提供者的 <code>useFactory</code> 设置为这样的匿名函数或箭头函数。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: function() { … } },\n    { provide: OtherStrategy, useFactory: () =&gt; { … } }\n  ]\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"34bn7s0rlik57m97her4y40xp\">如果你在某个提供者的 <code>useValue</code> 中调用函数或方法，也会导致这个错误。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nimport { calculateValue } from './utilities';\n\n  …\n  providers: [\n    { provide: SomeValue, useValue: calculateValue() }\n  ]\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qikbuc6qz1xrlc4oxi39qi67\">要改正这个问题，就要从模块中导出这个函数，并改成在服务提供者的 <code>useFactory</code> 中引用该函数。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nimport { calculateValue } from './utilities';\n\nexport function myStrategy() { … }\nexport function otherStrategy() { … }\nexport function someValueFactory() {\n  return calculateValue();\n}\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: myStrategy },\n    { provide: OtherStrategy, useFactory: otherStrategy },\n    { provide: SomeValue, useFactory: someValueFactory }\n  ]\n  …\n\n</code-example>\n<p><a id=\"destructured-variable-not-supported\"></a></p>\n<h2 id=\"destructured-variable-or-constant-not-supported\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3qxudjj67h4qwrpdswxics9s\">不支持解构变量或常量（Destructured variable or constant not supported）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#destructured-variable-or-constant-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beln593bgzgl5jr03noqifvz\"><em>模板编译器不支持引用导出的解构语法的变量或常量。考虑简化这一点，以避免解构语法。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bm03emkidfoni29cv279g3iys\">编译器不支持引用通过<a href=\"https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring\">解构</a>赋值的方式得到的变量。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fq18w42jnibzm2a9cmak4g17\">比如，你不能这么写：</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nimport { configuration } from './configuration';\n\n// destructured assignment to foo and bar\nconst {foo, bar} = configuration;\n  …\n  providers: [\n    {provide: Foo, useValue: foo},\n    {provide: Bar, useValue: bar},\n  ]\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"el4xro44cn3bltwycnoemwk0q\">要纠正这个错误，就要引用非解构方式的变量。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nimport { configuration } from './configuration';\n  …\n  providers: [\n    {provide: Foo, useValue: configuration.foo},\n    {provide: Bar, useValue: configuration.bar},\n  ]\n  …\n\n</code-example>\n<p><a id=\"could-not-resolve-type\"></a></p>\n<h2 id=\"could-not-resolve-type\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b4qfeuvukgarfelvtnl8c15tf\">无法解析类型（Could not resolve type）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#could-not-resolve-type\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bej9gtuc9xet3bbkhyryp794a\">编译器遇到了某个类型，但是不知道它是由哪个模块导出的。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4nztnww9gl5jykprm7xhau0mx\">这通常会发生在你引用环境类型时。比如，<code>Window</code> 类型就是在全局 <code>.d.ts</code> 文件中声明的环境类型。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8cpdkuocnj1wwssmxvcw1ys1y\">如果你在组件的构造函数中引用它就会导致一个错误，因为编译器必须对构造函数进行静态分析。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ })\nexport class MyComponent {\n  constructor (private win: Window) { … }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atb480531cuv7du0td662omvb\">TypeScript 能理解这些环境类型，所以你不用导入它们。但 Angular 编译器不理解你没有导入或导出过的类型。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35a3dqzvzkxpn4tg40v6z6nq1\">这种情况下，编译器就无法理解如何使用这个 <code>Window</code> 令牌来进行注入。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vfqr3fxqfahumzpvd8znoatv\">不要在元数据表达式中引用环境类型。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5vpfy30mfzt30dhstwam3rzy9\">如果你必须注入某个环境类型的实例，可以用以下四步来巧妙解决这个问题：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7azba8pu8cpaq3f7mzubl6cu9\">为环境类型的实例创建一个注入令牌。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"as49x53ncygxk5upognv5e526\">创建一个返回该实例的工厂函数。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wsh1apbzvey7sh9blen7a389\">使用该工厂函数添加一个 <code>useFactory</code> 提供者。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zhqm0bzo408g0gpj5upjdfjh\">使用 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code> 来注入这个实例。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e2ujetaxxophkq8txsishde0\">下面的例子说明了这一点。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nimport { <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a> } from '@angular/core';\n\nexport const WINDOW = new <a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a>('Window');\nexport function _window() { return window; }\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  …\n  providers: [\n    { provide: WINDOW, useFactory: _window }\n  ]\n})\nexport class MyComponent {\n  constructor (@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(WINDOW) private win: Window) { … }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bhvjhmiqvxk1hh1s6tzek6wjf\">对于编译器来说，构造函数中出现 <code>Window</code> 类型已不再是个问题，因为它现在使用 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(WINDOW)</code> 来生成注入代码。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e919cnku0vq80koisd7xg4l2b\">Angular 也用 <code><a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a></code> 令牌做了类似的事情，所以你也可以注入浏览器的 <code>document</code> 对象（或它的一个抽象层，取决于该应用运行在哪个平台）。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a> }   from '@angular/core';\nimport { <a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a> } from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nexport class MyComponent {\n  constructor (@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a>) private doc: Document) { … }\n}\n\n</code-example>\n<p><a id=\"name-expected\"></a></p>\n<h2 id=\"name-expected\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"car89uhh3krarwl9p9uaw8sym\">期望有名字（Name expected）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#name-expected\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bso2arbhpfvtl42b33fw45sge\"><em>编译器在正在计算的表达式中期望有一个名字。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ci084vj0h39jmgikrhjf6bzdf\">如果将数字用作属性名称，则可能发生这种情况，如以下范例所示。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nprovider: [{ provide: Foo, useValue: { 0: 'test' } }]\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2oy2f5ul3pwf6aly2b8tj4hdw\">把该属性的名字改为非数字类型。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nprovider: [{ provide: Foo, useValue: { '0': 'test' } }]\n\n</code-example>\n<p><a id=\"unsupported-enum-member-name\"></a></p>\n<h2 id=\"unsupported-enum-member-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91k4pa8bmfa28ljb31gcg0w1m\">不支持的枚举成员名称（Unsupported enum member name）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#unsupported-enum-member-name\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aw1mqhv755lohl9c6uf63cl0y\">Angular 不能确定你在元数据中引用的<a href=\"https://www.typescriptlang.org/docs/handbook/enums.html\">枚举成员</a>的值。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"44vrhjlw85r36polyudo1x4cx\">编译器可以理解简单的枚举值，但不能理解复杂的，比如从那些计算属性中派生出来的。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nenum Colors {\n  Red = 1,\n  White,\n  Blue = \"Blue\".length // <a href=\"api/core/computed\" class=\"code-anchor\">computed</a>\n}\n\n  …\n  providers: [\n    { provide: BaseColor,   useValue: Colors.White } // ok\n    { provide: DangerColor, useValue: Colors.Red }   // ok\n    { provide: StrongColor, useValue: Colors.Blue }  // bad\n  ]\n  …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9b6kg6vcz6z7tgibkp4qf1cpr\">避免引用那些使用了复杂初始化对象或计算属性的枚举。</p>\n<p><a id=\"tagged-template-expressions-not-supported\"></a></p>\n<h2 id=\"tagged-template-expressions-are-not-supported\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8g7442isf97t6c4w10pzfe3so\">不支持带标签的模板表达式（Tagged template expressions are not supported）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#tagged-template-expressions-are-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d1khe2u1g9ngklk9pzwztb5um\"><em>元数据中不支持带标签函数的模板表达式。</em></p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2gwizaykaw5wwcc6usn722dqk\">编译器遇到了 JavaScript ES2015 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\">带标签的模板表达式</a>，如下所示。</p>\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nconst expression = 'funky';\nconst raw = String.raw`A tagged template ${expression} string`;\n …\n template: '&lt;div&gt;' + raw + '&lt;/div&gt;'\n …\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99cdfd4mw4ccp3iblylt7d5i4\"><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw()</code></a>是 JavaScript ES2015 的原生<em>标签函数</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41une5bp1qaqjgdw76rhm85zx\">AOT 编译器不支持带标签函数的模板表达式，避免在元数据表达式中使用它们。</p>\n<p><a id=\"symbol-reference-expected\"></a></p>\n<h2 id=\"symbol-reference-expected\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"15ckguihb6ocobdy4wqsag9s7\">期待符号的引用（Symbol reference expected）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#symbol-reference-expected\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95j474w6tsjjsrptqs6lwhavs\">编译器期待在错误信息指出的位置是一个符号引用。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dh6v9vsn475y4uq6u6buorexh\">当你在类的 <code>extends</code> 子句中使用表达式时就会出现这个错误。</p>\n<!--todo: Chuck: After reviewing your PR comment I'm still at a loss. See [comment there](https://github.com/angular/angular/pull/17712#discussion_r132025495). -->\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/aot-compiler\n-->\n<!-- links from this doc:\n - api/common/DOCUMENT\n - api/core/Component\n - api/core/Inject\n - api/core/InjectionToken\n - api/core/computed\n - guide/aot-compiler#code-folding\n - guide/aot-compiler#exported-symbols\n - guide/aot-compiler#expression-syntax\n - guide/aot-compiler#function-expression\n - guide/aot-metadata-errors#aot-metadata-errors\n - guide/aot-metadata-errors#could-not-resolve-type\n - guide/aot-metadata-errors#destructured-variable-not-supported\n - guide/aot-metadata-errors#destructured-variable-or-constant-not-supported\n - guide/aot-metadata-errors#expression-form-not-supported\n - guide/aot-metadata-errors#function-calls-are-not-supported\n - guide/aot-metadata-errors#function-calls-not-supported\n - guide/aot-metadata-errors#name-expected\n - guide/aot-metadata-errors#only-initialized-variables\n - guide/aot-metadata-errors#only-initialized-variables-and-constants\n - guide/aot-metadata-errors#reference-to-a-local-non-exported-symbol\n - guide/aot-metadata-errors#reference-to-a-local-symbol\n - guide/aot-metadata-errors#reference-to-a-non-exported-class\n - guide/aot-metadata-errors#reference-to-a-non-exported-function\n - guide/aot-metadata-errors#symbol-reference-expected\n - guide/aot-metadata-errors#tagged-template-expressions-are-not-supported\n - guide/aot-metadata-errors#tagged-template-expressions-not-supported\n - guide/aot-metadata-errors#unsupported-enum-member-name\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/raw\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\n - https://www.typescriptlang.org/docs/handbook/enums.html\n - https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring\n-->"}
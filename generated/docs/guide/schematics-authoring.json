{"id":"guide/schematics-authoring","title":"創作原理圖","contents":"<div class=\"content\">\n  <h1 id=\"authoring-schematics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"902h3rxpd8dmw5gd7f4sqa9xt\">創作原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#authoring-schematics\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5huitr1bvst5in25qnel5yn6\">你可以建立自己的原理圖來對 Angular 專案進行操作。函式庫開發人員通常會把這些原理圖與他們的函式庫打包在一起，以便把它們與 Angular CLI 整合在一起。你也可以建立獨立的原理圖來操作 Angular 應用中的檔案和目錄結構，以便為你的開發環境定製它們，並讓它們符合你的標準和約束。多個原理圖還可以串聯起來，透過執行其它原理圖來完成複雜的操作。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1bfdb9wnkxzrnwqmd4v7wmds4\">在應用程式中操作程式碼可能既強大又危險。比如，建立一個已存在的檔案會出錯，如果出現這種情況，就應該放棄已應用的所有其它更改。Angular 原理圖工具透過建立虛擬檔案系統來防止副作用和錯誤。原理圖描述了一個可應用於虛擬檔案系統的轉換通道。當原理圖執行時，轉換就會被記錄在記憶體中，只有當這些更改被確認有效時，才會應用到實際的檔案系統中。</p>\n<h2 id=\"schematics-concepts\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cv0hcgf02fxt9br52s8p7e0br\">原理圖的概念<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#schematics-concepts\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ey2icut1bcadpns7c4j835hhz\">原理圖的公共 API 定義了表達其基本概念的類別。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ko3uxs66g4lk5mp0ai5zj0x5\">虛擬檔案系統用 <code>Tree</code>（樹）表示。<code>Tree</code> 資料結構包含一個<em>基礎狀態 base</em>（一組已經存在的檔案）和一個 <em>暫存區 staging</em>（需要應用到 base 的更改清單）。在進行修改的過程中，你並沒有真正改變它的 base，而是把那些修改新增到了暫存區。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgmi2nllphwxg011xekag88fz\"><code>Rule</code>（規則）物件定義了一個函式，它接受 <code>Tree</code>，進行轉換，並回傳一個新的 <code>Tree</code>。原理圖的主檔案 <code>index.ts</code> 定義了一組實現原理圖邏輯的規則。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eqdsm65pto8f7kele89s0czzg\">轉換由 <code>Action</code>（動作）表示。有四種動作型別：<code>Create</code>、<code>Rename</code>、<code>Overwrite</code> 和 <code>Delete</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dj6re0g2uzfjqhe1ucl20bgzu\">每個原理圖都在一個上下文中執行，上下文由一個 <code>SchematicContext</code> 物件表示。</p>\n</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ec7sxn393gmvhxe5gecf41e3q\">傳給規則的上下文物件可以訪問該原理圖可能會用到的工具函式和元資料，包括一個幫助除錯的日誌 API。上下文還定義了一個<em>合併策略</em>，用於確定如何將這些更改從暫存樹合併到基礎樹中。可以接受或忽略某個更改，也可以丟擲異常。</p>\n<h3 id=\"defining-rules-and-actions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83yzjik5tbk497lpgcnh2dg13\">定義規則和動作<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#defining-rules-and-actions\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"171l2426djpt58re3yakcr26k\">當你使用 <a href=\"guide/schematics-authoring#cli\">Schematics CLI</a> 建立一個新的空白原理圖時，它所生成的入口函式就是一個<em>規則工廠</em>。<code>RuleFactory</code> 物件定義了一個用於建立 <code>Rule</code> 的高階函式。</p>\n<code-example header=\"index.ts\" language=\"typescript\">\n\nimport { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';\n\n// You don't have to export the function as default.\n// You can also have more than one rule factory per file.\nexport function helloWorld(_options: any): Rule {\n return (tree: Tree, _context: SchematicContext) =&gt; {\n   return tree;\n };\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9rlswe22w7o3gpobdlw0iehy\">你的這些規則可以透過呼叫外部工具和實現邏輯來修改你的專案。比如，你需要一個規則來定義如何將原理圖中的範本合併到宿主專案中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zrvhpzfskprohydxphfahoh8\">規則可以利用 <code>@schematics/angular</code> 套件提供的實用工具。尋求輔助函式來處理模組、依賴、TypeScript、AST、JSON、Angular CLI 工作區和專案等等。</p>\n<code-example header=\"index.ts\" language=\"typescript\">\n\nimport {\n  JsonAstObject,\n  JsonObject,\n  JsonValue,\n  Path,\n  normalize,\n  parseJsonAst,\n  strings,\n} from '@angular-devkit/core';\n\n</code-example>\n<h3 id=\"defining-input-options-with-a-schema-and-interfaces\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8gd0ulx4fj2edf41c96fpuy20\">利用模式和介面來定義輸入選項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#defining-input-options-with-a-schema-and-interfaces\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pcyosm9zl5aq83fv85qtsfbf\">規則可以從呼叫者那裡收集選項值，並把它們注入到範本中。規則可用的選項及其允許的值和預設值是在原理圖的 JSON 模式檔案 <code>&lt;schematic&gt;/schema.json</code> 中定義的。可以用 TypeScript 介面來為這個模式定義變數或列舉的資料型別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"67iiqzva4vyhrhpscd5fv8k0g\">該模式定義了原理圖中使用的變數的型別和預設值。比如，假設的 『Hello World』 原理圖可能具有以下模式定義（schema）。</p>\n<code-example header=\"src/hello-world/schema.json\" language=\"json\">\n\n{\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"minLength\": 1,\n            \"default\": \"world\"\n        },\n        \"useColor\": {\n            \"type\": \"boolean\"\n        }\n    }\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hm8cdir6gldaq8zfj6ydx50a\">可以在 <a href=\"https://github.com/angular/angular-cli/blob/main/packages/schematics/angular/application/schema.json\"><code>@schematics/angular</code></a> 中看到 Angular CLI 指令原理圖的模式檔案範例。</p>\n<h3 id=\"schematic-prompts\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d6xgf9luujj7l9584me7x6bg\">原理圖提示<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#schematic-prompts\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7rd7embglvkinqosuu4ak5m1h\">原理圖<em>提示</em>能將使用者互動引入到原理圖執行過程中。可以設定原理圖選項，以向用戶顯示可自定義的問題。在執行原理圖之前會顯示提示，然後將使用者的回應用作選項的值。這使得使用者可以指導原理圖的操作，而無需深入瞭解可用選項的全部範圍。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"afx36450jqz70w1mlpbn3aa8n\">比如，這個 『Hello World』 原理圖可能會要求使用者提供他的名字，並顯示該名字以代替預設名字 『world』。要定義這樣的提示，請將 <code>x-prompt</code> 屬性新增到 <code>name</code> 變數的模式中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bwy2hv2zozmyavuh4wok0zer2\">類似地，你可以新增一個提示，以允許使用者確定原理圖在執行其 hello 操作時是否將使用顏色。帶有兩個提示的模式如下。</p>\n<code-example header=\"src/hello-world/schema.json\" language=\"json\">\n\n{\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"minLength\": 1,\n            \"default\": \"world\",\n            \"x-prompt\": \"What is your name?\"\n        },\n        \"useColor\": {\n            \"type\": \"boolean\",\n            \"x-prompt\": \"Would you like the response in color?\"\n        }\n    }\n}\n</code-example>\n<h4 id=\"prompt-short-form-syntax\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"nkmecuhg8hfk4incaxy9wkfe\">提示的簡寫語法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#prompt-short-form-syntax\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8k72x7k0cbcnbgc41a5lpynnx\">這些範例使用提示語法的簡寫形式，僅提供問題的文字。在大多數情況下，這就是所需要的。但是請注意，這兩個提示要求使用不同型別的輸入。使用簡寫形式時，將根據屬性的模式自動選擇最合適的型別。在該範例中，<code>name</code> 提示使用 <code>input</code> 型別，因為它是一個字串屬性。<code>useColor</code> 提示使用 <code>confirmation</code> 型別，因為它是布林屬性。在這種情況下，『是』 對應於 <code>true</code> 而 『否』 對應於 <code>false</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2huxid4m99vxtbwfhezn4qw6s\">支援三種輸入型別。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdh37ewtp8718xmz95unav2ot\">輸入型別</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">confirmation</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tornn2wat5vsg6ipeft7k3r9\">是或否問題；適用於布林選項。</td>\n</tr>\n<tr>\n<td align=\"left\">input</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1iyeeeh8hwcqgf6igcjcyfbx9\">文字輸入；適用於字串或數字選項。</td>\n</tr>\n<tr>\n<td align=\"left\">list</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"46ysr6hxlm2lnoebrm9ujqt3q\">預定義的允許值集合。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"asoa8ynkmm0bc5vcswceuazkh\">簡而言之，型別是根據屬性的型別和約束來推斷的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axvqhwairpnp6nwepyh28sstc\">屬性模式</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7e2b49bqef0lz06xkvkedctt6\">提示型別</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"14l2uz2yjbmjbsydaq0b320r6\">\"type\": \"boolean\"</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31ry1fozerlit3bk313aju0rz\">確認（\"yes\"=\n<code>true</code>，\"no\"=\n<code>false</code>）</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1yjy4rkx4n772uw0924z9os9h\">\"type\": \"string\"</td>\n<td align=\"left\">input</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ecoc3batgq2rt3els92h3migu\">\"type\": \"number\"</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jfbxm3okdsp04vhz2klgfl0i\">輸入（僅接受有效數字）</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"blfi20jiagqugwomwe7444c53\">\"type\": \"integer\"</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"jfbxm3okdsp04vhz2klgfl0i\">輸入（僅接受有效數字）</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35kpsek0sbtt5j3rkltokk5gi\">\"enum\": […]</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4x3c9cmb8oe0qzu42dv7pz4bg\">清單（列舉成員變為清單選擇）</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7jgtt2a51nd4m8iqhkspz3\">在以下範例中，該屬性採用列舉值，因此原理圖將自動選擇清單型別，並根據可能的值建立選單。</p>\n<code-example header=\"schema.json\" language=\"json\">\n\n\"style\": {\n  \"description\": \"The file extension or preprocessor to use for style files.\",\n  \"type\": \"string\",\n  \"default\": \"css\",\n  \"enum\": [\n    \"css\",\n    \"scss\",\n    \"sass\",\n    \"less\",\n    \"styl\"\n  ],\n  \"x-prompt\": \"Which stylesheet format would you like to use?\"\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6s9ps0r4yx8o2brec9opztxt8\">提示執行時會根據 JSON 模式中提供的約束條件自動驗證提供的回應。如果該值不可接受，則提示使用者輸入新值。這樣可以確保傳遞到原理圖的任何值都符合原理圖實現的期望，因此你無需在原理圖的程式碼中新增其它檢查。</p>\n<h4 id=\"prompt-long-form-syntax\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ri1c96btu7h6m7y15sixpcuh\">提示的長格式語法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#prompt-long-form-syntax\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eewsa9tw571eivets7baok9o4\">在需要對提示進行其它自定義和控制情況下，<code>x-prompt</code> 欄位也支援長格式語法。在這種形式下，<code>x-prompt</code> 欄位值是帶有子欄位的 JSON 物件，這些子欄位可自定義提示的行為。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kret3re69i0cdgthieg4vtmf\">欄位</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5t6g5rjbvyj8f7exde2sri2w7\">資料值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">type</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91juz6msuh6r90iwayi7kbwl8\"><code>確認</code>，\n<code>輸入</code>或\n<code>清單</code>（在簡短形式中自動選擇）</td>\n</tr>\n<tr>\n<td align=\"left\">message</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cg0bys6flexurpken3sk9nlck\">字串（必填）</td>\n</tr>\n<tr>\n<td align=\"left\">items</td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4k3i55s40941r2uj2v1mqtr24\">字串和/或標籤/值物件對（僅在型別\n<code>清單</code>有效）</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9fya8vtc86ys524tcwyplcz1\">下面的長格式範例來自 CLI 用來<a href=\"https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56\">生成應用程式</a>的原理圖的 JSON 模式。它定義提示，允許使用者選擇要用於正在建立的應用程式的樣式預處理器。透過使用長格式，原理圖可以為選單選項提供更明確的格式。</p>\n<code-example header=\"package/schematics/angular/application/schema.json\" language=\"json\">\n\n\"style\": {\n  \"description\": \"The file extension or preprocessor to use for style files.\",\n  \"type\": \"string\",\n  \"default\": \"css\",\n  \"enum\": [\n    \"css\",\n    \"scss\",\n    \"sass\",\n    \"less\"\n  ],\n  \"x-prompt\": {\n    \"message\": \"Which stylesheet format would you like to use?\",\n    \"type\": \"list\",\n    \"items\": [\n      { \"value\": \"css\",  \"label\": \"CSS\" },\n      { \"value\": \"scss\", \"label\": \"SCSS   [ https://sass-lang.com/documentation/syntax#scss                ]\" },\n      { \"value\": \"sass\", \"label\": \"Sass   [ https://sass-lang.com/documentation/syntax#the-indented-syntax ]\" },\n      { \"value\": \"less\", \"label\": \"Less   [ https://lesscss.org/                                            ]\" }\n    ]\n  },\n},\n\n</code-example>\n<h4 id=\"x-prompt-schema\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3xgltjtlmzpc8n9aikm70zzw\"><code>x-prompt</code> 模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#x-prompt-schema\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80ac5gdkf7b5ey2g1dpckcdv5\">定義原理圖選項的 JSON 模式支援擴充套件，以允許對提示及其相應行為進行宣告式定義。無需其它邏輯或更改原理圖程式碼即可支援提示。以下 JSON 模式是 <code>x-prompt</code> 欄位的長格式語法的完整描述。</p>\n<code-example header=\"x-prompt schema\" language=\"json\">\n\n{\n    \"oneOf\": [\n        { \"type\": \"string\" },\n        {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": { \"type\": \"string\" },\n                \"message\": { \"type\": \"string\" },\n                \"items\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"oneOf\": [\n                            { \"type\": \"string\" },\n                            {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"label\": { \"type\": \"string\" },\n                                    \"value\": { }\n                                },\n                                \"required\": [ \"value\" ]\n                            }\n                        ]\n                    }\n                }\n            },\n            \"required\": [ \"message\" ]\n        }\n    ]\n}\n\n</code-example>\n<p><a id=\"cli\"></a></p>\n<h2 id=\"schematics-cli\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2qorl1fzbsnxnx80m6vk83xzm\">原理圖 CLI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#schematics-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5rr17jgfeahii0a0tt3qet09k\">原理圖有自己的指令行工具。使用 Node 6.9 或以上版本，全域安裝 Schematics 指令行工具：</p>\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install -g @angular-devkit/schematics-cli\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vsjcoonzhm5q788he52ai9i5\">這將安裝可執行檔案 <code>schematics</code>，你可以用它在自己的專案資料夾中建立一個新的原理圖集合、把一個新的原理圖新增到一個現有的集合中，或者擴充套件一個現有的原理圖。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewn83cr53cw75b6w28xa7hbbg\">在下面的章節中，我們將使用 CLI 建立一個新的原理圖集合，以介紹檔案和目錄結構，以及一些基本概念。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bz6jbu15bq08dtp0u9um8yyva\">但是，原理圖的最常見用途是將 Angular 函式庫與 Angular CLI 整合在一起。可以直接在 Angular 工作區的函式庫專案中建立原理圖檔案，而無需使用 Schematics CLI。參閱<a href=\"guide/schematics-for-libraries\">函式庫的原理圖</a>。</p>\n<h3 id=\"creating-a-schematics-collection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bpow710nw9arsmw4yue91x4na\">建立一個原理圖集合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#creating-a-schematics-collection\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ykusmnpchcjensgt5gq6qdqd\">下列指令用來在同名的新專案資料夾中建立一個名為 <code>hello-world</code> 的新原理圖。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nschematics blank --name=hello-world\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cr1rhrv90rpqpdvkhweir33hf\"><code>blank</code> 原理圖是由 Schematics CLI 提供的。該指令用於建立一個新的專案資料夾（該集合的根資料夾），並在該集合中建立一個最初的命名原理圖。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6vokhybuex2ntqgtzetopj54j\">轉到 collection 資料夾，安裝你的 npm 依賴，然後在常用的編輯器中開啟這個新集合，看看所生成的檔案。比如，如果你正在使用 VS Code：</p>\n<code-example format=\"shell\" language=\"shell\">\n\ncd hello-world\nnpm install\nnpm run build\ncode .\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2w0xo65msygna9dj2dke8tal0\">最初的原理圖與專案資料夾的名字相同，是在 <code>src/hello-world</code> 中生成的。可以把相關的原理圖新增到這個集合中，並修改所生成的骨架程式碼來定義原理圖的功能。每個原理圖的名稱在集合中都必須是唯一的。</p>\n<h3 id=\"running-a-schematic\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59ppopt8yjvia7b8szgf08eyw\">執行原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#running-a-schematic\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8f9odnzutdzyjscu9l62gzqbn\">使用 <code>schematics</code> 指令執行一個命名原理圖。按以下格式提供專案資料夾的路徑、原理圖名稱和所有必選項。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nschematics &lt;path-to-schematics-project&gt;:&lt;schematics-name&gt; --&lt;required-option&gt;=&lt;value&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9gog3xmdiz1gq1a42tbid34lz\">該路徑可以是絕對路徑，也可以是執行該指令的當前工作目錄的相對路徑。比如，要執行剛生成的原理圖（它沒有必選項），請使用下面的指令。</p>\n<code-example format=\"shell\" language=\"shell\">\n\nschematics .:hello-world\n\n</code-example>\n<h3 id=\"adding-a-schematic-to-a-collection\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aq91k1n4bj53exg3hz5e4kc8a\">把原理圖新增到集合中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#adding-a-schematic-to-a-collection\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ctpr9o3xshm2hja8pms8xo14\">要把一個原理圖新增到現有的集合中，請使用和新建原理圖專案相同的指令，不過要改為在該專案的資料夾下執行該指令。</p>\n<code-example format=\"shell\" language=\"shell\">\n\ncd hello-world\nschematics blank --name=goodbye-world\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qpwlzsowsgfo1yo7jcwt2n3n\">該指令會在你的集合中生成一個新的命名原理圖，它包含一個主檔案 <code>index.ts</code> 及其相關的測試規約。它還會把這個新原理圖的名字（name），說明（description）和工廠函式（factory function）新增到 <code>collection.json</code> 檔案中此集合的 JSON 模式中。</p>\n<h2 id=\"collection-contents\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cnsnisog2wmixpadv0m7ql0cn\">集合的內容<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#collection-contents\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cixgykxrbss8nonl40lygstk6\">集合的根資料夾中包含一些設定檔案、<code>node_modules</code> 資料夾和 <code>src/</code> 資料夾。<code>src/</code> 資料夾包含該集合中各個命名原理圖的子資料夾，以及一個模式檔案（<code>collection.json</code>），它是集合中各個原理圖的模式定義。每個原理圖都是用名稱，描述和工廠函式建立的。</p>\n<code-example language=\"json\">\n\n{\n  \"$schema\":\n     \"../node_modules/@angular-devkit/schematics/collection-schema.json\",\n  \"schematics\": {\n    \"hello-world\": {\n      \"description\": \"A blank schematic.\",\n      \"factory\": \"./hello-world/index#helloWorld\"\n    }\n  }\n}\n\n</code-example>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ankau0rclqqucyjygy4pwrczy\"><code>$schema</code> 屬性指定了 CLI 進行驗證時所用的模式。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ge00bnisobed9d2jjaibex5u\"><code>schematics</code> 屬性列出了屬於這個集合的各個命名原理圖。每個原理圖都有一個純文字格式的描述，以及指向主檔案中自動生成的那個入口函式。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5015wlhq6mi9wi0kmooybex9b\"><code>factory</code> 屬性指向自動生成的那個入口函式。在這個例子中，你會通過呼叫 <code>helloWorld()</code> 工廠函式來呼叫 <code>hello-world</code> 原理圖。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ruvwmw8o9drh651lhbps4v2h\">可選屬性 <code>schema</code> 是一個 JSON 模式檔案，它定義了本原理圖中可用的指令行引數。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"54dcl7efq02tguo5fekicm31i\">可選陣列屬性 <code>aliases</code> 指定了一個或多個可用來呼叫此原理圖的字串。比如，Angular CLI 『generate』 指令的原理圖有一個別名 『g』，這就可以讓你使用指令 <code>ng g</code>。</p>\n</li>\n</ul>\n<h3 id=\"named-schematics\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cfvd6n7tdh8n9v67quf8a9klw\">命名原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#named-schematics\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9e87y4mrfnrkilgi18oo8gnbz\">當你使用 Schematics CLI 建立空白原理圖專案時，該集合的第一個成員是一張與該集合同名的空白原理圖。當你把這個新的命名原理圖新增到本集合中時，它會自動新增到 <code>collection.json</code> 模式中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"38ri9g6jtu12vdr02s0asjqcj\">除了名稱和描述外，每個原理圖還有一個 <code>factory</code> 屬性，用於標識此原理圖的入口點。在本例中，你透過在主檔案 <code>hello-world/index.ts</code> 中呼叫 <code>helloWorld()</code> 函式來呼叫此原理圖中定義的功能。</p>\n<div class=\"lightbox\">\n<img alt=\"overview\" src=\"generated/images/guide/schematics/collection-files.gif\" width=\"1149\" height=\"490\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9culjs1724kd6q1isx1jxfddv\">該集合中每個命名原理圖都有以下主要部分。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9adacmyaa3k2v2xx3cltx6y8a\">部件</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>index.ts</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ax0kb8cuqf01onkjd1ux3lqp5\">定義具名原理圖的轉換邏輯的程式碼</td>\n</tr>\n<tr>\n<td align=\"left\"><code>schema.json</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cm55j81pk8ywzr44ozropw3x\">原理圖變數定義</td>\n</tr>\n<tr>\n<td align=\"left\"><code>schema.d.ts</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c7j8497wdqpeby6m7ysah8wmh\">原理圖變數</td>\n</tr>\n<tr>\n<td align=\"left\"><code>files/</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2zls26ayz7yv2witlvcyj716c\">可選的元件/範本檔案以複製</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5dksd423jylcx1x6tzviamxh\">原理圖可以在 <code>index.ts</code> 檔案中提供它全部的邏輯，不需要額外的範本。你也可以在 <code>files/</code> 資料夾中提供元件和範本來為 Angular 建立動態原理圖，比如那些獨立的 Angular 專案。這個 index 檔案中的邏輯會通過定義一些用來注入資料和修改變數的規則來設定這些範本。</p>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Feb 28 2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/schematics\n-->\n<!-- links from this doc:\n - guide/schematics-authoring#adding-a-schematic-to-a-collection\n - guide/schematics-authoring#authoring-schematics\n - guide/schematics-authoring#cli\n - guide/schematics-authoring#collection-contents\n - guide/schematics-authoring#creating-a-schematics-collection\n - guide/schematics-authoring#defining-input-options-with-a-schema-and-interfaces\n - guide/schematics-authoring#defining-rules-and-actions\n - guide/schematics-authoring#named-schematics\n - guide/schematics-authoring#prompt-long-form-syntax\n - guide/schematics-authoring#prompt-short-form-syntax\n - guide/schematics-authoring#running-a-schematic\n - guide/schematics-authoring#schematic-prompts\n - guide/schematics-authoring#schematics-cli\n - guide/schematics-authoring#schematics-concepts\n - guide/schematics-authoring#x-prompt-schema\n - guide/schematics-for-libraries\n - https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56\n - https://github.com/angular/angular-cli/blob/main/packages/schematics/angular/application/schema.json\n-->"}
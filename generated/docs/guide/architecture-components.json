{"id":"guide/architecture-components","title":"元件簡介","contents":"<div class=\"content\">\n  <h1 id=\"introduction-to-components-and-templates\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9psph02844eyyb8e49ddhocl\">元件簡介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#introduction-to-components-and-templates\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7q79ldl1ehzv4970i9yzg918j\">一個<em>元件</em>控制著一塊被稱為<a href=\"guide/glossary#view\" title=\"檢視的定義\"><em>檢視</em></a>的螢幕區域。它由一個 TypeScript 類別、一個 HTML 範本和一個 CSS 樣式表組成。TypeScript 類別定義了 HTML 範本和渲染的 DOM 結構的互動，而樣式表描述了它的外觀。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8374cxcck8x4mgaa8w35u8nfz\">Angular 應用使用一些單個元件來定義並控制應用的不同方面。比如，應用可能包含一些描述下列內容的元件：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekq2le6sa7gr239h6ov27ilzb\">帶有導向連結的應用根元件</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2f7sv32yejlzkij8z016kpc5c\">英雄清單</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pv8glfsd6b2b8npgmyij4w7z\">英雄編輯器</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"pfmpfnmfpjkzt5k71mzlk8gm\">在下面的例子中，<code>HeroListComponent</code> 類別包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91t448ruhcr6t08qdw2ay1co0\">一個 <code>heroes</code> 屬性，內含英雄陣列。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6lk4gyi1r3rnvm3aqwq448z3\">一個 <code>selectedHero</code> 屬性，內含使用者最近選擇的英雄。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nwo9u6j9j2gry050co3xus7m\">一個 <code>selectHero()</code> 方法，當用戶從清單中點選某個英雄時，它會設定 <code>selectedHero</code> 屬性。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1jgc5h9wkgae6b4uqlrjanen\">該組件會使用 <code>HeroService</code> 服務來初始化 <code>heroes</code> 屬性，<code>HeroService</code> 是一個 TypeScript 的構造器<a href=\"https://www.typescriptlang.org/docs/handbook/2/classes.html#parameter-properties\">引數型屬性</a>。Angular 依賴注入系統會把 <code>HeroService</code> 服務提供給該組件。</p>\n<code-example header=\"src/app/hero-list.component.ts (class)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"class\">\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n  selectedHero: Hero | undefined;\n\n  constructor(private service: HeroService) { }\n\n  ngOnInit() {\n    this.heroes = this.service.getHeroes();\n  }\n\n  selectHero(hero: Hero) { this.selectedHero = hero; }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9low9i7y0q6km8wn90yiguhkk\">當用戶在應用中穿行時，Angular 就會建立、更新、銷燬一些元件。你的應用可以透過一些可選的<a href=\"guide/lifecycle-hooks\">生命週期鉤子</a>（比如 <code>ngOnInit()</code>）來在每個特定的時機採取行動。</p>\n<h2 id=\"component-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1owbxmdfgsar7noccjg983nhy\">元件的元資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#component-metadata\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"lightbox\">\n<img alt=\"Metadata\" class=\"left\" src=\"generated/images/guide/architecture/metadata.png\" width=\"170\" height=\"48\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39jjpehq6bx55hko9qcphhvdu\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器會指出緊隨其後的那個類別是個元件類別，併為其指定元資料。\n在下面的範例程式碼中，你可以看到 <code>HeroListComponent</code> 只是一個普通類別，完全沒有 Angular 特有的標記或語法。\n直到給它加上了 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器，它才變成了元件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pz3rdwdq52c1jmwsncdv9m46\">元件的元資料告訴 Angular 到哪裡獲取它需要的主要構造塊，以建立和展示這個元件及其檢視。具體來說，它把一個<em>範本</em>（無論是直接行內在程式碼中還是引用的外部檔案）和該組件關聯起來。該組件及其範本，共同描述了一個<em>檢視</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yxb2ox0dia2fb30goeysc807\">除了包含或指向範本之外，<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 的元資料還會設定要如何在 HTML 中引用該組件，以及該組件需要哪些服務等等。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bslix6f2a49w983f675uwnlo4\">下面的例子中就是 <code>HeroListComponent</code> 的基礎元資料：</p>\n<code-example header=\"src/app/hero-list.component.ts (metadata)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"metadata\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector:    'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  imports:     [ <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>, <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>, HeroDetailComponent ],\n  providers:  [ HeroService ]\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  /* . . . */\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tz2gykgcwjaq1fzk8jymsz04\">這個例子展示了一些最常用的 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 設定選項：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sj0b1ennqs9kztpn3kwqn6go\">設定選項</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>standalone</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cn7hf7t1hq8rll9sz28vqs5ki\"><code>true</code>表示這是一個自描述的\n<a href=\"guide/standalone-components\">\"獨立\"</a>元件。如果為\n<code>false</code>或未指定，則該組件必須在一個較舊風格的\n<a href=\"guide/ngmodules\">ngModule</a>中宣告。如果可以的話，最好選擇\n<code>true</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>selector</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70kvx3xv6gj3v38rutdfeagly\">一個CSS選擇器，告訴Angular在範本HTML中找到相應標籤時建立並插入此元件的實例。例如，如果應用程式的HTML包含\n<code>&lt;app-hero-list&gt;&lt;/app-hero-list&gt;</code>，那麼Angular會在這些標籤之間插入\n<code>HeroListComponent</code>檢視的實例。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>templateUrl</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"apfcmsv13rxa70jmmtik55300\">該組件HTML範本的相對地址。或者，你可以提供HTML範本的行內值，作為\n<code>template</code>屬性的值。此範本定義了元件的\n<em>宿主檢視</em>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>imports</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d43sw7dzypu86hpjfopcu5npv\">一個陣列，包含範本引用的元件、指令和套件。對於\"獨立\"元件至關重要。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61lb0o93z7czgondktohp3dct\">為元件需要的服務提供\n<a href=\"guide/glossary#provider\">提供者</a>陣列。在這個範例中，這告訴Angular如何提供\n<code>HeroService</code>實例，以便元件的建構式函式使用它來獲取要顯示的英雄清單。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"templates-and-views\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4v5skfae5hw7r9icom2gw4tek\">範本與檢視<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#templates-and-views\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"lightbox\">\n<img alt=\"Template\" class=\"left\" src=\"generated/images/guide/architecture/template.png\" width=\"200\" height=\"114\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsuim4mqyq93q7ou17524ipd3\">你要透過元件的配套範本來定義其檢視。範本就是一種 HTML，它會告訴 Angular 如何渲染該組件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b847ixu07ygqqi1i1jllzbn0w\">檢視通常會分層次進行組織，讓你能以 UI 分割槽或頁面為單位進行修改、顯示或隱藏。與元件直接關聯的範本會定義該組件的<em>宿主檢視</em>。該組件還可以定義一個<em>帶層次結構的檢視</em>，它包含一些<em>內嵌的檢視</em>作為其它元件的宿主。</p>\n<div class=\"lightbox\">\n<img alt=\"Component tree\" class=\"left\" src=\"generated/images/guide/architecture/component-tree.png\" width=\"300\" height=\"231\">\n</div>\n<h2 id=\"template-syntax\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w5kqvgmi0o4l4z6rjt7db87s\">範本語法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#template-syntax\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p8ahaw2ryo4naatpufvc0ux3\">範本很像標準的 HTML，但是它還包含 Angular 的<a href=\"guide/template-syntax\">範本語法</a>，這些範本語法可以根據你的應用邏輯、應用狀態和 DOM 資料來修改這些 HTML。你的範本可以使用<em>資料繫結</em>來協調應用和 DOM 中的資料，使用<em>通道</em>在顯示出來之前對其進行轉換，使用<em>指令</em>來把程式邏輯應用到要顯示的內容上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5exahpy0n8037q7ofiza9aay7\">比如，下面是本教學課程中 <code>HeroListComponent</code> 的範本：</p>\n<code-example header=\"src/app/hero-list.component.html\" path=\"architecture/src/app/hero-list.component.html\">\n&lt;h2&gt;Hero List&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;Select a hero from the list to see details.&lt;/em&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;button type=\"button\" (click)=\"selectHero(hero)\"&gt;\n      {{hero.name}}\n    &lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;app-hero-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\" [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgzf5azrp3z1sr2d6kfdw7wp4\">這個範本使用了典型的 HTML 元素，比如 <code>&lt;h2&gt;</code> 和 <code>&lt;p&gt;</code>。還包括一些 Angular 的範本語法元素，如 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>，<code>{{hero.name}}</code>，<code>click</code>、<code>[hero]</code> 和 <code>&lt;app-hero-detail&gt;</code>。這些範本語法元素告訴 Angular 該如何根據程式邏輯和數據在螢幕上渲染 HTML。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"384ausyl6on43x4gd910ccqtc\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 指令告訴 Angular 在一個清單上進行迭代</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5bf3e93z469yydki5s0ns1vgg\"><code>{{hero.name}}</code>、<code>(click)</code> 和 <code>[hero]</code> 把程式資料繫結到及繫結回 DOM，以回應使用者的輸入。更多內容參閱稍後的<a href=\"guide/architecture-components#data-binding\">資料繫結</a>部分。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"denaafygxpwf4knu1lbzrpad4\">此例子中的 <code>&lt;app-hero-detail&gt;</code> 元素標籤代表一個新元件 <code>HeroDetailComponent</code>。<code>HeroDetailComponent</code> 定義了由 <code>HeroListComponent</code> 所渲染的 DOM 結構中的 <code>hero-detail</code> 部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akp0o565ydn2fz495hgclwcbm\">注意這些自定義元件是如何與原生 HTML 元素混用的。</p>\n</li>\n</ul>\n<h3 id=\"data-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dep77znovb7x0wl9uhcyc1rph\">資料繫結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#data-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejq9ndtnl7jalxw0vdyaq6hyy\">如果沒有框架，你就要自己負責把資料值推送到 HTML 控制元件中，並把來自使用者的回應轉換成動作和對值的更新。手動寫這種資料推拉邏輯會很枯燥、容易出錯，難以閱讀 —— 有前端 JavaScript 開發經驗的工程師一定深有體會。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20ttjq18hi17r77znt38zr4co\">Angular 支援<em>雙向資料繫結</em>，這是一種對範本中的各個部件與元件中的各個部件進行協調的機制。往範本 HTML 中新增繫結標記可以告訴 Angular 該如何連線它們。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eertelsum0x3no3gy05om4es\">下圖顯示了資料繫結標記的四種形式。每種形式都有一個方向 —— 從元件到 DOM、從 DOM 到元件或雙向。</p>\n<div class=\"lightbox\">\n<img alt=\"Data Binding\" class=\"left\" src=\"generated/images/guide/architecture/databinding.png\" width=\"220\" height=\"205\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37ktnbav1tdagjoeqzo1ivu5c\">這個來自 <code>HeroListComponent</code> 範本中的例子使用了其中的三種形式：</p>\n<code-example header=\"src/app/hero-list.component.html (binding)\" path=\"architecture/src/app/hero-list.component.1.html\" region=\"binding\">\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n&lt;button type=\"button\" (click)=\"selectHero(hero)\"&gt;\n  {{hero.name}}\n&lt;/button&gt;\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ooenjokr56t04l5zdtm6x9cz\">資料繫結</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alxnskuyxgmuw4rrs67niss0e\"><code>[hero]</code>\n<a href=\"guide/property-binding\">屬性繫結</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rtf5bffa2cb5k74jy423vigl\">將父元件\n<code>HeroListComponent</code>中的\n<code>selectedHero</code>的值傳遞給子元件\n<code>HeroDetailComponent</code>的\n<code>hero</code>屬性。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ngtf2o9bcn4vyoiy15ly2p34\"><code>(click)</code>\n<a href=\"guide/user-input#binding-to-user-input-events\">事件繫結</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7p61u5p6d1ulfb9hi11o6swab\">當用戶點選英雄的名稱時，呼叫元件的\n<code>selectHero</code>方法。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6spb61644d09u1pr1atxhvjwd\"><code>{{hero.name}}</code>\n<a href=\"guide/interpolation\">內嵌</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3a1bvszzp3nprn7wf5fin37xw\">在\n<code>&lt;button&gt;</code>元素中顯示元件的\n<code>hero.name</code>屬性值。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtig1wded0v0eyyfc547ccdcu\"><strong>雙向資料繫結</strong>（主要用於<a href=\"guide/forms\">範本驅動表單</a>中），它會把屬性繫結和事件繫結組合成一種單獨的寫法。下面這個來自 <code>HeroDetailComponent</code> 範本中的例子透過 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令使用了雙向資料繫結：</p>\n<code-example header=\"src/app/hero-detail.component.html (ngModel)\" path=\"architecture/src/app/hero-detail.component.html\" region=\"ngModel\">\n&lt;input type=\"text\" id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5zi9b8yb75ika4hw21br8s5g\">在雙向繫結中，資料屬性值透過屬性繫結從元件流到輸入框。使用者的修改透過事件繫結流回元件，把屬性值設定為最新的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwyx145zqgef3bv9d0djh4vk0\">Angular 在每個 JavaScript 事件迴圈中處理<em>所有的</em>資料繫結，它會從元件樹的根部開始，遞迴處理全部子元件。</p>\n<div class=\"lightbox\">\n<img alt=\"Data Binding\" class=\"left\" src=\"generated/images/guide/architecture/component-databinding.png\" width=\"358\" height=\"219\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6s0jo2mf3xtbgvanb6g083x2\">資料繫結在範本及其元件之間的通訊中扮演了非常重要的角色，它對於父元件和子元件之間的通訊也同樣重要。</p>\n<div class=\"lightbox\">\n<img alt=\"Parent/Child binding\" class=\"left\" src=\"generated/images/guide/architecture/parent-child-binding.png\" width=\"358\" height=\"171\">\n</div>\n<h3 id=\"pipes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4c1vv1rgp7phpgpk7rg59bjk0\">通道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#pipes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"78mvl5qrdov9qwdv12igepufm\">Angular 的通道可以讓你在範本中宣告顯示值的轉換邏輯。帶有 <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code> 裝飾器的類別中會定義一個轉換函式，用來把輸入值轉換成供檢視顯示用的輸出值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ll66jdst843v5jb8awplhf6z\">Angular 自帶了很多通道，比如 <a href=\"api/common/DatePipe\">date</a> 通道和 <a href=\"api/common/CurrencyPipe\">currency</a> 通道。完整的清單參閱 <a href=\"api?type=pipe\">Pipes API 清單</a>。你也可以自己定義一些新通道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21iq11f46uy0swhdw9aes78s3\">要在HTML範本中指定值轉換，請使用\n<a href=\"guide/pipes-overview\">通道運算符（<code>|</code>）</a>。</p>\n<code-example format=\"html\" language=\"html\">\n\n{{interpolated_value | pipe_name}}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bttzhkjoc9i9adzb9y22mr3gl\">你可以把通道串聯起來，把一個通道函式的輸出送給另一個通道函式進行轉換。\n通道還能接收一些引數，來控制它該如何進行轉換。比如，你可以把要使用的日期格式傳給 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> 通道：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;!-- Default format: output 'Jun 15, 2015'--&gt;\n&lt;p&gt;Today is {{today | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}}&lt;/p&gt;\n\n&lt;!-- fullDate format: output 'Monday, June 15, 2015'--&gt;\n&lt;p&gt;The date is {{today | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'fullDate'}}&lt;/p&gt;\n\n&lt;!-- shortTime format: output '9:43 AM'--&gt;\n&lt;p&gt;The time is {{today | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'shortTime'}}&lt;/p&gt;\n\n</code-example>\n<h3 id=\"directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\">指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#directives\"><i class=\"material-icons\">link</i></a></h3>\n<div class=\"lightbox\">\n<img alt=\"Directives\" class=\"left\" src=\"generated/images/guide/architecture/directive.png\" width=\"150\" height=\"147\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgths1qgaxnysdvltgmtzzd8n\">Angular 的範本是<em>動態的</em>。當 Angular 渲染它們的時候，會根據<em>指令</em>給出的指示對 DOM 進行轉換。指令就是一個帶有 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 裝飾器的類別。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42s23vpu7uia6gxuhwxvzy7ks\">元件從技術角度上說就是一個指令，但是由於元件對 Angular 應用來說非常獨特、非常重要，因此 Angular 專門定義了 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器，它使用一些面向範本的屬性擴充套件了 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 裝飾器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cidhxoko9gsv0kbgv6g1mn7iz\">除元件外，還有兩種指令：<em>結構型指令</em>和<em>屬性型指令</em>。Angular 本身定義了一系列這兩種型別的指令，你也可以使用 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 裝飾器來定義自己的指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"457ewn5yrt8debsstf41jxxpj\">像元件一樣，指令的元資料把它所裝飾的指令類別和一個 <code>selector</code> 關聯起來，<code>selector</code> 用來把該指令插入到 HTML 中。在範本中，指令通常作為屬性出現在元素標籤上，可能僅僅作為名字出現，也可能作為賦值目標或繫結目標出現。</p>\n<h4 id=\"structural-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59lj2adjv35bjs3nghyd6twal\">結構型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#structural-directives\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86m3paj7xlblcvi3psxro3fef\"><em>結構型指令</em>透過新增、移除或替換 DOM 元素來修改佈局。這個範例範本使用了兩個內建的結構型指令來為要渲染的檢視新增程式邏輯：</p>\n<code-example header=\"src/app/hero-list.component.html (structural)\" path=\"architecture/src/app/hero-list.component.1.html\" region=\"structural\">\n&lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;&lt;/li&gt;\n&lt;app-hero-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\">指令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">詳情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngFor\"><code>*ngFor</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5fpvn63z1dvcdfnz2omu8vj3o\"><em>迭代器</em>，告訴Angular為\n<code>heroes</code>清單中的每個英雄建立一個\n<code>&lt;li&gt;</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngIf\"><code>*ngIf</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ais5la975eijzcjhg6p1b3xr\"><em>條件語句</em>，僅在存在選定的英雄時包含\n<code>HeroDetail</code>元件。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"attribute-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdzt47k44s3ld0g2lsx3frsix\">屬性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#attribute-directives\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cclieekvh39pwi5at7sp5fj9v\"><em>屬性型指令</em>會修改現有元素的外觀或行為。在範本中，它們看起來就像普通的 HTML 屬性一樣，因此得名『屬性型指令』。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvd36ic2w4po8mh8legsztem4\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令就是屬性型指令的一個例子，它實現了雙向資料繫結。<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 修改現有元素（一般是 <code>&lt;input&gt;</code>）的行為：設定其顯示屬性值，並回應 change 事件。</p>\n<code-example header=\"src/app/hero-detail.component.html (ngModel)\" path=\"architecture/src/app/hero-detail.component.html\" region=\"ngModel\">\n&lt;input type=\"text\" id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2ppaf4tscvlu3wujk4emo3bz\">Angular 還包含另一些預定義指令，它們會修改：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wyipf6c5j1znelllm5hdp5pa\">佈局結構，比如 <a href=\"guide/built-in-directives#ngSwitch\">ngSwitch</a>，以及</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fiu0zlbtcqal6g7t18rlnlud\">DOM 元素和元件的某些方面，比如 <a href=\"guide/built-in-directives#ngstyle\">ngStyle</a> 和 <a href=\"guide/built-in-directives#ngClass\">ngClass</a>。</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fhkudphd2n0xo4howz4gecff\">欲知詳情，參閱<a href=\"guide/attribute-directives\">屬性型指令</a>和<a href=\"guide/structural-directives\">結構型指令</a>這兩章。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：Mon Sep 25 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - errors/NG0300\n - guide/architecture\n - guide/architecture-modules\n - guide/component-overview\n - guide/event-binding\n - guide/forms\n - guide/forms-overview\n - guide/interpolation\n - guide/property-binding\n - guide/routing-overview\n - start\n-->\n<!-- links from this doc:\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/NgFor\n - api/common/NgIf\n - api/core/Component\n - api/core/Directive\n - api/core/OnInit\n - api/core/Pipe\n - api/forms/NgModel\n - api?type=pipe\n - guide/architecture-components#attribute-directives\n - guide/architecture-components#component-metadata\n - guide/architecture-components#data-binding\n - guide/architecture-components#directives\n - guide/architecture-components#introduction-to-components-and-templates\n - guide/architecture-components#pipes\n - guide/architecture-components#structural-directives\n - guide/architecture-components#template-syntax\n - guide/architecture-components#templates-and-views\n - guide/attribute-directives\n - guide/built-in-directives#ngClass\n - guide/built-in-directives#ngFor\n - guide/built-in-directives#ngIf\n - guide/built-in-directives#ngSwitch\n - guide/built-in-directives#ngstyle\n - guide/forms\n - guide/glossary#provider\n - guide/glossary#view\n - guide/interpolation\n - guide/lifecycle-hooks\n - guide/ngmodules\n - guide/pipes-overview\n - guide/property-binding\n - guide/standalone-components\n - guide/structural-directives\n - guide/template-syntax\n - guide/user-input#binding-to-user-input-events\n - https://www.typescriptlang.org/docs/handbook/2/classes.html#parameter-properties\n-->"}
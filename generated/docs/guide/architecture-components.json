{"id":"guide/architecture-components","title":"组件简介","contents":"<div class=\"content\">\n  <h1 id=\"introduction-to-components-and-templates\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e9psph02844eyyb8e49ddhocl\">组件简介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#introduction-to-components-and-templates\"><i class=\"material-icons\">link</i></a></h1>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7q79ldl1ehzv4970i9yzg918j\">一个<em>组件</em>控制着一块被称为<a href=\"guide/glossary#view\" title=\"视图的定义\"><em>视图</em></a>的屏幕区域。它由一个 TypeScript 类、一个 HTML 模板和一个 CSS 样式表组成。TypeScript 类定义了 HTML 模板和渲染的 DOM 结构的交互，而样式表描述了它的外观。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8374cxcck8x4mgaa8w35u8nfz\">Angular 应用使用一些单个组件来定义并控制应用的不同方面。比如，应用可能包含一些描述下列内容的组件：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekq2le6sa7gr239h6ov27ilzb\">带有导航链接的应用根组件</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2f7sv32yejlzkij8z016kpc5c\">英雄列表</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pv8glfsd6b2b8npgmyij4w7z\">英雄编辑器</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"pfmpfnmfpjkzt5k71mzlk8gm\">在下面的例子中，<code>HeroListComponent</code> 类包括：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"91t448ruhcr6t08qdw2ay1co0\">一个 <code>heroes</code> 属性，内含英雄数组。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6lk4gyi1r3rnvm3aqwq448z3\">一个 <code>selectedHero</code> 属性，内含用户最近选择的英雄。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nwo9u6j9j2gry050co3xus7m\">一个 <code>selectHero()</code> 方法，当用户从列表中点选某个英雄时，它会设置 <code>selectedHero</code> 属性。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1jgc5h9wkgae6b4uqlrjanen\">该组件会使用 <code>HeroService</code> 服务来初始化 <code>heroes</code> 属性，<code>HeroService</code> 是一个 TypeScript 的构造器<a href=\"https://www.typescriptlang.org/docs/handbook/2/classes.html#parameter-properties\">参数型属性</a>。Angular 依赖注入系统会把 <code>HeroService</code> 服务提供给该组件。</p>\n<code-example header=\"src/app/hero-list.component.ts (class)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"class\">\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n  selectedHero: Hero | undefined;\n\n  constructor(private service: HeroService) { }\n\n  ngOnInit() {\n    this.heroes = this.service.getHeroes();\n  }\n\n  selectHero(hero: Hero) { this.selectedHero = hero; }\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9low9i7y0q6km8wn90yiguhkk\">当用户在应用中穿行时，Angular 就会创建、更新、销毁一些组件。你的应用可以通过一些可选的<a href=\"guide/lifecycle-hooks\">生命周期钩子</a>（比如 <code>ngOnInit()</code>）来在每个特定的时机采取行动。</p>\n<h2 id=\"component-metadata\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1owbxmdfgsar7noccjg983nhy\">组件的元数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#component-metadata\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"lightbox\">\n<img alt=\"Metadata\" class=\"left\" src=\"generated/images/guide/architecture/metadata.png\" width=\"170\" height=\"48\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39jjpehq6bx55hko9qcphhvdu\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器会指出紧随其后的那个类是个组件类，并为其指定元数据。\n在下面的范例代码中，你可以看到 <code>HeroListComponent</code> 只是一个普通类，完全没有 Angular 特有的标记或语法。\n直到给它加上了 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器，它才变成了组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7pz3rdwdq52c1jmwsncdv9m46\">组件的元数据告诉 Angular 到哪里获取它需要的主要构造块，以创建和展示这个组件及其视图。具体来说，它把一个<em>模板</em>（无论是直接内联在代码中还是引用的外部文件）和该组件关联起来。该组件及其模板，共同描述了一个<em>视图</em>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yxb2ox0dia2fb30goeysc807\">除了包含或指向模板之外，<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 的元数据还会配置要如何在 HTML 中引用该组件，以及该组件需要哪些服务等等。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bslix6f2a49w983f675uwnlo4\">下面的例子中就是 <code>HeroListComponent</code> 的基础元数据：</p>\n<code-example header=\"src/app/hero-list.component.ts (metadata)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"metadata\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector:    'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  imports:     [ <a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a>, <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>, HeroDetailComponent ],\n  providers:  [ HeroService ]\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  /* . . . */\n}\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5tz2gykgcwjaq1fzk8jymsz04\">这个例子展示了一些最常用的 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 配置选项：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4sj0b1ennqs9kztpn3kwqn6go\">配置选项</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>standalone</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cn7hf7t1hq8rll9sz28vqs5ki\"><code>true</code>表示这是一个自描述的\n<a href=\"guide/standalone-components\">\"独立\"</a>组件。如果为\n<code>false</code>或未指定，则该组件必须在一个较旧风格的\n<a href=\"guide/ngmodules\">ngModule</a>中声明。如果可以的话，最好选择\n<code>true</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>selector</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"70kvx3xv6gj3v38rutdfeagly\">一个CSS选择器，告诉Angular在模板HTML中找到相应标签时创建并插入此组件的实例。例如，如果应用程序的HTML包含\n<code>&lt;app-hero-list&gt;&lt;/app-hero-list&gt;</code>，那么Angular会在这些标签之间插入\n<code>HeroListComponent</code>视图的实例。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>templateUrl</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"apfcmsv13rxa70jmmtik55300\">该组件HTML模板的相对地址。或者，你可以提供HTML模板的内联值，作为\n<code>template</code>属性的值。此模板定义了组件的\n<em>宿主视图</em>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>imports</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d43sw7dzypu86hpjfopcu5npv\">一个数组，包含模板引用的组件、指令和包。对于\"独立\"组件至关重要。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61lb0o93z7czgondktohp3dct\">为组件需要的服务提供\n<a href=\"guide/glossary#provider\">提供者</a>数组。在这个示例中，这告诉Angular如何提供\n<code>HeroService</code>实例，以便组件的构造函数使用它来获取要显示的英雄列表。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"templates-and-views\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4v5skfae5hw7r9icom2gw4tek\">模板与视图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#templates-and-views\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"lightbox\">\n<img alt=\"Template\" class=\"left\" src=\"generated/images/guide/architecture/template.png\" width=\"200\" height=\"114\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsuim4mqyq93q7ou17524ipd3\">你要通过组件的配套模板来定义其视图。模板就是一种 HTML，它会告诉 Angular 如何渲染该组件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b847ixu07ygqqi1i1jllzbn0w\">视图通常会分层次进行组织，让你能以 UI 分区或页面为单位进行修改、显示或隐藏。与组件直接关联的模板会定义该组件的<em>宿主视图</em>。该组件还可以定义一个<em>带层次结构的视图</em>，它包含一些<em>内嵌的视图</em>作为其它组件的宿主。</p>\n<div class=\"lightbox\">\n<img alt=\"Component tree\" class=\"left\" src=\"generated/images/guide/architecture/component-tree.png\" width=\"300\" height=\"231\">\n</div>\n<h2 id=\"template-syntax\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5w5kqvgmi0o4l4z6rjt7db87s\">模板语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#template-syntax\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4p8ahaw2ryo4naatpufvc0ux3\">模板很像标准的 HTML，但是它还包含 Angular 的<a href=\"guide/template-syntax\">模板语法</a>，这些模板语法可以根据你的应用逻辑、应用状态和 DOM 数据来修改这些 HTML。你的模板可以使用<em>数据绑定</em>来协调应用和 DOM 中的数据，使用<em>管道</em>在显示出来之前对其进行转换，使用<em>指令</em>来把程序逻辑应用到要显示的内容上。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5exahpy0n8037q7ofiza9aay7\">比如，下面是本教程中 <code>HeroListComponent</code> 的模板：</p>\n<code-example header=\"src/app/hero-list.component.html\" path=\"architecture/src/app/hero-list.component.html\">\n&lt;h2&gt;Hero List&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;Select a hero from the list to see details.&lt;/em&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;button type=\"button\" (click)=\"selectHero(hero)\"&gt;\n      {{hero.name}}\n    &lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;app-hero-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\" [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cgzf5azrp3z1sr2d6kfdw7wp4\">这个模板使用了典型的 HTML 元素，比如 <code>&lt;h2&gt;</code> 和 <code>&lt;p&gt;</code>。还包括一些 Angular 的模板语法元素，如 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>，<code>{{hero.name}}</code>，<code>click</code>、<code>[hero]</code> 和 <code>&lt;app-hero-detail&gt;</code>。这些模板语法元素告诉 Angular 该如何根据程序逻辑和数据在屏幕上渲染 HTML。</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"384ausyl6on43x4gd910ccqtc\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 指令告诉 Angular 在一个列表上进行迭代</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5bf3e93z469yydki5s0ns1vgg\"><code>{{hero.name}}</code>、<code>(click)</code> 和 <code>[hero]</code> 把程序数据绑定到及绑定回 DOM，以响应用户的输入。更多内容参阅稍后的<a href=\"guide/architecture-components#data-binding\">数据绑定</a>部分。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"denaafygxpwf4knu1lbzrpad4\">此例子中的 <code>&lt;app-hero-detail&gt;</code> 元素标签代表一个新组件 <code>HeroDetailComponent</code>。<code>HeroDetailComponent</code> 定义了由 <code>HeroListComponent</code> 所渲染的 DOM 结构中的 <code>hero-detail</code> 部分。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"akp0o565ydn2fz495hgclwcbm\">注意这些自定义组件是如何与原生 HTML 元素混用的。</p>\n</li>\n</ul>\n<h3 id=\"data-binding\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dep77znovb7x0wl9uhcyc1rph\">数据绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#data-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ejq9ndtnl7jalxw0vdyaq6hyy\">如果没有框架，你就要自己负责把数据值推送到 HTML 控件中，并把来自用户的响应转换成动作和对值的更新。手动写这种数据推拉逻辑会很枯燥、容易出错，难以阅读 —— 有前端 JavaScript 开发经验的程序员一定深有体会。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20ttjq18hi17r77znt38zr4co\">Angular 支持<em>双向数据绑定</em>，这是一种对模板中的各个部件与组件中的各个部件进行协调的机制。往模板 HTML 中添加绑定标记可以告诉 Angular 该如何连接它们。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eertelsum0x3no3gy05om4es\">下图显示了数据绑定标记的四种形式。每种形式都有一个方向 —— 从组件到 DOM、从 DOM 到组件或双向。</p>\n<div class=\"lightbox\">\n<img alt=\"Data Binding\" class=\"left\" src=\"generated/images/guide/architecture/databinding.png\" width=\"220\" height=\"205\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"37ktnbav1tdagjoeqzo1ivu5c\">这个来自 <code>HeroListComponent</code> 模板中的例子使用了其中的三种形式：</p>\n<code-example header=\"src/app/hero-list.component.html (binding)\" path=\"architecture/src/app/hero-list.component.1.html\" region=\"binding\">\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n&lt;button type=\"button\" (click)=\"selectHero(hero)\"&gt;\n  {{hero.name}}\n&lt;/button&gt;\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5ooenjokr56t04l5zdtm6x9cz\">数据绑定</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"alxnskuyxgmuw4rrs67niss0e\"><code>[hero]</code>\n<a href=\"guide/property-binding\">属性绑定</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1rtf5bffa2cb5k74jy423vigl\">将父组件\n<code>HeroListComponent</code>中的\n<code>selectedHero</code>的值传递给子组件\n<code>HeroDetailComponent</code>的\n<code>hero</code>属性。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ngtf2o9bcn4vyoiy15ly2p34\"><code>(click)</code>\n<a href=\"guide/user-input#binding-to-user-input-events\">事件绑定</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7p61u5p6d1ulfb9hi11o6swab\">当用户点击英雄的名称时，调用组件的\n<code>selectHero</code>方法。</td>\n</tr>\n<tr>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6spb61644d09u1pr1atxhvjwd\"><code>{{hero.name}}</code>\n<a href=\"guide/interpolation\">插值</a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3a1bvszzp3nprn7wf5fin37xw\">在\n<code>&lt;button&gt;</code>元素中显示组件的\n<code>hero.name</code>属性值。</td>\n</tr>\n</tbody>\n</table>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtig1wded0v0eyyfc547ccdcu\"><strong>双向数据绑定</strong>（主要用于<a href=\"guide/forms\">模板驱动表单</a>中），它会把属性绑定和事件绑定组合成一种单独的写法。下面这个来自 <code>HeroDetailComponent</code> 模板中的例子通过 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令使用了双向数据绑定：</p>\n<code-example header=\"src/app/hero-detail.component.html (ngModel)\" path=\"architecture/src/app/hero-detail.component.html\" region=\"ngModel\">\n&lt;input type=\"text\" id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5zi9b8yb75ika4hw21br8s5g\">在双向绑定中，数据属性值通过属性绑定从组件流到输入框。用户的修改通过事件绑定流回组件，把属性值设置为最新的值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cwyx145zqgef3bv9d0djh4vk0\">Angular 在每个 JavaScript 事件循环中处理<em>所有的</em>数据绑定，它会从组件树的根部开始，递归处理全部子组件。</p>\n<div class=\"lightbox\">\n<img alt=\"Data Binding\" class=\"left\" src=\"generated/images/guide/architecture/component-databinding.png\" width=\"358\" height=\"219\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6s0jo2mf3xtbgvanb6g083x2\">数据绑定在模板及其组件之间的通讯中扮演了非常重要的角色，它对于父组件和子组件之间的通讯也同样重要。</p>\n<div class=\"lightbox\">\n<img alt=\"Parent/Child binding\" class=\"left\" src=\"generated/images/guide/architecture/parent-child-binding.png\" width=\"358\" height=\"171\">\n</div>\n<h3 id=\"pipes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4c1vv1rgp7phpgpk7rg59bjk0\">管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#pipes\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"78mvl5qrdov9qwdv12igepufm\">Angular 的管道可以让你在模板中声明显示值的转换逻辑。带有 <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code> 装饰器的类中会定义一个转换函数，用来把输入值转换成供视图显示用的输出值。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ll66jdst843v5jb8awplhf6z\">Angular 自带了很多管道，比如 <a href=\"api/common/DatePipe\">date</a> 管道和 <a href=\"api/common/CurrencyPipe\">currency</a> 管道。完整的列表参阅 <a href=\"api?type=pipe\">Pipes API 列表</a>。你也可以自己定义一些新管道。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21iq11f46uy0swhdw9aes78s3\">要在HTML模板中指定值转换，请使用\n<a href=\"guide/pipes-overview\">管道运算符（<code>|</code>）</a>。</p>\n<code-example format=\"html\" language=\"html\">\n\n{{interpolated_value | pipe_name}}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bttzhkjoc9i9adzb9y22mr3gl\">你可以把管道串联起来，把一个管道函数的输出送给另一个管道函数进行转换。\n管道还能接收一些参数，来控制它该如何进行转换。比如，你可以把要使用的日期格式传给 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> 管道：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;!-- Default format: output 'Jun 15, 2015'--&gt;\n&lt;p&gt;Today is {{today | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}}&lt;/p&gt;\n\n&lt;!-- fullDate format: output 'Monday, June 15, 2015'--&gt;\n&lt;p&gt;The date is {{today | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'fullDate'}}&lt;/p&gt;\n\n&lt;!-- shortTime format: output '9:43 AM'--&gt;\n&lt;p&gt;The time is {{today | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'shortTime'}}&lt;/p&gt;\n\n</code-example>\n<h3 id=\"directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\">指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#directives\"><i class=\"material-icons\">link</i></a></h3>\n<div class=\"lightbox\">\n<img alt=\"Directives\" class=\"left\" src=\"generated/images/guide/architecture/directive.png\" width=\"150\" height=\"147\">\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bgths1qgaxnysdvltgmtzzd8n\">Angular 的模板是<em>动态的</em>。当 Angular 渲染它们的时候，会根据<em>指令</em>给出的指示对 DOM 进行转换。指令就是一个带有 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 装饰器的类。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"42s23vpu7uia6gxuhwxvzy7ks\">组件从技术角度上说就是一个指令，但是由于组件对 Angular 应用来说非常独特、非常重要，因此 Angular 专门定义了 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 装饰器，它使用一些面向模板的特性扩展了 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 装饰器。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cidhxoko9gsv0kbgv6g1mn7iz\">除组件外，还有两种指令：<em>结构型指令</em>和<em>属性型指令</em>。Angular 本身定义了一系列这两种类型的指令，你也可以使用 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 装饰器来定义自己的指令。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"457ewn5yrt8debsstf41jxxpj\">像组件一样，指令的元数据把它所装饰的指令类和一个 <code>selector</code> 关联起来，<code>selector</code> 用来把该指令插入到 HTML 中。在模板中，指令通常作为属性出现在元素标签上，可能仅仅作为名字出现，也可能作为赋值目标或绑定目标出现。</p>\n<h4 id=\"structural-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59lj2adjv35bjs3nghyd6twal\">结构型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#structural-directives\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86m3paj7xlblcvi3psxro3fef\"><em>结构型指令</em>通过添加、移除或替换 DOM 元素来修改布局。这个范例模板使用了两个内置的结构型指令来为要渲染的视图添加程序逻辑：</p>\n<code-example header=\"src/app/hero-list.component.html (structural)\" path=\"architecture/src/app/hero-list.component.1.html\" region=\"structural\">\n&lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;&lt;/li&gt;\n&lt;app-hero-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uaad125h3hufxqa64leub0r9\">指令</th>\n<th align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3prlgfrx5eo2xqncnnob4crxu\">详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngFor\"><code>*ngFor</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5fpvn63z1dvcdfnz2omu8vj3o\"><em>迭代器</em>，告诉Angular为\n<code>heroes</code>列表中的每个英雄创建一个\n<code>&lt;li&gt;</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngIf\"><code>*ngIf</code></a></td>\n<td align=\"left\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ais5la975eijzcjhg6p1b3xr\"><em>条件语句</em>，仅在存在选定的英雄时包含\n<code>HeroDetail</code>组件。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"attribute-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cdzt47k44s3ld0g2lsx3frsix\">属性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#attribute-directives\"><i class=\"material-icons\">link</i></a></h4>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cclieekvh39pwi5at7sp5fj9v\"><em>属性型指令</em>会修改现有元素的外观或行为。在模板中，它们看起来就像普通的 HTML 属性一样，因此得名“属性型指令”。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bvd36ic2w4po8mh8legsztem4\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令就是属性型指令的一个例子，它实现了双向数据绑定。<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 修改现有元素（一般是 <code>&lt;input&gt;</code>）的行为：设置其显示属性值，并响应 change 事件。</p>\n<code-example header=\"src/app/hero-detail.component.html (ngModel)\" path=\"architecture/src/app/hero-detail.component.html\" region=\"ngModel\">\n&lt;input type=\"text\" id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\"&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d2ppaf4tscvlu3wujk4emo3bz\">Angular 还包含另一些预定义指令，它们会修改：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9wyipf6c5j1znelllm5hdp5pa\">布局结构，比如 <a href=\"guide/built-in-directives#ngSwitch\">ngSwitch</a>，以及</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8fiu0zlbtcqal6g7t18rlnlud\">DOM 元素和组件的某些方面，比如 <a href=\"guide/built-in-directives#ngstyle\">ngStyle</a> 和 <a href=\"guide/built-in-directives#ngClass\">ngClass</a>。</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3fhkudphd2n0xo4howz4gecff\">欲知详情，参阅<a href=\"guide/attribute-directives\">属性型指令</a>和<a href=\"guide/structural-directives\">结构型指令</a>这两章。</p>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：Mon Sep 25 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - errors/NG0300\n - guide/architecture\n - guide/architecture-modules\n - guide/component-overview\n - guide/event-binding\n - guide/forms\n - guide/forms-overview\n - guide/interpolation\n - guide/property-binding\n - guide/routing-overview\n - start\n-->\n<!-- links from this doc:\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/NgFor\n - api/common/NgIf\n - api/core/Component\n - api/core/Directive\n - api/core/OnInit\n - api/core/Pipe\n - api/forms/NgModel\n - api?type=pipe\n - guide/architecture-components#attribute-directives\n - guide/architecture-components#component-metadata\n - guide/architecture-components#data-binding\n - guide/architecture-components#directives\n - guide/architecture-components#introduction-to-components-and-templates\n - guide/architecture-components#pipes\n - guide/architecture-components#structural-directives\n - guide/architecture-components#template-syntax\n - guide/architecture-components#templates-and-views\n - guide/attribute-directives\n - guide/built-in-directives#ngClass\n - guide/built-in-directives#ngFor\n - guide/built-in-directives#ngIf\n - guide/built-in-directives#ngSwitch\n - guide/built-in-directives#ngstyle\n - guide/forms\n - guide/glossary#provider\n - guide/glossary#view\n - guide/interpolation\n - guide/lifecycle-hooks\n - guide/ngmodules\n - guide/pipes-overview\n - guide/property-binding\n - guide/standalone-components\n - guide/structural-directives\n - guide/template-syntax\n - guide/user-input#binding-to-user-input-events\n - https://www.typescriptlang.org/docs/handbook/2/classes.html#parameter-properties\n-->"}
{"id":"guide/hydration","title":"水合（Hydration）","contents":"<div class=\"content\">\n  <h1 id=\"hydration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f56gmhqyrur87h9p9zanu9nib\">水合（Hydration）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#hydration\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"what-is-hydration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56lwflegdeq058j9zh4ahngi8\">什么是水合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#what-is-hydration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9zcw9hplp7n92ef6uro1k9e6\">水合是指在客户端恢复服务端渲染出的应用程序的过程。这包括复用服务端渲染的 DOM 结构、持久化应用程序状态、传输服务端已经获取到的应用程序数据，还有一些其他过程。</p>\n<h2 id=\"why-is-hydration-important\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"doyri47hfufkarjwmisgnju3m\">为什么水合很重要？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#why-is-hydration-important\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ddzpublabig0ocbcnxamjsluz\">通过避免额外工作重新创建DOM节点，水合可以提高应用程序性能。相反，Angular会尝试在运行时将现有的DOM元素与应用程序结构匹配，并在可能时重用DOM节点。这将导致性能改进，可以使用\n<a href=\"https://web.dev/learn-core-web-vitals/\">核心Web关键性能指标（CWV）</a>统计数据进行衡量，例如减少首次内容绘制\n<a href=\"https://developer.chrome.com/en/docs/lighthouse/performance/first-contentful-paint/\">FCP</a>和最大内容绘制（\n<a href=\"https://web.dev/lcp/\">LCP</a>），以及累积布局位移（\n<a href=\"https://web.dev/cls/\">CLS</a>）。改善这些数字还会影响诸如SEO性能之类的事情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zjsbnsixc8paxp72a8144ks9\">如果不启用水合，服务端渲染的 Angular 应用程序将销毁并重新渲染应用程序的 DOM，这可能会导致可见的 UI 闪烁。这种重新渲染会对像 <a href=\"https://web.dev/lcp/\">LCP</a> 这样的 <a href=\"https://web.dev/learn-core-web-vitals/\">核心 Web 体验</a>产生负面影响，并导致布局变化。启用水合能让你复用现有的 DOM 并防止闪烁。</p>\n<p><a id=\"how-to-enable\"></a></p>\n<h2 id=\"how-do-you-enable-hydration-in-angular\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9ty3va4fr29pqlne5uo7cu3m\">如何在 Angular 中启用水合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#how-do-you-enable-hydration-in-angular\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8wi7b1s717bymf054bnbluf4g\">在开始使用水合之前，你必须有一个服务器端渲染（SSR）应用程序。首先遵循\n<a href=\"/guide/ssr\">Angular SSR指南</a>启用服务器端渲染。一旦你的应用程序与SSR配合工作，你可以通过访问主应用组件或模块，并从\n<code>@angular/platform-browser</code>导入\n<code><a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a></code>来启用水合。然后，将该提供程序添加到应用程序的引导提供程序列表中。</p>\n<code-example language=\"typescript\">\nimport {\n  <a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>,\n  <a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a>,\n} from '@angular/platform-browser';\n...\n\n<a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>(RootCmp, {\n  providers: [<a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a>()]\n});\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uufdhnubsa6qec10dpkqrbmk\">或者，如果你在使用 NgModules，可以将 <code><a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a></code> 添加到根应用程序模块的提供者列表中。</p>\n<code-example language=\"typescript\">\nimport {<a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a>} from '@angular/platform-browser';\nimport {<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>} from '@angular/core';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [RootCmp],\n  exports: [RootCmp],\n  bootstrap: [RootCmp],\n  providers: [<a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a>()],\n})\nexport class AppModule {}\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12jl0meok7f8ll61nt95volq5\"><strong>重要提示</strong>：确保 <code><a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a>()</code> 调用也包含在用于在<strong>服务端</strong>引导应用程序的提供者列表中。在具有默认项目结构的应用程序中（由<code>ng new</code>命令生成）加入对根 <code>AppModule</code> 的调用应该就够了，因为该模块已被服务端模块导入。如果你使用自定义设置，请将 <code><a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a>()</code> 调用添加到服务端启动配置中的提供者列表中。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56bgs20pili2eskzuhg3nfu0k\">完成这些步骤并启动服务端后，在浏览器中加载你的应用程序。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6esu50w14iij63z1qdg1i9i9r\">在启用水合之前，你可能需要修复直接操纵 DOM 的实例，可以通过切换到 Angular 式的构造或使用 <code>ngSkipHydration</code> 来完成。详见<a href=\"guide/hydration#constraints\">约束条件</a>、<a href=\"guide/hydration#dom-manipulation\">直接 DOM 操作</a>和<a href=\"guide/hydration#ngskiphydration\">如何在水合时跳过特定组件</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mycshpuhhz8z71531wveyx8u\">在 dev 模式下运行应用程序时，可以通过在浏览器中打开开发者工具并查看控制台来确认启用了水合。你应该会看到一个包含与水合相关统计数据的消息，例如已水合的组件和节点数量。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpkvga8k8i1of5zyakiukguu2\">Angular 根据页面上呈现的所有组件计算统计数据，包括来自第三方库的组件。</p>\n</div>\n<p><a id=\"constraints\"></a></p>\n<h2 id=\"constraints\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tec8wud1c413vns0x11e6vfc\">约束条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#constraints\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6k8wvs1892pfvi8k13m1ftmxd\">水合对你的应用程序施加了一些限制，这些限制在没有启用水合的情况下是不存在的。你的应用程序必须在服务端和客户端具有相同的生成的 DOM 结构。水合过程期望 DOM 树在两个地方具有相同的结构。这还包括 Angular 在服务端渲染期间生成的空白和注释节点。这些空白和注释节点必须出现在服务端渲染过程生成的 HTML 中。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"622x6hzpwxyup6wjc3ufsv3l3\">服务端渲染操作生成的 HTML 在服务端和客户端之间<strong>不能</strong>有任何区别。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4bif3er1x4q61nh7x15t5yib\">如果服务端和客户端的 DOM 树结构不匹配，当水合过程试图将预期的内容与 DOM 中实际存在的内容相匹配时就会遇到问题。使用原生 DOM API 进行直接 DOM 操作的组件是最常见的罪魁祸首。</p>\n<p><a id=\"dom-manipulation\"></a></p>\n<h3 id=\"direct-dom-manipulation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bu69ibonnxfppx6xi1mft18s9\">直接 DOM 操作<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#direct-dom-manipulation\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d73rt1zy4l4r5x5hjbhv00cos\">如果你有使用原生 DOM API 或使用 \n<code>innerHTML</code> 或 \n<code>outerHTML</code> 进行 DOM 操作的组件，水合过程将会遇到错误。DOM 操作存在问题的具体情况包括访问 \n<code>document</code>、查询特定元素以及使用 \n<code>appendChild</code> 插入额外节点。分离 DOM 节点并将其移动到其他位置也会导致错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lj0x41jreq8r5q2uvgouxp6x\">这是因为 Angular 不了解这些 DOM 变化，并且无法在水合过程中解决它们。Angular 本来期望某种结构，但在尝试水合时遇到了另一种结构。这种差异将导致水合失败并引发 DOM 不匹配错误（<a href=\"guide/hydration#errors\">见下文</a>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"amd5lqvu0819ffyit05wfddz7\">最好重构你的组件以避免此类 DOM 操作。如果可以，请尝试使用 Angular API 来完成这项工作。如果你无法重构此行为，请使用 <code>ngSkipHydration</code> 属性（<a href=\"guide/hydration#ngskiphydration\">如下所述</a>），直到你可以把它重构为对水合友好的解决方案。</p>\n<p><a id=\"valid-html\"></a></p>\n<h3 id=\"valid-html-structure\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vooeix8hv6u3yty3z1hmvkj9\">有效的 HTML 结构<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#valid-html-structure\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jimybwuv26xmwkbyoqbytxhx\">在某些情况下，如果你的组件模板没有有效的 HTML 结构，可能会导致在水合期间出现 DOM 不匹配错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e83l4moyn85yr0t1cf3z7v0o2\">例如，以下是此问题的一些最常见案例。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cw5tftrv5boofoiwmafg5zasy\"><code>&lt;table&gt;</code> 标签中没有 <code>&lt;tbody&gt;</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mfd5u2j0a1zqqzquadtkox77\"><code>&lt;div&gt;</code>标签 位于 <code>&lt;p&gt;</code> 中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rj1kt6swknxkklxvan7aqbki\"><code>&lt;a&gt;</code>标签 位于 <code>&lt;h1&gt;</code> 中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66wcte1bh9lfb9h37vr7sy2z0\"><code>&lt;a&gt;</code> 标签位于另一个 <code>&lt;a&gt;</code> 中</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xyq95j0ppnjvrwdlee6fzhir\">如果你不确定你的 HTML 是否有效，可以使用<a href=\"https://validator.w3.org/\">语法验证器</a>来检查它。</p>\n<p><a id=\"preserve-whitespaces\"></a></p>\n<h3 id=\"preserve-whitespaces-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aasize33idxox7la96qtmykm5\">保留空白字符配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#preserve-whitespaces-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"89szeyq14kmaapebaksukqd83\">使用水合功能时，我们建议对 <code>preserveWhitespaces</code> 使用默认设置 <code>false</code>。如果你的 tsconfig 中没有进行此设置，则该值将为 <code>false</code> 而无需更改。如果你选择通过将 <code>preserveWhitespaces: true</code> 添加到你的 tsconfig 中来启用保留空格，就可能会遇到水合问题。这在目前还不是一个受到完全支持的配置。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beq0kzjmfknhouam2y9l8668f\">请确保在服务器端和浏览器端的构建中，<code>tsconfig.server.json</code> 和 <code>tsconfig.app.json</code> 文件中设置的这个选项是<strong>一致的</strong>。如果不一致就会导致水合失败。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31q7ez65fjeapcmxcsr6yumtd\">如果你选择在 <code>tsconfig</code> 中设置此选项，我们建议仅在 <code>tsconfig.app.json</code> 中设置它，因为默认情况下 <code>tsconfig.server.json</code> 会从 <code>tsconfig.app.json</code> 中继承此选项。</p>\n</div>\n<p><a id=\"cdn-configuration\"></a></p>\n<h3 id=\"cdn-optimizations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5i5rlapzrlxdvv5lsejnk2epb\">CDN 优化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#cdn-optimizations\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39zbrn5syow8w53v1bpzkuqjv\">许多 CDN 提供了一个功能，将尝试通过剥离渲染 DOM 中它认为不必要的所有节点来优化你的已渲染应用程序，其中包括注释节点。注释节点是 Angular 运行的重要部分，对于水合至关重要。为了确保你的应用程序加载并进行水合，你需要禁用此 CDN 功能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ss22cjp9ccuxy39cnqzz8qgy\">如果启用了 CDN 优化并启用了水合，在尝试加载页面时，你将遇到错误 \n<a href=\"https://angular.io/errors/NG0507\">NG0507</a>。如果看到此错误，你应该去禁用 CDN 优化。</p>\n<h3 id=\"custom-or-noop-zonejs-are-not-yet-supported\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o22ezmzscxy6pbzdkhprr8q1\">尚不支持自定义或 Noop Zone.js<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#custom-or-noop-zonejs-are-not-yet-supported\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bm8qiif4rv9p8vdvp6mk9gvpv\">水合要依赖于来自 Zone.js 的信号来确定应用程序何时变得稳定，以便 Angular 可以在服务端上启动序列化过程或在客户端启动水合后进行清理工作（以删除无主的 DOM 节点）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kq5fz6xuabofz1h22bznxt72\">提供自定义或 “noop” Zone.js 实现可能会导致“稳定”事件发生在不同的时间点，从而过早或过晚触发序列化或清理。这还不是已受完全支持的配置，你可能需要在自定义 Zone.js 实现中调整 <code>onStable</code> 事件的时间。</p>\n<p><a id=\"errors\"></a></p>\n<h2 id=\"errors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mcfu00geyug3tkj1rksyx81i\">错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#errors\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ab1iu9ufzjmc16m2kiiip98g\">你可能会遇到几种与水合相关的错误，从节点不匹配到在无效宿主节点上使用 \n<code>ngSkipHydration</code> 的情况。可能发生的最常见错误情况是直接使用原生 API 进行 DOM 操作，导致水合无法在客户端找到或匹配服务器呈现的预期 DOM 树结构。另一种可能遇到此类错误的情况在前面的 \n<a href=\"guide/hydration#valid-html\">有效的 HTML 结构</a> 部分中有提到。因此，请确保模板中的 HTML 使用有效结构，就可以避免这种错误情况。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4o6gz2rrayupnuu0mjf14hlom\">有关水合相关错误的完整参考，请访问<a href=\"/errors\">错误参考指南</a>。</p>\n<p><a id=\"ngskiphydration\"></a></p>\n<h2 id=\"how-to-skip-hydration-for-particular-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5b0ji8wqwcq3gxpq3wu9zsr0a\">如何跳过特定组件的水合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#how-to-skip-hydration-for-particular-components\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cla952247dfteumomphb7li5c\">一些组件可能由于一些前述问题（如 \n<a href=\"guide/hydration#dom-manipulation\">直接 DOM 操作</a>）而无法在启用水合时正常工作。作为解决方法，你可以在组件的标签中添加 \n<code>ngSkipHydration</code> 属性，以跳过整个组件的水合。</p>\n<code-example language=\"html\">\n&lt;example-cmp ngSkipHydration /&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7g2h025onn9dxvycvimas41b7\">或者，你可以在宿主绑定中使用 <code>ngSkipHydration</code>。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  ...\n  host: {ngSkipHydration: 'true'},\n})\nclass ExampleCmp {}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erm8m77c1yucrrlfiovl8zvyq\"><code>ngSkipHydration</code> 属性将强制 Angular 跳过对整个组件及其子组件的水合。使用此属性意味着该组件的行为就像未启用水合一样，这意味着它将自行销毁并重新渲染。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tdxaimffpconmjgaz2o34m2i\">这将解决渲染问题，但也意味着对于此组件（及其子组件），你将无法从水合中受益。你应该尽量调整组件的实现以避免破坏水合的模式（即直接 DOM 操作），以便能删除跳过水合的注释。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87jci2paincb8uz0xw9p07g4d\"><code>ngSkipHydration</code> 属性只能在组件的宿主节点上使用。如果将此属性添加到其他节点，Angular 就会抛出错误。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cn5rfnijgk1jcgolpvaxh5j68\">请记住，将 <code>ngSkipHydration</code> 属性添加到根应用程序组件将有效地禁用对整个应用程序的水合。因此使用此属性时要小心谨慎，它只能作为最后的解决方案。那些破坏水合的组件应被视为需要修复的错误。</p>\n<p><a id=\"i18n\"></a></p>\n<h2 id=\"i18n\">I18N<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#i18n\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zvirhhkvv9nmi8vymfgqe4v2\">我们还不支持水合的国际化，但很快就会支持。目前，Angular 会跳过对使用了 i18n 块的组件的水合，有效地从头开始重新渲染这些组件。</p>\n<h2 id=\"third-party-libraries-with-dom-manipulation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d28vsnijtkkoqokk43vnkqkdf\">具有 DOM 操作的第三方库<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#third-party-libraries-with-dom-manipulation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rjaqsoznh1wxwu778n9cmrjc\">有许多依赖于 DOM 操作才能渲染的第三方库。D3 图表就是典型。这些库在没有水合的情况下能正常工作，但在启用水合时可能会导致 DOM 不匹配错误。现在，如果你在使用这些库之一时遇到了 DOM 不匹配的错误，可以将 <code>ngSkipHydration</code> 属性添加到使用该库渲染的组件。</p>\n\n  <div class=\"reviewed\">最后复查时间：Mon Aug 14 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/afterNextRender\n - api/core/afterRender\n - api/platform-browser/provideClientHydration\n - errors/NG0500\n - errors/NG0503\n - errors/NG0504\n - errors/NG0505\n - errors/NG0507\n - errors/NG0912\n - errors/NG5000\n - guide/angular-compiler-options\n - guide/roadmap\n - guide/ssr\n-->\n<!-- links from this doc:\n - /errors\n - /guide/ssr\n - api/core/Component\n - api/core/NgModule\n - api/platform-browser/bootstrapApplication\n - api/platform-browser/provideClientHydration\n - guide/hydration#cdn-optimizations\n - guide/hydration#constraints\n - guide/hydration#custom-or-noop-zonejs-are-not-yet-supported\n - guide/hydration#direct-dom-manipulation\n - guide/hydration#dom-manipulation\n - guide/hydration#errors\n - guide/hydration#how-do-you-enable-hydration-in-angular\n - guide/hydration#how-to-skip-hydration-for-particular-components\n - guide/hydration#hydration\n - guide/hydration#i18n\n - guide/hydration#ngskiphydration\n - guide/hydration#preserve-whitespaces-configuration\n - guide/hydration#third-party-libraries-with-dom-manipulation\n - guide/hydration#valid-html\n - guide/hydration#valid-html-structure\n - guide/hydration#what-is-hydration\n - guide/hydration#why-is-hydration-important\n - https://angular.io/errors/NG0507\n - https://developer.chrome.com/en/docs/lighthouse/performance/first-contentful-paint/\n - https://validator.w3.org/\n - https://web.dev/cls/\n - https://web.dev/lcp/\n - https://web.dev/learn-core-web-vitals/\n-->"}
{"id":"guide/hydration","title":"水合（Hydration）","contents":"<div class=\"content\">\n  <h1 id=\"hydration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f56gmhqyrur87h9p9zanu9nib\">水合（Hydration）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#hydration\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"what-is-hydration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56lwflegdeq058j9zh4ahngi8\">什麼是水合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#what-is-hydration\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9zcw9hplp7n92ef6uro1k9e6\">水合是指在用戶端恢復伺服器端渲染出的應用程式的過程。這包括複用伺服器端渲染的 DOM 結構、持久化應用程式狀態、傳輸伺服器端已經獲取到的應用程式資料，還有一些其他過程。</p>\n<h2 id=\"why-is-hydration-important\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"doyri47hfufkarjwmisgnju3m\">為什麼水合很重要？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#why-is-hydration-important\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ddzpublabig0ocbcnxamjsluz\">透過避免額外工作重新建立DOM節點，水合可以提高應用程式效能。相反，Angular會嘗試在執行時將現有的DOM元素與應用程式結構對應，並在可能時重用DOM節點。這將導致效能改進，可以使用\n<a href=\"https://web.dev/learn-core-web-vitals/\">核心Web關鍵效能指標（CWV）</a>統計資料進行衡量，例如減少首次內容繪製\n<a href=\"https://developer.chrome.com/en/docs/lighthouse/performance/first-contentful-paint/\">FCP</a>和最大內容繪製（\n<a href=\"https://web.dev/lcp/\">LCP</a>），以及累積佈局位移（\n<a href=\"https://web.dev/cls/\">CLS</a>）。改善這些數字還會影響諸如SEO效能之類別的事情。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8zjsbnsixc8paxp72a8144ks9\">如果不啟用水合，伺服器端渲染的 Angular 應用程式將銷燬並重新渲染應用程式的 DOM，這可能會導致可見的 UI 閃爍。這種重新渲染會物件 <a href=\"https://web.dev/lcp/\">LCP</a> 這樣的 <a href=\"https://web.dev/learn-core-web-vitals/\">核心 Web 體驗</a>產生負面影響，並導致佈局變化。啟用水合能讓你複用現有的 DOM 並防止閃爍。</p>\n<p><a id=\"how-to-enable\"></a></p>\n<h2 id=\"how-do-you-enable-hydration-in-angular\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d9ty3va4fr29pqlne5uo7cu3m\">如何在 Angular 中啟用水合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#how-do-you-enable-hydration-in-angular\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8wi7b1s717bymf054bnbluf4g\">在開始使用水合之前，你必須有一個伺服器端渲染（SSR）應用程式。首先遵循\n<a href=\"/guide/ssr\">Angular SSR指南</a>啟用伺服器端渲染。一旦你的應用程式與SSR配合工作，你可以透過訪問主應用元件或模組，並從\n<code>@angular/platform-browser</code>匯入\n<code><a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a></code>來啟用水合。然後，將該提供程式新增到應用程式的引導提供程式清單中。</p>\n<code-example language=\"typescript\">\nimport {\n  <a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>,\n  <a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a>,\n} from '@angular/platform-browser';\n...\n\n<a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>(RootCmp, {\n  providers: [<a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a>()]\n});\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7uufdhnubsa6qec10dpkqrbmk\">或者，如果你在使用 NgModules，可以將 <code><a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a></code> 新增到根應用程式模組的提供者清單中。</p>\n<code-example language=\"typescript\">\nimport {<a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a>} from '@angular/platform-browser';\nimport {<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>} from '@angular/core';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [RootCmp],\n  exports: [RootCmp],\n  bootstrap: [RootCmp],\n  providers: [<a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a>()],\n})\nexport class AppModule {}\n</code-example>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"12jl0meok7f8ll61nt95volq5\"><strong>重要提示</strong>：確保 <code><a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a>()</code> 呼叫也包含在用於在<strong>伺服器端</strong>引導應用程式的提供者清單中。在具有預設專案結構的應用程式中（由<code>ng new</code>指令生成）加入對根 <code>AppModule</code> 的呼叫應該就夠了，因為該模組已被伺服器端模組匯入。如果你使用自定義設定，請將 <code><a href=\"api/platform-browser/provideClientHydration\" class=\"code-anchor\">provideClientHydration</a>()</code> 呼叫新增到伺服器端啟動設定中的提供者清單中。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"56bgs20pili2eskzuhg3nfu0k\">完成這些步驟並啟動伺服器端後，在瀏覽器中載入你的應用程式。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6esu50w14iij63z1qdg1i9i9r\">在啟用水合之前，你可能需要修復直接操縱 DOM 的實例，可以透過切換到 Angular 式的構造或使用 <code>ngSkipHydration</code> 來完成。詳見<a href=\"guide/hydration#constraints\">約束條件</a>、<a href=\"guide/hydration#dom-manipulation\">直接 DOM 操作</a>和<a href=\"guide/hydration#ngskiphydration\">如何在水合時跳過特定元件</a>。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mycshpuhhz8z71531wveyx8u\">在 dev 模式下執行應用程式時，可以透過在瀏覽器中開啟開發者工具並檢視控制台來確認啟用了水合。你應該會看到一個包含與水合相關統計資料的訊息，例如已水合的元件和節點數量。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cpkvga8k8i1of5zyakiukguu2\">Angular 根據頁面上呈現的所有元件計算統計資料，包括來自第三方函式庫的元件。</p>\n</div>\n<p><a id=\"constraints\"></a></p>\n<h2 id=\"constraints\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tec8wud1c413vns0x11e6vfc\">約束條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#constraints\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6k8wvs1892pfvi8k13m1ftmxd\">水合對你的應用程式施加了一些限制，這些限制在沒有啟用水合的情況下是不存在的。你的應用程式必須在服務端和用戶端具有相同的生成的 DOM 結構。水合過程期望 DOM 樹在兩個地方具有相同的結構。這還包括 Angular 在服務端渲染期間生成的空白和註解節點。這些空白和註解節點必須出現在服務端渲染過程生成的 HTML 中。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"622x6hzpwxyup6wjc3ufsv3l3\">伺服器端渲染操作生成的 HTML 在服務端和用戶端之間<strong>不能</strong>有任何區別。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4bif3er1x4q61nh7x15t5yib\">如果伺服器端和用戶端的 DOM 樹結構不對應，當水合過程試圖將預期的內容與 DOM 中實際存在的內容相對應時就會遇到問題。使用原生 DOM API 進行直接 DOM 操作的元件是最常見的罪魁禍首。</p>\n<p><a id=\"dom-manipulation\"></a></p>\n<h3 id=\"direct-dom-manipulation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bu69ibonnxfppx6xi1mft18s9\">直接 DOM 操作<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#direct-dom-manipulation\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d73rt1zy4l4r5x5hjbhv00cos\">如果你有使用原生 DOM API 或使用 \n<code>innerHTML</code> 或 \n<code>outerHTML</code> 進行 DOM 操作的元件，水合過程將會遇到錯誤。DOM 操作存在問題的具體情況包括訪問 \n<code>document</code>、查詢特定元素以及使用 \n<code>appendChild</code> 插入額外節點。分離 DOM 節點並將其移動到其他位置也會導致錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1lj0x41jreq8r5q2uvgouxp6x\">這是因為 Angular 不瞭解這些 DOM 變化，並且無法在水合過程中解決它們。Angular 本來期望某種結構，但在嘗試水合時遇到了另一種結構。這種差異將導致水合失敗並引發 DOM 不對應錯誤（<a href=\"guide/hydration#errors\">見下文</a>）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"amd5lqvu0819ffyit05wfddz7\">最好重構你的元件以避免此類別 DOM 操作。如果可以，請嘗試使用 Angular API 來完成這項工作。如果你無法重構此行為，請使用 <code>ngSkipHydration</code> 屬性（<a href=\"guide/hydration#ngskiphydration\">如下所述</a>），直到你可以把它重構為對水合友好的解決方案。</p>\n<p><a id=\"valid-html\"></a></p>\n<h3 id=\"valid-html-structure\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4vooeix8hv6u3yty3z1hmvkj9\">有效的 HTML 結構<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#valid-html-structure\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6jimybwuv26xmwkbyoqbytxhx\">在某些情況下，如果你的元件範本沒有有效的 HTML 結構，可能會導致在水合期間出現 DOM 不對應錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e83l4moyn85yr0t1cf3z7v0o2\">例如，以下是此問題的一些最常見案例。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cw5tftrv5boofoiwmafg5zasy\"><code>&lt;table&gt;</code> 標籤中沒有 <code>&lt;tbody&gt;</code></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2mfd5u2j0a1zqqzquadtkox77\"><code>&lt;div&gt;</code>標籤 位於 <code>&lt;p&gt;</code> 中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8rj1kt6swknxkklxvan7aqbki\"><code>&lt;a&gt;</code>標籤 位於 <code>&lt;h1&gt;</code> 中</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"66wcte1bh9lfb9h37vr7sy2z0\"><code>&lt;a&gt;</code> 標籤位於另一個 <code>&lt;a&gt;</code> 中</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xyq95j0ppnjvrwdlee6fzhir\">如果你不確定你的 HTML 是否有效，可以使用<a href=\"https://validator.w3.org/\">語法驗證器</a>來檢查它。</p>\n<p><a id=\"preserve-whitespaces\"></a></p>\n<h3 id=\"preserve-whitespaces-configuration\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aasize33idxox7la96qtmykm5\">保留空白字元設定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#preserve-whitespaces-configuration\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"89szeyq14kmaapebaksukqd83\">使用水合功能時，我們建議對 <code>preserveWhitespaces</code> 使用預設設定 <code>false</code>。如果你的 tsconfig 中沒有進行此設定，則該值將為 <code>false</code> 而無需更改。如果你選擇透過將 <code>preserveWhitespaces: true</code> 新增到你的 tsconfig 中來啟用保留空格，就可能會遇到水合問題。這在目前還不是一個受到完全支援的設定。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beq0kzjmfknhouam2y9l8668f\">請確保在服務器端和瀏覽器端的建立中，<code>tsconfig.server.json</code> 和 <code>tsconfig.app.json</code> 檔案中設定的這個選項是<strong>一致的</strong>。如果不一致就會導致水合失敗。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31q7ez65fjeapcmxcsr6yumtd\">如果你選擇在 <code>tsconfig</code> 中設定此選項，我們建議僅在 <code>tsconfig.app.json</code> 中設定它，因為預設情況下 <code>tsconfig.server.json</code> 會從 <code>tsconfig.app.json</code> 中繼承此選項。</p>\n</div>\n<p><a id=\"cdn-configuration\"></a></p>\n<h3 id=\"cdn-optimizations\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5i5rlapzrlxdvv5lsejnk2epb\">CDN 最佳化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#cdn-optimizations\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39zbrn5syow8w53v1bpzkuqjv\">許多 CDN 提供了一個功能，將嘗試透過剝離渲染 DOM 中它認為不必要的所有節點來最佳化你的已渲染應用程式，其中包括註解節點。註解節點是 Angular 執行的重要部分，對於水合至關重要。為了確保你的應用程式載入並進行水合，你需要停用此 CDN 功能。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ss22cjp9ccuxy39cnqzz8qgy\">如果啟用了 CDN 最佳化並啟用了水合，在嘗試載入頁面時，你將遇到錯誤 \n<a href=\"https://angular.io/errors/NG0507\">NG0507</a>。如果看到此錯誤，你應該去停用 CDN 最佳化。</p>\n<h3 id=\"custom-or-noop-zonejs-are-not-yet-supported\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7o22ezmzscxy6pbzdkhprr8q1\">尚不支援自定義或 Noop Zone.js<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#custom-or-noop-zonejs-are-not-yet-supported\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bm8qiif4rv9p8vdvp6mk9gvpv\">水合要依賴於來自 Zone.js 的訊號來確定應用程式何時變得穩定，以便 Angular 可以在服務端上啟動序列化過程或在用戶端啟動水合後進行清理工作（以刪除無主的 DOM 節點）。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kq5fz6xuabofz1h22bznxt72\">提供自定義或 『noop』 Zone.js 實現可能會導致『穩定』事件發生在不同的時間點，從而過早或過晚觸發序列化或清理。這還不是已受完全支援的設定，你可能需要在自定義 Zone.js 實現中調整 <code>onStable</code> 事件的時間。</p>\n<p><a id=\"errors\"></a></p>\n<h2 id=\"errors\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5mcfu00geyug3tkj1rksyx81i\">錯誤<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#errors\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2ab1iu9ufzjmc16m2kiiip98g\">你可能會遇到幾種與水合相關的錯誤，從節點不對應到在無效宿主節點上使用 \n<code>ngSkipHydration</code> 的情況。可能發生的最常見錯誤情況是直接使用原生 API 進行 DOM 操作，導致水合無法在用戶端找到或對應伺服器呈現的預期 DOM 樹結構。另一種可能遇到此類別錯誤的情況在前面的 \n<a href=\"guide/hydration#valid-html\">有效的 HTML 結構</a> 部分中有提到。因此，請確保範本中的 HTML 使用有效結構，就可以避免這種錯誤情況。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4o6gz2rrayupnuu0mjf14hlom\">有關水合相關錯誤的完整參考，請訪問<a href=\"/errors\">錯誤參考指南</a>。</p>\n<p><a id=\"ngskiphydration\"></a></p>\n<h2 id=\"how-to-skip-hydration-for-particular-components\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5b0ji8wqwcq3gxpq3wu9zsr0a\">如何跳過特定元件的水合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#how-to-skip-hydration-for-particular-components\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cla952247dfteumomphb7li5c\">一些元件可能由於一些前述問題（如 \n<a href=\"guide/hydration#dom-manipulation\">直接 DOM 操作</a>）而無法在啟用水合時正常工作。作為解決方法，你可以在元件的標籤中新增 \n<code>ngSkipHydration</code> 屬性，以跳過整個元件的水合。</p>\n<code-example language=\"html\">\n&lt;example-cmp ngSkipHydration /&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7g2h025onn9dxvycvimas41b7\">或者，你可以在宿主繫結中使用 <code>ngSkipHydration</code>。</p>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  ...\n  host: {ngSkipHydration: 'true'},\n})\nclass ExampleCmp {}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"erm8m77c1yucrrlfiovl8zvyq\"><code>ngSkipHydration</code> 屬性將強制 Angular 跳過對整個元件及其子元件的水合。使用此屬性意味著該組件的行為就像未啟用水合一樣，這意味著它將自行銷燬並重新渲染。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tdxaimffpconmjgaz2o34m2i\">這將解決渲染問題，但也意味著對於此元件（及其子元件），你將無法從水合中受益。你應該儘量調整元件的實現以避免破壞水合的模式（即直接 DOM 操作），以便能刪除跳過水合的註解。</p>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"87jci2paincb8uz0xw9p07g4d\"><code>ngSkipHydration</code> 屬性只能在元件的宿主節點上使用。如果將此屬性新增到其他節點，Angular 就會丟擲錯誤。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cn5rfnijgk1jcgolpvaxh5j68\">請記住，將 <code>ngSkipHydration</code> 屬性新增到根應用程式元件將有效地停用對整個應用程式的水合。因此使用此屬性時要小心謹慎，它只能作為最後的解決方案。那些破壞水合的元件應被視為需要修復的錯誤。</p>\n<p><a id=\"i18n\"></a></p>\n<h2 id=\"i18n\">I18N<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#i18n\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5zvirhhkvv9nmi8vymfgqe4v2\">我們還不支援水合的國際化，但很快就會支援。目前，Angular 會跳過對使用了 i18n 區塊的元件的水合，有效地從頭開始重新渲染這些元件。</p>\n<h2 id=\"third-party-libraries-with-dom-manipulation\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d28vsnijtkkoqokk43vnkqkdf\">具有 DOM 操作的第三方函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hydration#third-party-libraries-with-dom-manipulation\"><i class=\"material-icons\">link</i></a></h2>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6rjaqsoznh1wxwu778n9cmrjc\">有許多依賴於 DOM 操作才能渲染的第三方函式庫。D3 圖表就是典型。這些函式庫在沒有水合的情況下能正常工作，但在啟用水合時可能會導致 DOM 不對應錯誤。現在，如果你在使用這些函式庫之一時遇到了 DOM 不對應的錯誤，可以將 <code>ngSkipHydration</code> 屬性新增到使用該函式庫渲染的元件。</p>\n\n  <div class=\"reviewed\">最後複查時間：Mon Aug 14 2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/afterNextRender\n - api/core/afterRender\n - api/platform-browser/provideClientHydration\n - errors/NG0500\n - errors/NG0503\n - errors/NG0504\n - errors/NG0505\n - errors/NG0507\n - errors/NG0912\n - errors/NG5000\n - guide/angular-compiler-options\n - guide/roadmap\n - guide/ssr\n-->\n<!-- links from this doc:\n - /errors\n - /guide/ssr\n - api/core/Component\n - api/core/NgModule\n - api/platform-browser/bootstrapApplication\n - api/platform-browser/provideClientHydration\n - guide/hydration#cdn-optimizations\n - guide/hydration#constraints\n - guide/hydration#custom-or-noop-zonejs-are-not-yet-supported\n - guide/hydration#direct-dom-manipulation\n - guide/hydration#dom-manipulation\n - guide/hydration#errors\n - guide/hydration#how-do-you-enable-hydration-in-angular\n - guide/hydration#how-to-skip-hydration-for-particular-components\n - guide/hydration#hydration\n - guide/hydration#i18n\n - guide/hydration#ngskiphydration\n - guide/hydration#preserve-whitespaces-configuration\n - guide/hydration#third-party-libraries-with-dom-manipulation\n - guide/hydration#valid-html\n - guide/hydration#valid-html-structure\n - guide/hydration#what-is-hydration\n - guide/hydration#why-is-hydration-important\n - https://angular.io/errors/NG0507\n - https://developer.chrome.com/en/docs/lighthouse/performance/first-contentful-paint/\n - https://validator.w3.org/\n - https://web.dev/cls/\n - https://web.dev/lcp/\n - https://web.dev/learn-core-web-vitals/\n-->"}
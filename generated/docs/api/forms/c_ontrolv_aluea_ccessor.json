{"id":"api/forms/ControlValueAccessor","title":"ControlValueAccessor","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/forms\", \"name\": \"@angular/forms\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/forms/ControlValueAccessor\", \"name\": \"ControlValueAccessor\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/forms\">@angular/forms</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/control_value_accessor.ts#L10-L132\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"controlvalueaccessor\">ControlValueAccessor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#controlvalueaccessor\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label interface\">interface</label>\n  </header>\n  \n\n  <div class=\"api-body\">\n  <section class=\"short-description\">\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"47j1w3p6obpx319avjyb664fx\">定义一个接口，该接口充当 Angular 表单 API 和 DOM 中的原生元素之间的桥梁。</p>\n\n    <p><a href=\"api/forms/ControlValueAccessor#description\">查看更多...</a></p>\n  </section><section class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/forms/ControlValueAccessor\" class=\"code-anchor\">ControlValueAccessor</a> {<br><a class=\"code-anchor\" href=\"api/forms/ControlValueAccessor#writeValue\"><span class=\"member-name\">writeValue</span>(obj: any): void</a><br><a class=\"code-anchor\" href=\"api/forms/ControlValueAccessor#registerOnChange\"><span class=\"member-name\">registerOnChange</span>(fn: any): void</a><br><a class=\"code-anchor\" href=\"api/forms/ControlValueAccessor#registerOnTouched\"><span class=\"member-name\">registerOnTouched</span>(fn: any): void</a><br><a class=\"code-anchor\" href=\"api/forms/ControlValueAccessor#setDisabledState\"><span class=\"member-name\">setDisabledState</span>(isDisabled: boolean)?: void</a>\n}\n</code-example>\n\n\n  <div class=\"descendants class\">\n    <h2 id=\"实现类\">实现类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#实现类\"><i class=\"material-icons\">link</i></a></h2>\n    \n<ul>\n  <li>\n    <code><a href=\"api/forms/CheckboxControlValueAccessor\" class=\"code-anchor\">CheckboxControlValueAccessor</a></code>\n    \n  </li>\n  <li>\n    <code><a href=\"api/forms/DefaultValueAccessor\" class=\"code-anchor\">DefaultValueAccessor</a></code>\n    \n  </li>\n  <li>\n    <code><a href=\"api/forms/NumberValueAccessor\" class=\"code-anchor\">NumberValueAccessor</a></code>\n    \n  </li>\n  <li>\n    <code><a href=\"api/forms/RadioControlValueAccessor\" class=\"code-anchor\">RadioControlValueAccessor</a></code>\n    \n  </li>\n  <li>\n    <code><a href=\"api/forms/RangeValueAccessor\" class=\"code-anchor\">RangeValueAccessor</a></code>\n    \n  </li>\n  <li>\n    <code><a href=\"api/forms/SelectControlValueAccessor\" class=\"code-anchor\">SelectControlValueAccessor</a></code>\n    \n  </li>\n  <li>\n    <code><a href=\"api/forms/SelectMultipleControlValueAccessor\" class=\"code-anchor\">SelectMultipleControlValueAccessor</a></code>\n    \n  </li>\n</ul>\n  </div>\n</section>\n\n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n    <li><a href=\"api/forms/DefaultValueAccessor\"><code>DefaultValueAccessor</code></a></li>\n  </ul>\n</section>\n  \n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eswrk5qknojqnqhvfg1sxgx4t\">实现此接口以创建与 Angular 表单集成的自定义表单控件指令。</p>\n</section>\n  \n  \n<section class=\"instance-methods\">\n  <h2 id=\"instance-methods\">方法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#instance-methods\"><i class=\"material-icons\">link</i></a></h2>\n  <a id=\"writeValue\"></a>\n<table class=\"is-full-width method-table instance-method\">\n  <thead><tr><th>\n    <div class=\"with-github-links\">\n      <h3 id=\"writevalue\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xk3qk7ja4hm7m51nf07xprsw\">writeValue()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#writevalue\"><i class=\"material-icons\">link</i></a></h3>\n      <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/control_value_accessor.ts#L24-L44\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n    </div>\n  </th></tr></thead>\n  <tbody>\n    <tr>\n      <td class=\"short-description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"755nioao7i2nu763wg9pl36vd\">将新值写入元素。</p>\n</td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><span class=\"member-name\">writeValue</span>(obj: any): void</code-example>\n\n  <h6 class=\"no-anchor\" id=\"parameters\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table instance-method-overload-parameters\">\n  <tbody>\n    <tr class=\"instance-method-overload-parameter\">\n      <td class=\"param-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ctbi0a37g18mv6qcymaedix8m\"><a id=\"\"></a>\n        <code>obj</code></td>\n      <td class=\"param-type\"><code>any</code></td>\n      <td class=\"param-description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"am2dhd4ennyarrutzvs098n1w\">元素的新值</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"returns\">返回值</h6>\n  <p><code>void</code></p>\n\n</div>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64f36clkna1f1j1wx0b0oy06w\">当请求从模型到视图的编程更改时，表单 API 会调用此方法以写入视图。</p>\n\n      </td>\n    </tr>\n    <tr>\n      <td class=\"usage-notes\">\n        <h4 id=\"writeValue-usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#writeValue-usage-notes\"><i class=\"material-icons\">link</i></a></h4>\n        <h5 id=\"write-a-value-to-the-element\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bnch3i20yhfxwc2i7efr3i9df\">向元素写入值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#write-a-value-to-the-element\"><i class=\"material-icons\">link</i></a></h5>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25r0r9fdo0ilr97o6sqfw76er\">以下示例将一个值写入原生 DOM 元素。</p>\n<code-example language=\"ts\">\nwriteValue(value: any): void {\n  this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n}\n</code-example>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <a id=\"registerOnChange\"></a>\n<table class=\"is-full-width method-table instance-method\">\n  <thead><tr><th>\n    <div class=\"with-github-links\">\n      <h3 id=\"registeronchange\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"24ixn4rjgcvl500z3e5w7x5nr\">registerOnChange()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#registeronchange\"><i class=\"material-icons\">link</i></a></h3>\n      <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/control_value_accessor.ts#L45-L79\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n    </div>\n  </th></tr></thead>\n  <tbody>\n    <tr>\n      <td class=\"short-description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5pdrj98fv4d40aqq2se4828yc\">注册一个回调函数，该控件的值在 UI 中更改时将调用该回调函数。</p>\n</td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><span class=\"member-name\">registerOnChange</span>(fn: any): void</code-example>\n\n  <h6 class=\"no-anchor\" id=\"parameters\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table instance-method-overload-parameters\">\n  <tbody>\n    <tr class=\"instance-method-overload-parameter\">\n      <td class=\"param-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"140pqzq6lw69r4uzam5rr6jr4\"><a id=\"\"></a>\n        <code>fn</code></td>\n      <td class=\"param-type\"><code>any</code></td>\n      <td class=\"param-description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4gfrxesnpzqmxepty369m0gx\">要注册的回调函数</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"returns\">返回值</h6>\n  <p><code>void</code></p>\n\n</div>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17trhzi086jdkxzyxihfwx3tz\">当值从视图传播到模型时，表单 API 会在初始化时调用此方法以更新表单模型。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fkys7j3qlffvgts3ysgvseep\">在你自己的值访问器中实现 <code>registerOnChange</code>\n方法时，请保存给定的函数，以便你的类在适当的时机调用它。</p>\n\n      </td>\n    </tr>\n    <tr>\n      <td class=\"usage-notes\">\n        <h4 id=\"registerOnChange-usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#registerOnChange-usage-notes\"><i class=\"material-icons\">link</i></a></h4>\n        <h5 id=\"store-the-change-function\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1oy7obx4ib811kq66fo15fhs6\">存储变更函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#store-the-change-function\"><i class=\"material-icons\">link</i></a></h5>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4k3ne5ebjf2ubikp8fi2gfk2e\">以下示例将所提供的函数存储为内部方法。</p>\n<code-example language=\"ts\">\nregisterOnChange(fn: (_: any) =&gt; void): void {\n  this._onChange = fn;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bd9cmxmtzoq9gk4tom3x6f3dk\">当用户界面中的值更改时，请调用已注册的函数以允许表单 API 自行更新：</p>\n<code-example language=\"ts\">\nhost: {\n   '(change)': '_onChange($event.target.value)'\n}\n</code-example>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <a id=\"registerOnTouched\"></a>\n<table class=\"is-full-width method-table instance-method\">\n  <thead><tr><th>\n    <div class=\"with-github-links\">\n      <h3 id=\"registerontouched\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sk7vl173tfdo40248b5n1lg4\">registerOnTouched()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#registerontouched\"><i class=\"material-icons\">link</i></a></h3>\n      <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/control_value_accessor.ts#L80-L112\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n    </div>\n  </th></tr></thead>\n  <tbody>\n    <tr>\n      <td class=\"short-description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyscuflosyfpij9fvefuhtlj7\">注册一个在初始化时由表单 API 调用的回调函数，以在失焦时更新表单模型。</p>\n</td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><span class=\"member-name\">registerOnTouched</span>(fn: any): void</code-example>\n\n  <h6 class=\"no-anchor\" id=\"parameters\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table instance-method-overload-parameters\">\n  <tbody>\n    <tr class=\"instance-method-overload-parameter\">\n      <td class=\"param-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"140pqzq6lw69r4uzam5rr6jr4\"><a id=\"\"></a>\n        <code>fn</code></td>\n      <td class=\"param-type\"><code>any</code></td>\n      <td class=\"param-description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c4gfrxesnpzqmxepty369m0gx\">要注册的回调函数</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"returns\">返回值</h6>\n  <p><code>void</code></p>\n\n</div>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"72xrmkeuxg07qm0olw8v6fwks\">在你自己的值访问器中实现 <code>registerOnTouched</code>\n，请保存给定函数，以便你的类在应将控件视为失焦或“已接触过”时调用它。</p>\n\n      </td>\n    </tr>\n    <tr>\n      <td class=\"usage-notes\">\n        <h4 id=\"registerOnTouched-usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#registerOnTouched-usage-notes\"><i class=\"material-icons\">link</i></a></h4>\n        <h5 id=\"store-the-callback-function\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ueuseyn8fnbdpaiwat25tgwt\">存储回调函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#store-the-callback-function\"><i class=\"material-icons\">link</i></a></h5>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4k3ne5ebjf2ubikp8fi2gfk2e\">以下示例将所提供的函数存储为内部方法。</p>\n<code-example language=\"ts\">\nregisterOnTouched(fn: any): void {\n  this._onTouched = fn;\n}\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4l9o1fqonskga0hr3bh2j1j4t\">在 blur（或等效事件）时，你的类应调用已注册的函数以允许表单 API 自行更新：</p>\n<code-example language=\"ts\">\nhost: {\n   '(blur)': '_onTouched()'\n}\n</code-example>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <a id=\"setDisabledState\"></a>\n<table class=\"is-full-width method-table instance-method\">\n  <thead><tr><th>\n    <div class=\"with-github-links\">\n      <h3 id=\"setdisabledstate\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9trr36gjgajtrqi64wqw3oc67\">setDisabledState()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#setdisabledstate\"><i class=\"material-icons\">link</i></a></h3>\n      <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/control_value_accessor.ts#L113-L131\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n    </div>\n  </th></tr></thead>\n  <tbody>\n    <tr>\n      <td class=\"short-description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dxvvlu5cnk5fv6fel3c2e2gv7\">当控件状态更改为 “DISABLED” 或从 “DISABLED” 更改时，表单 API\n要调用的函数。根据其状态，它会启用或禁用适当的 DOM 元素。</p>\n</td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><span class=\"member-name\">setDisabledState</span>(isDisabled: boolean)?: void</code-example>\n\n  <h6 class=\"no-anchor\" id=\"parameters\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table instance-method-overload-parameters\">\n  <tbody>\n    <tr class=\"instance-method-overload-parameter\">\n      <td class=\"param-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"byadli8qjbpmcmprjkqtjrsa6\"><a id=\"\"></a>\n        <code>isDisabled</code></td>\n      <td class=\"param-type\"><code>boolean</code></td>\n      <td class=\"param-description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4so1vo943ior3g267qpzo88vz\">要在元素上设置的禁用状态</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"returns\">返回值</h6>\n  <p><code>void</code></p>\n\n</div>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"usage-notes\">\n        <h4 id=\"setDisabledState-usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/ControlValueAccessor#setDisabledState-usage-notes\"><i class=\"material-icons\">link</i></a></h4>\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7sumbhurpc8wuv48y0scfq12w\">以下是将 disabled 属性写入原生 DOM 元素的示例：</p>\n<code-example language=\"ts\">\nsetDisabledState(isDisabled: boolean): void {\n  this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n}\n</code-example>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n</section>\n</div>\n</article>\n\n<!-- links to this doc:\n - api/forms\n - api/forms/CheckboxControlValueAccessor\n - api/forms/DefaultValueAccessor\n - api/forms/FormsModule\n - api/forms/NG_VALUE_ACCESSOR\n - api/forms/NgControl\n - api/forms/NumberValueAccessor\n - api/forms/RadioControlValueAccessor\n - api/forms/RangeValueAccessor\n - api/forms/ReactiveFormsModule\n - api/forms/SelectControlValueAccessor\n - api/forms/SelectMultipleControlValueAccessor\n - api/upgrade/UpgradeAdapter\n - guide/built-in-directives\n - guide/forms-overview\n - guide/update-to-version-15\n-->\n<!-- links from this doc:\n - /api\n - api/forms\n - api/forms/CheckboxControlValueAccessor\n - api/forms/ControlValueAccessor#controlvalueaccessor\n - api/forms/ControlValueAccessor#description\n - api/forms/ControlValueAccessor#instance-methods\n - api/forms/ControlValueAccessor#registerOnChange\n - api/forms/ControlValueAccessor#registerOnChange-usage-notes\n - api/forms/ControlValueAccessor#registerOnTouched\n - api/forms/ControlValueAccessor#registerOnTouched-usage-notes\n - api/forms/ControlValueAccessor#registeronchange\n - api/forms/ControlValueAccessor#registerontouched\n - api/forms/ControlValueAccessor#see-also\n - api/forms/ControlValueAccessor#setDisabledState\n - api/forms/ControlValueAccessor#setDisabledState-usage-notes\n - api/forms/ControlValueAccessor#setdisabledstate\n - api/forms/ControlValueAccessor#store-the-callback-function\n - api/forms/ControlValueAccessor#store-the-change-function\n - api/forms/ControlValueAccessor#write-a-value-to-the-element\n - api/forms/ControlValueAccessor#writeValue\n - api/forms/ControlValueAccessor#writeValue-usage-notes\n - api/forms/ControlValueAccessor#writevalue\n - api/forms/ControlValueAccessor#实现类\n - api/forms/DefaultValueAccessor\n - api/forms/NumberValueAccessor\n - api/forms/RadioControlValueAccessor\n - api/forms/RangeValueAccessor\n - api/forms/SelectControlValueAccessor\n - api/forms/SelectMultipleControlValueAccessor\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/control_value_accessor.ts#L10-L132\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/control_value_accessor.ts#L113-L131\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/control_value_accessor.ts#L24-L44\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/control_value_accessor.ts#L45-L79\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/control_value_accessor.ts#L80-L112\n-->"}
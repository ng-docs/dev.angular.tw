{"id":"api/forms/NgModel","title":"NgModel","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/forms\", \"name\": \"@angular/forms\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/forms/NgModel\", \"name\": \"NgModel\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/forms\">@angular/forms</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/ng_model.ts#L48-L355\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"ngmodel\">NgModel<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#ngmodel\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label directive\">directive</label>\n  </header>\n  \n\n  <div class=\"api-body\">\n  <section class=\"short-description\">\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ni4yxf8l2e43f3n9f3wejm9d\">根据领域对象创建一个 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 实例，并把它绑定到一个表单控件元素上。</p>\n\n    <p><a href=\"api/forms/NgModel#description\">查看更多...</a></p>\n  </section>\n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n    <li><a href=\"api/forms/RadioControlValueAccessor\"><code>RadioControlValueAccessor</code></a></li>\n    <li><a href=\"api/forms/SelectControlValueAccessor\"><code>SelectControlValueAccessor</code></a></li>\n  </ul>\n</section>\n<h2 id=\"导出自\">导出自<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#导出自\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n  <li>\n    <a href=\"api/forms/FormsModule\">\n      <code>FormsModule</code>\n    </a>\n  </li>\n</ul>\n  \n<section class=\"selector-list\">\n  <h2 id=\"selectors\">选择器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#selectors\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n    <li><code>[<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]<i>:not([<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>])</i><i>:not([formControl])</i></code></li>\n  </ul>\n</section>\n\n\n<section class=\"instance-properties\">\n  <a id=\"properties\"></a>\n  <h2 id=\"instance-properties\">属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#instance-properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>属性</th>\n        <th>说明</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"control\"></a>\n          <code class=\"\"><span class=\"member-name\">control</span>: <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>\n        </td>\n        <td>\n          <span class=\"read-only-property\">只读</span>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"name\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">name</span>: string</code>\n        </td>\n        <td>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ag65y6cx1khgt1tcfuw8rlkpb\">跟踪绑定到指令的名称。如果存在父表单，它将使用此名称作为键名来检索此控件的值。</p>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"isDisabled\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('disabled')</span><br><span class=\"member-name\">isDisabled</span>: boolean</code>\n        </td>\n        <td>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dw81o146r4m8tzohsgz9b87x9\">跟踪控件是否被禁用。</p>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"model\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>')</span><br><span class=\"member-name\"><a href=\"api/core/model\" class=\"code-anchor\">model</a></span>: any</code>\n        </td>\n        <td>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"90zdorz0jldzawl3sbvttl7qm\">跟踪与此指令绑定的值。</p>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"options\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('ngModelOptions')</span><br><span class=\"member-name\">options</span>: {\n    name?: string;\n    standalone?: boolean;\n    updateOn?: FormHooks;\n}</code>\n        </td>\n        <td>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3f5xdgo6orm8wyentoldxqp3k\">跟踪该 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 实例的配置项。</p>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8csdwqa2if2g83cjktwbvvkxe\"><strong>name</strong>：用来设置表单控件元素的 <code>name</code> 属性的另一种方式。参见把 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>\n用作独立控件的那个<a href=\"api/forms/NgModel#using-ngmodel-on-a-standalone-control\">例子</a>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"21gr5h8krwcjhqmv7ikxdmy1y\"><strong>standalone</strong>：如果为 true，则此 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>\n不会把自己注册进它的父表单中，其行为就像没在表单中一样。默认为 false。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5c1z0uw8181ocnf8b6c2yg5er\"><strong>updateOn</strong>: 用来定义该何时更新表单控件的值和有效性。默认为\n<code>'change'</code>。可能的取值为：<code>'change'</code> | <code>'blur'</code> | <code>'submit'</code>。</p>\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"update\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>('ngModelChange')</span><br><span class=\"member-name\">update</span>: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>\n        </td>\n        <td>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"430av37yul8pi9kxp21ymp6np\">更新视图模型后，<code>ngModelChange</code> 的事件发射器。</p>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"path\"></a>\n          <code class=\"\"><span class=\"member-name\">path</span>: string[]</code>\n        </td>\n        <td>\n          <span class=\"read-only-property\">只读</span>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"49hnvk21xojxvnuwgsxbuct9t\">返回一个数组，该数组表示从顶级表单到此控件的路径。每个索引是该级别上控件的字符串名称。</p>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"formDirective\"></a>\n          <code class=\"\"><span class=\"member-name\">formDirective</span>: any</code>\n        </td>\n        <td>\n          <span class=\"read-only-property\">只读</span>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dn1a14y6tfeuv1em34b4phjt2\">此控件的顶级指令（如果存在），否则为 null。</p>\n          \n        </td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n\n<section class=\"inherited-members-list\">\n  <h3 id=\"继承自-ngcontrol\">继承自 <code><a class=\"code-anchor\" href=\"api/forms/NgControl\">NgControl</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#继承自-ngcontrol\"><i class=\"material-icons\">link</i></a></h3>\n  <ul>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/NgControl#name\"><span class=\"member-name\">name</span>: string | number | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/NgControl#valueAccessor\"><span class=\"member-name\">valueAccessor</span>: ControlValueAccessor | null</a></code>\n    </li>\n  </ul>\n</section>\n\n<section class=\"inherited-members-list\">\n  <h3 id=\"继承自-abstractcontroldirective\">继承自 <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective\">AbstractControlDirective</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#继承自-abstractcontroldirective\"><i class=\"material-icons\">link</i></a></h3>\n  <ul>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#control\">abstract <span class=\"member-name\">control</span>: AbstractControl | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#value\"><span class=\"member-name\">value</span>: any</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#valid\"><span class=\"member-name\">valid</span>: boolean | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#invalid\"><span class=\"member-name\">invalid</span>: boolean | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#pending\"><span class=\"member-name\">pending</span>: boolean | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#disabled\"><span class=\"member-name\">disabled</span>: boolean | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#enabled\"><span class=\"member-name\">enabled</span>: boolean | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#errors\"><span class=\"member-name\">errors</span>: ValidationErrors | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#pristine\"><span class=\"member-name\">pristine</span>: boolean | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#dirty\"><span class=\"member-name\">dirty</span>: boolean | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#touched\"><span class=\"member-name\">touched</span>: boolean | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#status\"><span class=\"member-name\">status</span>: string | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#untouched\"><span class=\"member-name\">untouched</span>: boolean | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#statusChanges\"><span class=\"member-name\">statusChanges</span>: Observable&lt;any&gt; | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#valueChanges\"><span class=\"member-name\">valueChanges</span>: Observable&lt;any&gt; | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#path\"><span class=\"member-name\">path</span>: string[] | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#validator\"><span class=\"member-name\">validator</span>: ValidatorFn | null</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#asyncValidator\"><span class=\"member-name\">asyncValidator</span>: AsyncValidatorFn | null</a></code>\n    </li>\n  </ul>\n</section>\n\n  \n<section class=\"export-as\">\n  <h2 id=\"template-variable-references\">模板变量参考手册<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#template-variable-references\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table export-as-table\">\n    <thead>\n      <tr>\n        <th>标识符</th>\n        <th>用途</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"export-as\">\n        <td><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code></td>\n        <td><code>#myTemplateVar=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code></td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n  <section class=\"description\">\n    <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"elhdwe14iua54ri63eptn3fi\">这个 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 实例将会跟踪值、用户交互和控件的验证状态，以保持视图与模型的同步。\n如果用在某个父表单中，该指令还会把自己注册为这个父表单的子控件。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b1i1i731zut15jd70f816n1od\">这个指令可以单独使用，也可以用作一个大表单的一部分。你所要做的一切就是用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>\n选择器来激活它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"25z9slev3121gu9j6qegs5l9h\">它可以接受一个领域模型作为可选的 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。如果使用 <code>[]</code> 语法来单向绑定到\n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>，那么在组件类中修改领域模型将会更新视图中的值。\n如果使用 <code>[()]</code> 语法来双向绑定到 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>，那么视图中值的变化会随时同步回组件类中的领域模型。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7hjyhqucpqnu16rmi7ghou5iu\">要检查相关 \n<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的属性（如有效状态），需要将该指令导出为本地模板变量，使用 \n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 作为键（例如: \n<code>#myVar=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>）。然后可以通过指令的 \n<code>control</code> 属性访问控件。然而，最常用的属性（如 \n<code>valid</code> 和 \n<code>dirty</code>）也存在于控件上，可直接访问。查看直接可用的所有属性列表在 \n<code><a href=\"api/forms/AbstractControlDirective\" class=\"code-anchor\">AbstractControlDirective</a></code> 中。</p>\n\n    <h3 id=\"using-ngmodel-on-a-standalone-control\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c0tzp60nhxzpeysplbz5ctelj\">在独立控件模式下使用 ngModel<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#using-ngmodel-on-a-standalone-control\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dd6r5odgzjvp36uc4oqady7a\">下面是一个在简单的独立控件中使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的例子：</p>\n<code-example path=\"forms/ts/simpleNgModel/simple_ng_model_example.ts\" region=\"Component\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'example-app',\n  template: `\n    &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"name\" #ctrl=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\" required /&gt;\n\n    &lt;p&gt;Value: {{ name }}&lt;/p&gt;\n    &lt;p&gt;Valid: {{ ctrl.valid }}&lt;/p&gt;\n\n    &lt;button (click)=\"setValue()\"&gt;Set value&lt;/button&gt;\n  `,\n})\nexport class SimpleNgModelComp {\n  name: string = '';\n\n  setValue() {\n    this.name = 'Nancy';\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9uax4qek97gp3skeuc4vq1l9n\">当在 <code>&lt;form&gt;</code> 标签中使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 时，你还需要提供一个 <code>name</code>\n属性，以便该控件可以使用这个名字把自己注册到父表单中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6axvrq4do9tknbh57i3iuh3fn\">在父表单的上下文中，通常不用包含单向或双向绑定，因为这个父表单将会为你同步该值。\n你可以使用 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code> 把它导出给一个模板局部变量（如 <code>#f=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"</code>），以访问它的属性。\n可以在任何需要提交表单的地方使用它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"anhnl85aq1wvuvt2r5qhke9gs\">如果你只是要为表单设置初始值，对 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>\n使用单向绑定就够了。在提交时，你可以使用从表单导出的值，而不必使用领域模型的值。</p>\n<h3 id=\"using-ngmodel-within-a-form\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"af52r3wb33qogript9k4q6nuq\">在表单中使用 ngModel<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#using-ngmodel-within-a-form\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y2sni1v9c2oaxhjsy40y9tfw\">下面的例子展示了如何在表单中使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>：</p>\n<code-example path=\"forms/ts/simpleForm/simple_form_example.ts\" region=\"Component\">\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>} from '@angular/core';\nimport {<a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a>} from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'example-app',\n  template: `\n    &lt;form #f=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\" (ngSubmit)=\"onSubmit(f)\" novalidate&gt;\n      &lt;input name=\"first\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> required #first=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\" /&gt;\n      &lt;input name=\"last\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> /&gt;\n      &lt;button&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n\n    &lt;p&gt;First name value: {{ first.value }}&lt;/p&gt;\n    &lt;p&gt;First name valid: {{ first.valid }}&lt;/p&gt;\n    &lt;p&gt;<a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> value: {{ f.value | json }}&lt;/p&gt;\n    &lt;p&gt;<a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> valid: {{ f.valid }}&lt;/p&gt;\n  `,\n})\nexport class SimpleFormComp {\n  onSubmit(f: <a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a>) {\n    console.log(f.value); // { first: '', last: '' }\n    console.log(f.valid); // false\n  }\n}\n\n</code-example>\n<h3 id=\"using-a-standalone-ngmodel-within-a-group\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"35147y7k15upfwbnqalvrir57\">在表单组中使用独立 ngModel<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#using-a-standalone-ngmodel-within-a-group\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hz5zal0wpapuwr63jxkd0dc8\">下面的例子演示了如何在表单中使用独立 ngModel 控件。它控制表单的显示，但并不包含表单数据。</p>\n<code-example language=\"html\">\n&lt;form&gt;\n  &lt;input name=\"login\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> placeholder=\"Login\"&gt;\n  &lt;input type=\"checkbox\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> [ngModelOptions]=\"{standalone: true}\"&gt; Show more options?\n&lt;/form&gt;\n&lt;!-- form value: {login: ''} --&gt;\n</code-example>\n<h3 id=\"setting-the-ngmodel-name-attribute-through-options\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3tkd3zktdi35xbddpqc40klgp\">通过选项设置 ngModel 的 name 属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#setting-the-ngmodel-name-attribute-through-options\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"561zla1nz8paim3wekj428ksw\">下面的例子展示了设置 name 属性的另一种方式。该 name\n属性要和自定义表单组件一起使用，而该自定义组件的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 属性 name 已用作其它用途。</p>\n<code-example language=\"html\">\n&lt;form&gt;\n  &lt;my-custom-form-control name=\"Nancy\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> [ngModelOptions]=\"{name: 'user'}\"&gt;\n  &lt;/my-custom-form-control&gt;\n&lt;/form&gt;\n&lt;!-- form value: {user: ''} --&gt;\n</code-example>\n\n  </section>\n\n\n\n\n<section class=\"instance-methods\">\n  <h2 id=\"instance-methods\">方法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#instance-methods\"><i class=\"material-icons\">link</i></a></h2>\n  <a id=\"viewToModelUpdate\"></a>\n<table class=\"is-full-width method-table instance-method\">\n  <thead><tr><th>\n    <div class=\"with-github-links\">\n      <h3 id=\"viewtomodelupdate\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exuicze0l2b8p848hqbocqcfa\">viewToModelUpdate()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#viewtomodelupdate\"><i class=\"material-icons\">link</i></a></h3>\n      <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/ng_model.ts#L270-L280\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n    </div>\n  </th></tr></thead>\n  <tbody>\n    <tr>\n      <td class=\"short-description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hdv08jr1cki54yopqgtw3meh\">设置视图模型的新值并发出 <code>ngModelChange</code> 事件。</p>\n</td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><span class=\"member-name\">viewToModelUpdate</span>(newValue: any): void</code-example>\n\n  <h6 class=\"no-anchor\" id=\"parameters\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table instance-method-overload-parameters\">\n  <tbody>\n    <tr class=\"instance-method-overload-parameter\">\n      <td class=\"param-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cif2xf1hyd0ak5bls9cplvul\"><a id=\"\"></a>\n        <code>newValue</code></td>\n      <td class=\"param-type\"><code>any</code></td>\n      <td class=\"param-description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nxgrhqs6vbf0f2tknlaz1yt1\"><code>ngModelChange</code> 发出的新值。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"returns\">返回值</h6>\n  <p><code>void</code></p>\n\n</div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n</section>\n  \n<section class=\"inherited-members-list\">\n  <h3 id=\"继承自-ngcontrol-1\">继承自 <code><a class=\"code-anchor\" href=\"api/forms/NgControl\">NgControl</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#继承自-ngcontrol-1\"><i class=\"material-icons\">link</i></a></h3>\n  <ul>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/NgControl#viewToModelUpdate\">abstract <span class=\"member-name\">viewToModelUpdate</span>(newValue: any): void</a></code>\n    </li>\n  </ul>\n</section>\n\n<section class=\"inherited-members-list\">\n  <h3 id=\"继承自-abstractcontroldirective-1\">继承自 <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective\">AbstractControlDirective</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#继承自-abstractcontroldirective-1\"><i class=\"material-icons\">link</i></a></h3>\n  <ul>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#reset\"><span class=\"member-name\">reset</span>(value: any = undefined): void</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#hasError\"><span class=\"member-name\">hasError</span>(errorCode: string, path?: string | (string | number)[]): boolean</a></code>\n    </li>\n    <li>\n      <code><a class=\"code-anchor\" href=\"api/forms/AbstractControlDirective#getError\"><span class=\"member-name\">getError</span>(errorCode: string, path?: string | (string | number)[]): any</a></code>\n    </li>\n  </ul>\n</section>\n</div>\n</article>\n\n<!-- links to this doc:\n - api/core/ChangeDetectorRef\n - api/core/HostBinding\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/forms\n - api/forms/AbstractControlDirective\n - api/forms/CheckboxControlValueAccessor\n - api/forms/CheckboxRequiredValidator\n - api/forms/DefaultValueAccessor\n - api/forms/EmailValidator\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/forms/FormsModule\n - api/forms/MaxLengthValidator\n - api/forms/MaxValidator\n - api/forms/MinLengthValidator\n - api/forms/MinValidator\n - api/forms/NgControl\n - api/forms/NgControlStatus\n - api/forms/NgForm\n - api/forms/NgModelGroup\n - api/forms/NumberValueAccessor\n - api/forms/PatternValidator\n - api/forms/RadioControlValueAccessor\n - api/forms/RangeValueAccessor\n - api/forms/ReactiveFormsModule\n - api/forms/RequiredValidator\n - api/forms/SelectControlValueAccessor\n - api/forms/SelectMultipleControlValueAccessor\n - errors/NG01203\n - guide/ajs-quick-reference\n - guide/architecture-components\n - guide/binding-syntax\n - guide/built-in-directives\n - guide/cheatsheet\n - guide/dependency-injection-in-action\n - guide/deprecations\n - guide/docs-style-guide\n - guide/form-validation\n - guide/forms\n - guide/forms-overview\n - guide/frequent-ngmodules\n - guide/glossary\n - guide/lifecycle-hooks\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/pipes\n - guide/router-tutorial-toh\n - guide/sharing-ngmodules\n - guide/styleguide\n - guide/template-reference-variables\n - guide/testing-components-scenarios\n - guide/two-way-binding\n - guide/upgrade\n - guide/user-input\n - tutorial/tour-of-heroes/toh-pt1\n - tutorial/tour-of-heroes/toh-pt2\n - tutorial/tour-of-heroes/toh-pt3\n - tutorial/tour-of-heroes/toh-pt5\n - tutorial/tour-of-heroes/toh-pt6\n-->\n<!-- links from this doc:\n - /api\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Input\n - api/core/Output\n - api/core/model\n - api/forms\n - api/forms/AbstractControlDirective\n - api/forms/AbstractControlDirective#asyncValidator\n - api/forms/AbstractControlDirective#control\n - api/forms/AbstractControlDirective#dirty\n - api/forms/AbstractControlDirective#disabled\n - api/forms/AbstractControlDirective#enabled\n - api/forms/AbstractControlDirective#errors\n - api/forms/AbstractControlDirective#getError\n - api/forms/AbstractControlDirective#hasError\n - api/forms/AbstractControlDirective#invalid\n - api/forms/AbstractControlDirective#path\n - api/forms/AbstractControlDirective#pending\n - api/forms/AbstractControlDirective#pristine\n - api/forms/AbstractControlDirective#reset\n - api/forms/AbstractControlDirective#status\n - api/forms/AbstractControlDirective#statusChanges\n - api/forms/AbstractControlDirective#touched\n - api/forms/AbstractControlDirective#untouched\n - api/forms/AbstractControlDirective#valid\n - api/forms/AbstractControlDirective#validator\n - api/forms/AbstractControlDirective#value\n - api/forms/AbstractControlDirective#valueChanges\n - api/forms/Form\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormsModule\n - api/forms/NgControl\n - api/forms/NgControl#name\n - api/forms/NgControl#valueAccessor\n - api/forms/NgControl#viewToModelUpdate\n - api/forms/NgForm\n - api/forms/NgModel#description\n - api/forms/NgModel#instance-methods\n - api/forms/NgModel#instance-properties\n - api/forms/NgModel#ngmodel\n - api/forms/NgModel#see-also\n - api/forms/NgModel#selectors\n - api/forms/NgModel#setting-the-ngmodel-name-attribute-through-options\n - api/forms/NgModel#template-variable-references\n - api/forms/NgModel#using-a-standalone-ngmodel-within-a-group\n - api/forms/NgModel#using-ngmodel-on-a-standalone-control\n - api/forms/NgModel#using-ngmodel-within-a-form\n - api/forms/NgModel#viewtomodelupdate\n - api/forms/NgModel#导出自\n - api/forms/NgModel#继承自-abstractcontroldirective\n - api/forms/NgModel#继承自-abstractcontroldirective-1\n - api/forms/NgModel#继承自-ngcontrol\n - api/forms/NgModel#继承自-ngcontrol-1\n - api/forms/RadioControlValueAccessor\n - api/forms/SelectControlValueAccessor\n - https://en.wikipedia.org/wiki/Domain_model\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/ng_model.ts#L270-L280\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/forms/src/directives/ng_model.ts#L48-L355\n-->"}
{"id":"api/common/NgIf","title":"NgIf","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/common\", \"name\": \"@angular/common\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/common/NgIf\", \"name\": \"NgIf\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/common\">@angular/common</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/common/src/directives/ng_if.ts#L17-L257\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"ngif\">NgIf<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#ngif\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label directive\">directive</label>\n  </header>\n  \n\n  <div class=\"api-body\">\n  <section class=\"short-description\">\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"31886fc104fg2szplr364w2sl\">本结构型指令用于根据表达式的值（强转为\nboolean）是否为真值，来有条件的包含某个模板。当表达式计算为 true 时，Angular 会渲染 <code>then</code>\n子句中提供的模板，当为 false 或 null 时则渲染可选的 <code>else</code> 子句中的模板。<code>else</code>\n子句的默认模板是空白模板。</p>\n\n    <p><a href=\"api/common/NgIf#description\">查看更多...</a></p>\n  </section>\n<h2 id=\"导出自\">导出自<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#导出自\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n  <li>\n    <a href=\"api/common/CommonModule\">\n      <code>CommonModule</code>\n    </a>\n  </li>\n</ul>\n  \n<section class=\"selector-list\">\n  <h2 id=\"selectors\">选择器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#selectors\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n    <li><code>[<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]</code></li>\n  </ul>\n</section>\n\n\n<section class=\"instance-properties\">\n  <a id=\"properties\"></a>\n  <h2 id=\"instance-properties\">属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#instance-properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>属性</th>\n        <th>说明</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngIf\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\"><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></span>: T</code>\n        </td>\n        <td>\n          <span class=\"write-only-property\">只写</span>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32hzs8stfuzve8znwku551dcf\">布尔表达式，将其作为显示模板的条件进行计算。</p>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngIfThen\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngIfThen</span>: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;<a href=\"api/common/NgIfContext\" class=\"code-anchor\">NgIfContext</a>&lt;T&gt;&gt;</code>\n        </td>\n        <td>\n          <span class=\"write-only-property\">只写</span>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ajssgau14hfjwr8g4mcc3z2h\">当此条件表达式计算为 true 时要显示的模板。</p>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngIfElse\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngIfElse</span>: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;<a href=\"api/common/NgIfContext\" class=\"code-anchor\">NgIfContext</a>&lt;T&gt;&gt;</code>\n        </td>\n        <td>\n          <span class=\"write-only-property\">只写</span>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9zb6k2hrocthtltq2zf9b04n8\">当此条件表达式计算为 false 时要显示的模板。</p>\n          \n        </td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n\n  \n  <section class=\"description\">\n    <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tqhwlm1zcmkfzt53labpg738\">通常使用指令的<a href=\"guide/structural-directives#asterisk\">简写形式</a>\n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition\"</code>，作为插入模板的锚点元素的属性提供。Angular\n将其扩展为更明确的版本，其中锚点元素包含在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素中。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4doexdnugxi8ip1d05fll9ef5\">具有简写语法的简单形式：</p>\n<code-example>\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition\"&gt;Content to render when condition is true.&lt;/div&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6kymg30qyq1g1h2hsr4p5ugvr\">具有扩展语法的简单形式：</p>\n<code-example>\n&lt;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"condition\"&gt;&lt;div&gt;Content to render when condition is\ntrue.&lt;/div&gt;&lt;/ng-template&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7tfcvvrt3xjn5yb0e9ixgv88j\">带有 “else” 块的格式：</p>\n<code-example>\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition; else elseBlock\"&gt;Content to render when condition is true.&lt;/div&gt;\n&lt;ng-template #elseBlock&gt;Content to render when condition is false.&lt;/ng-template&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68z74it9ox1dlndhavfvhv1em\">带 “then” 和 “else” 块的简写形式：</p>\n<code-example>\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition; then thenBlock else elseBlock\"&gt;&lt;/div&gt;\n&lt;ng-template #thenBlock&gt;Content to render when condition is true.&lt;/ng-template&gt;\n&lt;ng-template #elseBlock&gt;Content to render when condition is false.&lt;/ng-template&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dfwp7lqebjv8fyj1fr0h7v90y\">本地存储值的形式：</p>\n<code-example>\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition as value; else elseBlock\"&gt;{{value}}&lt;/div&gt;\n&lt;ng-template #elseBlock&gt;Content to render when value is null.&lt;/ng-template&gt;\n</code-example>\n\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9eb5w2znpvmwg2pyoh15f35hj\"><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令通常用于根据条件显示内联模板，就像下面的例子展示的一样。默认的 <code>else</code> 模板是空白的。</p>\n<code-example path=\"common/ngIf/ts/module.ts\" region=\"NgIfSimple\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-simple',\n  template: `\n    &lt;button (click)=\"show = !show\"&gt;{{ show ? 'hide' : 'show' }}&lt;/button&gt;\n    show = {{ show }}\n    &lt;br /&gt;\n    &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"show\"&gt;Text to show&lt;/div&gt;\n  `,\n})\nexport class NgIfSimple {\n  show = true;\n}\n\n</code-example>\n<h3 id=\"showing-an-alternative-template-using-else\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5sncnn5srqrzi7xn1rpzl8ntf\">使用 <code>else</code> 显示替代模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#showing-an-alternative-template-using-else\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cz4wx05hui617gz9htdyjm83f\">要在 <code>expression</code> 计算为 false 时显示一个模板，请使用如下所示的 <code>else</code> 模板绑定。<code>else</code>\n绑定指向一个带有 <code>#elseBlock</code> 标签的\n<code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>。该模板可以定义在组件视图中的任何地方，但通常放在 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 的紧后方，以提高可读性。</p>\n<code-example path=\"common/ngIf/ts/module.ts\" region=\"NgIfElse\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-else',\n  template: `\n    &lt;button (click)=\"show = !show\"&gt;{{ show ? 'hide' : 'show' }}&lt;/button&gt;\n    show = {{ show }}\n    &lt;br /&gt;\n    &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"show; else elseBlock\"&gt;Text to show&lt;/div&gt;\n    &lt;ng-template #elseBlock&gt;Alternate text while primary text is hidden&lt;/ng-template&gt;\n  `,\n})\nexport class NgIfElse {\n  show = true;\n}\n\n</code-example>\n<h3 id=\"using-an-external-then-template\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"esj9dlm771qufkhgijnln2135\">使用内部 <code>then</code> 模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#using-an-external-then-template\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dk9m0i2lu2v53zmvkqmtmulf7\">在前面的例子中，then 子句的模板是内联的，也就是作为 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>\n指令所在标签的内容。你还可以通过引用一个带标签的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>\n元素来指定一个在外部定义的模板。这样就可以让你在运行时更改模板，就像下面的例子所演示的。</p>\n<code-example path=\"common/ngIf/ts/module.ts\" region=\"NgIfThenElse\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-then-else',\n  template: `\n    &lt;button (click)=\"show = !show\"&gt;{{ show ? 'hide' : 'show' }}&lt;/button&gt;\n    &lt;button (click)=\"switchPrimary()\"&gt;Switch Primary&lt;/button&gt;\n    show = {{ show }}\n    &lt;br /&gt;\n    &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"show; then thenBlock; else elseBlock\"&gt;this is ignored&lt;/div&gt;\n    &lt;ng-template #primaryBlock&gt;Primary text to show&lt;/ng-template&gt;\n    &lt;ng-template #secondaryBlock&gt;Secondary text to show&lt;/ng-template&gt;\n    &lt;ng-template #elseBlock&gt;Alternate text while primary text is hidden&lt;/ng-template&gt;\n  `,\n})\nexport class NgIfThenElse implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  thenBlock: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt; | null = null;\n  show = true;\n\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('primaryBlock', {<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>: true}) primaryBlock: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt; | null = null;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('secondaryBlock', {<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>: true}) secondaryBlock: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt; | null = null;\n\n  switchPrimary() {\n    this.thenBlock = this.thenBlock === this.primaryBlock ? this.secondaryBlock : this.primaryBlock;\n  }\n\n  ngOnInit() {\n    this.thenBlock = this.primaryBlock;\n  }\n}\n\n</code-example>\n<h3 id=\"storing-a-conditional-result-in-a-variable\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bkme6pu6e1e4q4n737v4ocby4\">把条件结果保存在变量中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#storing-a-conditional-result-in-a-variable\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5v40sictd85isnhp90fg37fl8\">比如你想显示同一个对象中的一组属性。如果你在等待异步数据，此对象可能是未定义的。这时候，你可以使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>，并且把此条件结果保存在一个局部变量中，如下例所示。</p>\n<code-example path=\"common/ngIf/ts/module.ts\" region=\"NgIfAs\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-as',\n  template: `\n    &lt;button (click)=\"nextUser()\"&gt;Next User&lt;/button&gt;\n    &lt;br /&gt;\n    &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"userObservable | async as user; else loading\"&gt;\n      Hello {{ user.last }}, {{ user.first }}!\n    &lt;/div&gt;\n    &lt;ng-template #loading let-user&gt;Waiting... (user is {{ user | json }})&lt;/ng-template&gt;\n  `,\n})\nexport class NgIfAs {\n  userObservable = new Subject&lt;{first: string; last: string}&gt;();\n  first = ['John', 'Mike', 'Mary', 'Bob'];\n  firstIndex = 0;\n  last = ['Smith', 'Novotny', 'Angular'];\n  lastIndex = 0;\n\n  nextUser() {\n    let first = this.first[this.firstIndex++];\n    if (this.firstIndex &gt;= this.first.length) this.firstIndex = 0;\n    let last = this.last[this.lastIndex++];\n    if (this.lastIndex &gt;= this.last.length) this.lastIndex = 0;\n    this.userObservable.next({first, last});\n  }\n}\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3qlu9zwvll4tijt38t5vfv39n\">此代码仅使用一个\n<code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>，因此只创建一个订阅。条件语句将\n<code>userStream|async</code>的结果存储在本地变量\n<code>user</code>中。然后可以重复绑定本地\n<code>user</code>。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7c6b4q0nu4ako4g0e98nwheoe\">只有当 <code>userStream</code> 返回了值的时候，才会有条件的显示此数据。所以你不用使用安全导航操作符（<code>?.</code>）\n来在访问属性时避免空值。你可以在等待数据时显示一个备用模板。</p>\n<h3 id=\"shorthand-syntax\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dsttpebkgvt8ur5ks6ndjbdsy\">简写语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#shorthand-syntax\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3tqaxpkf77dwg69vz7hwbifz\"><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 的简写语法会把 \"then\" 和 \"else\" 子句分别扩展成两个独立的模板。比如，考虑下列简写语句，它要在等待数据加载期间显示一个加载中页面。</p>\n<code-example>\n&lt;div class=\"hero-list\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroes else loading\"&gt;\n ...\n&lt;/div&gt;\n\n&lt;ng-template #loading&gt;\n &lt;div&gt;Loading...&lt;/div&gt;\n&lt;/ng-template&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95w2yl8j5kaz617birecplu2r\">你可以看到，\"else\" 子句引用了带有 <code>#loading</code> 标签的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>，而 \"then\"\n子句的模板是作为宿主元素的内容提供的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"agug9cofphy43vjo1lqzqa812\">不过，当 Angular 扩展此简写语法的时候，它创建了另一个带有 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code>ngIfElse</code> 指令的\n<code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>。此宿主元素包含的 \"then\" 子句的模板变成了无标签的  <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 的内容。</p>\n<code-example>\n&lt;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"heroes\" [ngIfElse]=\"loading\"&gt;\n &lt;div class=\"hero-list\"&gt;\n  ...\n &lt;/div&gt;\n&lt;/ng-template&gt;\n\n&lt;ng-template #loading&gt;\n &lt;div&gt;Loading...&lt;/div&gt;\n&lt;/ng-template&gt;\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xd3yq345cx7oxknhnx1pkxdy\"> 隐式模板对象的存在，影响了结构型指令的嵌套规则。欲知详情，参见<a href=\"https://angular.io/guide/structural-directives#one-per-element\">结构型指令</a>。</p>\n\n  </section>\n\n\n<section class=\"static-properties\">\n  <a id=\"properties\"></a>\n  <h2 id=\"static-properties\">静态属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#static-properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>属性</th>\n        <th>说明</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"static-property\">\n        <td>\n          <a id=\"ngTemplateGuard_ngIf\"></a>\n          <code class=\"\"><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> <span class=\"member-name\">ngTemplateGuard_ngIf</span>: 'binding'</code>\n        </td>\n        <td>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"43rgd6f1xp4njb1mds0n8ygbx\">为绑定到 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 输入属性上的模板确保正确的类型。</p>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hp5nwz9ls1eo8de8q8hlzpj4\">该静态字段的存在向 Ivy 模板类型检查编译器发出信号，即当 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 结构化指令渲染其模板时，应以某种方式窄化 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>。对于 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>，绑定表达式本身用于窄化其类型，这允许 TypeScript 的 strictNullChecks 功能与 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 一起使用。</p>\n\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n\n<section class=\"static-methods\">\n  <h2 id=\"static-methods\">静态方法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#static-methods\"><i class=\"material-icons\">link</i></a></h2>\n  <a id=\"ngTemplateContextGuard\"></a>\n<table class=\"is-full-width method-table static-method\">\n  <thead><tr><th>\n    <div class=\"with-github-links\">\n      <h3 id=\"ngtemplatecontextguard\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"enaak35tsn24oxf3ipl3ut2rv\">ngTemplateContextGuard()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#ngtemplatecontextguard\"><i class=\"material-icons\">link</i></a></h3>\n      <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/common/src/directives/ng_if.ts#L244-L256\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n    </div>\n  </th></tr></thead>\n  <tbody>\n    <tr>\n      <td class=\"short-description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bybc457i4ca12n11ri04v90jq\">为 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 将要渲染的模板确保正确的上下文类型。</p>\n</td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> <span class=\"member-name\">ngTemplateContextGuard</span>&lt;T&gt;(dir: <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>&lt;T&gt;, ctx: any): ctx is <a href=\"api/common/NgIfContext\" class=\"code-anchor\">NgIfContext</a>&lt;Exclude&lt;T, false | 0 | '' | null | undefined&gt;&gt;</code-example>\n\n  <h6 class=\"no-anchor\" id=\"parameters\">参数</h6>\n  <table class=\"is-full-width list-table parameters-table static-method-overload-parameters\">\n  <tbody>\n    <tr class=\"static-method-overload-parameter\">\n      <td class=\"param-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kq1jd3kj9snfrzs3arnbaoai\"><a id=\"\"></a>\n        <code>dir</code></td>\n      <td class=\"param-type\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>&lt;T&gt;</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n    <tr class=\"static-method-overload-parameter\">\n      <td class=\"param-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9bsh77wh971l5ae2ncru032q2\"><a id=\"\"></a>\n        <code>ctx</code></td>\n      <td class=\"param-type\"><code>any</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"returns\">返回值</h6>\n  <p><code>ctx is <a href=\"api/common/NgIfContext\" class=\"code-anchor\">NgIfContext</a>&lt;Exclude&lt;T, false | 0 | '' | null | undefined&gt;&gt;</code></p>\n\n</div>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3vwzg7yvqfp83mpn14t2ho9pw\">该方法用于向 Ivy 模板类型检查编译器发出信号，即 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 结构化指令会使用特定的上下文类型渲染其模板。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n</section>\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/animations/state\n - api/common\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgForOf\n - api/common/NgIfContext\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/NgZone\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/core/forwardRef\n - api/core/ng-container\n - api/core/ng-template\n - api/forms/FormControlName\n - api/forms/FormGroupDirective\n - api/forms/FormGroupName\n - api/forms/NgModelGroup\n - errors/NG0910\n - extended-diagnostics/NG8103\n - guide/ajs-quick-reference\n - guide/animations\n - guide/animations-attach-to-html-template\n - guide/aot-compiler\n - guide/architecture-components\n - guide/architecture-services\n - guide/built-in-directives\n - guide/cheatsheet\n - guide/content-projection\n - guide/control_flow\n - guide/dependency-injection-in-action\n - guide/docs-style-guide\n - guide/dynamic-form\n - guide/feature-modules\n - guide/form-validation\n - guide/frequent-ngmodules\n - guide/glossary\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/roadmap\n - guide/router-tutorial-toh\n - guide/sharing-ngmodules\n - guide/standalone-components\n - guide/standalone-migration\n - guide/static-query-migration\n - guide/structural-directives\n - guide/styleguide\n - guide/template-reference-variables\n - guide/template-typecheck\n - guide/testing-components-scenarios\n - guide/transition-and-triggers\n - guide/update-to-version-17\n - guide/upgrade\n - guide/what-is-angular\n - presskit\n - start\n - start/start-data\n - start/start-routing\n - tutorial/tour-of-heroes/toh-pt2\n - tutorial/tour-of-heroes/toh-pt3\n - tutorial/tour-of-heroes/toh-pt4\n - tutorial/tour-of-heroes/toh-pt5\n - tutorial/tour-of-heroes/toh-pt6\n-->\n<!-- links from this doc:\n - /api\n - api/common\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/NgIf#description\n - api/common/NgIf#instance-properties\n - api/common/NgIf#ngif\n - api/common/NgIf#ngtemplatecontextguard\n - api/common/NgIf#selectors\n - api/common/NgIf#shorthand-syntax\n - api/common/NgIf#showing-an-alternative-template-using-else\n - api/common/NgIf#static-methods\n - api/common/NgIf#static-properties\n - api/common/NgIf#storing-a-conditional-result-in-a-variable\n - api/common/NgIf#using-an-external-then-template\n - api/common/NgIf#导出自\n - api/common/NgIfContext\n - api/core/Component\n - api/core/Input\n - api/core/OnInit\n - api/core/TemplateRef\n - api/core/ViewChild\n - api/core/ng-template\n - api/upgrade/static\n - guide/structural-directives#asterisk\n - guide/structural-directives#one-per-element\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/common/src/directives/ng_if.ts#L17-L257\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/common/src/directives/ng_if.ts#L244-L256\n-->"}
{"id":"api/upgrade/static/downgradeModule","title":"downgradeModule","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/upgrade\", \"name\": \"@angular/upgrade\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/upgrade/static\", \"name\": \"@angular/upgrade/static\" } },\n            { \"@type\": \"ListItem\", \"position\": 4, \"item\": { \"@id\": \"https://angular.io/api/upgrade/static/downgradeModule\", \"name\": \"downgradeModule\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/upgrade\">@angular/upgrade</a> &gt; <a href=\"api/upgrade/static\">@angular/upgrade/static</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/upgrade/static/src/downgrade_module.ts#L259-L447\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"downgrademodule\">downgradeModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#downgrademodule\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n  </header>\n  \n\n  <div class=\"api-body\">\n  <section class=\"short-description\">\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"99vydwrvcuu9wwk452ha3v0ka\">一個用於建立 AngularJS 模組的幫助器函式，當需要實例化 <a href=\"api/upgrade/static/downgradeComponent\">降級元件</a>\n時，可以『按需』（可能是延遲）引導 Angular 模組。</p>\n\n    <p><a href=\"api/upgrade/static/downgradeModule#description\">檢視更多...</a></p>\n  </section>\n<div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <span class=\"member-name\"><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></span>(moduleOrBootstrapFn: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;T&gt; | ((extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; Promise&lt;<a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a>&lt;T&gt;&gt;)): string</code-example>\n\n  <h6 class=\"no-anchor\" id=\"parameters\">引數</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tnbbdf7m18y9ceqf5rrg3mt\"><a id=\"\"></a>\n        <code>moduleOrBootstrapFn</code></td>\n      <td class=\"param-type\"><code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;T&gt; | ((extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; Promise&lt;<a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a>&lt;T&gt;&gt;)</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"returns\">回傳值</h6>\n  <p><code>string</code></p>\n\n</div>\n    <hr class=\"hr-margin fullwidth\">\n  <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <span class=\"member-name\"><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></span>(moduleOrBootstrapFn: <a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a>&lt;T&gt;): string</code-example>\n  <div class=\"deprecated\">\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"77tgdxy7q40neibphpmihtsa3\">不推薦將 <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code> 作為 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></code> 函式引數傳遞，請改為傳遞 NgModule 類別引用。</p>\n\n  </div>\n\n  <h6 class=\"no-anchor\" id=\"parameters\">引數</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4tnbbdf7m18y9ceqf5rrg3mt\"><a id=\"\"></a>\n        <code>moduleOrBootstrapFn</code></td>\n      <td class=\"param-type\"><code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory&lt;T&gt;</a></code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"returns\">回傳值</h6>\n  <p><code>string</code></p>\n\n</div>\n    \n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a84dp7aa2imgbhx20jqr5wxym\"><em>支援 AOT 編譯的混合升級應用程式的<a href=\"api?query=upgrade/static\">upgrade/靜態</a>函式庫的一部分。</em></p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9narjbecamlppabewd1ufahs\">它允許延遲載入/引導混合應用程式的 Angular 部分，而無需預先支付成本。例如，你可以有一個 AngularJS\n應用程式，將 Angular 用於特定路由，並且只有在/當用戶訪問這些路由之一時才實例化 Angular 模組。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"arrfalzt2hn37c9pm9siy6kn\">Angular 模組將被引導一次（第一次請求時），並且從那時起將使用相同的引用。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2eotoih224atwbbksba5e7liv\"><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 需要 <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>、<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 類別或函式：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79dxpgic1sbavs9qdjyv2j7ab\"><code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>：如果傳入一個\n<code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>，將使用它來實例化一個模組，使用\n<code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code>的&lt;...&gt; \n<div id=\"s_4\">\n <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>類別：如果傳入一個 NgModule 類別，將使用它來實例化一個模組，使用\n <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code>的\n <code>PlatformRef#bootstrapModule</code>。\n</div> \n<div id=\"s_5\">\n 進一步的訊息可以在\n <a href=\"api/upgrade/static/downgradeModule#usage-notes\">用法說明...</a>中找到。\n</div> \n<div id=\"s_6\">\n 你可以使用\n <code><a href=\"api/core/NgZone#run\">NgZone#run</a></code>來手動觸發 Angular 中的變更檢測執行。\n</div> \n<div id=\"s_7\">\n 當使用\n <code><a href=\"api/core/PlatformRef#bootstrapmodule\">PlatformRef#bootstrapmodule</a></code>或\n <code><a href=\"api/core/PlatformRef#bootstrapmodulefactory\">PlatformRef#bootstrapmodulefactory</a></code>來啟動降級模組時，每個模組都被視為一個\"根\"模組。因此，對於在\"根\"中提供的每個可注入物件，將建立一個新實例（透過\n <code>Injectable#providedIn</code>進行提供）。如果這不是你的意圖，你可以有一個共享模組（充當\"根\"模組），並使用該模組的注入器建立所有降級模組：\n</div> \n<div id=\"s_8\">\n 支援從 AngularJS 到 Angular 的升級路徑，允許在同一個應用程式中使用兩個系統的元件和服務。\n</div> \n<div id=\"s_9\">\n 為 AngularJS 到 Angular 升級路徑提供測試函式。\n</div> \n<div id=\"s_10\">\n 建立一個包裝並暴露 AngularJS 服務的 Angular 根注入器提供者，以便可以將其注入到 Angular 上下文中。參見下面的\n <a href=\"api/upgrade/static/UpgradeModule#upgrading-an-angular-1-service\"><code>UpgradeModule#upgrading-an-angular-1-service</code></a>。\n</div> \n<div id=\"s_11\">\n 進一步的訊息可以在\n <a href=\"api/upgrade/static/UpgradeModule#usage-notes\">用法說明...</a>中找到。\n</div> \n<div id=\"s_12\">\n <a id=\"$injector\"></a> \n <code class=\"\"><span class=\"member-name\">$injector</span>: any</code>\n</div> \n<div id=\"s_13\">\n Angular 注入器 *\n</div> \n<div id=\"s_14\">\n 升級應用程式的啟動區域\n</div> \n<div id=\"s_15\">\n <code>any</code>：由\n <a href=\"https://docs.angularjs.org/api/ng/function/angular.bootstrap\">angular.bootstrap()</a>回傳的值。\n</div> \n<div id=\"s_16\">\n 還請參見下面的\n <a href=\"api/upgrade/static/UpgradeModule#examples\"><code>UpgradeModule#examples</code></a>。\n</div> \n<div id=\"s_17\">\n 啟動\n <br> 此類別的執行時實例包含一個\n <code>UpgradeModule#bootstrap</code>方法，用於將頂層 AngularJS 模組引導到混合升級應用程式中的元素上。\n</div> \n<div id=\"s_18\">\n 它還包含用於訪問\n <code>UpgradeModule#injector</code>、啟動\n <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code>和\n <a href=\"https://docs.angularjs.org/api/auto/service/$injector\">AngularJS $injector</a>的屬性。\n</div> \n<div id=\"s_19\">\n 從 AngularJS 元件指令建立 Angular 元件（請參見\n <a href=\"api/upgrade/UpgradeAdapter#upgradeNg1Component\"><code>UpgradeAdapter#upgradeNg1Component</code></a>）。\n</div></li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bki9g4tonrpsvrnhufcgszkkz\"><code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>類別：如果你傳遞一個 NgModule 類別，它將用於使用 \n<code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code> 的 \n<a href=\"api/core/PlatformRef#bootstrapModule\"><code>PlatformRef#bootstrapModule</code></a> 實例化一個模組。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a0k77zy5x1i0qebnx39ure6jc\"><code>Function</code>：如果你傳遞了一個函式，它應該會回傳一個解析為 <code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code> 的\nPromise。使用額外的 <a href=\"api/core/StaticProvider\">Providers</a> 陣列來呼叫該函式，這些陣列可以從回傳的\n<code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code> 的 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 中獲得。</li>\n</ul>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"b52li5tv1ro08ng8u43oyjszu\"><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 會回傳建立的 AngularJS 套件裝器模組的名稱。你可以用它在主 AngularJS\n模組中宣告依賴項。</p>\n<code-example path=\"upgrade/static/ts/lite/module.ts\" region=\"basic-how-to\">\nimport {<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>} from '@angular/platform-browser-dynamic';\nimport {<a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>, <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>, <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a>} from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\n\n// The function that will bootstrap the Angular module (when/if necessary).\n// (This would be omitted if we provided an `<a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a>` directly.)\nconst ng2BootstrapFn = (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt;\n  <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>(extraProviders).bootstrapModule(MyLazyAngularModule);\n\n// This AngularJS module represents the AngularJS pieces of the application.\nconst myMainAngularJsModule = angular.module('myMainAngularJsModule', [\n  // We declare a dependency on the \"downgraded\" Angular module.\n  <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(ng2BootstrapFn),\n  // or\n  // <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(MyLazyAngularModuleFactory)\n]);\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5k9nqu3ypk1sop0txzaf89cpd\">有關如何使用 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 的更多詳細訊息，請參閱<a href=\"guide/upgrade-performance\">效能升級</a>。</p>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8as5vunebzszy1bptno7s6wz9\">更多訊息請檢視\n<a href=\"api/upgrade/static/downgradeModule#usage-notes\">使用說明...</a></p>\n</section>\n\n\n<section class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4g4qwubz4gg1iyzo9tehl99jp\">除了 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>，你可以像往常一樣使用其餘的 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code>\n幫助器來建立混合應用程式。請注意，在降級的模組被引導（即透過實例化降級元件）之前，Angular\n部分（例如降級的服務）將不可用。</p>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ew93l2t4e6usjci3m1dw02xxs\">你不能在同一個混合應用程式中使用 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 和 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>。<br>使用兩者之一。</p>\n</div>\n<h3 id=\"differences-with-upgrademodule\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"avkt0xcyt66yrkr1vhyvxtiij\">與 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 的區別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#differences-with-upgrademodule\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"atednkc7qzwkowvexgoovlluk\">除了它們不同的 API 之外，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 和 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>\n之間還有兩個重要的內部區別會影響混合應用程式的行為：</p>\n<ol>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3oll7hqpqbcfr1p5u2ejzv7qo\">與 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 不同，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 不會引導 <a href=\"api/core/NgZone\">Angular zone</a> 中的主\nAngularJS 模組。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2d97o1m4q85c5gxqgbwhizrmm\">與 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 不同，當檢測到應用程式的 Angular 部分發生更改時，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code>\n不會自動執行<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\">$digest()</a>。</li>\n</ol>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5xqi4c8jkywtcgddd47ntjs4q\">這意味著使用 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>\n的應用程式將更頻繁地執行變更檢測，以確保這兩個框架都得到有關可能的更改的正確通知。這將不可避免地導致比必要的變更檢測執行更多。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eciii5fohrxlewr239zuqsstb\">另一方面，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code>\n不會嘗試將兩個變更檢測系統緊密聯絡起來，而是將顯式變更檢測限制僅在它知道有必要的情況下執行（例如，當降級元件的輸入更改時）。這提高了效能，尤其是在需要大量變更檢測的應用程式中，但讓開發人員根據需要手動通知每個框架。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bdkf7y1ergqnwc64ulrzk6xop\">有關區別及其含義的更詳細討論，請參閱<a href=\"guide/upgrade-performance\">升級以提高效能</a>。</p>\n<div class=\"alert is-helpful\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9t170c5oqkmjty4bhuiaxbjos\">你可以用<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply\">scope.$apply(…)</a>或<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\">$rootScope.$digest()</a>手動觸發\nAngularJS 中執行的變更檢測。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bafc3f0oe58vatyh8tbqqd19c\">你可以使用 \n<a href=\"api/core/NgZone#run\"><code>NgZone#run</code></a> 在 Angular 中手動觸發變更檢測執行。</p>\n</div>\n<h3 id=\"downgrading-multiple-modules\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3pk51nmmelj99u4lj404opsyu\">降級多個模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#downgrading-multiple-modules\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cqb2a0mjk7hw5n4w2czpn1yct\">可以降級多個模組並將它們包含在 AngularJS\n應用程式中。在這種情況下，當需要實例化關聯的降級元件或可注入時，每個降級的模組都將被引導。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"az3r0cy9bpmqhoztb39quhoyr\">降級多個模組時要記住的事情：</p>\n<ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"exynigxcvzwvx0ss866s8swsm\">每個降級的元件/可注入物都需要與降級的模組顯式關聯。有關更多詳細訊息，請參閱\n<code><a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>()</code> 和 <code><a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a>()</code>。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"698nb16350erjg1bwiuz845o1\">如果你希望在所有降級模組之間共享某些注入器，可以在建立 <code><a href=\"api/core/PlatformRef\" class=\"code-anchor\">PlatformRef</a></code> 時將它們作為\n<code><a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a></code> 提供（例如透過 <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code> 或 <code><a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a></code>）。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2vjtkfbfqwa1qe0v47wy7tzeb\">當使用 \n<a href=\"api/core/PlatformRef#bootstrapmodule\"><code>PlatformRef#bootstrapmodule</code></a> 或 \n<a href=\"api/core/PlatformRef#bootstrapmodulefactory\"><code>PlatformRef#bootstrapmodulefactory</code></a> 引導降級模組時，每個模組都被視為『根』模組。因此，對於在\n<code>\"root\"</code>中提供的每個可注入內容，都會建立一個新實例（透過 \n<a href=\"api/core/Injectable#providedIn\"><code>Injectable#providedIn</code></a>）。 如果這不是你的意圖，你可以擁有一個共享模組（將充當『根』模組），並使用該模組的注入器建立所有降級模組：</p>\n<code-example path=\"upgrade/static/ts/lite-multi-shared/module.ts\" region=\"shared-root-module\">\nlet rootInjectorPromise: Promise&lt;<a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>&gt; | null = null;\nconst getRootInjector = (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; {\n  if (!rootInjectorPromise) {\n    rootInjectorPromise = <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>(extraProviders)\n      .bootstrapModule(Ng2RootModule)\n      .then((moduleRef) =&gt; moduleRef.injector);\n  }\n  return rootInjectorPromise;\n};\n\nconst downgradedNg2AModule = <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(<a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; {\n  const rootInjector = await getRootInjector(extraProviders);\n  const moduleAFactory = await rootInjector.get(<a href=\"api/core/Compiler\" class=\"code-anchor\">Compiler</a>).compileModuleAsync(Ng2AModule);\n  return moduleAFactory.create(rootInjector);\n});\nconst downgradedNg2BModule = <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(<a href=\"api/platform-browser/animations/async\" class=\"code-anchor\">async</a> (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; {\n  const rootInjector = await getRootInjector(extraProviders);\n  const moduleBFactory = await rootInjector.get(<a href=\"api/core/Compiler\" class=\"code-anchor\">Compiler</a>).compileModuleAsync(Ng2BModule);\n  return moduleBFactory.create(rootInjector);\n});\n/* . . . */\nconst appModule = angular\n  .module('exampleAppModule', [downgradedNg2AModule, downgradedNg2BModule, downgradedNg2CModule])\n\n</code-example>\n</li>\n</ul>\n\n</section></div>\n</article>\n\n<!-- links to this doc:\n - api/upgrade/static\n - api/upgrade/static/downgradeComponent\n - api/upgrade/static/downgradeInjectable\n - api/upgrade/static/testing/createAngularJSTestingModule\n - api/upgrade/static/testing/createAngularTestingModule\n - guide/deprecations\n - guide/upgrade-performance\n-->\n<!-- links from this doc:\n - /api\n - api/core/Compiler\n - api/core/Injectable#providedIn\n - api/core/Injector\n - api/core/NgModule\n - api/core/NgModuleFactory\n - api/core/NgModuleRef\n - api/core/NgZone\n - api/core/NgZone#run\n - api/core/PlatformRef\n - api/core/PlatformRef#bootstrapModule\n - api/core/PlatformRef#bootstrapModuleFactory\n - api/core/PlatformRef#bootstrapmodule\n - api/core/PlatformRef#bootstrapmodulefactory\n - api/core/StaticProvider\n - api/core/Type\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/animations/async\n - api/platform-browser/platformBrowser\n - api/upgrade\n - api/upgrade/static\n - api/upgrade/static/UpgradeComponent\n - api/upgrade/static/UpgradeModule\n - api/upgrade/static/downgradeComponent\n - api/upgrade/static/downgradeInjectable\n - api/upgrade/static/downgradeModule#description\n - api/upgrade/static/downgradeModule#differences-with-upgrademodule\n - api/upgrade/static/downgradeModule#downgrademodule\n - api/upgrade/static/downgradeModule#downgrading-multiple-modules\n - api/upgrade/static/downgradeModule#usage-notes\n - api?query=upgrade/static\n - guide/upgrade-performance\n - https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply\n - https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/upgrade/static/src/downgrade_module.ts#L259-L447\n-->"}
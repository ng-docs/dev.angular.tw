{"id":"api/upgrade/static/testing/createAngularTestingModule","title":"createAngularTestingModule","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/upgrade\", \"name\": \"@angular/upgrade\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/upgrade/static/testing\", \"name\": \"@angular/upgrade/static/testing\" } },\n            { \"@type\": \"ListItem\", \"position\": 4, \"item\": { \"@id\": \"https://angular.io/api/upgrade/static/testing/createAngularTestingModule\", \"name\": \"createAngularTestingModule\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/upgrade\">@angular/upgrade</a> &gt; <a href=\"api/upgrade/static/testing\">@angular/upgrade/static/testing</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/upgrade/static/testing/src/create_angular_testing_module.ts#L27-L103\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"createangulartestingmodule\">createAngularTestingModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/testing/createAngularTestingModule#createangulartestingmodule\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n  </header>\n  \n\n  <div class=\"api-body\">\n  <section class=\"short-description\">\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"17npzax9ce1h29apby0f2jeao\">單元測試依賴於升級後的 AngularJS 服務的 Angular 服務時要使用的幫助器函式。</p>\n\n    <p><a href=\"api/upgrade/static/testing/createAngularTestingModule#description\">檢視更多...</a></p>\n  </section>\n\n  <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <span class=\"member-name\"><a href=\"api/upgrade/static/testing/createAngularTestingModule\" class=\"code-anchor\">createAngularTestingModule</a></span>(angularJSModules: string[], strictDi?: boolean): <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;any&gt;</code-example>\n\n  <h6 class=\"no-anchor\" id=\"parameters\">引數</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8epuw34ob2lzw2z5fteould6u\"><a id=\"\"></a>\n        <code>angularJSModules</code></td>\n      <td class=\"param-type\"><code>string[]</code></td>\n      <td class=\"param-description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6hvwjzqvlg0uol7prwealupqi\">要包含在設定中的 AngularJS 模組名稱的集合。</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2rw2vbeq62h0nz507awwpet0b\"><a id=\"\"></a>\n        <code>strictDi</code></td>\n      <td class=\"param-type\"><code>boolean</code></td>\n      <td class=\"param-description\">\n        <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bf9jga1mzej6v0c9i0uo76kez\">可選值。預設值為 <code>undefined</code>。</p>\n\n        <p>可選值。預設值為 <code>undefined</code>。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"returns\">回傳值</h6>\n  <p><code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;any&gt;</code></p>\n\n</div>\n\n\n\n<section class=\"description\">\n  <h2 id=\"description\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/testing/createAngularTestingModule#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bxug1xt186lpos9y2dkj6wt9g\">此函式回傳一個 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾類，該類別被設定為連線 Angular 和 AngularJS\n注入器，而無需實際引導混合應用程式。這使得單元測試服務變得更簡單、更快。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4z9ybew9igutbcvvfd4pnwz35\">設定 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 時，使用回傳的類作為『匯入』。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cypxiqu2jac3vxdic2cv83sgu\">在以下程式碼片段中，我們使用兩個匯入設定 TestBed。<code>Ng2AppModule</code> 是我們混合應用程式的 Angular\n部分，而 <code>ng1AppModule</code> 是 AngularJS 部分。</p>\n<code-example path=\"upgrade/static/ts/full/module.spec.ts\" region=\"angular-setup\">\nimport {<a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>} from '@angular/core/testing';\nimport {\n  <a href=\"api/upgrade/static/testing/createAngularJSTestingModule\" class=\"code-anchor\">createAngularJSTestingModule</a>,\n  <a href=\"api/upgrade/static/testing/createAngularTestingModule\" class=\"code-anchor\">createAngularTestingModule</a>,\n} from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>/testing';\n\nimport {HeroesService, ng1AppModule, Ng2AppModule} from './module';\n\nconst {module, inject} = (window as any).angular.mock;\n\n  /* . . . */\n  beforeEach(() =&gt; {\n    TestBed.configureTestingModule({\n      imports: [<a href=\"api/upgrade/static/testing/createAngularTestingModule\" class=\"code-anchor\">createAngularTestingModule</a>([ng1AppModule.name]), Ng2AppModule],\n    });\n  });\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1l4z0jcrv1cpzc9ehrktaf0bw\">完成後，我們可以像往常一樣透過 Angular <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 獲取服務。作為（或依賴於）升級後的 AngularJS\n服務的服務，將根據 AngularJS <code>$injector</code> 的需要實例化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u2hjzc5wrnkx3l4d1w1mxd79\">在以下程式碼片段中，<code>HeroesService</code> 是一項依賴於 AngularJS 服務 <code>titleCase</code> 的 Angular 服務。</p>\n<code-example path=\"upgrade/static/ts/full/module.spec.ts\" region=\"angular-spec\">\nit('should have access to the HeroesService', () =&gt; {\n  const heroesService = TestBed.inject(HeroesService);\n  expect(heroesService).toBeDefined();\n});\n\n</code-example>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lluc3xoz8fnua4za4yrtzlpd\">此幫助器用於測試服務而不是元件。對於元件測試，你仍然必須引導混合應用程式。有關更多訊息，請參閱\n<code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 或 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></code>。</p>\n</div>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9gj1w2ywjdj5lplige0wp691\">生成的設定不會將 AngularJS 摘要連線到 Zone 鉤子。測試作者有責任根據需要呼叫 <code>$rootScope.$apply</code>\n，以觸發來自 Angular 的非同步事件的 AngularJS 處理程式。</p>\n</div>\n<div class=\"alert is-important\">\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"98y04s1k1yodu14d11z2cxynq\">幫助器設定全域變數來儲存共享的 Angular 和 AngularJS 注入器。</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"crt8skmkn8c4zcx155jn2ljf1\">每個規範只調用一次此幫助器。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"68bwj509hjnhid1m4vo9w8kxh\">不要在與 <code><a href=\"api/upgrade/static/testing/createAngularJSTestingModule\" class=\"code-anchor\">createAngularJSTestingModule</a></code> <code><a href=\"api/upgrade/static/testing/createAngularTestingModule\" class=\"code-anchor\">createAngularTestingModule</a></code></li>\n</ul>\n</div>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bceg3gtbfsnfkha53pmrhrthn\">這是使用 <code><a href=\"api/upgrade/static/testing/createAngularTestingModule\" class=\"code-anchor\">createAngularTestingModule</a></code> 和 <code><a href=\"api/upgrade/static/testing/createAngularJSTestingModule\" class=\"code-anchor\">createAngularJSTestingModule</a></code>\n的範例應用程式及其單元測試。</p>\n<code-tabs>\n <code-pane header=\"module.spec.ts\" path=\"upgrade/static/ts/full/module.spec.ts\">\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {<a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>} from '@angular/core/testing';\nimport {\n  <a href=\"api/upgrade/static/testing/createAngularJSTestingModule\" class=\"code-anchor\">createAngularJSTestingModule</a>,\n  <a href=\"api/upgrade/static/testing/createAngularTestingModule\" class=\"code-anchor\">createAngularTestingModule</a>,\n} from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>/testing';\n\nimport {HeroesService, ng1AppModule, Ng2AppModule} from './module';\n\nconst {module, inject} = (window as any).angular.mock;\n\ndescribe('HeroesService (from Angular)', () =&gt; {\n  beforeEach(() =&gt; {\n    TestBed.configureTestingModule({\n      imports: [<a href=\"api/upgrade/static/testing/createAngularTestingModule\" class=\"code-anchor\">createAngularTestingModule</a>([ng1AppModule.name]), Ng2AppModule],\n    });\n  });\n\n  it('should have access to the HeroesService', () =&gt; {\n    const heroesService = TestBed.inject(HeroesService);\n    expect(heroesService).toBeDefined();\n  });\n});\n\ndescribe('HeroesService (from AngularJS)', () =&gt; {\n  beforeEach(module(<a href=\"api/upgrade/static/testing/createAngularJSTestingModule\" class=\"code-anchor\">createAngularJSTestingModule</a>([Ng2AppModule])));\n  beforeEach(module(ng1AppModule.name));\n\n  it('should have access to the HeroesService', inject((heroesService: HeroesService) =&gt; {\n    expect(heroesService).toBeDefined();\n  }));\n});\n\n\n</code-pane>\n <code-pane header=\"module.ts\" path=\"upgrade/static/ts/full/module.ts\">\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>,\n  <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>,\n  <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>,\n  <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>,\n  <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>,\n  <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>,\n  <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>,\n  <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>,\n  <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>,\n} from '@angular/core';\nimport {<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>} from '@angular/platform-browser';\nimport {<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>} from '@angular/platform-browser-dynamic';\nimport {\n  <a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>,\n  <a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a>,\n  <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a>,\n  <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>,\n} from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\ndeclare var angular: ng.IAngularStatic;\n\nexport interface Hero {\n  name: string;\n  description: string;\n}\n\nexport class TextFormatter {\n  titleCase(value: string) {\n    return value.replace(/((^|\\s)[a-z])/g, (_, c) =&gt; c.toUpperCase());\n  }\n}\n\n// This Angular component will be \"downgraded\" to be used in AngularJS\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng2-heroes',\n  // This template uses the upgraded `ng1-hero` component\n  // Note that because its element is compiled by Angular we must use camelCased attribute names\n  template: `&lt;header&gt;&lt;ng-content selector=\"h1\"&gt;&lt;/ng-content&gt;&lt;/header&gt;\n    &lt;ng-content selector=\".extra\"&gt;&lt;/ng-content&gt;\n    &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n      &lt;ng1-hero [hero]=\"hero\" (onRemove)=\"removeHero.emit(hero)\"\n        &gt;&lt;strong&gt;Super Hero&lt;/strong&gt;&lt;/ng1-hero\n      &gt;\n    &lt;/div&gt;\n    &lt;button (click)=\"addHero.emit()\"&gt;Add Hero&lt;/button&gt;`,\n})\nexport class Ng2HeroesComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() heroes!: Hero[];\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() addHero = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>();\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() removeHero = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>();\n}\n\n// This Angular service will be \"downgraded\" to be used in AngularJS\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroesService {\n  heroes: Hero[] = [\n    {name: 'superman', description: 'The man of steel'},\n    {name: 'wonder woman', description: 'Princess of the Amazons'},\n    {name: 'thor', description: 'The hammer-wielding god'},\n  ];\n\n  constructor(textFormatter: TextFormatter) {\n    // Change all the hero names to title case, using the \"upgraded\" AngularJS service\n    this.heroes.forEach((hero: Hero) =&gt; (hero.name = textFormatter.titleCase(hero.name)));\n  }\n\n  addHero() {\n    this.heroes = this.heroes.concat([\n      {name: 'Kamala Khan', description: 'Epic shape-shifting healer'},\n    ]);\n  }\n\n  removeHero(hero: Hero) {\n    this.heroes = this.heroes.filter((item: Hero) =&gt; item !== hero);\n  }\n}\n\n// This Angular directive will act as an interface to the \"upgraded\" AngularJS component\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({selector: 'ng1-hero'})\nexport class Ng1HeroComponentWrapper extends <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a> {\n  // The names of the input and output properties here must match the names of the\n  // `&lt;` and `&amp;` bindings in the AngularJS component that is being wrapped\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero!: Hero;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() onRemove!: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;void&gt;;\n\n  constructor(elementRef: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>) {\n    // We must pass the name of the directive as used by AngularJS to the super\n    super('ng1Hero', elementRef, injector);\n  }\n}\n\n// This <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> represents the Angular pieces of the application\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [Ng2HeroesComponent, Ng1HeroComponentWrapper],\n  providers: [\n    HeroesService,\n    // Register an Angular provider whose value is the \"upgraded\" AngularJS service\n    {provide: TextFormatter, useFactory: (i: any) =&gt; i.get('textFormatter'), deps: ['$injector']},\n  ],\n  // We must import `<a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>` to get access to the AngularJS core services\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>],\n})\nexport class Ng2AppModule {\n  constructor(private upgrade: <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) {}\n\n  ngDoBootstrap() {\n    // We bootstrap the AngularJS app.\n    this.upgrade.bootstrap(document.body, [ng1AppModule.name]);\n  }\n}\n\n// This Angular 1 module represents the AngularJS pieces of the application\nexport const ng1AppModule: ng.IModule = angular.module('ng1AppModule', []);\n\n// This AngularJS component will be \"upgraded\" to be used in Angular\nng1AppModule.component('ng1Hero', {\n  bindings: {hero: '&lt;', onRemove: '&amp;'},\n  transclude: true,\n  template: `&lt;div class=\"title\" ng-transclude&gt;&lt;/div&gt;\n             &lt;h2&gt;{{ $ctrl.hero.name }}&lt;/h2&gt;\n             &lt;p&gt;{{ $ctrl.hero.description }}&lt;/p&gt;\n             &lt;button ng-click=\"$ctrl.onRemove()\"&gt;Remove&lt;/button&gt;`,\n});\n\n// This AngularJS service will be \"upgraded\" to be used in Angular\nng1AppModule.service('textFormatter', [TextFormatter]);\n\n// Register an AngularJS service, whose value is the \"downgraded\" Angular injectable.\nng1AppModule.factory('heroesService', <a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a>(HeroesService) as any);\n\n// This directive will act as the interface to the \"downgraded\" Angular component\nng1AppModule.directive('ng2Heroes', <a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>({component: Ng2HeroesComponent}));\n\n// This is our top level application component\nng1AppModule.component('exampleApp', {\n  // We inject the \"downgraded\" HeroesService into this AngularJS component\n  // (We don't need the `HeroesService` type for AngularJS DI - it just helps with TypeScript\n  // compilation)\n  controller: [\n    'heroesService',\n    function (heroesService: HeroesService) {\n      this.heroesService = heroesService;\n    },\n  ],\n  // This template makes use of the downgraded `ng2-heroes` component\n  // Note that because its element is compiled by AngularJS we must use kebab-case attributes\n  // for inputs and outputs\n  template: `&lt;link rel=\"stylesheet\" href=\"./styles.css\"&gt;\n          &lt;ng2-heroes [heroes]=\"$ctrl.heroesService.heroes\" (add-hero)=\"$ctrl.heroesService.addHero()\" (remove-hero)=\"$ctrl.heroesService.removeHero($event)\"&gt;\n            &lt;h1&gt;Heroes&lt;/h1&gt;\n            &lt;p class=\"extra\"&gt;There are {{ $ctrl.heroesService.heroes.length }} heroes.&lt;/p&gt;\n          &lt;/ng2-heroes&gt;`,\n});\n\n// We bootstrap the Angular module as we would do in a normal Angular app.\n// (We are using the dynamic <a href=\"api/animations/browser\" class=\"code-anchor\">browser</a> platform as this example has not been compiled AOT.)\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(Ng2AppModule);\n\n\n</code-pane>\n</code-tabs>\n</section>\n\n</div>\n</article>\n\n<!-- links to this doc:\n - api/upgrade/static/testing\n - api/upgrade/static/testing/createAngularJSTestingModule\n-->\n<!-- links from this doc:\n - /api\n - api/animations/browser\n - api/common/NgFor\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/EventEmitter\n - api/core/Injectable\n - api/core/Injector\n - api/core/Input\n - api/core/NgModule\n - api/core/Output\n - api/core/Type\n - api/core/testing/TestBed\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/upgrade\n - api/upgrade/static\n - api/upgrade/static/UpgradeComponent\n - api/upgrade/static/UpgradeModule\n - api/upgrade/static/downgradeComponent\n - api/upgrade/static/downgradeInjectable\n - api/upgrade/static/downgradeModule\n - api/upgrade/static/testing\n - api/upgrade/static/testing/createAngularJSTestingModule\n - api/upgrade/static/testing/createAngularTestingModule#createangulartestingmodule\n - api/upgrade/static/testing/createAngularTestingModule#description\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/upgrade/static/testing/src/create_angular_testing_module.ts#L27-L103\n-->"}
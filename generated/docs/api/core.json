{"id":"api/core","title":"@angular/core","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/core\", \"name\": \"@angular/core\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/core/PACKAGE.md\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n<header class=\"api-header\">\n  <h1 id=\"angularcore\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dlbdahpjd7ceav05i7qp1s59\">@angular/core<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#angularcore\"><i class=\"material-icons\">link</i></a></h1>\n  <label class=\"api-type-label package\">package</label>\n  \n  \n  \n</header>\n\n  \n\n  <div class=\"api-body\"><p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13mzhwq7xm2a06q7unc11cdza\">实现 Angular 的核心功能、低级服务和实用工具。</p>\n\n  <ul>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1kn1gj8gjlkjpay9rwalrqzsz\">为组件、视图层次结构、变更检测、渲染和事件处理定义类基础设施。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5r00hw1ov6a4eyd360ydw6s23\">定义为 Angular 构造提供元数据和上下文的装饰器。</p>\n</li>\n<li>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aaz4zqngnyudcyid25vjgooc7\">定义依赖注入（DI）、国际化（i18n）和各种测试和调试设施的基础设施。</p>\n</li>\n</ul>\n\n\n  \n\n  \n<h2 id=\"entry-points\">入口点<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#entry-points\"><i class=\"material-icons\">link</i></a></h2>\n\n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"主要\">主要<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#主要\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"primary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"fkfm2umomg24u7zlbw0i7dqq\">主要<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#primary\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core#primary-entry-point-exports\">@angular/core</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"13mzhwq7xm2a06q7unc11cdza\">实现 Angular 的核心功能、低级服务和实用工具。</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n\n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"次要\">次要<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#次要\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"secondary\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"qmb2o62wilek3owziq44q5ie\">次要<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#secondary\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/rxjs-interop\">@angular/core/rxjs-interop</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1v0x0rq2k5m92etsgnbh9uqli\">包含与在Angular的信号驱动响应系统中使用RxJS库相关的实用程序。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/testing\">@angular/core/testing</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dskt1vvqrfjvu9qk9xjo40zfl\">为测试 Angular 核心功能提供基础设施</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n\n\n<h2 id=\"primary-entry-point-exports\">主要入口点的导出<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#primary-entry-point-exports\"><i class=\"material-icons\">link</i></a></h2>\n\n  \n  \n  \n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"ngmodules\">NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#ngmodules\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ApplicationModule\">ApplicationModule</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"do56amxom47taewbwp5fsbmq\">由 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 重新导出，当你使用 CLI <code>new</code> 命令创建新应用时，它会自动包含在根 <code>AppModule</code>\n中。</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n\n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"类\">类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#类\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"classes\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dtpuzegyjmcbul5yz5jn1ham3\">类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#classes\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ApplicationInitStatus\">ApplicationInitStatus</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1l22r6kx49f6ncsp6gcjrv57o\">反映正在运行的 <a href=\"api/core/APP_INITIALIZER\"><code>APP_INITIALIZER</code></a> 函数状态的类。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ApplicationRef\">ApplicationRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7rscrgt3ut9qra3k2gfu9sjkh\">对页面上运行的 Angular 应用程序的引用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ChangeDetectorRef\">ChangeDetectorRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ccxhcf05bnm3isno2l815upyn\">Angular 各种视图的基础类，提供变更检测功能。\n变更检测树会收集要检查的所有视图。\n使用这些方法从树中添加或移除视图、初始化变更检测并显式地把这些视图标记为<em>脏的</em>，意思是它们变了、需要重新渲染。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/Compiler\" class=\"deprecated-api-item\">Compiler</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Ivy JIT mode doesn't require accessing this symbol.\nSee <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for\nadditional context.</p>\n\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eaa3ry2t4yjuspakhemj8qhn9\">本底层服务用于供 Angular 编译器在运行期间创建 <a href=\"api/core/ComponentFactory\"><code>ComponentFactory</code></a>，该工厂以后可用于创建和渲染组件实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/CompilerFactory\" class=\"deprecated-api-item\">CompilerFactory</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Ivy JIT mode doesn't require accessing this symbol.\nSee <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for\nadditional context.</p>\n\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83dh98h8d63ozmsou6k37t0ml\">用于创建编译器的工厂</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ComponentFactory\" class=\"deprecated-api-item\">ComponentFactory</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Angular no longer requires Component factories. Please use other APIs where\nComponent class can be used directly.</p>\n\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"80ind153viey4ctl1kfh2mnjj\">可用来动态创建组件的工厂的基类。<code>resolveComponentFactory()</code> 实例化给定类型的组件的工厂。使用生成的 <code>ComponentFactory.create()</code> 方法创建该类型的组件。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ComponentFactoryResolver\" class=\"deprecated-api-item\">ComponentFactoryResolver</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Angular no longer requires Component factories. Please use other APIs where\nComponent class can be used directly.</p>\n\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dt56w4i5m00n6jkhmcxeaihbk\">一个简单的注册表，它将 <code>Components</code> 映射到生成的 <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> 类，该类可用于创建组件的实例。用于获取给定组件类型的工厂，然后使用工厂的 <code>create()</code> 方法创建该类型的组件。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ComponentRef\">ComponentRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7xq3pgtmtqi5og14kki8083g\">表示由 <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> 创建的组件。提供对组件实例和相关对象的访问，并提供销毁实例的方法。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DebugElement\">DebugElement</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DebugEventListener\">DebugEventListener</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DebugNode\">DebugNode</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/DefaultIterableDiffer\" class=\"deprecated-api-item\">DefaultIterableDiffer</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> v4.0.0 - Should not be part of public API.</p>\n\n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DestroyRef\">DestroyRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6copi1qbr7cvztclsihruksnq\"><code><a href=\"api/core/DestroyRef\" class=\"code-anchor\">DestroyRef</a></code> 允许你设置回调以针对任何清理或销毁行为运行。这种销毁的范围取决于注入 <code><a href=\"api/core/DestroyRef\" class=\"code-anchor\">DestroyRef</a></code> 位置。如果将 <code><a href=\"api/core/DestroyRef\" class=\"code-anchor\">DestroyRef</a></code> 注入到组件或指令中，则回调会在该组件或指令被销毁时运行。否则回调会在相应的注入器被销毁时运行。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ElementRef\">ElementRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ofvl0ucd7p1bzbm5rhowypdh\">对视图中某个原生元素的包装器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EmbeddedViewRef\">EmbeddedViewRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezya5m49wcwkv7tlv9neqwd9j\">表示视图容器中的 Angular\n<a href=\"guide/glossary#view\">视图</a>。<a href=\"guide/glossary#view-tree\">嵌入视图</a>可以从在模板中定义它的宿主组件之外的组件中引用，也可以由\n<code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 进行独立定义。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EnvironmentInjector\">EnvironmentInjector</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76p05btad5fl02dvoxcxn8n4w\">创建一个新的 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>，它是使用 <code><a href=\"api/core/InjectorType\" class=\"code-anchor\">InjectorType</a>&lt;any&gt;</code> 的 <code>defType</code> 配置的。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ErrorHandler\">ErrorHandler</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cu0mv3x4knr6mk0e0rv7nng77\">提供用于集中式异常处理的挂钩。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EventEmitter\">EventEmitter</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4um5bnqbocn6y4xpep95sa1kv\">用在带有 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code>\n指令的组件中，以同步或异步方式发出自定义事件，并通过订阅实例来为这些事件注册处理器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/HostAttributeToken\">HostAttributeToken</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4kxeljllox86rwni65adnwlxd\">创建一个令牌，可用于注入主机节点的静态属性。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectionToken\">InjectionToken</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"tlt9lppt8ehyxan6ic3r7biq\">创建可用于 DI 提供者的令牌。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Injector\">Injector</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"76v1zbotyzuytp0oauebdehwm\">具体的注入器实现此接口。注入器配置为使用\n<a href=\"guide/dependency-injection-providers\">提供者</a>将各种类型的依赖关联到\n<a href=\"guide/dependency-injection-providers\">注入令牌</a>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableDiffers\">IterableDiffers</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c2kystubezv5pwwzmevydhcsl\">NgFor、NgClass 等使用的不同迭代策略的存储库。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueDiffers\">KeyValueDiffers</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3cd1kfbzw9zp3hyakzu7sfy27\">NgClass、NgStyle 等使用的不同映射表差异策略的存储库。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ModuleWithComponentFactories\" class=\"deprecated-api-item\">ModuleWithComponentFactories</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Ivy JIT mode doesn't require accessing this symbol.\nSee <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for\nadditional context.</p>\n\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4x1ere3xrlgqtyfshk5tcw4wj\">NgModuleFactory 和一些 ComponentFactory 的组合。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/NgModuleFactory\" class=\"deprecated-api-item\">NgModuleFactory</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\nJIT mode. See <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a>\nfor additional context. Angular provides APIs that accept NgModule classes directly (such as\n<a href=\"api/core/PlatformRef#bootstrapModule\">PlatformRef.bootstrapModule</a> and\n<a href=\"api/core/createNgModule\">createNgModule</a>), consider switching to those APIs instead of\nusing factory-based ones.</p>\n\n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgModuleRef\">NgModuleRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9dwbj6gcdsirszqhgwauxtj1c\"><code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 创建的 <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code> 的实例。提供对 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 实例和相关对象的访问。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgProbeToken\" class=\"deprecated-api-item\">NgProbeToken</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> </p>\n\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"866dj4c42c67b824y858jh4b0\">本令牌可以在 NgProbe 中注册自己的第三方组件。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgZone\">NgZone</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3xfcxr50sz036hhsc9i26qrdq\">一种用于在 Angular Zone 内部或外部执行任务的可注入服务。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PlatformRef\">PlatformRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e6k53d546no03vsr78xhw4jiy\">Angular 平台是 Angular 在网页上的入口点。每个页面只有一个平台。页面上运行的每个 Angular 应用程序所共有的服务（比如反射）都在其范围内绑定。当使用 <code>PlatformBrowser</code> 这样的平台工厂创建平台时，将隐式初始化此页面的平台；也可以通过调用 <code><a href=\"api/core/createPlatform\" class=\"code-anchor\">createPlatform</a>()</code> 函数来显式初始化此页面的平台。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Query\">Query</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9on3cmm0beepyj8oosr2iry7r\">查询元数据的基类。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/QueryList\">QueryList</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1su5ac26kswbbfp9z557jxoa3\">一个不可修改的条目列表，当应用状态变化时，Angular 会保证它是最新的。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Renderer2\">Renderer2</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9z3045etspgaglog8t2vcvfmu\">扩展此基类以实现自定义渲染器。默认情况下，Angular 会把模板渲染成 DOM。\n你可以使用自定义渲染器来拦截渲染类调用，或用于渲染一些非 DOM 的东西。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/RendererFactory2\">RendererFactory2</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"79extbns73wmnu277nrf51fza\">创建并初始化实现 <code><a href=\"api/core/Renderer2\" class=\"code-anchor\">Renderer2</a></code> 基类的自定义渲染器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Sanitizer\">Sanitizer</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"az9p5z7u6i0tcvtbvay3zl6p4\">视图使用消毒器来对潜在的危险值进行无害化处理。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SimpleChange\">SimpleChange</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2bzr70xn94e8uc524dg9ihw7j\">表示指令实例上单个属性从先前值到新值的基本变更对象。在 <a href=\"api/core/SimpleChanges\"><code>SimpleChanges</code></a> 对象中作为值传递给 <code>ngOnChanges</code> 挂钩。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TemplateRef\">TemplateRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"390t567mav8r5zcd87h64je0h\">表示一个内嵌模板，它可用于实例化内嵌的视图。\n要想根据模板实例化内嵌的视图，请使用 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 的 <code>createEmbeddedView()</code> 方法。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Testability\">Testability</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9tav3ytzyf2ocvi3lse6ewc94\">Testability 服务提供了可以从浏览器访问的测试钩子。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TestabilityRegistry\">TestabilityRegistry</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eaj7kbx4wik9vu6cq44ab09v7\"> 实例的全局注册表，用于特定元素。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TransferState\">TransferState</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3puihfha0adnfbqhsqc6si3s3\">从服务端的应用程序传到客户端的应用程序的键值存储。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Type\">Type</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6iyeypw73hgrpcpfpeoccrj09\">表示 Component 或其他对象的类型。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Version\">Version</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"86ip7rf7mv65qroe7ya2sxxmc\">表示 Angular 的版本</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewContainerRef\">ViewContainerRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c9ea663kxpgnqt6snt0wg3axr\">表示可以将一个或多个视图附着到组件中的容器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewRef\">ViewRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axjaudbo16wjj4xiw489fwlcs\">表示一个 Angular <a href=\"guide/glossary#view\" title=\"Definition\">视图</a>。</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n\n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"装饰器\">装饰器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#装饰器\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"decorators\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1zznifpayi16ganluvq52nc4g\">装饰器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#decorators\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Attribute\">Attribute</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"430xya7u6v8yd3bwoxprbzshx\">指令构造函数的参数修饰器，用于指定宿主元素属性，其值作为常量字符串文字注入。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Component\">Component</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"61m6fifd40kz3i6qngjurcd0j\">一个装饰器，用于把某个类标记为 Angular 组件，并为它配置一些元数据，以决定该组件在运行期间该如何处理、实例化和使用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ContentChild\">ContentChild</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3uyp69594femajq5dhdzvjdty\">用于配置内容查询的参数装饰器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ContentChildren\">ContentChildren</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3uyp69594femajq5dhdzvjdty\">用于配置内容查询的参数装饰器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Directive\">Directive</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o9oj1s129ex3arbe0v6bp4s1\">将类标记为 Angular 指令的装饰器。你可以定义自己的指令，以将自定义行为附加到 DOM 中的元素。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Host\">Host</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3beeb54vz54f50h7gkw44v6y8\">类构造函数的视图提供者参数上的参数修饰器，用于指示 DI 框架通过检查子元素的注入器来解析视图，并在到达当前组件的宿主元素时停止。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/HostBinding\">HostBinding</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"764o5limqsu2j8trigwu5vjs\">用于标记 DOM 属性或元素类、样式或属性为宿主绑定属性，并提供配置元数据的装饰器。Angular 在变更检测期间会自动检查主机绑定，如果绑定发生变化，则更新指令的主机元素。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/HostListener\">HostListener</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jwiiwcvk99qcng5hm98g8mtl\">一个装饰器，用于声明要监听的 DOM 事件，并提供在该事件发生时要运行的处理器方法。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Inject\">Inject</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"95im0klx0kufdhvahiheuud9a\">类构造函数中依赖项参数上的参数装饰器，用于指定依赖项的自定义提供者。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Injectable\">Injectable</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"745c3nth7el81npwtpkukxaa6\">标记性元数据，表示一个类可以由 <code><a href=\"api/core/Injector-0\" class=\"code-anchor\">Injector</a></code> 进行创建。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Input\">Input</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"euhtefrqv2hspjut1tqpzyyqi\">一个装饰器，用来把某个类字段标记为输入属性，并提供配置元数据。\n该输入属性会绑定到模板中的某个 DOM 属性。当变更检测时，Angular 会自动使用这个 DOM 属性的值来更新此数据属性。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgModule\">NgModule</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9pfm0zwp0wq6ygqrmfnip4nul\">把一个类标记为 NgModule，并提供配置元数据。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Optional\">Optional</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6f4wsimzjxev0qoansue2d8vu\">用于构造函数参数的参数装饰器，将参数标记为可选依赖项。如果找不到依赖项，则 DI 框架提供 null。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Output\">Output</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2wbnkhtmxmvt9y498euqtavz8\">一个装饰器，用于把一个类字段标记为输出属性，并提供配置元数据。\n凡是绑定到输出属性上的 DOM 属性，Angular 在变更检测期间都会自动进行更新。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Pipe\">Pipe</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3dqvuap20agh3gvkjnpowod3n\">本装饰器用于将类标记为管道并提供配置元数据。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Self\">Self</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ov4y39jtpzo9pttbpl4d6vjd\">将在构造函数参数上使用参数装饰器，该装饰器告诉 DI 框架从本地注入器开始解析依赖项。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SkipSelf\">SkipSelf</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"md12ah2tx0k2qh6uq33thumu\">将在构造函数参数上使用的参数装饰器，该参数指示 DI 框架从父注入器启动依赖项解析。解析器在注入器层次结构中向上查找，因此不会检查本地注入器的提供者。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewChild\">ViewChild</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kpd59enh4ftilvb1ryettnmi\">属性装饰器，用于配置一个视图查询。变更检测器会在视图的 DOM 中查找能匹配上该选择器的第一个元素或指令。如果视图的 DOM 发生了变化，出现了匹配该选择器的新的子节点，该属性就会被更新。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewChildren\">ViewChildren</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"81d07136tdyr9dxdjsjx08n2k\">用于配置视图查询的参数装饰器。</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n\n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"函数\">函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#函数\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"functions\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dt2uvbdl3r7k4tmkiulzt8lb8\">函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#functions\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/afterNextRender\">afterNextRender</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"d5gdi44s9a2o3x2fc8k2fr0gw\">注册回调函数，在应用程序完成渲染时调用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/afterRender\">afterRender</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5m9az62bizc1zvfglfogg9f1q\">注册一个回调，每次应用程序完成渲染时都会调用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/asNativeElements\">asNativeElements</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/assertInInjectionContext\">assertInInjectionContext</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eizimjdjku5l1ufqzy9jckfr0\">断言当前调用堆栈位于一个\n<a href=\"guide/dependency-injection-context\">注入上下文</a>内，并且能访问\n<code>inject</code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/assertNotInReactiveContext\">assertNotInReactiveContext</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"10ljqw2p70b2p7qi2mb27cken\">断言当前调用堆栈不在响应式上下文中。可用于阻止某些代码在响应式上下文中运行（请参见\n<a href=\"api/core/rxjs-interop/toSignal\"><code>toSignal</code></a>）。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/assertPlatform\">assertPlatform</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8kf9vfeam91mwsvgcftok3iaw\">检查当前是否存在以给定令牌为提供者的平台。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/booleanAttribute\">booleanAttribute</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1gm82scm36ndgxi9xdoauhyrg\">将值（通常是字符串）转换为布尔值。旨在用作输入的转换函数。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/computed\">computed</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59u8eqdltuedw5cdk8qr5dsc1\">创建一个计算 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>，它从表达式中导出反应值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/contentChildren\">contentChildren</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ebt6bulmagbrn415j4l6ov2n4\">进一步的信息可在\n<a href=\"api/core/contentChildren#usage-notes\">使用说明...</a>中找到。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createComponent\">createComponent</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5fx69dblyx8pz8u0snyah5dfp\">根据提供的组件类型和一组选项创建一个 <code><a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef</a></code> 实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createEnvironmentInjector\">createEnvironmentInjector</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f4m8me8oqtval786r1cxguccp\">创建一个新的环境注入器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createNgModule\">createNgModule</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a23aixb14eepbo8c09uigz9bn\">根据提供的 NgModule 类和父注入器返回一个新的 NgModuleRef 实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createPlatform\">createPlatform</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"axrmzj4ktz0l66m83h8x9gkxc\">创建一个平台。必须使用此函数在启动时创建平台。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createPlatformFactory\">createPlatformFactory</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e3f4s7tv2ty77h1lclu8ufcvr\">为平台创建工厂。可用于提供或覆盖针对你的应用程序的运行时需求的 <code>Providers</code>，比如 <code><a href=\"api/core/PLATFORM_INITIALIZER\" class=\"code-anchor\">PLATFORM_INITIALIZER</a></code> 和 <code><a href=\"api/core/PLATFORM_ID\" class=\"code-anchor\">PLATFORM_ID</a></code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/destroyPlatform\">destroyPlatform</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"paa7z7yjmw6y1ovbl2n99hc9\">销毁页面上的当前 Angular 平台和所有 Angular 应用程序。销毁在平台上注册的所有模块和监听器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/effect\">effect</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4i64004664yf4v3r17eelbgov\">为给定的反应函数创建一个全局 <code>Effect</code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/enableProdMode\">enableProdMode</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"65z1rmp6s3qwi5mzptww8olli\">禁用 Angular 的开发模式，该模式将关闭框架中的断言和其他检查。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/forwardRef\">forwardRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4onhm1wabvs8ihhhde8tzmz4\">允许引用尚未定义的引用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/getDebugNode\">getDebugNode</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/getModuleFactory\" class=\"deprecated-api-item\">getModuleFactory</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Use <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a></code> instead.</p>\n\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e41bph9ywrnslvij9yla5eapr\">返回具有给定 id 的 NgModuleFactory（如果存在并且已加载）。无法检索未指定过 <code>id</code>\n的模块工厂。如果找不到模块，则抛出该异常。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/getNgModuleById\">getNgModuleById</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"be2zrr9rilxwydjoiboubgaw3\">返回具有给定 id（使用<a href=\"api/core/NgModule#id\">@NgModule.id 字段</a>指定）的 NgModule\n类（如果存在并且已加载）。无法检索未指定 <code>id</code> 的 NgModules 类。如果找不到 NgModule，则抛出。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/getPlatform\">getPlatform</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"83hu4nndxrccfh8tbl0hsqo61\">返回当前平台。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/importProvidersFrom\">importProvidersFrom</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"46tmfgwtls5kg9v4ewtz4o656\">从所有 NgModule 和独立组件（包括可传递导入的组件）收集提供程序。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/inject\">inject</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"deb2zra5risoxh3wpimih71d1\">从当前活动的注入器中注入一个令牌。\n<code>inject</code>仅在\n<a href=\"/guide/dependency-injection-context\">注入上下文</a>中受支持。它可以在以下情况下使用：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9sr8ilsd0ucu18or81h2h1ffs\">由 DI 系统实例化的类的构造（通过 <code>constructor</code>），例如 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 或 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"29172th10uuxu5ic4snjdofwf\">在此类类的字段的初始化器中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8jkpszgeam34zsfe1887jmqlc\">在为 <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> 的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> <code>useFactory</code> 的工厂函数中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cjff316boi01659epye5taniq\">在为 <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code> 指定的 <code>factory</code> 函数中。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"aksh3aj2qf2fxyz47lks6x5yw\">在 DI 上下文中的函数调用堆栈帧中</li>\n</ul>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/isDevMode\">isDevMode</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cw4z3h1vo7zgofvyhgtq74g9u\">返回 Angular 是否处于开发模式。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/isSignal\">isSignal</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8bdzqurxzs78v6kpmd67rektx\">检查给定 <code>value</code> 是否为反应 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/isStandalone\">isStandalone</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5nrfi1vwhtot8ad4ajfhrc7yp\">检查给定的组件、指令或管道是否被标记为独立的。如果传递的不是组件、指令或管道类，这将返回 false 请参阅<a href=\"/guide/standalone-components\">本指南</a>以获取更多信息：</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/makeEnvironmentProviders\">makeEnvironmentProviders</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8nmt264xykblju8csp0zak7nf\">将一组\n<code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code>包装成\n<code><a href=\"api/core/EnvironmentProviders\" class=\"code-anchor\">EnvironmentProviders</a></code>，防止它们在组件注入器中被意外引用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/makeStateKey\">makeStateKey</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"618lef86rb8ce1vx4e9usnxov\">创建一个 <code><a href=\"api/core/StateKey\" class=\"code-anchor\">StateKey</a>&lt;T&gt;</code>，可用于把 T 类型的值存储在 <code><a href=\"api/core/TransferState\" class=\"code-anchor\">TransferState</a></code> 中。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/mergeApplicationConfig\">mergeApplicationConfig</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cm37xi43wsk3ua7tpkeb2wqap\">从左到右合并多个应用程序配置。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/numberAttribute\">numberAttribute</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"111db1ieiuk51fnypr09hk7kh\">将值（通常是字符串）转换为数字。旨在用作输入的转换函数。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/provideZoneChangeDetection\">provideZoneChangeDetection</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ad3qj268kz3sxj0fuzsjmd5mz\">为使用 <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code> 引导的应用程序提供基于 <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 的变更检测。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/reflectComponentType\">reflectComponentType</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9hkbqiqdbn8usb9ii03nksyu2\">创建一个允许检索组件元数据的对象。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/resolveForwardRef\">resolveForwardRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9x0uxvkpvs7wvy5gfj608jsfy\">从 forwardRef 惰性检索引用值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/runInInjectionContext\">runInInjectionContext</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jmfq0twf9n9if0i0xpdc3u43\">在给定的\n<code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>的\n<em>上下文</em>中运行给定的函数。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/setTestabilityGetter\">setTestabilityGetter</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2tac7zea4ladu7zhtjn4cmzik\">设置 Angular 测试框架使用的 <a href=\"api/core/GetTestability\"><code>GetTestability</code></a> 实现。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/signal\">signal</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"amh3be9ivm6bkkml3opd8w1nh\">创建一个可以直接设置或更新的 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/untracked\">untracked</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eyxvo22yu8ixym7xfdri69rw8\">在非反应性（非跟踪）上下文中执行任意函数。执行的函数可以选择返回一个值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/viewChildren\">viewChildren</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ctb3lps49vr0wpba0muv09cg\">初始化一个视图子查询。</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n\n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"结构\">结构<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#结构\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"structures\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2pvj0r4hennzfp5hvt5swfw10\">结构<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#structures\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AbstractType\">AbstractType</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ph2154hs6tzmjber0ju7vh02\">表示抽象类 <code>T</code>，如果将其应用于具体类，它将无法被实例化。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterContentChecked\">AfterContentChecked</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ch5uk3fx260bq4iatoue6enk8\">一个生命周期钩子，它会在默认的变更检测器对指令的所有内容完成了变更检查之后调用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterContentInit\">AfterContentInit</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2nnibpfc0c4cvtrrie7khjm0g\">一个生命周期钩子，它会在 Angular 完全实例化了指令的所有内容之后调用。\n定义一个 <code>ngAfterContentInit()</code> 方法来处理额外的初始化任务。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterRenderOptions\">AfterRenderOptions</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eux6luzajlrvxaw0kepaxvb6a\">传递给\n<code><a href=\"api/core/afterRender\" class=\"code-anchor\">afterRender</a></code>和\n<code><a href=\"api/core/afterNextRender\" class=\"code-anchor\">afterNextRender</a></code>的选项。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterRenderPhase\">AfterRenderPhase</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"715i3dvnekaltnanzo87fy8cc\">在哪个阶段运行\n<code><a href=\"api/core/afterRender\" class=\"code-anchor\">afterRender</a></code>或\n<code><a href=\"api/core/afterNextRender\" class=\"code-anchor\">afterNextRender</a></code>回调。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterRenderRef\">AfterRenderRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6e4y839r26imuhw111xepktsy\">渲染后运行的回调函数。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterViewChecked\">AfterViewChecked</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f5gy58ozxgnl4qcxh2tlgv102\">一个生命周期钩子，它会在默认的变更检测器完成了对组件视图的变更检测之后调用。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterViewInit\">AfterViewInit</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kkkm0uq2q87jhmqfzwjq8fqz\">一个生命周期钩子，会在 Angular 完全初始化了组件的视图后调用。\n定义一个 <code>ngAfterViewInit()</code> 方法来处理一些额外的初始化任务。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ApplicationConfig\">ApplicationConfig</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3nopw9pvfeznod5252frr6u56\">在引导操作期间通过 <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code> 调用可用的一组配置选项。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/BootstrapOptions\">BootstrapOptions</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"culhhzk2nlc0zp78n1120o3nl\">为引导过程提供其他选项。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ChangeDetectionStrategy\">ChangeDetectionStrategy</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6zrxpy3z2jf6pdbvg4w1puizl\">默认变更检测器用来检测更改的策略。设置后，将在下次触发变更检测时生效。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ClassProvider\">ClassProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41coiwi2eun2hicwrop7qt0t4\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以便为令牌返回 <code>useClass</code> 的实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ClassSansProvider\">ClassSansProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4t335gnd4bdbmuvlm9hy3g4uy\">配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以通过调用 <code>useClass</code> 函数返回某个值。是 <code><a href=\"api/core/ClassProvider\" class=\"code-anchor\">ClassProvider</a></code> 装饰器的基接口。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ComponentMirror\">ComponentMirror</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eudcpxii03x60zbhk7h3ucoaq\">一个接口，描述可以用 <code><a href=\"api/core/reflectComponentType\" class=\"code-anchor\">reflectComponentType</a></code> 函数检索的组件元数据子集。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ConstructorProvider\">ConstructorProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7rhu7ry1ghmc2oe8ni1vp4bb4\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>，以返回令牌的实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ConstructorSansProvider\">ConstructorSansProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7rhu7ry1ghmc2oe8ni1vp4bb4\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>，以返回令牌的实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ContentChildFunction\">ContentChildFunction</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rqefmpwsywetl5u12hzuizj1\"><code><a href=\"api/core/contentChild\" class=\"code-anchor\">contentChild</a></code>函数的类型。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CreateComputedOptions\">CreateComputedOptions</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dauoa1uplglwz1h4o0ckn2ekh\">传递给 <code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code> 创建函数的选项。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CreateEffectOptions\">CreateEffectOptions</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"vuxobcjn4ayg83cgccbhclu5\">传递给 <code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code> 函数的选项。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CreateSignalOptions\">CreateSignalOptions</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4aeezg0pp8hyixljog0zggznk\">传递给 <code><a href=\"api/core/signal\" class=\"code-anchor\">signal</a></code> 创建函数的选项。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DoBootstrap\">DoBootstrap</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7oqcgsri0o4w7m40vp9ssyk06\">用于手动引导应用程序而不是在 @NgModule 注解中使用 \n<code>bootstrap</code> 数组。只有当 \n<code>bootstrap</code> 数组为空或未提供时才会调用此钩子。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DoCheck\">DoCheck</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5u8kls5p2w1m05o910uuqove6\">一个生命周期钩子，除了使用默认的变更检查器执行检查之外，还会为指令执行自定义的变更检测函数。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EffectRef\">EffectRef</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"esfb99l65pa4ykjvmkrf20ba\">全局反应效果，可以手动销毁。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ExistingProvider\">ExistingProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1ephs05amt91bvy9kw8t34yw\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回另一个 <code>useExisting</code> 令牌的值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ExistingSansProvider\">ExistingSansProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a1ephs05amt91bvy9kw8t34yw\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回另一个 <code>useExisting</code> 令牌的值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/FactoryProvider\">FactoryProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y8jvvz3lw4aq68zppugh9yz3\">把此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 配置为调用 <code>useFactory</code> 函数返回一个值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/FactorySansProvider\">FactorySansProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3y8jvvz3lw4aq68zppugh9yz3\">把此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 配置为调用 <code>useFactory</code> 函数返回一个值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ForwardRefFn\">ForwardRefFn</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4aowxkzqrs717jzvtzafrocl\">传入 \n<code><a href=\"api/core/forwardRef\" class=\"code-anchor\">forwardRef</a></code> 的函数必须实现的接口。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/GetTestability\">GetTestability</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1xdpcuhex7hi93debojd8efh6\">适配器接口，用于检索与特定上下文关联 <code><a href=\"api/core/Testability\" class=\"code-anchor\">Testability</a></code></p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/InjectFlags\" class=\"deprecated-api-item\">InjectFlags</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> use an options object for <a href=\"api/core/inject\"><code>inject</code></a> instead.</p>\n\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6bxd3ilqhdpw3gchn1jbh0xdg\">DI 的注入标志。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectOptions\">InjectOptions</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2acvcv72upgzdqydox1k4oynf\">传递给\n<a href=\"api/core/inject\"><code>inject</code></a>的选项参数的类型。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectableType\">InjectableType</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dzy42rqsdbcvghvjyhljzkach\">具有 <code>InjectableDef</code> 静态字段的 <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code></p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectorType\">InjectorType</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bfs3cci353m27jwibyb4vps58\">具有 <code>InjectorDef</code> 静态字段的类型。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InputFunction\">InputFunction</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eu2lrc0sr5flncjoegq2seulg\"><code>input</code> 函数允许在指令和组件中声明输入。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InputOptions\">InputOptions</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InputSignal\">InputSignal</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dimqk7gujfg0yatrbgj62l0yl\"><code><a href=\"api/core/InputSignal\" class=\"code-anchor\">InputSignal</a></code> 表示指令/组件输入的特殊 \n<code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InputSignalWithTransform\">InputSignalWithTransform</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2lm563jtgv2vpokuzolsschg2\"><code><a href=\"api/core/InputSignalWithTransform\" class=\"code-anchor\">InputSignalWithTransform</a></code> 表示带有 \n<code>transform</code> 函数的指令/组件输入的特殊 \n<code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableChangeRecord\">IterableChangeRecord</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3mp5793w6029d9hgyksytd0y\">代表条目变更信息的记录。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableChanges\">IterableChanges</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2aauwdbc7xl73blrxxhobl56j\">本对象描述自上次调用 <code><a href=\"api/core/IterableDiffer\" class=\"code-anchor\">IterableDiffer</a>#diff()</code> 以来 <code>Iterable</code> 集合中的变更。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableDiffer\">IterableDiffer</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3o8e8z25geqiqowrt1xydglhx\">用来跟踪一个迭代内的更改的策略。<a href=\"api/common/NgForOf\"><code>NgForOf</code></a> 使用它通过对 DOM 进行等效更改来响应此迭代内的更改。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableDifferFactory\">IterableDifferFactory</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bm1bk23uxje8rn02brdd36y3v\">提供 <a href=\"api/core/IterableDiffer\"><code>IterableDiffer</code></a> 的工厂。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueChangeRecord\">KeyValueChangeRecord</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f3mp5793w6029d9hgyksytd0y\">代表条目变更信息的记录。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueChanges\">KeyValueChanges</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ezl5pv1hctpa9cbouihcizqb3\">一个对象，描述自上次调用 <code><a href=\"api/core/KeyValueDiffer\" class=\"code-anchor\">KeyValueDiffer</a>#diff()</code> 以来的变化的 <code>Map</code> 或 <code>{[k:string]: string}</code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueDiffer\">KeyValueDiffer</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5wgl1kzclncdcv68iknhlyosd\">跟踪对象随时间变化的差异。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueDifferFactory\">KeyValueDifferFactory</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3mhw7oe1rfu7juva7pfiytpk3\">提供 <a href=\"api/core/KeyValueDiffer\"><code>KeyValueDiffer</code></a> 的工厂。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/MissingTranslationStrategy\">MissingTranslationStrategy</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7x0hj8cx6b90qi7uozlrb4igs\">在系统启动时使用此枚举作为 <code>bootstrapModule</code>\n的一个选项来定义策略，编译器应该在缺少翻译的情况下使用：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ef1157r0lpyaxindu4gg7jiz4\">Error：如果缺少翻译，则抛出该错误。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"970xvff699lgy3uu65ziyyuov\">Warning（默认）：在控制台和/或应用外壳中显示警告。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5epfa7sdkbivw84adh3gintp2\">Ignore：什么都不做。</li>\n</ul>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ModelFunction\">ModelFunction</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adnn3pgei9ihwra7fzdftqol1\"><code><a href=\"api/core/model\" class=\"code-anchor\">model</a></code>声明了一个可写信号，该信号作为包含指令的输入/输出对暴露出来。输入名称可以从类成员或\n<code>alias</code>选项中获取。输出名称是通过获取输入名称并附加\n<code>Change</code>来生成的。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ModelOptions\">ModelOptions</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ModelSignal\">ModelSignal</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ubunmqcujy1zngam2q3pyx8l\"><code><a href=\"api/core/ModelSignal\" class=\"code-anchor\">ModelSignal</a></code>表示指令/组件模型字段的特殊\n<code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ModuleWithProviders\">ModuleWithProviders</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dd79ik12roegdiry9b7rti6tz\">将 NgModule 与<a href=\"guide/glossary#provider\" title=\"定义\">provider</a>关联的 NgModule\n的包装器。不推荐使用没有泛型类型的用法。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgZoneOptions\">NgZoneOptions</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"e5bsp2ucm5b3x54cssgnmoss1\">用于配置事件并使用 <code><a href=\"api/core/provideZoneChangeDetection\" class=\"code-anchor\">provideZoneChangeDetection</a></code> 运行合并。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/OnChanges\">OnChanges</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edysch67qel627oy9muwvzdw4\">一个生命周期钩子，当指令的任何一个可绑定属性发生变化时调用。\n定义一个 <code>ngOnChanges()</code> 方法来处理这些变更。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/OnDestroy\">OnDestroy</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"chbs87bf9yngypcsirac8g3uu\">一个生命周期钩子，它会在指令、管道或服务被销毁时调用。\n用于在实例被销毁时，执行一些自定义清理代码。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/OnInit\">OnInit</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4u17lc7i0epod0vswcq3w4y9i\">一个生命周期钩子，它会在 Angular 初始化完了该指令的所有数据绑定属性之后调用。\n定义 <code>ngOnInit()</code> 方法可以处理所有附加的初始化任务。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PipeTransform\">PipeTransform</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4pwo5jab32ix026wq3f1yfa7x\">一个需要由管道实现的接口，用于执行转换操作。\nAngular 会调用它的 <code>transform</code>\n方法，并把要绑定的值作为第一个参数传入，其它参数会依次从第二个参数的位置开始传入。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Predicate\">Predicate</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"icsfvft8zay7z6onccz1ppde\">根据参数值返回布尔值的函数，可能包括该值在数组中位置的上下文信息。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/RendererStyleFlags2\">RendererStyleFlags2</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9jpe62f5xdo2xs1o3kc2m9ha\">渲染器特有样式修饰符的标志。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/RendererType2\">RendererType2</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93qdjw7mzj76k53iimq8fzeho\">供 <code><a href=\"api/core/RendererFactory2\" class=\"code-anchor\">RendererFactory2</a></code> 用于将自定义渲染数据和样式与某个渲染器的实现相关联。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SchemaMetadata\">SchemaMetadata</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"u7woffq8eqs3hsphvnm7r5h7\">与 NgModule 关联的架构定义。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SecurityContext\">SecurityContext</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bosutq6yslmq2agdjdoihybep\">SecurityContext 标记了具有危险安全隐患的位置，比如，像 <code>innerHTML</code> 这样的 DOM 属性，如果处理不当，可能会导致跨站点脚本（XSS）安全错误。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SimpleChanges\">SimpleChanges</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"beckuuyiwak71ttxa64ubjrc4\">用 <a href=\"api/core/SimpleChange\"><code>SimpleChange</code></a> 对象表示的变更的哈希表，这些对象以声明的属性名称存储在指令或组件上，这些属性属于它们。这是传递给 <code>ngOnChanges</code> 钩子的类型。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/StaticClassProvider\">StaticClassProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41coiwi2eun2hicwrop7qt0t4\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以便为令牌返回 <code>useClass</code> 的实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/StaticClassSansProvider\">StaticClassSansProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4jihbbnffpdslf5s7pqpvcs4s\">配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回 <code>useClass</code> 的令牌实例。这是 <code><a href=\"api/core/StaticClassProvider\" class=\"code-anchor\">StaticClassProvider</a></code> 装饰器的基接口。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TrackByFunction\">TrackByFunction</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9rq1jvajrbnln10bp9qdnl6un\">一个可选地传入 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 指令的函数，以自定义 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 如何唯一标识迭代中的条目。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TypeDecorator\">TypeDecorator</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"27tm8d5pkg7eq3k4grkjvs1f5\">由所有 Angular 类型装饰器实现的接口，该接口允许将它们用作装饰器以及 Angular 语法。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TypeProvider\">TypeProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dklki7sg7l02ou5emlph2xq98\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>，以将“类型”用作令牌时返回 <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code> 的实例。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ValueProvider\">ValueProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cbnlsv7eiisrsp9y20th87m0l\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回令牌的值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ValueSansProvider\">ValueSansProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ajhgw4yzd3p7bv7aanlsgd8n9\">配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回令牌的值。是 <code><a href=\"api/core/ValueProvider\" class=\"code-anchor\">ValueProvider</a></code> 装饰器的基接口。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewChildFunction\">ViewChildFunction</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"39wclsoqvo9gsqsawvdgzxyzq\">viewChild函数的类型。viewChild函数创建一个单一的视图查询。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewEncapsulation\">ViewEncapsulation</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8k57rh7h6tm47h6y6mag9ndsb\">定义可用于 Component 的 <a href=\"api/core/Component\"><code>Component</code></a> 的模板和样式封装选项。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/WritableSignal\">WritableSignal</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"20limygj3g7t8f1eo0hzwdw04\">一个 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>，其值可以通过 setter 接口改变。</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n\n  \n  \n\n\n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"元素\">元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#元素\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"elements\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a31fydlpmepalvfkmzudwjzrv\">自定义元素（Elements）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#elements\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ng-container\">&lt;ng-container&gt;</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxjxek7u8i1t6h74965vl6qt5\">一种特殊元素，可以在不向 DOM 添加新元素的情况下承载结构型指令。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ng-content\">&lt;ng-content&gt;</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"53mo8k9kfmw0jbcnrdwn8jvpe\"><code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素指定了在组件模板中投影内容的位置。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ng-template\">&lt;ng-template&gt;</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a7egsio1p5za64suyh3gl4pfg\">Angular 的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素定义了一个默认不渲染的模板。</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n\n  \n  \n\n\n  \n  \n  <section class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"类型\">类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#类型\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"types\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"edj3fs52fiqyg9u6mdyxchcwv\">类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#types\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ANIMATION_MODULE_TYPE\">ANIMATION_MODULE_TYPE</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9evbl2k2rdhokn3ashh1ybcjq\">一个表示已加载哪个动画模块的\n<a href=\"api/core/InjectionToken\">DI 令牌</a>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/APP_BOOTSTRAP_LISTENER\">APP_BOOTSTRAP_LISTENER</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2iqaq6xngubzpa9vk888ixaw3\">一个 <a href=\"guide/glossary#di-token\" title=\"DI 令牌定义\">DI 令牌</a>，该令牌提供了一组针对每个要引导的组件调用的回调。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/APP_ID\">APP_ID</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dk0o4489sqk3femzoz1yozuts\">代表字符串 ID 的一个\n<a href=\"guide/glossary#di-token\" title=\"DI 令牌定义\">DI 令牌</a>，主要用于给应用属性和 CSS 样式添加前缀，当使用\n<a href=\"api/core/ViewEncapsulation#Emulated\"><code>ViewEncapsulation#Emulated</code></a>时。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/APP_INITIALIZER\">APP_INITIALIZER</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2xbic5woghzopk2z3yv1mr4ml\">可用于提供一个或多个初始化功能的 <a href=\"guide/glossary#di-token\" title=\"DI 令牌定义\">DI 令牌</a>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/COMPILER_OPTIONS\">COMPILER_OPTIONS</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"16daa5wura3cjnhg0zq61xaaq\">在平台注入器中提供 CompilerOptions 的令牌。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CSP_NONCE\">CSP_NONCE</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5kpt372x989pvwikek3i2do8c\">Token 用于配置 Angular 在插入内联样式时应用的<a href=\"https://web.dev/strict-csp/\">内容安全策略</a>随机数。如果未提供，Angular 将从应用程序根节点的 <code>ngCspNonce</code> 属性中查找它的值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CUSTOM_ELEMENTS_SCHEMA\">CUSTOM_ELEMENTS_SCHEMA</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"n6a1f5n53fz73evbzdnornuh\">定义一个架构，该架构允许 NgModule 包含以下内容：</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2o4090zgtmy39z05rv7m44b7c\">使用（<code>-</code>）命名法的非 Angular 元素。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"84lfpleu4pg8az7vto5o2o3r1\">以破折号（<code>-</code>）命名的元素属性。破折号是自定义元素的命名约定。</li>\n</ul>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CompilerOptions\">CompilerOptions</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"6nmglbnptqwsm0fn8s2pxlw5h\">创建编译器的选项。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DEFAULT_CURRENCY_CODE\">DEFAULT_CURRENCY_CODE</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"50puljuem51xnwu5ceh5yojok\">如果没有传递任何货币代码，请提供此令牌来设置你的应用程序用于 CurrencyPipe 的默认货币代码。仅由\nCurrencyPipe 使用，与语言环境的货币无关。如果未配置，则默认为 USD。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ENVIRONMENT_INITIALIZER\">ENVIRONMENT_INITIALIZER</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9ztqvzxzvc7y8oewzyv68u5mj\">初始化函数的多提供者令牌，将在构建环境注入器时运行。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EffectCleanupFn\">EffectCleanupFn</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4h9infb7mdwi13i1s0j5w8ljo\">一个效果可以选择注册一个清理函数。如果已注册，则在下一次效果运行之前执行清理。清理功能可以“取消”之前效果运行可能已经开始的任何工作。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EffectCleanupRegisterFn\">EffectCleanupRegisterFn</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4hm7azf7o1ac9kl6eo3w77o0p\">传递给效果函数的回调，使注册清理逻辑成为可能。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EnvironmentProviders\">EnvironmentProviders</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a3lawu69iold3j0if3djxs73b\">封装的 <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> 仅在创建 <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 期间被接受（例如在 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 中）。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/INJECTOR\">INJECTOR</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ewxuyl9u0jxhexiy18vijhwe0\">一个 InjectionToken，用于获取当前 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 的 <code>createInjector()</code> 式的注入器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ImportProvidersSource\">ImportProvidersSource</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"f0rasvuezymokmnsxn0wxfvpl\"><code><a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a></code> 函数的提供程序来源。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ImportedNgModuleProviders\" class=\"deprecated-api-item\">ImportedNgModuleProviders</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> replaced by <code><a href=\"api/core/EnvironmentProviders\" class=\"code-anchor\">EnvironmentProviders</a></code></p>\n\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1jtvop1858u57d8op6s4b41y0\">通过 <code><a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a></code> 函数从 NgModules 导入的提供程序。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectableProvider\">InjectableProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"yj4v9za95ppmo1zvaemfsc5p\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 装饰器中使用的可注入对象提供者。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InputOptionsWithTransform\">InputOptionsWithTransform</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4fqra9s1lmiyid9ojk5xw6pg3\">包含必须的转换选项的输入信号。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InputOptionsWithoutTransform\">InputOptionsWithoutTransform</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1eypmdvvcnhuilig0ralcauzs\">不包含转换选项的输入信号。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/LOCALE_ID\">LOCALE_ID</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"auzl4vqmry3ukjru69vo6hvyf\">提供此令牌以设置应用程序的语言环境。它通过 i18n 管道（DatePipe、I18nPluralPipe、CurrencyPipe、DecimalPipe 和 PercentPipe）和 ICU 表达式用于 i18n 提取。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NO_ERRORS_SCHEMA\">NO_ERRORS_SCHEMA</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bz44go68qv2r2ihtwrg7r83l3\">定义一个架构，该架构允许任何元素上的任何属性。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgIterable\">NgIterable</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"837x7lgq0td8ragup9uw1dyg2\">描述受支持的可迭代类型的类型。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PACKAGE_ROOT_URL\" class=\"deprecated-api-item\">PACKAGE_ROOT_URL</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> </p>\n\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"epglpaccr93my661n6nh71zos\">一个 <a href=\"guide/glossary#di-token\" title=\"DI 令牌定义\">DI 令牌</a>，指示应用程序的根目录</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PLATFORM_ID\">PLATFORM_ID</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7lfs0g32yt4dlz7he7myayd6f\">标识不透明平台 ID 的令牌。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PLATFORM_INITIALIZER\">PLATFORM_INITIALIZER</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2kb1buwbzl58bnwk1jyq1rqve\">平台初始化时执行的函数。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Provider\">Provider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"dazmimqy3lwiq1uwculnqq5e9\">描述应该如何配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ProviderToken\">ProviderToken</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8aakgvcjgi6sesr8ryxv50zus\">可用于从注入器或通过查询检索实例的标记。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Signal\">Signal</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3v8n3wcfncfql2zbsmatg5pz\">通知消费者任何更改的反应值。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/StateKey\">StateKey</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"186a6mwa7luvm6reek0gxdclr\">与 <code><a href=\"api/core/TransferState\" class=\"code-anchor\">TransferState</a></code> 一起使用的类型安全的键名。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/StaticProvider\">StaticProvider</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"4ra58nhmx3otalzgcmgqmrbcp\">描述如何将 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>\n配置为静态的（即不需要反射）。静态提供者为各种类型的依赖项提供令牌给注入器。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TRANSLATIONS\">TRANSLATIONS</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5je4crjubavy1rzvv2w0272n6\">当你想用另一种语言翻译应用程序时，可以在引导程序中使用此令牌来提供翻译文件的内容（<code>xtb</code>、<code>xlf</code>\n或 <code>xlf2</code>）</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TRANSLATIONS_FORMAT\">TRANSLATIONS_FORMAT</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ekuhs34kykmn6b80zeqq7hus7\">在引导程序中提供此令牌以设置 <a href=\"api/core/TRANSLATIONS\"><code>TRANSLATIONS</code></a> 的格式：<code>xtb</code>、<code>xlf</code> 或 <code>xlf2</code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ValueEqualityFn\">ValueEqualityFn</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"41lp5byq1rqn21npvl53pclda\">可以确定两个值是否相等的比较函数。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/contentChild\">contentChild</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5jz55j8ty1sbie25j8uuyvozb\">初始化一个内容子查询。考虑使用\n<code>contentChild.required</code>来查询应始终匹配的内容。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/createNgModuleRef\" class=\"deprecated-api-item\">createNgModuleRef</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> Use <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code> instead.</p>\n\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8ntw9rmh6pq42ucyshb3terh1\">向后兼容的 <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code> 函数别名。请避免直接使用它，而改用 <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code>。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/defineInjectable\" class=\"deprecated-api-item\">defineInjectable</a></code></td>\n        <td>\n          <p><strong>已弃用:</strong> in v8, delete after v10. This API should be used only by generated code, and that\ncode should now use ɵɵdefineInjectable instead.</p>\n\n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/input\">input</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eu2lrc0sr5flncjoegq2seulg\"><code>input</code> 函数允许在指令和组件中声明输入。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/model\">model</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"adnn3pgei9ihwra7fzdftqol1\"><code><a href=\"api/core/model\" class=\"code-anchor\">model</a></code>声明了一个可写信号，该信号作为包含指令的输入/输出对暴露出来。输入名称可以从类成员或\n<code>alias</code>选项中获取。输出名称是通过获取输入名称并附加\n<code>Change</code>来生成的。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/platformCore\">platformCore</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"2hjlnskl6exgkf55dsjwi7wbx\">任何其他平台都必须包含此平台</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/viewChild\">viewChild</a></code></td>\n        <td>\n          \n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a4ov9d2bn3izhvs7legrisvxb\">初始化一个视图子查询。</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n</div>\n</article>\n\n<!-- links to this doc:\n - api/core/ANIMATION_MODULE_TYPE\n - api/core/APP_BOOTSTRAP_LISTENER\n - api/core/APP_ID\n - api/core/APP_INITIALIZER\n - api/core/AbstractType\n - api/core/AfterContentChecked\n - api/core/AfterContentInit\n - api/core/AfterRenderOptions\n - api/core/AfterRenderPhase\n - api/core/AfterRenderRef\n - api/core/AfterViewChecked\n - api/core/AfterViewInit\n - api/core/ApplicationConfig\n - api/core/ApplicationInitStatus\n - api/core/ApplicationModule\n - api/core/ApplicationRef\n - api/core/Attribute\n - api/core/BootstrapOptions\n - api/core/COMPILER_OPTIONS\n - api/core/CSP_NONCE\n - api/core/CUSTOM_ELEMENTS_SCHEMA\n - api/core/ChangeDetectionStrategy\n - api/core/ChangeDetectorRef\n - api/core/ClassProvider\n - api/core/ClassSansProvider\n - api/core/Compiler\n - api/core/CompilerFactory\n - api/core/CompilerOptions\n - api/core/Component\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - api/core/ComponentMirror\n - api/core/ComponentRef\n - api/core/ConstructorProvider\n - api/core/ConstructorSansProvider\n - api/core/ContentChild\n - api/core/ContentChildFunction\n - api/core/ContentChildren\n - api/core/CreateComputedOptions\n - api/core/CreateEffectOptions\n - api/core/CreateSignalOptions\n - api/core/DEFAULT_CURRENCY_CODE\n - api/core/DebugElement\n - api/core/DebugEventListener\n - api/core/DebugNode\n - api/core/DefaultIterableDiffer\n - api/core/DestroyRef\n - api/core/Directive\n - api/core/DoBootstrap\n - api/core/DoCheck\n - api/core/ENVIRONMENT_INITIALIZER\n - api/core/EffectCleanupFn\n - api/core/EffectCleanupRegisterFn\n - api/core/EffectRef\n - api/core/ElementRef\n - api/core/EmbeddedViewRef\n - api/core/EnvironmentInjector\n - api/core/EnvironmentProviders\n - api/core/ErrorHandler\n - api/core/EventEmitter\n - api/core/ExistingProvider\n - api/core/ExistingSansProvider\n - api/core/FactoryProvider\n - api/core/FactorySansProvider\n - api/core/ForwardRefFn\n - api/core/GetTestability\n - api/core/Host\n - api/core/HostAttributeToken\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/INJECTOR\n - api/core/ImportProvidersSource\n - api/core/ImportedNgModuleProviders\n - api/core/Inject\n - api/core/InjectFlags\n - api/core/InjectOptions\n - api/core/Injectable\n - api/core/InjectableProvider\n - api/core/InjectableType\n - api/core/InjectionToken\n - api/core/Injector\n - api/core/InjectorType\n - api/core/Input\n - api/core/InputFunction\n - api/core/InputOptions\n - api/core/InputOptionsWithTransform\n - api/core/InputOptionsWithoutTransform\n - api/core/InputSignal\n - api/core/InputSignalWithTransform\n - api/core/IterableChangeRecord\n - api/core/IterableChanges\n - api/core/IterableDiffer\n - api/core/IterableDifferFactory\n - api/core/IterableDiffers\n - api/core/KeyValueChangeRecord\n - api/core/KeyValueChanges\n - api/core/KeyValueDiffer\n - api/core/KeyValueDifferFactory\n - api/core/KeyValueDiffers\n - api/core/LOCALE_ID\n - api/core/MissingTranslationStrategy\n - api/core/ModelFunction\n - api/core/ModelOptions\n - api/core/ModelSignal\n - api/core/ModuleWithComponentFactories\n - api/core/ModuleWithProviders\n - api/core/NO_ERRORS_SCHEMA\n - api/core/NgIterable\n - api/core/NgModule\n - api/core/NgModuleFactory\n - api/core/NgModuleRef\n - api/core/NgProbeToken\n - api/core/NgZone\n - api/core/NgZoneOptions\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/Optional\n - api/core/Output\n - api/core/PACKAGE_ROOT_URL\n - api/core/PLATFORM_ID\n - api/core/PLATFORM_INITIALIZER\n - api/core/Pipe\n - api/core/PipeTransform\n - api/core/PlatformRef\n - api/core/Predicate\n - api/core/Provider\n - api/core/ProviderToken\n - api/core/Query\n - api/core/QueryList\n - api/core/Renderer2\n - api/core/RendererFactory2\n - api/core/RendererStyleFlags2\n - api/core/RendererType2\n - api/core/Sanitizer\n - api/core/SchemaMetadata\n - api/core/SecurityContext\n - api/core/Self\n - api/core/Signal\n - api/core/SimpleChange\n - api/core/SimpleChanges\n - api/core/SkipSelf\n - api/core/StateKey\n - api/core/StaticClassProvider\n - api/core/StaticClassSansProvider\n - api/core/StaticProvider\n - api/core/TRANSLATIONS\n - api/core/TRANSLATIONS_FORMAT\n - api/core/TemplateRef\n - api/core/Testability\n - api/core/TestabilityRegistry\n - api/core/TrackByFunction\n - api/core/TransferState\n - api/core/Type\n - api/core/TypeDecorator\n - api/core/TypeProvider\n - api/core/ValueEqualityFn\n - api/core/ValueProvider\n - api/core/ValueSansProvider\n - api/core/Version\n - api/core/ViewChild\n - api/core/ViewChildFunction\n - api/core/ViewChildren\n - api/core/ViewContainerRef\n - api/core/ViewEncapsulation\n - api/core/ViewRef\n - api/core/WritableSignal\n - api/core/afterNextRender\n - api/core/afterRender\n - api/core/asNativeElements\n - api/core/assertInInjectionContext\n - api/core/assertNotInReactiveContext\n - api/core/assertPlatform\n - api/core/booleanAttribute\n - api/core/computed\n - api/core/contentChild\n - api/core/contentChildren\n - api/core/createComponent\n - api/core/createEnvironmentInjector\n - api/core/createNgModule\n - api/core/createNgModuleRef\n - api/core/createPlatform\n - api/core/createPlatformFactory\n - api/core/defer\n - api/core/defineInjectable\n - api/core/destroyPlatform\n - api/core/effect\n - api/core/enableProdMode\n - api/core/for\n - api/core/forwardRef\n - api/core/getDebugNode\n - api/core/getModuleFactory\n - api/core/getNgModuleById\n - api/core/getPlatform\n - api/core/if\n - api/core/importProvidersFrom\n - api/core/inject\n - api/core/input\n - api/core/isDevMode\n - api/core/isSignal\n - api/core/isStandalone\n - api/core/makeEnvironmentProviders\n - api/core/makeStateKey\n - api/core/mergeApplicationConfig\n - api/core/model\n - api/core/ng-container\n - api/core/ng-content\n - api/core/ng-template\n - api/core/numberAttribute\n - api/core/platformCore\n - api/core/provideZoneChangeDetection\n - api/core/reflectComponentType\n - api/core/resolveForwardRef\n - api/core/runInInjectionContext\n - api/core/rxjs-interop\n - api/core/rxjs-interop/ToObservableOptions\n - api/core/rxjs-interop/ToSignalOptions\n - api/core/rxjs-interop/takeUntilDestroyed\n - api/core/rxjs-interop/toObservable\n - api/core/rxjs-interop/toSignal\n - api/core/setTestabilityGetter\n - api/core/signal\n - api/core/switch\n - api/core/testing\n - api/core/testing/ComponentFixture\n - api/core/testing/ComponentFixtureAutoDetect\n - api/core/testing/ComponentFixtureNoNgZone\n - api/core/testing/DeferBlockBehavior\n - api/core/testing/DeferBlockFixture\n - api/core/testing/DeferBlockState\n - api/core/testing/InjectSetupWrapper\n - api/core/testing/MetadataOverride\n - api/core/testing/ModuleTeardownOptions\n - api/core/testing/TestBed\n - api/core/testing/TestBedStatic\n - api/core/testing/TestComponentRenderer\n - api/core/testing/TestEnvironmentOptions\n - api/core/testing/TestModuleMetadata\n - api/core/testing/async\n - api/core/testing/discardPeriodicTasks\n - api/core/testing/fakeAsync\n - api/core/testing/flush\n - api/core/testing/flushMicrotasks\n - api/core/testing/getTestBed\n - api/core/testing/inject\n - api/core/testing/resetFakeAsyncZone\n - api/core/testing/tick\n - api/core/testing/waitForAsync\n - api/core/testing/withModule\n - api/core/untracked\n - api/core/viewChild\n - api/core/viewChildren\n - guide/aot-compiler\n - guide/npm-packages\n-->\n<!-- links from this doc:\n - /api\n - /guide/dependency-injection-context\n - /guide/standalone-components\n - api/common/NgForOf\n - api/core#\n - api/core#angularcore\n - api/core#classes\n - api/core#decorators\n - api/core#elements\n - api/core#entry-points\n - api/core#functions\n - api/core#ngmodules\n - api/core#primary\n - api/core#primary-entry-point-exports\n - api/core#secondary\n - api/core#structures\n - api/core#types\n - api/core#主要\n - api/core#元素\n - api/core#函数\n - api/core#次要\n - api/core#类\n - api/core#类型\n - api/core#结构\n - api/core#装饰器\n - api/core/ANIMATION_MODULE_TYPE\n - api/core/APP_BOOTSTRAP_LISTENER\n - api/core/APP_ID\n - api/core/APP_INITIALIZER\n - api/core/AbstractType\n - api/core/AfterContentChecked\n - api/core/AfterContentInit\n - api/core/AfterRenderOptions\n - api/core/AfterRenderPhase\n - api/core/AfterRenderRef\n - api/core/AfterViewChecked\n - api/core/AfterViewInit\n - api/core/ApplicationConfig\n - api/core/ApplicationInitStatus\n - api/core/ApplicationModule\n - api/core/ApplicationRef\n - api/core/Attribute\n - api/core/BootstrapOptions\n - api/core/COMPILER_OPTIONS\n - api/core/CSP_NONCE\n - api/core/CUSTOM_ELEMENTS_SCHEMA\n - api/core/ChangeDetectionStrategy\n - api/core/ChangeDetectorRef\n - api/core/ClassProvider\n - api/core/ClassSansProvider\n - api/core/Compiler\n - api/core/CompilerFactory\n - api/core/CompilerOptions\n - api/core/Component\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - api/core/ComponentMirror\n - api/core/ComponentRef\n - api/core/ConstructorProvider\n - api/core/ConstructorSansProvider\n - api/core/ContentChild\n - api/core/ContentChildFunction\n - api/core/ContentChildren\n - api/core/CreateComputedOptions\n - api/core/CreateEffectOptions\n - api/core/CreateSignalOptions\n - api/core/DEFAULT_CURRENCY_CODE\n - api/core/DebugElement\n - api/core/DebugEventListener\n - api/core/DebugNode\n - api/core/DefaultIterableDiffer\n - api/core/DestroyRef\n - api/core/Directive\n - api/core/DoBootstrap\n - api/core/DoCheck\n - api/core/ENVIRONMENT_INITIALIZER\n - api/core/EffectCleanupFn\n - api/core/EffectCleanupRegisterFn\n - api/core/EffectRef\n - api/core/ElementRef\n - api/core/EmbeddedViewRef\n - api/core/EnvironmentInjector\n - api/core/EnvironmentProviders\n - api/core/ErrorHandler\n - api/core/EventEmitter\n - api/core/ExistingProvider\n - api/core/ExistingSansProvider\n - api/core/FactoryProvider\n - api/core/FactorySansProvider\n - api/core/ForwardRefFn\n - api/core/GetTestability\n - api/core/Host\n - api/core/HostAttributeToken\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/INJECTOR\n - api/core/ImportProvidersSource\n - api/core/ImportedNgModuleProviders\n - api/core/Inject\n - api/core/InjectFlags\n - api/core/InjectOptions\n - api/core/Injectable\n - api/core/InjectableProvider\n - api/core/InjectableType\n - api/core/InjectionToken\n - api/core/Injector\n - api/core/InjectorType\n - api/core/Input\n - api/core/InputFunction\n - api/core/InputOptions\n - api/core/InputOptionsWithTransform\n - api/core/InputOptionsWithoutTransform\n - api/core/InputSignal\n - api/core/InputSignalWithTransform\n - api/core/IterableChangeRecord\n - api/core/IterableChanges\n - api/core/IterableDiffer\n - api/core/IterableDifferFactory\n - api/core/IterableDiffers\n - api/core/KeyValueChangeRecord\n - api/core/KeyValueChanges\n - api/core/KeyValueDiffer\n - api/core/KeyValueDifferFactory\n - api/core/KeyValueDiffers\n - api/core/LOCALE_ID\n - api/core/MissingTranslationStrategy\n - api/core/ModelFunction\n - api/core/ModelOptions\n - api/core/ModelSignal\n - api/core/ModuleWithComponentFactories\n - api/core/ModuleWithProviders\n - api/core/NO_ERRORS_SCHEMA\n - api/core/NgIterable\n - api/core/NgModule\n - api/core/NgModule#id\n - api/core/NgModuleFactory\n - api/core/NgModuleRef\n - api/core/NgProbeToken\n - api/core/NgZone\n - api/core/NgZoneOptions\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/Optional\n - api/core/Output\n - api/core/PACKAGE_ROOT_URL\n - api/core/PLATFORM_ID\n - api/core/PLATFORM_INITIALIZER\n - api/core/Pipe\n - api/core/PipeTransform\n - api/core/PlatformRef\n - api/core/PlatformRef#bootstrapModule\n - api/core/Predicate\n - api/core/Provider\n - api/core/ProviderToken\n - api/core/Query\n - api/core/QueryList\n - api/core/Renderer2\n - api/core/RendererFactory2\n - api/core/RendererStyleFlags2\n - api/core/RendererType2\n - api/core/Sanitizer\n - api/core/SchemaMetadata\n - api/core/SecurityContext\n - api/core/Self\n - api/core/Signal\n - api/core/SimpleChange\n - api/core/SimpleChanges\n - api/core/SkipSelf\n - api/core/StateKey\n - api/core/StaticClassProvider\n - api/core/StaticClassSansProvider\n - api/core/StaticProvider\n - api/core/TRANSLATIONS\n - api/core/TRANSLATIONS_FORMAT\n - api/core/TemplateRef\n - api/core/Testability\n - api/core/TestabilityRegistry\n - api/core/TrackByFunction\n - api/core/TransferState\n - api/core/Type\n - api/core/TypeDecorator\n - api/core/TypeProvider\n - api/core/ValueEqualityFn\n - api/core/ValueProvider\n - api/core/ValueSansProvider\n - api/core/Version\n - api/core/ViewChild\n - api/core/ViewChildFunction\n - api/core/ViewChildren\n - api/core/ViewContainerRef\n - api/core/ViewEncapsulation\n - api/core/ViewEncapsulation#Emulated\n - api/core/ViewRef\n - api/core/WritableSignal\n - api/core/afterNextRender\n - api/core/afterRender\n - api/core/asNativeElements\n - api/core/assertInInjectionContext\n - api/core/assertNotInReactiveContext\n - api/core/assertPlatform\n - api/core/booleanAttribute\n - api/core/computed\n - api/core/contentChild\n - api/core/contentChildren\n - api/core/createComponent\n - api/core/createEnvironmentInjector\n - api/core/createNgModule\n - api/core/createNgModuleRef\n - api/core/createPlatform\n - api/core/createPlatformFactory\n - api/core/defineInjectable\n - api/core/destroyPlatform\n - api/core/effect\n - api/core/enableProdMode\n - api/core/forwardRef\n - api/core/getDebugNode\n - api/core/getModuleFactory\n - api/core/getNgModuleById\n - api/core/getPlatform\n - api/core/importProvidersFrom\n - api/core/inject\n - api/core/input\n - api/core/isDevMode\n - api/core/isSignal\n - api/core/isStandalone\n - api/core/makeEnvironmentProviders\n - api/core/makeStateKey\n - api/core/mergeApplicationConfig\n - api/core/model\n - api/core/ng-container\n - api/core/ng-content\n - api/core/ng-template\n - api/core/numberAttribute\n - api/core/platformCore\n - api/core/provideZoneChangeDetection\n - api/core/reflectComponentType\n - api/core/resolveForwardRef\n - api/core/runInInjectionContext\n - api/core/rxjs-interop\n - api/core/rxjs-interop/toSignal\n - api/core/setTestabilityGetter\n - api/core/signal\n - api/core/testing\n - api/core/untracked\n - api/core/viewChild\n - api/core/viewChildren\n - api/platform-browser/BrowserModule\n - api/platform-browser/bootstrapApplication\n - guide/dependency-injection-context\n - guide/dependency-injection-providers\n - guide/deprecations#jit-api-changes\n - guide/glossary#di-token\n - guide/glossary#provider\n - guide/glossary#view\n - guide/glossary#view-hierarchy\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/core/PACKAGE.md\n - https://web.dev/strict-csp/\n-->"}
{"id":"api/core/RendererType2","title":"RendererType2","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/core\", \"name\": \"@angular/core\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/core/RendererType2\", \"name\": \"RendererType2\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/core\">@angular/core</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/core/src/render/api_flags.ts#L10-L43\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"renderertype2\">RendererType2<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/RendererType2#renderertype2\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label interface\">interface</label>\n  </header>\n  \n\n  <div class=\"api-body\">\n  <section class=\"short-description\">\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"93qdjw7mzj76k53iimq8fzeho\">供 <code><a href=\"api/core/RendererFactory2\" class=\"code-anchor\">RendererFactory2</a></code> 用于将自定义渲染数据和样式与某个渲染器的实现相关联。</p>\n\n  </section><section class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/core/RendererType2\" class=\"code-anchor\">RendererType2</a> {\n  <a class=\"code-anchor\" href=\"api/core/RendererType2#id\"><span class=\"member-name\">id</span>: string</a>\n  <a class=\"code-anchor\" href=\"api/core/RendererType2#encapsulation\"><span class=\"member-name\">encapsulation</span>: ViewEncapsulation</a>\n  <a class=\"code-anchor\" href=\"api/core/RendererType2#styles\"><span class=\"member-name\">styles</span>: string[]</a>\n  <a class=\"code-anchor\" href=\"api/core/RendererType2#data\"><span class=\"member-name\">data</span>: {...}</a>\n}\n</code-example>\n\n\n</section>\n\n  \n  \n<section class=\"instance-properties\">\n  <a id=\"properties\"></a>\n  <h2 id=\"instance-properties\">属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/RendererType2#instance-properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>属性</th>\n        <th>说明</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"id\"></a>\n          <code class=\"\"><span class=\"member-name\">id</span>: string</code>\n        </td>\n        <td>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9githsp6qiigiusyh430jjoek\">创建新的封装样式时使用的新渲染器的唯一标识字符串。</p>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"encapsulation\"></a>\n          <code class=\"\"><span class=\"member-name\">encapsulation</span>: <a href=\"api/core/ViewEncapsulation\" class=\"code-anchor\">ViewEncapsulation</a></code>\n        </td>\n        <td>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3uo7dk1irlcrxgexqlxte0qf3\">视图封装类型，它确定如何将样式应用于 DOM 元素。为下列值之一</p>\n<ul>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"64vj2xvtogv7cibc9y98afu0s\"><code>Emulated</code>（默认）：模拟样式的原生作用域。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5u0nwuz1xqb0gd8islj8t32yl\"><code>Native</code>：使用渲染器的原生封装机制。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"8t75yphv13jime3nxxhfahdfn\"><code>ShadowDom</code>：使用现代<a href=\"https://w3c.github.io/webcomponents/spec/shadow/\">Shadow DOM</a>并为组件的宿主元素创建一个 ShadowRoot。</li>\n<li data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"46mkk57zewv56tao73tc0clij\"><code>None</code>：不提供任何模板或样式封装。</li>\n</ul>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"styles\"></a>\n          <code class=\"\"><span class=\"member-name\">styles</span>: string[]</code>\n        </td>\n        <td>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"a9d3r9ua4mfefgar32ssfd7k3\">定义要存储在渲染器实例上的 CSS 样式。</p>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"data\"></a>\n          <code class=\"\"><span class=\"member-name\">data</span>: {\n    [kind: string]: any;\n}</code>\n        </td>\n        <td>\n          <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"9xp3gapkqt46lk47vr5efoqt1\">定义要存储在渲染器实例上的任意由开发人员定义的数据。这对于要委托其他渲染器实现的渲染器很有用。</p>\n          \n        </td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n  \n</div>\n</article>\n\n<!-- links to this doc:\n - api/core\n - api/core/RendererFactory2\n-->\n<!-- links from this doc:\n - /api\n - api/core\n - api/core/RendererFactory2\n - api/core/RendererType2#data\n - api/core/RendererType2#encapsulation\n - api/core/RendererType2#id\n - api/core/RendererType2#instance-properties\n - api/core/RendererType2#renderertype2\n - api/core/RendererType2#styles\n - api/core/ViewEncapsulation\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/packages/core/src/render/api_flags.ts#L10-L43\n - https://w3c.github.io/webcomponents/spec/shadow/\n-->"}
{"id":"api/core/ng-container","title":"<ng-container>","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/core\", \"name\": \"@angular/core\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/core/ng-container\", \"name\": \"<ng-container>\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/core\">@angular/core</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/aio/content/special-elements/core/ng-container.md\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"ng-container\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cl8cr7qvzg2d4gm69f1deq7w3\">&lt;ng-container&gt;<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#ng-container\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label element\">element</label>\n  </header>\n  \n\n  <div class=\"api-body\">\n  <section class=\"short-description\">\n    <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cxjxek7u8i1t6h74965vl6qt5\">一种特殊元素，可以在不向 DOM 添加新元素的情况下承载结构型指令。</p>\n\n    <p><a href=\"api/core/ng-container#description\">查看更多...</a></p>\n  </section>\n\n\n\n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ak3cvcqxmq3me7fmmnvpxrgp0\"><code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 允许我们在没有任何额外元素的情况下使用结构型指令，确保对应用 DOM 的唯一更改就是由指令本身决定的。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"eq07l8evgc0z7u6paabb1adw9\">这不仅提高了性能（即使是轻微的），因为浏览器最终渲染的元素更少，而且你能得到更干净的 DOM 和样式。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"5dcayfzp8qha2hyu4zdoyo51x\">例如，它能让我们使用结构型指令，而不会破坏依赖于精确 DOM 结构的样式（例如，我们在使用 flex 容器、边距、子组合器选择器等时需要的样式）。</p>\n  <p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1fo6wgnv3qbs8nvpq20qx5rw1\">进一步的信息可在\n<a href=\"api/core/ng-container#usage-notes\">用法说明</a>中找到。</p>\n</section>\n\n<section class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <h3 id=\"with-ngifs\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"59yuelqdrjyxj8a41w8gq3hf7\">与 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 等一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#with-ngifs\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3yx2viq4su5sd47kyld4anlwi\"><code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 的一个常见用例是与结构型指令 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 一起使用。通过使用这种特殊元素，我们可以生成非常干净、易于理解和使用的模板。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wmuuhvmovez0wfm86gy5sv6h\">例如，我们可能希望根据条件显示多个元素，但它们不需要都位于同一个根元素下。这可以通过将它们包装在这样一个块中来轻松实现：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition\"&gt;\n  …\n&lt;/ng-container&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"23zvs14ege0ouf6kjr4wwe1nr\">这也可以通过 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 旁边的 <code>else</code> 语句进行扩充，如下所示：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition; else templateA\"&gt;\n  …\n&lt;/ng-container&gt;\n&lt;ng-template #templateA&gt;\n  …\n&lt;/ng-template&gt;\n\n</code-example>\n<h3 id=\"combination-of-multiple-structural-directives\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7ffggc5ufb1qv29qpc4vqs6ac\">组合使用多个结构型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#combination-of-multiple-structural-directives\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"bc20mys1d7sbmdgovv6zg76n0\">不能在同一个元素上使用多个结构型指令；如果你需要利用多个结构型指令，建议为每个结构型指令分别使用一个 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"u7m2cxhb48wysee8nu1hhg9s\">最常见的情况是使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>。例如，假设我们有一个条目列表，但只有在特定条件为真时才需要显示每个条目。我们可能会想这么做：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"item.isValid\"&gt;\n    {{ item.name }}\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"32a419d8a8ha7ynme19cs8lst\">正如我们所说的，这行不通，我们可以做的就是简单地将结构型指令之一移动到 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素，然后用它包裹另一个，如下所示：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;ul&gt;\n  &lt;ng-container *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;\n    &lt;li *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"item.isValid\"&gt;\n      {{ item.name }}\n    &lt;/li&gt;\n  &lt;/ng-container&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"c49o57h72jz4b6mwkvgsylisa\">这会如预期般工作，但不会在 DOM 中引入任何新的不必要的元素。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"3ge1igq5fjdmox9co1nj9xynb\">有关更多信息，参阅<a href=\"guide/structural-directives#one-per-element\">每个元素只能有一个结构型指令</a>。</p>\n<h3 id=\"use-alongside-ngtemplateoutlet\" data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"ap3kxdkjc7a2rphku5ebmkkqh\">与 ngTemplateOutlet 一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#use-alongside-ngtemplateoutlet\"><i class=\"material-icons\">link</i></a></h3>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1ud1gijbh4wyt5gaun90nr9lt\"><code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">NgTemplateOutlet</a></code> 指令可以应用于任何元素，但大多数时候它都会应用在 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素上。通过将两者结合起来，我们得到了一个非常清晰且易于遵循的 HTML 和 DOM 结构，其中不需要额外的元素，并且模板视图在被用到时才会实例化。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"cne0xcgjm9idxcwhggphslr9d\">例如，想象一下我们有一个很大的 HTML，其中一小部分需要在不同的地方重复。一个简单的解决方案是定义一个包含我们要重复的 HTML 的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 并在必要时通过使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 和 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">NgTemplateOutlet</a></code> 来渲染它。</p>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"1dx8lddze82enpo1eydsauvw2\">像这样：</p>\n<code-example format=\"html\" language=\"html\">\n\n&lt;!-- … --&gt;\n\n&lt;ng-container *<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>=\"tmpl; context: {$implicit: 'Hello'}\"&gt;\n&lt;/ng-container&gt;\n\n&lt;!-- … --&gt;\n\n&lt;ng-container *<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>=\"tmpl; context: {$implicit: 'World'}\"&gt;\n&lt;/ng-container&gt;\n\n&lt;!-- … --&gt;\n\n&lt;ng-template #tmpl let-text&gt;\n  &lt;h1&gt;{{ text }}&lt;/h1&gt;\n&lt;/ng-template&gt;\n\n</code-example>\n<p data-ng_translator_product=\"100\" data-ng_translator_ref_id=\"7wu0cfcjsv556lij5ugqjvv7o\">有关 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">NgTemplateOutlet</a></code> 的更多信息，请参阅 <a href=\"api/common/NgTemplateOutlet\"><code>NgTemplateOutlet</code> 的 API 文档页面</a>。</p>\n\n</section></div>\n</article>\n\n<!-- links to this doc:\n - api/core\n - guide/built-in-directives\n - guide/content-projection\n - guide/i18n-common-prepare\n - guide/structural-directives\n-->\n<!-- links from this doc:\n - /api\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgTemplateOutlet\n - api/core\n - api/core/ng-container#combination-of-multiple-structural-directives\n - api/core/ng-container#description\n - api/core/ng-container#ng-container\n - api/core/ng-container#usage-notes\n - api/core/ng-container#use-alongside-ngtemplateoutlet\n - api/core/ng-container#with-ngifs\n - api/core/ng-template\n - guide/structural-directives#one-per-element\n - https://github.com/ng-docs/angular-cn/tree/17.3.0-next.1/aio/content/special-elements/core/ng-container.md\n-->"}
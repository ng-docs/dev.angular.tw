{"version":3,"file":"src_app_custom-elements_announcement-bar_announcement-bar_module_ts.01d58361d9c10e31.js","mappings":"oTA8CEA,MAAA,UAAAA,CAAqD,WAEjDA,MAAA,UAAAA,CAA0C,SAE1CA,MAAA,SAAgDA,MAAA,gBAAUA,kCAFrDA,MAAA,GAAAA,MAAA,MAAAC,EAAAC,aAAAC,SAAAH,OACFA,cAAA,YAAAC,EAAAC,aAAAE,QAAAJ,OACeA,cAAA,OAAAC,EAAAC,aAAAG,QAAAL,QA7CxB,MAAMM,EAAoBC,KAAqB,qBAU/C,IAuCaC,EAAwB,MAXrC,MAWaA,EAGXC,YAAoBC,EAA0BC,GAA1BC,KAAAF,OAA0BE,KAAAD,QAAiB,CAE/DE,WACED,KAAKF,KAAKI,IAAoBR,GAC3BS,QACCC,KAAWC,IACTL,KAAKD,OAAOM,MAAM,IAAIC,MAAM,GAAGZ,qBAAqCW,EAAMb,YACnE,MACR,EACDe,KAAIC,GAAiBR,KAAKS,wBAAwBD,KAAc,EAChEJ,KAAWC,IACTL,KAAKD,OAAOM,MAAM,IAAIC,MAAM,GAAGZ,4BAA4CW,EAAMb,YAC1E,MAGVkB,UAAUpB,GAAgBU,KAAKV,aAAeA,EACnD,CAKQmB,wBAAwBD,GAC9B,OAAOA,EACJG,OAAOrB,GAAgB,IAAIsB,KAAKtB,EAAauB,WAAWC,UAAYF,KAAKG,OACzEJ,OAAOrB,GAAgB,IAAIsB,KAAKtB,EAAa0B,SAASF,UAAYF,KAAKG,OACvE,EACL,CAACE,SAAAjB,KAAA,mBAAAkB,iBA7BUtB,GAAwBR,MAAA+B,MAAA/B,MAAAgC,KAAA,EAAAH,SAAAjB,KAAA,UAAAqB,EAAAC,IAAA,MAAxB1B,EAAwB2B,UAAA,2BAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,mJAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,GARnCxC,MAAA,EAAA0C,EAAA,kBAAiC1C,MAAA,OAAAyC,EAAAvC,4DAQtBM,CAAwB,KC3CxBmC,EAAqB,MAJlC,MAIaA,EAJblC,cAKEG,KAAAgC,uBAAoCpC,EACrCqB,SAAAjB,KAAA,mBAAAkB,iBAFYa,EAAqB,EAAAd,SAAAjB,KAAA,UAAAqB,EAAAY,IAAA,MAArBF,IAAqBd,SAAAjB,KAAA,UAAAqB,EAAAa,IAAA,UAHrBC,KAAcC,IAAcC,eAG5BN,CAAqB","names":["i0","ctx_r0","announcement","imageUrl","message","linkUrl","announcementsPath","CONTENT_URL_PREFIX","AnnouncementBarComponent","constructor","http","logger","this","ngOnInit","get","pipe","catchError","error","Error","map","announcements","findCurrentAnnouncement","subscribe","filter","Date","startDate","valueOf","now","endDate","static","t","i1","i2","core","In1","selectors","decls","vars","consts","template","rf","ctx","AnnouncementBarComponent_div_0_Template","AnnouncementBarModule","customElementComponent","a4G","s3X","CommonModule","SharedModule","HttpClientModule"],"sourceRoot":"webpack:///","sources":["./src/app/custom-elements/announcement-bar/announcement-bar.component.ts","./src/app/custom-elements/announcement-bar/announcement-bar.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\nimport { Logger } from 'app/shared/logger.service';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\nconst announcementsPath = CONTENT_URL_PREFIX + 'announcements.json';\n\nexport interface Announcement {\n  imageUrl: string;\n  message: string;\n  linkUrl: string;\n  startDate: string;\n  endDate: string;\n}\n\n/**\n * Display the latest live announcement. This is used on the homepage.\n *\n * The data for the announcements is kept in `aio/content/marketing/announcements.json`.\n *\n * The format for that data file looks like:\n *\n * ```\n * [\n *   {\n *     \"startDate\": \"2018-02-01\",\n *     \"endDate\": \"2018-03-01\",\n *     \"message\": \"This is an <b>important</b> announcement\",\n *     \"imageUrl\": \"url/to/image\",\n *     \"linkUrl\": \"url/to/website\"\n *   },\n *   ...\n * ]\n * ```\n *\n * Only one announcement will be shown at any time. This is determined as the first \"live\"\n * announcement in the file, where \"live\" means that its start date is before today, and its\n * end date is after today.\n *\n * **Security Note:**\n * The `message` field can contain unsanitized HTML but this field should only updated by\n * verified members of the Angular team.\n */\n@Component({\n  selector: 'aio-announcement-bar',\n  template: `\n  <div class=\"homepage-container\" *ngIf=\"announcement\">\n    <div class=\"announcement-bar\">\n      <img [src]=\"announcement.imageUrl\" alt=\"\">\n      <p [innerHTML]=\"announcement.message\"></p>\n      <a class=\"button\" [href]=\"announcement.linkUrl\">Learn More</a>\n    </div>\n  </div>`\n})\nexport class AnnouncementBarComponent implements OnInit {\n  announcement: Announcement;\n\n  constructor(private http: HttpClient, private logger: Logger) {}\n\n  ngOnInit() {\n    this.http.get<Announcement[]>(announcementsPath)\n      .pipe(\n        catchError(error => {\n          this.logger.error(new Error(`${announcementsPath} request failed: ${error.message}`));\n          return [];\n        }),\n        map(announcements => this.findCurrentAnnouncement(announcements)),\n        catchError(error => {\n          this.logger.error(new Error(`${announcementsPath} contains invalid data: ${error.message}`));\n          return [];\n        }),\n      )\n      .subscribe(announcement => this.announcement = announcement);\n  }\n\n  /**\n   * Get the first date in the list that is \"live\" now\n   */\n  private findCurrentAnnouncement(announcements: Announcement[]) {\n    return announcements\n      .filter(announcement => new Date(announcement.startDate).valueOf() < Date.now())\n      .filter(announcement => new Date(announcement.endDate).valueOf() > Date.now())\n      [0];\n  }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SharedModule } from '../../shared/shared.module';\nimport { AnnouncementBarComponent } from './announcement-bar.component';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n  imports: [ CommonModule, SharedModule, HttpClientModule ],\n  declarations: [ AnnouncementBarComponent ]\n})\nexport class AnnouncementBarModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = AnnouncementBarComponent;\n}\n"],"x_google_ignoreList":[]}